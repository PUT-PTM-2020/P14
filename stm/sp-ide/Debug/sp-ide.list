
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800d900  0800d900  0001d900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df50  0800df50  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800df50  0800df50  0001df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df58  0800df58  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df58  0800df58  0001df58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800df60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d4  20000238  0800e198  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000360c  0800e198  0002360c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186d6  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000364f  00000000  00000000  0003893e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b8  00000000  00000000  0003bf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  0003d648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247b7  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001407a  00000000  00000000  0006336f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7aed  00000000  00000000  000773e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014eed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ec  00000000  00000000  0014ef54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8e8 	.word	0x0800d8e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800d8e8 	.word	0x0800d8e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HTTP_Init>:
char _line[MAX_LINE_LEN];

#define _resetResponse() for(int i=0;i<MAX_RESPONSE_LEN;i++)_response[i]=0
#define _resetLine() for(int i=0;i<MAX_LINE_LEN;i++)_line[i]=0

void HTTP_Init(void) {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_HTTP_ParseHeader>:

char* _HTTP_ParseHeader(char *response, char *contentType, uint32_t length,
		char *connection) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
	_resetResponse();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	e007      	b.n	8000efc <_HTTP_ParseHeader+0x24>
 8000eec:	4a36      	ldr	r2, [pc, #216]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	4413      	add	r3, r2
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	3301      	adds	r3, #1
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000f02:	dbf3      	blt.n	8000eec <_HTTP_ParseHeader+0x14>
	_resetLine();
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	e007      	b.n	8000f1a <_HTTP_ParseHeader+0x42>
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	4413      	add	r3, r2
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	3301      	adds	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	2b63      	cmp	r3, #99	; 0x63
 8000f1e:	ddf4      	ble.n	8000f0a <_HTTP_ParseHeader+0x32>

	sprintf(_line, "HTTP/1.1 %s\r\n", response);
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	492b      	ldr	r1, [pc, #172]	; (8000fd0 <_HTTP_ParseHeader+0xf8>)
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f26:	f00b f851 	bl	800bfcc <siprintf>
	strcpy(_response, _line);
 8000f2a:	4928      	ldr	r1, [pc, #160]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
 8000f2e:	f00b f87c 	bl	800c02a <strcpy>
	_resetLine();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e007      	b.n	8000f48 <_HTTP_ParseHeader+0x70>
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b63      	cmp	r3, #99	; 0x63
 8000f4c:	ddf4      	ble.n	8000f38 <_HTTP_ParseHeader+0x60>

	sprintf(_line, "Content-Type: %s\r\n", contentType);
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4920      	ldr	r1, [pc, #128]	; (8000fd4 <_HTTP_ParseHeader+0xfc>)
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f54:	f00b f83a 	bl	800bfcc <siprintf>
	strcat(_response, _line);
 8000f58:	491c      	ldr	r1, [pc, #112]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
 8000f5c:	f00b f856 	bl	800c00c <strcat>
	_resetLine();
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	e007      	b.n	8000f76 <_HTTP_ParseHeader+0x9e>
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	3301      	adds	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	2b63      	cmp	r3, #99	; 0x63
 8000f7a:	ddf4      	ble.n	8000f66 <_HTTP_ParseHeader+0x8e>

	sprintf(_line, "Content-Lenght: %ld\r\n", length);
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4916      	ldr	r1, [pc, #88]	; (8000fd8 <_HTTP_ParseHeader+0x100>)
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f82:	f00b f823 	bl	800bfcc <siprintf>
	strcat(_response, _line);
 8000f86:	4911      	ldr	r1, [pc, #68]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f88:	480f      	ldr	r0, [pc, #60]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
 8000f8a:	f00b f83f 	bl	800c00c <strcat>
	_resetLine();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e007      	b.n	8000fa4 <_HTTP_ParseHeader+0xcc>
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b63      	cmp	r3, #99	; 0x63
 8000fa8:	ddf4      	ble.n	8000f94 <_HTTP_ParseHeader+0xbc>

	sprintf(_line, "Connection: %s\r\n\r\n", connection);
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	490b      	ldr	r1, [pc, #44]	; (8000fdc <_HTTP_ParseHeader+0x104>)
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000fb0:	f00b f80c 	bl	800bfcc <siprintf>
	strcat(_response, _line);
 8000fb4:	4905      	ldr	r1, [pc, #20]	; (8000fcc <_HTTP_ParseHeader+0xf4>)
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
 8000fb8:	f00b f828 	bl	800c00c <strcat>

	return (char*) _response;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <_HTTP_ParseHeader+0xf0>)
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002d4 	.word	0x200002d4
 8000fcc:	20000270 	.word	0x20000270
 8000fd0:	0800d900 	.word	0x0800d900
 8000fd4:	0800d910 	.word	0x0800d910
 8000fd8:	0800d924 	.word	0x0800d924
 8000fdc:	0800d93c 	.word	0x0800d93c

08000fe0 <HTTP_HandleRequest>:

void HTTP_HandleRequest(char *request, char connID) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	int cursor = NET_GetIndexForPattern(GET_FILE_PATTERN);
 8000fec:	482a      	ldr	r0, [pc, #168]	; (8001098 <HTTP_HandleRequest+0xb8>)
 8000fee:	f001 fdf9 	bl	8002be4 <NET_GetIndexForPattern>
 8000ff2:	61f8      	str	r0, [r7, #28]
	int index = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]

	if (cursor != -1) {
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffe:	d009      	beq.n	8001014 <HTTP_HandleRequest+0x34>
		while (request[cursor++] != ' ')
 8001000:	bf00      	nop
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	61fa      	str	r2, [r7, #28]
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b20      	cmp	r3, #32
 8001012:	d1f6      	bne.n	8001002 <HTTP_HandleRequest+0x22>
			;
	}

	if (index == 0) {
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d129      	bne.n	800106e <HTTP_HandleRequest+0x8e>
		uint32_t size = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
		bool close = false;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]

		char *data = SD_ReadFile("index.htm", &size);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4619      	mov	r1, r3
 8001028:	481c      	ldr	r0, [pc, #112]	; (800109c <HTTP_HandleRequest+0xbc>)
 800102a:	f002 fe1f 	bl	8003c6c <SD_ReadFile>
 800102e:	6138      	str	r0, [r7, #16]
		char *header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_KEEP);
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HTTP_HandleRequest+0xc0>)
 8001034:	491b      	ldr	r1, [pc, #108]	; (80010a4 <HTTP_HandleRequest+0xc4>)
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <HTTP_HandleRequest+0xc8>)
 8001038:	f7ff ff4e 	bl	8000ed8 <_HTTP_ParseHeader>
 800103c:	60f8      	str	r0, [r7, #12]

		if (NET_GetIndexForPattern(CN_KEEP) == -1) {
 800103e:	4818      	ldr	r0, [pc, #96]	; (80010a0 <HTTP_HandleRequest+0xc0>)
 8001040:	f001 fdd0 	bl	8002be4 <NET_GetIndexForPattern>
 8001044:	4603      	mov	r3, r0
 8001046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104a:	d101      	bne.n	8001050 <HTTP_HandleRequest+0x70>
			close = true;
 800104c:	2301      	movs	r3, #1
 800104e:	75fb      	strb	r3, [r7, #23]
		}

		NET_SendData(connID, header);
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f949 	bl	80032ec <NET_SendData>
		NET_SendData(connID, data);
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	6939      	ldr	r1, [r7, #16]
 800105e:	4618      	mov	r0, r3
 8001060:	f002 f944 	bl	80032ec <NET_SendData>

		NET_CloseConn(connID);
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f99e 	bl	80033a8 <NET_CloseConn>
	} else {
		NET_SendData(connID,
				_HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, 0, CN_CLOSE));
		NET_CloseConn(connID);
	}
}
 800106c:	e00f      	b.n	800108e <HTTP_HandleRequest+0xae>
		NET_SendData(connID,
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HTTP_HandleRequest+0xcc>)
 8001070:	2200      	movs	r2, #0
 8001072:	490c      	ldr	r1, [pc, #48]	; (80010a4 <HTTP_HandleRequest+0xc4>)
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <HTTP_HandleRequest+0xd0>)
 8001076:	f7ff ff2f 	bl	8000ed8 <_HTTP_ParseHeader>
 800107a:	4602      	mov	r2, r0
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f933 	bl	80032ec <NET_SendData>
		NET_CloseConn(connID);
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f98d 	bl	80033a8 <NET_CloseConn>
}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	0800d950 	.word	0x0800d950
 800109c:	0800d958 	.word	0x0800d958
 80010a0:	0800d964 	.word	0x0800d964
 80010a4:	0800d970 	.word	0x0800d970
 80010a8:	0800d97c 	.word	0x0800d97c
 80010ac:	0800d984 	.word	0x0800d984
 80010b0:	0800d98c 	.word	0x0800d98c

080010b4 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <_LCD_SetRowOffsets+0x3c>)
 80010c8:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_LCD_SetRowOffsets+0x3c>)
 80010d0:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <_LCD_SetRowOffsets+0x3c>)
 80010d8:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <_LCD_SetRowOffsets+0x3c>)
 80010e0:	70da      	strb	r2, [r3, #3]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000474 	.word	0x20000474

080010f4 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	480b      	ldr	r0, [pc, #44]	; (800112c <_LCD_EnableSignal+0x38>)
 80010fe:	f006 fe53 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f006 fb48 	bl	8007798 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <_LCD_EnableSignal+0x38>)
 800110e:	f006 fe4b 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f006 fb40 	bl	8007798 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <_LCD_EnableSignal+0x38>)
 800111e:	f006 fe43 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f006 fb38 	bl	8007798 <HAL_Delay>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000

08001130 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e012      	b.n	8001166 <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _readyData[i],
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_LCD_WriteData+0x48>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	fa42 f303 	asr.w	r3, r2, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _readyData[i],
 8001158:	461a      	mov	r2, r3
 800115a:	4808      	ldr	r0, [pc, #32]	; (800117c <_LCD_WriteData+0x4c>)
 800115c:	f006 fe24 	bl	8007da8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b03      	cmp	r3, #3
 800116a:	dde9      	ble.n	8001140 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 800116c:	f7ff ffc2 	bl	80010f4 <_LCD_EnableSignal>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000468 	.word	0x20000468
 800117c:	40021000 	.word	0x40021000

08001180 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	461a      	mov	r2, r3
 8001194:	2110      	movs	r1, #16
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <_LCD_SendByteWithState+0x44>)
 8001198:	f006 fe06 	bl	8007da8 <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <_LCD_SendByteWithState+0x44>)
 80011a2:	f006 fe01 	bl	8007da8 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffbf 	bl	8001130 <_LCD_WriteData>
	_LCD_WriteData(value);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffbb 	bl	8001130 <_LCD_WriteData>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffd2 	bl	8001180 <_LCD_SendByteWithState>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ffc1 	bl	8001180 <_LCD_SendByteWithState>

	if (moveCursor) {
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d021      	beq.n	8001248 <_LCD_SendData+0x64>
		++_currentCol;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <_LCD_SendData+0x6c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <_LCD_SendData+0x6c>)
 800120e:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <_LCD_SendData+0x6c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b13      	cmp	r3, #19
 8001216:	d917      	bls.n	8001248 <_LCD_SendData+0x64>
			_currentCol = 0;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <_LCD_SendData+0x6c>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <_LCD_SendData+0x70>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <_LCD_SendData+0x70>)
 8001228:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <_LCD_SendData+0x70>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d902      	bls.n	8001238 <_LCD_SendData+0x54>
				_currentRow = 0;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <_LCD_SendData+0x70>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <_LCD_SendData+0x6c>)
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <_LCD_SendData+0x70>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	4610      	mov	r0, r2
 8001244:	f000 f900 	bl	8001448 <LCD_SetCursor>
		}
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000479 	.word	0x20000479
 8001254:	20000464 	.word	0x20000464

08001258 <LCD_Init>:

void LCD_Init(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
	/* Piny danych */
	_readyData[0] = D4_PIN;
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <LCD_Init+0x150>)
 8001260:	2201      	movs	r2, #1
 8001262:	801a      	strh	r2, [r3, #0]
	_readyData[1] = D5_PIN;
 8001264:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <LCD_Init+0x150>)
 8001266:	2202      	movs	r2, #2
 8001268:	805a      	strh	r2, [r3, #2]
	_readyData[2] = D6_PIN;
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <LCD_Init+0x150>)
 800126c:	2204      	movs	r2, #4
 800126e:	809a      	strh	r2, [r3, #4]
	_readyData[3] = D7_PIN;
 8001270:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <LCD_Init+0x150>)
 8001272:	2208      	movs	r2, #8
 8001274:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 8001276:	4b4d      	ldr	r3, [pc, #308]	; (80013ac <LCD_Init+0x154>)
 8001278:	2208      	movs	r2, #8
 800127a:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 800127c:	f000 f8ba 	bl	80013f4 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 8001280:	2354      	movs	r3, #84	; 0x54
 8001282:	2214      	movs	r2, #20
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff14 	bl	80010b4 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f006 fa83 	bl	8007798 <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2110      	movs	r1, #16
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <LCD_Init+0x158>)
 8001298:	f006 fd86 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4843      	ldr	r0, [pc, #268]	; (80013b0 <LCD_Init+0x158>)
 80012a2:	f006 fd81 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2120      	movs	r1, #32
 80012aa:	4841      	ldr	r0, [pc, #260]	; (80013b0 <LCD_Init+0x158>)
 80012ac:	f006 fd7c 	bl	8007da8 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f7ff ff3d 	bl	8001130 <_LCD_WriteData>
	HAL_Delay(5);
 80012b6:	2005      	movs	r0, #5
 80012b8:	f006 fa6e 	bl	8007798 <HAL_Delay>

	_LCD_WriteData(0x03);
 80012bc:	2003      	movs	r0, #3
 80012be:	f7ff ff37 	bl	8001130 <_LCD_WriteData>
	HAL_Delay(5);
 80012c2:	2005      	movs	r0, #5
 80012c4:	f006 fa68 	bl	8007798 <HAL_Delay>

	_LCD_WriteData(0x03);
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff ff31 	bl	8001130 <_LCD_WriteData>
	HAL_Delay(1);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f006 fa62 	bl	8007798 <HAL_Delay>

	_LCD_WriteData(0x02);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff ff2b 	bl	8001130 <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <LCD_Init+0x154>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff6f 	bl	80011c8 <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <LCD_Init+0x15c>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 80012f0:	f000 f8da 	bl	80014a8 <LCD_DisplayOn>
	LCD_ClearScreen();
 80012f4:	f000 f896 	bl	8001424 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <LCD_Init+0x160>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <LCD_Init+0x160>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <_LCD_SendCommand>

	_currentRow = 0;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <LCD_Init+0x164>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <LCD_Init+0x168>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 800131a:	482a      	ldr	r0, [pc, #168]	; (80013c4 <LCD_Init+0x16c>)
 800131c:	f000 f956 	bl	80015cc <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8001320:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <LCD_Init+0x170>)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4619      	mov	r1, r3
 8001334:	2007      	movs	r0, #7
 8001336:	f000 fb59 	bl	80019ec <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 800133a:	4a24      	ldr	r2, [pc, #144]	; (80013cc <LCD_Init+0x174>)
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001344:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4619      	mov	r1, r3
 800134e:	2006      	movs	r0, #6
 8001350:	f000 fb4c 	bl	80019ec <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <LCD_Init+0x178>)
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	2005      	movs	r0, #5
 800136a:	f000 fb3f 	bl	80019ec <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <LCD_Init+0x17c>)
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001378:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	2004      	movs	r0, #4
 8001384:	f000 fb32 	bl	80019ec <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <LCD_Init+0x180>)
 800138a:	463b      	mov	r3, r7
 800138c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001390:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	2003      	movs	r0, #3
 800139a:	f000 fb27 	bl	80019ec <LCD_DefineCustomChar>
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000468 	.word	0x20000468
 80013ac:	20000470 	.word	0x20000470
 80013b0:	40021000 	.word	0x40021000
 80013b4:	20000478 	.word	0x20000478
 80013b8:	2000047a 	.word	0x2000047a
 80013bc:	20000464 	.word	0x20000464
 80013c0:	20000479 	.word	0x20000479
 80013c4:	0800d99c 	.word	0x0800d99c
 80013c8:	0800d9a8 	.word	0x0800d9a8
 80013cc:	0800d9b0 	.word	0x0800d9b0
 80013d0:	0800d9b8 	.word	0x0800d9b8
 80013d4:	0800d9c0 	.word	0x0800d9c0
 80013d8:	0800d9c8 	.word	0x0800d9c8

080013dc <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 80013e0:	f000 f808 	bl	80013f4 <LCD_BackgroundOn>
	ResetTIM(3);
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <LCD_WakeScreen+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20003508 	.word	0x20003508

080013f4 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <LCD_BackgroundOn+0x14>)
 8001400:	f006 fcd2 	bl	8007da8 <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40020800 	.word	0x40020800

0800140c <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	4802      	ldr	r0, [pc, #8]	; (8001420 <LCD_BackgroundOff+0x14>)
 8001418:	f006 fcc6 	bl	8007da8 <HAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020800 	.word	0x40020800

08001424 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fecd 	bl	80011c8 <_LCD_SendCommand>
	LCD_ResetCursor();
 800142e:	f000 f802 	bl	8001436 <LCD_ResetCursor>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}

08001436 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
	LCD_SetCursor(0, 0);
 800143a:	2100      	movs	r1, #0
 800143c:	2000      	movs	r0, #0
 800143e:	f000 f803 	bl	8001448 <LCD_SetCursor>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d901      	bls.n	8001462 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 800145e:	2303      	movs	r3, #3
 8001460:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b13      	cmp	r3, #19
 8001466:	d901      	bls.n	800146c <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 8001468:	2313      	movs	r3, #19
 800146a:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LCD_SetCursor+0x54>)
 8001470:	5cd2      	ldrb	r2, [r2, r3]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4413      	add	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	b25b      	sxtb	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fea0 	bl	80011c8 <_LCD_SendCommand>
	_currentRow = row;
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <LCD_SetCursor+0x58>)
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <LCD_SetCursor+0x5c>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	7013      	strb	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000474 	.word	0x20000474
 80014a0:	20000464 	.word	0x20000464
 80014a4:	20000479 	.word	0x20000479

080014a8 <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LCD_DisplayOn+0x28>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <LCD_DisplayOn+0x28>)
 80014b8:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LCD_DisplayOn+0x28>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe7f 	bl	80011c8 <_LCD_SendCommand>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000478 	.word	0x20000478

080014d4 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <LCD_DisableCursor+0x28>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f023 0302 	bic.w	r3, r3, #2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <LCD_DisableCursor+0x28>)
 80014e4:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <LCD_DisableCursor+0x28>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fe69 	bl	80011c8 <_LCD_SendCommand>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000478 	.word	0x20000478

08001500 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <LCD_EnableCursor+0x28>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <LCD_EnableCursor+0x28>)
 8001510:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <LCD_EnableCursor+0x28>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe53 	bl	80011c8 <_LCD_SendCommand>
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000478 	.word	0x20000478

0800152c <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LCD_DisableBlink+0x28>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <LCD_DisableBlink+0x28>)
 800153c:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <LCD_DisableBlink+0x28>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe3d 	bl	80011c8 <_LCD_SendCommand>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000478 	.word	0x20000478

08001558 <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <LCD_EnableBlink+0x28>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <LCD_EnableBlink+0x28>)
 8001568:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LCD_EnableBlink+0x28>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe27 	bl	80011c8 <_LCD_SendCommand>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000478 	.word	0x20000478

08001584 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d018      	beq.n	80015c4 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe fe24 	bl	80001e4 <strlen>
 800159c:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e00a      	b.n	80015ba <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4413      	add	r3, r2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fe18 	bl	80011e4 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d8f0      	bhi.n	80015a4 <LCD_Print+0x20>
 80015c2:	e000      	b.n	80015c6 <LCD_Print+0x42>
		return;
 80015c4:	bf00      	nop
	}
}
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7fe fe05 	bl	80001e4 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b14      	cmp	r3, #20
 80015e2:	dc14      	bgt.n	800160e <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f1c3 0314 	rsb	r3, r3, #20
 80015ea:	0fda      	lsrs	r2, r3, #31
 80015ec:	4413      	add	r3, r2
 80015ee:	105b      	asrs	r3, r3, #1
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <LCD_PrintCentered+0x4c>)
 80015f4:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LCD_PrintCentered+0x4c>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <LCD_PrintCentered+0x50>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7ff ff21 	bl	8001448 <LCD_SetCursor>
	LCD_Print(str);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffbc 	bl	8001584 <LCD_Print>
 800160c:	e000      	b.n	8001610 <LCD_PrintCentered+0x44>
		return;
 800160e:	bf00      	nop
}
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000479 	.word	0x20000479
 800161c:	20000464 	.word	0x20000464

08001620 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8104 	beq.w	800183a <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800163c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001644:	d50e      	bpl.n	8001664 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff8c 	bl	8000568 <__aeabi_f2d>
 8001650:	4603      	mov	r3, r0
 8001652:	460c      	mov	r4, r1
 8001654:	f107 0014 	add.w	r0, r7, #20
 8001658:	461a      	mov	r2, r3
 800165a:	4623      	mov	r3, r4
 800165c:	4979      	ldr	r1, [pc, #484]	; (8001844 <LCD_PrintTempInfo+0x224>)
 800165e:	f00a fcb5 	bl	800bfcc <siprintf>
 8001662:	e00d      	b.n	8001680 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff7d 	bl	8000568 <__aeabi_f2d>
 800166e:	4603      	mov	r3, r0
 8001670:	460c      	mov	r4, r1
 8001672:	f107 0014 	add.w	r0, r7, #20
 8001676:	461a      	mov	r2, r3
 8001678:	4623      	mov	r3, r4
 800167a:	4973      	ldr	r1, [pc, #460]	; (8001848 <LCD_PrintTempInfo+0x228>)
 800167c:	f00a fca6 	bl	800bfcc <siprintf>

	if (data1[1] < 10.f)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3304      	adds	r3, #4
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800168c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d50f      	bpl.n	80016b6 <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff63 	bl	8000568 <__aeabi_f2d>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	f107 0008 	add.w	r0, r7, #8
 80016aa:	461a      	mov	r2, r3
 80016ac:	4623      	mov	r3, r4
 80016ae:	4967      	ldr	r1, [pc, #412]	; (800184c <LCD_PrintTempInfo+0x22c>)
 80016b0:	f00a fc8c 	bl	800bfcc <siprintf>
 80016b4:	e020      	b.n	80016f8 <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3304      	adds	r3, #4
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001850 <LCD_PrintTempInfo+0x230>
 80016c2:	eef4 7a47 	vcmp.f32	s15, s14
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d106      	bne.n	80016da <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4960      	ldr	r1, [pc, #384]	; (8001854 <LCD_PrintTempInfo+0x234>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f00a fc7a 	bl	800bfcc <siprintf>
 80016d8:	e00e      	b.n	80016f8 <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3304      	adds	r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff41 	bl	8000568 <__aeabi_f2d>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	f107 0008 	add.w	r0, r7, #8
 80016ee:	461a      	mov	r2, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	4959      	ldr	r1, [pc, #356]	; (8001858 <LCD_PrintTempInfo+0x238>)
 80016f4:	f00a fc6a 	bl	800bfcc <siprintf>

	if (data2 != NULL) {
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8088 	beq.w	8001810 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001700:	2101      	movs	r1, #1
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fea0 	bl	8001448 <LCD_SetCursor>
		LCD_Print(temp);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff39 	bl	8001584 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001712:	2102      	movs	r1, #2
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff fe97 	bl	8001448 <LCD_SetCursor>
		LCD_Print(rh);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff30 	bl	8001584 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d50e      	bpl.n	8001756 <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff13 	bl	8000568 <__aeabi_f2d>
 8001742:	4603      	mov	r3, r0
 8001744:	460c      	mov	r4, r1
 8001746:	f107 0014 	add.w	r0, r7, #20
 800174a:	461a      	mov	r2, r3
 800174c:	4623      	mov	r3, r4
 800174e:	4943      	ldr	r1, [pc, #268]	; (800185c <LCD_PrintTempInfo+0x23c>)
 8001750:	f00a fc3c 	bl	800bfcc <siprintf>
 8001754:	e00d      	b.n	8001772 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff04 	bl	8000568 <__aeabi_f2d>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	f107 0014 	add.w	r0, r7, #20
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	493c      	ldr	r1, [pc, #240]	; (8001860 <LCD_PrintTempInfo+0x240>)
 800176e:	f00a fc2d 	bl	800bfcc <siprintf>

		if (data2[1] < 10.f)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3304      	adds	r3, #4
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d50f      	bpl.n	80017a8 <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3304      	adds	r3, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feea 	bl	8000568 <__aeabi_f2d>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	f107 0008 	add.w	r0, r7, #8
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	4930      	ldr	r1, [pc, #192]	; (8001864 <LCD_PrintTempInfo+0x244>)
 80017a2:	f00a fc13 	bl	800bfcc <siprintf>
 80017a6:	e020      	b.n	80017ea <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3304      	adds	r3, #4
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001850 <LCD_PrintTempInfo+0x230>
 80017b4:	eef4 7a47 	vcmp.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	d106      	bne.n	80017cc <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4929      	ldr	r1, [pc, #164]	; (8001868 <LCD_PrintTempInfo+0x248>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00a fc01 	bl	800bfcc <siprintf>
 80017ca:	e00e      	b.n	80017ea <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	3304      	adds	r3, #4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fec8 	bl	8000568 <__aeabi_f2d>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	f107 0008 	add.w	r0, r7, #8
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	4921      	ldr	r1, [pc, #132]	; (800186c <LCD_PrintTempInfo+0x24c>)
 80017e6:	f00a fbf1 	bl	800bfcc <siprintf>

		LCD_SetCursor(16, 1);
 80017ea:	2101      	movs	r1, #1
 80017ec:	2010      	movs	r0, #16
 80017ee:	f7ff fe2b 	bl	8001448 <LCD_SetCursor>
		LCD_Print(temp);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fec4 	bl	8001584 <LCD_Print>
		LCD_SetCursor(16, 2);
 80017fc:	2102      	movs	r1, #2
 80017fe:	2010      	movs	r0, #16
 8001800:	f7ff fe22 	bl	8001448 <LCD_SetCursor>
		LCD_Print(rh);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff febb 	bl	8001584 <LCD_Print>
 800180e:	e010      	b.n	8001832 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001810:	2101      	movs	r1, #1
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fe18 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered(temp);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fed5 	bl	80015cc <LCD_PrintCentered>
		LCD_NextLine("");
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <LCD_PrintTempInfo+0x250>)
 8001824:	f000 f826 	bl	8001874 <LCD_NextLine>
		LCD_PrintCentered(rh);
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fecd 	bl	80015cc <LCD_PrintCentered>
	}
	LCD_NextLine("");
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <LCD_PrintTempInfo+0x250>)
 8001834:	f000 f81e 	bl	8001874 <LCD_NextLine>
 8001838:	e000      	b.n	800183c <LCD_PrintTempInfo+0x21c>
		return;
 800183a:	bf00      	nop
}
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	0800d9d0 	.word	0x0800d9d0
 8001848:	0800d9d8 	.word	0x0800d9d8
 800184c:	0800d9e0 	.word	0x0800d9e0
 8001850:	42c80000 	.word	0x42c80000
 8001854:	0800d9ec 	.word	0x0800d9ec
 8001858:	0800d9f4 	.word	0x0800d9f4
 800185c:	0800d9fc 	.word	0x0800d9fc
 8001860:	0800da04 	.word	0x0800da04
 8001864:	0800da0c 	.word	0x0800da0c
 8001868:	0800da18 	.word	0x0800da18
 800186c:	0800da20 	.word	0x0800da20
 8001870:	0800da28 	.word	0x0800da28

08001874 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fe81 	bl	8001584 <LCD_Print>

	_currentCol = 0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <LCD_NextLine+0x48>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <LCD_NextLine+0x4c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <LCD_NextLine+0x4c>)
 8001892:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <LCD_NextLine+0x4c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d902      	bls.n	80018a2 <LCD_NextLine+0x2e>
		_currentRow = 0;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LCD_NextLine+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <LCD_NextLine+0x48>)
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <LCD_NextLine+0x4c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f7ff fdcb 	bl	8001448 <LCD_SetCursor>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000479 	.word	0x20000479
 80018c0:	20000464 	.word	0x20000464

080018c4 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <LCD_CursorUp+0x30>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <LCD_CursorUp+0x18>
		--_currentRow;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LCD_CursorUp+0x30>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <LCD_CursorUp+0x30>)
 80018da:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <LCD_CursorUp+0x34>)
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <LCD_CursorUp+0x30>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fdae 	bl	8001448 <LCD_SetCursor>
	return _currentRow;
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <LCD_CursorUp+0x30>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000464 	.word	0x20000464
 80018f8:	20000479 	.word	0x20000479

080018fc <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <LCD_CursorDown+0x30>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d805      	bhi.n	8001914 <LCD_CursorDown+0x18>
		++_currentRow;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <LCD_CursorDown+0x30>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <LCD_CursorDown+0x30>)
 8001912:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <LCD_CursorDown+0x34>)
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <LCD_CursorDown+0x30>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fd92 	bl	8001448 <LCD_SetCursor>
	return _currentRow;
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <LCD_CursorDown+0x30>)
 8001926:	781b      	ldrb	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000464 	.word	0x20000464
 8001930:	20000479 	.word	0x20000479

08001934 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <LCD_CursorLeft+0x54>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <LCD_CursorLeft+0x1a>
		--_currentCol;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <LCD_CursorLeft+0x54>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <LCD_CursorLeft+0x54>)
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	e010      	b.n	8001970 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <LCD_CursorLeft+0x54>)
 8001950:	2213      	movs	r2, #19
 8001952:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <LCD_CursorLeft+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d103      	bne.n	8001964 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <LCD_CursorLeft+0x58>)
 800195e:	2203      	movs	r2, #3
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e005      	b.n	8001970 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <LCD_CursorLeft+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <LCD_CursorLeft+0x58>)
 800196e:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LCD_CursorLeft+0x54>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <LCD_CursorLeft+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fd64 	bl	8001448 <LCD_SetCursor>
	return _currentCol;
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <LCD_CursorLeft+0x54>)
 8001982:	781b      	ldrb	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000479 	.word	0x20000479
 800198c:	20000464 	.word	0x20000464

08001990 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <LCD_CursorRight+0x54>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b12      	cmp	r3, #18
 800199a:	d806      	bhi.n	80019aa <LCD_CursorRight+0x1a>
		++_currentCol;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <LCD_CursorRight+0x54>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <LCD_CursorRight+0x54>)
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e010      	b.n	80019cc <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <LCD_CursorRight+0x54>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <LCD_CursorRight+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d103      	bne.n	80019c0 <LCD_CursorRight+0x30>
			_currentRow = 0;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <LCD_CursorRight+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e005      	b.n	80019cc <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <LCD_CursorRight+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <LCD_CursorRight+0x58>)
 80019ca:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LCD_CursorRight+0x54>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <LCD_CursorRight+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff fd36 	bl	8001448 <LCD_SetCursor>
	return _currentCol;
 80019dc:	4b01      	ldr	r3, [pc, #4]	; (80019e4 <LCD_CursorRight+0x54>)
 80019de:	781b      	ldrb	r3, [r3, #0]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000479 	.word	0x20000479
 80019e8:	20000464 	.word	0x20000464

080019ec <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fbda 	bl	80011c8 <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	e00a      	b.n	8001a30 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fbdd 	bl	80011e4 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	ddf1      	ble.n	8001a1a <LCD_DefineCustomChar+0x2e>
	}
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fcfb 	bl	8001448 <LCD_SetCursor>
	LCD_Print(date);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fd96 	bl	8001584 <LCD_Print>
	LCD_SetCursor(12, 0);
 8001a58:	2100      	movs	r1, #0
 8001a5a:	200c      	movs	r0, #12
 8001a5c:	f7ff fcf4 	bl	8001448 <LCD_SetCursor>
	LCD_Print(time);
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f7ff fd8f 	bl	8001584 <LCD_Print>
	LCD_NextLine("");
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <LCD_PrintDateTime+0x34>)
 8001a68:	f7ff ff04 	bl	8001874 <LCD_NextLine>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	0800da28 	.word	0x0800da28

08001a78 <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fbac 	bl	80011e4 <_LCD_SendData>
	LCD_CursorLeft();
 8001a8c:	f7ff ff52 	bl	8001934 <LCD_CursorLeft>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
	int column = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3330      	adds	r3, #48	; 0x30
 8001ab0:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e00c      	b.n	8001ad2 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 8001ab8:	bf00      	nop
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	61fa      	str	r2, [r7, #28]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b3b      	cmp	r3, #59	; 0x3b
 8001aca:	d1f6      	bne.n	8001aba <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbed      	blt.n	8001ab8 <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 8001adc:	f7ff fca2 	bl	8001424 <LCD_ClearScreen>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e037      	b.n	8001b56 <LCD_PrintNetworks+0xbe>
		LCD_WriteChar(number++);
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	75fa      	strb	r2, [r7, #23]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ffc3 	bl	8001a78 <LCD_WriteChar>
		column = LCD_CursorRight();
 8001af2:	f7ff ff4d 	bl	8001990 <LCD_CursorRight>
 8001af6:	4603      	mov	r3, r0
 8001af8:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <LCD_PrintNetworks+0xd0>)
 8001afc:	f7ff fd42 	bl	8001584 <LCD_Print>

		while (data[index] != ';') {
 8001b00:	e010      	b.n	8001b24 <LCD_PrintNetworks+0x8c>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dd0a      	ble.n	8001b1e <LCD_PrintNetworks+0x86>
				LCD_WriteChar(data[index]);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ffb1 	bl	8001a78 <LCD_WriteChar>
				column = LCD_CursorRight();
 8001b16:	f7ff ff3b 	bl	8001990 <LCD_CursorRight>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
			}
			index++;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b3b      	cmp	r3, #59	; 0x3b
 8001b2e:	d1e8      	bne.n	8001b02 <LCD_PrintNetworks+0x6a>
		}

		if (data[index + 1] == 0) {
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00f      	beq.n	8001b5e <LCD_PrintNetworks+0xc6>
			break;
		} else {
			if (column != 0)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <LCD_PrintNetworks+0xb2>
				LCD_NextLine("");
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <LCD_PrintNetworks+0xd4>)
 8001b46:	f7ff fe95 	bl	8001874 <LCD_NextLine>
			index++;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	ddc4      	ble.n	8001ae6 <LCD_PrintNetworks+0x4e>
		}
	}
}
 8001b5c:	e000      	b.n	8001b60 <LCD_PrintNetworks+0xc8>
			break;
 8001b5e:	bf00      	nop
}
 8001b60:	bf00      	nop
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	0800da2c 	.word	0x0800da2c
 8001b6c:	0800da28 	.word	0x0800da28

08001b70 <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00c      	b.n	8001b9e <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 8001b84:	bf00      	nop
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	617a      	str	r2, [r7, #20]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b3b      	cmp	r3, #59	; 0x3b
 8001b96:	d1f6      	bne.n	8001b86 <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbed      	blt.n	8001b84 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 8001ba8:	f7ff fc3c 	bl	8001424 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 8001bac:	4815      	ldr	r0, [pc, #84]	; (8001c04 <LCD_PrintOptionsScreen+0x94>)
 8001bae:	f7ff fd0d 	bl	80015cc <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	e01e      	b.n	8001bf6 <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fc42 	bl	8001448 <LCD_SetCursor>

		while (string[index] != ';') {
 8001bc4:	e00b      	b.n	8001bde <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	617a      	str	r2, [r7, #20]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff4f 	bl	8001a78 <LCD_WriteChar>
			LCD_CursorRight();
 8001bda:	f7ff fed9 	bl	8001990 <LCD_CursorRight>
		while (string[index] != ';') {
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b3b      	cmp	r3, #59	; 0x3b
 8001be8:	d1ed      	bne.n	8001bc6 <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	dddd      	ble.n	8001bb8 <LCD_PrintOptionsScreen+0x48>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0800da30 	.word	0x0800da30

08001c08 <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 8001c14:	2103      	movs	r1, #3
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fc16 	bl	8001448 <LCD_SetCursor>
	LCD_Print("                    ");
 8001c1c:	4825      	ldr	r0, [pc, #148]	; (8001cb4 <LCD_PrintNetworkStatus+0xac>)
 8001c1e:	f7ff fcb1 	bl	8001584 <LCD_Print>
	LCD_SetCursor(0, 3);
 8001c22:	2103      	movs	r1, #3
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fc0f 	bl	8001448 <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d103      	bne.n	8001c38 <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 8001c30:	4821      	ldr	r0, [pc, #132]	; (8001cb8 <LCD_PrintNetworkStatus+0xb0>)
 8001c32:	f7ff fccb 	bl	80015cc <LCD_PrintCentered>
 8001c36:	e03a      	b.n	8001cae <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12c      	bne.n	8001c98 <LCD_PrintNetworkStatus+0x90>
		if (data == NULL) return;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d033      	beq.n	8001cac <LCD_PrintNetworkStatus+0xa4>

		int size = strlen(data);
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f7fe facd 	bl	80001e4 <strlen>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f1c3 0314 	rsb	r3, r3, #20
 8001c54:	0fda      	lsrs	r2, r3, #31
 8001c56:	4413      	add	r3, r2
 8001c58:	105b      	asrs	r3, r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <LCD_PrintNetworkStatus+0xb4>)
 8001c5e:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <LCD_PrintNetworkStatus+0xb4>)
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <LCD_PrintNetworkStatus+0xb8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f7ff fbec 	bl	8001448 <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e00b      	b.n	8001c8e <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fefa 	bl	8001a78 <LCD_WriteChar>
			LCD_CursorRight();
 8001c84:	f7ff fe84 	bl	8001990 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbef      	blt.n	8001c76 <LCD_PrintNetworkStatus+0x6e>
 8001c96:	e00a      	b.n	8001cae <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d007      	beq.n	8001cae <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d104      	bne.n	8001cae <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <LCD_PrintNetworkStatus+0xbc>)
 8001ca6:	f7ff fc91 	bl	80015cc <LCD_PrintCentered>
 8001caa:	e000      	b.n	8001cae <LCD_PrintNetworkStatus+0xa6>
		if (data == NULL) return;
 8001cac:	bf00      	nop
	}
}
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	0800da3c 	.word	0x0800da3c
 8001cb8:	0800da54 	.word	0x0800da54
 8001cbc:	20000479 	.word	0x20000479
 8001cc0:	20000464 	.word	0x20000464
 8001cc4:	0800da68 	.word	0x0800da68

08001cc8 <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
	State = ST_Clock;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <MENU_Init+0x14>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	20003549 	.word	0x20003549

08001ce0 <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	e007      	b.n	8001cfc <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <_PWD_ResetPasswd+0x3c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b27      	cmp	r3, #39	; 0x27
 8001d00:	ddf4      	ble.n	8001cec <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_PWD_ResetPasswd+0x40>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <_PWD_ResetPasswd+0x44>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	701a      	strb	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000484 	.word	0x20000484
 8001d20:	200004c3 	.word	0x200004c3
 8001d24:	2000047f 	.word	0x2000047f

08001d28 <_PWD_NextChar>:

char _PWD_NextChar(void) {
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <_PWD_NextChar+0x2c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_PWD_NextChar+0x2c>)
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <_PWD_NextChar+0x2c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b7e      	cmp	r3, #126	; 0x7e
 8001d3e:	d902      	bls.n	8001d46 <_PWD_NextChar+0x1e>
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <_PWD_NextChar+0x2c>)
 8001d42:	2220      	movs	r2, #32
 8001d44:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 8001d46:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <_PWD_NextChar+0x2c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	2000047f 	.word	0x2000047f

08001d58 <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d001      	beq.n	8001d6c <_PWD_SaveAndWrite+0x14>
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	e000      	b.n	8001d6e <_PWD_SaveAndWrite+0x16>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <_PWD_SaveAndWrite+0x30>)
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_PWD_SaveAndWrite+0x34>)
 8001d76:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fe7c 	bl	8001a78 <LCD_WriteChar>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200004c3 	.word	0x200004c3
 8001d8c:	20000484 	.word	0x20000484

08001d90 <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001d94:	4b9d      	ldr	r3, [pc, #628]	; (800200c <_CLK_HandleDateTimeInput+0x27c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	f200 8141 	bhi.w	8002022 <_CLK_HandleDateTimeInput+0x292>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <_CLK_HandleDateTimeInput+0x18>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001df1 	.word	0x08001df1
 8001dac:	08001e1f 	.word	0x08001e1f
 8001db0:	08002023 	.word	0x08002023
 8001db4:	08001e4d 	.word	0x08001e4d
 8001db8:	08001e7b 	.word	0x08001e7b
 8001dbc:	08002023 	.word	0x08002023
 8001dc0:	08001ea9 	.word	0x08001ea9
 8001dc4:	08001ed7 	.word	0x08001ed7
 8001dc8:	08002023 	.word	0x08002023
 8001dcc:	08002023 	.word	0x08002023
 8001dd0:	08001f05 	.word	0x08001f05
 8001dd4:	08001f33 	.word	0x08001f33
 8001dd8:	08002023 	.word	0x08002023
 8001ddc:	08001f61 	.word	0x08001f61
 8001de0:	08001f8f 	.word	0x08001f8f
 8001de4:	08002023 	.word	0x08002023
 8001de8:	08001fbd 	.word	0x08001fbd
 8001dec:	08001feb 	.word	0x08001feb
		ColIs(1)
			SetBetween('0', '3');
 8001df0:	4b87      	ldr	r3, [pc, #540]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b32      	cmp	r3, #50	; 0x32
 8001df6:	d903      	bls.n	8001e00 <_CLK_HandleDateTimeInput+0x70>
 8001df8:	4b85      	ldr	r3, [pc, #532]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001dfa:	2230      	movs	r2, #48	; 0x30
 8001dfc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001dfe:	e110      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e00:	4b83      	ldr	r3, [pc, #524]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b2f      	cmp	r3, #47	; 0x2f
 8001e06:	d803      	bhi.n	8001e10 <_CLK_HandleDateTimeInput+0x80>
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e0a:	2230      	movs	r2, #48	; 0x30
 8001e0c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e0e:	e108      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e10:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e1a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e1c:	e101      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b38      	cmp	r3, #56	; 0x38
 8001e24:	d903      	bls.n	8001e2e <_CLK_HandleDateTimeInput+0x9e>
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e28:	2230      	movs	r2, #48	; 0x30
 8001e2a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e2c:	e0f9      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b2f      	cmp	r3, #47	; 0x2f
 8001e34:	d803      	bhi.n	8001e3e <_CLK_HandleDateTimeInput+0xae>
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e38:	2230      	movs	r2, #48	; 0x30
 8001e3a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e3c:	e0f1      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e3e:	4b74      	ldr	r3, [pc, #464]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e48:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e4a:	e0ea      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8001e4c:	4b70      	ldr	r3, [pc, #448]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b30      	cmp	r3, #48	; 0x30
 8001e52:	d903      	bls.n	8001e5c <_CLK_HandleDateTimeInput+0xcc>
 8001e54:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e56:	2230      	movs	r2, #48	; 0x30
 8001e58:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e5a:	e0e2      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001e5c:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b2f      	cmp	r3, #47	; 0x2f
 8001e62:	d803      	bhi.n	8001e6c <_CLK_HandleDateTimeInput+0xdc>
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e66:	2230      	movs	r2, #48	; 0x30
 8001e68:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e6a:	e0da      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e76:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e78:	e0d3      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b38      	cmp	r3, #56	; 0x38
 8001e80:	d903      	bls.n	8001e8a <_CLK_HandleDateTimeInput+0xfa>
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e84:	2230      	movs	r2, #48	; 0x30
 8001e86:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e88:	e0cb      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e8a:	4b61      	ldr	r3, [pc, #388]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b2f      	cmp	r3, #47	; 0x2f
 8001e90:	d803      	bhi.n	8001e9a <_CLK_HandleDateTimeInput+0x10a>
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e94:	2230      	movs	r2, #48	; 0x30
 8001e96:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e98:	e0c3      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ea4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ea6:	e0bc      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b38      	cmp	r3, #56	; 0x38
 8001eae:	d903      	bls.n	8001eb8 <_CLK_HandleDateTimeInput+0x128>
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001eb2:	2232      	movs	r2, #50	; 0x32
 8001eb4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eb6:	e0b4      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001eb8:	4b55      	ldr	r3, [pc, #340]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b31      	cmp	r3, #49	; 0x31
 8001ebe:	d803      	bhi.n	8001ec8 <_CLK_HandleDateTimeInput+0x138>
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ec2:	2232      	movs	r2, #50	; 0x32
 8001ec4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ec6:	e0ac      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001ec8:	4b51      	ldr	r3, [pc, #324]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ed2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ed4:	e0a5      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b38      	cmp	r3, #56	; 0x38
 8001edc:	d903      	bls.n	8001ee6 <_CLK_HandleDateTimeInput+0x156>
 8001ede:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ee0:	2230      	movs	r2, #48	; 0x30
 8001ee2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ee4:	e09d      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b2f      	cmp	r3, #47	; 0x2f
 8001eec:	d803      	bhi.n	8001ef6 <_CLK_HandleDateTimeInput+0x166>
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ef0:	2230      	movs	r2, #48	; 0x30
 8001ef2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ef4:	e095      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b44      	ldr	r3, [pc, #272]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f00:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f02:	e08e      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b31      	cmp	r3, #49	; 0x31
 8001f0a:	d903      	bls.n	8001f14 <_CLK_HandleDateTimeInput+0x184>
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f0e:	2230      	movs	r2, #48	; 0x30
 8001f10:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f12:	e086      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b2f      	cmp	r3, #47	; 0x2f
 8001f1a:	d803      	bhi.n	8001f24 <_CLK_HandleDateTimeInput+0x194>
 8001f1c:	4b3c      	ldr	r3, [pc, #240]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f22:	e07e      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f2e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f30:	e077      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b38      	cmp	r3, #56	; 0x38
 8001f38:	d903      	bls.n	8001f42 <_CLK_HandleDateTimeInput+0x1b2>
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f3c:	2230      	movs	r2, #48	; 0x30
 8001f3e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f40:	e06f      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b2f      	cmp	r3, #47	; 0x2f
 8001f48:	d803      	bhi.n	8001f52 <_CLK_HandleDateTimeInput+0x1c2>
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f4c:	2230      	movs	r2, #48	; 0x30
 8001f4e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f50:	e067      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f52:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f5c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f5e:	e060      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 8001f60:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b34      	cmp	r3, #52	; 0x34
 8001f66:	d903      	bls.n	8001f70 <_CLK_HandleDateTimeInput+0x1e0>
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f6a:	2230      	movs	r2, #48	; 0x30
 8001f6c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f6e:	e058      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b2f      	cmp	r3, #47	; 0x2f
 8001f76:	d803      	bhi.n	8001f80 <_CLK_HandleDateTimeInput+0x1f0>
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f7e:	e050      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f8a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f8c:	e049      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b38      	cmp	r3, #56	; 0x38
 8001f94:	d903      	bls.n	8001f9e <_CLK_HandleDateTimeInput+0x20e>
 8001f96:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001f98:	2230      	movs	r2, #48	; 0x30
 8001f9a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f9c:	e041      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fa4:	d803      	bhi.n	8001fae <_CLK_HandleDateTimeInput+0x21e>
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fa8:	2230      	movs	r2, #48	; 0x30
 8001faa:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fac:	e039      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fb8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fba:	e032      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b34      	cmp	r3, #52	; 0x34
 8001fc2:	d903      	bls.n	8001fcc <_CLK_HandleDateTimeInput+0x23c>
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fc6:	2230      	movs	r2, #48	; 0x30
 8001fc8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fca:	e02a      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8001fd2:	d803      	bhi.n	8001fdc <_CLK_HandleDateTimeInput+0x24c>
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fd6:	2230      	movs	r2, #48	; 0x30
 8001fd8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fda:	e022      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fe6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fe8:	e01b      	b.n	8002022 <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b38      	cmp	r3, #56	; 0x38
 8001ff0:	d903      	bls.n	8001ffa <_CLK_HandleDateTimeInput+0x26a>
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ff4:	2230      	movs	r2, #48	; 0x30
 8001ff6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ff8:	e012      	b.n	8002020 <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8002000:	d808      	bhi.n	8002014 <_CLK_HandleDateTimeInput+0x284>
 8002002:	4b03      	ldr	r3, [pc, #12]	; (8002010 <_CLK_HandleDateTimeInput+0x280>)
 8002004:	2230      	movs	r2, #48	; 0x30
 8002006:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002008:	e00a      	b.n	8002020 <_CLK_HandleDateTimeInput+0x290>
 800200a:	bf00      	nop
 800200c:	2000047e 	.word	0x2000047e
 8002010:	2000047f 	.word	0x2000047f
			SetBetween('0', '9');
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <_CLK_HandleDateTimeInput+0x2b0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_CLK_HandleDateTimeInput+0x2b0>)
 800201e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002020:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_CLK_HandleDateTimeInput+0x2b0>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fd26 	bl	8001a78 <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_CLK_HandleDateTimeInput+0x2b4>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b03      	ldr	r3, [pc, #12]	; (8002040 <_CLK_HandleDateTimeInput+0x2b0>)
 8002034:	7819      	ldrb	r1, [r3, #0]
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <_CLK_HandleDateTimeInput+0x2b8>)
 8002038:	5499      	strb	r1, [r3, r2]
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000047f 	.word	0x2000047f
 8002044:	2000047e 	.word	0x2000047e
 8002048:	200004b0 	.word	0x200004b0

0800204c <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b02      	subs	r3, #2
 8002056:	2b10      	cmp	r3, #16
 8002058:	d84c      	bhi.n	80020f4 <_CLK_MoveInputRight+0xa8>
 800205a:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <_CLK_MoveInputRight+0x14>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	080020e5 	.word	0x080020e5
 8002064:	080020f5 	.word	0x080020f5
 8002068:	080020f5 	.word	0x080020f5
 800206c:	080020d5 	.word	0x080020d5
 8002070:	080020f5 	.word	0x080020f5
 8002074:	080020f5 	.word	0x080020f5
 8002078:	080020c5 	.word	0x080020c5
 800207c:	080020f5 	.word	0x080020f5
 8002080:	080020f5 	.word	0x080020f5
 8002084:	080020f5 	.word	0x080020f5
 8002088:	080020b5 	.word	0x080020b5
 800208c:	080020f5 	.word	0x080020f5
 8002090:	080020f5 	.word	0x080020f5
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020f5 	.word	0x080020f5
 800209c:	080020f5 	.word	0x080020f5
 80020a0:	08002103 	.word	0x08002103
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 80020a4:	2101      	movs	r1, #1
 80020a6:	2011      	movs	r0, #17
 80020a8:	f7ff f9ce 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 17;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020ae:	2211      	movs	r2, #17
 80020b0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020b2:	e027      	b.n	8002104 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	200e      	movs	r0, #14
 80020b8:	f7ff f9c6 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 14;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020be:	220e      	movs	r2, #14
 80020c0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020c2:	e01f      	b.n	8002104 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 80020c4:	2101      	movs	r1, #1
 80020c6:	200b      	movs	r0, #11
 80020c8:	f7ff f9be 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 11;
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020ce:	220b      	movs	r2, #11
 80020d0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020d2:	e017      	b.n	8002104 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 80020d4:	2101      	movs	r1, #1
 80020d6:	2007      	movs	r0, #7
 80020d8:	f7ff f9b6 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 7;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020de:	2207      	movs	r2, #7
 80020e0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020e2:	e00f      	b.n	8002104 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 80020e4:	2101      	movs	r1, #1
 80020e6:	2004      	movs	r0, #4
 80020e8:	f7ff f9ae 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 4;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020ee:	2204      	movs	r2, #4
 80020f0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020f2:	e007      	b.n	8002104 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 80020f4:	f7ff fc4c 	bl	8001990 <LCD_CursorRight>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <_CLK_MoveInputRight+0xbc>)
 80020fe:	701a      	strb	r2, [r3, #0]
	}
}
 8002100:	e000      	b.n	8002104 <_CLK_MoveInputRight+0xb8>
		ColEnd
 8002102:	bf00      	nop
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000047e 	.word	0x2000047e

0800210c <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	2b10      	cmp	r3, #16
 8002118:	d84c      	bhi.n	80021b4 <_CLK_MoveInputLeft+0xa8>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <_CLK_MoveInputLeft+0x14>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	080021c3 	.word	0x080021c3
 8002124:	080021b5 	.word	0x080021b5
 8002128:	080021b5 	.word	0x080021b5
 800212c:	08002165 	.word	0x08002165
 8002130:	080021b5 	.word	0x080021b5
 8002134:	080021b5 	.word	0x080021b5
 8002138:	08002175 	.word	0x08002175
 800213c:	080021b5 	.word	0x080021b5
 8002140:	080021b5 	.word	0x080021b5
 8002144:	080021b5 	.word	0x080021b5
 8002148:	08002185 	.word	0x08002185
 800214c:	080021b5 	.word	0x080021b5
 8002150:	080021b5 	.word	0x080021b5
 8002154:	08002195 	.word	0x08002195
 8002158:	080021b5 	.word	0x080021b5
 800215c:	080021b5 	.word	0x080021b5
 8002160:	080021a5 	.word	0x080021a5
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 8002164:	2101      	movs	r1, #1
 8002166:	2002      	movs	r0, #2
 8002168:	f7ff f96e 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 2;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002172:	e027      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 8002174:	2101      	movs	r1, #1
 8002176:	2005      	movs	r0, #5
 8002178:	f7ff f966 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 5;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 800217e:	2205      	movs	r2, #5
 8002180:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002182:	e01f      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 8002184:	2101      	movs	r1, #1
 8002186:	2008      	movs	r0, #8
 8002188:	f7ff f95e 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 8;
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 800218e:	2208      	movs	r2, #8
 8002190:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002192:	e017      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 8002194:	2101      	movs	r1, #1
 8002196:	200c      	movs	r0, #12
 8002198:	f7ff f956 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 12;
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 800219e:	220c      	movs	r2, #12
 80021a0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021a2:	e00f      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 80021a4:	2101      	movs	r1, #1
 80021a6:	200f      	movs	r0, #15
 80021a8:	f7ff f94e 	bl	8001448 <LCD_SetCursor>
			_optionsCol = 15;
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 80021ae:	220f      	movs	r2, #15
 80021b0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021b2:	e007      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 80021b4:	f7ff fbbe 	bl	8001934 <LCD_CursorLeft>
 80021b8:	4603      	mov	r3, r0
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <_CLK_MoveInputLeft+0xbc>)
 80021be:	701a      	strb	r2, [r3, #0]
	}
}
 80021c0:	e000      	b.n	80021c4 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 80021c2:	bf00      	nop
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000047e 	.word	0x2000047e

080021cc <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 80021d8:	785b      	ldrb	r3, [r3, #1]
 80021da:	3b30      	subs	r3, #48	; 0x30
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 80021e0:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 80021e2:	789b      	ldrb	r3, [r3, #2]
 80021e4:	3b30      	subs	r3, #48	; 0x30
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	3b30      	subs	r3, #48	; 0x30
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 80021f6:	795b      	ldrb	r3, [r3, #5]
 80021f8:	3b30      	subs	r3, #48	; 0x30
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 80021fe:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002200:	79db      	ldrb	r3, [r3, #7]
 8002202:	3b30      	subs	r3, #48	; 0x30
 8002204:	b2db      	uxtb	r3, r3
 8002206:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 8002208:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800220a:	7a1b      	ldrb	r3, [r3, #8]
 800220c:	3b30      	subs	r3, #48	; 0x30
 800220e:	b2db      	uxtb	r3, r3
 8002210:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002214:	7adb      	ldrb	r3, [r3, #11]
 8002216:	3b30      	subs	r3, #48	; 0x30
 8002218:	b2db      	uxtb	r3, r3
 800221a:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 800221c:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800221e:	7b1b      	ldrb	r3, [r3, #12]
 8002220:	3b30      	subs	r3, #48	; 0x30
 8002222:	b2db      	uxtb	r3, r3
 8002224:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 8002226:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002228:	7b9b      	ldrb	r3, [r3, #14]
 800222a:	3b30      	subs	r3, #48	; 0x30
 800222c:	b2db      	uxtb	r3, r3
 800222e:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 8002230:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002232:	7bdb      	ldrb	r3, [r3, #15]
 8002234:	3b30      	subs	r3, #48	; 0x30
 8002236:	b2db      	uxtb	r3, r3
 8002238:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800223c:	7c5b      	ldrb	r3, [r3, #17]
 800223e:	3b30      	subs	r3, #48	; 0x30
 8002240:	b2db      	uxtb	r3, r3
 8002242:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 8002244:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002246:	7c9b      	ldrb	r3, [r3, #18]
 8002248:	3b30      	subs	r3, #48	; 0x30
 800224a:	b2db      	uxtb	r3, r3
 800224c:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 800224e:	7abb      	ldrb	r3, [r7, #10]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d104      	bne.n	800225e <_CLK_ParseAndSetDateTime+0x92>
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 800225e:	7abb      	ldrb	r3, [r7, #10]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <_CLK_ParseAndSetDateTime+0xa2>
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 800226e:	783b      	ldrb	r3, [r7, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d104      	bne.n	800227e <_CLK_ParseAndSetDateTime+0xb2>
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d901      	bls.n	800227e <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 800227e:	7abb      	ldrb	r3, [r7, #10]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_CLK_ParseAndSetDateTime+0xbe>
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d023      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
 800228a:	7abb      	ldrb	r3, [r7, #10]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_CLK_ParseAndSetDateTime+0xca>
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	2b03      	cmp	r3, #3
 8002294:	d01d      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
 8002296:	7abb      	ldrb	r3, [r7, #10]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <_CLK_ParseAndSetDateTime+0xd6>
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d017      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80022a2:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d011      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
 80022ae:	7abb      	ldrb	r3, [r7, #10]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_CLK_ParseAndSetDateTime+0xee>
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d00b      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
 80022ba:	7abb      	ldrb	r3, [r7, #10]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <_CLK_ParseAndSetDateTime+0xfa>
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 80022c6:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10a      	bne.n	80022e2 <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d107      	bne.n	80022e2 <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d104      	bne.n	80022e2 <_CLK_ParseAndSetDateTime+0x116>
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d901      	bls.n	80022e2 <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 80022e2:	7abb      	ldrb	r3, [r7, #10]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_CLK_ParseAndSetDateTime+0x122>
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d011      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x146>
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_CLK_ParseAndSetDateTime+0x12e>
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d00b      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x146>
 80022fa:	7abb      	ldrb	r3, [r7, #10]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <_CLK_ParseAndSetDateTime+0x13a>
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	2b04      	cmp	r3, #4
 8002304:	d005      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x146>
		Month(0,4)) {
 8002306:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x156>
		Month(0,4)) {
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d107      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 8002312:	7a3b      	ldrb	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d104      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x156>
 8002318:	7a7b      	ldrb	r3, [r7, #9]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 8002322:	7abb      	ldrb	r3, [r7, #10]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d115      	bne.n	8002354 <_CLK_ParseAndSetDateTime+0x188>
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d112      	bne.n	8002354 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 800232e:	7a3b      	ldrb	r3, [r7, #8]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 8002338:	7b7b      	ldrb	r3, [r7, #13]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 8002344:	7a3b      	ldrb	r3, [r7, #8]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d104      	bne.n	8002354 <_CLK_ParseAndSetDateTime+0x188>
 800234a:	7a7b      	ldrb	r3, [r7, #9]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d101      	bne.n	8002354 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 8002354:	f7ff f8be 	bl	80014d4 <LCD_DisableCursor>

	if (error) {
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d014      	beq.n	8002388 <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 800235e:	f7ff f861 	bl	8001424 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 8002362:	2101      	movs	r1, #1
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff f86f 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <_CLK_ParseAndSetDateTime+0x1d8>)
 800236c:	f7ff f92e 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 8002370:	2102      	movs	r1, #2
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff f868 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <_CLK_ParseAndSetDateTime+0x1dc>)
 800237a:	f7ff f927 	bl	80015cc <LCD_PrintCentered>

		HAL_Delay(1000);
 800237e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002382:	f005 fa09 	bl	8007798 <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 8002386:	e006      	b.n	8002396 <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 8002388:	463a      	mov	r2, r7
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fc09 	bl	8003ba8 <SD_SetDateTime>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200004b0 	.word	0x200004b0
 80023a4:	0800da80 	.word	0x0800da80
 80023a8:	0800da90 	.word	0x0800da90

080023ac <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <MENU_PasswdInput+0x44>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d018      	beq.n	80023ea <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <MENU_PasswdInput+0x44>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80023be:	f7ff f831 	bl	8001424 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MENU_PasswdInput+0x48>)
 80023c4:	f7ff f902 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 80023c8:	2103      	movs	r1, #3
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7ff f83c 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <MENU_PasswdInput+0x4c>)
 80023d2:	f7ff f8fb 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 80023d6:	2101      	movs	r1, #1
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff f835 	bl	8001448 <LCD_SetCursor>

		_PWD_ResetPasswd();
 80023de:	f7ff fc7f 	bl	8001ce0 <_PWD_ResetPasswd>

		LCD_DisableBlink();
 80023e2:	f7ff f8a3 	bl	800152c <LCD_DisableBlink>
		LCD_EnableCursor();
 80023e6:	f7ff f88b 	bl	8001500 <LCD_EnableCursor>
	}
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20003549 	.word	0x20003549
 80023f4:	0800daa4 	.word	0x0800daa4
 80023f8:	0800dabc 	.word	0x0800dabc

080023fc <MENU_Options>:

void MENU_Options(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MENU_Options+0x40>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d016      	beq.n	8002436 <MENU_Options+0x3a>
		State = ST_Options;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MENU_Options+0x40>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800240e:	f7ff f809 	bl	8001424 <LCD_ClearScreen>

		_currentOption = 1;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MENU_Options+0x44>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MENU_Options+0x44>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <MENU_Options+0x48>)
 8002420:	f7ff fba6 	bl	8001b70 <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 8002424:	2101      	movs	r1, #1
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff f80e 	bl	8001448 <LCD_SetCursor>
		_optionsRow = 1;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MENU_Options+0x4c>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 8002432:	f7ff f891 	bl	8001558 <LCD_EnableBlink>
	}
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20003549 	.word	0x20003549
 8002440:	2000047d 	.word	0x2000047d
 8002444:	20000000 	.word	0x20000000
 8002448:	2000047c 	.word	0x2000047c

0800244c <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <MENU_OptionsSetDateTime+0x88>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b04      	cmp	r3, #4
 8002458:	d038      	beq.n	80024cc <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MENU_OptionsSetDateTime+0x88>)
 800245c:	2204      	movs	r2, #4
 800245e:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002460:	f7fe ffe0 	bl	8001424 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 8002464:	481c      	ldr	r0, [pc, #112]	; (80024d8 <MENU_OptionsSetDateTime+0x8c>)
 8002466:	f7ff f88d 	bl	8001584 <LCD_Print>
		LCD_SetCursor(0, 1);
 800246a:	2101      	movs	r1, #1
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe ffeb 	bl	8001448 <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 8002472:	481a      	ldr	r0, [pc, #104]	; (80024dc <MENU_OptionsSetDateTime+0x90>)
 8002474:	f7ff f886 	bl	8001584 <LCD_Print>
		LCD_SetCursor(0, 2);
 8002478:	2102      	movs	r1, #2
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe ffe4 	bl	8001448 <LCD_SetCursor>
		LCD_Print("--------------------");
 8002480:	4817      	ldr	r0, [pc, #92]	; (80024e0 <MENU_OptionsSetDateTime+0x94>)
 8002482:	f7ff f87f 	bl	8001584 <LCD_Print>
		LCD_SetCursor(0, 3);
 8002486:	2103      	movs	r1, #3
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe ffdd 	bl	8001448 <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 800248e:	4815      	ldr	r0, [pc, #84]	; (80024e4 <MENU_OptionsSetDateTime+0x98>)
 8002490:	f7ff f878 	bl	8001584 <LCD_Print>

		LCD_SetCursor(1, 1);
 8002494:	2101      	movs	r1, #1
 8002496:	2001      	movs	r0, #1
 8002498:	f7fe ffd6 	bl	8001448 <LCD_SetCursor>
		_optionsCol = 1;
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <MENU_OptionsSetDateTime+0x9c>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 80024a2:	f7ff f843 	bl	800152c <LCD_DisableBlink>
		LCD_EnableCursor();
 80024a6:	f7ff f82b 	bl	8001500 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	e007      	b.n	80024c0 <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 80024b0:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <MENU_OptionsSetDateTime+0xa0>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	2230      	movs	r2, #48	; 0x30
 80024b8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3301      	adds	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	ddf4      	ble.n	80024b0 <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <MENU_OptionsSetDateTime+0xa4>)
 80024c8:	2230      	movs	r2, #48	; 0x30
 80024ca:	701a      	strb	r2, [r3, #0]
	}
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20003549 	.word	0x20003549
 80024d8:	0800dad4 	.word	0x0800dad4
 80024dc:	0800daec 	.word	0x0800daec
 80024e0:	0800db04 	.word	0x0800db04
 80024e4:	0800dabc 	.word	0x0800dabc
 80024e8:	2000047e 	.word	0x2000047e
 80024ec:	200004b0 	.word	0x200004b0
 80024f0:	2000047f 	.word	0x2000047f

080024f4 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	int amount = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_WiFi_NofNetworks+0x22>
			return amount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00c      	b.n	8002530 <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b3b      	cmp	r3, #59	; 0x3b
 8002520:	d102      	bne.n	8002528 <_WiFi_NofNetworks+0x34>
			amount++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3301      	adds	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 800252e:	e7e9      	b.n	8002504 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
	int clearRest = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	e015      	b.n	8002578 <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <_WiFi_RequestConn+0x26>
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <_WiFi_RequestConn+0xc4>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <_WiFi_RequestConn+0x26>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <_WiFi_RequestConn+0x36>
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <_WiFi_RequestConn+0xc4>)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	4413      	add	r3, r2
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b27      	cmp	r3, #39	; 0x27
 800257c:	dde6      	ble.n	800254c <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 800257e:	f7fe ff51 	bl	8001424 <LCD_ClearScreen>
	LCD_DisableCursor();
 8002582:	f7fe ffa7 	bl	80014d4 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 8002586:	2101      	movs	r1, #1
 8002588:	2000      	movs	r0, #0
 800258a:	f7fe ff5d 	bl	8001448 <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 800258e:	481d      	ldr	r0, [pc, #116]	; (8002604 <_WiFi_RequestConn+0xc8>)
 8002590:	f7ff f81c 	bl	80015cc <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 8002594:	2103      	movs	r1, #3
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe ff56 	bl	8001448 <LCD_SetCursor>
	LCD_PrintCentered("please wait xD");
 800259c:	481a      	ldr	r0, [pc, #104]	; (8002608 <_WiFi_RequestConn+0xcc>)
 800259e:	f7ff f815 	bl	80015cc <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 80025a2:	4b1a      	ldr	r3, [pc, #104]	; (800260c <_WiFi_RequestConn+0xd0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4815      	ldr	r0, [pc, #84]	; (8002600 <_WiFi_RequestConn+0xc4>)
 80025aa:	f000 fcf5 	bl	8002f98 <NET_ConnectToWiFi>
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 80025b2:	f7fe ff37 	bl	8001424 <LCD_ClearScreen>

	if (result == 0) {
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 80025bc:	2101      	movs	r1, #1
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe ff42 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 80025c4:	4812      	ldr	r0, [pc, #72]	; (8002610 <_WiFi_RequestConn+0xd4>)
 80025c6:	f7ff f801 	bl	80015cc <LCD_PrintCentered>

		HAL_Delay(1000);
 80025ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ce:	f005 f8e3 	bl	8007798 <HAL_Delay>
 80025d2:	e00d      	b.n	80025f0 <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 80025d4:	2101      	movs	r1, #1
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe ff36 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 80025dc:	480d      	ldr	r0, [pc, #52]	; (8002614 <_WiFi_RequestConn+0xd8>)
 80025de:	f7fe fff5 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 80025e2:	2102      	movs	r1, #2
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe ff2f 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 80025ea:	480b      	ldr	r0, [pc, #44]	; (8002618 <_WiFi_RequestConn+0xdc>)
 80025ec:	f7fe ffee 	bl	80015cc <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 80025f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f4:	f005 f8d0 	bl	8007798 <HAL_Delay>
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000484 	.word	0x20000484
 8002604:	0800db1c 	.word	0x0800db1c
 8002608:	0800db28 	.word	0x0800db28
 800260c:	2000047d 	.word	0x2000047d
 8002610:	0800db38 	.word	0x0800db38
 8002614:	0800db44 	.word	0x0800db44
 8002618:	0800db58 	.word	0x0800db58

0800261c <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <MENU_OptionsWifiList+0xac>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d049      	beq.n	80026be <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <MENU_OptionsWifiList+0xac>)
 800262c:	2202      	movs	r2, #2
 800262e:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002630:	f7fe fef8 	bl	8001424 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002634:	f7fe ff7a 	bl	800152c <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 8002638:	4824      	ldr	r0, [pc, #144]	; (80026cc <MENU_OptionsWifiList+0xb0>)
 800263a:	f7fe ffc7 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 800263e:	2102      	movs	r1, #2
 8002640:	2000      	movs	r0, #0
 8002642:	f7fe ff01 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 8002646:	4822      	ldr	r0, [pc, #136]	; (80026d0 <MENU_OptionsWifiList+0xb4>)
 8002648:	f7fe ffc0 	bl	80015cc <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 800264c:	2103      	movs	r1, #3
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe fefa 	bl	8001448 <LCD_SetCursor>
		LCD_PrintCentered("please wait :)");
 8002654:	481f      	ldr	r0, [pc, #124]	; (80026d4 <MENU_OptionsWifiList+0xb8>)
 8002656:	f7fe ffb9 	bl	80015cc <LCD_PrintCentered>

		_optionsRow = 0;
 800265a:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <MENU_OptionsWifiList+0xbc>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 8002660:	f000 fb66 	bl	8002d30 <NET_RequestNetworkList>
 8002664:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d019      	beq.n	80026a0 <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff41 	bl	80024f4 <_WiFi_NofNetworks>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MENU_OptionsWifiList+0xc0>)
 8002678:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <MENU_OptionsWifiList+0xc4>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <MENU_OptionsWifiList+0xc8>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <MENU_OptionsWifiList+0xc4>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fa03 	bl	8001a98 <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 8002692:	f7fe ff61 	bl	8001558 <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 8002696:	2100      	movs	r1, #0
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fed5 	bl	8001448 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 800269e:	e00e      	b.n	80026be <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 80026a0:	f7fe fec0 	bl	8001424 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 80026a4:	2101      	movs	r1, #1
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fece 	bl	8001448 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 80026ac:	480e      	ldr	r0, [pc, #56]	; (80026e8 <MENU_OptionsWifiList+0xcc>)
 80026ae:	f7fe ff8d 	bl	80015cc <LCD_PrintCentered>
			HAL_Delay(1000);
 80026b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b6:	f005 f86f 	bl	8007798 <HAL_Delay>
			MENU_Options();
 80026ba:	f7ff fe9f 	bl	80023fc <MENU_Options>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20003549 	.word	0x20003549
 80026cc:	0800db6c 	.word	0x0800db6c
 80026d0:	0800db80 	.word	0x0800db80
 80026d4:	0800db90 	.word	0x0800db90
 80026d8:	2000047c 	.word	0x2000047c
 80026dc:	200004ac 	.word	0x200004ac
 80026e0:	2000047d 	.word	0x2000047d
 80026e4:	20000480 	.word	0x20000480
 80026e8:	0800dba0 	.word	0x0800dba0

080026ec <MENU_Clock>:

void MENU_Clock(void) {
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MENU_Clock+0x74>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <MENU_Clock+0x1c>
		State = ST_Clock;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MENU_Clock+0x74>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 8002700:	f7fe fe90 	bl	8001424 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002704:	f7fe ff12 	bl	800152c <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 8002708:	f001 f98a 	bl	8003a20 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 800270c:	f107 0208 	add.w	r2, r7, #8
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fa00 	bl	8003b1c <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f98a 	bl	8001a40 <LCD_PrintDateTime>

	if (THS_ReadData(THS_In, data)) {
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	2000      	movs	r0, #0
 8002732:	f001 fbf7 	bl	8003f24 <THS_ReadData>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <MENU_Clock+0x5a>
		LCD_PrintTempInfo(data, NULL);
 800273c:	463b      	mov	r3, r7
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe ff6d 	bl	8001620 <LCD_PrintTempInfo>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 8002746:	4b07      	ldr	r3, [pc, #28]	; (8002764 <MENU_Clock+0x78>)
 8002748:	781c      	ldrb	r4, [r3, #0]
 800274a:	f000 fcb5 	bl	80030b8 <NET_GetConnInfo>
 800274e:	4603      	mov	r3, r0
 8002750:	4619      	mov	r1, r3
 8002752:	4620      	mov	r0, r4
 8002754:	f7ff fa58 	bl	8001c08 <LCD_PrintNetworkStatus>
}
 8002758:	bf00      	nop
 800275a:	3724      	adds	r7, #36	; 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	20003549 	.word	0x20003549
 8002764:	20003548 	.word	0x20003548

08002768 <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	48b0      	ldr	r0, [pc, #704]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 8002770:	f005 fb02 	bl	8007d78 <HAL_GPIO_ReadPin>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 808e 	beq.w	8002898 <MENU_HandleKeys+0x130>
 800277c:	200a      	movs	r0, #10
 800277e:	f005 f80b 	bl	8007798 <HAL_Delay>
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	48aa      	ldr	r0, [pc, #680]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 8002786:	f005 faf7 	bl	8007d78 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 81e5 	beq.w	8002b5c <MENU_HandleKeys+0x3f4>
 8002792:	bf00      	nop
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	48a6      	ldr	r0, [pc, #664]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 8002798:	f005 faee 	bl	8007d78 <HAL_GPIO_ReadPin>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f8      	bne.n	8002794 <MENU_HandleKeys+0x2c>
		LCD_WakeScreen();
 80027a2:	f7fe fe1b 	bl	80013dc <LCD_WakeScreen>

		if (State == ST_Clock) {
 80027a6:	4ba3      	ldr	r3, [pc, #652]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <MENU_HandleKeys+0x4c>
			/* Przejdz w ekran opcji */
			MENU_Options();
 80027ae:	f7ff fe25 	bl	80023fc <MENU_Options>
 80027b2:	e06a      	b.n	800288a <MENU_HandleKeys+0x122>
		} else if (State == ST_Options) {
 80027b4:	4b9f      	ldr	r3, [pc, #636]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d125      	bne.n	8002808 <MENU_HandleKeys+0xa0>
			if (_optionsRow > 1) {
 80027bc:	4b9e      	ldr	r3, [pc, #632]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d90c      	bls.n	80027de <MENU_HandleKeys+0x76>
				_optionsRow = LCD_CursorUp();
 80027c4:	f7ff f87e 	bl	80018c4 <LCD_CursorUp>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b9a      	ldr	r3, [pc, #616]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 80027ce:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 80027d0:	4b9a      	ldr	r3, [pc, #616]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b98      	ldr	r3, [pc, #608]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e055      	b.n	800288a <MENU_HandleKeys+0x122>
			} else if (_currentOption != 1) {
 80027de:	4b97      	ldr	r3, [pc, #604]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d051      	beq.n	800288a <MENU_HandleKeys+0x122>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 80027e6:	4b95      	ldr	r3, [pc, #596]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4891      	ldr	r0, [pc, #580]	; (8002a40 <MENU_HandleKeys+0x2d8>)
 80027fa:	f7ff f9b9 	bl	8001b70 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 80027fe:	2101      	movs	r1, #1
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fe21 	bl	8001448 <LCD_SetCursor>
 8002806:	e040      	b.n	800288a <MENU_HandleKeys+0x122>
			}
		} else if (State == ST_PassInput) {
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d106      	bne.n	800281e <MENU_HandleKeys+0xb6>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 8002810:	f7ff fa8a 	bl	8001d28 <_PWD_NextChar>
 8002814:	4603      	mov	r3, r0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa9e 	bl	8001d58 <_PWD_SaveAndWrite>
 800281c:	e035      	b.n	800288a <MENU_HandleKeys+0x122>
		} else if (State == ST_SetDateTime) {
 800281e:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b04      	cmp	r3, #4
 8002824:	d102      	bne.n	800282c <MENU_HandleKeys+0xc4>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 8002826:	f7ff fab3 	bl	8001d90 <_CLK_HandleDateTimeInput>
 800282a:	e02e      	b.n	800288a <MENU_HandleKeys+0x122>
		} else if (State == ST_WiFi) {
 800282c:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d12a      	bne.n	800288a <MENU_HandleKeys+0x122>
			if (_optionsRow > 0) {
 8002834:	4b80      	ldr	r3, [pc, #512]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <MENU_HandleKeys+0xee>
				_optionsRow = LCD_CursorUp();
 800283c:	f7ff f842 	bl	80018c4 <LCD_CursorUp>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 8002846:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002848:	4b7c      	ldr	r3, [pc, #496]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e019      	b.n	800288a <MENU_HandleKeys+0x122>
			} else if (_networksIn > 4 && _currentOption != 1) {
 8002856:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <MENU_HandleKeys+0x2dc>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d915      	bls.n	800288a <MENU_HandleKeys+0x122>
 800285e:	4b77      	ldr	r3, [pc, #476]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d011      	beq.n	800288a <MENU_HandleKeys+0x122>
				LCD_PrintNetworks(_networksList, --_currentOption);
 8002866:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <MENU_HandleKeys+0x2e0>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	b2d9      	uxtb	r1, r3
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002874:	7019      	strb	r1, [r3, #0]
 8002876:	4b71      	ldr	r3, [pc, #452]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	4610      	mov	r0, r2
 800287e:	f7ff f90b 	bl	8001a98 <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 8002882:	2100      	movs	r1, #0
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe fddf 	bl	8001448 <LCD_SetCursor>
			}
		}

		LED_T(Red);
 800288a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800288e:	486f      	ldr	r0, [pc, #444]	; (8002a4c <MENU_HandleKeys+0x2e4>)
 8002890:	f005 faa3 	bl	8007dda <HAL_GPIO_TogglePin>
		return 1;
 8002894:	2301      	movs	r3, #1
 8002896:	e162      	b.n	8002b5e <MENU_HandleKeys+0x3f6>

	} Or (DOWN) {
 8002898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289c:	4864      	ldr	r0, [pc, #400]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 800289e:	f005 fa6b 	bl	8007d78 <HAL_GPIO_ReadPin>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8093 	beq.w	80029d0 <MENU_HandleKeys+0x268>
 80028aa:	200a      	movs	r0, #10
 80028ac:	f004 ff74 	bl	8007798 <HAL_Delay>
 80028b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b4:	485e      	ldr	r0, [pc, #376]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 80028b6:	f005 fa5f 	bl	8007d78 <HAL_GPIO_ReadPin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 814d 	beq.w	8002b5c <MENU_HandleKeys+0x3f4>
 80028c2:	bf00      	nop
 80028c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c8:	4859      	ldr	r0, [pc, #356]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 80028ca:	f005 fa55 	bl	8007d78 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f7      	bne.n	80028c4 <MENU_HandleKeys+0x15c>
		LCD_WakeScreen();
 80028d4:	f7fe fd82 	bl	80013dc <LCD_WakeScreen>

		if (State == ST_Options) {
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d126      	bne.n	800292e <MENU_HandleKeys+0x1c6>
			if (_optionsRow < 3) {
 80028e0:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d80c      	bhi.n	8002902 <MENU_HandleKeys+0x19a>
				_optionsRow = LCD_CursorDown();
 80028e8:	f7ff f808 	bl	80018fc <LCD_CursorDown>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 80028f2:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 80028f4:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e05f      	b.n	80029c2 <MENU_HandleKeys+0x25a>
			} else if (_currentOption != NOF_OPTIONS) {
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d05b      	beq.n	80029c2 <MENU_HandleKeys+0x25a>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 800290a:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	3b02      	subs	r3, #2
 800291c:	4619      	mov	r1, r3
 800291e:	4848      	ldr	r0, [pc, #288]	; (8002a40 <MENU_HandleKeys+0x2d8>)
 8002920:	f7ff f926 	bl	8001b70 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 8002924:	2103      	movs	r1, #3
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe fd8e 	bl	8001448 <LCD_SetCursor>
 800292c:	e049      	b.n	80029c2 <MENU_HandleKeys+0x25a>
			}
		} else if (State == ST_PassInput) {
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d104      	bne.n	8002940 <MENU_HandleKeys+0x1d8>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 8002936:	f7ff fe01 	bl	800253c <_WiFi_RequestConn>
			MENU_Clock();
 800293a:	f7ff fed7 	bl	80026ec <MENU_Clock>
 800293e:	e040      	b.n	80029c2 <MENU_HandleKeys+0x25a>
		} else if (State == ST_SetDateTime) {
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d104      	bne.n	8002952 <MENU_HandleKeys+0x1ea>
			_CLK_ParseAndSetDateTime();
 8002948:	f7ff fc40 	bl	80021cc <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 800294c:	f7ff fece 	bl	80026ec <MENU_Clock>
 8002950:	e037      	b.n	80029c2 <MENU_HandleKeys+0x25a>
		} else if (State == ST_WiFi) {
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d133      	bne.n	80029c2 <MENU_HandleKeys+0x25a>
			//TODO DEBUG n TESTING
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d814      	bhi.n	800298c <MENU_HandleKeys+0x224>
 8002962:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <MENU_HandleKeys+0x2dc>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	429a      	cmp	r2, r3
 8002970:	da0c      	bge.n	800298c <MENU_HandleKeys+0x224>
				_optionsRow = LCD_CursorDown();
 8002972:	f7fe ffc3 	bl	80018fc <LCD_CursorDown>
 8002976:	4603      	mov	r3, r0
 8002978:	461a      	mov	r2, r3
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <MENU_HandleKeys+0x2d0>)
 800297c:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e01a      	b.n	80029c2 <MENU_HandleKeys+0x25a>
			} else if (_networksIn > 4 && _currentOption != 4) {
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <MENU_HandleKeys+0x2dc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d916      	bls.n	80029c2 <MENU_HandleKeys+0x25a>
 8002994:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d012      	beq.n	80029c2 <MENU_HandleKeys+0x25a>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 800299c:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <MENU_HandleKeys+0x2e0>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2d9      	uxtb	r1, r3
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80029aa:	7019      	strb	r1, [r3, #0]
 80029ac:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <MENU_HandleKeys+0x2d4>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b04      	subs	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7ff f86f 	bl	8001a98 <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 80029ba:	2103      	movs	r1, #3
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fd43 	bl	8001448 <LCD_SetCursor>
			}
		}

		LED_T(Green);
 80029c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c6:	4821      	ldr	r0, [pc, #132]	; (8002a4c <MENU_HandleKeys+0x2e4>)
 80029c8:	f005 fa07 	bl	8007dda <HAL_GPIO_TogglePin>
		return 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0c6      	b.n	8002b5e <MENU_HandleKeys+0x3f6>

	} Or (LEFT) {
 80029d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d4:	4816      	ldr	r0, [pc, #88]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 80029d6:	f005 f9cf 	bl	8007d78 <HAL_GPIO_ReadPin>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d054      	beq.n	8002a8a <MENU_HandleKeys+0x322>
 80029e0:	200a      	movs	r0, #10
 80029e2:	f004 fed9 	bl	8007798 <HAL_Delay>
 80029e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ea:	4811      	ldr	r0, [pc, #68]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 80029ec:	f005 f9c4 	bl	8007d78 <HAL_GPIO_ReadPin>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80b2 	beq.w	8002b5c <MENU_HandleKeys+0x3f4>
 80029f8:	bf00      	nop
 80029fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029fe:	480c      	ldr	r0, [pc, #48]	; (8002a30 <MENU_HandleKeys+0x2c8>)
 8002a00:	f005 f9ba 	bl	8007d78 <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f7      	bne.n	80029fa <MENU_HandleKeys+0x292>
		LCD_WakeScreen();
 8002a0a:	f7fe fce7 	bl	80013dc <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MENU_HandleKeys+0x2cc>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d11e      	bne.n	8002a54 <MENU_HandleKeys+0x2ec>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MENU_HandleKeys+0x2e8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d02e      	beq.n	8002a7c <MENU_HandleKeys+0x314>
				--_PWD_index;
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MENU_HandleKeys+0x2e8>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <MENU_HandleKeys+0x2e8>)
 8002a28:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 8002a2a:	f7fe ff83 	bl	8001934 <LCD_CursorLeft>
 8002a2e:	e025      	b.n	8002a7c <MENU_HandleKeys+0x314>
 8002a30:	40021000 	.word	0x40021000
 8002a34:	20003549 	.word	0x20003549
 8002a38:	2000047c 	.word	0x2000047c
 8002a3c:	2000047d 	.word	0x2000047d
 8002a40:	20000000 	.word	0x20000000
 8002a44:	200004ac 	.word	0x200004ac
 8002a48:	20000480 	.word	0x20000480
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	200004c3 	.word	0x200004c3
			}
		} else if (State == ST_Options) {
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d102      	bne.n	8002a62 <MENU_HandleKeys+0x2fa>
			MENU_Clock();
 8002a5c:	f7ff fe46 	bl	80026ec <MENU_Clock>
 8002a60:	e00c      	b.n	8002a7c <MENU_HandleKeys+0x314>
		} else if (State == ST_SetDateTime) {
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d102      	bne.n	8002a70 <MENU_HandleKeys+0x308>
			_CLK_MoveInputLeft();
 8002a6a:	f7ff fb4f 	bl	800210c <_CLK_MoveInputLeft>
 8002a6e:	e005      	b.n	8002a7c <MENU_HandleKeys+0x314>
		} else if (State == ST_WiFi) {
 8002a70:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d101      	bne.n	8002a7c <MENU_HandleKeys+0x314>
			MENU_Options();
 8002a78:	f7ff fcc0 	bl	80023fc <MENU_Options>
		}

		LED_T(Blue);
 8002a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a80:	4839      	ldr	r0, [pc, #228]	; (8002b68 <MENU_HandleKeys+0x400>)
 8002a82:	f005 f9aa 	bl	8007dda <HAL_GPIO_TogglePin>
		return 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e069      	b.n	8002b5e <MENU_HandleKeys+0x3f6>

	} Or (RIGHT) {
 8002a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a8e:	4837      	ldr	r0, [pc, #220]	; (8002b6c <MENU_HandleKeys+0x404>)
 8002a90:	f005 f972 	bl	8007d78 <HAL_GPIO_ReadPin>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d060      	beq.n	8002b5c <MENU_HandleKeys+0x3f4>
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f004 fe7c 	bl	8007798 <HAL_Delay>
 8002aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa4:	4831      	ldr	r0, [pc, #196]	; (8002b6c <MENU_HandleKeys+0x404>)
 8002aa6:	f005 f967 	bl	8007d78 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d055      	beq.n	8002b5c <MENU_HandleKeys+0x3f4>
 8002ab0:	bf00      	nop
 8002ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab6:	482d      	ldr	r0, [pc, #180]	; (8002b6c <MENU_HandleKeys+0x404>)
 8002ab8:	f005 f95e 	bl	8007d78 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f7      	bne.n	8002ab2 <MENU_HandleKeys+0x34a>
		LCD_WakeScreen();
 8002ac2:	f7fe fc8b 	bl	80013dc <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d113      	bne.n	8002af6 <MENU_HandleKeys+0x38e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <MENU_HandleKeys+0x408>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <MENU_HandleKeys+0x40c>)
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d038      	beq.n	8002b4e <MENU_HandleKeys+0x3e6>
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <MENU_HandleKeys+0x408>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b26      	cmp	r3, #38	; 0x26
 8002ae2:	d834      	bhi.n	8002b4e <MENU_HandleKeys+0x3e6>
				++_PWD_index;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <MENU_HandleKeys+0x408>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <MENU_HandleKeys+0x408>)
 8002aee:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 8002af0:	f7fe ff4e 	bl	8001990 <LCD_CursorRight>
 8002af4:	e02b      	b.n	8002b4e <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_Options) {
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d11a      	bne.n	8002b34 <MENU_HandleKeys+0x3cc>
			if (_currentOption == 1) {
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <MENU_HandleKeys+0x410>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <MENU_HandleKeys+0x3a4>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 8002b06:	f7ff fd89 	bl	800261c <MENU_OptionsWifiList>
 8002b0a:	e020      	b.n	8002b4e <MENU_HandleKeys+0x3e6>
			} else if (_currentOption == 2) {
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MENU_HandleKeys+0x410>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d104      	bne.n	8002b1e <MENU_HandleKeys+0x3b6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 8002b14:	f000 fb34 	bl	8003180 <NET_WiFiDisconnect>
				MENU_Clock();
 8002b18:	f7ff fde8 	bl	80026ec <MENU_Clock>
 8002b1c:	e017      	b.n	8002b4e <MENU_HandleKeys+0x3e6>

			} else if (_currentOption == 3) {
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <MENU_HandleKeys+0x410>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d013      	beq.n	8002b4e <MENU_HandleKeys+0x3e6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <MENU_HandleKeys+0x410>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d10f      	bne.n	8002b4e <MENU_HandleKeys+0x3e6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 8002b2e:	f7ff fc8d 	bl	800244c <MENU_OptionsSetDateTime>
 8002b32:	e00c      	b.n	8002b4e <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_SetDateTime) {
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d102      	bne.n	8002b42 <MENU_HandleKeys+0x3da>
			_CLK_MoveInputRight();
 8002b3c:	f7ff fa86 	bl	800204c <_CLK_MoveInputRight>
 8002b40:	e005      	b.n	8002b4e <MENU_HandleKeys+0x3e6>
		} else if (State == ST_WiFi) {
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MENU_HandleKeys+0x3fc>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d101      	bne.n	8002b4e <MENU_HandleKeys+0x3e6>
			MENU_PasswdInput();
 8002b4a:	f7ff fc2f 	bl	80023ac <MENU_PasswdInput>
		}

		LED_T(Orange);
 8002b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b52:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MENU_HandleKeys+0x400>)
 8002b54:	f005 f941 	bl	8007dda <HAL_GPIO_TogglePin>
		return 1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <MENU_HandleKeys+0x3f6>

	} IfEnd;
	return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20003549 	.word	0x20003549
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	200004c3 	.word	0x200004c3
 8002b74:	20000484 	.word	0x20000484
 8002b78:	2000047d 	.word	0x2000047d

08002b7c <_NET_ResetBuffer>:
char _connID;

uint8_t _uartByte;
uint8_t _requestIndex = 0;

void _NET_ResetBuffer(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	e007      	b.n	8002b98 <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 8002b88:	4a08      	ldr	r2, [pc, #32]	; (8002bac <_NET_ResetBuffer+0x30>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3301      	adds	r3, #1
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b9e:	dbf3      	blt.n	8002b88 <_NET_ResetBuffer+0xc>
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	200004d8 	.word	0x200004d8

08002bb0 <_NET_ResetIP>:

void _NET_ResetIP(void) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < IP_SIZE; i++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	e007      	b.n	8002bcc <_NET_ResetIP+0x1c>
		_currentIP[i] = 0;
 8002bbc:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <_NET_ResetIP+0x30>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IP_SIZE; i++) {
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b0e      	cmp	r3, #14
 8002bd0:	ddf4      	ble.n	8002bbc <_NET_ResetIP+0xc>
	}
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200004c8 	.word	0x200004c8

08002be4 <NET_GetIndexForPattern>:

int NET_GetIndexForPattern(char pattern[]) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	int find = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
	int patternLen = strlen(pattern);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fd faf7 	bl	80001e4 <strlen>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]

	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	e018      	b.n	8002c32 <NET_GetIndexForPattern+0x4e>
		if (find == patternLen) {
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d101      	bne.n	8002c0c <NET_GetIndexForPattern+0x28>
			return cursor;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	e018      	b.n	8002c3e <NET_GetIndexForPattern+0x5a>
		}

		if (_receive[cursor] == pattern[find]) {
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <NET_GetIndexForPattern+0x64>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	781a      	ldrb	r2, [r3, #0]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	440b      	add	r3, r1
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d103      	bne.n	8002c28 <NET_GetIndexForPattern+0x44>
			find++;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e001      	b.n	8002c2c <NET_GetIndexForPattern+0x48>
		} else {
			find = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c38:	dbe2      	blt.n	8002c00 <NET_GetIndexForPattern+0x1c>
		}
	}
	return -1;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200004d8 	.word	0x200004d8

08002c4c <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 8002c58:	f7ff ff90 	bl	8002b7c <_NET_ResetBuffer>
	size_t len = strlen(command);
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7fd fac1 	bl	80001e4 <strlen>
 8002c62:	6178      	str	r0, [r7, #20]

	HAL_UART_AbortReceive_IT(&huart3);
 8002c64:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <_NET_SendCommand+0x64>)
 8002c66:	f007 fead 	bl	800a9c4 <HAL_UART_AbortReceive_IT>

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	480f      	ldr	r0, [pc, #60]	; (8002cb0 <_NET_SendCommand+0x64>)
 8002c74:	f007 fd11 	bl	800a69a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	490d      	ldr	r1, [pc, #52]	; (8002cb4 <_NET_SendCommand+0x68>)
 8002c7e:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <_NET_SendCommand+0x64>)
 8002c80:	f007 fd0b 	bl	800a69a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c8a:	490b      	ldr	r1, [pc, #44]	; (8002cb8 <_NET_SendCommand+0x6c>)
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <_NET_SendCommand+0x64>)
 8002c8e:	f007 fd9d 	bl	800a7cc <HAL_UART_Receive>
			rTimeout);

	/* szukaj odpowiedzi 'OK\r\n' */
	if (NET_GetIndexForPattern(OK_PATTERN) != -1) {
 8002c92:	480a      	ldr	r0, [pc, #40]	; (8002cbc <_NET_SendCommand+0x70>)
 8002c94:	f7ff ffa6 	bl	8002be4 <NET_GetIndexForPattern>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d001      	beq.n	8002ca4 <_NET_SendCommand+0x58>
		return 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <_NET_SendCommand+0x5a>
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 8002ca4:	2301      	movs	r3, #1
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200034c8 	.word	0x200034c8
 8002cb4:	0800dbb4 	.word	0x0800dbb4
 8002cb8:	200004d8 	.word	0x200004d8
 8002cbc:	0800dbb8 	.word	0x0800dbb8

08002cc0 <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002cc4:	e002      	b.n	8002ccc <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f004 fd66 	bl	8007798 <HAL_Delay>
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002ccc:	2232      	movs	r2, #50	; 0x32
 8002cce:	2101      	movs	r1, #1
 8002cd0:	480a      	ldr	r0, [pc, #40]	; (8002cfc <_NET_SetClientDConnMode+0x3c>)
 8002cd2:	f7ff ffbb 	bl	8002c4c <_NET_SendCommand>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f4      	bne.n	8002cc6 <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002cdc:	e002      	b.n	8002ce4 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f004 fd5a 	bl	8007798 <HAL_Delay>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002ce4:	2264      	movs	r2, #100	; 0x64
 8002ce6:	2105      	movs	r1, #5
 8002ce8:	4805      	ldr	r0, [pc, #20]	; (8002d00 <_NET_SetClientDConnMode+0x40>)
 8002cea:	f7ff ffaf 	bl	8002c4c <_NET_SendCommand>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f4      	bne.n	8002cde <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8002cf4:	f000 fa44 	bl	8003180 <NET_WiFiDisconnect>
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0800dbc0 	.word	0x0800dbc0
 8002d00:	0800dbc8 	.word	0x0800dbc8

08002d04 <NET_Init>:

void NET_Init(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8002d08:	f7ff ffda 	bl	8002cc0 <_NET_SetClientDConnMode>

	_connID = 0;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <NET_Init+0x20>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
	_uartByte = 0;
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <NET_Init+0x24>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
	_requestIndex = 0;
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <NET_Init+0x28>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200004c5 	.word	0x200004c5
 8002d28:	200004c4 	.word	0x200004c4
 8002d2c:	20000254 	.word	0x20000254

08002d30 <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8002d36:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4894      	ldr	r0, [pc, #592]	; (8002f90 <NET_RequestNetworkList+0x260>)
 8002d3e:	f7ff ff85 	bl	8002c4c <_NET_SendCommand>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f040 811e 	bne.w	8002f86 <NET_RequestNetworkList+0x256>
		int index = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	e0f8      	b.n	8002f46 <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8002d54:	4a8f      	ldr	r2, [pc, #572]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b28      	cmp	r3, #40	; 0x28
 8002d5e:	f040 80e4 	bne.w	8002f2a <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	4a8a      	ldr	r2, [pc, #552]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 8002d6e:	4a89      	ldr	r2, [pc, #548]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3b30      	subs	r3, #48	; 0x30
 8002d78:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	f000 80e8 	beq.w	8002f52 <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 8002d82:	e005      	b.n	8002d90 <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	60ba      	str	r2, [r7, #8]
 8002d8a:	4a82      	ldr	r2, [pc, #520]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002d90:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4413      	add	r3, r2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b22      	cmp	r3, #34	; 0x22
 8002d9a:	d1f3      	bne.n	8002d84 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	60ba      	str	r2, [r7, #8]
 8002da2:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 8002da8:	e00e      	b.n	8002dc8 <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	4978      	ldr	r1, [pc, #480]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	440a      	add	r2, r1
 8002db6:	7811      	ldrb	r1, [r2, #0]
 8002db8:	4a76      	ldr	r2, [pc, #472]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002dba:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	4a74      	ldr	r2, [pc, #464]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002dc8:	4a72      	ldr	r2, [pc, #456]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4413      	add	r3, r2
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b22      	cmp	r3, #34	; 0x22
 8002dd2:	d1ea      	bne.n	8002daa <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 8002dd4:	e005      	b.n	8002de2 <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	60ba      	str	r2, [r7, #8]
 8002ddc:	4a6d      	ldr	r2, [pc, #436]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 8002de2:	4a6c      	ldr	r2, [pc, #432]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b29      	cmp	r3, #41	; 0x29
 8002dec:	d1f3      	bne.n	8002dd6 <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = '-';
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	60fa      	str	r2, [r7, #12]
 8002df4:	4a67      	ldr	r2, [pc, #412]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002df6:	212d      	movs	r1, #45	; 0x2d
 8002df8:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60ba      	str	r2, [r7, #8]
 8002e00:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d118      	bne.n	8002e3e <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	60fa      	str	r2, [r7, #12]
 8002e12:	4a60      	ldr	r2, [pc, #384]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e14:	214f      	movs	r1, #79	; 0x4f
 8002e16:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	60fa      	str	r2, [r7, #12]
 8002e1e:	4a5d      	ldr	r2, [pc, #372]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60fa      	str	r2, [r7, #12]
 8002e2a:	4a5a      	ldr	r2, [pc, #360]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e2c:	2145      	movs	r1, #69	; 0x45
 8002e2e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	60fa      	str	r2, [r7, #12]
 8002e36:	4a57      	ldr	r2, [pc, #348]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e38:	214e      	movs	r1, #78	; 0x4e
 8002e3a:	54d1      	strb	r1, [r2, r3]
 8002e3c:	e06e      	b.n	8002f1c <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d118      	bne.n	8002e76 <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60fa      	str	r2, [r7, #12]
 8002e4a:	4a52      	ldr	r2, [pc, #328]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e4c:	2157      	movs	r1, #87	; 0x57
 8002e4e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	60fa      	str	r2, [r7, #12]
 8002e56:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e58:	2145      	movs	r1, #69	; 0x45
 8002e5a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	60fa      	str	r2, [r7, #12]
 8002e62:	4a4c      	ldr	r2, [pc, #304]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e64:	2150      	movs	r1, #80	; 0x50
 8002e66:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60fa      	str	r2, [r7, #12]
 8002e6e:	4a49      	ldr	r2, [pc, #292]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e70:	2120      	movs	r1, #32
 8002e72:	54d1      	strb	r1, [r2, r3]
 8002e74:	e052      	b.n	8002f1c <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d118      	bne.n	8002eae <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60fa      	str	r2, [r7, #12]
 8002e82:	4a44      	ldr	r2, [pc, #272]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e84:	2157      	movs	r1, #87	; 0x57
 8002e86:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	60fa      	str	r2, [r7, #12]
 8002e8e:	4a41      	ldr	r2, [pc, #260]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e90:	2150      	movs	r1, #80	; 0x50
 8002e92:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60fa      	str	r2, [r7, #12]
 8002e9a:	4a3e      	ldr	r2, [pc, #248]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002e9c:	2141      	movs	r1, #65	; 0x41
 8002e9e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	60fa      	str	r2, [r7, #12]
 8002ea6:	4a3b      	ldr	r2, [pc, #236]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	54d1      	strb	r1, [r2, r3]
 8002eac:	e036      	b.n	8002f1c <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d118      	bne.n	8002ee6 <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	60fa      	str	r2, [r7, #12]
 8002eba:	4a36      	ldr	r2, [pc, #216]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ebc:	2157      	movs	r1, #87	; 0x57
 8002ebe:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60fa      	str	r2, [r7, #12]
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ec8:	2150      	movs	r1, #80	; 0x50
 8002eca:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	60fa      	str	r2, [r7, #12]
 8002ed2:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ed4:	2141      	movs	r1, #65	; 0x41
 8002ed6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	60fa      	str	r2, [r7, #12]
 8002ede:	4a2d      	ldr	r2, [pc, #180]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ee0:	2132      	movs	r1, #50	; 0x32
 8002ee2:	54d1      	strb	r1, [r2, r3]
 8002ee4:	e01a      	b.n	8002f1c <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d117      	bne.n	8002f1c <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	60fa      	str	r2, [r7, #12]
 8002ef2:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002ef4:	214d      	movs	r1, #77	; 0x4d
 8002ef6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60fa      	str	r2, [r7, #12]
 8002efe:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f00:	2149      	movs	r1, #73	; 0x49
 8002f02:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	60fa      	str	r2, [r7, #12]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f0c:	2158      	movs	r1, #88	; 0x58
 8002f0e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60fa      	str	r2, [r7, #12]
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f18:	2144      	movs	r1, #68	; 0x44
 8002f1a:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	60fa      	str	r2, [r7, #12]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f24:	213b      	movs	r1, #59	; 0x3b
 8002f26:	54d1      	strb	r1, [r2, r3]
				continue;
 8002f28:	e00a      	b.n	8002f40 <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00f      	beq.n	8002f56 <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f4c:	f6ff af02 	blt.w	8002d54 <NET_RequestNetworkList+0x24>
 8002f50:	e002      	b.n	8002f58 <NET_RequestNetworkList+0x228>
					break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <NET_RequestNetworkList+0x228>
				break;
 8002f56:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002f58:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	e007      	b.n	8002f70 <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 8002f60:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	daf3      	bge.n	8002f60 <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <NET_RequestNetworkList+0x252>
			return NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e002      	b.n	8002f88 <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <NET_RequestNetworkList+0x264>)
 8002f84:	e000      	b.n	8002f88 <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800dbd4 	.word	0x0800dbd4
 8002f94:	200004d8 	.word	0x200004d8

08002f98 <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0a0      	sub	sp, #128	; 0x80
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	int ssidIndex = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
	int cmdIndex = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	67bb      	str	r3, [r7, #120]	; 0x78
	char cmd[100] = { 0 };
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	2264      	movs	r2, #100	; 0x64
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f008 fba6 	bl	800b704 <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 8002fb8:	2300      	movs	r3, #0
 8002fba:	677b      	str	r3, [r7, #116]	; 0x74
 8002fbc:	e00a      	b.n	8002fd4 <NET_ConnectToWiFi+0x3c>
		while (_receive[ssidIndex++] != ';')
 8002fbe:	bf00      	nop
 8002fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc6:	4a37      	ldr	r2, [pc, #220]	; (80030a4 <NET_ConnectToWiFi+0x10c>)
 8002fc8:	5cd3      	ldrb	r3, [r2, r3]
 8002fca:	2b3b      	cmp	r3, #59	; 0x3b
 8002fcc:	d1f8      	bne.n	8002fc0 <NET_ConnectToWiFi+0x28>
	for (int i = 0; i < network - 1; i++) {
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	677b      	str	r3, [r7, #116]	; 0x74
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	dbef      	blt.n	8002fbe <NET_ConnectToWiFi+0x26>
			;
	}

	strcpy(cmd, CONN_TO_NETWORK);
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <NET_ConnectToWiFi+0x110>)
 8002fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fe6:	c303      	stmia	r3!, {r0, r1}
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	3302      	adds	r3, #2
 8002fec:	0c12      	lsrs	r2, r2, #16
 8002fee:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(CONN_TO_NETWORK);
 8002ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ff2:	330a      	adds	r3, #10
 8002ff4:	67bb      	str	r3, [r7, #120]	; 0x78

	for (int i = 0;; i++) {
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	; (80030a4 <NET_ConnectToWiFi+0x10c>)
 8002ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b2d      	cmp	r3, #45	; 0x2d
 8003004:	d010      	beq.n	8003028 <NET_ConnectToWiFi+0x90>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 8003006:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003008:	1c53      	adds	r3, r2, #1
 800300a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800300c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	67b9      	str	r1, [r7, #120]	; 0x78
 8003012:	4924      	ldr	r1, [pc, #144]	; (80030a4 <NET_ConnectToWiFi+0x10c>)
 8003014:	5c8a      	ldrb	r2, [r1, r2]
 8003016:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800301a:	440b      	add	r3, r1
 800301c:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0;; i++) {
 8003020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003022:	3301      	adds	r3, #1
 8003024:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 8003026:	e7e8      	b.n	8002ffa <NET_ConnectToWiFi+0x62>
			break;
 8003028:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 800302a:	f107 030c 	add.w	r3, r7, #12
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd f8d8 	bl	80001e4 <strlen>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	4413      	add	r3, r2
 800303e:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <NET_ConnectToWiFi+0x114>)
 8003040:	6810      	ldr	r0, [r2, #0]
 8003042:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 8003044:	f107 030c 	add.w	r3, r7, #12
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4618      	mov	r0, r3
 800304c:	f008 ffde 	bl	800c00c <strcat>
	strcat(cmd, "\"");
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f8c5 	bl	80001e4 <strlen>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4413      	add	r3, r2
 8003064:	4912      	ldr	r1, [pc, #72]	; (80030b0 <NET_ConnectToWiFi+0x118>)
 8003066:	461a      	mov	r2, r3
 8003068:	460b      	mov	r3, r1
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003076:	210a      	movs	r1, #10
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fde7 	bl	8002c4c <_NET_SendCommand>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <NET_ConnectToWiFi+0xfa>
		Mode = MD_ClientConn;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <NET_ConnectToWiFi+0x11c>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
		NET_HTTPSetup();
 800308a:	f000 f891 	bl	80031b0 <NET_HTTPSetup>

		return 0;
 800308e:	2300      	movs	r3, #0
 8003090:	e003      	b.n	800309a <NET_ConnectToWiFi+0x102>
	}
	Mode = MD_LostHost;
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <NET_ConnectToWiFi+0x11c>)
 8003094:	2203      	movs	r2, #3
 8003096:	701a      	strb	r2, [r3, #0]
	return 1;
 8003098:	2301      	movs	r3, #1
}
 800309a:	4618      	mov	r0, r3
 800309c:	3780      	adds	r7, #128	; 0x80
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200004d8 	.word	0x200004d8
 80030a8:	0800dbe0 	.word	0x0800dbe0
 80030ac:	0800dbec 	.word	0x0800dbec
 80030b0:	0800dbf0 	.word	0x0800dbf0
 80030b4:	20003548 	.word	0x20003548

080030b8 <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost)
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <NET_GetConnInfo+0xa8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <NET_GetConnInfo+0x16>
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <NET_GetConnInfo+0xa8>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d13e      	bne.n	800314c <NET_GetConnInfo+0x94>
			&& _NET_SendCommand(SHOW_IP, 5, 100) == 0) {
 80030ce:	2264      	movs	r2, #100	; 0x64
 80030d0:	2105      	movs	r1, #5
 80030d2:	4824      	ldr	r0, [pc, #144]	; (8003164 <NET_GetConnInfo+0xac>)
 80030d4:	f7ff fdba 	bl	8002c4c <_NET_SendCommand>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d136      	bne.n	800314c <NET_GetConnInfo+0x94>
		int cursor = NET_GetIndexForPattern(CLIENT_IP_PATTERN);
 80030de:	4822      	ldr	r0, [pc, #136]	; (8003168 <NET_GetConnInfo+0xb0>)
 80030e0:	f7ff fd80 	bl	8002be4 <NET_GetIndexForPattern>
 80030e4:	6078      	str	r0, [r7, #4]
		int index = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]

		_NET_ResetIP();
 80030ea:	f7ff fd61 	bl	8002bb0 <_NET_ResetIP>
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 80030ee:	e012      	b.n	8003116 <NET_GetConnInfo+0x5e>
			_currentIP[index++] = _receive[cursor++];
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	1c53      	adds	r3, r2, #1
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	6039      	str	r1, [r7, #0]
 80030fc:	491b      	ldr	r1, [pc, #108]	; (800316c <NET_GetConnInfo+0xb4>)
 80030fe:	5c89      	ldrb	r1, [r1, r2]
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <NET_GetConnInfo+0xb8>)
 8003102:	54d1      	strb	r1, [r2, r3]

			if (index - 1 > 15) {
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	2b0f      	cmp	r3, #15
 800310a:	dd04      	ble.n	8003116 <NET_GetConnInfo+0x5e>
				Mode = MD_LostHost;
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <NET_GetConnInfo+0xa8>)
 800310e:	2203      	movs	r2, #3
 8003110:	701a      	strb	r2, [r3, #0]
				return NULL; /* to nie jest adres ip */
 8003112:	2300      	movs	r3, #0
 8003114:	e020      	b.n	8003158 <NET_GetConnInfo+0xa0>
		while (_receive[cursor] != '"') {
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <NET_GetConnInfo+0xb4>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b22      	cmp	r3, #34	; 0x22
 8003120:	d1e6      	bne.n	80030f0 <NET_GetConnInfo+0x38>
			}
		}

		if (strcmp("0.0.0.0", _receive) == 0) {
 8003122:	4912      	ldr	r1, [pc, #72]	; (800316c <NET_GetConnInfo+0xb4>)
 8003124:	4813      	ldr	r0, [pc, #76]	; (8003174 <NET_GetConnInfo+0xbc>)
 8003126:	f7fd f853 	bl	80001d0 <strcmp>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <NET_GetConnInfo+0x82>
			Mode = MD_LostHost;
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <NET_GetConnInfo+0xa8>)
 8003132:	2203      	movs	r2, #3
 8003134:	701a      	strb	r2, [r3, #0]
			return NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	e00e      	b.n	8003158 <NET_GetConnInfo+0xa0>
		}
		/* jesli uda sie nawiazac polaczenie pozniej, ustaw serwer */
		if (Mode == MD_LostHost) {
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <NET_GetConnInfo+0xa8>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d104      	bne.n	800314c <NET_GetConnInfo+0x94>
			NET_HTTPSetup();
 8003142:	f000 f835 	bl	80031b0 <NET_HTTPSetup>
			Mode = MD_ClientConn;
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <NET_GetConnInfo+0xa8>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* wznow nasluchiwanie */
	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 800314c:	2201      	movs	r2, #1
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <NET_GetConnInfo+0xc0>)
 8003150:	480a      	ldr	r0, [pc, #40]	; (800317c <NET_GetConnInfo+0xc4>)
 8003152:	f007 fbe1 	bl	800a918 <HAL_UART_Receive_IT>
	return (char*) _currentIP;
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <NET_GetConnInfo+0xb8>)
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20003548 	.word	0x20003548
 8003164:	0800dbf4 	.word	0x0800dbf4
 8003168:	0800dc00 	.word	0x0800dc00
 800316c:	200004d8 	.word	0x200004d8
 8003170:	200004c8 	.word	0x200004c8
 8003174:	0800dc08 	.word	0x0800dc08
 8003178:	200004c4 	.word	0x200004c4
 800317c:	200034c8 	.word	0x200034c8

08003180 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 8003184:	e002      	b.n	800318c <NET_WiFiDisconnect+0xc>
		HAL_Delay(1);
 8003186:	2001      	movs	r0, #1
 8003188:	f004 fb06 	bl	8007798 <HAL_Delay>
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 800318c:	2264      	movs	r2, #100	; 0x64
 800318e:	2105      	movs	r1, #5
 8003190:	4805      	ldr	r0, [pc, #20]	; (80031a8 <NET_WiFiDisconnect+0x28>)
 8003192:	f7ff fd5b 	bl	8002c4c <_NET_SendCommand>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f4      	bne.n	8003186 <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <NET_WiFiDisconnect+0x2c>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
	return 0;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	0800dc10 	.word	0x0800dc10
 80031ac:	20003548 	.word	0x20003548

080031b0 <NET_HTTPSetup>:

uint8_t NET_HTTPSetup(void) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80031b4:	e002      	b.n	80031bc <NET_HTTPSetup+0xc>
		HAL_Delay(1);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f004 faee 	bl	8007798 <HAL_Delay>
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80031bc:	2264      	movs	r2, #100	; 0x64
 80031be:	2105      	movs	r1, #5
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <NET_HTTPSetup+0x44>)
 80031c2:	f7ff fd43 	bl	8002c4c <_NET_SendCommand>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f4      	bne.n	80031b6 <NET_HTTPSetup+0x6>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 80031cc:	e002      	b.n	80031d4 <NET_HTTPSetup+0x24>
		HAL_Delay(1);
 80031ce:	2001      	movs	r0, #1
 80031d0:	f004 fae2 	bl	8007798 <HAL_Delay>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 80031d4:	2264      	movs	r2, #100	; 0x64
 80031d6:	2105      	movs	r1, #5
 80031d8:	4807      	ldr	r0, [pc, #28]	; (80031f8 <NET_HTTPSetup+0x48>)
 80031da:	f7ff fd37 	bl	8002c4c <_NET_SendCommand>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f4      	bne.n	80031ce <NET_HTTPSetup+0x1e>

	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 80031e4:	2201      	movs	r2, #1
 80031e6:	4905      	ldr	r1, [pc, #20]	; (80031fc <NET_HTTPSetup+0x4c>)
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <NET_HTTPSetup+0x50>)
 80031ea:	f007 fb95 	bl	800a918 <HAL_UART_Receive_IT>
	/* gniazdo tcp juz nasluchuje na porcie 80 */
	return 0;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0800dc1c 	.word	0x0800dc1c
 80031f8:	0800dc28 	.word	0x0800dc28
 80031fc:	200004c4 	.word	0x200004c4
 8003200:	200034c8 	.word	0x200034c8

08003204 <NET_HandleUART_IT>:

void NET_HandleUART_IT(void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
	if (_uartByte == REQUEST_RECIEVED_PATTERN[_requestIndex++]) {
 800320a:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <NET_HandleUART_IT+0xd0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	b2d1      	uxtb	r1, r2
 8003212:	4a30      	ldr	r2, [pc, #192]	; (80032d4 <NET_HandleUART_IT+0xd0>)
 8003214:	7011      	strb	r1, [r2, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <NET_HandleUART_IT+0xd4>)
 800321a:	5c9a      	ldrb	r2, [r3, r2]
 800321c:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <NET_HandleUART_IT+0xd8>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d14b      	bne.n	80032bc <NET_HandleUART_IT+0xb8>
		if (_requestIndex == strlen(REQUEST_RECIEVED_PATTERN)) {
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <NET_HandleUART_IT+0xd0>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d14a      	bne.n	80032c2 <NET_HandleUART_IT+0xbe>
			/* odczyt id polaczenia */
			HAL_UART_Receive(&huart3, (uint8_t*) &_connID, 1,
 800322c:	231e      	movs	r3, #30
 800322e:	2201      	movs	r2, #1
 8003230:	492b      	ldr	r1, [pc, #172]	; (80032e0 <NET_HandleUART_IT+0xdc>)
 8003232:	482c      	ldr	r0, [pc, #176]	; (80032e4 <NET_HandleUART_IT+0xe0>)
 8003234:	f007 faca 	bl	800a7cc <HAL_UART_Receive>
			BYTE_RECEIVE_TIMEOUT);
			/* odczyt ilosci danych do odebrania */
			char lenString[5] = { 0 }, tempChar = 0;
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	711a      	strb	r2, [r3, #4]
 8003240:	2300      	movs	r3, #0
 8003242:	70fb      	strb	r3, [r7, #3]
			int lenIndex = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

			while (tempChar != ':') {
 8003248:	e012      	b.n	8003270 <NET_HandleUART_IT+0x6c>
				HAL_UART_Receive(&huart3, (uint8_t*) &tempChar, 1,
 800324a:	1cf9      	adds	r1, r7, #3
 800324c:	231e      	movs	r3, #30
 800324e:	2201      	movs	r2, #1
 8003250:	4824      	ldr	r0, [pc, #144]	; (80032e4 <NET_HandleUART_IT+0xe0>)
 8003252:	f007 fabb 	bl	800a7cc <HAL_UART_Receive>
				BYTE_RECEIVE_TIMEOUT);
				/* jebaniutki nie chce w nulla */
				if (tempChar == ',')
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	2b2c      	cmp	r3, #44	; 0x2c
 800325a:	d100      	bne.n	800325e <NET_HandleUART_IT+0x5a>
					continue;
 800325c:	e008      	b.n	8003270 <NET_HandleUART_IT+0x6c>

				lenString[lenIndex++] = tempChar;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	f107 0110 	add.w	r1, r7, #16
 800326a:	440b      	add	r3, r1
 800326c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while (tempChar != ':') {
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	2b3a      	cmp	r3, #58	; 0x3a
 8003274:	d1e9      	bne.n	800324a <NET_HandleUART_IT+0x46>
			}
			/* bez dwukropka */
			lenString[--lenIndex] = 0;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	1d3a      	adds	r2, r7, #4
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]

			uint16_t requestLen = atoi(lenString);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f008 fa0d 	bl	800b6a8 <atoi>
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
			requestLen = (requestLen > RECEIVE_BUFFER_SIZE) ?
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003298:	bf28      	it	cs
 800329a:	f44f 73fa 	movcs.w	r3, #500	; 0x1f4
 800329e:	817b      	strh	r3, [r7, #10]
			RECEIVE_BUFFER_SIZE :
																requestLen;
			/* odbierz zadanie */
			HAL_UART_Receive(&huart3, (uint8_t*) _receive, requestLen,
 80032a0:	897a      	ldrh	r2, [r7, #10]
 80032a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032a6:	4910      	ldr	r1, [pc, #64]	; (80032e8 <NET_HandleUART_IT+0xe4>)
 80032a8:	480e      	ldr	r0, [pc, #56]	; (80032e4 <NET_HandleUART_IT+0xe0>)
 80032aa:	f007 fa8f 	bl	800a7cc <HAL_UART_Receive>
			REQUEST_RECEIVE_TIMEOUT);

			HTTP_HandleRequest((char*) _receive, _connID);
 80032ae:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <NET_HandleUART_IT+0xdc>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	480c      	ldr	r0, [pc, #48]	; (80032e8 <NET_HandleUART_IT+0xe4>)
 80032b6:	f7fd fe93 	bl	8000fe0 <HTTP_HandleRequest>
 80032ba:	e002      	b.n	80032c2 <NET_HandleUART_IT+0xbe>
		}
	} else {
		/* nieistotne dane */
		_requestIndex = 0;
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <NET_HandleUART_IT+0xd0>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 80032c2:	2201      	movs	r2, #1
 80032c4:	4905      	ldr	r1, [pc, #20]	; (80032dc <NET_HandleUART_IT+0xd8>)
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <NET_HandleUART_IT+0xe0>)
 80032c8:	f007 fb26 	bl	800a918 <HAL_UART_Receive_IT>
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000254 	.word	0x20000254
 80032d8:	0800dc3c 	.word	0x0800dc3c
 80032dc:	200004c4 	.word	0x200004c4
 80032e0:	200004c5 	.word	0x200004c5
 80032e4:	200034c8 	.word	0x200034c8
 80032e8:	200004d8 	.word	0x200004d8

080032ec <NET_SendData>:

#define __CMD_SIZE 20
#define __resetCmd() for(int i=0;i<__CMD_SIZE;i++)cmd[i]=0

void NET_SendData(char connID, char *data) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE ];
	uint32_t len = strlen(data), index = 0;
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	f7fc ff73 	bl	80001e4 <strlen>
 80032fe:	6238      	str	r0, [r7, #32]
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (len > index) {
 8003304:	e043      	b.n	800338e <NET_SendData+0xa2>
		/* dziel dane na paczki i odsylaj dokument */
		int toSend = (len - index > PACKET_SIZE) ? PACKET_SIZE : len - index;
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	bf28      	it	cs
 8003312:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8003316:	61fb      	str	r3, [r7, #28]

		__resetCmd();
 8003318:	2300      	movs	r3, #0
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
 800331c:	e008      	b.n	8003330 <NET_SendData+0x44>
 800331e:	f107 0208 	add.w	r2, r7, #8
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	4413      	add	r3, r2
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	3301      	adds	r3, #1
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	2b13      	cmp	r3, #19
 8003334:	ddf3      	ble.n	800331e <NET_SendData+0x32>
		sprintf(cmd, SEND_DATA_TO_CONN("%c", "%d"), connID, toSend);
 8003336:	79fa      	ldrb	r2, [r7, #7]
 8003338:	f107 0008 	add.w	r0, r7, #8
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4918      	ldr	r1, [pc, #96]	; (80033a0 <NET_SendData+0xb4>)
 8003340:	f008 fe44 	bl	800bfcc <siprintf>
		while (_NET_SendCommand(cmd, 5, 100) != 0)
 8003344:	bf00      	nop
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	2264      	movs	r2, #100	; 0x64
 800334c:	2105      	movs	r1, #5
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fc7c 	bl	8002c4c <_NET_SendCommand>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f5      	bne.n	8003346 <NET_SendData+0x5a>
			;

		HAL_Delay(PACKET_INTERVAL);
 800335a:	2014      	movs	r0, #20
 800335c:	f004 fa1c 	bl	8007798 <HAL_Delay>

		for (int i = 0; i < toSend; i++) {
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	e00c      	b.n	8003380 <NET_SendData+0x94>
			HAL_UART_Transmit(&huart3, (uint8_t*) &(data[index++]), 1, 100);
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	18d1      	adds	r1, r2, r3
 8003370:	2364      	movs	r3, #100	; 0x64
 8003372:	2201      	movs	r2, #1
 8003374:	480b      	ldr	r0, [pc, #44]	; (80033a4 <NET_SendData+0xb8>)
 8003376:	f007 f990 	bl	800a69a <HAL_UART_Transmit>
		for (int i = 0; i < toSend; i++) {
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	3301      	adds	r3, #1
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbee      	blt.n	8003366 <NET_SendData+0x7a>
		}

		HAL_Delay(6 * PACKET_INTERVAL);
 8003388:	2078      	movs	r0, #120	; 0x78
 800338a:	f004 fa05 	bl	8007798 <HAL_Delay>
	while (len > index) {
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	429a      	cmp	r2, r3
 8003394:	d8b7      	bhi.n	8003306 <NET_SendData+0x1a>
	}
}
 8003396:	bf00      	nop
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	0800dc44 	.word	0x0800dc44
 80033a4:	200034c8 	.word	0x200034c8

080033a8 <NET_CloseConn>:

void NET_CloseConn(char connID) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE] = {0};
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]

	sprintf(cmd, CLOSE_CONN("%c"), _connID);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <NET_CloseConn+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4908      	ldr	r1, [pc, #32]	; (80033f0 <NET_CloseConn+0x48>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f008 fdfc 	bl	800bfcc <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	2264      	movs	r2, #100	; 0x64
 80033da:	2105      	movs	r1, #5
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc35 	bl	8002c4c <_NET_SendCommand>
}
 80033e2:	bf00      	nop
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200004c5 	.word	0x200004c5
 80033f0:	0800dc58 	.word	0x0800dc58

080033f4 <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <RGB_Init+0x2c>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <RGB_Init+0x30>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <RGB_Init+0x34>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
	_state = 0;
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <RGB_Init+0x38>)
 800340c:	2200      	movs	r2, #0
 800340e:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <RGB_Init+0x3c>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	200006d4 	.word	0x200006d4
 8003424:	200006cc 	.word	0x200006cc
 8003428:	200006d8 	.word	0x200006d8
 800342c:	200006d0 	.word	0x200006d0
 8003430:	200006dc 	.word	0x200006dc

08003434 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 8003438:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <_RGB_UpdateRegisters+0x80>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003440:	d303      	bcc.n	800344a <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <_RGB_UpdateRegisters+0x80>)
 8003444:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003448:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <_RGB_UpdateRegisters+0x84>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003452:	d303      	bcc.n	800345c <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <_RGB_UpdateRegisters+0x84>)
 8003456:	f240 32e7 	movw	r2, #999	; 0x3e7
 800345a:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <_RGB_UpdateRegisters+0x88>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003464:	d303      	bcc.n	800346e <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <_RGB_UpdateRegisters+0x88>)
 8003468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800346c:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 800346e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <_RGB_UpdateRegisters+0x80>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8003478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <_RGB_UpdateRegisters+0x84>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8003482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <_RGB_UpdateRegisters+0x88>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <_RGB_UpdateRegisters+0x8c>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <_RGB_UpdateRegisters+0x8c>)
 8003496:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <_RGB_UpdateRegisters+0x8c>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 80034a0:	d902      	bls.n	80034a8 <_RGB_UpdateRegisters+0x74>
		_state = 0;
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <_RGB_UpdateRegisters+0x8c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	801a      	strh	r2, [r3, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	200006d4 	.word	0x200006d4
 80034b8:	200006cc 	.word	0x200006cc
 80034bc:	200006d8 	.word	0x200006d8
 80034c0:	200006d0 	.word	0x200006d0

080034c4 <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <_RGB_SetWhite+0x2c>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <_RGB_SetWhite+0x30>)
 80034d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034d4:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <_RGB_SetWhite+0x34>)
 80034d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034dc:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_RGB_SetWhite+0x38>)
 80034e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034e4:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80034e6:	f7ff ffa5 	bl	8003434 <_RGB_UpdateRegisters>
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200006dc 	.word	0x200006dc
 80034f4:	200006d4 	.word	0x200006d4
 80034f8:	200006cc 	.word	0x200006cc
 80034fc:	200006d8 	.word	0x200006d8

08003500 <_RGB_SetRed>:

void _RGB_SetRed(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <_RGB_SetRed+0x28>)
 8003506:	2202      	movs	r2, #2
 8003508:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <_RGB_SetRed+0x2c>)
 800350c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003510:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <_RGB_SetRed+0x30>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <_RGB_SetRed+0x34>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800351e:	f7ff ff89 	bl	8003434 <_RGB_UpdateRegisters>
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200006dc 	.word	0x200006dc
 800352c:	200006d4 	.word	0x200006d4
 8003530:	200006cc 	.word	0x200006cc
 8003534:	200006d8 	.word	0x200006d8

08003538 <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <_RGB_SetGreen+0x28>)
 800353e:	2203      	movs	r2, #3
 8003540:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <_RGB_SetGreen+0x2c>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003548:	4b07      	ldr	r3, [pc, #28]	; (8003568 <_RGB_SetGreen+0x30>)
 800354a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800354e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <_RGB_SetGreen+0x34>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003556:	f7ff ff6d 	bl	8003434 <_RGB_UpdateRegisters>
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200006dc 	.word	0x200006dc
 8003564:	200006d4 	.word	0x200006d4
 8003568:	200006cc 	.word	0x200006cc
 800356c:	200006d8 	.word	0x200006d8

08003570 <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <_RGB_SetBlue+0x28>)
 8003576:	2204      	movs	r2, #4
 8003578:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <_RGB_SetBlue+0x2c>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <_RGB_SetBlue+0x30>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <_RGB_SetBlue+0x34>)
 8003588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800358c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800358e:	f7ff ff51 	bl	8003434 <_RGB_UpdateRegisters>
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200006dc 	.word	0x200006dc
 800359c:	200006d4 	.word	0x200006d4
 80035a0:	200006cc 	.word	0x200006cc
 80035a4:	200006d8 	.word	0x200006d8

080035a8 <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <_RGB_SetBlack+0x24>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <_RGB_SetBlack+0x28>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <_RGB_SetBlack+0x2c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <_RGB_SetBlack+0x30>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80035c4:	f7ff ff36 	bl	8003434 <_RGB_UpdateRegisters>
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	200006dc 	.word	0x200006dc
 80035d0:	200006d4 	.word	0x200006d4
 80035d4:	200006cc 	.word	0x200006cc
 80035d8:	200006d8 	.word	0x200006d8

080035dc <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 80035e0:	4b41      	ldr	r3, [pc, #260]	; (80036e8 <_RGB_Rainbow+0x10c>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b09      	cmp	r3, #9
 80035e6:	d002      	beq.n	80035ee <_RGB_Rainbow+0x12>
		_state = 0;
 80035e8:	4b40      	ldr	r3, [pc, #256]	; (80036ec <_RGB_Rainbow+0x110>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <_RGB_Rainbow+0x10c>)
 80035f0:	2209      	movs	r2, #9
 80035f2:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 80035f4:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <_RGB_Rainbow+0x110>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	f240 124d 	movw	r2, #333	; 0x14d
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d010      	beq.n	8003622 <_RGB_Rainbow+0x46>
 8003600:	f240 229a 	movw	r2, #666	; 0x29a
 8003604:	4293      	cmp	r3, r2
 8003606:	d017      	beq.n	8003638 <_RGB_Rainbow+0x5c>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d120      	bne.n	800364e <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <_RGB_Rainbow+0x114>)
 800360e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003612:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <_RGB_Rainbow+0x118>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <_RGB_Rainbow+0x11c>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
		break;
 8003620:	e05e      	b.n	80036e0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 8003622:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <_RGB_Rainbow+0x114>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003628:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <_RGB_Rainbow+0x118>)
 800362a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800362e:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003630:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <_RGB_Rainbow+0x11c>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
		break;
 8003636:	e053      	b.n	80036e0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <_RGB_Rainbow+0x114>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <_RGB_Rainbow+0x118>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <_RGB_Rainbow+0x11c>)
 8003646:	f240 32e7 	movw	r2, #999	; 0x3e7
 800364a:	601a      	str	r2, [r3, #0]
		break;
 800364c:	e048      	b.n	80036e0 <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <_RGB_Rainbow+0x110>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <_RGB_Rainbow+0xa0>
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <_RGB_Rainbow+0x110>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800365e:	d80d      	bhi.n	800367c <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <_RGB_Rainbow+0x114>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3b03      	subs	r3, #3
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <_RGB_Rainbow+0x114>)
 8003668:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <_RGB_Rainbow+0x118>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3303      	adds	r3, #3
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <_RGB_Rainbow+0x118>)
 8003672:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <_RGB_Rainbow+0x11c>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e031      	b.n	80036e0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 800367c:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <_RGB_Rainbow+0x110>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8003684:	d313      	bcc.n	80036ae <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <_RGB_Rainbow+0x110>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	f240 2299 	movw	r2, #665	; 0x299
 800368e:	4293      	cmp	r3, r2
 8003690:	d80d      	bhi.n	80036ae <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <_RGB_Rainbow+0x114>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <_RGB_Rainbow+0x118>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b03      	subs	r3, #3
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <_RGB_Rainbow+0x118>)
 80036a0:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <_RGB_Rainbow+0x11c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3303      	adds	r3, #3
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <_RGB_Rainbow+0x11c>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e018      	b.n	80036e0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_RGB_Rainbow+0x110>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	f240 229a 	movw	r2, #666	; 0x29a
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d912      	bls.n	80036e0 <_RGB_Rainbow+0x104>
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <_RGB_Rainbow+0x110>)
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	f240 32e6 	movw	r2, #998	; 0x3e6
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d80c      	bhi.n	80036e0 <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <_RGB_Rainbow+0x114>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3303      	adds	r3, #3
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <_RGB_Rainbow+0x114>)
 80036ce:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <_RGB_Rainbow+0x118>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <_RGB_Rainbow+0x11c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3b03      	subs	r3, #3
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <_RGB_Rainbow+0x11c>)
 80036de:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 80036e0:	f7ff fea8 	bl	8003434 <_RGB_UpdateRegisters>
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	200006dc 	.word	0x200006dc
 80036ec:	200006d0 	.word	0x200006d0
 80036f0:	200006d4 	.word	0x200006d4
 80036f4:	200006cc 	.word	0x200006cc
 80036f8:	200006d8 	.word	0x200006d8

080036fc <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <_RGB_BlinkRed+0x5c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d002      	beq.n	800370e <_RGB_BlinkRed+0x12>
		_state = 0;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <_RGB_BlinkRed+0x60>)
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <_RGB_BlinkRed+0x5c>)
 8003710:	2206      	movs	r2, #6
 8003712:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <_RGB_BlinkRed+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <_RGB_BlinkRed+0x68>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <_RGB_BlinkRed+0x60>)
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <_RGB_BlinkRed+0x6c>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e00f      	b.n	8003750 <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <_RGB_BlinkRed+0x60>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003738:	d805      	bhi.n	8003746 <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <_RGB_BlinkRed+0x6c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3302      	adds	r3, #2
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <_RGB_BlinkRed+0x6c>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e004      	b.n	8003750 <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_RGB_BlinkRed+0x6c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3b02      	subs	r3, #2
 800374c:	4a06      	ldr	r2, [pc, #24]	; (8003768 <_RGB_BlinkRed+0x6c>)
 800374e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003750:	f7ff fe70 	bl	8003434 <_RGB_UpdateRegisters>
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}
 8003758:	200006dc 	.word	0x200006dc
 800375c:	200006d0 	.word	0x200006d0
 8003760:	200006cc 	.word	0x200006cc
 8003764:	200006d8 	.word	0x200006d8
 8003768:	200006d4 	.word	0x200006d4

0800376c <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <_RGB_BlinkGreen+0x5c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b07      	cmp	r3, #7
 8003776:	d002      	beq.n	800377e <_RGB_BlinkGreen+0x12>
		_state = 0;
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <_RGB_BlinkGreen+0x60>)
 800377a:	2200      	movs	r2, #0
 800377c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <_RGB_BlinkGreen+0x5c>)
 8003780:	2207      	movs	r2, #7
 8003782:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <_RGB_BlinkGreen+0x64>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <_RGB_BlinkGreen+0x68>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <_RGB_BlinkGreen+0x60>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <_RGB_BlinkGreen+0x6c>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e00f      	b.n	80037c0 <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <_RGB_BlinkGreen+0x60>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80037a8:	d805      	bhi.n	80037b6 <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 80037aa:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <_RGB_BlinkGreen+0x6c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3302      	adds	r3, #2
 80037b0:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <_RGB_BlinkGreen+0x6c>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e004      	b.n	80037c0 <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <_RGB_BlinkGreen+0x6c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3b02      	subs	r3, #2
 80037bc:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <_RGB_BlinkGreen+0x6c>)
 80037be:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80037c0:	f7ff fe38 	bl	8003434 <_RGB_UpdateRegisters>
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200006dc 	.word	0x200006dc
 80037cc:	200006d0 	.word	0x200006d0
 80037d0:	200006d4 	.word	0x200006d4
 80037d4:	200006d8 	.word	0x200006d8
 80037d8:	200006cc 	.word	0x200006cc

080037dc <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <_RGB_BlinkBlue+0x5c>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d002      	beq.n	80037ee <_RGB_BlinkBlue+0x12>
		_state = 0;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <_RGB_BlinkBlue+0x60>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <_RGB_BlinkBlue+0x5c>)
 80037f0:	2208      	movs	r2, #8
 80037f2:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <_RGB_BlinkBlue+0x64>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <_RGB_BlinkBlue+0x68>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003800:	4b0e      	ldr	r3, [pc, #56]	; (800383c <_RGB_BlinkBlue+0x60>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <_RGB_BlinkBlue+0x6c>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <_RGB_BlinkBlue+0x60>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003818:	d805      	bhi.n	8003826 <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <_RGB_BlinkBlue+0x6c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3302      	adds	r3, #2
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <_RGB_BlinkBlue+0x6c>)
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e004      	b.n	8003830 <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <_RGB_BlinkBlue+0x6c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3b02      	subs	r3, #2
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <_RGB_BlinkBlue+0x6c>)
 800382e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003830:	f7ff fe00 	bl	8003434 <_RGB_UpdateRegisters>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200006dc 	.word	0x200006dc
 800383c:	200006d0 	.word	0x200006d0
 8003840:	200006d4 	.word	0x200006d4
 8003844:	200006cc 	.word	0x200006cc
 8003848:	200006d8 	.word	0x200006d8

0800384c <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <_RGB_BlinkWhite+0x84>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d002      	beq.n	800385e <_RGB_BlinkWhite+0x12>
		_state = 0;
 8003858:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <_RGB_BlinkWhite+0x88>)
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <_RGB_BlinkWhite+0x84>)
 8003860:	2205      	movs	r2, #5
 8003862:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <_RGB_BlinkWhite+0x88>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 800386c:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <_RGB_BlinkWhite+0x8c>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <_RGB_BlinkWhite+0x90>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <_RGB_BlinkWhite+0x94>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e023      	b.n	80038c8 <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <_RGB_BlinkWhite+0x88>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003888:	d80f      	bhi.n	80038aa <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <_RGB_BlinkWhite+0x8c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3302      	adds	r3, #2
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <_RGB_BlinkWhite+0x8c>)
 8003892:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <_RGB_BlinkWhite+0x90>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3302      	adds	r3, #2
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <_RGB_BlinkWhite+0x90>)
 800389c:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <_RGB_BlinkWhite+0x94>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3302      	adds	r3, #2
 80038a4:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <_RGB_BlinkWhite+0x94>)
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e00e      	b.n	80038c8 <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <_RGB_BlinkWhite+0x8c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3b02      	subs	r3, #2
 80038b0:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <_RGB_BlinkWhite+0x8c>)
 80038b2:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <_RGB_BlinkWhite+0x90>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3b02      	subs	r3, #2
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <_RGB_BlinkWhite+0x90>)
 80038bc:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <_RGB_BlinkWhite+0x94>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b02      	subs	r3, #2
 80038c4:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <_RGB_BlinkWhite+0x94>)
 80038c6:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80038c8:	f7ff fdb4 	bl	8003434 <_RGB_UpdateRegisters>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200006dc 	.word	0x200006dc
 80038d4:	200006d0 	.word	0x200006d0
 80038d8:	200006d4 	.word	0x200006d4
 80038dc:	200006cc 	.word	0x200006cc
 80038e0:	200006d8 	.word	0x200006d8

080038e4 <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2b09      	cmp	r3, #9
 80038f2:	d835      	bhi.n	8003960 <RGB_SetMode+0x7c>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <RGB_SetMode+0x18>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800392b 	.word	0x0800392b
 8003904:	08003931 	.word	0x08003931
 8003908:	08003937 	.word	0x08003937
 800390c:	0800393d 	.word	0x0800393d
 8003910:	08003955 	.word	0x08003955
 8003914:	08003943 	.word	0x08003943
 8003918:	08003949 	.word	0x08003949
 800391c:	0800394f 	.word	0x0800394f
 8003920:	0800395b 	.word	0x0800395b
	case RGB_Disabled:
		_RGB_SetBlack();
 8003924:	f7ff fe40 	bl	80035a8 <_RGB_SetBlack>
		break;
 8003928:	e01a      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 800392a:	f7ff fdcb 	bl	80034c4 <_RGB_SetWhite>
		break;
 800392e:	e017      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 8003930:	f7ff fde6 	bl	8003500 <_RGB_SetRed>
		break;
 8003934:	e014      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 8003936:	f7ff fdff 	bl	8003538 <_RGB_SetGreen>
		break;
 800393a:	e011      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 800393c:	f7ff fe18 	bl	8003570 <_RGB_SetBlue>
		break;
 8003940:	e00e      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 8003942:	f7ff fedb 	bl	80036fc <_RGB_BlinkRed>
		break;
 8003946:	e00b      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 8003948:	f7ff ff10 	bl	800376c <_RGB_BlinkGreen>
		break;
 800394c:	e008      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 800394e:	f7ff ff45 	bl	80037dc <_RGB_BlinkBlue>
		break;
 8003952:	e005      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 8003954:	f7ff ff7a 	bl	800384c <_RGB_BlinkWhite>
		break;
 8003958:	e002      	b.n	8003960 <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 800395a:	f7ff fe3f 	bl	80035dc <_RGB_Rainbow>
		break;
 800395e:	bf00      	nop
	}
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_SD_ResetBuffer>:
UINT _writtenB;
UINT _readB;

BYTE _buffer[MAX_FILESIZE];

void _SD_ResetBuffer(void) {
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_FILESIZE; i++) {
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	e007      	b.n	8003984 <_SD_ResetBuffer+0x1c>
		_buffer[i] = 0;
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <_SD_ResetBuffer+0x34>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FILESIZE; i++) {
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3301      	adds	r3, #1
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f242 720f 	movw	r2, #9999	; 0x270f
 800398a:	4293      	cmp	r3, r2
 800398c:	ddf2      	ble.n	8003974 <_SD_ResetBuffer+0xc>
	}
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000b28 	.word	0x20000b28

080039a0 <SD_Init>:
	while (f_mkfs("", FM_FAT32, (DWORD) 0, _work, sizeof(_work)) != FR_OK)
		HAL_Delay(1);
	_SD_GetDiskSpace();
}

void SD_Init(void) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
	if (f_mount(&_ff, "", 1) == FR_NO_FILESYSTEM) {
 80039a4:	2201      	movs	r2, #1
 80039a6:	4904      	ldr	r1, [pc, #16]	; (80039b8 <SD_Init+0x18>)
 80039a8:	4804      	ldr	r0, [pc, #16]	; (80039bc <SD_Init+0x1c>)
 80039aa:	f002 fcb5 	bl	8006318 <f_mount>
		//TODO Fatal
	}

	SD_RefreshDateTime();
 80039ae:	f000 f837 	bl	8003a20 <SD_RefreshDateTime>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	0800dc68 	.word	0x0800dc68
 80039bc:	200006e4 	.word	0x200006e4

080039c0 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <_SD_ClearDateTimeRegisters+0x58>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <_SD_ClearDateTimeRegisters+0x5c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <_SD_ClearDateTimeRegisters+0x5c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <_SD_ClearDateTimeRegisters+0x5c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <_SD_ClearDateTimeRegisters+0x5c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	70da      	strb	r2, [r3, #3]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20003238 	.word	0x20003238
 8003a1c:	20000924 	.word	0x20000924

08003a20 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8003a24:	f7ff ffcc 	bl	80039c0 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4938      	ldr	r1, [pc, #224]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a2c:	4838      	ldr	r0, [pc, #224]	; (8003b10 <SD_RefreshDateTime+0xf0>)
 8003a2e:	f005 f899 	bl	8008b64 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003a32:	2201      	movs	r2, #1
 8003a34:	4937      	ldr	r1, [pc, #220]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003a36:	4836      	ldr	r0, [pc, #216]	; (8003b10 <SD_RefreshDateTime+0xf0>)
 8003a38:	f005 f999 	bl	8008d6e <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3330      	adds	r3, #48	; 0x30
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003a4a:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 8003a4c:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	3330      	adds	r3, #48	; 0x30
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003a5c:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3330      	adds	r3, #48	; 0x30
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003a6c:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3330      	adds	r3, #48	; 0x30
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003a7e:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a82:	789b      	ldrb	r3, [r3, #2]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3330      	adds	r3, #48	; 0x30
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003a8e:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 8003a90:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <SD_RefreshDateTime+0xec>)
 8003a92:	789b      	ldrb	r3, [r3, #2]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	3330      	adds	r3, #48	; 0x30
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003aa0:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003aa4:	789b      	ldrb	r3, [r3, #2]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3330      	adds	r3, #48	; 0x30
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003ab0:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003ab4:	789b      	ldrb	r3, [r3, #2]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	3330      	adds	r3, #48	; 0x30
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003ac2:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 8003ac4:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003ac6:	785b      	ldrb	r3, [r3, #1]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3330      	adds	r3, #48	; 0x30
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003ad2:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3330      	adds	r3, #48	; 0x30
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003ae4:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003ae8:	78db      	ldrb	r3, [r3, #3]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3330      	adds	r3, #48	; 0x30
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003af4:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <SD_RefreshDateTime+0xf4>)
 8003af8:	78db      	ldrb	r3, [r3, #3]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	3330      	adds	r3, #48	; 0x30
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <SD_RefreshDateTime+0xf8>)
 8003b06:	715a      	strb	r2, [r3, #5]
}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20003238 	.word	0x20003238
 8003b10:	2000354c 	.word	0x2000354c
 8003b14:	20000924 	.word	0x20000924
 8003b18:	20000918 	.word	0x20000918

08003b1c <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af04      	add	r7, sp, #16
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b34:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b36:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b38:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b3a:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b3c:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b40:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b42:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b46:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	9002      	str	r0, [sp, #8]
 8003b4c:	9101      	str	r1, [sp, #4]
 8003b4e:	9200      	str	r2, [sp, #0]
 8003b50:	462b      	mov	r3, r5
 8003b52:	4622      	mov	r2, r4
 8003b54:	4912      	ldr	r1, [pc, #72]	; (8003ba0 <SD_GetDateTime+0x84>)
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f008 fa38 	bl	800bfcc <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b5e:	799b      	ldrb	r3, [r3, #6]
 8003b60:	461c      	mov	r4, r3
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b64:	79db      	ldrb	r3, [r3, #7]
 8003b66:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b6a:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b6c:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b70:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b72:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b76:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b78:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <SD_GetDateTime+0x80>)
 8003b7c:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	9002      	str	r0, [sp, #8]
 8003b82:	9101      	str	r1, [sp, #4]
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	462b      	mov	r3, r5
 8003b88:	4622      	mov	r2, r4
 8003b8a:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <SD_GetDateTime+0x88>)
 8003b8c:	6838      	ldr	r0, [r7, #0]
 8003b8e:	f008 fa1d 	bl	800bfcc <siprintf>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bdb0      	pop	{r4, r5, r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000918 	.word	0x20000918
 8003ba0:	0800dc6c 	.word	0x0800dc6c
 8003ba4:	0800dc7c 	.word	0x0800dc7c

08003ba8 <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 8003bb2:	f7ff ff05 	bl	80039c0 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <SD_SetDateTime+0xb8>)
 8003bca:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3303      	adds	r3, #3
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4413      	add	r3, r2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <SD_SetDateTime+0xb8>)
 8003be2:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3305      	adds	r3, #5
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <SD_SetDateTime+0xb8>)
 8003bfa:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <SD_SetDateTime+0xbc>)
 8003c10:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	3302      	adds	r3, #2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3303      	adds	r3, #3
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <SD_SetDateTime+0xbc>)
 8003c28:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	3305      	adds	r3, #5
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <SD_SetDateTime+0xbc>)
 8003c40:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003c42:	2201      	movs	r2, #1
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <SD_SetDateTime+0xbc>)
 8003c46:	4808      	ldr	r0, [pc, #32]	; (8003c68 <SD_SetDateTime+0xc0>)
 8003c48:	f004 fecf 	bl	80089ea <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4904      	ldr	r1, [pc, #16]	; (8003c60 <SD_SetDateTime+0xb8>)
 8003c50:	4805      	ldr	r0, [pc, #20]	; (8003c68 <SD_SetDateTime+0xc0>)
 8003c52:	f004 ffe5 	bl	8008c20 <HAL_RTC_SetDate>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000924 	.word	0x20000924
 8003c64:	20003238 	.word	0x20003238
 8003c68:	2000354c 	.word	0x2000354c

08003c6c <SD_ReadFile>:

char* SD_ReadFile(char *filename, uint32_t *size) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
	if (f_open(&_fileH, filename, FA_READ) != FR_OK) {
 8003c76:	2201      	movs	r2, #1
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4817      	ldr	r0, [pc, #92]	; (8003cd8 <SD_ReadFile+0x6c>)
 8003c7c:	f002 fb8c 	bl	8006398 <f_open>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <SD_ReadFile+0x24>
		*size = 0;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
		return NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e01f      	b.n	8003cd0 <SD_ReadFile+0x64>
	}

	_SD_ResetBuffer();
 8003c90:	f7ff fe6a 	bl	8003968 <_SD_ResetBuffer>
	uint32_t index = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

	while (!f_eof(&_fileH)) {
 8003c98:	e00d      	b.n	8003cb6 <SD_ReadFile+0x4a>
		_res = f_read(&_fileH, &_buffer[index++], 1, &_readB);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	60fa      	str	r2, [r7, #12]
 8003ca0:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <SD_ReadFile+0x70>)
 8003ca2:	1899      	adds	r1, r3, r2
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <SD_ReadFile+0x74>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <SD_ReadFile+0x6c>)
 8003caa:	f002 fcf8 	bl	800669e <f_read>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <SD_ReadFile+0x78>)
 8003cb4:	701a      	strb	r2, [r3, #0]
	while (!f_eof(&_fileH)) {
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <SD_ReadFile+0x6c>)
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <SD_ReadFile+0x6c>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d1eb      	bne.n	8003c9a <SD_ReadFile+0x2e>
	}

	f_close(&_fileH);
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <SD_ReadFile+0x6c>)
 8003cc4:	f002 fe9c 	bl	8006a00 <f_close>
	*size = index;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	601a      	str	r2, [r3, #0]
	return (char*) _buffer;
 8003cce:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <SD_ReadFile+0x70>)
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20003254 	.word	0x20003254
 8003cdc:	20000b28 	.word	0x20000b28
 8003ce0:	2000324c 	.word	0x2000324c
 8003ce4:	20003250 	.word	0x20003250

08003ce8 <THS_Init>:

bool _ready;
uint8_t _readyData[5];
uint32_t _clockCounter;

void THS_Init() {
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <THS_Init+0x1c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

	_ready = true;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <THS_Init+0x20>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20003480 	.word	0x20003480
 8003d08:	2000347c 	.word	0x2000347c

08003d0c <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <THS_Delay+0x2c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8003d1e:	bf00      	nop
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <THS_Delay+0x2c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3f9      	bcc.n	8003d20 <THS_Delay+0x14>
		;
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20003488 	.word	0x20003488

08003d3c <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	4619      	mov	r1, r3
 8003d68:	4803      	ldr	r0, [pc, #12]	; (8003d78 <_THS_SetPinOutput+0x3c>)
 8003d6a:	f003 fe6b 	bl	8007a44 <HAL_GPIO_Init>
}
 8003d6e:	bf00      	nop
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40020800 	.word	0x40020800

08003d7c <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	4619      	mov	r1, r3
 8003da8:	4803      	ldr	r0, [pc, #12]	; (8003db8 <_THS_SetPinInput+0x3c>)
 8003daa:	f003 fe4b 	bl	8007a44 <HAL_GPIO_Init>
}
 8003dae:	bf00      	nop
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40020800 	.word	0x40020800

08003dbc <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <_THS_InitConn+0x9c>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <_THS_InitConn+0x1c>
		return 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e03b      	b.n	8003e50 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ffae 	bl	8003d3c <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2200      	movs	r2, #0
 8003de4:	4619      	mov	r1, r3
 8003de6:	481d      	ldr	r0, [pc, #116]	; (8003e5c <_THS_InitConn+0xa0>)
 8003de8:	f003 ffde 	bl	8007da8 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8003dec:	2012      	movs	r0, #18
 8003dee:	f003 fcd3 	bl	8007798 <HAL_Delay>
	Write(1);
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4619      	mov	r1, r3
 8003df8:	4818      	ldr	r0, [pc, #96]	; (8003e5c <_THS_InitConn+0xa0>)
 8003dfa:	f003 ffd5 	bl	8007da8 <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 8003dfe:	2014      	movs	r0, #20
 8003e00:	f7ff ff84 	bl	8003d0c <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ffb8 	bl	8003d7c <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 8003e0c:	2028      	movs	r0, #40	; 0x28
 8003e0e:	f7ff ff7d 	bl	8003d0c <THS_Delay>

	if (!Read()) {
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	4619      	mov	r1, r3
 8003e16:	4811      	ldr	r0, [pc, #68]	; (8003e5c <_THS_InitConn+0xa0>)
 8003e18:	f003 ffae 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10c      	bne.n	8003e3c <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 8003e22:	2050      	movs	r0, #80	; 0x50
 8003e24:	f7ff ff72 	bl	8003d0c <THS_Delay>
		if (!Read()) {
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480b      	ldr	r0, [pc, #44]	; (8003e5c <_THS_InitConn+0xa0>)
 8003e2e:	f003 ffa3 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e009      	b.n	8003e50 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 8003e3c:	bf00      	nop
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	4619      	mov	r1, r3
 8003e42:	4806      	ldr	r0, [pc, #24]	; (8003e5c <_THS_InitConn+0xa0>)
 8003e44:	f003 ff98 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d0f7      	beq.n	8003e3e <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 8003e4e:	2301      	movs	r3, #1
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000347c 	.word	0x2000347c
 8003e5c:	40020800 	.word	0x40020800

08003e60 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73bb      	strb	r3, [r7, #14]
 8003e72:	e02f      	b.n	8003ed4 <_THS_ReadByte+0x74>
		_clockCounter = 0;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <_THS_ReadByte+0x84>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8003e7a:	e005      	b.n	8003e88 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <_THS_ReadByte+0x84>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2bc8      	cmp	r3, #200	; 0xc8
 8003e82:	d901      	bls.n	8003e88 <_THS_ReadByte+0x28>
				return 255;
 8003e84:	23ff      	movs	r3, #255	; 0xff
 8003e86:	e029      	b.n	8003edc <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4816      	ldr	r0, [pc, #88]	; (8003ee8 <_THS_ReadByte+0x88>)
 8003e8e:	f003 ff73 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f1      	beq.n	8003e7c <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8003e98:	203c      	movs	r0, #60	; 0x3c
 8003e9a:	f7ff ff37 	bl	8003d0c <THS_Delay>

		byte <<= 1;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	480f      	ldr	r0, [pc, #60]	; (8003ee8 <_THS_ReadByte+0x88>)
 8003eaa:	f003 ff65 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8003ebc:	bf00      	nop
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <_THS_ReadByte+0x88>)
 8003ec4:	f003 ff58 	bl	8007d78 <HAL_GPIO_ReadPin>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d0f7      	beq.n	8003ebe <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8003ece:	7bbb      	ldrb	r3, [r7, #14]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	73bb      	strb	r3, [r7, #14]
 8003ed4:	7bbb      	ldrb	r3, [r7, #14]
 8003ed6:	2b07      	cmp	r3, #7
 8003ed8:	d9cc      	bls.n	8003e74 <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20003480 	.word	0x20003480
 8003ee8:	40020800 	.word	0x40020800

08003eec <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	71fb      	strb	r3, [r7, #7]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 8003efc:	79bb      	ldrb	r3, [r7, #6]
 8003efe:	f1a3 020a 	sub.w	r2, r3, #10
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	dc06      	bgt.n	8003f16 <_THS_CCR_Acceptable+0x2a>
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	79bb      	ldrb	r3, [r7, #6]
 8003f0c:	330a      	adds	r3, #10
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	dc01      	bgt.n	8003f16 <_THS_CCR_Acceptable+0x2a>
		return 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <_THS_CCR_Acceptable+0x2c>
	return 0;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <THS_ReadData+0x16>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <THS_ReadData+0x18>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 8003f3e:	8bfb      	ldrh	r3, [r7, #30]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff3b 	bl	8003dbc <_THS_InitConn>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <THS_ReadData+0x2c>
		return 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e091      	b.n	8004074 <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff84 	bl	8003e60 <_THS_ReadByte>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 8003f5c:	8bfb      	ldrh	r3, [r7, #30]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff7e 	bl	8003e60 <_THS_ReadByte>
 8003f64:	4603      	mov	r3, r0
 8003f66:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 8003f68:	8bfb      	ldrh	r3, [r7, #30]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff78 	bl	8003e60 <_THS_ReadByte>
 8003f70:	4603      	mov	r3, r0
 8003f72:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 8003f74:	8bfb      	ldrh	r3, [r7, #30]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff72 	bl	8003e60 <_THS_ReadByte>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 8003f80:	8bfb      	ldrh	r3, [r7, #30]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff6c 	bl	8003e60 <_THS_ReadByte>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	; (800407c <THS_ReadData+0x158>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 8003f92:	8bbb      	ldrh	r3, [r7, #28]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	7efb      	ldrb	r3, [r7, #27]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	b25a      	sxtb	r2, r3
 8003f9e:	8b3b      	ldrh	r3, [r7, #24]
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	b25a      	sxtb	r2, r3
 8003fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	7dbb      	ldrb	r3, [r7, #22]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff99 	bl	8003eec <_THS_CCR_Acceptable>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d04f      	beq.n	8004060 <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 8003fc0:	8b3b      	ldrh	r3, [r7, #24]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	7dfb      	ldrb	r3, [r7, #23]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fd0:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004080 <THS_ReadData+0x15c>
 8003fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd8:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8003fdc:	8bbb      	ldrh	r3, [r7, #28]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	7efb      	ldrb	r3, [r7, #27]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fec:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004080 <THS_ReadData+0x15c>
 8003ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff4:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8003ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004004:	d418      	bmi.n	8004038 <THS_ReadData+0x114>
 8004006:	edd7 7a04 	vldr	s15, [r7, #16]
 800400a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004084 <THS_ReadData+0x160>
 800400e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004016:	dc0f      	bgt.n	8004038 <THS_ReadData+0x114>
 8004018:	edd7 7a03 	vldr	s15, [r7, #12]
 800401c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	d408      	bmi.n	8004038 <THS_ReadData+0x114>
 8004026:	edd7 7a03 	vldr	s15, [r7, #12]
 800402a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004088 <THS_ReadData+0x164>
 800402e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	dd0a      	ble.n	800404e <THS_ReadData+0x12a>
			data[0] = 0.f;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	3304      	adds	r3, #4
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
			return 0;
 800404a:	2300      	movs	r3, #0
 800404c:	e012      	b.n	8004074 <THS_ReadData+0x150>
		}
		data[0] = t;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	601a      	str	r2, [r3, #0]
		data[1] = r;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	3304      	adds	r3, #4
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]
		return 1;
 800405c:	2301      	movs	r3, #1
 800405e:	e009      	b.n	8004074 <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	3304      	adds	r3, #4
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
	return 0;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000347c 	.word	0x2000347c
 8004080:	43800000 	.word	0x43800000
 8004084:	42480000 	.word	0x42480000
 8004088:	42c80000 	.word	0x42c80000

0800408c <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <THS_ErrorClock+0x30>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004098:	d905      	bls.n	80040a6 <THS_ErrorClock+0x1a>
		_ready = true;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <THS_ErrorClock+0x34>)
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 80040a0:	4b06      	ldr	r3, [pc, #24]	; (80040bc <THS_ErrorClock+0x30>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <THS_ErrorClock+0x30>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a03      	ldr	r2, [pc, #12]	; (80040bc <THS_ErrorClock+0x30>)
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20003480 	.word	0x20003480
 80040c0:	2000347c 	.word	0x2000347c

080040c4 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0

}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <DESELECT>:

static
inline void DESELECT(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80040ea:	bf00      	nop
 80040ec:	4808      	ldr	r0, [pc, #32]	; (8004110 <xmit_spi+0x30>)
 80040ee:	f005 fa99 	bl	8009624 <HAL_SPI_GetState>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d1f9      	bne.n	80040ec <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80040f8:	1df9      	adds	r1, r7, #7
 80040fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80040fe:	2201      	movs	r2, #1
 8004100:	4803      	ldr	r0, [pc, #12]	; (8004110 <xmit_spi+0x30>)
 8004102:	f004 ffb9 	bl	8009078 <HAL_SPI_Transmit>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000356c 	.word	0x2000356c

08004114 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800411a:	23ff      	movs	r3, #255	; 0xff
 800411c:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004122:	bf00      	nop
 8004124:	4809      	ldr	r0, [pc, #36]	; (800414c <rcvr_spi+0x38>)
 8004126:	f005 fa7d 	bl	8009624 <HAL_SPI_GetState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d1f9      	bne.n	8004124 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8004130:	1dba      	adds	r2, r7, #6
 8004132:	1df9      	adds	r1, r7, #7
 8004134:	f241 3388 	movw	r3, #5000	; 0x1388
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2301      	movs	r3, #1
 800413c:	4803      	ldr	r0, [pc, #12]	; (800414c <rcvr_spi+0x38>)
 800413e:	f005 f8cf 	bl	80092e0 <HAL_SPI_TransmitReceive>

	return Data;
 8004142:	79bb      	ldrb	r3, [r7, #6]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000356c 	.word	0x2000356c

08004150 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8004158:	f7ff ffdc 	bl	8004114 <rcvr_spi>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	701a      	strb	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8004172:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <wait_ready+0x34>)
 8004174:	2232      	movs	r2, #50	; 0x32
 8004176:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8004178:	f7ff ffcc 	bl	8004114 <rcvr_spi>
	do
		res = rcvr_spi();
 800417c:	f7ff ffca 	bl	8004114 <rcvr_spi>
 8004180:	4603      	mov	r3, r0
 8004182:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	2bff      	cmp	r3, #255	; 0xff
 8004188:	d004      	beq.n	8004194 <wait_ready+0x28>
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <wait_ready+0x34>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f3      	bne.n	800417c <wait_ready+0x10>

	return res;
 8004194:	79fb      	ldrb	r3, [r7, #7]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000256 	.word	0x20000256

080041a4 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80041aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80041ae:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80041b0:	f7ff ff8f 	bl	80040d2 <DESELECT>

	for (i = 0; i < 10; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e005      	b.n	80041c6 <power_on+0x22>
		xmit_spi(0xFF);
 80041ba:	20ff      	movs	r0, #255	; 0xff
 80041bc:	f7ff ff90 	bl	80040e0 <xmit_spi>
	for (i = 0; i < 10; i++)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	3301      	adds	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d9f6      	bls.n	80041ba <power_on+0x16>

	SELECT();
 80041cc:	f7ff ff7a 	bl	80040c4 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80041e4:	2395      	movs	r3, #149	; 0x95
 80041e6:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e00b      	b.n	8004206 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	f107 0210 	add.w	r2, r7, #16
 80041f4:	4413      	add	r3, r2
 80041f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff70 	bl	80040e0 <xmit_spi>
	for (i = 0; i < 6; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d9f0      	bls.n	80041ee <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 800420c:	e002      	b.n	8004214 <power_on+0x70>
		Count--;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3b01      	subs	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8004214:	f7ff ff7e 	bl	8004114 <rcvr_spi>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d002      	beq.n	8004224 <power_on+0x80>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f4      	bne.n	800420e <power_on+0x6a>

	DESELECT();
 8004224:	f7ff ff55 	bl	80040d2 <DESELECT>
	xmit_spi(0XFF);
 8004228:	20ff      	movs	r0, #255	; 0xff
 800422a:	f7ff ff59 	bl	80040e0 <xmit_spi>

	PowerFlag = 1;
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <power_on+0x98>)
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000258 	.word	0x20000258

08004240 <power_off>:

static
void power_off(void) {
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <power_off+0x14>)
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000258 	.word	0x20000258

08004258 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <chk_power+0x14>)
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000258 	.word	0x20000258

08004270 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <rcvr_datablock+0x68>)
 800427c:	220a      	movs	r2, #10
 800427e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8004280:	f7ff ff48 	bl	8004114 <rcvr_spi>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2bff      	cmp	r3, #255	; 0xff
 800428c:	d104      	bne.n	8004298 <rcvr_datablock+0x28>
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <rcvr_datablock+0x68>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f3      	bne.n	8004280 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2bfe      	cmp	r3, #254	; 0xfe
 800429c:	d001      	beq.n	80042a2 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800429e:	2300      	movs	r3, #0
 80042a0:	e016      	b.n	80042d0 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff51 	bl	8004150 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff4b 	bl	8004150 <rcvr_spi_m>
	} while (btr -= 2);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3b02      	subs	r3, #2
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ed      	bne.n	80042a2 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80042c6:	f7ff ff25 	bl	8004114 <rcvr_spi>
	rcvr_spi();
 80042ca:	f7ff ff23 	bl	8004114 <rcvr_spi>

	return TRUE; /* Return with success */
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000255 	.word	0x20000255

080042dc <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80042ec:	f7ff ff3e 	bl	800416c <wait_ready>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2bff      	cmp	r3, #255	; 0xff
 80042f4:	d001      	beq.n	80042fa <xmit_datablock+0x1e>
		return FALSE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e040      	b.n	800437c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff feef 	bl	80040e0 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	2bfd      	cmp	r3, #253	; 0xfd
 8004306:	d031      	beq.n	800436c <xmit_datablock+0x90>
		wc = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fee3 	bl	80040e0 <xmit_spi>
			xmit_spi(*buff++);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fedc 	bl	80040e0 <xmit_spi>
		} while (--wc);
 8004328:	7bbb      	ldrb	r3, [r7, #14]
 800432a:	3b01      	subs	r3, #1
 800432c:	73bb      	strb	r3, [r7, #14]
 800432e:	7bbb      	ldrb	r3, [r7, #14]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1eb      	bne.n	800430c <xmit_datablock+0x30>

		rcvr_spi();
 8004334:	f7ff feee 	bl	8004114 <rcvr_spi>
		rcvr_spi();
 8004338:	f7ff feec 	bl	8004114 <rcvr_spi>

		while (i <= 64) {
 800433c:	e00b      	b.n	8004356 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 800433e:	f7ff fee9 	bl	8004114 <rcvr_spi>
 8004342:	4603      	mov	r3, r0
 8004344:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2b05      	cmp	r3, #5
 800434e:	d006      	beq.n	800435e <xmit_datablock+0x82>
				break;
			i++;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3301      	adds	r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d9f0      	bls.n	800433e <xmit_datablock+0x62>
 800435c:	e000      	b.n	8004360 <xmit_datablock+0x84>
				break;
 800435e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8004360:	bf00      	nop
 8004362:	f7ff fed7 	bl	8004114 <rcvr_spi>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0fa      	beq.n	8004362 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2b05      	cmp	r3, #5
 8004374:	d101      	bne.n	800437a <xmit_datablock+0x9e>
		return TRUE;
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xmit_datablock+0xa0>
	else
		return FALSE;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8004390:	f7ff feec 	bl	800416c <wait_ready>
 8004394:	4603      	mov	r3, r0
 8004396:	2bff      	cmp	r3, #255	; 0xff
 8004398:	d001      	beq.n	800439e <send_cmd+0x1a>
		return 0xFF;
 800439a:	23ff      	movs	r3, #255	; 0xff
 800439c:	e040      	b.n	8004420 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe9d 	bl	80040e0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff fe97 	bl	80040e0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fe91 	bl	80040e0 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fe8b 	bl	80040e0 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fe86 	bl	80040e0 <xmit_spi>
	n = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d101      	bne.n	80043e2 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80043de:	2395      	movs	r3, #149	; 0x95
 80043e0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	2b48      	cmp	r3, #72	; 0x48
 80043e6:	d101      	bne.n	80043ec <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80043e8:	2387      	movs	r3, #135	; 0x87
 80043ea:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe76 	bl	80040e0 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	2b4c      	cmp	r3, #76	; 0x4c
 80043f8:	d101      	bne.n	80043fe <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80043fa:	f7ff fe8b 	bl	8004114 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80043fe:	230a      	movs	r3, #10
 8004400:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8004402:	f7ff fe87 	bl	8004114 <rcvr_spi>
 8004406:	4603      	mov	r3, r0
 8004408:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800440a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800440e:	2b00      	cmp	r3, #0
 8004410:	da05      	bge.n	800441e <send_cmd+0x9a>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	3b01      	subs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f1      	bne.n	8004402 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800441e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004438:	2301      	movs	r3, #1
 800443a:	e0d5      	b.n	80045e8 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <disk_initialize+0x1c8>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800444a:	4b69      	ldr	r3, [pc, #420]	; (80045f0 <disk_initialize+0x1c8>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e0ca      	b.n	80045e8 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8004452:	f7ff fea7 	bl	80041a4 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8004456:	f7ff fe35 	bl	80040c4 <SELECT>
	ty = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800445e:	2100      	movs	r1, #0
 8004460:	2040      	movs	r0, #64	; 0x40
 8004462:	f7ff ff8f 	bl	8004384 <send_cmd>
 8004466:	4603      	mov	r3, r0
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 80a5 	bne.w	80045b8 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800446e:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <disk_initialize+0x1cc>)
 8004470:	2264      	movs	r2, #100	; 0x64
 8004472:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8004474:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004478:	2048      	movs	r0, #72	; 0x48
 800447a:	f7ff ff83 	bl	8004384 <send_cmd>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d158      	bne.n	8004536 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
 8004488:	e00c      	b.n	80044a4 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 800448a:	7bfc      	ldrb	r4, [r7, #15]
 800448c:	f7ff fe42 	bl	8004114 <rcvr_spi>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	4423      	add	r3, r4
 800449a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	3301      	adds	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d9ef      	bls.n	800448a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80044aa:	7abb      	ldrb	r3, [r7, #10]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	f040 8083 	bne.w	80045b8 <disk_initialize+0x190>
 80044b2:	7afb      	ldrb	r3, [r7, #11]
 80044b4:	2baa      	cmp	r3, #170	; 0xaa
 80044b6:	d17f      	bne.n	80045b8 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80044b8:	2100      	movs	r1, #0
 80044ba:	2077      	movs	r0, #119	; 0x77
 80044bc:	f7ff ff62 	bl	8004384 <send_cmd>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d807      	bhi.n	80044d6 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80044c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044ca:	2069      	movs	r0, #105	; 0x69
 80044cc:	f7ff ff5a 	bl	8004384 <send_cmd>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <disk_initialize+0x1cc>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1eb      	bne.n	80044b8 <disk_initialize+0x90>
 80044e0:	e000      	b.n	80044e4 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80044e2:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80044e4:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <disk_initialize+0x1cc>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d064      	beq.n	80045b8 <disk_initialize+0x190>
 80044ee:	2100      	movs	r1, #0
 80044f0:	207a      	movs	r0, #122	; 0x7a
 80044f2:	f7ff ff47 	bl	8004384 <send_cmd>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d15d      	bne.n	80045b8 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e00c      	b.n	800451c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8004502:	7bfc      	ldrb	r4, [r7, #15]
 8004504:	f7ff fe06 	bl	8004114 <rcvr_spi>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4423      	add	r3, r4
 8004512:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	3301      	adds	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d9ef      	bls.n	8004502 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8004522:	7a3b      	ldrb	r3, [r7, #8]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <disk_initialize+0x108>
 800452c:	2306      	movs	r3, #6
 800452e:	e000      	b.n	8004532 <disk_initialize+0x10a>
 8004530:	2302      	movs	r3, #2
 8004532:	73bb      	strb	r3, [r7, #14]
 8004534:	e040      	b.n	80045b8 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8004536:	2100      	movs	r1, #0
 8004538:	2077      	movs	r0, #119	; 0x77
 800453a:	f7ff ff23 	bl	8004384 <send_cmd>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d808      	bhi.n	8004556 <disk_initialize+0x12e>
 8004544:	2100      	movs	r1, #0
 8004546:	2069      	movs	r0, #105	; 0x69
 8004548:	f7ff ff1c 	bl	8004384 <send_cmd>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d801      	bhi.n	8004556 <disk_initialize+0x12e>
 8004552:	2302      	movs	r3, #2
 8004554:	e000      	b.n	8004558 <disk_initialize+0x130>
 8004556:	2301      	movs	r3, #1
 8004558:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d10e      	bne.n	800457e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8004560:	2100      	movs	r1, #0
 8004562:	2077      	movs	r0, #119	; 0x77
 8004564:	f7ff ff0e 	bl	8004384 <send_cmd>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d80e      	bhi.n	800458c <disk_initialize+0x164>
 800456e:	2100      	movs	r1, #0
 8004570:	2069      	movs	r0, #105	; 0x69
 8004572:	f7ff ff07 	bl	8004384 <send_cmd>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d107      	bne.n	800458c <disk_initialize+0x164>
						break; /* ACMD41 */
 800457c:	e00d      	b.n	800459a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800457e:	2100      	movs	r1, #0
 8004580:	2041      	movs	r0, #65	; 0x41
 8004582:	f7ff feff 	bl	8004384 <send_cmd>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <disk_initialize+0x1cc>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e1      	bne.n	800455a <disk_initialize+0x132>
 8004596:	e000      	b.n	800459a <disk_initialize+0x172>
						break; /* CMD1 */
 8004598:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <disk_initialize+0x1cc>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <disk_initialize+0x18c>
 80045a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a8:	2050      	movs	r0, #80	; 0x50
 80045aa:	f7ff feeb 	bl	8004384 <send_cmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <disk_initialize+0x190>
				ty = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80045b8:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <disk_initialize+0x1d0>)
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80045be:	f7ff fd88 	bl	80040d2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80045c2:	f7ff fda7 	bl	8004114 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80045c6:	7bbb      	ldrb	r3, [r7, #14]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <disk_initialize+0x1c8>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <disk_initialize+0x1c8>)
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e001      	b.n	80045e2 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80045de:	f7ff fe2f 	bl	8004240 <power_off>

	return Stat;
 80045e2:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <disk_initialize+0x1c8>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b2db      	uxtb	r3, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}
 80045f0:	20000058 	.word	0x20000058
 80045f4:	20000255 	.word	0x20000255
 80045f8:	20000257 	.word	0x20000257

080045fc <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800460c:	2301      	movs	r3, #1
 800460e:	e002      	b.n	8004616 <disk_status+0x1a>
	return Stat;
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <disk_status+0x28>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b2db      	uxtb	r3, r3
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000058 	.word	0x20000058

08004628 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4603      	mov	r3, r0
 8004636:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <disk_read+0x1c>
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <disk_read+0x20>
		return RES_PARERR;
 8004644:	2304      	movs	r3, #4
 8004646:	e051      	b.n	80046ec <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8004648:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <disk_read+0xcc>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <disk_read+0x32>
		return RES_NOTRDY;
 8004656:	2303      	movs	r3, #3
 8004658:	e048      	b.n	80046ec <disk_read+0xc4>

	if (!(CardType & 4))
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <disk_read+0xd0>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	025b      	lsls	r3, r3, #9
 800466a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800466c:	f7ff fd2a 	bl	80040c4 <SELECT>

	if (count == 1) { /* Single block read */
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d111      	bne.n	800469a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	2051      	movs	r0, #81	; 0x51
 800467a:	f7ff fe83 	bl	8004384 <send_cmd>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d129      	bne.n	80046d8 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8004684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f7ff fdf1 	bl	8004270 <rcvr_datablock>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d021      	beq.n	80046d8 <disk_read+0xb0>
			count = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	e01e      	b.n	80046d8 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	2052      	movs	r0, #82	; 0x52
 800469e:	f7ff fe71 	bl	8004384 <send_cmd>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d117      	bne.n	80046d8 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 80046a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f7ff fddf 	bl	8004270 <rcvr_datablock>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <disk_read+0xa6>
					break;
				buff += 512;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80046be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ed      	bne.n	80046a8 <disk_read+0x80>
 80046cc:	e000      	b.n	80046d0 <disk_read+0xa8>
					break;
 80046ce:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80046d0:	2100      	movs	r1, #0
 80046d2:	204c      	movs	r0, #76	; 0x4c
 80046d4:	f7ff fe56 	bl	8004384 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80046d8:	f7ff fcfb 	bl	80040d2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80046dc:	f7ff fd1a 	bl	8004114 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000058 	.word	0x20000058
 80046f8:	20000257 	.word	0x20000257

080046fc <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <disk_write+0x1c>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <disk_write+0x20>
		return RES_PARERR;
 8004718:	2304      	movs	r3, #4
 800471a:	e06b      	b.n	80047f4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <disk_write+0x100>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <disk_write+0x32>
		return RES_NOTRDY;
 800472a:	2303      	movs	r3, #3
 800472c:	e062      	b.n	80047f4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800472e:	4b33      	ldr	r3, [pc, #204]	; (80047fc <disk_write+0x100>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <disk_write+0x44>
		return RES_WRPRT;
 800473c:	2302      	movs	r3, #2
 800473e:	e059      	b.n	80047f4 <disk_write+0xf8>

	if (!(CardType & 4))
 8004740:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <disk_write+0x104>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	025b      	lsls	r3, r3, #9
 8004750:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8004752:	f7ff fcb7 	bl	80040c4 <SELECT>

	if (count == 1) { /* Single block write */
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d110      	bne.n	800477e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	2058      	movs	r0, #88	; 0x58
 8004760:	f7ff fe10 	bl	8004384 <send_cmd>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d13a      	bne.n	80047e0 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800476a:	21fe      	movs	r1, #254	; 0xfe
 800476c:	68b8      	ldr	r0, [r7, #8]
 800476e:	f7ff fdb5 	bl	80042dc <xmit_datablock>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d033      	beq.n	80047e0 <disk_write+0xe4>
			count = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	e030      	b.n	80047e0 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <disk_write+0x104>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800478a:	2100      	movs	r1, #0
 800478c:	2077      	movs	r0, #119	; 0x77
 800478e:	f7ff fdf9 	bl	8004384 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8004792:	6839      	ldr	r1, [r7, #0]
 8004794:	2057      	movs	r0, #87	; 0x57
 8004796:	f7ff fdf5 	bl	8004384 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	2059      	movs	r0, #89	; 0x59
 800479e:	f7ff fdf1 	bl	8004384 <send_cmd>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d11b      	bne.n	80047e0 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80047a8:	21fc      	movs	r1, #252	; 0xfc
 80047aa:	68b8      	ldr	r0, [r7, #8]
 80047ac:	f7ff fd96 	bl	80042dc <xmit_datablock>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <disk_write+0xd0>
					break;
				buff += 512;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ee      	bne.n	80047a8 <disk_write+0xac>
 80047ca:	e000      	b.n	80047ce <disk_write+0xd2>
					break;
 80047cc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80047ce:	21fd      	movs	r1, #253	; 0xfd
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7ff fd83 	bl	80042dc <xmit_datablock>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <disk_write+0xe4>
				count = 1;
 80047dc:	2301      	movs	r3, #1
 80047de:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80047e0:	f7ff fc77 	bl	80040d2 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80047e4:	f7ff fc96 	bl	8004114 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bf14      	ite	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	2300      	moveq	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	20000058 	.word	0x20000058
 8004800:	20000257 	.word	0x20000257

08004804 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b08b      	sub	sp, #44	; 0x2c
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	603a      	str	r2, [r7, #0]
 800480e:	71fb      	strb	r3, [r7, #7]
 8004810:	460b      	mov	r3, r1
 8004812:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <disk_ioctl+0x1e>
		return RES_PARERR;
 800481e:	2304      	movs	r3, #4
 8004820:	e16a      	b.n	8004af8 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8004828:	79bb      	ldrb	r3, [r7, #6]
 800482a:	2b07      	cmp	r3, #7
 800482c:	d127      	bne.n	800487e <disk_ioctl+0x7a>
		switch (*ptr) {
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d00e      	beq.n	8004854 <disk_ioctl+0x50>
 8004836:	2b02      	cmp	r3, #2
 8004838:	d012      	beq.n	8004860 <disk_ioctl+0x5c>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11b      	bne.n	8004876 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800483e:	f7ff fd0b 	bl	8004258 <chk_power>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <disk_ioctl+0x48>
				power_off(); /* Power off */
 8004848:	f7ff fcfa 	bl	8004240 <power_off>
			res = RES_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004852:	e14f      	b.n	8004af4 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8004854:	f7ff fca6 	bl	80041a4 <power_on>
			res = RES_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800485e:	e149      	b.n	8004af4 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8004860:	f7ff fcfa 	bl	8004258 <chk_power>
 8004864:	4602      	mov	r2, r0
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	3301      	adds	r3, #1
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004874:	e13e      	b.n	8004af4 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8004876:	2304      	movs	r3, #4
 8004878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800487c:	e13a      	b.n	8004af4 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800487e:	4ba0      	ldr	r3, [pc, #640]	; (8004b00 <disk_ioctl+0x2fc>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 800488c:	2303      	movs	r3, #3
 800488e:	e133      	b.n	8004af8 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8004890:	f7ff fc18 	bl	80040c4 <SELECT>

		switch (ctrl) {
 8004894:	79bb      	ldrb	r3, [r7, #6]
 8004896:	2b35      	cmp	r3, #53	; 0x35
 8004898:	f200 811d 	bhi.w	8004ad6 <disk_ioctl+0x2d2>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <disk_ioctl+0xa0>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	08004a3f 	.word	0x08004a3f
 80048a8:	0800497d 	.word	0x0800497d
 80048ac:	08004a2f 	.word	0x08004a2f
 80048b0:	08004ad7 	.word	0x08004ad7
 80048b4:	08004ad7 	.word	0x08004ad7
 80048b8:	08004ad7 	.word	0x08004ad7
 80048bc:	08004ad7 	.word	0x08004ad7
 80048c0:	08004ad7 	.word	0x08004ad7
 80048c4:	08004ad7 	.word	0x08004ad7
 80048c8:	08004ad7 	.word	0x08004ad7
 80048cc:	08004ad7 	.word	0x08004ad7
 80048d0:	08004ad7 	.word	0x08004ad7
 80048d4:	08004ad7 	.word	0x08004ad7
 80048d8:	08004ad7 	.word	0x08004ad7
 80048dc:	08004ad7 	.word	0x08004ad7
 80048e0:	08004ad7 	.word	0x08004ad7
 80048e4:	08004ad7 	.word	0x08004ad7
 80048e8:	08004ad7 	.word	0x08004ad7
 80048ec:	08004ad7 	.word	0x08004ad7
 80048f0:	08004ad7 	.word	0x08004ad7
 80048f4:	08004ad7 	.word	0x08004ad7
 80048f8:	08004ad7 	.word	0x08004ad7
 80048fc:	08004ad7 	.word	0x08004ad7
 8004900:	08004ad7 	.word	0x08004ad7
 8004904:	08004ad7 	.word	0x08004ad7
 8004908:	08004ad7 	.word	0x08004ad7
 800490c:	08004ad7 	.word	0x08004ad7
 8004910:	08004ad7 	.word	0x08004ad7
 8004914:	08004ad7 	.word	0x08004ad7
 8004918:	08004ad7 	.word	0x08004ad7
 800491c:	08004ad7 	.word	0x08004ad7
 8004920:	08004ad7 	.word	0x08004ad7
 8004924:	08004ad7 	.word	0x08004ad7
 8004928:	08004ad7 	.word	0x08004ad7
 800492c:	08004ad7 	.word	0x08004ad7
 8004930:	08004ad7 	.word	0x08004ad7
 8004934:	08004ad7 	.word	0x08004ad7
 8004938:	08004ad7 	.word	0x08004ad7
 800493c:	08004ad7 	.word	0x08004ad7
 8004940:	08004ad7 	.word	0x08004ad7
 8004944:	08004ad7 	.word	0x08004ad7
 8004948:	08004ad7 	.word	0x08004ad7
 800494c:	08004ad7 	.word	0x08004ad7
 8004950:	08004ad7 	.word	0x08004ad7
 8004954:	08004ad7 	.word	0x08004ad7
 8004958:	08004ad7 	.word	0x08004ad7
 800495c:	08004ad7 	.word	0x08004ad7
 8004960:	08004ad7 	.word	0x08004ad7
 8004964:	08004ad7 	.word	0x08004ad7
 8004968:	08004ad7 	.word	0x08004ad7
 800496c:	08004ad7 	.word	0x08004ad7
 8004970:	08004a51 	.word	0x08004a51
 8004974:	08004a75 	.word	0x08004a75
 8004978:	08004a99 	.word	0x08004a99
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800497c:	2100      	movs	r1, #0
 800497e:	2049      	movs	r0, #73	; 0x49
 8004980:	f7ff fd00 	bl	8004384 <send_cmd>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 80a9 	bne.w	8004ade <disk_ioctl+0x2da>
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	2110      	movs	r1, #16
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fc6c 	bl	8004270 <rcvr_datablock>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 809f 	beq.w	8004ade <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80049a0:	7b3b      	ldrb	r3, [r7, #12]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10e      	bne.n	80049c8 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049aa:	7d7b      	ldrb	r3, [r7, #21]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	7d3b      	ldrb	r3, [r7, #20]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80049be:	8bfb      	ldrh	r3, [r7, #30]
 80049c0:	029a      	lsls	r2, r3, #10
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e02e      	b.n	8004a26 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80049c8:	7c7b      	ldrb	r3, [r7, #17]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	7dbb      	ldrb	r3, [r7, #22]
 80049d2:	09db      	lsrs	r3, r3, #7
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80049da:	7d7b      	ldrb	r3, [r7, #21]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0306 	and.w	r3, r3, #6
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80049ea:	3302      	adds	r3, #2
 80049ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80049f0:	7d3b      	ldrb	r3, [r7, #20]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8004a04:	7cbb      	ldrb	r3, [r7, #18]
 8004a06:	029b      	lsls	r3, r3, #10
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8004a14:	3301      	adds	r3, #1
 8004a16:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a18:	8bfa      	ldrh	r2, [r7, #30]
 8004a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a1e:	3b09      	subs	r3, #9
 8004a20:	409a      	lsls	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004a2c:	e057      	b.n	8004ade <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a34:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a3c:	e056      	b.n	8004aec <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8004a3e:	f7ff fb95 	bl	800416c <wait_ready>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2bff      	cmp	r3, #255	; 0xff
 8004a46:	d14c      	bne.n	8004ae2 <disk_ioctl+0x2de>
				res = RES_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a4e:	e048      	b.n	8004ae2 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8004a50:	2100      	movs	r1, #0
 8004a52:	2049      	movs	r0, #73	; 0x49
 8004a54:	f7ff fc96 	bl	8004384 <send_cmd>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d143      	bne.n	8004ae6 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8004a5e:	2110      	movs	r1, #16
 8004a60:	6a38      	ldr	r0, [r7, #32]
 8004a62:	f7ff fc05 	bl	8004270 <rcvr_datablock>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d03c      	beq.n	8004ae6 <disk_ioctl+0x2e2>
				res = RES_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a72:	e038      	b.n	8004ae6 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8004a74:	2100      	movs	r1, #0
 8004a76:	204a      	movs	r0, #74	; 0x4a
 8004a78:	f7ff fc84 	bl	8004384 <send_cmd>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d133      	bne.n	8004aea <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8004a82:	2110      	movs	r1, #16
 8004a84:	6a38      	ldr	r0, [r7, #32]
 8004a86:	f7ff fbf3 	bl	8004270 <rcvr_datablock>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02c      	beq.n	8004aea <disk_ioctl+0x2e6>
				res = RES_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a96:	e028      	b.n	8004aea <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8004a98:	2100      	movs	r1, #0
 8004a9a:	207a      	movs	r0, #122	; 0x7a
 8004a9c:	f7ff fc72 	bl	8004384 <send_cmd>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d117      	bne.n	8004ad6 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004aac:	e00b      	b.n	8004ac6 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8004aae:	6a3c      	ldr	r4, [r7, #32]
 8004ab0:	1c63      	adds	r3, r4, #1
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	f7ff fb2e 	bl	8004114 <rcvr_spi>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d9ef      	bls.n	8004aae <disk_ioctl+0x2aa>
				res = RES_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8004ad4:	e00a      	b.n	8004aec <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004adc:	e006      	b.n	8004aec <disk_ioctl+0x2e8>
			break;
 8004ade:	bf00      	nop
 8004ae0:	e004      	b.n	8004aec <disk_ioctl+0x2e8>
			break;
 8004ae2:	bf00      	nop
 8004ae4:	e002      	b.n	8004aec <disk_ioctl+0x2e8>
			break;
 8004ae6:	bf00      	nop
 8004ae8:	e000      	b.n	8004aec <disk_ioctl+0x2e8>
			break;
 8004aea:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8004aec:	f7ff faf1 	bl	80040d2 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8004af0:	f7ff fb10 	bl	8004114 <rcvr_spi>
	}

	return res;
 8004af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	372c      	adds	r7, #44	; 0x2c
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	20000058 	.word	0x20000058

08004b04 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <disk_timerproc+0x44>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <disk_timerproc+0x1e>
		Timer1 = --n;
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <disk_timerproc+0x44>)
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <disk_timerproc+0x48>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <disk_timerproc+0x36>
		Timer2 = --n;
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	71fb      	strb	r3, [r7, #7]
 8004b34:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <disk_timerproc+0x48>)
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	7013      	strb	r3, [r2, #0]

}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000255 	.word	0x20000255
 8004b4c:	20000256 	.word	0x20000256

08004b50 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <sdcard_systick_timerproc+0x2c>)
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <sdcard_systick_timerproc+0x2c>)
 8004b60:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <sdcard_systick_timerproc+0x2c>)
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d904      	bls.n	8004b76 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <sdcard_systick_timerproc+0x2c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8004b72:	f7ff ffc7 	bl	8004b04 <disk_timerproc>
	}
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20003484 	.word	0x20003484

08004b80 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	36c55cc0 	.word	0x36c55cc0

08004b94 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ba4:	89fb      	ldrh	r3, [r7, #14]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004bb6:	89fb      	ldrh	r3, [r7, #14]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	3202      	adds	r2, #2
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	3201      	adds	r2, #1
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	887a      	ldrh	r2, [r7, #2]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	887b      	ldrh	r3, [r7, #2]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	0a1b      	lsrs	r3, r3, #8
 8004c7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	1c53      	adds	r3, r2, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	6179      	str	r1, [r7, #20]
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f1      	bne.n	8004cb2 <mem_cpy+0x1a>
	}
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	617a      	str	r2, [r7, #20]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f3      	bne.n	8004cea <mem_set+0x10>
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b089      	sub	sp, #36	; 0x24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	61ba      	str	r2, [r7, #24]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	1acb      	subs	r3, r1, r3
 8004d3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <mem_cmp+0x40>
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0eb      	beq.n	8004d26 <mem_cmp+0x18>

	return r;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3724      	adds	r7, #36	; 0x24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d66:	e002      	b.n	8004d6e <chk_chr+0x12>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <chk_chr+0x26>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d1f2      	bne.n	8004d68 <chk_chr+0xc>
	return *str;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	781b      	ldrb	r3, [r3, #0]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	4603      	mov	r3, r0
 8004d9a:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8004d9c:	2281      	movs	r2, #129	; 0x81
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d30f      	bcc.n	8004dc4 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8004da4:	229f      	movs	r2, #159	; 0x9f
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d801      	bhi.n	8004db0 <dbc_1st+0x1e>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e00a      	b.n	8004dc6 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8004db0:	22e0      	movs	r2, #224	; 0xe0
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d305      	bcc.n	8004dc4 <dbc_1st+0x32>
 8004db8:	22fc      	movs	r2, #252	; 0xfc
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d801      	bhi.n	8004dc4 <dbc_1st+0x32>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8004ddc:	2240      	movs	r2, #64	; 0x40
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d319      	bcc.n	8004e18 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8004de4:	227e      	movs	r2, #126	; 0x7e
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d801      	bhi.n	8004df0 <dbc_2nd+0x1e>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e014      	b.n	8004e1a <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8004df0:	2280      	movs	r2, #128	; 0x80
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d305      	bcc.n	8004e04 <dbc_2nd+0x32>
 8004df8:	22fc      	movs	r2, #252	; 0xfc
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d801      	bhi.n	8004e04 <dbc_2nd+0x32>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e00a      	b.n	8004e1a <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8004e04:	2200      	movs	r2, #0
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d305      	bcc.n	8004e18 <dbc_2nd+0x46>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d801      	bhi.n	8004e18 <dbc_2nd+0x46>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d02c      	beq.n	8004e94 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	7858      	ldrb	r0, [r3, #1]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f7ff fc57 	bl	80046fc <disk_write>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11d      	bne.n	8004e90 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d213      	bcs.n	8004e94 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	789b      	ldrb	r3, [r3, #2]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d10f      	bne.n	8004e94 <sync_window+0x6e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7858      	ldrb	r0, [r3, #1]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	441a      	add	r2, r3
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f7ff fc37 	bl	80046fc <disk_write>
 8004e8e:	e001      	b.n	8004e94 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d01b      	beq.n	8004eee <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffb5 	bl	8004e26 <sync_window>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d113      	bne.n	8004eee <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	7858      	ldrb	r0, [r3, #1]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	f7ff fba8 	bl	8004628 <disk_read>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d004      	beq.n	8004ee8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff ff90 	bl	8004e26 <sync_window>
 8004f06:	4603      	mov	r3, r0
 8004f08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d158      	bne.n	8004fc2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d148      	bne.n	8004faa <sync_fs+0xb2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d144      	bne.n	8004faa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3330      	adds	r3, #48	; 0x30
 8004f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fed5 	bl	8004cda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3330      	adds	r3, #48	; 0x30
 8004f34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f38:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fe64 	bl	8004c0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3330      	adds	r3, #48	; 0x30
 8004f46:	4921      	ldr	r1, [pc, #132]	; (8004fcc <sync_fs+0xd4>)
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fe79 	bl	8004c40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3330      	adds	r3, #48	; 0x30
 8004f52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004f56:	491e      	ldr	r1, [pc, #120]	; (8004fd0 <sync_fs+0xd8>)
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fe71 	bl	8004c40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3330      	adds	r3, #48	; 0x30
 8004f62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7ff fe67 	bl	8004c40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3330      	adds	r3, #48	; 0x30
 8004f76:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7ff fe5d 	bl	8004c40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7858      	ldrb	r0, [r3, #1]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f7ff fbac 	bl	80046fc <disk_write>
			fs->fsi_flag = 0;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc26 	bl	8004804 <disk_ioctl>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <sync_fs+0xca>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	41615252 	.word	0x41615252
 8004fd0:	61417272 	.word	0x61417272

08004fd4 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	3b02      	subs	r3, #2
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d301      	bcc.n	8004ff4 <clst2sect+0x20>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e008      	b.n	8005006 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	895b      	ldrh	r3, [r3, #10]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	fb03 f301 	mul.w	r3, r3, r1
 8005004:	4413      	add	r3, r2
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d904      	bls.n	8005032 <get_fat+0x20>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005032:	2301      	movs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e08c      	b.n	8005152 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005038:	f04f 33ff 	mov.w	r3, #4294967295
 800503c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d045      	beq.n	80050d2 <get_fat+0xc0>
 8005046:	2b03      	cmp	r3, #3
 8005048:	d05d      	beq.n	8005106 <get_fat+0xf4>
 800504a:	2b01      	cmp	r3, #1
 800504c:	d177      	bne.n	800513e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	4413      	add	r3, r2
 8005066:	4619      	mov	r1, r3
 8005068:	6938      	ldr	r0, [r7, #16]
 800506a:	f7ff ff18 	bl	8004e9e <move_window>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d167      	bne.n	8005144 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	60fa      	str	r2, [r7, #12]
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005086:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0a5b      	lsrs	r3, r3, #9
 8005090:	4413      	add	r3, r2
 8005092:	4619      	mov	r1, r3
 8005094:	6938      	ldr	r0, [r7, #16]
 8005096:	f7ff ff02 	bl	8004e9e <move_window>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d153      	bne.n	8005148 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4413      	add	r3, r2
 80050aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	461a      	mov	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <get_fat+0xb6>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	e002      	b.n	80050ce <get_fat+0xbc>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ce:	617b      	str	r3, [r7, #20]
			break;
 80050d0:	e03f      	b.n	8005152 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6a1a      	ldr	r2, [r3, #32]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	0a1b      	lsrs	r3, r3, #8
 80050da:	4413      	add	r3, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	6938      	ldr	r0, [r7, #16]
 80050e0:	f7ff fedd 	bl	8004e9e <move_window>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d130      	bne.n	800514c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80050f8:	4413      	add	r3, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fd4a 	bl	8004b94 <ld_word>
 8005100:	4603      	mov	r3, r0
 8005102:	617b      	str	r3, [r7, #20]
			break;
 8005104:	e025      	b.n	8005152 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6a1a      	ldr	r2, [r3, #32]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	4413      	add	r3, r2
 8005110:	4619      	mov	r1, r3
 8005112:	6938      	ldr	r0, [r7, #16]
 8005114:	f7ff fec3 	bl	8004e9e <move_window>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d118      	bne.n	8005150 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800512c:	4413      	add	r3, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fd48 	bl	8004bc4 <ld_dword>
 8005134:	4603      	mov	r3, r0
 8005136:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800513a:	617b      	str	r3, [r7, #20]
			break;
 800513c:	e009      	b.n	8005152 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e006      	b.n	8005152 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005144:	bf00      	nop
 8005146:	e004      	b.n	8005152 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005150:	bf00      	nop
		}
	}

	return val;
 8005152:	697b      	ldr	r3, [r7, #20]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005168:	2302      	movs	r3, #2
 800516a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f240 80d6 	bls.w	8005320 <put_fat+0x1c4>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	f080 80d0 	bcs.w	8005320 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d073      	beq.n	8005270 <put_fat+0x114>
 8005188:	2b03      	cmp	r3, #3
 800518a:	f000 8091 	beq.w	80052b0 <put_fat+0x154>
 800518e:	2b01      	cmp	r3, #1
 8005190:	f040 80c6 	bne.w	8005320 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4413      	add	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	0a5b      	lsrs	r3, r3, #9
 80051aa:	4413      	add	r3, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fe75 	bl	8004e9e <move_window>
 80051b4:	4603      	mov	r3, r0
 80051b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 80a9 	bne.w	8005312 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	61b9      	str	r1, [r7, #24]
 80051cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d0:	4413      	add	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <put_fat+0x9e>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	b25a      	sxtb	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b25b      	sxtb	r3, r3
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	e001      	b.n	80051fe <put_fat+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1a      	ldr	r2, [r3, #32]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	0a5b      	lsrs	r3, r3, #9
 8005210:	4413      	add	r3, r2
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fe42 	bl	8004e9e <move_window>
 800521a:	4603      	mov	r3, r0
 800521c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800521e:	7ffb      	ldrb	r3, [r7, #31]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d178      	bne.n	8005316 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	4413      	add	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <put_fat+0xea>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e00e      	b.n	8005264 <put_fat+0x108>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b25b      	sxtb	r3, r3
 800524c:	f023 030f 	bic.w	r3, r3, #15
 8005250:	b25a      	sxtb	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	b25b      	sxtb	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b25b      	sxtb	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	70da      	strb	r2, [r3, #3]
			break;
 800526e:	e057      	b.n	8005320 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a1a      	ldr	r2, [r3, #32]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	4413      	add	r3, r2
 800527a:	4619      	mov	r1, r3
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fe0e 	bl	8004e9e <move_window>
 8005282:	4603      	mov	r3, r0
 8005284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005286:	7ffb      	ldrb	r3, [r7, #31]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d146      	bne.n	800531a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800529a:	4413      	add	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	b292      	uxth	r2, r2
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fcb1 	bl	8004c0a <st_word>
			fs->wflag = 1;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	70da      	strb	r2, [r3, #3]
			break;
 80052ae:	e037      	b.n	8005320 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	09db      	lsrs	r3, r3, #7
 80052b8:	4413      	add	r3, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fdee 	bl	8004e9e <move_window>
 80052c2:	4603      	mov	r3, r0
 80052c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052c6:	7ffb      	ldrb	r3, [r7, #31]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d128      	bne.n	800531e <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80052e0:	4413      	add	r3, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fc6e 	bl	8004bc4 <ld_dword>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052ee:	4323      	orrs	r3, r4
 80052f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005300:	4413      	add	r3, r2
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fc9b 	bl	8004c40 <st_dword>
			fs->wflag = 1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	70da      	strb	r2, [r3, #3]
			break;
 8005310:	e006      	b.n	8005320 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005312:	bf00      	nop
 8005314:	e004      	b.n	8005320 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800531e:	bf00      	nop
		}
	}
	return res;
 8005320:	7ffb      	ldrb	r3, [r7, #31]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3724      	adds	r7, #36	; 0x24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd90      	pop	{r4, r7, pc}

0800532a <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d904      	bls.n	8005350 <remove_chain+0x26>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	429a      	cmp	r2, r3
 800534e:	d301      	bcc.n	8005354 <remove_chain+0x2a>
 8005350:	2302      	movs	r3, #2
 8005352:	e04b      	b.n	80053ec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	69b8      	ldr	r0, [r7, #24]
 8005362:	f7ff fefb 	bl	800515c <put_fat>
 8005366:	4603      	mov	r3, r0
 8005368:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <remove_chain+0x4a>
 8005370:	7ffb      	ldrb	r3, [r7, #31]
 8005372:	e03b      	b.n	80053ec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff fe4b 	bl	8005012 <get_fat>
 800537c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d031      	beq.n	80053e8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <remove_chain+0x64>
 800538a:	2302      	movs	r3, #2
 800538c:	e02e      	b.n	80053ec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d101      	bne.n	800539a <remove_chain+0x70>
 8005396:	2301      	movs	r3, #1
 8005398:	e028      	b.n	80053ec <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800539a:	2200      	movs	r2, #0
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	69b8      	ldr	r0, [r7, #24]
 80053a0:	f7ff fedc 	bl	800515c <put_fat>
 80053a4:	4603      	mov	r3, r0
 80053a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80053a8:	7ffb      	ldrb	r3, [r7, #31]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <remove_chain+0x88>
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	e01c      	b.n	80053ec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	3b02      	subs	r3, #2
 80053bc:	429a      	cmp	r2, r3
 80053be:	d20b      	bcs.n	80053d8 <remove_chain+0xae>
			fs->free_clst++;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	791b      	ldrb	r3, [r3, #4]
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3c6      	bcc.n	8005374 <remove_chain+0x4a>
 80053e6:	e000      	b.n	80053ea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80053e8:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <create_chain+0x2c>
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d31b      	bcc.n	8005458 <create_chain+0x64>
 8005420:	2301      	movs	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	e018      	b.n	8005458 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fdf2 	bl	8005012 <get_fat>
 800542e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d801      	bhi.n	800543a <create_chain+0x46>
 8005436:	2301      	movs	r3, #1
 8005438:	e0a9      	b.n	800558e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d101      	bne.n	8005446 <create_chain+0x52>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	e0a3      	b.n	800558e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d201      	bcs.n	8005454 <create_chain+0x60>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	e09c      	b.n	800558e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <create_chain+0x70>
 8005460:	2300      	movs	r3, #0
 8005462:	e094      	b.n	800558e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d129      	bne.n	80054c4 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	3301      	adds	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	d301      	bcc.n	8005484 <create_chain+0x90>
 8005480:	2302      	movs	r3, #2
 8005482:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff fdc3 	bl	8005012 <get_fat>
 800548c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d003      	beq.n	800549c <create_chain+0xa8>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d101      	bne.n	80054a0 <create_chain+0xac>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	e076      	b.n	800558e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d906      	bls.n	80054c0 <create_chain+0xcc>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d201      	bcs.n	80054c0 <create_chain+0xcc>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d129      	bne.n	800551e <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3301      	adds	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d307      	bcc.n	80054ee <create_chain+0xfa>
					ncl = 2;
 80054de:	2302      	movs	r3, #2
 80054e0:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d901      	bls.n	80054ee <create_chain+0xfa>
 80054ea:	2300      	movs	r3, #0
 80054ec:	e04f      	b.n	800558e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80054ee:	69f9      	ldr	r1, [r7, #28]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fd8e 	bl	8005012 <get_fat>
 80054f6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d003      	beq.n	800550c <create_chain+0x118>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d101      	bne.n	8005510 <create_chain+0x11c>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e03e      	b.n	800558e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1da      	bne.n	80054ce <create_chain+0xda>
 8005518:	2300      	movs	r3, #0
 800551a:	e038      	b.n	800558e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800551c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800551e:	f04f 32ff 	mov.w	r2, #4294967295
 8005522:	69f9      	ldr	r1, [r7, #28]
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7ff fe19 	bl	800515c <put_fat>
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <create_chain+0x154>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7ff fe0c 	bl	800515c <put_fat>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <create_chain+0x188>
		fs->last_clst = ncl;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	3b02      	subs	r3, #2
 800555e:	429a      	cmp	r2, r3
 8005560:	d804      	bhi.n	800556c <create_chain+0x178>
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	1e5a      	subs	r2, r3, #1
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	791b      	ldrb	r3, [r3, #4]
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	711a      	strb	r2, [r3, #4]
 800557a:	e007      	b.n	800558c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d102      	bne.n	8005588 <create_chain+0x194>
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	e000      	b.n	800558a <create_chain+0x196>
 8005588:	2301      	movs	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800558c:	69fb      	ldr	r3, [r7, #28]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fc40 	bl	8004e26 <sync_window>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <dir_clear+0x1a>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e036      	b.n	800561e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fd0e 	bl	8004fd4 <clst2sect>
 80055b8:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3330      	adds	r3, #48	; 0x30
 80055c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fb85 	bl	8004cda <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3330      	adds	r3, #48	; 0x30
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	2301      	movs	r3, #1
 80055d8:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e003      	b.n	80055e8 <dir_clear+0x52>
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	895b      	ldrh	r3, [r3, #10]
 80055ec:	461a      	mov	r2, r3
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d20b      	bcs.n	800560c <dir_clear+0x76>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	7858      	ldrb	r0, [r3, #1]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	441a      	add	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	f7ff f87b 	bl	80046fc <disk_write>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0e9      	beq.n	80055e0 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	895b      	ldrh	r3, [r3, #10]
 8005610:	461a      	mov	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4293      	cmp	r3, r2
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800563c:	d204      	bcs.n	8005648 <dir_sdi+0x22>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005648:	2302      	movs	r3, #2
 800564a:	e063      	b.n	8005714 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <dir_sdi+0x46>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10c      	bne.n	800568c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	8912      	ldrh	r2, [r2, #8]
 800567a:	4293      	cmp	r3, r2
 800567c:	d301      	bcc.n	8005682 <dir_sdi+0x5c>
 800567e:	2302      	movs	r3, #2
 8005680:	e048      	b.n	8005714 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	619a      	str	r2, [r3, #24]
 800568a:	e029      	b.n	80056e0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	895b      	ldrh	r3, [r3, #10]
 8005690:	025b      	lsls	r3, r3, #9
 8005692:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005694:	e019      	b.n	80056ca <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6979      	ldr	r1, [r7, #20]
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fcb9 	bl	8005012 <get_fat>
 80056a0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d101      	bne.n	80056ae <dir_sdi+0x88>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e032      	b.n	8005714 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d904      	bls.n	80056be <dir_sdi+0x98>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d301      	bcc.n	80056c2 <dir_sdi+0x9c>
 80056be:	2302      	movs	r3, #2
 80056c0:	e028      	b.n	8005714 <dir_sdi+0xee>
			ofs -= csz;
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d2e1      	bcs.n	8005696 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	6938      	ldr	r0, [r7, #16]
 80056d6:	f7ff fc7d 	bl	8004fd4 <clst2sect>
 80056da:	4602      	mov	r2, r0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <dir_sdi+0xcc>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e010      	b.n	8005714 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	441a      	add	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	3320      	adds	r3, #32
 8005732:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800573a:	d302      	bcc.n	8005742 <dir_next+0x26>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <dir_next+0x32>
 800574a:	2304      	movs	r3, #4
 800574c:	e078      	b.n	8005840 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005754:	2b00      	cmp	r3, #0
 8005756:	d166      	bne.n	8005826 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	8912      	ldrh	r2, [r2, #8]
 8005772:	4293      	cmp	r3, r2
 8005774:	d357      	bcc.n	8005826 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
 800577c:	2304      	movs	r3, #4
 800577e:	e05f      	b.n	8005840 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	8952      	ldrh	r2, [r2, #10]
 8005788:	3a01      	subs	r2, #1
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d14a      	bne.n	8005826 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fc3a 	bl	8005012 <get_fat>
 800579e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d801      	bhi.n	80057aa <dir_next+0x8e>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e04a      	b.n	8005840 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d101      	bne.n	80057b6 <dir_next+0x9a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e044      	b.n	8005840 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d328      	bcc.n	8005812 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]
 80057cc:	2304      	movs	r3, #4
 80057ce:	e037      	b.n	8005840 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7ff fe0b 	bl	80053f4 <create_chain>
 80057de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <dir_next+0xce>
 80057e6:	2307      	movs	r3, #7
 80057e8:	e02a      	b.n	8005840 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <dir_next+0xd8>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e025      	b.n	8005840 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d101      	bne.n	8005800 <dir_next+0xe4>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e01f      	b.n	8005840 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005800:	6979      	ldr	r1, [r7, #20]
 8005802:	6938      	ldr	r0, [r7, #16]
 8005804:	f7ff fec7 	bl	8005596 <dir_clear>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <dir_next+0xf6>
 800580e:	2301      	movs	r3, #1
 8005810:	e016      	b.n	8005840 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005818:	6979      	ldr	r1, [r7, #20]
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f7ff fbda 	bl	8004fd4 <clst2sect>
 8005820:	4602      	mov	r2, r0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005858:	2100      	movs	r1, #0
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fee3 	bl	8005626 <dir_sdi>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d12b      	bne.n	80058c2 <dir_alloc+0x7a>
		n = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff fb12 	bl	8004e9e <move_window>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11d      	bne.n	80058c0 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2be5      	cmp	r3, #229	; 0xe5
 800588c:	d004      	beq.n	8005898 <dir_alloc+0x50>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	3301      	adds	r3, #1
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d102      	bne.n	80058ac <dir_alloc+0x64>
 80058a6:	e00c      	b.n	80058c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058ac:	2101      	movs	r1, #1
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ff34 	bl	800571c <dir_next>
 80058b4:	4603      	mov	r3, r0
 80058b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0d7      	beq.n	800586e <dir_alloc+0x26>
 80058be:	e000      	b.n	80058c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d101      	bne.n	80058cc <dir_alloc+0x84>
 80058c8:	2307      	movs	r3, #7
 80058ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	331a      	adds	r3, #26
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff f955 	bl	8004b94 <ld_word>
 80058ea:	4603      	mov	r3, r0
 80058ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d109      	bne.n	800590a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f94a 	bl	8004b94 <ld_word>
 8005900:	4603      	mov	r3, r0
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800590a:	68fb      	ldr	r3, [r7, #12]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	331a      	adds	r3, #26
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	b292      	uxth	r2, r2
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff f96d 	bl	8004c0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d109      	bne.n	800594c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f103 0214 	add.w	r2, r3, #20
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b29b      	uxth	r3, r3
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7ff f95f 	bl	8004c0a <st_word>
	}
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005962:	2100      	movs	r1, #0
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff fe5e 	bl	8005626 <dir_sdi>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <dir_find+0x24>
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	e03e      	b.n	80059f6 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	4619      	mov	r1, r3
 800597e:	6938      	ldr	r0, [r7, #16]
 8005980:	f7ff fa8d 	bl	8004e9e <move_window>
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12f      	bne.n	80059ee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005996:	7bfb      	ldrb	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <dir_find+0x4e>
 800599c:	2304      	movs	r3, #4
 800599e:	75fb      	strb	r3, [r7, #23]
 80059a0:	e028      	b.n	80059f4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	330b      	adds	r3, #11
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	330b      	adds	r3, #11
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <dir_find+0x86>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69d8      	ldr	r0, [r3, #28]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3320      	adds	r3, #32
 80059cc:	220b      	movs	r2, #11
 80059ce:	4619      	mov	r1, r3
 80059d0:	f7ff f99d 	bl	8004d0e <mem_cmp>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80059da:	2100      	movs	r1, #0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff fe9d 	bl	800571c <dir_next>
 80059e2:	4603      	mov	r3, r0
 80059e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0c5      	beq.n	8005978 <dir_find+0x24>
 80059ec:	e002      	b.n	80059f4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80059f2:	bf00      	nop

	return res;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff1a 	bl	8005848 <dir_alloc>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d11c      	bne.n	8005a58 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	4619      	mov	r1, r3
 8005a24:	68b8      	ldr	r0, [r7, #8]
 8005a26:	f7ff fa3a 	bl	8004e9e <move_window>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d111      	bne.n	8005a58 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff f94c 	bl	8004cda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69d8      	ldr	r0, [r3, #28]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3320      	adds	r3, #32
 8005a4a:	220b      	movs	r2, #11
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7ff f923 	bl	8004c98 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2201      	movs	r2, #1
 8005a56:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3320      	adds	r3, #32
 8005a78:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8005a7a:	220b      	movs	r2, #11
 8005a7c:	2120      	movs	r1, #32
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f7ff f92b 	bl	8004cda <mem_set>
	si = i = 0; ni = 8;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d97c      	bls.n	8005ba2 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aac:	2b2f      	cmp	r3, #47	; 0x2f
 8005aae:	d007      	beq.n	8005ac0 <create_name+0x5c>
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ab6:	d110      	bne.n	8005ada <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ab8:	e002      	b.n	8005ac0 <create_name+0x5c>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b2f      	cmp	r3, #47	; 0x2f
 8005aca:	d0f6      	beq.n	8005aba <create_name+0x56>
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ad6:	d0f0      	beq.n	8005aba <create_name+0x56>
			break;
 8005ad8:	e064      	b.n	8005ba4 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8005ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ade:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae0:	d003      	beq.n	8005aea <create_name+0x86>
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d30d      	bcc.n	8005b06 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	2b0b      	cmp	r3, #11
 8005aee:	d003      	beq.n	8005af8 <create_name+0x94>
 8005af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d001      	beq.n	8005afc <create_name+0x98>
 8005af8:	2306      	movs	r3, #6
 8005afa:	e06f      	b.n	8005bdc <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8005afc:	2308      	movs	r3, #8
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	230b      	movs	r3, #11
 8005b02:	623b      	str	r3, [r7, #32]
			continue;
 8005b04:	e04c      	b.n	8005ba0 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8005b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff f941 	bl	8004d92 <dbc_1st>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d024      	beq.n	8005b60 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	61fa      	str	r2, [r7, #28]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f953 	bl	8004dd2 <dbc_2nd>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <create_name+0xd8>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d301      	bcc.n	8005b40 <create_name+0xdc>
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	e04d      	b.n	8005bdc <create_name+0x178>
			sfn[i++] = c;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	61ba      	str	r2, [r7, #24]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b4e:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	61ba      	str	r2, [r7, #24]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e797      	b.n	8005a90 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b64:	4619      	mov	r1, r3
 8005b66:	481f      	ldr	r0, [pc, #124]	; (8005be4 <create_name+0x180>)
 8005b68:	f7ff f8f8 	bl	8004d5c <chk_chr>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <create_name+0x112>
 8005b72:	2306      	movs	r3, #6
 8005b74:	e032      	b.n	8005bdc <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b7a:	2b60      	cmp	r3, #96	; 0x60
 8005b7c:	d908      	bls.n	8005b90 <create_name+0x12c>
 8005b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b82:	2b7a      	cmp	r3, #122	; 0x7a
 8005b84:	d804      	bhi.n	8005b90 <create_name+0x12c>
 8005b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b8a:	3b20      	subs	r3, #32
 8005b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	61ba      	str	r2, [r7, #24]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8005ba0:	e776      	b.n	8005a90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ba2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	441a      	add	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <create_name+0x154>
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	e011      	b.n	8005bdc <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2be5      	cmp	r3, #229	; 0xe5
 8005bbe:	d102      	bne.n	8005bc6 <create_name+0x162>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2205      	movs	r2, #5
 8005bc4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d801      	bhi.n	8005bd2 <create_name+0x16e>
 8005bce:	2204      	movs	r2, #4
 8005bd0:	e000      	b.n	8005bd4 <create_name+0x170>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	330b      	adds	r3, #11
 8005bd8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005bda:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3728      	adds	r7, #40	; 0x28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	0800dc8c 	.word	0x0800dc8c

08005be8 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005bf8:	e002      	b.n	8005c00 <follow_path+0x18>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b2f      	cmp	r3, #47	; 0x2f
 8005c06:	d0f8      	beq.n	8005bfa <follow_path+0x12>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b5c      	cmp	r3, #92	; 0x5c
 8005c0e:	d0f4      	beq.n	8005bfa <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b1f      	cmp	r3, #31
 8005c1c:	d80a      	bhi.n	8005c34 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8005c26:	2100      	movs	r1, #0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fcfc 	bl	8005626 <dir_sdi>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	75fb      	strb	r3, [r7, #23]
 8005c32:	e043      	b.n	8005cbc <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c34:	463b      	mov	r3, r7
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ff13 	bl	8005a64 <create_name>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d134      	bne.n	8005cb2 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff fe83 	bl	8005954 <dir_find>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005c58:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d127      	bne.n	8005cb6 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d122      	bne.n	8005cb6 <follow_path+0xce>
 8005c70:	2305      	movs	r3, #5
 8005c72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c74:	e01f      	b.n	8005cb6 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11c      	bne.n	8005cba <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	799b      	ldrb	r3, [r3, #6]
 8005c84:	f003 0310 	and.w	r3, r3, #16
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8005c8c:	2305      	movs	r3, #5
 8005c8e:	75fb      	strb	r3, [r7, #23]
 8005c90:	e014      	b.n	8005cbc <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6938      	ldr	r0, [r7, #16]
 8005ca6:	f7ff fe16 	bl	80058d6 <ld_clust>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005cb0:	e7c0      	b.n	8005c34 <follow_path+0x4c>
			if (res != FR_OK) break;
 8005cb2:	bf00      	nop
 8005cb4:	e002      	b.n	8005cbc <follow_path+0xd4>
				break;
 8005cb6:	bf00      	nop
 8005cb8:	e000      	b.n	8005cbc <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cba:	bf00      	nop
			}
		}
	}

	return res;
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b089      	sub	sp, #36	; 0x24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <get_ldnumber+0x22>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	e02d      	b.n	8005d44 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	61fa      	str	r2, [r7, #28]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d902      	bls.n	8005cfe <get_ldnumber+0x38>
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b3a      	cmp	r3, #58	; 0x3a
 8005cfc:	d1f4      	bne.n	8005ce8 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	2b3a      	cmp	r3, #58	; 0x3a
 8005d02:	d11c      	bne.n	8005d3e <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8005d04:	2301      	movs	r3, #1
 8005d06:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8005d0e:	d90c      	bls.n	8005d2a <get_ldnumber+0x64>
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b39      	cmp	r3, #57	; 0x39
 8005d16:	d808      	bhi.n	8005d2a <get_ldnumber+0x64>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d103      	bne.n	8005d2a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	3b30      	subs	r3, #48	; 0x30
 8005d28:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dc04      	bgt.n	8005d3a <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	e002      	b.n	8005d44 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8005d42:	697b      	ldr	r3, [r7, #20]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3724      	adds	r7, #36	; 0x24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	70da      	strb	r2, [r3, #3]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff f897 	bl	8004e9e <move_window>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <check_fs+0x2a>
 8005d76:	2304      	movs	r3, #4
 8005d78:	e038      	b.n	8005dec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3330      	adds	r3, #48	; 0x30
 8005d7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe ff06 	bl	8004b94 <ld_word>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <check_fs+0x48>
 8005d94:	2303      	movs	r3, #3
 8005d96:	e029      	b.n	8005dec <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d9e:	2be9      	cmp	r3, #233	; 0xe9
 8005da0:	d009      	beq.n	8005db6 <check_fs+0x66>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005da8:	2beb      	cmp	r3, #235	; 0xeb
 8005daa:	d004      	beq.n	8005db6 <check_fs+0x66>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db2:	2be8      	cmp	r3, #232	; 0xe8
 8005db4:	d119      	bne.n	8005dea <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3330      	adds	r3, #48	; 0x30
 8005dba:	3336      	adds	r3, #54	; 0x36
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	490d      	ldr	r1, [pc, #52]	; (8005df4 <check_fs+0xa4>)
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe ffa4 	bl	8004d0e <mem_cmp>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <check_fs+0x80>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e00d      	b.n	8005dec <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3330      	adds	r3, #48	; 0x30
 8005dd4:	3352      	adds	r3, #82	; 0x52
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	4907      	ldr	r1, [pc, #28]	; (8005df8 <check_fs+0xa8>)
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe ff97 	bl	8004d0e <mem_cmp>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <check_fs+0x9a>
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8005dea:	2302      	movs	r3, #2
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	0800dc9c 	.word	0x0800dc9c
 8005df8:	0800dca0 	.word	0x0800dca0

08005dfc <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b096      	sub	sp, #88	; 0x58
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff ff58 	bl	8005cc6 <get_ldnumber>
 8005e16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da01      	bge.n	8005e22 <find_volume+0x26>
 8005e1e:	230b      	movs	r3, #11
 8005e20:	e238      	b.n	8006294 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005e22:	4aa8      	ldr	r2, [pc, #672]	; (80060c4 <find_volume+0x2c8>)
 8005e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <find_volume+0x3a>
 8005e32:	230c      	movs	r3, #12
 8005e34:	e22e      	b.n	8006294 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	f023 0301 	bic.w	r3, r3, #1
 8005e42:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01a      	beq.n	8005e82 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fbd3 	bl	80045fc <disk_status>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10c      	bne.n	8005e82 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <find_volume+0x82>
 8005e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e7a:	230a      	movs	r3, #10
 8005e7c:	e20a      	b.n	8006294 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e208      	b.n	8006294 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fe fac7 	bl	8004428 <disk_initialize>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005eac:	2303      	movs	r3, #3
 8005eae:	e1f1      	b.n	8006294 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <find_volume+0xca>
 8005eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e1e6      	b.n	8006294 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005eca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ecc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ece:	f7ff ff3f 	bl	8005d50 <check_fs>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d14b      	bne.n	8005f78 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee4:	e01f      	b.n	8005f26 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eee:	011b      	lsls	r3, r3, #4
 8005ef0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005ef4:	4413      	add	r3, r2
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	3304      	adds	r3, #4
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d006      	beq.n	8005f10 <find_volume+0x114>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	3308      	adds	r3, #8
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fe5c 	bl	8004bc4 <ld_dword>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	e000      	b.n	8005f12 <find_volume+0x116>
 8005f10:	2200      	movs	r2, #0
 8005f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f1a:	440b      	add	r3, r1
 8005f1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f22:	3301      	adds	r3, #1
 8005f24:	643b      	str	r3, [r7, #64]	; 0x40
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d9dc      	bls.n	8005ee6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8005f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <find_volume+0x140>
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005f44:	4413      	add	r3, r2
 8005f46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <find_volume+0x162>
 8005f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f56:	f7ff fefb 	bl	8005d50 <check_fs>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e000      	b.n	8005f60 <find_volume+0x164>
 8005f5e:	2303      	movs	r3, #3
 8005f60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d905      	bls.n	8005f78 <find_volume+0x17c>
 8005f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6e:	3301      	adds	r3, #1
 8005f70:	643b      	str	r3, [r7, #64]	; 0x40
 8005f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d9e1      	bls.n	8005f3c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d101      	bne.n	8005f84 <find_volume+0x188>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e187      	b.n	8006294 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d901      	bls.n	8005f90 <find_volume+0x194>
 8005f8c:	230d      	movs	r3, #13
 8005f8e:	e181      	b.n	8006294 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	3330      	adds	r3, #48	; 0x30
 8005f94:	330b      	adds	r3, #11
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fdfc 	bl	8004b94 <ld_word>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa2:	d001      	beq.n	8005fa8 <find_volume+0x1ac>
 8005fa4:	230d      	movs	r3, #13
 8005fa6:	e175      	b.n	8006294 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	3330      	adds	r3, #48	; 0x30
 8005fac:	3316      	adds	r3, #22
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fdf0 	bl	8004b94 <ld_word>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <find_volume+0x1d0>
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	3330      	adds	r3, #48	; 0x30
 8005fc2:	3324      	adds	r3, #36	; 0x24
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fdfd 	bl	8004bc4 <ld_dword>
 8005fca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fde:	789b      	ldrb	r3, [r3, #2]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d005      	beq.n	8005ff0 <find_volume+0x1f4>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	789b      	ldrb	r3, [r3, #2]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d001      	beq.n	8005ff0 <find_volume+0x1f4>
 8005fec:	230d      	movs	r3, #13
 8005fee:	e151      	b.n	8006294 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006004:	b29a      	uxth	r2, r3
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	895b      	ldrh	r3, [r3, #10]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <find_volume+0x228>
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	895b      	ldrh	r3, [r3, #10]
 8006016:	461a      	mov	r2, r3
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	3b01      	subs	r3, #1
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <find_volume+0x22c>
 8006024:	230d      	movs	r3, #13
 8006026:	e135      	b.n	8006294 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	3330      	adds	r3, #48	; 0x30
 800602c:	3311      	adds	r3, #17
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe fdb0 	bl	8004b94 <ld_word>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	891b      	ldrh	r3, [r3, #8]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <find_volume+0x252>
 800604a:	230d      	movs	r3, #13
 800604c:	e122      	b.n	8006294 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	3330      	adds	r3, #48	; 0x30
 8006052:	3313      	adds	r3, #19
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe fd9d 	bl	8004b94 <ld_word>
 800605a:	4603      	mov	r3, r0
 800605c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800605e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <find_volume+0x276>
 8006064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006066:	3330      	adds	r3, #48	; 0x30
 8006068:	3320      	adds	r3, #32
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fdaa 	bl	8004bc4 <ld_dword>
 8006070:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	3330      	adds	r3, #48	; 0x30
 8006076:	330e      	adds	r3, #14
 8006078:	4618      	mov	r0, r3
 800607a:	f7fe fd8b 	bl	8004b94 <ld_word>
 800607e:	4603      	mov	r3, r0
 8006080:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <find_volume+0x290>
 8006088:	230d      	movs	r3, #13
 800608a:	e103      	b.n	8006294 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800608c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800608e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006090:	4413      	add	r3, r2
 8006092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006094:	8912      	ldrh	r2, [r2, #8]
 8006096:	0912      	lsrs	r2, r2, #4
 8006098:	b292      	uxth	r2, r2
 800609a:	4413      	add	r3, r2
 800609c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800609e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d201      	bcs.n	80060aa <find_volume+0x2ae>
 80060a6:	230d      	movs	r3, #13
 80060a8:	e0f4      	b.n	8006294 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	8952      	ldrh	r2, [r2, #10]
 80060b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d103      	bne.n	80060c8 <find_volume+0x2cc>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e0e7      	b.n	8006294 <find_volume+0x498>
 80060c4:	2000025c 	.word	0x2000025c
		fmt = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	4a72      	ldr	r2, [pc, #456]	; (800629c <find_volume+0x4a0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d802      	bhi.n	80060dc <find_volume+0x2e0>
 80060d6:	2303      	movs	r3, #3
 80060d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d802      	bhi.n	80060ec <find_volume+0x2f0>
 80060e6:	2302      	movs	r3, #2
 80060e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d802      	bhi.n	80060fc <find_volume+0x300>
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80060fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <find_volume+0x30c>
 8006104:	230d      	movs	r3, #13
 8006106:	e0c5      	b.n	8006294 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	1c9a      	adds	r2, r3, #2
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006114:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006116:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611a:	441a      	add	r2, r3
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	441a      	add	r2, r3
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800612a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800612e:	2b03      	cmp	r3, #3
 8006130:	d11e      	bne.n	8006170 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	3330      	adds	r3, #48	; 0x30
 8006136:	332a      	adds	r3, #42	; 0x2a
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fd2b 	bl	8004b94 <ld_word>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <find_volume+0x34c>
 8006144:	230d      	movs	r3, #13
 8006146:	e0a5      	b.n	8006294 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	891b      	ldrh	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <find_volume+0x358>
 8006150:	230d      	movs	r3, #13
 8006152:	e09f      	b.n	8006294 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	3330      	adds	r3, #48	; 0x30
 8006158:	332c      	adds	r3, #44	; 0x2c
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fd32 	bl	8004bc4 <ld_dword>
 8006160:	4602      	mov	r2, r0
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
 800616e:	e01f      	b.n	80061b0 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	891b      	ldrh	r3, [r3, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <find_volume+0x380>
 8006178:	230d      	movs	r3, #13
 800617a:	e08b      	b.n	8006294 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006182:	441a      	add	r2, r3
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800618c:	2b02      	cmp	r3, #2
 800618e:	d103      	bne.n	8006198 <find_volume+0x39c>
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	e00a      	b.n	80061ae <find_volume+0x3b2>
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	4613      	mov	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	085a      	lsrs	r2, r3, #1
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	699a      	ldr	r2, [r3, #24]
 80061b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061ba:	0a5b      	lsrs	r3, r3, #9
 80061bc:	429a      	cmp	r2, r3
 80061be:	d201      	bcs.n	80061c4 <find_volume+0x3c8>
 80061c0:	230d      	movs	r3, #13
 80061c2:	e067      	b.n	8006294 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ca:	611a      	str	r2, [r3, #16]
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2280      	movs	r2, #128	; 0x80
 80061d8:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80061da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d149      	bne.n	8006276 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	3330      	adds	r3, #48	; 0x30
 80061e6:	3330      	adds	r3, #48	; 0x30
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe fcd3 	bl	8004b94 <ld_word>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d140      	bne.n	8006276 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 80061f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f6:	3301      	adds	r3, #1
 80061f8:	4619      	mov	r1, r3
 80061fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061fc:	f7fe fe4f 	bl	8004e9e <move_window>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d137      	bne.n	8006276 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	2200      	movs	r2, #0
 800620a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	3330      	adds	r3, #48	; 0x30
 8006210:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fcbd 	bl	8004b94 <ld_word>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006222:	429a      	cmp	r2, r3
 8006224:	d127      	bne.n	8006276 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	3330      	adds	r3, #48	; 0x30
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fcca 	bl	8004bc4 <ld_dword>
 8006230:	4602      	mov	r2, r0
 8006232:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <find_volume+0x4a4>)
 8006234:	429a      	cmp	r2, r3
 8006236:	d11e      	bne.n	8006276 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	3330      	adds	r3, #48	; 0x30
 800623c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe fcbf 	bl	8004bc4 <ld_dword>
 8006246:	4602      	mov	r2, r0
 8006248:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <find_volume+0x4a8>)
 800624a:	429a      	cmp	r2, r3
 800624c:	d113      	bne.n	8006276 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	3330      	adds	r3, #48	; 0x30
 8006252:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fcb4 	bl	8004bc4 <ld_dword>
 800625c:	4602      	mov	r2, r0
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	3330      	adds	r3, #48	; 0x30
 8006266:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe fcaa 	bl	8004bc4 <ld_dword>
 8006270:	4602      	mov	r2, r0
 8006272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006274:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800627c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <find_volume+0x4ac>)
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	3301      	adds	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <find_volume+0x4ac>)
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <find_volume+0x4ac>)
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3758      	adds	r7, #88	; 0x58
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	0ffffff5 	.word	0x0ffffff5
 80062a0:	41615252 	.word	0x41615252
 80062a4:	61417272 	.word	0x61417272
 80062a8:	20000260 	.word	0x20000260

080062ac <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062b6:	2309      	movs	r3, #9
 80062b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01c      	beq.n	80062fa <validate+0x4e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d018      	beq.n	80062fa <validate+0x4e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d013      	beq.n	80062fa <validate+0x4e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	889a      	ldrh	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d10c      	bne.n	80062fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f988 	bl	80045fc <disk_status>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <validate+0x4e>
			res = FR_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <validate+0x5a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	e000      	b.n	8006308 <validate+0x5c>
 8006306:	2300      	movs	r3, #0
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	6013      	str	r3, [r2, #0]
	return res;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fcc9 	bl	8005cc6 <get_ldnumber>
 8006334:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da01      	bge.n	8006340 <f_mount+0x28>
 800633c:	230b      	movs	r3, #11
 800633e:	e025      	b.n	800638c <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006340:	4a14      	ldr	r2, [pc, #80]	; (8006394 <f_mount+0x7c>)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	490b      	ldr	r1, [pc, #44]	; (8006394 <f_mount+0x7c>)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <f_mount+0x5e>
 8006372:	2300      	movs	r3, #0
 8006374:	e00a      	b.n	800638c <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006376:	f107 010c 	add.w	r1, r7, #12
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	2200      	movs	r2, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fd3b 	bl	8005dfc <find_volume>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	2000025c 	.word	0x2000025c

08006398 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b099      	sub	sp, #100	; 0x64
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <f_open+0x18>
 80063ac:	2309      	movs	r3, #9
 80063ae:	e172      	b.n	8006696 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063b8:	79fa      	ldrb	r2, [r7, #7]
 80063ba:	f107 0114 	add.w	r1, r7, #20
 80063be:	f107 0308 	add.w	r3, r7, #8
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff fd1a 	bl	8005dfc <find_volume>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80063ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 8156 	bne.w	8006684 <f_open+0x2ec>
		dj.obj.fs = fs;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	f107 0318 	add.w	r3, r7, #24
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fbff 	bl	8005be8 <follow_path>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 80063f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80063f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da02      	bge.n	8006408 <f_open+0x70>
				res = FR_INVALID_NAME;
 8006402:	2306      	movs	r3, #6
 8006404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	f003 031c 	and.w	r3, r3, #28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d073      	beq.n	80064fa <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8006412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006416:	2b00      	cmp	r3, #0
 8006418:	d010      	beq.n	800643c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800641a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800641e:	2b04      	cmp	r3, #4
 8006420:	d107      	bne.n	8006432 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006422:	f107 0318 	add.w	r3, r7, #24
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fae9 	bl	80059fe <dir_register>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	e010      	b.n	800645e <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800643c:	7fbb      	ldrb	r3, [r7, #30]
 800643e:	f003 0311 	and.w	r3, r3, #17
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <f_open+0xb6>
					res = FR_DENIED;
 8006446:	2307      	movs	r3, #7
 8006448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800644c:	e007      	b.n	800645e <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <f_open+0xc6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800645e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006462:	2b00      	cmp	r3, #0
 8006464:	d163      	bne.n	800652e <f_open+0x196>
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05e      	beq.n	800652e <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fa2d 	bl	80058d6 <ld_clust>
 800647c:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	f103 040e 	add.w	r4, r3, #14
 8006484:	f7fe fb7c 	bl	8004b80 <get_fattime>
 8006488:	4603      	mov	r3, r0
 800648a:	4619      	mov	r1, r3
 800648c:	4620      	mov	r0, r4
 800648e:	f7fe fbd7 	bl	8004c40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	330b      	adds	r3, #11
 8006496:	2220      	movs	r2, #32
 8006498:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800649e:	2200      	movs	r2, #0
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fa37 	bl	8005914 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80064a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a8:	331c      	adds	r3, #28
 80064aa:	2100      	movs	r1, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fbc7 	bl	8004c40 <st_dword>
					fs->wflag = 1;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2201      	movs	r2, #1
 80064b6:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80064b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d037      	beq.n	800652e <f_open+0x196>
						dw = fs->winsect;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 80064c4:	f107 0318 	add.w	r3, r7, #24
 80064c8:	2200      	movs	r2, #0
 80064ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe ff2c 	bl	800532a <remove_chain>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80064d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d126      	bne.n	800652e <f_open+0x196>
							res = move_window(fs, dw);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe fcda 	bl	8004e9e <move_window>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064f4:	3a01      	subs	r2, #1
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	e019      	b.n	800652e <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80064fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d115      	bne.n	800652e <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006502:	7fbb      	ldrb	r3, [r7, #30]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <f_open+0x17c>
					res = FR_NO_FILE;
 800650c:	2304      	movs	r3, #4
 800650e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006512:	e00c      	b.n	800652e <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <f_open+0x196>
 800651e:	7fbb      	ldrb	r3, [r7, #30]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <f_open+0x196>
						res = FR_DENIED;
 8006528:	2307      	movs	r3, #7
 800652a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800652e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <f_open+0x1b0>
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800655a:	2b00      	cmp	r3, #0
 800655c:	f040 8092 	bne.w	8006684 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f9b5 	bl	80058d6 <ld_clust>
 800656c:	4602      	mov	r2, r0
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	331c      	adds	r3, #28
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fb24 	bl	8004bc4 <ld_dword>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	88da      	ldrh	r2, [r3, #6]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	79fa      	ldrb	r2, [r7, #7]
 8006594:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3328      	adds	r3, #40	; 0x28
 80065ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b0:	2100      	movs	r1, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fb91 	bl	8004cda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d060      	beq.n	8006684 <f_open+0x2ec>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d05c      	beq.n	8006684 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	895b      	ldrh	r3, [r3, #10]
 80065d6:	025b      	lsls	r3, r3, #9
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	657b      	str	r3, [r7, #84]	; 0x54
 80065e6:	e016      	b.n	8006616 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fd10 	bl	8005012 <get_fat>
 80065f2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80065f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d802      	bhi.n	8006600 <f_open+0x268>
 80065fa:	2302      	movs	r3, #2
 80065fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d102      	bne.n	800660e <f_open+0x276>
 8006608:	2301      	movs	r3, #1
 800660a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800660e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	657b      	str	r3, [r7, #84]	; 0x54
 8006616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <f_open+0x28e>
 800661e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006622:	429a      	cmp	r2, r3
 8006624:	d8e0      	bhi.n	80065e8 <f_open+0x250>
				}
				fp->clust = clst;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800662a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800662c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006630:	2b00      	cmp	r3, #0
 8006632:	d127      	bne.n	8006684 <f_open+0x2ec>
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	2b00      	cmp	r3, #0
 800663c:	d022      	beq.n	8006684 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fcc6 	bl	8004fd4 <clst2sect>
 8006648:	6478      	str	r0, [r7, #68]	; 0x44
 800664a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <f_open+0x2c0>
						res = FR_INT_ERR;
 8006650:	2302      	movs	r3, #2
 8006652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006656:	e015      	b.n	8006684 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800665a:	0a5a      	lsrs	r2, r3, #9
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	441a      	add	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	7858      	ldrb	r0, [r3, #1]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	2301      	movs	r3, #1
 8006674:	f7fd ffd8 	bl	8004628 <disk_read>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <f_open+0x2ec>
 800667e:	2301      	movs	r3, #1
 8006680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <f_open+0x2fa>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006696:	4618      	mov	r0, r3
 8006698:	3764      	adds	r7, #100	; 0x64
 800669a:	46bd      	mov	sp, r7
 800669c:	bd90      	pop	{r4, r7, pc}

0800669e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b08e      	sub	sp, #56	; 0x38
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f107 0214 	add.w	r2, r7, #20
 80066bc:	4611      	mov	r1, r2
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fdf4 	bl	80062ac <validate>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <f_read+0x44>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	7c5b      	ldrb	r3, [r3, #17]
 80066d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80066da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <f_read+0x4a>
 80066e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066e6:	e109      	b.n	80068fc <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <f_read+0x5a>
 80066f4:	2307      	movs	r3, #7
 80066f6:	e101      	b.n	80068fc <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	429a      	cmp	r2, r3
 800670a:	f240 80f2 	bls.w	80068f2 <f_read+0x254>
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8006712:	e0ee      	b.n	80068f2 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 80ba 	bne.w	8006896 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	0a5b      	lsrs	r3, r3, #9
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	8952      	ldrh	r2, [r2, #10]
 800672c:	3a01      	subs	r2, #1
 800672e:	4013      	ands	r3, r2
 8006730:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d123      	bne.n	8006780 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
 8006746:	e007      	b.n	8006758 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fe fc5e 	bl	8005012 <get_fat>
 8006756:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	2b01      	cmp	r3, #1
 800675c:	d804      	bhi.n	8006768 <f_read+0xca>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2202      	movs	r2, #2
 8006762:	745a      	strb	r2, [r3, #17]
 8006764:	2302      	movs	r3, #2
 8006766:	e0c9      	b.n	80068fc <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d104      	bne.n	800677a <f_read+0xdc>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	745a      	strb	r2, [r3, #17]
 8006776:	2301      	movs	r3, #1
 8006778:	e0c0      	b.n	80068fc <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677e:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe fc23 	bl	8004fd4 <clst2sect>
 800678e:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <f_read+0x102>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	745a      	strb	r2, [r3, #17]
 800679c:	2302      	movs	r3, #2
 800679e:	e0ad      	b.n	80068fc <f_read+0x25e>
			sect += csect;
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	0a5b      	lsrs	r3, r3, #9
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d039      	beq.n	8006828 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	4413      	add	r3, r2
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	8952      	ldrh	r2, [r2, #10]
 80067be:	4293      	cmp	r3, r2
 80067c0:	d905      	bls.n	80067ce <f_read+0x130>
					cc = fs->csize - csect;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	895b      	ldrh	r3, [r3, #10]
 80067c6:	461a      	mov	r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	7858      	ldrb	r0, [r3, #1]
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067d8:	f7fd ff26 	bl	8004628 <disk_read>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <f_read+0x14e>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	745a      	strb	r2, [r3, #17]
 80067e8:	2301      	movs	r3, #1
 80067ea:	e087      	b.n	80068fc <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	7c1b      	ldrb	r3, [r3, #16]
 80067f0:	b25b      	sxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da14      	bge.n	8006820 <f_read+0x182>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006800:	429a      	cmp	r2, r3
 8006802:	d90d      	bls.n	8006820 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	025b      	lsls	r3, r3, #9
 800680e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006810:	18d0      	adds	r0, r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3328      	adds	r3, #40	; 0x28
 8006816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681a:	4619      	mov	r1, r3
 800681c:	f7fe fa3c 	bl	8004c98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	025b      	lsls	r3, r3, #9
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006826:	e050      	b.n	80068ca <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	429a      	cmp	r2, r3
 8006830:	d02e      	beq.n	8006890 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	7c1b      	ldrb	r3, [r3, #16]
 8006836:	b25b      	sxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	da18      	bge.n	800686e <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	7858      	ldrb	r0, [r3, #1]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	2301      	movs	r3, #1
 800684c:	f7fd ff56 	bl	80046fc <disk_write>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <f_read+0x1c2>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	745a      	strb	r2, [r3, #17]
 800685c:	2301      	movs	r3, #1
 800685e:	e04d      	b.n	80068fc <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	7c1b      	ldrb	r3, [r3, #16]
 8006864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	7858      	ldrb	r0, [r3, #1]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006878:	2301      	movs	r3, #1
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	f7fd fed4 	bl	8004628 <disk_read>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <f_read+0x1f2>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	745a      	strb	r2, [r3, #17]
 800688c:	2301      	movs	r3, #1
 800688e:	e035      	b.n	80068fc <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80068a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d901      	bls.n	80068b0 <f_read+0x212>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068be:	4413      	add	r3, r2
 80068c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c2:	4619      	mov	r1, r3
 80068c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c6:	f7fe f9e7 	bl	8004c98 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	441a      	add	r2, r3
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	4413      	add	r3, r2
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	441a      	add	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f af0d 	bne.w	8006714 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3738      	adds	r7, #56	; 0x38
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f107 0208 	add.w	r2, r7, #8
 8006912:	4611      	mov	r1, r2
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fcc9 	bl	80062ac <validate>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d168      	bne.n	80069f6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7c1b      	ldrb	r3, [r3, #16]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d062      	beq.n	80069f6 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7c1b      	ldrb	r3, [r3, #16]
 8006934:	b25b      	sxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	da15      	bge.n	8006966 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	7858      	ldrb	r0, [r3, #1]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	2301      	movs	r3, #1
 800694a:	f7fd fed7 	bl	80046fc <disk_write>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <f_sync+0x54>
 8006954:	2301      	movs	r3, #1
 8006956:	e04f      	b.n	80069f8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7c1b      	ldrb	r3, [r3, #16]
 800695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006960:	b2da      	uxtb	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006966:	f7fe f90b 	bl	8004b80 <get_fattime>
 800696a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe fa92 	bl	8004e9e <move_window>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d138      	bne.n	80069f6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	330b      	adds	r3, #11
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	330b      	adds	r3, #11
 8006994:	f042 0220 	orr.w	r2, r2, #32
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	461a      	mov	r2, r3
 80069a6:	68f9      	ldr	r1, [r7, #12]
 80069a8:	f7fe ffb4 	bl	8005914 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f103 021c 	add.w	r2, r3, #28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7fe f941 	bl	8004c40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3316      	adds	r3, #22
 80069c2:	6939      	ldr	r1, [r7, #16]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe f93b 	bl	8004c40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3312      	adds	r3, #18
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe f91a 	bl	8004c0a <st_word>
					fs->wflag = 1;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2201      	movs	r2, #1
 80069da:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe fa8a 	bl	8004ef8 <sync_fs>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff7b 	bl	8006904 <f_sync>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10e      	bne.n	8006a36 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f107 0208 	add.w	r2, r7, #8
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fc43 	bl	80062ac <validate>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006a44:	f000 fe36 	bl	80076b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006a48:	f000 f854 	bl	8006af4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006a4c:	f000 fabe 	bl	8006fcc <MX_GPIO_Init>
	MX_RTC_Init();
 8006a50:	f000 f8d0 	bl	8006bf4 <MX_RTC_Init>
	MX_SPI1_Init();
 8006a54:	f000 f932 	bl	8006cbc <MX_SPI1_Init>
	MX_TIM2_Init();
 8006a58:	f000 f966 	bl	8006d28 <MX_TIM2_Init>
	MX_TIM3_Init();
 8006a5c:	f000 f9f0 	bl	8006e40 <MX_TIM3_Init>
	MX_TIM4_Init();
 8006a60:	f000 fa3c 	bl	8006edc <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8006a64:	f000 fa88 	bl	8006f78 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8006a68:	481d      	ldr	r0, [pc, #116]	; (8006ae0 <main+0xa0>)
 8006a6a:	f002 fee4 	bl	8009836 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	481b      	ldr	r0, [pc, #108]	; (8006ae0 <main+0xa0>)
 8006a72:	f002 ff39 	bl	80098e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8006a76:	2104      	movs	r1, #4
 8006a78:	4819      	ldr	r0, [pc, #100]	; (8006ae0 <main+0xa0>)
 8006a7a:	f002 ff35 	bl	80098e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006a7e:	2108      	movs	r1, #8
 8006a80:	4817      	ldr	r0, [pc, #92]	; (8006ae0 <main+0xa0>)
 8006a82:	f002 ff31 	bl	80098e8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8006a86:	4817      	ldr	r0, [pc, #92]	; (8006ae4 <main+0xa4>)
 8006a88:	f002 fed5 	bl	8009836 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8006a8c:	4816      	ldr	r0, [pc, #88]	; (8006ae8 <main+0xa8>)
 8006a8e:	f002 feae 	bl	80097ee <HAL_TIM_Base_Start>

	RGB_Init();
 8006a92:	f7fc fcaf 	bl	80033f4 <RGB_Init>
	LCD_Init();
 8006a96:	f7fa fbdf 	bl	8001258 <LCD_Init>
	THS_Init();
 8006a9a:	f7fd f925 	bl	8003ce8 <THS_Init>
	SD_Init();
 8006a9e:	f7fc ff7f 	bl	80039a0 <SD_Init>
	HTTP_Init();
 8006aa2:	f7fa fa11 	bl	8000ec8 <HTTP_Init>
	NET_Init();
 8006aa6:	f7fc f92d 	bl	8002d04 <NET_Init>
	MENU_Init();
 8006aaa:	f7fb f90d 	bl	8001cc8 <MENU_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8006aae:	f7fa fcb9 	bl	8001424 <LCD_ClearScreen>

	while (1) {
		if (Update && State == ST_Clock) {
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <main+0xac>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d008      	beq.n	8006acc <main+0x8c>
 8006aba:	4b0d      	ldr	r3, [pc, #52]	; (8006af0 <main+0xb0>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d104      	bne.n	8006acc <main+0x8c>
			MENU_Clock();
 8006ac2:	f7fb fe13 	bl	80026ec <MENU_Clock>
			Update = false;
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <main+0xac>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
		}

		if (MENU_HandleKeys()) {
 8006acc:	f7fb fe4c 	bl	8002768 <MENU_HandleKeys>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0ed      	beq.n	8006ab2 <main+0x72>
			Update = true;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <main+0xac>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
		if (Update && State == ST_Clock) {
 8006adc:	e7e9      	b.n	8006ab2 <main+0x72>
 8006ade:	bf00      	nop
 8006ae0:	200035c4 	.word	0x200035c4
 8006ae4:	20003508 	.word	0x20003508
 8006ae8:	20003488 	.word	0x20003488
 8006aec:	20000059 	.word	0x20000059
 8006af0:	20003549 	.word	0x20003549

08006af4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b098      	sub	sp, #96	; 0x60
 8006af8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006afe:	2230      	movs	r2, #48	; 0x30
 8006b00:	2100      	movs	r1, #0
 8006b02:	4618      	mov	r0, r3
 8006b04:	f004 fdfe 	bl	800b704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006b08:	f107 031c 	add.w	r3, r7, #28
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]
 8006b2a:	4b2f      	ldr	r3, [pc, #188]	; (8006be8 <SystemClock_Config+0xf4>)
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <SystemClock_Config+0xf4>)
 8006b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b34:	6413      	str	r3, [r2, #64]	; 0x40
 8006b36:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <SystemClock_Config+0xf4>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b42:	2300      	movs	r3, #0
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <SystemClock_Config+0xf8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a28      	ldr	r2, [pc, #160]	; (8006bec <SystemClock_Config+0xf8>)
 8006b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b26      	ldr	r3, [pc, #152]	; (8006bec <SystemClock_Config+0xf8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b70:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8006b72:	2304      	movs	r3, #4
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 8006b76:	2348      	movs	r3, #72	; 0x48
 8006b78:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 f95a 	bl	8007e40 <HAL_RCC_OscConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <SystemClock_Config+0xa2>
		Error_Handler();
 8006b92:	f000 fb5d 	bl	8007250 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006b96:	230f      	movs	r3, #15
 8006b98:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006bac:	f107 031c 	add.w	r3, r7, #28
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fbb4 	bl	8008320 <HAL_RCC_ClockConfig>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <SystemClock_Config+0xce>
		Error_Handler();
 8006bbe:	f000 fb47 	bl	8007250 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <SystemClock_Config+0xfc>)
 8006bc8:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 fd98 	bl	8008704 <HAL_RCCEx_PeriphCLKConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <SystemClock_Config+0xea>
		Error_Handler();
 8006bda:	f000 fb39 	bl	8007250 <Error_Handler>
	}
}
 8006bde:	bf00      	nop
 8006be0:	3760      	adds	r7, #96	; 0x60
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40023800 	.word	0x40023800
 8006bec:	40007000 	.word	0x40007000
 8006bf0:	00100300 	.word	0x00100300

08006bf4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8006bfa:	1d3b      	adds	r3, r7, #4
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	609a      	str	r2, [r3, #8]
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8006c08:	2300      	movs	r3, #0
 8006c0a:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8006c0c:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <MX_RTC_Init+0xc4>)
 8006c10:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006c12:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 8006c18:	4b26      	ldr	r3, [pc, #152]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c1a:	227d      	movs	r2, #125	; 0x7d
 8006c1c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 4000;
 8006c1e:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c20:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006c24:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006c26:	4b23      	ldr	r3, [pc, #140]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006c2c:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006c32:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8006c38:	481e      	ldr	r0, [pc, #120]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c3a:	f001 fe45 	bl	80088c8 <HAL_RTC_Init>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <MX_RTC_Init+0x54>
		Error_Handler();
 8006c44:	f000 fb04 	bl	8007250 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8006c5c:	1d3b      	adds	r3, r7, #4
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4619      	mov	r1, r3
 8006c62:	4814      	ldr	r0, [pc, #80]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c64:	f001 fec1 	bl	80089ea <HAL_RTC_SetTime>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <MX_RTC_Init+0x7e>
		Error_Handler();
 8006c6e:	f000 faef 	bl	8007250 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8006c72:	2303      	movs	r3, #3
 8006c74:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8006c76:	2304      	movs	r3, #4
 8006c78:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x8;
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8006c7e:	2320      	movs	r3, #32
 8006c80:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8006c82:	463b      	mov	r3, r7
 8006c84:	2201      	movs	r2, #1
 8006c86:	4619      	mov	r1, r3
 8006c88:	480a      	ldr	r0, [pc, #40]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c8a:	f001 ffc9 	bl	8008c20 <HAL_RTC_SetDate>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <MX_RTC_Init+0xa4>
		Error_Handler();
 8006c94:	f000 fadc 	bl	8007250 <Error_Handler>
	}
	/** Enable Calibrartion
	 */
	if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK) {
 8006c98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006c9c:	4805      	ldr	r0, [pc, #20]	; (8006cb4 <MX_RTC_Init+0xc0>)
 8006c9e:	f002 f945 	bl	8008f2c <HAL_RTCEx_SetCalibrationOutPut>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <MX_RTC_Init+0xb8>
		Error_Handler();
 8006ca8:	f000 fad2 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8006cac:	bf00      	nop
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	2000354c 	.word	0x2000354c
 8006cb8:	40002800 	.word	0x40002800

08006cbc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8006cc0:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <MX_SPI1_Init+0x68>)
 8006cc4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8006cc6:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ccc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006cce:	4b14      	ldr	r3, [pc, #80]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006cd4:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cda:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ce6:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cf0:	2218      	movs	r2, #24
 8006cf2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006cf4:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006d08:	220a      	movs	r2, #10
 8006d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8006d0c:	4804      	ldr	r0, [pc, #16]	; (8006d20 <MX_SPI1_Init+0x64>)
 8006d0e:	f002 f94f 	bl	8008fb0 <HAL_SPI_Init>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <MX_SPI1_Init+0x60>
		Error_Handler();
 8006d18:	f000 fa9a 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	2000356c 	.word	0x2000356c
 8006d24:	40013000 	.word	0x40013000

08006d28 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08e      	sub	sp, #56	; 0x38
 8006d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	605a      	str	r2, [r3, #4]
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006d3c:	f107 0320 	add.w	r3, r7, #32
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8006d46:	1d3b      	adds	r3, r7, #4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	611a      	str	r2, [r3, #16]
 8006d54:	615a      	str	r2, [r3, #20]
 8006d56:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8006d58:	4b38      	ldr	r3, [pc, #224]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006d5e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d62:	2247      	movs	r2, #71	; 0x47
 8006d64:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8006d6c:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006d72:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d74:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d7a:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8006d80:	482e      	ldr	r0, [pc, #184]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d82:	f002 fd09 	bl	8009798 <HAL_TIM_Base_Init>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <MX_TIM2_Init+0x68>
		Error_Handler();
 8006d8c:	f000 fa60 	bl	8007250 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8006d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4827      	ldr	r0, [pc, #156]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006d9e:	f002 ffaf 	bl	8009d00 <HAL_TIM_ConfigClockSource>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_TIM2_Init+0x84>
		Error_Handler();
 8006da8:	f000 fa52 	bl	8007250 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8006dac:	4823      	ldr	r0, [pc, #140]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006dae:	f002 fd66 	bl	800987e <HAL_TIM_PWM_Init>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_TIM2_Init+0x94>
		Error_Handler();
 8006db8:	f000 fa4a 	bl	8007250 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8006dc4:	f107 0320 	add.w	r3, r7, #32
 8006dc8:	4619      	mov	r1, r3
 8006dca:	481c      	ldr	r0, [pc, #112]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006dcc:	f003 fb88 	bl	800a4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8006dd6:	f000 fa3b 	bl	8007250 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006dda:	2360      	movs	r3, #96	; 0x60
 8006ddc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8006dea:	1d3b      	adds	r3, r7, #4
 8006dec:	2200      	movs	r2, #0
 8006dee:	4619      	mov	r1, r3
 8006df0:	4812      	ldr	r0, [pc, #72]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006df2:	f002 febf 	bl	8009b74 <HAL_TIM_PWM_ConfigChannel>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8006dfc:	f000 fa28 	bl	8007250 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	2204      	movs	r2, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	480d      	ldr	r0, [pc, #52]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006e08:	f002 feb4 	bl	8009b74 <HAL_TIM_PWM_ConfigChannel>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8006e12:	f000 fa1d 	bl	8007250 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8006e16:	1d3b      	adds	r3, r7, #4
 8006e18:	2208      	movs	r2, #8
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4807      	ldr	r0, [pc, #28]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006e1e:	f002 fea9 	bl	8009b74 <HAL_TIM_PWM_ConfigChannel>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8006e28:	f000 fa12 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8006e2c:	4803      	ldr	r0, [pc, #12]	; (8006e3c <MX_TIM2_Init+0x114>)
 8006e2e:	f000 faf7 	bl	8007420 <HAL_TIM_MspPostInit>

}
 8006e32:	bf00      	nop
 8006e34:	3738      	adds	r7, #56	; 0x38
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200035c4 	.word	0x200035c4

08006e40 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006e46:	f107 0308 	add.w	r3, r7, #8
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006e54:	463b      	mov	r3, r7
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8006e5c:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <MX_TIM3_Init+0x98>)
 8006e60:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e64:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8006e68:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 8006e70:	4b18      	ldr	r3, [pc, #96]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e72:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8006e76:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006e78:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e7e:	4b15      	ldr	r3, [pc, #84]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8006e84:	4813      	ldr	r0, [pc, #76]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006e86:	f002 fc87 	bl	8009798 <HAL_TIM_Base_Init>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <MX_TIM3_Init+0x54>
		Error_Handler();
 8006e90:	f000 f9de 	bl	8007250 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e98:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	480c      	ldr	r0, [pc, #48]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006ea2:	f002 ff2d 	bl	8009d00 <HAL_TIM_ConfigClockSource>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <MX_TIM3_Init+0x70>
		Error_Handler();
 8006eac:	f000 f9d0 	bl	8007250 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8006eb8:	463b      	mov	r3, r7
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <MX_TIM3_Init+0x94>)
 8006ebe:	f003 fb0f 	bl	800a4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8006ec8:	f000 f9c2 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8006ecc:	bf00      	nop
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	20003508 	.word	0x20003508
 8006ed8:	40000400 	.word	0x40000400

08006edc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	609a      	str	r2, [r3, #8]
 8006eee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006efa:	4a1e      	ldr	r2, [pc, #120]	; (8006f74 <MX_TIM4_Init+0x98>)
 8006efc:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8006efe:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f00:	2247      	movs	r2, #71	; 0x47
 8006f02:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 8006f0a:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f10:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f12:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f18:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8006f1e:	4814      	ldr	r0, [pc, #80]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f20:	f002 fc3a 	bl	8009798 <HAL_TIM_Base_Init>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <MX_TIM4_Init+0x52>
		Error_Handler();
 8006f2a:	f000 f991 	bl	8007250 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f32:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8006f34:	f107 0308 	add.w	r3, r7, #8
 8006f38:	4619      	mov	r1, r3
 8006f3a:	480d      	ldr	r0, [pc, #52]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f3c:	f002 fee0 	bl	8009d00 <HAL_TIM_ConfigClockSource>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <MX_TIM4_Init+0x6e>
		Error_Handler();
 8006f46:	f000 f983 	bl	8007250 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8006f52:	463b      	mov	r3, r7
 8006f54:	4619      	mov	r1, r3
 8006f56:	4806      	ldr	r0, [pc, #24]	; (8006f70 <MX_TIM4_Init+0x94>)
 8006f58:	f003 fac2 	bl	800a4e0 <HAL_TIMEx_MasterConfigSynchronization>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8006f62:	f000 f975 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8006f66:	bf00      	nop
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20003488 	.word	0x20003488
 8006f74:	40000800 	.word	0x40000800

08006f78 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f7e:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <MX_USART3_UART_Init+0x50>)
 8006f80:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006f88:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8006fae:	4805      	ldr	r0, [pc, #20]	; (8006fc4 <MX_USART3_UART_Init+0x4c>)
 8006fb0:	f003 fb26 	bl	800a600 <HAL_UART_Init>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8006fba:	f000 f949 	bl	8007250 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200034c8 	.word	0x200034c8
 8006fc8:	40004800 	.word	0x40004800

08006fcc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08c      	sub	sp, #48	; 0x30
 8006fd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8006fd2:	f107 031c 	add.w	r3, r7, #28
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	605a      	str	r2, [r3, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	60da      	str	r2, [r3, #12]
 8006fe0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	4b67      	ldr	r3, [pc, #412]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	4a66      	ldr	r2, [pc, #408]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8006fec:	f043 0310 	orr.w	r3, r3, #16
 8006ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff2:	4b64      	ldr	r3, [pc, #400]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	4b60      	ldr	r3, [pc, #384]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	4a5f      	ldr	r2, [pc, #380]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007008:	f043 0304 	orr.w	r3, r3, #4
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
 800700e:	4b5d      	ldr	r3, [pc, #372]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	4b59      	ldr	r3, [pc, #356]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	4a58      	ldr	r2, [pc, #352]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007028:	6313      	str	r3, [r2, #48]	; 0x30
 800702a:	4b56      	ldr	r3, [pc, #344]	; (8007184 <MX_GPIO_Init+0x1b8>)
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	4b52      	ldr	r3, [pc, #328]	; (8007184 <MX_GPIO_Init+0x1b8>)
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703e:	4a51      	ldr	r2, [pc, #324]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	6313      	str	r3, [r2, #48]	; 0x30
 8007046:	4b4f      	ldr	r3, [pc, #316]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
 8007056:	4b4b      	ldr	r3, [pc, #300]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705a:	4a4a      	ldr	r2, [pc, #296]	; (8007184 <MX_GPIO_Init+0x1b8>)
 800705c:	f043 0308 	orr.w	r3, r3, #8
 8007060:	6313      	str	r3, [r2, #48]	; 0x30
 8007062:	4b48      	ldr	r3, [pc, #288]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	4b44      	ldr	r3, [pc, #272]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	4a43      	ldr	r2, [pc, #268]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007078:	f043 0302 	orr.w	r3, r3, #2
 800707c:	6313      	str	r3, [r2, #48]	; 0x30
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <MX_GPIO_Init+0x1b8>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800708a:	2200      	movs	r2, #0
 800708c:	217f      	movs	r1, #127	; 0x7f
 800708e:	483e      	ldr	r0, [pc, #248]	; (8007188 <MX_GPIO_Init+0x1bc>)
 8007090:	f000 fe8a 	bl	8007da8 <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 8007094:	2200      	movs	r2, #0
 8007096:	f248 0103 	movw	r1, #32771	; 0x8003
 800709a:	483c      	ldr	r0, [pc, #240]	; (800718c <MX_GPIO_Init+0x1c0>)
 800709c:	f000 fe84 	bl	8007da8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80070a6:	483a      	ldr	r0, [pc, #232]	; (8007190 <MX_GPIO_Init+0x1c4>)
 80070a8:	f000 fe7e 	bl	8007da8 <HAL_GPIO_WritePin>
	STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 80070ac:	237f      	movs	r3, #127	; 0x7f
 80070ae:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070b0:	2301      	movs	r3, #1
 80070b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80070b4:	2302      	movs	r3, #2
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80070bc:	f107 031c 	add.w	r3, r7, #28
 80070c0:	4619      	mov	r1, r3
 80070c2:	4831      	ldr	r0, [pc, #196]	; (8007188 <MX_GPIO_Init+0x1bc>)
 80070c4:	f000 fcbe 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 80070c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070ce:	2301      	movs	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80070d2:	2302      	movs	r3, #2
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d6:	2300      	movs	r3, #0
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 80070da:	f107 031c 	add.w	r3, r7, #28
 80070de:	4619      	mov	r1, r3
 80070e0:	482a      	ldr	r0, [pc, #168]	; (800718c <MX_GPIO_Init+0x1c0>)
 80070e2:	f000 fcaf 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 80070e6:	2303      	movs	r3, #3
 80070e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070ea:	2301      	movs	r3, #1
 80070ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070ee:	2301      	movs	r3, #1
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070f2:	2300      	movs	r3, #0
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070f6:	f107 031c 	add.w	r3, r7, #28
 80070fa:	4619      	mov	r1, r3
 80070fc:	4823      	ldr	r0, [pc, #140]	; (800718c <MX_GPIO_Init+0x1c0>)
 80070fe:	f000 fca1 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 8007102:	2301      	movs	r3, #1
 8007104:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007106:	4b23      	ldr	r3, [pc, #140]	; (8007194 <MX_GPIO_Init+0x1c8>)
 8007108:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800710a:	2302      	movs	r3, #2
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 800710e:	f107 031c 	add.w	r3, r7, #28
 8007112:	4619      	mov	r1, r3
 8007114:	4820      	ldr	r0, [pc, #128]	; (8007198 <MX_GPIO_Init+0x1cc>)
 8007116:	f000 fc95 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : MENU_Btn1_Pin */
	GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 800711a:	2380      	movs	r3, #128	; 0x80
 800711c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800711e:	2300      	movs	r3, #0
 8007120:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007122:	2301      	movs	r3, #1
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 8007126:	f107 031c 	add.w	r3, r7, #28
 800712a:	4619      	mov	r1, r3
 800712c:	4816      	ldr	r0, [pc, #88]	; (8007188 <MX_GPIO_Init+0x1bc>)
 800712e:	f000 fc89 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
	GPIO_InitStruct.Pin = MENU_Btn2_Pin | MENU_Btn3_Pin | MENU_Btn4_Pin;
 8007132:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007136:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007138:	2300      	movs	r3, #0
 800713a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800713c:	2302      	movs	r3, #2
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007140:	f107 031c 	add.w	r3, r7, #28
 8007144:	4619      	mov	r1, r3
 8007146:	4810      	ldr	r0, [pc, #64]	; (8007188 <MX_GPIO_Init+0x1bc>)
 8007148:	f000 fc7c 	bl	8007a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 800714c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007150:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007152:	2301      	movs	r3, #1
 8007154:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715a:	2300      	movs	r3, #0
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800715e:	f107 031c 	add.w	r3, r7, #28
 8007162:	4619      	mov	r1, r3
 8007164:	480a      	ldr	r0, [pc, #40]	; (8007190 <MX_GPIO_Init+0x1c4>)
 8007166:	f000 fc6d 	bl	8007a44 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2101      	movs	r1, #1
 800716e:	2006      	movs	r0, #6
 8007170:	f000 fc0f 	bl	8007992 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007174:	2006      	movs	r0, #6
 8007176:	f000 fc28 	bl	80079ca <HAL_NVIC_EnableIRQ>

}
 800717a:	bf00      	nop
 800717c:	3730      	adds	r7, #48	; 0x30
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023800 	.word	0x40023800
 8007188:	40021000 	.word	0x40021000
 800718c:	40020800 	.word	0x40020800
 8007190:	40020c00 	.word	0x40020c00
 8007194:	10110000 	.word	0x10110000
 8007198:	40020000 	.word	0x40020000

0800719c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ac:	d107      	bne.n	80071be <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 80071ae:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fb96 	bl	80038e4 <RGB_SetMode>
		THS_ErrorClock();
 80071b8:	f7fc ff68 	bl	800408c <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
		Update = true;
	}
}
 80071bc:	e00d      	b.n	80071da <HAL_TIM_PeriodElapsedCallback+0x3e>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d108      	bne.n	80071da <HAL_TIM_PeriodElapsedCallback+0x3e>
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <HAL_TIM_PeriodElapsedCallback+0x50>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PeriodElapsedCallback+0x3e>
		LCD_BackgroundOff();
 80071d0:	f7fa f91c 	bl	800140c <LCD_BackgroundOff>
		Update = true;
 80071d4:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	701a      	strb	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000262 	.word	0x20000262
 80071e8:	40000400 	.word	0x40000400
 80071ec:	20003549 	.word	0x20003549
 80071f0:	20000059 	.word	0x20000059

080071f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d113      	bne.n	800722c <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 8007204:	2101      	movs	r1, #1
 8007206:	480b      	ldr	r0, [pc, #44]	; (8007234 <HAL_GPIO_EXTI_Callback+0x40>)
 8007208:	f000 fdb6 	bl	8007d78 <HAL_GPIO_ReadPin>
 800720c:	4603      	mov	r3, r0
 800720e:	2b01      	cmp	r3, #1
 8007210:	d10c      	bne.n	800722c <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9) {
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <HAL_GPIO_EXTI_Callback+0x44>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	4b07      	ldr	r3, [pc, #28]	; (8007238 <HAL_GPIO_EXTI_Callback+0x44>)
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_GPIO_EXTI_Callback+0x44>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b09      	cmp	r3, #9
 8007224:	d902      	bls.n	800722c <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 8007226:	4b04      	ldr	r3, [pc, #16]	; (8007238 <HAL_GPIO_EXTI_Callback+0x44>)
 8007228:	2200      	movs	r2, #0
 800722a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40020000 	.word	0x40020000
 8007238:	20000262 	.word	0x20000262

0800723c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	NET_HandleUART_IT();
 8007244:	f7fb ffde 	bl	8003204 <NET_HandleUART_IT>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <HAL_MspInit+0x4c>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	4a0f      	ldr	r2, [pc, #60]	; (80072ac <HAL_MspInit+0x4c>)
 8007270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007274:	6453      	str	r3, [r2, #68]	; 0x44
 8007276:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <HAL_MspInit+0x4c>)
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007282:	2300      	movs	r3, #0
 8007284:	603b      	str	r3, [r7, #0]
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <HAL_MspInit+0x4c>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	4a08      	ldr	r2, [pc, #32]	; (80072ac <HAL_MspInit+0x4c>)
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007290:	6413      	str	r3, [r2, #64]	; 0x40
 8007292:	4b06      	ldr	r3, [pc, #24]	; (80072ac <HAL_MspInit+0x4c>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <HAL_RTC_MspInit+0x24>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d102      	bne.n	80072c8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RTC_MspInit+0x28>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40002800 	.word	0x40002800
 80072d8:	42470e3c 	.word	0x42470e3c

080072dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a19      	ldr	r2, [pc, #100]	; (8007360 <HAL_SPI_MspInit+0x84>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d12b      	bne.n	8007356 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <HAL_SPI_MspInit+0x88>)
 8007304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007306:	4a17      	ldr	r2, [pc, #92]	; (8007364 <HAL_SPI_MspInit+0x88>)
 8007308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800730c:	6453      	str	r3, [r2, #68]	; 0x44
 800730e:	4b15      	ldr	r3, [pc, #84]	; (8007364 <HAL_SPI_MspInit+0x88>)
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	4b11      	ldr	r3, [pc, #68]	; (8007364 <HAL_SPI_MspInit+0x88>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <HAL_SPI_MspInit+0x88>)
 8007324:	f043 0302 	orr.w	r3, r3, #2
 8007328:	6313      	str	r3, [r2, #48]	; 0x30
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <HAL_SPI_MspInit+0x88>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8007336:	2338      	movs	r3, #56	; 0x38
 8007338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800733a:	2302      	movs	r3, #2
 800733c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007342:	2303      	movs	r3, #3
 8007344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007346:	2305      	movs	r3, #5
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800734a:	f107 0314 	add.w	r3, r7, #20
 800734e:	4619      	mov	r1, r3
 8007350:	4805      	ldr	r0, [pc, #20]	; (8007368 <HAL_SPI_MspInit+0x8c>)
 8007352:	f000 fb77 	bl	8007a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007356:	bf00      	nop
 8007358:	3728      	adds	r7, #40	; 0x28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40013000 	.word	0x40013000
 8007364:	40023800 	.word	0x40023800
 8007368:	40020400 	.word	0x40020400

0800736c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d116      	bne.n	80073ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a23      	ldr	r2, [pc, #140]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
 800738e:	4b21      	ldr	r3, [pc, #132]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800739a:	2200      	movs	r2, #0
 800739c:	2102      	movs	r1, #2
 800739e:	201c      	movs	r0, #28
 80073a0:	f000 faf7 	bl	8007992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80073a4:	201c      	movs	r0, #28
 80073a6:	f000 fb10 	bl	80079ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80073aa:	e02e      	b.n	800740a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <HAL_TIM_Base_MspInit+0xac>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d116      	bne.n	80073e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 80073c0:	f043 0302 	orr.w	r3, r3, #2
 80073c4:	6413      	str	r3, [r2, #64]	; 0x40
 80073c6:	4b13      	ldr	r3, [pc, #76]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80073d2:	2200      	movs	r2, #0
 80073d4:	2103      	movs	r1, #3
 80073d6:	201d      	movs	r0, #29
 80073d8:	f000 fadb 	bl	8007992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80073dc:	201d      	movs	r0, #29
 80073de:	f000 faf4 	bl	80079ca <HAL_NVIC_EnableIRQ>
}
 80073e2:	e012      	b.n	800740a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a0c      	ldr	r2, [pc, #48]	; (800741c <HAL_TIM_Base_MspInit+0xb0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	6413      	str	r3, [r2, #64]	; 0x40
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_TIM_Base_MspInit+0xa8>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68fb      	ldr	r3, [r7, #12]
}
 800740a:	bf00      	nop
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40023800 	.word	0x40023800
 8007418:	40000400 	.word	0x40000400
 800741c:	40000800 	.word	0x40000800

08007420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007440:	d11d      	bne.n	800747e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <HAL_TIM_MspPostInit+0x68>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <HAL_TIM_MspPostInit+0x68>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <HAL_TIM_MspPostInit+0x68>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 800745e:	2326      	movs	r3, #38	; 0x26
 8007460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007462:	2302      	movs	r3, #2
 8007464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746a:	2300      	movs	r3, #0
 800746c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	4619      	mov	r1, r3
 8007478:	4804      	ldr	r0, [pc, #16]	; (800748c <HAL_TIM_MspPostInit+0x6c>)
 800747a:	f000 fae3 	bl	8007a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800747e:	bf00      	nop
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800
 800748c:	40020000 	.word	0x40020000

08007490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <HAL_UART_MspInit+0x94>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d134      	bne.n	800751c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074c0:	6413      	str	r3, [r2, #64]	; 0x40
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074d8:	f043 0304 	orr.w	r3, r3, #4
 80074dc:	6313      	str	r3, [r2, #48]	; 0x30
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <HAL_UART_MspInit+0x98>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 80074ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80074ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f0:	2302      	movs	r3, #2
 80074f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f8:	2303      	movs	r3, #3
 80074fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80074fc:	2307      	movs	r3, #7
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	4619      	mov	r1, r3
 8007506:	4809      	ldr	r0, [pc, #36]	; (800752c <HAL_UART_MspInit+0x9c>)
 8007508:	f000 fa9c 	bl	8007a44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800750c:	2200      	movs	r2, #0
 800750e:	2101      	movs	r1, #1
 8007510:	2027      	movs	r0, #39	; 0x27
 8007512:	f000 fa3e 	bl	8007992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007516:	2027      	movs	r0, #39	; 0x27
 8007518:	f000 fa57 	bl	80079ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800751c:	bf00      	nop
 800751e:	3728      	adds	r7, #40	; 0x28
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40004800 	.word	0x40004800
 8007528:	40023800 	.word	0x40023800
 800752c:	40020800 	.word	0x40020800

08007530 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800753e:	b480      	push	{r7}
 8007540:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8007542:	e7fe      	b.n	8007542 <HardFault_Handler+0x4>

08007544 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8007548:	e7fe      	b.n	8007548 <MemManage_Handler+0x4>

0800754a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800754a:	b480      	push	{r7}
 800754c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800754e:	e7fe      	b.n	800754e <BusFault_Handler+0x4>

08007550 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8007554:	e7fe      	b.n	8007554 <UsageFault_Handler+0x4>

08007556 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8007556:	b480      	push	{r7}
 8007558:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8007568:	bf00      	nop
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8007572:	b480      	push	{r7}
 8007574:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8007576:	bf00      	nop
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8007584:	f7fd fae4 	bl	8004b50 <sdcard_systick_timerproc>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007588:	f000 f8e6 	bl	8007758 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800758c:	bf00      	nop
 800758e:	bd80      	pop	{r7, pc}

08007590 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007594:	2001      	movs	r0, #1
 8007596:	f000 fc3b 	bl	8007e10 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80075a4:	4802      	ldr	r0, [pc, #8]	; (80075b0 <TIM2_IRQHandler+0x10>)
 80075a6:	f002 f9dd 	bl	8009964 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200035c4 	.word	0x200035c4

080075b4 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80075b8:	4802      	ldr	r0, [pc, #8]	; (80075c4 <TIM3_IRQHandler+0x10>)
 80075ba:	f002 f9d3 	bl	8009964 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 80075be:	bf00      	nop
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20003508 	.word	0x20003508

080075c8 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 80075cc:	4802      	ldr	r0, [pc, #8]	; (80075d8 <USART3_IRQHandler+0x10>)
 80075ce:	f003 fa51 	bl	800aa74 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	200034c8 	.word	0x200034c8

080075dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80075e4:	4b11      	ldr	r3, [pc, #68]	; (800762c <_sbrk+0x50>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <_sbrk+0x16>
		heap_end = &end;
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <_sbrk+0x50>)
 80075ee:	4a10      	ldr	r2, [pc, #64]	; (8007630 <_sbrk+0x54>)
 80075f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80075f2:	4b0e      	ldr	r3, [pc, #56]	; (800762c <_sbrk+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <_sbrk+0x50>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	466a      	mov	r2, sp
 8007602:	4293      	cmp	r3, r2
 8007604:	d907      	bls.n	8007616 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007606:	f004 f853 	bl	800b6b0 <__errno>
 800760a:	4602      	mov	r2, r0
 800760c:	230c      	movs	r3, #12
 800760e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007610:	f04f 33ff 	mov.w	r3, #4294967295
 8007614:	e006      	b.n	8007624 <_sbrk+0x48>
	}

	heap_end += incr;
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <_sbrk+0x50>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	4a03      	ldr	r2, [pc, #12]	; (800762c <_sbrk+0x50>)
 8007620:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007622:	68fb      	ldr	r3, [r7, #12]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000264 	.word	0x20000264
 8007630:	20003610 	.word	0x20003610

08007634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007638:	4b08      	ldr	r3, [pc, #32]	; (800765c <SystemInit+0x28>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	4a07      	ldr	r2, [pc, #28]	; (800765c <SystemInit+0x28>)
 8007640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <SystemInit+0x28>)
 800764a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800764e:	609a      	str	r2, [r3, #8]
#endif
}
 8007650:	bf00      	nop
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	e000ed00 	.word	0xe000ed00

08007660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007698 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007664:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007666:	e003      	b.n	8007670 <LoopCopyDataInit>

08007668 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007668:	4b0c      	ldr	r3, [pc, #48]	; (800769c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800766a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800766c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800766e:	3104      	adds	r1, #4

08007670 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007670:	480b      	ldr	r0, [pc, #44]	; (80076a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007674:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007676:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007678:	d3f6      	bcc.n	8007668 <CopyDataInit>
  ldr  r2, =_sbss
 800767a:	4a0b      	ldr	r2, [pc, #44]	; (80076a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800767c:	e002      	b.n	8007684 <LoopFillZerobss>

0800767e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800767e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007680:	f842 3b04 	str.w	r3, [r2], #4

08007684 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007684:	4b09      	ldr	r3, [pc, #36]	; (80076ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007686:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007688:	d3f9      	bcc.n	800767e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800768a:	f7ff ffd3 	bl	8007634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800768e:	f004 f815 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007692:	f7ff f9d5 	bl	8006a40 <main>
  bx  lr    
 8007696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007698:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800769c:	0800df60 	.word	0x0800df60
  ldr  r0, =_sdata
 80076a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80076a4:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 80076a8:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 80076ac:	2000360c 	.word	0x2000360c

080076b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076b0:	e7fe      	b.n	80076b0 <ADC_IRQHandler>
	...

080076b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076b8:	4b0e      	ldr	r3, [pc, #56]	; (80076f4 <HAL_Init+0x40>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <HAL_Init+0x40>)
 80076be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <HAL_Init+0x40>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a0a      	ldr	r2, [pc, #40]	; (80076f4 <HAL_Init+0x40>)
 80076ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076d0:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HAL_Init+0x40>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a07      	ldr	r2, [pc, #28]	; (80076f4 <HAL_Init+0x40>)
 80076d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076dc:	2003      	movs	r0, #3
 80076de:	f000 f94d 	bl	800797c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076e2:	2000      	movs	r0, #0
 80076e4:	f000 f808 	bl	80076f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076e8:	f7ff fdba 	bl	8007260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40023c00 	.word	0x40023c00

080076f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007700:	4b12      	ldr	r3, [pc, #72]	; (800774c <HAL_InitTick+0x54>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <HAL_InitTick+0x58>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800770e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f965 	bl	80079e6 <HAL_SYSTICK_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e00e      	b.n	8007744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d80a      	bhi.n	8007742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800772c:	2200      	movs	r2, #0
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	f000 f92d 	bl	8007992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007738:	4a06      	ldr	r2, [pc, #24]	; (8007754 <HAL_InitTick+0x5c>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	2000005c 	.word	0x2000005c
 8007750:	20000064 	.word	0x20000064
 8007754:	20000060 	.word	0x20000060

08007758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_IncTick+0x20>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_IncTick+0x24>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4413      	add	r3, r2
 8007768:	4a04      	ldr	r2, [pc, #16]	; (800777c <HAL_IncTick+0x24>)
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000064 	.word	0x20000064
 800777c:	20003604 	.word	0x20003604

08007780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return uwTick;
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <HAL_GetTick+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20003604 	.word	0x20003604

08007798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077a0:	f7ff ffee 	bl	8007780 <HAL_GetTick>
 80077a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d005      	beq.n	80077be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_Delay+0x40>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80077be:	bf00      	nop
 80077c0:	f7ff ffde 	bl	8007780 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d8f7      	bhi.n	80077c0 <HAL_Delay+0x28>
  {
  }
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	20000064 	.word	0x20000064

080077dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <__NVIC_SetPriorityGrouping+0x44>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077f8:	4013      	ands	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800780e:	4a04      	ldr	r2, [pc, #16]	; (8007820 <__NVIC_SetPriorityGrouping+0x44>)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	60d3      	str	r3, [r2, #12]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	e000ed00 	.word	0xe000ed00

08007824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <__NVIC_GetPriorityGrouping+0x18>)
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	0a1b      	lsrs	r3, r3, #8
 800782e:	f003 0307 	and.w	r3, r3, #7
}
 8007832:	4618      	mov	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	e000ed00 	.word	0xe000ed00

08007840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800784a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784e:	2b00      	cmp	r3, #0
 8007850:	db0b      	blt.n	800786a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	f003 021f 	and.w	r2, r3, #31
 8007858:	4907      	ldr	r1, [pc, #28]	; (8007878 <__NVIC_EnableIRQ+0x38>)
 800785a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	2001      	movs	r0, #1
 8007862:	fa00 f202 	lsl.w	r2, r0, r2
 8007866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	e000e100 	.word	0xe000e100

0800787c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788c:	2b00      	cmp	r3, #0
 800788e:	db0a      	blt.n	80078a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	490c      	ldr	r1, [pc, #48]	; (80078c8 <__NVIC_SetPriority+0x4c>)
 8007896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789a:	0112      	lsls	r2, r2, #4
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	440b      	add	r3, r1
 80078a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078a4:	e00a      	b.n	80078bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4908      	ldr	r1, [pc, #32]	; (80078cc <__NVIC_SetPriority+0x50>)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	3b04      	subs	r3, #4
 80078b4:	0112      	lsls	r2, r2, #4
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	440b      	add	r3, r1
 80078ba:	761a      	strb	r2, [r3, #24]
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	e000e100 	.word	0xe000e100
 80078cc:	e000ed00 	.word	0xe000ed00

080078d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f1c3 0307 	rsb	r3, r3, #7
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	bf28      	it	cs
 80078ee:	2304      	movcs	r3, #4
 80078f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3304      	adds	r3, #4
 80078f6:	2b06      	cmp	r3, #6
 80078f8:	d902      	bls.n	8007900 <NVIC_EncodePriority+0x30>
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	3b03      	subs	r3, #3
 80078fe:	e000      	b.n	8007902 <NVIC_EncodePriority+0x32>
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007904:	f04f 32ff 	mov.w	r2, #4294967295
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43da      	mvns	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	401a      	ands	r2, r3
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007918:	f04f 31ff 	mov.w	r1, #4294967295
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	43d9      	mvns	r1, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007928:	4313      	orrs	r3, r2
         );
}
 800792a:	4618      	mov	r0, r3
 800792c:	3724      	adds	r7, #36	; 0x24
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3b01      	subs	r3, #1
 8007944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007948:	d301      	bcc.n	800794e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800794a:	2301      	movs	r3, #1
 800794c:	e00f      	b.n	800796e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800794e:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <SysTick_Config+0x40>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3b01      	subs	r3, #1
 8007954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007956:	210f      	movs	r1, #15
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	f7ff ff8e 	bl	800787c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007960:	4b05      	ldr	r3, [pc, #20]	; (8007978 <SysTick_Config+0x40>)
 8007962:	2200      	movs	r2, #0
 8007964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007966:	4b04      	ldr	r3, [pc, #16]	; (8007978 <SysTick_Config+0x40>)
 8007968:	2207      	movs	r2, #7
 800796a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	e000e010 	.word	0xe000e010

0800797c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ff29 	bl	80077dc <__NVIC_SetPriorityGrouping>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	4603      	mov	r3, r0
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079a4:	f7ff ff3e 	bl	8007824 <__NVIC_GetPriorityGrouping>
 80079a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	6978      	ldr	r0, [r7, #20]
 80079b0:	f7ff ff8e 	bl	80078d0 <NVIC_EncodePriority>
 80079b4:	4602      	mov	r2, r0
 80079b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff5d 	bl	800787c <__NVIC_SetPriority>
}
 80079c2:	bf00      	nop
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	4603      	mov	r3, r0
 80079d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff ff31 	bl	8007840 <__NVIC_EnableIRQ>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff ffa2 	bl	8007938 <SysTick_Config>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d004      	beq.n	8007a1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2280      	movs	r2, #128	; 0x80
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e00c      	b.n	8007a36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2205      	movs	r2, #5
 8007a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0201 	bic.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	e16b      	b.n	8007d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a60:	2201      	movs	r2, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4013      	ands	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f040 815a 	bne.w	8007d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d00b      	beq.n	8007a9e <HAL_GPIO_Init+0x5a>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d007      	beq.n	8007a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a92:	2b11      	cmp	r3, #17
 8007a94:	d003      	beq.n	8007a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2b12      	cmp	r3, #18
 8007a9c:	d130      	bne.n	8007b00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 0201 	and.w	r2, r3, #1
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69ba      	ldr	r2, [r7, #24]
 8007afe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	43db      	mvns	r3, r3
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	4013      	ands	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d003      	beq.n	8007b40 <HAL_GPIO_Init+0xfc>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2b12      	cmp	r3, #18
 8007b3e:	d123      	bne.n	8007b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	08da      	lsrs	r2, r3, #3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3208      	adds	r2, #8
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4013      	ands	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	08da      	lsrs	r2, r3, #3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3208      	adds	r2, #8
 8007b82:	69b9      	ldr	r1, [r7, #24]
 8007b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	2203      	movs	r2, #3
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	43db      	mvns	r3, r3
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 0203 	and.w	r2, r3, #3
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80b4 	beq.w	8007d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	4b5f      	ldr	r3, [pc, #380]	; (8007d4c <HAL_GPIO_Init+0x308>)
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	4a5e      	ldr	r2, [pc, #376]	; (8007d4c <HAL_GPIO_Init+0x308>)
 8007bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8007bda:	4b5c      	ldr	r3, [pc, #368]	; (8007d4c <HAL_GPIO_Init+0x308>)
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007be6:	4a5a      	ldr	r2, [pc, #360]	; (8007d50 <HAL_GPIO_Init+0x30c>)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	089b      	lsrs	r3, r3, #2
 8007bec:	3302      	adds	r3, #2
 8007bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	220f      	movs	r2, #15
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	43db      	mvns	r3, r3
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4013      	ands	r3, r2
 8007c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a51      	ldr	r2, [pc, #324]	; (8007d54 <HAL_GPIO_Init+0x310>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d02b      	beq.n	8007c6a <HAL_GPIO_Init+0x226>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a50      	ldr	r2, [pc, #320]	; (8007d58 <HAL_GPIO_Init+0x314>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d025      	beq.n	8007c66 <HAL_GPIO_Init+0x222>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a4f      	ldr	r2, [pc, #316]	; (8007d5c <HAL_GPIO_Init+0x318>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01f      	beq.n	8007c62 <HAL_GPIO_Init+0x21e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a4e      	ldr	r2, [pc, #312]	; (8007d60 <HAL_GPIO_Init+0x31c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d019      	beq.n	8007c5e <HAL_GPIO_Init+0x21a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a4d      	ldr	r2, [pc, #308]	; (8007d64 <HAL_GPIO_Init+0x320>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_GPIO_Init+0x216>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a4c      	ldr	r2, [pc, #304]	; (8007d68 <HAL_GPIO_Init+0x324>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00d      	beq.n	8007c56 <HAL_GPIO_Init+0x212>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a4b      	ldr	r2, [pc, #300]	; (8007d6c <HAL_GPIO_Init+0x328>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <HAL_GPIO_Init+0x20e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a4a      	ldr	r2, [pc, #296]	; (8007d70 <HAL_GPIO_Init+0x32c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_GPIO_Init+0x20a>
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	e00e      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	e00c      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e00a      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c56:	2305      	movs	r3, #5
 8007c58:	e008      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c5a:	2304      	movs	r3, #4
 8007c5c:	e006      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e004      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e002      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <HAL_GPIO_Init+0x228>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	69fa      	ldr	r2, [r7, #28]
 8007c6e:	f002 0203 	and.w	r2, r2, #3
 8007c72:	0092      	lsls	r2, r2, #2
 8007c74:	4093      	lsls	r3, r2
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c7c:	4934      	ldr	r1, [pc, #208]	; (8007d50 <HAL_GPIO_Init+0x30c>)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	089b      	lsrs	r3, r3, #2
 8007c82:	3302      	adds	r3, #2
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c8a:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4013      	ands	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cae:	4a31      	ldr	r2, [pc, #196]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007cb4:	4b2f      	ldr	r3, [pc, #188]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cd8:	4a26      	ldr	r2, [pc, #152]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cde:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d02:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d08:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	43db      	mvns	r3, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	4013      	ands	r3, r2
 8007d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d2c:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_GPIO_Init+0x330>)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	f67f ae90 	bls.w	8007a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d40:	bf00      	nop
 8007d42:	3724      	adds	r7, #36	; 0x24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	40013800 	.word	0x40013800
 8007d54:	40020000 	.word	0x40020000
 8007d58:	40020400 	.word	0x40020400
 8007d5c:	40020800 	.word	0x40020800
 8007d60:	40020c00 	.word	0x40020c00
 8007d64:	40021000 	.word	0x40021000
 8007d68:	40021400 	.word	0x40021400
 8007d6c:	40021800 	.word	0x40021800
 8007d70:	40021c00 	.word	0x40021c00
 8007d74:	40013c00 	.word	0x40013c00

08007d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691a      	ldr	r2, [r3, #16]
 8007d88:	887b      	ldrh	r3, [r7, #2]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e001      	b.n	8007d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	807b      	strh	r3, [r7, #2]
 8007db4:	4613      	mov	r3, r2
 8007db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007db8:	787b      	ldrb	r3, [r7, #1]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dbe:	887a      	ldrh	r2, [r7, #2]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007dc4:	e003      	b.n	8007dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	041a      	lsls	r2, r3, #16
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	619a      	str	r2, [r3, #24]
}
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695a      	ldr	r2, [r3, #20]
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	401a      	ands	r2, r3
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d104      	bne.n	8007dfe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007df4:	887b      	ldrh	r3, [r7, #2]
 8007df6:	041a      	lsls	r2, r3, #16
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007dfc:	e002      	b.n	8007e04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007dfe:	887a      	ldrh	r2, [r7, #2]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	619a      	str	r2, [r3, #24]
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e1a:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d006      	beq.n	8007e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e26:	4a05      	ldr	r2, [pc, #20]	; (8007e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e28:	88fb      	ldrh	r3, [r7, #6]
 8007e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff f9e0 	bl	80071f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40013c00 	.word	0x40013c00

08007e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e25b      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d075      	beq.n	8007f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e5e:	4ba3      	ldr	r3, [pc, #652]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 030c 	and.w	r3, r3, #12
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d00c      	beq.n	8007e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e6a:	4ba0      	ldr	r3, [pc, #640]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d112      	bne.n	8007e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e76:	4b9d      	ldr	r3, [pc, #628]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e82:	d10b      	bne.n	8007e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e84:	4b99      	ldr	r3, [pc, #612]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d05b      	beq.n	8007f48 <HAL_RCC_OscConfig+0x108>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d157      	bne.n	8007f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e236      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea4:	d106      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x74>
 8007ea6:	4b91      	ldr	r3, [pc, #580]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a90      	ldr	r2, [pc, #576]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e01d      	b.n	8007ef0 <HAL_RCC_OscConfig+0xb0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x98>
 8007ebe:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a8a      	ldr	r2, [pc, #552]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	4b88      	ldr	r3, [pc, #544]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a87      	ldr	r2, [pc, #540]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	e00b      	b.n	8007ef0 <HAL_RCC_OscConfig+0xb0>
 8007ed8:	4b84      	ldr	r3, [pc, #528]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a83      	ldr	r2, [pc, #524]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	4b81      	ldr	r3, [pc, #516]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a80      	ldr	r2, [pc, #512]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d013      	beq.n	8007f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef8:	f7ff fc42 	bl	8007780 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f00:	f7ff fc3e 	bl	8007780 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b64      	cmp	r3, #100	; 0x64
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e1fb      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f12:	4b76      	ldr	r3, [pc, #472]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0xc0>
 8007f1e:	e014      	b.n	8007f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f20:	f7ff fc2e 	bl	8007780 <HAL_GetTick>
 8007f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f28:	f7ff fc2a 	bl	8007780 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	; 0x64
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e1e7      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f3a:	4b6c      	ldr	r3, [pc, #432]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f0      	bne.n	8007f28 <HAL_RCC_OscConfig+0xe8>
 8007f46:	e000      	b.n	8007f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d063      	beq.n	800801e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f56:	4b65      	ldr	r3, [pc, #404]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 030c 	and.w	r3, r3, #12
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f62:	4b62      	ldr	r3, [pc, #392]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d11c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f6e:	4b5f      	ldr	r3, [pc, #380]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d116      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_RCC_OscConfig+0x152>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e1bb      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f92:	4b56      	ldr	r3, [pc, #344]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4952      	ldr	r1, [pc, #328]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fa6:	e03a      	b.n	800801e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d020      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb0:	4b4f      	ldr	r3, [pc, #316]	; (80080f0 <HAL_RCC_OscConfig+0x2b0>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb6:	f7ff fbe3 	bl	8007780 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fbc:	e008      	b.n	8007fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fbe:	f7ff fbdf 	bl	8007780 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d901      	bls.n	8007fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e19c      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd0:	4b46      	ldr	r3, [pc, #280]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d0f0      	beq.n	8007fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fdc:	4b43      	ldr	r3, [pc, #268]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	4940      	ldr	r1, [pc, #256]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	600b      	str	r3, [r1, #0]
 8007ff0:	e015      	b.n	800801e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff2:	4b3f      	ldr	r3, [pc, #252]	; (80080f0 <HAL_RCC_OscConfig+0x2b0>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff8:	f7ff fbc2 	bl	8007780 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008000:	f7ff fbbe 	bl	8007780 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e17b      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008012:	4b36      	ldr	r3, [pc, #216]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f0      	bne.n	8008000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d030      	beq.n	800808c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008032:	4b30      	ldr	r3, [pc, #192]	; (80080f4 <HAL_RCC_OscConfig+0x2b4>)
 8008034:	2201      	movs	r2, #1
 8008036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008038:	f7ff fba2 	bl	8007780 <HAL_GetTick>
 800803c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800803e:	e008      	b.n	8008052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008040:	f7ff fb9e 	bl	8007780 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e15b      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008052:	4b26      	ldr	r3, [pc, #152]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8008054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0f0      	beq.n	8008040 <HAL_RCC_OscConfig+0x200>
 800805e:	e015      	b.n	800808c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008060:	4b24      	ldr	r3, [pc, #144]	; (80080f4 <HAL_RCC_OscConfig+0x2b4>)
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008066:	f7ff fb8b 	bl	8007780 <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800806e:	f7ff fb87 	bl	8007780 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e144      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008080:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 8008082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80a0 	beq.w	80081da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800809e:	4b13      	ldr	r3, [pc, #76]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10f      	bne.n	80080ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080aa:	2300      	movs	r3, #0
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 80080b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080c6:	2301      	movs	r3, #1
 80080c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RCC_OscConfig+0x2b8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d121      	bne.n	800811a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <HAL_RCC_OscConfig+0x2b8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a07      	ldr	r2, [pc, #28]	; (80080f8 <HAL_RCC_OscConfig+0x2b8>)
 80080dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080e2:	f7ff fb4d 	bl	8007780 <HAL_GetTick>
 80080e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080e8:	e011      	b.n	800810e <HAL_RCC_OscConfig+0x2ce>
 80080ea:	bf00      	nop
 80080ec:	40023800 	.word	0x40023800
 80080f0:	42470000 	.word	0x42470000
 80080f4:	42470e80 	.word	0x42470e80
 80080f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080fc:	f7ff fb40 	bl	8007780 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e0fd      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800810e:	4b81      	ldr	r3, [pc, #516]	; (8008314 <HAL_RCC_OscConfig+0x4d4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	2b00      	cmp	r3, #0
 8008118:	d0f0      	beq.n	80080fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d106      	bne.n	8008130 <HAL_RCC_OscConfig+0x2f0>
 8008122:	4b7d      	ldr	r3, [pc, #500]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	4a7c      	ldr	r2, [pc, #496]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008128:	f043 0301 	orr.w	r3, r3, #1
 800812c:	6713      	str	r3, [r2, #112]	; 0x70
 800812e:	e01c      	b.n	800816a <HAL_RCC_OscConfig+0x32a>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b05      	cmp	r3, #5
 8008136:	d10c      	bne.n	8008152 <HAL_RCC_OscConfig+0x312>
 8008138:	4b77      	ldr	r3, [pc, #476]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	4a76      	ldr	r2, [pc, #472]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800813e:	f043 0304 	orr.w	r3, r3, #4
 8008142:	6713      	str	r3, [r2, #112]	; 0x70
 8008144:	4b74      	ldr	r3, [pc, #464]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	4a73      	ldr	r2, [pc, #460]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800814a:	f043 0301 	orr.w	r3, r3, #1
 800814e:	6713      	str	r3, [r2, #112]	; 0x70
 8008150:	e00b      	b.n	800816a <HAL_RCC_OscConfig+0x32a>
 8008152:	4b71      	ldr	r3, [pc, #452]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	4a70      	ldr	r2, [pc, #448]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	6713      	str	r3, [r2, #112]	; 0x70
 800815e:	4b6e      	ldr	r3, [pc, #440]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	4a6d      	ldr	r2, [pc, #436]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008164:	f023 0304 	bic.w	r3, r3, #4
 8008168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d015      	beq.n	800819e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008172:	f7ff fb05 	bl	8007780 <HAL_GetTick>
 8008176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008178:	e00a      	b.n	8008190 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800817a:	f7ff fb01 	bl	8007780 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	f241 3288 	movw	r2, #5000	; 0x1388
 8008188:	4293      	cmp	r3, r2
 800818a:	d901      	bls.n	8008190 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e0bc      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008190:	4b61      	ldr	r3, [pc, #388]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0ee      	beq.n	800817a <HAL_RCC_OscConfig+0x33a>
 800819c:	e014      	b.n	80081c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800819e:	f7ff faef 	bl	8007780 <HAL_GetTick>
 80081a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081a4:	e00a      	b.n	80081bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081a6:	f7ff faeb 	bl	8007780 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e0a6      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081bc:	4b56      	ldr	r3, [pc, #344]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 80081be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ee      	bne.n	80081a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d105      	bne.n	80081da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081ce:	4b52      	ldr	r3, [pc, #328]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	4a51      	ldr	r2, [pc, #324]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 80081d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8092 	beq.w	8008308 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081e4:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 030c 	and.w	r3, r3, #12
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d05c      	beq.n	80082aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d141      	bne.n	800827c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081f8:	4b48      	ldr	r3, [pc, #288]	; (800831c <HAL_RCC_OscConfig+0x4dc>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081fe:	f7ff fabf 	bl	8007780 <HAL_GetTick>
 8008202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008206:	f7ff fabb 	bl	8007780 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e078      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008218:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1f0      	bne.n	8008206 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	431a      	orrs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	019b      	lsls	r3, r3, #6
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	3b01      	subs	r3, #1
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	4933      	ldr	r1, [pc, #204]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800824a:	4313      	orrs	r3, r2
 800824c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800824e:	4b33      	ldr	r3, [pc, #204]	; (800831c <HAL_RCC_OscConfig+0x4dc>)
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008254:	f7ff fa94 	bl	8007780 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800825c:	f7ff fa90 	bl	8007780 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e04d      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800826e:	4b2a      	ldr	r3, [pc, #168]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0x41c>
 800827a:	e045      	b.n	8008308 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800827c:	4b27      	ldr	r3, [pc, #156]	; (800831c <HAL_RCC_OscConfig+0x4dc>)
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008282:	f7ff fa7d 	bl	8007780 <HAL_GetTick>
 8008286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008288:	e008      	b.n	800829c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800828a:	f7ff fa79 	bl	8007780 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d901      	bls.n	800829c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e036      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800829c:	4b1e      	ldr	r3, [pc, #120]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f0      	bne.n	800828a <HAL_RCC_OscConfig+0x44a>
 80082a8:	e02e      	b.n	8008308 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e029      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80082b6:	4b18      	ldr	r3, [pc, #96]	; (8008318 <HAL_RCC_OscConfig+0x4d8>)
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d11c      	bne.n	8008304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d115      	bne.n	8008304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80082de:	4013      	ands	r3, r2
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10d      	bne.n	8008304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d106      	bne.n	8008304 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008300:	429a      	cmp	r2, r3
 8008302:	d001      	beq.n	8008308 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40007000 	.word	0x40007000
 8008318:	40023800 	.word	0x40023800
 800831c:	42470060 	.word	0x42470060

08008320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e0cc      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008334:	4b68      	ldr	r3, [pc, #416]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	429a      	cmp	r2, r3
 8008340:	d90c      	bls.n	800835c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008342:	4b65      	ldr	r3, [pc, #404]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800834a:	4b63      	ldr	r3, [pc, #396]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d001      	beq.n	800835c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0b8      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d020      	beq.n	80083aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008374:	4b59      	ldr	r3, [pc, #356]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	4a58      	ldr	r2, [pc, #352]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 800837a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800837e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800838c:	4b53      	ldr	r3, [pc, #332]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4a52      	ldr	r2, [pc, #328]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008398:	4b50      	ldr	r3, [pc, #320]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	494d      	ldr	r1, [pc, #308]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d044      	beq.n	8008440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d107      	bne.n	80083ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083be:	4b47      	ldr	r3, [pc, #284]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d119      	bne.n	80083fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e07f      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d003      	beq.n	80083de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d107      	bne.n	80083ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083de:	4b3f      	ldr	r3, [pc, #252]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e06f      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ee:	4b3b      	ldr	r3, [pc, #236]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e067      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083fe:	4b37      	ldr	r3, [pc, #220]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f023 0203 	bic.w	r2, r3, #3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4934      	ldr	r1, [pc, #208]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	4313      	orrs	r3, r2
 800840e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008410:	f7ff f9b6 	bl	8007780 <HAL_GetTick>
 8008414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008416:	e00a      	b.n	800842e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008418:	f7ff f9b2 	bl	8007780 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f241 3288 	movw	r2, #5000	; 0x1388
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e04f      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800842e:	4b2b      	ldr	r3, [pc, #172]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 020c 	and.w	r2, r3, #12
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	429a      	cmp	r2, r3
 800843e:	d1eb      	bne.n	8008418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008440:	4b25      	ldr	r3, [pc, #148]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d20c      	bcs.n	8008468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844e:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008456:	4b20      	ldr	r3, [pc, #128]	; (80084d8 <HAL_RCC_ClockConfig+0x1b8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d001      	beq.n	8008468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e032      	b.n	80084ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008474:	4b19      	ldr	r3, [pc, #100]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4916      	ldr	r1, [pc, #88]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	4313      	orrs	r3, r2
 8008484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	490e      	ldr	r1, [pc, #56]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80084a6:	f000 f821 	bl	80084ec <HAL_RCC_GetSysClockFreq>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	091b      	lsrs	r3, r3, #4
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <HAL_RCC_ClockConfig+0x1c0>)
 80084b8:	5cd3      	ldrb	r3, [r2, r3]
 80084ba:	fa21 f303 	lsr.w	r3, r1, r3
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <HAL_RCC_ClockConfig+0x1c4>)
 80084c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80084c2:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <HAL_RCC_ClockConfig+0x1c8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff f916 	bl	80076f8 <HAL_InitTick>

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40023c00 	.word	0x40023c00
 80084dc:	40023800 	.word	0x40023800
 80084e0:	0800dcdc 	.word	0x0800dcdc
 80084e4:	2000005c 	.word	0x2000005c
 80084e8:	20000060 	.word	0x20000060

080084ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	2300      	movs	r3, #0
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008502:	4b63      	ldr	r3, [pc, #396]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 030c 	and.w	r3, r3, #12
 800850a:	2b04      	cmp	r3, #4
 800850c:	d007      	beq.n	800851e <HAL_RCC_GetSysClockFreq+0x32>
 800850e:	2b08      	cmp	r3, #8
 8008510:	d008      	beq.n	8008524 <HAL_RCC_GetSysClockFreq+0x38>
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 80b4 	bne.w	8008680 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008518:	4b5e      	ldr	r3, [pc, #376]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800851a:	60bb      	str	r3, [r7, #8]
       break;
 800851c:	e0b3      	b.n	8008686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800851e:	4b5e      	ldr	r3, [pc, #376]	; (8008698 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008520:	60bb      	str	r3, [r7, #8]
      break;
 8008522:	e0b0      	b.n	8008686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008524:	4b5a      	ldr	r3, [pc, #360]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800852e:	4b58      	ldr	r3, [pc, #352]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d04a      	beq.n	80085d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800853a:	4b55      	ldr	r3, [pc, #340]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	099b      	lsrs	r3, r3, #6
 8008540:	f04f 0400 	mov.w	r4, #0
 8008544:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	ea03 0501 	and.w	r5, r3, r1
 8008550:	ea04 0602 	and.w	r6, r4, r2
 8008554:	4629      	mov	r1, r5
 8008556:	4632      	mov	r2, r6
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	f04f 0400 	mov.w	r4, #0
 8008560:	0154      	lsls	r4, r2, #5
 8008562:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008566:	014b      	lsls	r3, r1, #5
 8008568:	4619      	mov	r1, r3
 800856a:	4622      	mov	r2, r4
 800856c:	1b49      	subs	r1, r1, r5
 800856e:	eb62 0206 	sbc.w	r2, r2, r6
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	f04f 0400 	mov.w	r4, #0
 800857a:	0194      	lsls	r4, r2, #6
 800857c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008580:	018b      	lsls	r3, r1, #6
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	eb64 0402 	sbc.w	r4, r4, r2
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	00e2      	lsls	r2, r4, #3
 8008592:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008596:	00d9      	lsls	r1, r3, #3
 8008598:	460b      	mov	r3, r1
 800859a:	4614      	mov	r4, r2
 800859c:	195b      	adds	r3, r3, r5
 800859e:	eb44 0406 	adc.w	r4, r4, r6
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	0262      	lsls	r2, r4, #9
 80085ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80085b0:	0259      	lsls	r1, r3, #9
 80085b2:	460b      	mov	r3, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	4621      	mov	r1, r4
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f04f 0400 	mov.w	r4, #0
 80085c0:	461a      	mov	r2, r3
 80085c2:	4623      	mov	r3, r4
 80085c4:	f7f8 fb00 	bl	8000bc8 <__aeabi_uldivmod>
 80085c8:	4603      	mov	r3, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e049      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085d0:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	099b      	lsrs	r3, r3, #6
 80085d6:	f04f 0400 	mov.w	r4, #0
 80085da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	ea03 0501 	and.w	r5, r3, r1
 80085e6:	ea04 0602 	and.w	r6, r4, r2
 80085ea:	4629      	mov	r1, r5
 80085ec:	4632      	mov	r2, r6
 80085ee:	f04f 0300 	mov.w	r3, #0
 80085f2:	f04f 0400 	mov.w	r4, #0
 80085f6:	0154      	lsls	r4, r2, #5
 80085f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80085fc:	014b      	lsls	r3, r1, #5
 80085fe:	4619      	mov	r1, r3
 8008600:	4622      	mov	r2, r4
 8008602:	1b49      	subs	r1, r1, r5
 8008604:	eb62 0206 	sbc.w	r2, r2, r6
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	f04f 0400 	mov.w	r4, #0
 8008610:	0194      	lsls	r4, r2, #6
 8008612:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008616:	018b      	lsls	r3, r1, #6
 8008618:	1a5b      	subs	r3, r3, r1
 800861a:	eb64 0402 	sbc.w	r4, r4, r2
 800861e:	f04f 0100 	mov.w	r1, #0
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	00e2      	lsls	r2, r4, #3
 8008628:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800862c:	00d9      	lsls	r1, r3, #3
 800862e:	460b      	mov	r3, r1
 8008630:	4614      	mov	r4, r2
 8008632:	195b      	adds	r3, r3, r5
 8008634:	eb44 0406 	adc.w	r4, r4, r6
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	02a2      	lsls	r2, r4, #10
 8008642:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008646:	0299      	lsls	r1, r3, #10
 8008648:	460b      	mov	r3, r1
 800864a:	4614      	mov	r4, r2
 800864c:	4618      	mov	r0, r3
 800864e:	4621      	mov	r1, r4
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f04f 0400 	mov.w	r4, #0
 8008656:	461a      	mov	r2, r3
 8008658:	4623      	mov	r3, r4
 800865a:	f7f8 fab5 	bl	8000bc8 <__aeabi_uldivmod>
 800865e:	4603      	mov	r3, r0
 8008660:	460c      	mov	r4, r1
 8008662:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	0c1b      	lsrs	r3, r3, #16
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	3301      	adds	r3, #1
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	fbb2 f3f3 	udiv	r3, r2, r3
 800867c:	60bb      	str	r3, [r7, #8]
      break;
 800867e:	e002      	b.n	8008686 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008682:	60bb      	str	r3, [r7, #8]
      break;
 8008684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008686:	68bb      	ldr	r3, [r7, #8]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008690:	40023800 	.word	0x40023800
 8008694:	00f42400 	.word	0x00f42400
 8008698:	007a1200 	.word	0x007a1200

0800869c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a0:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	2000005c 	.word	0x2000005c

080086b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086b8:	f7ff fff0 	bl	800869c <HAL_RCC_GetHCLKFreq>
 80086bc:	4601      	mov	r1, r0
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	0a9b      	lsrs	r3, r3, #10
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	4a03      	ldr	r2, [pc, #12]	; (80086d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086ca:	5cd3      	ldrb	r3, [r2, r3]
 80086cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40023800 	.word	0x40023800
 80086d8:	0800dcec 	.word	0x0800dcec

080086dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086e0:	f7ff ffdc 	bl	800869c <HAL_RCC_GetHCLKFreq>
 80086e4:	4601      	mov	r1, r0
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	0b5b      	lsrs	r3, r3, #13
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	4a03      	ldr	r2, [pc, #12]	; (8008700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f2:	5cd3      	ldrb	r3, [r2, r3]
 80086f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40023800 	.word	0x40023800
 8008700:	0800dcec 	.word	0x0800dcec

08008704 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008728:	2b00      	cmp	r3, #0
 800872a:	d035      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800872c:	4b62      	ldr	r3, [pc, #392]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008732:	f7ff f825 	bl	8007780 <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008738:	e008      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800873a:	f7ff f821 	bl	8007780 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d901      	bls.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e0b0      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800874c:	4b5b      	ldr	r3, [pc, #364]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	019a      	lsls	r2, r3, #6
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	071b      	lsls	r3, r3, #28
 8008764:	4955      	ldr	r1, [pc, #340]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800876c:	4b52      	ldr	r3, [pc, #328]	; (80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008772:	f7ff f805 	bl	8007780 <HAL_GetTick>
 8008776:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008778:	e008      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800877a:	f7ff f801 	bl	8007780 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e090      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800878c:	4b4b      	ldr	r3, [pc, #300]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8083 	beq.w	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	4b44      	ldr	r3, [pc, #272]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	4a43      	ldr	r2, [pc, #268]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6413      	str	r3, [r2, #64]	; 0x40
 80087b6:	4b41      	ldr	r3, [pc, #260]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087c2:	4b3f      	ldr	r3, [pc, #252]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a3e      	ldr	r2, [pc, #248]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80087c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087ce:	f7fe ffd7 	bl	8007780 <HAL_GetTick>
 80087d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087d4:	e008      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087d6:	f7fe ffd3 	bl	8007780 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e062      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087e8:	4b35      	ldr	r3, [pc, #212]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80087f4:	4b31      	ldr	r3, [pc, #196]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02f      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	429a      	cmp	r2, r3
 8008810:	d028      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008812:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800881c:	4b29      	ldr	r3, [pc, #164]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800881e:	2201      	movs	r2, #1
 8008820:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008822:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008828:	4a24      	ldr	r2, [pc, #144]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800882e:	4b23      	ldr	r3, [pc, #140]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b01      	cmp	r3, #1
 8008838:	d114      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800883a:	f7fe ffa1 	bl	8007780 <HAL_GetTick>
 800883e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008840:	e00a      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008842:	f7fe ff9d 	bl	8007780 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008850:	4293      	cmp	r3, r2
 8008852:	d901      	bls.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e02a      	b.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008858:	4b18      	ldr	r3, [pc, #96]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0ee      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008870:	d10d      	bne.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008886:	490d      	ldr	r1, [pc, #52]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008888:	4313      	orrs	r3, r2
 800888a:	608b      	str	r3, [r1, #8]
 800888c:	e005      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008894:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008898:	6093      	str	r3, [r2, #8]
 800889a:	4b08      	ldr	r3, [pc, #32]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800889c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088a6:	4905      	ldr	r1, [pc, #20]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	42470068 	.word	0x42470068
 80088bc:	40023800 	.word	0x40023800
 80088c0:	40007000 	.word	0x40007000
 80088c4:	42470e40 	.word	0x42470e40

080088c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e083      	b.n	80089e2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	7f5b      	ldrb	r3, [r3, #29]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fe fce0 	bl	80072b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	22ca      	movs	r2, #202	; 0xca
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2253      	movs	r2, #83	; 0x53
 8008904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 faa8 	bl	8008e5c <RTC_EnterInitMode>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d008      	beq.n	8008924 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2204      	movs	r2, #4
 800891e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e05e      	b.n	80089e2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6812      	ldr	r2, [r2, #0]
 800892e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008936:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6899      	ldr	r1, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68d2      	ldr	r2, [r2, #12]
 800895e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6919      	ldr	r1, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	041a      	lsls	r2, r3, #16
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	430a      	orrs	r2, r1
 8008972:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68da      	ldr	r2, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008982:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10e      	bne.n	80089b0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa3a 	bl	8008e0c <HAL_RTC_WaitForSynchro>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	22ff      	movs	r2, #255	; 0xff
 80089a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e018      	b.n	80089e2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089be:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	22ff      	movs	r2, #255	; 0xff
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80089e0:	2300      	movs	r3, #0
  }
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80089ea:	b590      	push	{r4, r7, lr}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7f1b      	ldrb	r3, [r3, #28]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d101      	bne.n	8008a06 <HAL_RTC_SetTime+0x1c>
 8008a02:	2302      	movs	r3, #2
 8008a04:	e0aa      	b.n	8008b5c <HAL_RTC_SetTime+0x172>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d126      	bne.n	8008a66 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fa3f 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a36:	4603      	mov	r3, r0
 8008a38:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fa38 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a44:	4603      	mov	r3, r0
 8008a46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008a48:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	789b      	ldrb	r3, [r3, #2]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fa30 	bl	8008eb4 <RTC_ByteToBcd2>
 8008a54:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008a56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	78db      	ldrb	r3, [r3, #3]
 8008a5e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008a60:	4313      	orrs	r3, r2
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e018      	b.n	8008a98 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2200      	movs	r2, #0
 8008a78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	785b      	ldrb	r3, [r3, #1]
 8008a84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008a86:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008a8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	22ca      	movs	r2, #202	; 0xca
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2253      	movs	r2, #83	; 0x53
 8008aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f9d7 	bl	8008e5c <RTC_EnterInitMode>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2204      	movs	r2, #4
 8008ac0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e047      	b.n	8008b5c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ad6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ada:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6899      	ldr	r1, [r3, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d111      	bne.n	8008b46 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f972 	bl	8008e0c <HAL_RTC_WaitForSynchro>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	22ff      	movs	r2, #255	; 0xff
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e00a      	b.n	8008b5c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	22ff      	movs	r2, #255	; 0xff
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2201      	movs	r2, #1
 8008b52:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
  }
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd90      	pop	{r4, r7, pc}

08008b64 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b96:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	0a1b      	lsrs	r3, r3, #8
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11a      	bne.n	8008c16 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 f983 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008bea:	4603      	mov	r3, r0
 8008bec:	461a      	mov	r2, r3
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f97a 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	461a      	mov	r2, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	789b      	ldrb	r3, [r3, #2]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f971 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	461a      	mov	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	7f1b      	ldrb	r3, [r3, #28]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_RTC_SetDate+0x1c>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e094      	b.n	8008d66 <HAL_RTC_SetDate+0x146>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2202      	movs	r2, #2
 8008c46:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10e      	bne.n	8008c6c <HAL_RTC_SetDate+0x4c>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d008      	beq.n	8008c6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	f023 0310 	bic.w	r3, r3, #16
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	330a      	adds	r3, #10
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11c      	bne.n	8008cac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	78db      	ldrb	r3, [r3, #3]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f91c 	bl	8008eb4 <RTC_ByteToBcd2>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f915 	bl	8008eb4 <RTC_ByteToBcd2>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c8e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	789b      	ldrb	r3, [r3, #2]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f90d 	bl	8008eb4 <RTC_ByteToBcd2>
 8008c9a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008c9c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	e00e      	b.n	8008cca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	78db      	ldrb	r3, [r3, #3]
 8008cb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008cb8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008cbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	22ca      	movs	r2, #202	; 0xca
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2253      	movs	r2, #83	; 0x53
 8008cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f8be 	bl	8008e5c <RTC_EnterInitMode>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	22ff      	movs	r2, #255	; 0xff
 8008cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e033      	b.n	8008d66 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d1c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d111      	bne.n	8008d50 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f86d 	bl	8008e0c <HAL_RTC_WaitForSynchro>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	22ff      	movs	r2, #255	; 0xff
 8008d3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2204      	movs	r2, #4
 8008d44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e00a      	b.n	8008d66 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008d64:	2300      	movs	r3, #0
  }
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}

08008d6e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	0c1b      	lsrs	r3, r3, #16
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 031f 	and.w	r3, r3, #31
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	0b5b      	lsrs	r3, r3, #13
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11a      	bne.n	8008e02 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	78db      	ldrb	r3, [r3, #3]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f88d 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f884 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	789b      	ldrb	r3, [r3, #2]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 f87b 	bl	8008ef0 <RTC_Bcd2ToByte>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e28:	f7fe fcaa 	bl	8007780 <HAL_GetTick>
 8008e2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e2e:	e009      	b.n	8008e44 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e30:	f7fe fca6 	bl	8007780 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e3e:	d901      	bls.n	8008e44 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e007      	b.n	8008e54 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0ee      	beq.n	8008e30 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d119      	bne.n	8008eaa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e80:	f7fe fc7e 	bl	8007780 <HAL_GetTick>
 8008e84:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e86:	e009      	b.n	8008e9c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e88:	f7fe fc7a 	bl	8007780 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e96:	d901      	bls.n	8008e9c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e007      	b.n	8008eac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ee      	beq.n	8008e88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8008ec2:	e005      	b.n	8008ed0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	3b0a      	subs	r3, #10
 8008ece:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d8f6      	bhi.n	8008ec4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	4613      	mov	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	4413      	add	r3, r2
 8008f1e:	b2db      	uxtb	r3, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7f1b      	ldrb	r3, [r3, #28]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e030      	b.n	8008fa4 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	22ca      	movs	r2, #202	; 0xca
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2253      	movs	r2, #83	; 0x53
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8008f6c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6899      	ldr	r1, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008f8c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	22ff      	movs	r2, #255	; 0xff
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e056      	b.n	8009070 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fe f97d 	bl	80072dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	431a      	orrs	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800901e:	431a      	orrs	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	431a      	orrs	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	ea42 0103 	orr.w	r1, r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	0c1b      	lsrs	r3, r3, #16
 8009040:	f003 0104 	and.w	r1, r3, #4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69da      	ldr	r2, [r3, #28]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800905e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b088      	sub	sp, #32
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	4613      	mov	r3, r2
 8009086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_SPI_Transmit+0x22>
 8009096:	2302      	movs	r3, #2
 8009098:	e11e      	b.n	80092d8 <HAL_SPI_Transmit+0x260>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090a2:	f7fe fb6d 	bl	8007780 <HAL_GetTick>
 80090a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d002      	beq.n	80090be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090b8:	2302      	movs	r3, #2
 80090ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090bc:	e103      	b.n	80092c6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <HAL_SPI_Transmit+0x52>
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ce:	e0fa      	b.n	80092c6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2203      	movs	r2, #3
 80090d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	88fa      	ldrh	r2, [r7, #6]
 80090e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	88fa      	ldrh	r2, [r7, #6]
 80090ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009116:	d107      	bne.n	8009128 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009126:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d007      	beq.n	8009146 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009144:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800914e:	d14b      	bne.n	80091e8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <HAL_SPI_Transmit+0xe6>
 8009158:	8afb      	ldrh	r3, [r7, #22]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d13e      	bne.n	80091dc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	1c9a      	adds	r2, r3, #2
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009182:	e02b      	b.n	80091dc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d112      	bne.n	80091b8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	881a      	ldrh	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	1c9a      	adds	r2, r3, #2
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80091b6:	e011      	b.n	80091dc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091b8:	f7fe fae2 	bl	8007780 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d803      	bhi.n	80091d0 <HAL_SPI_Transmit+0x158>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d102      	bne.n	80091d6 <HAL_SPI_Transmit+0x15e>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091da:	e074      	b.n	80092c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1ce      	bne.n	8009184 <HAL_SPI_Transmit+0x10c>
 80091e6:	e04c      	b.n	8009282 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HAL_SPI_Transmit+0x17e>
 80091f0:	8afb      	ldrh	r3, [r7, #22]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d140      	bne.n	8009278 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	330c      	adds	r3, #12
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800921c:	e02c      	b.n	8009278 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b02      	cmp	r3, #2
 800922a:	d113      	bne.n	8009254 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	86da      	strh	r2, [r3, #54]	; 0x36
 8009252:	e011      	b.n	8009278 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009254:	f7fe fa94 	bl	8007780 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d803      	bhi.n	800926c <HAL_SPI_Transmit+0x1f4>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d102      	bne.n	8009272 <HAL_SPI_Transmit+0x1fa>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009276:	e026      	b.n	80092c6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1cd      	bne.n	800921e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fa44 	bl	8009714 <SPI_EndRxTxTransaction>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	77fb      	strb	r3, [r7, #31]
 80092c2:	e000      	b.n	80092c6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80092c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08c      	sub	sp, #48	; 0x30
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092ee:	2301      	movs	r3, #1
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x26>
 8009302:	2302      	movs	r3, #2
 8009304:	e18a      	b.n	800961c <HAL_SPI_TransmitReceive+0x33c>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800930e:	f7fe fa37 	bl	8007780 <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009324:	887b      	ldrh	r3, [r7, #2]
 8009326:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800932c:	2b01      	cmp	r3, #1
 800932e:	d00f      	beq.n	8009350 <HAL_SPI_TransmitReceive+0x70>
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009336:	d107      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d103      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x68>
 8009340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009344:	2b04      	cmp	r3, #4
 8009346:	d003      	beq.n	8009350 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009348:	2302      	movs	r3, #2
 800934a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800934e:	e15b      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <HAL_SPI_TransmitReceive+0x82>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <HAL_SPI_TransmitReceive+0x82>
 800935c:	887b      	ldrh	r3, [r7, #2]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d103      	bne.n	800936a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009368:	e14e      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b04      	cmp	r3, #4
 8009374:	d003      	beq.n	800937e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2205      	movs	r2, #5
 800937a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	887a      	ldrh	r2, [r7, #2]
 800938e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	887a      	ldrh	r2, [r7, #2]
 8009394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	887a      	ldrh	r2, [r7, #2]
 80093a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	887a      	ldrh	r2, [r7, #2]
 80093a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d007      	beq.n	80093d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093da:	d178      	bne.n	80094ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <HAL_SPI_TransmitReceive+0x10a>
 80093e4:	8b7b      	ldrh	r3, [r7, #26]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d166      	bne.n	80094b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	881a      	ldrh	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	1c9a      	adds	r2, r3, #2
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940e:	e053      	b.n	80094b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b02      	cmp	r3, #2
 800941c:	d11b      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x176>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d016      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x176>
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	2b01      	cmp	r3, #1
 800942c:	d113      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	881a      	ldrh	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009452:	2300      	movs	r3, #0
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b01      	cmp	r3, #1
 8009462:	d119      	bne.n	8009498 <HAL_SPI_TransmitReceive+0x1b8>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d014      	beq.n	8009498 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68da      	ldr	r2, [r3, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	b292      	uxth	r2, r2
 800947a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009494:	2301      	movs	r3, #1
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009498:	f7fe f972 	bl	8007780 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d807      	bhi.n	80094b8 <HAL_SPI_TransmitReceive+0x1d8>
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d003      	beq.n	80094b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094b6:	e0a7      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094bc:	b29b      	uxth	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1a6      	bne.n	8009410 <HAL_SPI_TransmitReceive+0x130>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1a1      	bne.n	8009410 <HAL_SPI_TransmitReceive+0x130>
 80094cc:	e07c      	b.n	80095c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <HAL_SPI_TransmitReceive+0x1fc>
 80094d6:	8b7b      	ldrh	r3, [r7, #26]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d16b      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	7812      	ldrb	r2, [r2, #0]
 80094e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009502:	e057      	b.n	80095b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	2b02      	cmp	r3, #2
 8009510:	d11c      	bne.n	800954c <HAL_SPI_TransmitReceive+0x26c>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d017      	beq.n	800954c <HAL_SPI_TransmitReceive+0x26c>
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d114      	bne.n	800954c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	7812      	ldrb	r2, [r2, #0]
 800952e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b01      	cmp	r3, #1
 8009558:	d119      	bne.n	800958e <HAL_SPI_TransmitReceive+0x2ae>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800955e:	b29b      	uxth	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d014      	beq.n	800958e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800958a:	2301      	movs	r3, #1
 800958c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800958e:	f7fe f8f7 	bl	8007780 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800959a:	429a      	cmp	r2, r3
 800959c:	d803      	bhi.n	80095a6 <HAL_SPI_TransmitReceive+0x2c6>
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a4:	d102      	bne.n	80095ac <HAL_SPI_TransmitReceive+0x2cc>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095b2:	e029      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1a2      	bne.n	8009504 <HAL_SPI_TransmitReceive+0x224>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d19d      	bne.n	8009504 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f8a1 	bl	8009714 <SPI_EndRxTxTransaction>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80095e4:	e010      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10b      	bne.n	8009606 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ee:	2300      	movs	r3, #0
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	e000      	b.n	8009608 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009606:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800961c:	4618      	mov	r0, r3
 800961e:	3730      	adds	r7, #48	; 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009632:	b2db      	uxtb	r3, r3
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	4613      	mov	r3, r2
 800964e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009650:	e04c      	b.n	80096ec <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d048      	beq.n	80096ec <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800965a:	f7fe f891 	bl	8007780 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d902      	bls.n	8009670 <SPI_WaitFlagStateUntilTimeout+0x30>
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d13d      	bne.n	80096ec <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800967e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009688:	d111      	bne.n	80096ae <SPI_WaitFlagStateUntilTimeout+0x6e>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009692:	d004      	beq.n	800969e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800969c:	d107      	bne.n	80096ae <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b6:	d10f      	bne.n	80096d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e00f      	b.n	800970c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4013      	ands	r3, r2
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	bf0c      	ite	eq
 80096fc:	2301      	moveq	r3, #1
 80096fe:	2300      	movne	r3, #0
 8009700:	b2db      	uxtb	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	79fb      	ldrb	r3, [r7, #7]
 8009706:	429a      	cmp	r2, r3
 8009708:	d1a3      	bne.n	8009652 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009720:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <SPI_EndRxTxTransaction+0x7c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1b      	ldr	r2, [pc, #108]	; (8009794 <SPI_EndRxTxTransaction+0x80>)
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	0d5b      	lsrs	r3, r3, #21
 800972c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009730:	fb02 f303 	mul.w	r3, r2, r3
 8009734:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800973e:	d112      	bne.n	8009766 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2200      	movs	r2, #0
 8009748:	2180      	movs	r1, #128	; 0x80
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff ff78 	bl	8009640 <SPI_WaitFlagStateUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f043 0220 	orr.w	r2, r3, #32
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e00f      	b.n	8009786 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3b01      	subs	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d0f2      	beq.n	8009766 <SPI_EndRxTxTransaction+0x52>
 8009780:	e000      	b.n	8009784 <SPI_EndRxTxTransaction+0x70>
        break;
 8009782:	bf00      	nop
  }

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	2000005c 	.word	0x2000005c
 8009794:	165e9f81 	.word	0x165e9f81

08009798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e01d      	b.n	80097e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7fd fdd4 	bl	800736c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2202      	movs	r2, #2
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f000 fb72 	bl	8009ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2202      	movs	r2, #2
 80097fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b06      	cmp	r3, #6
 800980e:	d007      	beq.n	8009820 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f042 0201 	orr.w	r2, r2, #1
 800981e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f042 0201 	orr.w	r2, r2, #1
 800984c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b06      	cmp	r3, #6
 800985e:	d007      	beq.n	8009870 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0201 	orr.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e01d      	b.n	80098cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f815 	bl	80098d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f000 faff 	bl	8009ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fdca 	bl	800a494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a15      	ldr	r2, [pc, #84]	; (800995c <HAL_TIM_PWM_Start+0x74>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d004      	beq.n	8009914 <HAL_TIM_PWM_Start+0x2c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a14      	ldr	r2, [pc, #80]	; (8009960 <HAL_TIM_PWM_Start+0x78>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d101      	bne.n	8009918 <HAL_TIM_PWM_Start+0x30>
 8009914:	2301      	movs	r3, #1
 8009916:	e000      	b.n	800991a <HAL_TIM_PWM_Start+0x32>
 8009918:	2300      	movs	r3, #0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d007      	beq.n	800992e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800992c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2b06      	cmp	r3, #6
 800993e:	d007      	beq.n	8009950 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40010000 	.word	0x40010000
 8009960:	40010400 	.word	0x40010400

08009964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	f003 0302 	and.w	r3, r3, #2
 8009976:	2b02      	cmp	r3, #2
 8009978:	d122      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b02      	cmp	r3, #2
 8009986:	d11b      	bne.n	80099c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0202 	mvn.w	r2, #2
 8009990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fa6b 	bl	8009e82 <HAL_TIM_IC_CaptureCallback>
 80099ac:	e005      	b.n	80099ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa5d 	bl	8009e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fa6e 	bl	8009e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d122      	bne.n	8009a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d11b      	bne.n	8009a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f06f 0204 	mvn.w	r2, #4
 80099e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2202      	movs	r2, #2
 80099ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fa41 	bl	8009e82 <HAL_TIM_IC_CaptureCallback>
 8009a00:	e005      	b.n	8009a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa33 	bl	8009e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fa44 	bl	8009e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b08      	cmp	r3, #8
 8009a20:	d122      	bne.n	8009a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	f003 0308 	and.w	r3, r3, #8
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d11b      	bne.n	8009a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f06f 0208 	mvn.w	r2, #8
 8009a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa17 	bl	8009e82 <HAL_TIM_IC_CaptureCallback>
 8009a54:	e005      	b.n	8009a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa09 	bl	8009e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fa1a 	bl	8009e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f003 0310 	and.w	r3, r3, #16
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d122      	bne.n	8009abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f003 0310 	and.w	r3, r3, #16
 8009a80:	2b10      	cmp	r3, #16
 8009a82:	d11b      	bne.n	8009abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f06f 0210 	mvn.w	r2, #16
 8009a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2208      	movs	r2, #8
 8009a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f9ed 	bl	8009e82 <HAL_TIM_IC_CaptureCallback>
 8009aa8:	e005      	b.n	8009ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f9df 	bl	8009e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9f0 	bl	8009e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d10e      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d107      	bne.n	8009ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f06f 0201 	mvn.w	r2, #1
 8009ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fd fb5a 	bl	800719c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af2:	2b80      	cmp	r3, #128	; 0x80
 8009af4:	d10e      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b00:	2b80      	cmp	r3, #128	; 0x80
 8009b02:	d107      	bne.n	8009b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fd6c 	bl	800a5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	d10e      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b40      	cmp	r3, #64	; 0x40
 8009b2e:	d107      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9b5 	bl	8009eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d10e      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	d107      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0220 	mvn.w	r2, #32
 8009b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fd36 	bl	800a5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e0b4      	b.n	8009cf8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b0c      	cmp	r3, #12
 8009ba2:	f200 809f 	bhi.w	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009be1 	.word	0x08009be1
 8009bb0:	08009ce5 	.word	0x08009ce5
 8009bb4:	08009ce5 	.word	0x08009ce5
 8009bb8:	08009ce5 	.word	0x08009ce5
 8009bbc:	08009c21 	.word	0x08009c21
 8009bc0:	08009ce5 	.word	0x08009ce5
 8009bc4:	08009ce5 	.word	0x08009ce5
 8009bc8:	08009ce5 	.word	0x08009ce5
 8009bcc:	08009c63 	.word	0x08009c63
 8009bd0:	08009ce5 	.word	0x08009ce5
 8009bd4:	08009ce5 	.word	0x08009ce5
 8009bd8:	08009ce5 	.word	0x08009ce5
 8009bdc:	08009ca3 	.word	0x08009ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 fa0a 	bl	800a000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699a      	ldr	r2, [r3, #24]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0208 	orr.w	r2, r2, #8
 8009bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0204 	bic.w	r2, r2, #4
 8009c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6999      	ldr	r1, [r3, #24]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	691a      	ldr	r2, [r3, #16]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	619a      	str	r2, [r3, #24]
      break;
 8009c1e:	e062      	b.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68b9      	ldr	r1, [r7, #8]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 fa5a 	bl	800a0e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	699a      	ldr	r2, [r3, #24]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6999      	ldr	r1, [r3, #24]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	021a      	lsls	r2, r3, #8
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	619a      	str	r2, [r3, #24]
      break;
 8009c60:	e041      	b.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 faaf 	bl	800a1cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0208 	orr.w	r2, r2, #8
 8009c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	69da      	ldr	r2, [r3, #28]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0204 	bic.w	r2, r2, #4
 8009c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69d9      	ldr	r1, [r3, #28]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	61da      	str	r2, [r3, #28]
      break;
 8009ca0:	e021      	b.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fb03 	bl	800a2b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69da      	ldr	r2, [r3, #28]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69da      	ldr	r2, [r3, #28]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	69d9      	ldr	r1, [r3, #28]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	021a      	lsls	r2, r3, #8
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	61da      	str	r2, [r3, #28]
      break;
 8009ce2:	e000      	b.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009ce4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_TIM_ConfigClockSource+0x18>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e0a6      	b.n	8009e66 <HAL_TIM_ConfigClockSource+0x166>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d067      	beq.n	8009e20 <HAL_TIM_ConfigClockSource+0x120>
 8009d50:	2b40      	cmp	r3, #64	; 0x40
 8009d52:	d80b      	bhi.n	8009d6c <HAL_TIM_ConfigClockSource+0x6c>
 8009d54:	2b10      	cmp	r3, #16
 8009d56:	d073      	beq.n	8009e40 <HAL_TIM_ConfigClockSource+0x140>
 8009d58:	2b10      	cmp	r3, #16
 8009d5a:	d802      	bhi.n	8009d62 <HAL_TIM_ConfigClockSource+0x62>
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d06f      	beq.n	8009e40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009d60:	e078      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	d06c      	beq.n	8009e40 <HAL_TIM_ConfigClockSource+0x140>
 8009d66:	2b30      	cmp	r3, #48	; 0x30
 8009d68:	d06a      	beq.n	8009e40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009d6a:	e073      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009d6c:	2b70      	cmp	r3, #112	; 0x70
 8009d6e:	d00d      	beq.n	8009d8c <HAL_TIM_ConfigClockSource+0x8c>
 8009d70:	2b70      	cmp	r3, #112	; 0x70
 8009d72:	d804      	bhi.n	8009d7e <HAL_TIM_ConfigClockSource+0x7e>
 8009d74:	2b50      	cmp	r3, #80	; 0x50
 8009d76:	d033      	beq.n	8009de0 <HAL_TIM_ConfigClockSource+0xe0>
 8009d78:	2b60      	cmp	r3, #96	; 0x60
 8009d7a:	d041      	beq.n	8009e00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009d7c:	e06a      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d82:	d066      	beq.n	8009e52 <HAL_TIM_ConfigClockSource+0x152>
 8009d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d88:	d017      	beq.n	8009dba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009d8a:	e063      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	6899      	ldr	r1, [r3, #8]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f000 fb5a 	bl	800a454 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	609a      	str	r2, [r3, #8]
      break;
 8009db8:	e04c      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6899      	ldr	r1, [r3, #8]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f000 fb43 	bl	800a454 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ddc:	609a      	str	r2, [r3, #8]
      break;
 8009dde:	e039      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	6859      	ldr	r1, [r3, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	461a      	mov	r2, r3
 8009dee:	f000 fab7 	bl	800a360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2150      	movs	r1, #80	; 0x50
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fb10 	bl	800a41e <TIM_ITRx_SetConfig>
      break;
 8009dfe:	e029      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	6859      	ldr	r1, [r3, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f000 fad6 	bl	800a3be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2160      	movs	r1, #96	; 0x60
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fb00 	bl	800a41e <TIM_ITRx_SetConfig>
      break;
 8009e1e:	e019      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	6859      	ldr	r1, [r3, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f000 fa97 	bl	800a360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2140      	movs	r1, #64	; 0x40
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 faf0 	bl	800a41e <TIM_ITRx_SetConfig>
      break;
 8009e3e:	e009      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f000 fae7 	bl	800a41e <TIM_ITRx_SetConfig>
      break;
 8009e50:	e000      	b.n	8009e54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
	...

08009ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a40      	ldr	r2, [pc, #256]	; (8009fd4 <TIM_Base_SetConfig+0x114>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d013      	beq.n	8009f00 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ede:	d00f      	beq.n	8009f00 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a3d      	ldr	r2, [pc, #244]	; (8009fd8 <TIM_Base_SetConfig+0x118>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d00b      	beq.n	8009f00 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a3c      	ldr	r2, [pc, #240]	; (8009fdc <TIM_Base_SetConfig+0x11c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d007      	beq.n	8009f00 <TIM_Base_SetConfig+0x40>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a3b      	ldr	r2, [pc, #236]	; (8009fe0 <TIM_Base_SetConfig+0x120>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d003      	beq.n	8009f00 <TIM_Base_SetConfig+0x40>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a3a      	ldr	r2, [pc, #232]	; (8009fe4 <TIM_Base_SetConfig+0x124>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d108      	bne.n	8009f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2f      	ldr	r2, [pc, #188]	; (8009fd4 <TIM_Base_SetConfig+0x114>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d02b      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f20:	d027      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2c      	ldr	r2, [pc, #176]	; (8009fd8 <TIM_Base_SetConfig+0x118>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d023      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a2b      	ldr	r2, [pc, #172]	; (8009fdc <TIM_Base_SetConfig+0x11c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d01f      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a2a      	ldr	r2, [pc, #168]	; (8009fe0 <TIM_Base_SetConfig+0x120>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d01b      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a29      	ldr	r2, [pc, #164]	; (8009fe4 <TIM_Base_SetConfig+0x124>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d017      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a28      	ldr	r2, [pc, #160]	; (8009fe8 <TIM_Base_SetConfig+0x128>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d013      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a27      	ldr	r2, [pc, #156]	; (8009fec <TIM_Base_SetConfig+0x12c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d00f      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a26      	ldr	r2, [pc, #152]	; (8009ff0 <TIM_Base_SetConfig+0x130>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d00b      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a25      	ldr	r2, [pc, #148]	; (8009ff4 <TIM_Base_SetConfig+0x134>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d007      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a24      	ldr	r2, [pc, #144]	; (8009ff8 <TIM_Base_SetConfig+0x138>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d003      	beq.n	8009f72 <TIM_Base_SetConfig+0xb2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a23      	ldr	r2, [pc, #140]	; (8009ffc <TIM_Base_SetConfig+0x13c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d108      	bne.n	8009f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <TIM_Base_SetConfig+0x114>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_Base_SetConfig+0xf8>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a0c      	ldr	r2, [pc, #48]	; (8009fe4 <TIM_Base_SetConfig+0x124>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d103      	bne.n	8009fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	615a      	str	r2, [r3, #20]
}
 8009fc6:	bf00      	nop
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40000400 	.word	0x40000400
 8009fdc:	40000800 	.word	0x40000800
 8009fe0:	40000c00 	.word	0x40000c00
 8009fe4:	40010400 	.word	0x40010400
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	40014400 	.word	0x40014400
 8009ff0:	40014800 	.word	0x40014800
 8009ff4:	40001800 	.word	0x40001800
 8009ff8:	40001c00 	.word	0x40001c00
 8009ffc:	40002000 	.word	0x40002000

0800a000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a000:	b480      	push	{r7}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a1b      	ldr	r3, [r3, #32]
 800a00e:	f023 0201 	bic.w	r2, r3, #1
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0303 	bic.w	r3, r3, #3
 800a036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4313      	orrs	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f023 0302 	bic.w	r3, r3, #2
 800a048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	4313      	orrs	r3, r2
 800a052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a20      	ldr	r2, [pc, #128]	; (800a0d8 <TIM_OC1_SetConfig+0xd8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d003      	beq.n	800a064 <TIM_OC1_SetConfig+0x64>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1f      	ldr	r2, [pc, #124]	; (800a0dc <TIM_OC1_SetConfig+0xdc>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d10c      	bne.n	800a07e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f023 0308 	bic.w	r3, r3, #8
 800a06a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 0304 	bic.w	r3, r3, #4
 800a07c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a15      	ldr	r2, [pc, #84]	; (800a0d8 <TIM_OC1_SetConfig+0xd8>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_OC1_SetConfig+0x8e>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a14      	ldr	r2, [pc, #80]	; (800a0dc <TIM_OC1_SetConfig+0xdc>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d111      	bne.n	800a0b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a09c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	621a      	str	r2, [r3, #32]
}
 800a0cc:	bf00      	nop
 800a0ce:	371c      	adds	r7, #28
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010400 	.word	0x40010400

0800a0e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f023 0210 	bic.w	r2, r3, #16
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	021b      	lsls	r3, r3, #8
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4313      	orrs	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f023 0320 	bic.w	r3, r3, #32
 800a12a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4313      	orrs	r3, r2
 800a136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4a22      	ldr	r2, [pc, #136]	; (800a1c4 <TIM_OC2_SetConfig+0xe4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d003      	beq.n	800a148 <TIM_OC2_SetConfig+0x68>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <TIM_OC2_SetConfig+0xe8>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d10d      	bne.n	800a164 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a14e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4313      	orrs	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a17      	ldr	r2, [pc, #92]	; (800a1c4 <TIM_OC2_SetConfig+0xe4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d003      	beq.n	800a174 <TIM_OC2_SetConfig+0x94>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a16      	ldr	r2, [pc, #88]	; (800a1c8 <TIM_OC2_SetConfig+0xe8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d113      	bne.n	800a19c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a17a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	4313      	orrs	r3, r2
 800a19a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	40010000 	.word	0x40010000
 800a1c8:	40010400 	.word	0x40010400

0800a1cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0303 	bic.w	r3, r3, #3
 800a202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	021b      	lsls	r3, r3, #8
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	4313      	orrs	r3, r2
 800a220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a21      	ldr	r2, [pc, #132]	; (800a2ac <TIM_OC3_SetConfig+0xe0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d003      	beq.n	800a232 <TIM_OC3_SetConfig+0x66>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a20      	ldr	r2, [pc, #128]	; (800a2b0 <TIM_OC3_SetConfig+0xe4>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d10d      	bne.n	800a24e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a24c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a16      	ldr	r2, [pc, #88]	; (800a2ac <TIM_OC3_SetConfig+0xe0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d003      	beq.n	800a25e <TIM_OC3_SetConfig+0x92>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a15      	ldr	r2, [pc, #84]	; (800a2b0 <TIM_OC3_SetConfig+0xe4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d113      	bne.n	800a286 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a26c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	011b      	lsls	r3, r3, #4
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	4313      	orrs	r3, r2
 800a284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	621a      	str	r2, [r3, #32]
}
 800a2a0:	bf00      	nop
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	40010000 	.word	0x40010000
 800a2b0:	40010400 	.word	0x40010400

0800a2b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	031b      	lsls	r3, r3, #12
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a12      	ldr	r2, [pc, #72]	; (800a358 <TIM_OC4_SetConfig+0xa4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d003      	beq.n	800a31c <TIM_OC4_SetConfig+0x68>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a11      	ldr	r2, [pc, #68]	; (800a35c <TIM_OC4_SetConfig+0xa8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d109      	bne.n	800a330 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a322:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	019b      	lsls	r3, r3, #6
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	40010000 	.word	0x40010000
 800a35c:	40010400 	.word	0x40010400

0800a360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	f023 0201 	bic.w	r2, r3, #1
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a38a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4313      	orrs	r3, r2
 800a394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f023 030a 	bic.w	r3, r3, #10
 800a39c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	621a      	str	r2, [r3, #32]
}
 800a3b2:	bf00      	nop
 800a3b4:	371c      	adds	r7, #28
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b087      	sub	sp, #28
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	f023 0210 	bic.w	r2, r3, #16
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	031b      	lsls	r3, r3, #12
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4313      	orrs	r3, r2
 800a404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	693a      	ldr	r2, [r7, #16]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	f043 0307 	orr.w	r3, r3, #7
 800a440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	609a      	str	r2, [r3, #8]
}
 800a448:	bf00      	nop
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a46e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	021a      	lsls	r2, r3, #8
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	431a      	orrs	r2, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	609a      	str	r2, [r3, #8]
}
 800a488:	bf00      	nop
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	f003 031f 	and.w	r3, r3, #31
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1a      	ldr	r2, [r3, #32]
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	43db      	mvns	r3, r3
 800a4b6:	401a      	ands	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6a1a      	ldr	r2, [r3, #32]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 031f 	and.w	r3, r3, #31
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	621a      	str	r2, [r3, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d101      	bne.n	800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e05a      	b.n	800a5ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2202      	movs	r2, #2
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a21      	ldr	r2, [pc, #132]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d022      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a544:	d01d      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d018      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1b      	ldr	r2, [pc, #108]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d013      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1a      	ldr	r2, [pc, #104]	; (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00e      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a18      	ldr	r2, [pc, #96]	; (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d009      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a17      	ldr	r2, [pc, #92]	; (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d004      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d10c      	bne.n	800a59c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	4313      	orrs	r3, r2
 800a592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40000400 	.word	0x40000400
 800a5c4:	40000800 	.word	0x40000800
 800a5c8:	40000c00 	.word	0x40000c00
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	40014000 	.word	0x40014000
 800a5d4:	40001800 	.word	0x40001800

0800a5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e03f      	b.n	800a692 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fc ff32 	bl	8007490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2224      	movs	r2, #36	; 0x24
 800a630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fcb3 	bl	800afb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	691a      	ldr	r2, [r3, #16]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	695a      	ldr	r2, [r3, #20]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af02      	add	r7, sp, #8
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b20      	cmp	r3, #32
 800a6b8:	f040 8083 	bne.w	800a7c2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <HAL_UART_Transmit+0x2e>
 800a6c2:	88fb      	ldrh	r3, [r7, #6]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e07b      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d101      	bne.n	800a6da <HAL_UART_Transmit+0x40>
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	e074      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2221      	movs	r2, #33	; 0x21
 800a6ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a6f0:	f7fd f846 	bl	8007780 <HAL_GetTick>
 800a6f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	88fa      	ldrh	r2, [r7, #6]
 800a6fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	88fa      	ldrh	r2, [r7, #6]
 800a700:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a70a:	e042      	b.n	800a792 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a710:	b29b      	uxth	r3, r3
 800a712:	3b01      	subs	r3, #1
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a722:	d122      	bne.n	800a76a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2200      	movs	r2, #0
 800a72c:	2180      	movs	r1, #128	; 0x80
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fabe 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e042      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a750:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	3302      	adds	r3, #2
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	e017      	b.n	800a792 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	3301      	adds	r3, #1
 800a766:	60bb      	str	r3, [r7, #8]
 800a768:	e013      	b.n	800a792 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2200      	movs	r2, #0
 800a772:	2180      	movs	r1, #128	; 0x80
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fa9b 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e01f      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	60ba      	str	r2, [r7, #8]
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a796:	b29b      	uxth	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1b7      	bne.n	800a70c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	2140      	movs	r1, #64	; 0x40
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fa82 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e006      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e000      	b.n	800a7c4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a7c2:	2302      	movs	r3, #2
  }
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b20      	cmp	r3, #32
 800a7ea:	f040 8090 	bne.w	800a90e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <HAL_UART_Receive+0x2e>
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e088      	b.n	800a910 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_UART_Receive+0x40>
 800a808:	2302      	movs	r3, #2
 800a80a:	e081      	b.n	800a910 <HAL_UART_Receive+0x144>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2222      	movs	r2, #34	; 0x22
 800a81e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a822:	f7fc ffad 	bl	8007780 <HAL_GetTick>
 800a826:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	88fa      	ldrh	r2, [r7, #6]
 800a832:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a83c:	e05c      	b.n	800a8f8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a842:	b29b      	uxth	r3, r3
 800a844:	3b01      	subs	r3, #1
 800a846:	b29a      	uxth	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d12b      	bne.n	800a8ae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	2120      	movs	r1, #32
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 fa25 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e04f      	b.n	800a910 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10c      	bne.n	800a896 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	b29b      	uxth	r3, r3
 800a884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a888:	b29a      	uxth	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	3302      	adds	r3, #2
 800a892:	60bb      	str	r3, [r7, #8]
 800a894:	e030      	b.n	800a8f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	60bb      	str	r3, [r7, #8]
 800a8ac:	e024      	b.n	800a8f8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2120      	movs	r1, #32
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f9f9 	bl	800acb0 <UART_WaitOnFlagUntilTimeout>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e023      	b.n	800a910 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d108      	bne.n	800a8e2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6859      	ldr	r1, [r3, #4]
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	60ba      	str	r2, [r7, #8]
 800a8dc:	b2ca      	uxtb	r2, r1
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e00a      	b.n	800a8f8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	1c59      	adds	r1, r3, #1
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d19d      	bne.n	800a83e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2220      	movs	r2, #32
 800a906:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	e000      	b.n	800a910 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a90e:	2302      	movs	r3, #2
  }
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b20      	cmp	r3, #32
 800a930:	d140      	bne.n	800a9b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <HAL_UART_Receive_IT+0x26>
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e039      	b.n	800a9b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d101      	bne.n	800a950 <HAL_UART_Receive_IT+0x38>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e032      	b.n	800a9b6 <HAL_UART_Receive_IT+0x9e>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	88fa      	ldrh	r2, [r7, #6]
 800a962:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2222      	movs	r2, #34	; 0x22
 800a974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68da      	ldr	r2, [r3, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a98e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695a      	ldr	r2, [r3, #20]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68da      	ldr	r2, [r3, #12]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0220 	orr.w	r2, r2, #32
 800a9ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e000      	b.n	800a9b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a9b4:	2302      	movs	r3, #2
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68da      	ldr	r2, [r3, #12]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	695a      	ldr	r2, [r3, #20]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f022 0201 	bic.w	r2, r2, #1
 800a9ea:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f6:	2b40      	cmp	r3, #64	; 0x40
 800a9f8:	d12a      	bne.n	800aa50 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	695a      	ldr	r2, [r3, #20]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa08:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d013      	beq.n	800aa3a <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa16:	4a16      	ldr	r2, [pc, #88]	; (800aa70 <HAL_UART_AbortReceive_IT+0xac>)
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fc ffed 	bl	80079fe <HAL_DMA_Abort_IT>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01c      	beq.n	800aa64 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	e014      	b.n	800aa64 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f927 	bl	800ac9c <HAL_UART_AbortReceiveCpltCallback>
 800aa4e:	e009      	b.n	800aa64 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f91c 	bl	800ac9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800ada9 	.word	0x0800ada9

0800aa74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10d      	bne.n	800aac6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d008      	beq.n	800aac6 <HAL_UART_IRQHandler+0x52>
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f9f5 	bl	800aeae <UART_Receive_IT>
      return;
 800aac4:	e0d1      	b.n	800ac6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80b0 	beq.w	800ac2e <HAL_UART_IRQHandler+0x1ba>
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d105      	bne.n	800aae4 <HAL_UART_IRQHandler+0x70>
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 80a5 	beq.w	800ac2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <HAL_UART_IRQHandler+0x90>
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d005      	beq.n	800ab04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafc:	f043 0201 	orr.w	r2, r3, #1
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f003 0304 	and.w	r3, r3, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <HAL_UART_IRQHandler+0xb0>
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1c:	f043 0202 	orr.w	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f003 0302 	and.w	r3, r3, #2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <HAL_UART_IRQHandler+0xd0>
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d005      	beq.n	800ab44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	f043 0204 	orr.w	r2, r3, #4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	f003 0308 	and.w	r3, r3, #8
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00f      	beq.n	800ab6e <HAL_UART_IRQHandler+0xfa>
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	f003 0320 	and.w	r3, r3, #32
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d104      	bne.n	800ab62 <HAL_UART_IRQHandler+0xee>
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d005      	beq.n	800ab6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	f043 0208 	orr.w	r2, r3, #8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d078      	beq.n	800ac68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	f003 0320 	and.w	r3, r3, #32
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d007      	beq.n	800ab90 <HAL_UART_IRQHandler+0x11c>
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f003 0320 	and.w	r3, r3, #32
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f98f 	bl	800aeae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9a:	2b40      	cmp	r3, #64	; 0x40
 800ab9c:	bf0c      	ite	eq
 800ab9e:	2301      	moveq	r3, #1
 800aba0:	2300      	movne	r3, #0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <HAL_UART_IRQHandler+0x144>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d031      	beq.n	800ac1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f8c3 	bl	800ad44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc8:	2b40      	cmp	r3, #64	; 0x40
 800abca:	d123      	bne.n	800ac14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	695a      	ldr	r2, [r3, #20]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d013      	beq.n	800ac0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe8:	4a21      	ldr	r2, [pc, #132]	; (800ac70 <HAL_UART_IRQHandler+0x1fc>)
 800abea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fc ff04 	bl	80079fe <HAL_DMA_Abort_IT>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d016      	beq.n	800ac2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac06:	4610      	mov	r0, r2
 800ac08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac0a:	e00e      	b.n	800ac2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 f83b 	bl	800ac88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac12:	e00a      	b.n	800ac2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f837 	bl	800ac88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac1a:	e006      	b.n	800ac2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f833 	bl	800ac88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ac28:	e01e      	b.n	800ac68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2a:	bf00      	nop
    return;
 800ac2c:	e01c      	b.n	800ac68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d008      	beq.n	800ac4a <HAL_UART_IRQHandler+0x1d6>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f8c5 	bl	800add2 <UART_Transmit_IT>
    return;
 800ac48:	e00f      	b.n	800ac6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <HAL_UART_IRQHandler+0x1f6>
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f90d 	bl	800ae7e <UART_EndTransmit_IT>
    return;
 800ac64:	bf00      	nop
 800ac66:	e000      	b.n	800ac6a <HAL_UART_IRQHandler+0x1f6>
    return;
 800ac68:	bf00      	nop
  }
}
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	0800ad81 	.word	0x0800ad81

0800ac74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc0:	e02c      	b.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d028      	beq.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d007      	beq.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x30>
 800acd0:	f7fc fd56 	bl	8007780 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d21d      	bcs.n	800ad1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	695a      	ldr	r2, [r3, #20]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f022 0201 	bic.w	r2, r2, #1
 800acfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800ad18:	2303      	movs	r3, #3
 800ad1a:	e00f      	b.n	800ad3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	4013      	ands	r3, r2
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	bf0c      	ite	eq
 800ad2c:	2301      	moveq	r3, #1
 800ad2e:	2300      	movne	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	79fb      	ldrb	r3, [r7, #7]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d0c3      	beq.n	800acc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	695a      	ldr	r2, [r3, #20]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0201 	bic.w	r2, r2, #1
 800ad6a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ad74:	bf00      	nop
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff ff74 	bl	800ac88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ada0:	bf00      	nop
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7ff ff69 	bl	800ac9c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adca:	bf00      	nop
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b21      	cmp	r3, #33	; 0x21
 800ade4:	d144      	bne.n	800ae70 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adee:	d11a      	bne.n	800ae26 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a1b      	ldr	r3, [r3, #32]
 800adf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae04:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d105      	bne.n	800ae1a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	1c9a      	adds	r2, r3, #2
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	621a      	str	r2, [r3, #32]
 800ae18:	e00e      	b.n	800ae38 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	621a      	str	r2, [r3, #32]
 800ae24:	e008      	b.n	800ae38 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	1c59      	adds	r1, r3, #1
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6211      	str	r1, [r2, #32]
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	4619      	mov	r1, r3
 800ae46:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10f      	bne.n	800ae6c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68da      	ldr	r2, [r3, #12]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	e000      	b.n	800ae72 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae70:	2302      	movs	r3, #2
  }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff fee8 	bl	800ac74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b22      	cmp	r3, #34	; 0x22
 800aec0:	d171      	bne.n	800afa6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeca:	d123      	bne.n	800af14 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10e      	bne.n	800aef8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	1c9a      	adds	r2, r3, #2
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	629a      	str	r2, [r3, #40]	; 0x28
 800aef6:	e029      	b.n	800af4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	b29b      	uxth	r3, r3
 800af00:	b2db      	uxtb	r3, r3
 800af02:	b29a      	uxth	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	629a      	str	r2, [r3, #40]	; 0x28
 800af12:	e01b      	b.n	800af4c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10a      	bne.n	800af32 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6858      	ldr	r0, [r3, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	1c59      	adds	r1, r3, #1
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6291      	str	r1, [r2, #40]	; 0x28
 800af2c:	b2c2      	uxtb	r2, r0
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	e00c      	b.n	800af4c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3e:	1c58      	adds	r0, r3, #1
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	6288      	str	r0, [r1, #40]	; 0x28
 800af44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af48:	b2d2      	uxtb	r2, r2
 800af4a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af50:	b29b      	uxth	r3, r3
 800af52:	3b01      	subs	r3, #1
 800af54:	b29b      	uxth	r3, r3
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	4619      	mov	r1, r3
 800af5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d120      	bne.n	800afa2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0220 	bic.w	r2, r2, #32
 800af6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	695a      	ldr	r2, [r3, #20]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f022 0201 	bic.w	r2, r2, #1
 800af8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fc f94f 	bl	800723c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e002      	b.n	800afa8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e000      	b.n	800afa8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800afa6:	2302      	movs	r3, #2
  }
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	b085      	sub	sp, #20
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	430a      	orrs	r2, r1
 800afce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	431a      	orrs	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	431a      	orrs	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	69db      	ldr	r3, [r3, #28]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800aff2:	f023 030c 	bic.w	r3, r3, #12
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6812      	ldr	r2, [r2, #0]
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	430b      	orrs	r3, r1
 800affe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	699a      	ldr	r2, [r3, #24]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01e:	f040 818b 	bne.w	800b338 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4ac1      	ldr	r2, [pc, #772]	; (800b32c <UART_SetConfig+0x37c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d005      	beq.n	800b038 <UART_SetConfig+0x88>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4abf      	ldr	r2, [pc, #764]	; (800b330 <UART_SetConfig+0x380>)
 800b032:	4293      	cmp	r3, r2
 800b034:	f040 80bd 	bne.w	800b1b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b038:	f7fd fb50 	bl	80086dc <HAL_RCC_GetPCLK2Freq>
 800b03c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	461d      	mov	r5, r3
 800b042:	f04f 0600 	mov.w	r6, #0
 800b046:	46a8      	mov	r8, r5
 800b048:	46b1      	mov	r9, r6
 800b04a:	eb18 0308 	adds.w	r3, r8, r8
 800b04e:	eb49 0409 	adc.w	r4, r9, r9
 800b052:	4698      	mov	r8, r3
 800b054:	46a1      	mov	r9, r4
 800b056:	eb18 0805 	adds.w	r8, r8, r5
 800b05a:	eb49 0906 	adc.w	r9, r9, r6
 800b05e:	f04f 0100 	mov.w	r1, #0
 800b062:	f04f 0200 	mov.w	r2, #0
 800b066:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b06a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b06e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b072:	4688      	mov	r8, r1
 800b074:	4691      	mov	r9, r2
 800b076:	eb18 0005 	adds.w	r0, r8, r5
 800b07a:	eb49 0106 	adc.w	r1, r9, r6
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	461d      	mov	r5, r3
 800b084:	f04f 0600 	mov.w	r6, #0
 800b088:	196b      	adds	r3, r5, r5
 800b08a:	eb46 0406 	adc.w	r4, r6, r6
 800b08e:	461a      	mov	r2, r3
 800b090:	4623      	mov	r3, r4
 800b092:	f7f5 fd99 	bl	8000bc8 <__aeabi_uldivmod>
 800b096:	4603      	mov	r3, r0
 800b098:	460c      	mov	r4, r1
 800b09a:	461a      	mov	r2, r3
 800b09c:	4ba5      	ldr	r3, [pc, #660]	; (800b334 <UART_SetConfig+0x384>)
 800b09e:	fba3 2302 	umull	r2, r3, r3, r2
 800b0a2:	095b      	lsrs	r3, r3, #5
 800b0a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	461d      	mov	r5, r3
 800b0ac:	f04f 0600 	mov.w	r6, #0
 800b0b0:	46a9      	mov	r9, r5
 800b0b2:	46b2      	mov	sl, r6
 800b0b4:	eb19 0309 	adds.w	r3, r9, r9
 800b0b8:	eb4a 040a 	adc.w	r4, sl, sl
 800b0bc:	4699      	mov	r9, r3
 800b0be:	46a2      	mov	sl, r4
 800b0c0:	eb19 0905 	adds.w	r9, r9, r5
 800b0c4:	eb4a 0a06 	adc.w	sl, sl, r6
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b0d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b0dc:	4689      	mov	r9, r1
 800b0de:	4692      	mov	sl, r2
 800b0e0:	eb19 0005 	adds.w	r0, r9, r5
 800b0e4:	eb4a 0106 	adc.w	r1, sl, r6
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	f04f 0600 	mov.w	r6, #0
 800b0f2:	196b      	adds	r3, r5, r5
 800b0f4:	eb46 0406 	adc.w	r4, r6, r6
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	f7f5 fd64 	bl	8000bc8 <__aeabi_uldivmod>
 800b100:	4603      	mov	r3, r0
 800b102:	460c      	mov	r4, r1
 800b104:	461a      	mov	r2, r3
 800b106:	4b8b      	ldr	r3, [pc, #556]	; (800b334 <UART_SetConfig+0x384>)
 800b108:	fba3 1302 	umull	r1, r3, r3, r2
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	2164      	movs	r1, #100	; 0x64
 800b110:	fb01 f303 	mul.w	r3, r1, r3
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	3332      	adds	r3, #50	; 0x32
 800b11a:	4a86      	ldr	r2, [pc, #536]	; (800b334 <UART_SetConfig+0x384>)
 800b11c:	fba2 2303 	umull	r2, r3, r2, r3
 800b120:	095b      	lsrs	r3, r3, #5
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b128:	4498      	add	r8, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	461d      	mov	r5, r3
 800b12e:	f04f 0600 	mov.w	r6, #0
 800b132:	46a9      	mov	r9, r5
 800b134:	46b2      	mov	sl, r6
 800b136:	eb19 0309 	adds.w	r3, r9, r9
 800b13a:	eb4a 040a 	adc.w	r4, sl, sl
 800b13e:	4699      	mov	r9, r3
 800b140:	46a2      	mov	sl, r4
 800b142:	eb19 0905 	adds.w	r9, r9, r5
 800b146:	eb4a 0a06 	adc.w	sl, sl, r6
 800b14a:	f04f 0100 	mov.w	r1, #0
 800b14e:	f04f 0200 	mov.w	r2, #0
 800b152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b15a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b15e:	4689      	mov	r9, r1
 800b160:	4692      	mov	sl, r2
 800b162:	eb19 0005 	adds.w	r0, r9, r5
 800b166:	eb4a 0106 	adc.w	r1, sl, r6
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	461d      	mov	r5, r3
 800b170:	f04f 0600 	mov.w	r6, #0
 800b174:	196b      	adds	r3, r5, r5
 800b176:	eb46 0406 	adc.w	r4, r6, r6
 800b17a:	461a      	mov	r2, r3
 800b17c:	4623      	mov	r3, r4
 800b17e:	f7f5 fd23 	bl	8000bc8 <__aeabi_uldivmod>
 800b182:	4603      	mov	r3, r0
 800b184:	460c      	mov	r4, r1
 800b186:	461a      	mov	r2, r3
 800b188:	4b6a      	ldr	r3, [pc, #424]	; (800b334 <UART_SetConfig+0x384>)
 800b18a:	fba3 1302 	umull	r1, r3, r3, r2
 800b18e:	095b      	lsrs	r3, r3, #5
 800b190:	2164      	movs	r1, #100	; 0x64
 800b192:	fb01 f303 	mul.w	r3, r1, r3
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	3332      	adds	r3, #50	; 0x32
 800b19c:	4a65      	ldr	r2, [pc, #404]	; (800b334 <UART_SetConfig+0x384>)
 800b19e:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a2:	095b      	lsrs	r3, r3, #5
 800b1a4:	f003 0207 	and.w	r2, r3, #7
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4442      	add	r2, r8
 800b1ae:	609a      	str	r2, [r3, #8]
 800b1b0:	e26f      	b.n	800b692 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b1b2:	f7fd fa7f 	bl	80086b4 <HAL_RCC_GetPCLK1Freq>
 800b1b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	461d      	mov	r5, r3
 800b1bc:	f04f 0600 	mov.w	r6, #0
 800b1c0:	46a8      	mov	r8, r5
 800b1c2:	46b1      	mov	r9, r6
 800b1c4:	eb18 0308 	adds.w	r3, r8, r8
 800b1c8:	eb49 0409 	adc.w	r4, r9, r9
 800b1cc:	4698      	mov	r8, r3
 800b1ce:	46a1      	mov	r9, r4
 800b1d0:	eb18 0805 	adds.w	r8, r8, r5
 800b1d4:	eb49 0906 	adc.w	r9, r9, r6
 800b1d8:	f04f 0100 	mov.w	r1, #0
 800b1dc:	f04f 0200 	mov.w	r2, #0
 800b1e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b1e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b1e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b1ec:	4688      	mov	r8, r1
 800b1ee:	4691      	mov	r9, r2
 800b1f0:	eb18 0005 	adds.w	r0, r8, r5
 800b1f4:	eb49 0106 	adc.w	r1, r9, r6
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	461d      	mov	r5, r3
 800b1fe:	f04f 0600 	mov.w	r6, #0
 800b202:	196b      	adds	r3, r5, r5
 800b204:	eb46 0406 	adc.w	r4, r6, r6
 800b208:	461a      	mov	r2, r3
 800b20a:	4623      	mov	r3, r4
 800b20c:	f7f5 fcdc 	bl	8000bc8 <__aeabi_uldivmod>
 800b210:	4603      	mov	r3, r0
 800b212:	460c      	mov	r4, r1
 800b214:	461a      	mov	r2, r3
 800b216:	4b47      	ldr	r3, [pc, #284]	; (800b334 <UART_SetConfig+0x384>)
 800b218:	fba3 2302 	umull	r2, r3, r3, r2
 800b21c:	095b      	lsrs	r3, r3, #5
 800b21e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	461d      	mov	r5, r3
 800b226:	f04f 0600 	mov.w	r6, #0
 800b22a:	46a9      	mov	r9, r5
 800b22c:	46b2      	mov	sl, r6
 800b22e:	eb19 0309 	adds.w	r3, r9, r9
 800b232:	eb4a 040a 	adc.w	r4, sl, sl
 800b236:	4699      	mov	r9, r3
 800b238:	46a2      	mov	sl, r4
 800b23a:	eb19 0905 	adds.w	r9, r9, r5
 800b23e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b242:	f04f 0100 	mov.w	r1, #0
 800b246:	f04f 0200 	mov.w	r2, #0
 800b24a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b24e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b252:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b256:	4689      	mov	r9, r1
 800b258:	4692      	mov	sl, r2
 800b25a:	eb19 0005 	adds.w	r0, r9, r5
 800b25e:	eb4a 0106 	adc.w	r1, sl, r6
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	461d      	mov	r5, r3
 800b268:	f04f 0600 	mov.w	r6, #0
 800b26c:	196b      	adds	r3, r5, r5
 800b26e:	eb46 0406 	adc.w	r4, r6, r6
 800b272:	461a      	mov	r2, r3
 800b274:	4623      	mov	r3, r4
 800b276:	f7f5 fca7 	bl	8000bc8 <__aeabi_uldivmod>
 800b27a:	4603      	mov	r3, r0
 800b27c:	460c      	mov	r4, r1
 800b27e:	461a      	mov	r2, r3
 800b280:	4b2c      	ldr	r3, [pc, #176]	; (800b334 <UART_SetConfig+0x384>)
 800b282:	fba3 1302 	umull	r1, r3, r3, r2
 800b286:	095b      	lsrs	r3, r3, #5
 800b288:	2164      	movs	r1, #100	; 0x64
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	3332      	adds	r3, #50	; 0x32
 800b294:	4a27      	ldr	r2, [pc, #156]	; (800b334 <UART_SetConfig+0x384>)
 800b296:	fba2 2303 	umull	r2, r3, r2, r3
 800b29a:	095b      	lsrs	r3, r3, #5
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2a2:	4498      	add	r8, r3
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	461d      	mov	r5, r3
 800b2a8:	f04f 0600 	mov.w	r6, #0
 800b2ac:	46a9      	mov	r9, r5
 800b2ae:	46b2      	mov	sl, r6
 800b2b0:	eb19 0309 	adds.w	r3, r9, r9
 800b2b4:	eb4a 040a 	adc.w	r4, sl, sl
 800b2b8:	4699      	mov	r9, r3
 800b2ba:	46a2      	mov	sl, r4
 800b2bc:	eb19 0905 	adds.w	r9, r9, r5
 800b2c0:	eb4a 0a06 	adc.w	sl, sl, r6
 800b2c4:	f04f 0100 	mov.w	r1, #0
 800b2c8:	f04f 0200 	mov.w	r2, #0
 800b2cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2d8:	4689      	mov	r9, r1
 800b2da:	4692      	mov	sl, r2
 800b2dc:	eb19 0005 	adds.w	r0, r9, r5
 800b2e0:	eb4a 0106 	adc.w	r1, sl, r6
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	f04f 0600 	mov.w	r6, #0
 800b2ee:	196b      	adds	r3, r5, r5
 800b2f0:	eb46 0406 	adc.w	r4, r6, r6
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4623      	mov	r3, r4
 800b2f8:	f7f5 fc66 	bl	8000bc8 <__aeabi_uldivmod>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	461a      	mov	r2, r3
 800b302:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <UART_SetConfig+0x384>)
 800b304:	fba3 1302 	umull	r1, r3, r3, r2
 800b308:	095b      	lsrs	r3, r3, #5
 800b30a:	2164      	movs	r1, #100	; 0x64
 800b30c:	fb01 f303 	mul.w	r3, r1, r3
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	3332      	adds	r3, #50	; 0x32
 800b316:	4a07      	ldr	r2, [pc, #28]	; (800b334 <UART_SetConfig+0x384>)
 800b318:	fba2 2303 	umull	r2, r3, r2, r3
 800b31c:	095b      	lsrs	r3, r3, #5
 800b31e:	f003 0207 	and.w	r2, r3, #7
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4442      	add	r2, r8
 800b328:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b32a:	e1b2      	b.n	800b692 <UART_SetConfig+0x6e2>
 800b32c:	40011000 	.word	0x40011000
 800b330:	40011400 	.word	0x40011400
 800b334:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4ad7      	ldr	r2, [pc, #860]	; (800b69c <UART_SetConfig+0x6ec>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d005      	beq.n	800b34e <UART_SetConfig+0x39e>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4ad6      	ldr	r2, [pc, #856]	; (800b6a0 <UART_SetConfig+0x6f0>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	f040 80d1 	bne.w	800b4f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b34e:	f7fd f9c5 	bl	80086dc <HAL_RCC_GetPCLK2Freq>
 800b352:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	469a      	mov	sl, r3
 800b358:	f04f 0b00 	mov.w	fp, #0
 800b35c:	46d0      	mov	r8, sl
 800b35e:	46d9      	mov	r9, fp
 800b360:	eb18 0308 	adds.w	r3, r8, r8
 800b364:	eb49 0409 	adc.w	r4, r9, r9
 800b368:	4698      	mov	r8, r3
 800b36a:	46a1      	mov	r9, r4
 800b36c:	eb18 080a 	adds.w	r8, r8, sl
 800b370:	eb49 090b 	adc.w	r9, r9, fp
 800b374:	f04f 0100 	mov.w	r1, #0
 800b378:	f04f 0200 	mov.w	r2, #0
 800b37c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b380:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b384:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b388:	4688      	mov	r8, r1
 800b38a:	4691      	mov	r9, r2
 800b38c:	eb1a 0508 	adds.w	r5, sl, r8
 800b390:	eb4b 0609 	adc.w	r6, fp, r9
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	4619      	mov	r1, r3
 800b39a:	f04f 0200 	mov.w	r2, #0
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	f04f 0400 	mov.w	r4, #0
 800b3a6:	0094      	lsls	r4, r2, #2
 800b3a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b3ac:	008b      	lsls	r3, r1, #2
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4623      	mov	r3, r4
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	f7f5 fc07 	bl	8000bc8 <__aeabi_uldivmod>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	460c      	mov	r4, r1
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4bb8      	ldr	r3, [pc, #736]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b3c2:	fba3 2302 	umull	r2, r3, r3, r2
 800b3c6:	095b      	lsrs	r3, r3, #5
 800b3c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	469b      	mov	fp, r3
 800b3d0:	f04f 0c00 	mov.w	ip, #0
 800b3d4:	46d9      	mov	r9, fp
 800b3d6:	46e2      	mov	sl, ip
 800b3d8:	eb19 0309 	adds.w	r3, r9, r9
 800b3dc:	eb4a 040a 	adc.w	r4, sl, sl
 800b3e0:	4699      	mov	r9, r3
 800b3e2:	46a2      	mov	sl, r4
 800b3e4:	eb19 090b 	adds.w	r9, r9, fp
 800b3e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b3ec:	f04f 0100 	mov.w	r1, #0
 800b3f0:	f04f 0200 	mov.w	r2, #0
 800b3f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b400:	4689      	mov	r9, r1
 800b402:	4692      	mov	sl, r2
 800b404:	eb1b 0509 	adds.w	r5, fp, r9
 800b408:	eb4c 060a 	adc.w	r6, ip, sl
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4619      	mov	r1, r3
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	f04f 0300 	mov.w	r3, #0
 800b41a:	f04f 0400 	mov.w	r4, #0
 800b41e:	0094      	lsls	r4, r2, #2
 800b420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b424:	008b      	lsls	r3, r1, #2
 800b426:	461a      	mov	r2, r3
 800b428:	4623      	mov	r3, r4
 800b42a:	4628      	mov	r0, r5
 800b42c:	4631      	mov	r1, r6
 800b42e:	f7f5 fbcb 	bl	8000bc8 <__aeabi_uldivmod>
 800b432:	4603      	mov	r3, r0
 800b434:	460c      	mov	r4, r1
 800b436:	461a      	mov	r2, r3
 800b438:	4b9a      	ldr	r3, [pc, #616]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b43a:	fba3 1302 	umull	r1, r3, r3, r2
 800b43e:	095b      	lsrs	r3, r3, #5
 800b440:	2164      	movs	r1, #100	; 0x64
 800b442:	fb01 f303 	mul.w	r3, r1, r3
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	3332      	adds	r3, #50	; 0x32
 800b44c:	4a95      	ldr	r2, [pc, #596]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b44e:	fba2 2303 	umull	r2, r3, r2, r3
 800b452:	095b      	lsrs	r3, r3, #5
 800b454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b458:	4498      	add	r8, r3
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	469b      	mov	fp, r3
 800b45e:	f04f 0c00 	mov.w	ip, #0
 800b462:	46d9      	mov	r9, fp
 800b464:	46e2      	mov	sl, ip
 800b466:	eb19 0309 	adds.w	r3, r9, r9
 800b46a:	eb4a 040a 	adc.w	r4, sl, sl
 800b46e:	4699      	mov	r9, r3
 800b470:	46a2      	mov	sl, r4
 800b472:	eb19 090b 	adds.w	r9, r9, fp
 800b476:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b47a:	f04f 0100 	mov.w	r1, #0
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b48a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b48e:	4689      	mov	r9, r1
 800b490:	4692      	mov	sl, r2
 800b492:	eb1b 0509 	adds.w	r5, fp, r9
 800b496:	eb4c 060a 	adc.w	r6, ip, sl
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	f04f 0300 	mov.w	r3, #0
 800b4a8:	f04f 0400 	mov.w	r4, #0
 800b4ac:	0094      	lsls	r4, r2, #2
 800b4ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b4b2:	008b      	lsls	r3, r1, #2
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	f7f5 fb84 	bl	8000bc8 <__aeabi_uldivmod>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4b77      	ldr	r3, [pc, #476]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b4c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b4cc:	095b      	lsrs	r3, r3, #5
 800b4ce:	2164      	movs	r1, #100	; 0x64
 800b4d0:	fb01 f303 	mul.w	r3, r1, r3
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	011b      	lsls	r3, r3, #4
 800b4d8:	3332      	adds	r3, #50	; 0x32
 800b4da:	4a72      	ldr	r2, [pc, #456]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e0:	095b      	lsrs	r3, r3, #5
 800b4e2:	f003 020f 	and.w	r2, r3, #15
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4442      	add	r2, r8
 800b4ec:	609a      	str	r2, [r3, #8]
 800b4ee:	e0d0      	b.n	800b692 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4f0:	f7fd f8e0 	bl	80086b4 <HAL_RCC_GetPCLK1Freq>
 800b4f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	469a      	mov	sl, r3
 800b4fa:	f04f 0b00 	mov.w	fp, #0
 800b4fe:	46d0      	mov	r8, sl
 800b500:	46d9      	mov	r9, fp
 800b502:	eb18 0308 	adds.w	r3, r8, r8
 800b506:	eb49 0409 	adc.w	r4, r9, r9
 800b50a:	4698      	mov	r8, r3
 800b50c:	46a1      	mov	r9, r4
 800b50e:	eb18 080a 	adds.w	r8, r8, sl
 800b512:	eb49 090b 	adc.w	r9, r9, fp
 800b516:	f04f 0100 	mov.w	r1, #0
 800b51a:	f04f 0200 	mov.w	r2, #0
 800b51e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b522:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b526:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b52a:	4688      	mov	r8, r1
 800b52c:	4691      	mov	r9, r2
 800b52e:	eb1a 0508 	adds.w	r5, sl, r8
 800b532:	eb4b 0609 	adc.w	r6, fp, r9
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	4619      	mov	r1, r3
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	f04f 0400 	mov.w	r4, #0
 800b548:	0094      	lsls	r4, r2, #2
 800b54a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b54e:	008b      	lsls	r3, r1, #2
 800b550:	461a      	mov	r2, r3
 800b552:	4623      	mov	r3, r4
 800b554:	4628      	mov	r0, r5
 800b556:	4631      	mov	r1, r6
 800b558:	f7f5 fb36 	bl	8000bc8 <__aeabi_uldivmod>
 800b55c:	4603      	mov	r3, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	461a      	mov	r2, r3
 800b562:	4b50      	ldr	r3, [pc, #320]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b564:	fba3 2302 	umull	r2, r3, r3, r2
 800b568:	095b      	lsrs	r3, r3, #5
 800b56a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	469b      	mov	fp, r3
 800b572:	f04f 0c00 	mov.w	ip, #0
 800b576:	46d9      	mov	r9, fp
 800b578:	46e2      	mov	sl, ip
 800b57a:	eb19 0309 	adds.w	r3, r9, r9
 800b57e:	eb4a 040a 	adc.w	r4, sl, sl
 800b582:	4699      	mov	r9, r3
 800b584:	46a2      	mov	sl, r4
 800b586:	eb19 090b 	adds.w	r9, r9, fp
 800b58a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b58e:	f04f 0100 	mov.w	r1, #0
 800b592:	f04f 0200 	mov.w	r2, #0
 800b596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b59a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b59e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5a2:	4689      	mov	r9, r1
 800b5a4:	4692      	mov	sl, r2
 800b5a6:	eb1b 0509 	adds.w	r5, fp, r9
 800b5aa:	eb4c 060a 	adc.w	r6, ip, sl
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	f04f 0200 	mov.w	r2, #0
 800b5b8:	f04f 0300 	mov.w	r3, #0
 800b5bc:	f04f 0400 	mov.w	r4, #0
 800b5c0:	0094      	lsls	r4, r2, #2
 800b5c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b5c6:	008b      	lsls	r3, r1, #2
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4623      	mov	r3, r4
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	f7f5 fafa 	bl	8000bc8 <__aeabi_uldivmod>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	461a      	mov	r2, r3
 800b5da:	4b32      	ldr	r3, [pc, #200]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b5e0:	095b      	lsrs	r3, r3, #5
 800b5e2:	2164      	movs	r1, #100	; 0x64
 800b5e4:	fb01 f303 	mul.w	r3, r1, r3
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	3332      	adds	r3, #50	; 0x32
 800b5ee:	4a2d      	ldr	r2, [pc, #180]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f4:	095b      	lsrs	r3, r3, #5
 800b5f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5fa:	4498      	add	r8, r3
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	469b      	mov	fp, r3
 800b600:	f04f 0c00 	mov.w	ip, #0
 800b604:	46d9      	mov	r9, fp
 800b606:	46e2      	mov	sl, ip
 800b608:	eb19 0309 	adds.w	r3, r9, r9
 800b60c:	eb4a 040a 	adc.w	r4, sl, sl
 800b610:	4699      	mov	r9, r3
 800b612:	46a2      	mov	sl, r4
 800b614:	eb19 090b 	adds.w	r9, r9, fp
 800b618:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b61c:	f04f 0100 	mov.w	r1, #0
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b62c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b630:	4689      	mov	r9, r1
 800b632:	4692      	mov	sl, r2
 800b634:	eb1b 0509 	adds.w	r5, fp, r9
 800b638:	eb4c 060a 	adc.w	r6, ip, sl
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	4619      	mov	r1, r3
 800b642:	f04f 0200 	mov.w	r2, #0
 800b646:	f04f 0300 	mov.w	r3, #0
 800b64a:	f04f 0400 	mov.w	r4, #0
 800b64e:	0094      	lsls	r4, r2, #2
 800b650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b654:	008b      	lsls	r3, r1, #2
 800b656:	461a      	mov	r2, r3
 800b658:	4623      	mov	r3, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	4631      	mov	r1, r6
 800b65e:	f7f5 fab3 	bl	8000bc8 <__aeabi_uldivmod>
 800b662:	4603      	mov	r3, r0
 800b664:	460c      	mov	r4, r1
 800b666:	461a      	mov	r2, r3
 800b668:	4b0e      	ldr	r3, [pc, #56]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b66a:	fba3 1302 	umull	r1, r3, r3, r2
 800b66e:	095b      	lsrs	r3, r3, #5
 800b670:	2164      	movs	r1, #100	; 0x64
 800b672:	fb01 f303 	mul.w	r3, r1, r3
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	011b      	lsls	r3, r3, #4
 800b67a:	3332      	adds	r3, #50	; 0x32
 800b67c:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <UART_SetConfig+0x6f4>)
 800b67e:	fba2 2303 	umull	r2, r3, r2, r3
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	f003 020f 	and.w	r2, r3, #15
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4442      	add	r2, r8
 800b68e:	609a      	str	r2, [r3, #8]
}
 800b690:	e7ff      	b.n	800b692 <UART_SetConfig+0x6e2>
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69c:	40011000 	.word	0x40011000
 800b6a0:	40011400 	.word	0x40011400
 800b6a4:	51eb851f 	.word	0x51eb851f

0800b6a8 <atoi>:
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	f000 bd40 	b.w	800c130 <strtol>

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	; (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000068 	.word	0x20000068

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4e0d      	ldr	r6, [pc, #52]	; (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	; (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1ba4      	subs	r4, r4, r6
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	42a5      	cmp	r5, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4e0b      	ldr	r6, [pc, #44]	; (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	; (800b700 <__libc_init_array+0x44>)
 800b6d0:	f002 f90a 	bl	800d8e8 <_init>
 800b6d4:	1ba4      	subs	r4, r4, r6
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2500      	movs	r5, #0
 800b6da:	42a5      	cmp	r5, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6e4:	4798      	blx	r3
 800b6e6:	3501      	adds	r5, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6ee:	4798      	blx	r3
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	0800df58 	.word	0x0800df58
 800b6f8:	0800df58 	.word	0x0800df58
 800b6fc:	0800df58 	.word	0x0800df58
 800b700:	0800df5c 	.word	0x0800df5c

0800b704 <memset>:
 800b704:	4402      	add	r2, r0
 800b706:	4603      	mov	r3, r0
 800b708:	4293      	cmp	r3, r2
 800b70a:	d100      	bne.n	800b70e <memset+0xa>
 800b70c:	4770      	bx	lr
 800b70e:	f803 1b01 	strb.w	r1, [r3], #1
 800b712:	e7f9      	b.n	800b708 <memset+0x4>

0800b714 <__cvt>:
 800b714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b718:	ec55 4b10 	vmov	r4, r5, d0
 800b71c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b71e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b722:	2d00      	cmp	r5, #0
 800b724:	460e      	mov	r6, r1
 800b726:	4691      	mov	r9, r2
 800b728:	4619      	mov	r1, r3
 800b72a:	bfb8      	it	lt
 800b72c:	4622      	movlt	r2, r4
 800b72e:	462b      	mov	r3, r5
 800b730:	f027 0720 	bic.w	r7, r7, #32
 800b734:	bfbb      	ittet	lt
 800b736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b73a:	461d      	movlt	r5, r3
 800b73c:	2300      	movge	r3, #0
 800b73e:	232d      	movlt	r3, #45	; 0x2d
 800b740:	bfb8      	it	lt
 800b742:	4614      	movlt	r4, r2
 800b744:	2f46      	cmp	r7, #70	; 0x46
 800b746:	700b      	strb	r3, [r1, #0]
 800b748:	d004      	beq.n	800b754 <__cvt+0x40>
 800b74a:	2f45      	cmp	r7, #69	; 0x45
 800b74c:	d100      	bne.n	800b750 <__cvt+0x3c>
 800b74e:	3601      	adds	r6, #1
 800b750:	2102      	movs	r1, #2
 800b752:	e000      	b.n	800b756 <__cvt+0x42>
 800b754:	2103      	movs	r1, #3
 800b756:	ab03      	add	r3, sp, #12
 800b758:	9301      	str	r3, [sp, #4]
 800b75a:	ab02      	add	r3, sp, #8
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	4632      	mov	r2, r6
 800b760:	4653      	mov	r3, sl
 800b762:	ec45 4b10 	vmov	d0, r4, r5
 800b766:	f000 fd87 	bl	800c278 <_dtoa_r>
 800b76a:	2f47      	cmp	r7, #71	; 0x47
 800b76c:	4680      	mov	r8, r0
 800b76e:	d102      	bne.n	800b776 <__cvt+0x62>
 800b770:	f019 0f01 	tst.w	r9, #1
 800b774:	d026      	beq.n	800b7c4 <__cvt+0xb0>
 800b776:	2f46      	cmp	r7, #70	; 0x46
 800b778:	eb08 0906 	add.w	r9, r8, r6
 800b77c:	d111      	bne.n	800b7a2 <__cvt+0x8e>
 800b77e:	f898 3000 	ldrb.w	r3, [r8]
 800b782:	2b30      	cmp	r3, #48	; 0x30
 800b784:	d10a      	bne.n	800b79c <__cvt+0x88>
 800b786:	2200      	movs	r2, #0
 800b788:	2300      	movs	r3, #0
 800b78a:	4620      	mov	r0, r4
 800b78c:	4629      	mov	r1, r5
 800b78e:	f7f5 f9ab 	bl	8000ae8 <__aeabi_dcmpeq>
 800b792:	b918      	cbnz	r0, 800b79c <__cvt+0x88>
 800b794:	f1c6 0601 	rsb	r6, r6, #1
 800b798:	f8ca 6000 	str.w	r6, [sl]
 800b79c:	f8da 3000 	ldr.w	r3, [sl]
 800b7a0:	4499      	add	r9, r3
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f99d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7ae:	b938      	cbnz	r0, 800b7c0 <__cvt+0xac>
 800b7b0:	2230      	movs	r2, #48	; 0x30
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	454b      	cmp	r3, r9
 800b7b6:	d205      	bcs.n	800b7c4 <__cvt+0xb0>
 800b7b8:	1c59      	adds	r1, r3, #1
 800b7ba:	9103      	str	r1, [sp, #12]
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	e7f8      	b.n	800b7b2 <__cvt+0x9e>
 800b7c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7c8:	eba3 0308 	sub.w	r3, r3, r8
 800b7cc:	4640      	mov	r0, r8
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	b004      	add	sp, #16
 800b7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b7d6 <__exponent>:
 800b7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	bfba      	itte	lt
 800b7de:	4249      	neglt	r1, r1
 800b7e0:	232d      	movlt	r3, #45	; 0x2d
 800b7e2:	232b      	movge	r3, #43	; 0x2b
 800b7e4:	2909      	cmp	r1, #9
 800b7e6:	f804 2b02 	strb.w	r2, [r4], #2
 800b7ea:	7043      	strb	r3, [r0, #1]
 800b7ec:	dd20      	ble.n	800b830 <__exponent+0x5a>
 800b7ee:	f10d 0307 	add.w	r3, sp, #7
 800b7f2:	461f      	mov	r7, r3
 800b7f4:	260a      	movs	r6, #10
 800b7f6:	fb91 f5f6 	sdiv	r5, r1, r6
 800b7fa:	fb06 1115 	mls	r1, r6, r5, r1
 800b7fe:	3130      	adds	r1, #48	; 0x30
 800b800:	2d09      	cmp	r5, #9
 800b802:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b806:	f103 32ff 	add.w	r2, r3, #4294967295
 800b80a:	4629      	mov	r1, r5
 800b80c:	dc09      	bgt.n	800b822 <__exponent+0x4c>
 800b80e:	3130      	adds	r1, #48	; 0x30
 800b810:	3b02      	subs	r3, #2
 800b812:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b816:	42bb      	cmp	r3, r7
 800b818:	4622      	mov	r2, r4
 800b81a:	d304      	bcc.n	800b826 <__exponent+0x50>
 800b81c:	1a10      	subs	r0, r2, r0
 800b81e:	b003      	add	sp, #12
 800b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b822:	4613      	mov	r3, r2
 800b824:	e7e7      	b.n	800b7f6 <__exponent+0x20>
 800b826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82a:	f804 2b01 	strb.w	r2, [r4], #1
 800b82e:	e7f2      	b.n	800b816 <__exponent+0x40>
 800b830:	2330      	movs	r3, #48	; 0x30
 800b832:	4419      	add	r1, r3
 800b834:	7083      	strb	r3, [r0, #2]
 800b836:	1d02      	adds	r2, r0, #4
 800b838:	70c1      	strb	r1, [r0, #3]
 800b83a:	e7ef      	b.n	800b81c <__exponent+0x46>

0800b83c <_printf_float>:
 800b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b840:	b08d      	sub	sp, #52	; 0x34
 800b842:	460c      	mov	r4, r1
 800b844:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b848:	4616      	mov	r6, r2
 800b84a:	461f      	mov	r7, r3
 800b84c:	4605      	mov	r5, r0
 800b84e:	f001 facf 	bl	800cdf0 <_localeconv_r>
 800b852:	6803      	ldr	r3, [r0, #0]
 800b854:	9304      	str	r3, [sp, #16]
 800b856:	4618      	mov	r0, r3
 800b858:	f7f4 fcc4 	bl	80001e4 <strlen>
 800b85c:	2300      	movs	r3, #0
 800b85e:	930a      	str	r3, [sp, #40]	; 0x28
 800b860:	f8d8 3000 	ldr.w	r3, [r8]
 800b864:	9005      	str	r0, [sp, #20]
 800b866:	3307      	adds	r3, #7
 800b868:	f023 0307 	bic.w	r3, r3, #7
 800b86c:	f103 0208 	add.w	r2, r3, #8
 800b870:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b874:	f8d4 b000 	ldr.w	fp, [r4]
 800b878:	f8c8 2000 	str.w	r2, [r8]
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b884:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b888:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b88c:	9307      	str	r3, [sp, #28]
 800b88e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b892:	f04f 32ff 	mov.w	r2, #4294967295
 800b896:	4ba7      	ldr	r3, [pc, #668]	; (800bb34 <_printf_float+0x2f8>)
 800b898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89c:	f7f5 f956 	bl	8000b4c <__aeabi_dcmpun>
 800b8a0:	bb70      	cbnz	r0, 800b900 <_printf_float+0xc4>
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a6:	4ba3      	ldr	r3, [pc, #652]	; (800bb34 <_printf_float+0x2f8>)
 800b8a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8ac:	f7f5 f930 	bl	8000b10 <__aeabi_dcmple>
 800b8b0:	bb30      	cbnz	r0, 800b900 <_printf_float+0xc4>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4640      	mov	r0, r8
 800b8b8:	4649      	mov	r1, r9
 800b8ba:	f7f5 f91f 	bl	8000afc <__aeabi_dcmplt>
 800b8be:	b110      	cbz	r0, 800b8c6 <_printf_float+0x8a>
 800b8c0:	232d      	movs	r3, #45	; 0x2d
 800b8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c6:	4a9c      	ldr	r2, [pc, #624]	; (800bb38 <_printf_float+0x2fc>)
 800b8c8:	4b9c      	ldr	r3, [pc, #624]	; (800bb3c <_printf_float+0x300>)
 800b8ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b8ce:	bf8c      	ite	hi
 800b8d0:	4690      	movhi	r8, r2
 800b8d2:	4698      	movls	r8, r3
 800b8d4:	2303      	movs	r3, #3
 800b8d6:	f02b 0204 	bic.w	r2, fp, #4
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	6022      	str	r2, [r4, #0]
 800b8de:	f04f 0900 	mov.w	r9, #0
 800b8e2:	9700      	str	r7, [sp, #0]
 800b8e4:	4633      	mov	r3, r6
 800b8e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f000 f9e6 	bl	800bcbc <_printf_common>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	f040 808d 	bne.w	800ba10 <_printf_float+0x1d4>
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fa:	b00d      	add	sp, #52	; 0x34
 800b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b900:	4642      	mov	r2, r8
 800b902:	464b      	mov	r3, r9
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	f7f5 f920 	bl	8000b4c <__aeabi_dcmpun>
 800b90c:	b110      	cbz	r0, 800b914 <_printf_float+0xd8>
 800b90e:	4a8c      	ldr	r2, [pc, #560]	; (800bb40 <_printf_float+0x304>)
 800b910:	4b8c      	ldr	r3, [pc, #560]	; (800bb44 <_printf_float+0x308>)
 800b912:	e7da      	b.n	800b8ca <_printf_float+0x8e>
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	1c4b      	adds	r3, r1, #1
 800b918:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b91c:	a80a      	add	r0, sp, #40	; 0x28
 800b91e:	d13e      	bne.n	800b99e <_printf_float+0x162>
 800b920:	2306      	movs	r3, #6
 800b922:	6063      	str	r3, [r4, #4]
 800b924:	2300      	movs	r3, #0
 800b926:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b92a:	ab09      	add	r3, sp, #36	; 0x24
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	ec49 8b10 	vmov	d0, r8, r9
 800b932:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b936:	6022      	str	r2, [r4, #0]
 800b938:	f8cd a004 	str.w	sl, [sp, #4]
 800b93c:	6861      	ldr	r1, [r4, #4]
 800b93e:	4628      	mov	r0, r5
 800b940:	f7ff fee8 	bl	800b714 <__cvt>
 800b944:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b948:	2b47      	cmp	r3, #71	; 0x47
 800b94a:	4680      	mov	r8, r0
 800b94c:	d109      	bne.n	800b962 <_printf_float+0x126>
 800b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b950:	1cd8      	adds	r0, r3, #3
 800b952:	db02      	blt.n	800b95a <_printf_float+0x11e>
 800b954:	6862      	ldr	r2, [r4, #4]
 800b956:	4293      	cmp	r3, r2
 800b958:	dd47      	ble.n	800b9ea <_printf_float+0x1ae>
 800b95a:	f1aa 0a02 	sub.w	sl, sl, #2
 800b95e:	fa5f fa8a 	uxtb.w	sl, sl
 800b962:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b966:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b968:	d824      	bhi.n	800b9b4 <_printf_float+0x178>
 800b96a:	3901      	subs	r1, #1
 800b96c:	4652      	mov	r2, sl
 800b96e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b972:	9109      	str	r1, [sp, #36]	; 0x24
 800b974:	f7ff ff2f 	bl	800b7d6 <__exponent>
 800b978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b97a:	1813      	adds	r3, r2, r0
 800b97c:	2a01      	cmp	r2, #1
 800b97e:	4681      	mov	r9, r0
 800b980:	6123      	str	r3, [r4, #16]
 800b982:	dc02      	bgt.n	800b98a <_printf_float+0x14e>
 800b984:	6822      	ldr	r2, [r4, #0]
 800b986:	07d1      	lsls	r1, r2, #31
 800b988:	d501      	bpl.n	800b98e <_printf_float+0x152>
 800b98a:	3301      	adds	r3, #1
 800b98c:	6123      	str	r3, [r4, #16]
 800b98e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0a5      	beq.n	800b8e2 <_printf_float+0xa6>
 800b996:	232d      	movs	r3, #45	; 0x2d
 800b998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b99c:	e7a1      	b.n	800b8e2 <_printf_float+0xa6>
 800b99e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b9a2:	f000 8177 	beq.w	800bc94 <_printf_float+0x458>
 800b9a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b9aa:	d1bb      	bne.n	800b924 <_printf_float+0xe8>
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d1b9      	bne.n	800b924 <_printf_float+0xe8>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e7b6      	b.n	800b922 <_printf_float+0xe6>
 800b9b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b9b8:	d119      	bne.n	800b9ee <_printf_float+0x1b2>
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	dd0c      	ble.n	800b9da <_printf_float+0x19e>
 800b9c0:	6121      	str	r1, [r4, #16]
 800b9c2:	b913      	cbnz	r3, 800b9ca <_printf_float+0x18e>
 800b9c4:	6822      	ldr	r2, [r4, #0]
 800b9c6:	07d2      	lsls	r2, r2, #31
 800b9c8:	d502      	bpl.n	800b9d0 <_printf_float+0x194>
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	440b      	add	r3, r1
 800b9ce:	6123      	str	r3, [r4, #16]
 800b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d2:	65a3      	str	r3, [r4, #88]	; 0x58
 800b9d4:	f04f 0900 	mov.w	r9, #0
 800b9d8:	e7d9      	b.n	800b98e <_printf_float+0x152>
 800b9da:	b913      	cbnz	r3, 800b9e2 <_printf_float+0x1a6>
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	07d0      	lsls	r0, r2, #31
 800b9e0:	d501      	bpl.n	800b9e6 <_printf_float+0x1aa>
 800b9e2:	3302      	adds	r3, #2
 800b9e4:	e7f3      	b.n	800b9ce <_printf_float+0x192>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e7f1      	b.n	800b9ce <_printf_float+0x192>
 800b9ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b9ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	db05      	blt.n	800ba02 <_printf_float+0x1c6>
 800b9f6:	6822      	ldr	r2, [r4, #0]
 800b9f8:	6123      	str	r3, [r4, #16]
 800b9fa:	07d1      	lsls	r1, r2, #31
 800b9fc:	d5e8      	bpl.n	800b9d0 <_printf_float+0x194>
 800b9fe:	3301      	adds	r3, #1
 800ba00:	e7e5      	b.n	800b9ce <_printf_float+0x192>
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfd4      	ite	le
 800ba06:	f1c3 0302 	rsble	r3, r3, #2
 800ba0a:	2301      	movgt	r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	e7de      	b.n	800b9ce <_printf_float+0x192>
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	055a      	lsls	r2, r3, #21
 800ba14:	d407      	bmi.n	800ba26 <_printf_float+0x1ea>
 800ba16:	6923      	ldr	r3, [r4, #16]
 800ba18:	4642      	mov	r2, r8
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	d12b      	bne.n	800ba7c <_printf_float+0x240>
 800ba24:	e767      	b.n	800b8f6 <_printf_float+0xba>
 800ba26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ba2a:	f240 80dc 	bls.w	800bbe6 <_printf_float+0x3aa>
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba36:	f7f5 f857 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d033      	beq.n	800baa6 <_printf_float+0x26a>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4a41      	ldr	r2, [pc, #260]	; (800bb48 <_printf_float+0x30c>)
 800ba42:	4631      	mov	r1, r6
 800ba44:	4628      	mov	r0, r5
 800ba46:	47b8      	blx	r7
 800ba48:	3001      	adds	r0, #1
 800ba4a:	f43f af54 	beq.w	800b8f6 <_printf_float+0xba>
 800ba4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba52:	429a      	cmp	r2, r3
 800ba54:	db02      	blt.n	800ba5c <_printf_float+0x220>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	07d8      	lsls	r0, r3, #31
 800ba5a:	d50f      	bpl.n	800ba7c <_printf_float+0x240>
 800ba5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba60:	4631      	mov	r1, r6
 800ba62:	4628      	mov	r0, r5
 800ba64:	47b8      	blx	r7
 800ba66:	3001      	adds	r0, #1
 800ba68:	f43f af45 	beq.w	800b8f6 <_printf_float+0xba>
 800ba6c:	f04f 0800 	mov.w	r8, #0
 800ba70:	f104 091a 	add.w	r9, r4, #26
 800ba74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba76:	3b01      	subs	r3, #1
 800ba78:	4543      	cmp	r3, r8
 800ba7a:	dc09      	bgt.n	800ba90 <_printf_float+0x254>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	079b      	lsls	r3, r3, #30
 800ba80:	f100 8103 	bmi.w	800bc8a <_printf_float+0x44e>
 800ba84:	68e0      	ldr	r0, [r4, #12]
 800ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	bfb8      	it	lt
 800ba8c:	4618      	movlt	r0, r3
 800ba8e:	e734      	b.n	800b8fa <_printf_float+0xbe>
 800ba90:	2301      	movs	r3, #1
 800ba92:	464a      	mov	r2, r9
 800ba94:	4631      	mov	r1, r6
 800ba96:	4628      	mov	r0, r5
 800ba98:	47b8      	blx	r7
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f43f af2b 	beq.w	800b8f6 <_printf_float+0xba>
 800baa0:	f108 0801 	add.w	r8, r8, #1
 800baa4:	e7e6      	b.n	800ba74 <_printf_float+0x238>
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dc2b      	bgt.n	800bb04 <_printf_float+0x2c8>
 800baac:	2301      	movs	r3, #1
 800baae:	4a26      	ldr	r2, [pc, #152]	; (800bb48 <_printf_float+0x30c>)
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b8      	blx	r7
 800bab6:	3001      	adds	r0, #1
 800bab8:	f43f af1d 	beq.w	800b8f6 <_printf_float+0xba>
 800babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babe:	b923      	cbnz	r3, 800baca <_printf_float+0x28e>
 800bac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac2:	b913      	cbnz	r3, 800baca <_printf_float+0x28e>
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	07d9      	lsls	r1, r3, #31
 800bac8:	d5d8      	bpl.n	800ba7c <_printf_float+0x240>
 800baca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bace:	4631      	mov	r1, r6
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b8      	blx	r7
 800bad4:	3001      	adds	r0, #1
 800bad6:	f43f af0e 	beq.w	800b8f6 <_printf_float+0xba>
 800bada:	f04f 0900 	mov.w	r9, #0
 800bade:	f104 0a1a 	add.w	sl, r4, #26
 800bae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae4:	425b      	negs	r3, r3
 800bae6:	454b      	cmp	r3, r9
 800bae8:	dc01      	bgt.n	800baee <_printf_float+0x2b2>
 800baea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baec:	e794      	b.n	800ba18 <_printf_float+0x1dc>
 800baee:	2301      	movs	r3, #1
 800baf0:	4652      	mov	r2, sl
 800baf2:	4631      	mov	r1, r6
 800baf4:	4628      	mov	r0, r5
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	f43f aefc 	beq.w	800b8f6 <_printf_float+0xba>
 800bafe:	f109 0901 	add.w	r9, r9, #1
 800bb02:	e7ee      	b.n	800bae2 <_printf_float+0x2a6>
 800bb04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	bfa8      	it	ge
 800bb0c:	461a      	movge	r2, r3
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	4691      	mov	r9, r2
 800bb12:	dd07      	ble.n	800bb24 <_printf_float+0x2e8>
 800bb14:	4613      	mov	r3, r2
 800bb16:	4631      	mov	r1, r6
 800bb18:	4642      	mov	r2, r8
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f aee9 	beq.w	800b8f6 <_printf_float+0xba>
 800bb24:	f104 031a 	add.w	r3, r4, #26
 800bb28:	f04f 0b00 	mov.w	fp, #0
 800bb2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb30:	9306      	str	r3, [sp, #24]
 800bb32:	e015      	b.n	800bb60 <_printf_float+0x324>
 800bb34:	7fefffff 	.word	0x7fefffff
 800bb38:	0800dcf8 	.word	0x0800dcf8
 800bb3c:	0800dcf4 	.word	0x0800dcf4
 800bb40:	0800dd00 	.word	0x0800dd00
 800bb44:	0800dcfc 	.word	0x0800dcfc
 800bb48:	0800dd04 	.word	0x0800dd04
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	9a06      	ldr	r2, [sp, #24]
 800bb50:	4631      	mov	r1, r6
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	f43f aecd 	beq.w	800b8f6 <_printf_float+0xba>
 800bb5c:	f10b 0b01 	add.w	fp, fp, #1
 800bb60:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bb64:	ebaa 0309 	sub.w	r3, sl, r9
 800bb68:	455b      	cmp	r3, fp
 800bb6a:	dcef      	bgt.n	800bb4c <_printf_float+0x310>
 800bb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb70:	429a      	cmp	r2, r3
 800bb72:	44d0      	add	r8, sl
 800bb74:	db15      	blt.n	800bba2 <_printf_float+0x366>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	07da      	lsls	r2, r3, #31
 800bb7a:	d412      	bmi.n	800bba2 <_printf_float+0x366>
 800bb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb80:	eba3 020a 	sub.w	r2, r3, sl
 800bb84:	eba3 0a01 	sub.w	sl, r3, r1
 800bb88:	4592      	cmp	sl, r2
 800bb8a:	bfa8      	it	ge
 800bb8c:	4692      	movge	sl, r2
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	dc0e      	bgt.n	800bbb2 <_printf_float+0x376>
 800bb94:	f04f 0800 	mov.w	r8, #0
 800bb98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb9c:	f104 091a 	add.w	r9, r4, #26
 800bba0:	e019      	b.n	800bbd6 <_printf_float+0x39a>
 800bba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	d1e5      	bne.n	800bb7c <_printf_float+0x340>
 800bbb0:	e6a1      	b.n	800b8f6 <_printf_float+0xba>
 800bbb2:	4653      	mov	r3, sl
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d1e9      	bne.n	800bb94 <_printf_float+0x358>
 800bbc0:	e699      	b.n	800b8f6 <_printf_float+0xba>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	464a      	mov	r2, r9
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b8      	blx	r7
 800bbcc:	3001      	adds	r0, #1
 800bbce:	f43f ae92 	beq.w	800b8f6 <_printf_float+0xba>
 800bbd2:	f108 0801 	add.w	r8, r8, #1
 800bbd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbda:	1a9b      	subs	r3, r3, r2
 800bbdc:	eba3 030a 	sub.w	r3, r3, sl
 800bbe0:	4543      	cmp	r3, r8
 800bbe2:	dcee      	bgt.n	800bbc2 <_printf_float+0x386>
 800bbe4:	e74a      	b.n	800ba7c <_printf_float+0x240>
 800bbe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe8:	2a01      	cmp	r2, #1
 800bbea:	dc01      	bgt.n	800bbf0 <_printf_float+0x3b4>
 800bbec:	07db      	lsls	r3, r3, #31
 800bbee:	d53a      	bpl.n	800bc66 <_printf_float+0x42a>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4642      	mov	r2, r8
 800bbf4:	4631      	mov	r1, r6
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	47b8      	blx	r7
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f43f ae7b 	beq.w	800b8f6 <_printf_float+0xba>
 800bc00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	f108 0801 	add.w	r8, r8, #1
 800bc10:	f43f ae71 	beq.w	800b8f6 <_printf_float+0xba>
 800bc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc16:	2200      	movs	r2, #0
 800bc18:	f103 3aff 	add.w	sl, r3, #4294967295
 800bc1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc20:	2300      	movs	r3, #0
 800bc22:	f7f4 ff61 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc26:	b9c8      	cbnz	r0, 800bc5c <_printf_float+0x420>
 800bc28:	4653      	mov	r3, sl
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	d10e      	bne.n	800bc54 <_printf_float+0x418>
 800bc36:	e65e      	b.n	800b8f6 <_printf_float+0xba>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	4628      	mov	r0, r5
 800bc40:	47b8      	blx	r7
 800bc42:	3001      	adds	r0, #1
 800bc44:	f43f ae57 	beq.w	800b8f6 <_printf_float+0xba>
 800bc48:	f108 0801 	add.w	r8, r8, #1
 800bc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	4543      	cmp	r3, r8
 800bc52:	dcf1      	bgt.n	800bc38 <_printf_float+0x3fc>
 800bc54:	464b      	mov	r3, r9
 800bc56:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc5a:	e6de      	b.n	800ba1a <_printf_float+0x1de>
 800bc5c:	f04f 0800 	mov.w	r8, #0
 800bc60:	f104 0a1a 	add.w	sl, r4, #26
 800bc64:	e7f2      	b.n	800bc4c <_printf_float+0x410>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e7df      	b.n	800bc2a <_printf_float+0x3ee>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	464a      	mov	r2, r9
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	f43f ae3e 	beq.w	800b8f6 <_printf_float+0xba>
 800bc7a:	f108 0801 	add.w	r8, r8, #1
 800bc7e:	68e3      	ldr	r3, [r4, #12]
 800bc80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc82:	1a9b      	subs	r3, r3, r2
 800bc84:	4543      	cmp	r3, r8
 800bc86:	dcf0      	bgt.n	800bc6a <_printf_float+0x42e>
 800bc88:	e6fc      	b.n	800ba84 <_printf_float+0x248>
 800bc8a:	f04f 0800 	mov.w	r8, #0
 800bc8e:	f104 0919 	add.w	r9, r4, #25
 800bc92:	e7f4      	b.n	800bc7e <_printf_float+0x442>
 800bc94:	2900      	cmp	r1, #0
 800bc96:	f43f ae8b 	beq.w	800b9b0 <_printf_float+0x174>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bca0:	ab09      	add	r3, sp, #36	; 0x24
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	ec49 8b10 	vmov	d0, r8, r9
 800bca8:	6022      	str	r2, [r4, #0]
 800bcaa:	f8cd a004 	str.w	sl, [sp, #4]
 800bcae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f7ff fd2e 	bl	800b714 <__cvt>
 800bcb8:	4680      	mov	r8, r0
 800bcba:	e648      	b.n	800b94e <_printf_float+0x112>

0800bcbc <_printf_common>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	4691      	mov	r9, r2
 800bcc2:	461f      	mov	r7, r3
 800bcc4:	688a      	ldr	r2, [r1, #8]
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	bfb8      	it	lt
 800bcd0:	4613      	movlt	r3, r2
 800bcd2:	f8c9 3000 	str.w	r3, [r9]
 800bcd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460c      	mov	r4, r1
 800bcde:	b112      	cbz	r2, 800bce6 <_printf_common+0x2a>
 800bce0:	3301      	adds	r3, #1
 800bce2:	f8c9 3000 	str.w	r3, [r9]
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	0699      	lsls	r1, r3, #26
 800bcea:	bf42      	ittt	mi
 800bcec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcf0:	3302      	addmi	r3, #2
 800bcf2:	f8c9 3000 	strmi.w	r3, [r9]
 800bcf6:	6825      	ldr	r5, [r4, #0]
 800bcf8:	f015 0506 	ands.w	r5, r5, #6
 800bcfc:	d107      	bne.n	800bd0e <_printf_common+0x52>
 800bcfe:	f104 0a19 	add.w	sl, r4, #25
 800bd02:	68e3      	ldr	r3, [r4, #12]
 800bd04:	f8d9 2000 	ldr.w	r2, [r9]
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	42ab      	cmp	r3, r5
 800bd0c:	dc28      	bgt.n	800bd60 <_printf_common+0xa4>
 800bd0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd12:	6822      	ldr	r2, [r4, #0]
 800bd14:	3300      	adds	r3, #0
 800bd16:	bf18      	it	ne
 800bd18:	2301      	movne	r3, #1
 800bd1a:	0692      	lsls	r2, r2, #26
 800bd1c:	d42d      	bmi.n	800bd7a <_printf_common+0xbe>
 800bd1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd22:	4639      	mov	r1, r7
 800bd24:	4630      	mov	r0, r6
 800bd26:	47c0      	blx	r8
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d020      	beq.n	800bd6e <_printf_common+0xb2>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	68e5      	ldr	r5, [r4, #12]
 800bd30:	f8d9 2000 	ldr.w	r2, [r9]
 800bd34:	f003 0306 	and.w	r3, r3, #6
 800bd38:	2b04      	cmp	r3, #4
 800bd3a:	bf08      	it	eq
 800bd3c:	1aad      	subeq	r5, r5, r2
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	bf0c      	ite	eq
 800bd44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd48:	2500      	movne	r5, #0
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	bfc4      	itt	gt
 800bd4e:	1a9b      	subgt	r3, r3, r2
 800bd50:	18ed      	addgt	r5, r5, r3
 800bd52:	f04f 0900 	mov.w	r9, #0
 800bd56:	341a      	adds	r4, #26
 800bd58:	454d      	cmp	r5, r9
 800bd5a:	d11a      	bne.n	800bd92 <_printf_common+0xd6>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e008      	b.n	800bd72 <_printf_common+0xb6>
 800bd60:	2301      	movs	r3, #1
 800bd62:	4652      	mov	r2, sl
 800bd64:	4639      	mov	r1, r7
 800bd66:	4630      	mov	r0, r6
 800bd68:	47c0      	blx	r8
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d103      	bne.n	800bd76 <_printf_common+0xba>
 800bd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd76:	3501      	adds	r5, #1
 800bd78:	e7c3      	b.n	800bd02 <_printf_common+0x46>
 800bd7a:	18e1      	adds	r1, r4, r3
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	2030      	movs	r0, #48	; 0x30
 800bd80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd84:	4422      	add	r2, r4
 800bd86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd8e:	3302      	adds	r3, #2
 800bd90:	e7c5      	b.n	800bd1e <_printf_common+0x62>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4622      	mov	r2, r4
 800bd96:	4639      	mov	r1, r7
 800bd98:	4630      	mov	r0, r6
 800bd9a:	47c0      	blx	r8
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d0e6      	beq.n	800bd6e <_printf_common+0xb2>
 800bda0:	f109 0901 	add.w	r9, r9, #1
 800bda4:	e7d8      	b.n	800bd58 <_printf_common+0x9c>
	...

0800bda8 <_printf_i>:
 800bda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	7e09      	ldrb	r1, [r1, #24]
 800bdb4:	b085      	sub	sp, #20
 800bdb6:	296e      	cmp	r1, #110	; 0x6e
 800bdb8:	4617      	mov	r7, r2
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4698      	mov	r8, r3
 800bdbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdc0:	f000 80b3 	beq.w	800bf2a <_printf_i+0x182>
 800bdc4:	d822      	bhi.n	800be0c <_printf_i+0x64>
 800bdc6:	2963      	cmp	r1, #99	; 0x63
 800bdc8:	d036      	beq.n	800be38 <_printf_i+0x90>
 800bdca:	d80a      	bhi.n	800bde2 <_printf_i+0x3a>
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	f000 80b9 	beq.w	800bf44 <_printf_i+0x19c>
 800bdd2:	2958      	cmp	r1, #88	; 0x58
 800bdd4:	f000 8083 	beq.w	800bede <_printf_i+0x136>
 800bdd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bddc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bde0:	e032      	b.n	800be48 <_printf_i+0xa0>
 800bde2:	2964      	cmp	r1, #100	; 0x64
 800bde4:	d001      	beq.n	800bdea <_printf_i+0x42>
 800bde6:	2969      	cmp	r1, #105	; 0x69
 800bde8:	d1f6      	bne.n	800bdd8 <_printf_i+0x30>
 800bdea:	6820      	ldr	r0, [r4, #0]
 800bdec:	6813      	ldr	r3, [r2, #0]
 800bdee:	0605      	lsls	r5, r0, #24
 800bdf0:	f103 0104 	add.w	r1, r3, #4
 800bdf4:	d52a      	bpl.n	800be4c <_printf_i+0xa4>
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6011      	str	r1, [r2, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	da03      	bge.n	800be06 <_printf_i+0x5e>
 800bdfe:	222d      	movs	r2, #45	; 0x2d
 800be00:	425b      	negs	r3, r3
 800be02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be06:	486f      	ldr	r0, [pc, #444]	; (800bfc4 <_printf_i+0x21c>)
 800be08:	220a      	movs	r2, #10
 800be0a:	e039      	b.n	800be80 <_printf_i+0xd8>
 800be0c:	2973      	cmp	r1, #115	; 0x73
 800be0e:	f000 809d 	beq.w	800bf4c <_printf_i+0x1a4>
 800be12:	d808      	bhi.n	800be26 <_printf_i+0x7e>
 800be14:	296f      	cmp	r1, #111	; 0x6f
 800be16:	d020      	beq.n	800be5a <_printf_i+0xb2>
 800be18:	2970      	cmp	r1, #112	; 0x70
 800be1a:	d1dd      	bne.n	800bdd8 <_printf_i+0x30>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	f043 0320 	orr.w	r3, r3, #32
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	e003      	b.n	800be2e <_printf_i+0x86>
 800be26:	2975      	cmp	r1, #117	; 0x75
 800be28:	d017      	beq.n	800be5a <_printf_i+0xb2>
 800be2a:	2978      	cmp	r1, #120	; 0x78
 800be2c:	d1d4      	bne.n	800bdd8 <_printf_i+0x30>
 800be2e:	2378      	movs	r3, #120	; 0x78
 800be30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be34:	4864      	ldr	r0, [pc, #400]	; (800bfc8 <_printf_i+0x220>)
 800be36:	e055      	b.n	800bee4 <_printf_i+0x13c>
 800be38:	6813      	ldr	r3, [r2, #0]
 800be3a:	1d19      	adds	r1, r3, #4
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6011      	str	r1, [r2, #0]
 800be40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be48:	2301      	movs	r3, #1
 800be4a:	e08c      	b.n	800bf66 <_printf_i+0x1be>
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6011      	str	r1, [r2, #0]
 800be50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be54:	bf18      	it	ne
 800be56:	b21b      	sxthne	r3, r3
 800be58:	e7cf      	b.n	800bdfa <_printf_i+0x52>
 800be5a:	6813      	ldr	r3, [r2, #0]
 800be5c:	6825      	ldr	r5, [r4, #0]
 800be5e:	1d18      	adds	r0, r3, #4
 800be60:	6010      	str	r0, [r2, #0]
 800be62:	0628      	lsls	r0, r5, #24
 800be64:	d501      	bpl.n	800be6a <_printf_i+0xc2>
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	e002      	b.n	800be70 <_printf_i+0xc8>
 800be6a:	0668      	lsls	r0, r5, #25
 800be6c:	d5fb      	bpl.n	800be66 <_printf_i+0xbe>
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	4854      	ldr	r0, [pc, #336]	; (800bfc4 <_printf_i+0x21c>)
 800be72:	296f      	cmp	r1, #111	; 0x6f
 800be74:	bf14      	ite	ne
 800be76:	220a      	movne	r2, #10
 800be78:	2208      	moveq	r2, #8
 800be7a:	2100      	movs	r1, #0
 800be7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be80:	6865      	ldr	r5, [r4, #4]
 800be82:	60a5      	str	r5, [r4, #8]
 800be84:	2d00      	cmp	r5, #0
 800be86:	f2c0 8095 	blt.w	800bfb4 <_printf_i+0x20c>
 800be8a:	6821      	ldr	r1, [r4, #0]
 800be8c:	f021 0104 	bic.w	r1, r1, #4
 800be90:	6021      	str	r1, [r4, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d13d      	bne.n	800bf12 <_printf_i+0x16a>
 800be96:	2d00      	cmp	r5, #0
 800be98:	f040 808e 	bne.w	800bfb8 <_printf_i+0x210>
 800be9c:	4665      	mov	r5, ip
 800be9e:	2a08      	cmp	r2, #8
 800bea0:	d10b      	bne.n	800beba <_printf_i+0x112>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	07db      	lsls	r3, r3, #31
 800bea6:	d508      	bpl.n	800beba <_printf_i+0x112>
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	6862      	ldr	r2, [r4, #4]
 800beac:	429a      	cmp	r2, r3
 800beae:	bfde      	ittt	le
 800beb0:	2330      	movle	r3, #48	; 0x30
 800beb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800beb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800beba:	ebac 0305 	sub.w	r3, ip, r5
 800bebe:	6123      	str	r3, [r4, #16]
 800bec0:	f8cd 8000 	str.w	r8, [sp]
 800bec4:	463b      	mov	r3, r7
 800bec6:	aa03      	add	r2, sp, #12
 800bec8:	4621      	mov	r1, r4
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff fef6 	bl	800bcbc <_printf_common>
 800bed0:	3001      	adds	r0, #1
 800bed2:	d14d      	bne.n	800bf70 <_printf_i+0x1c8>
 800bed4:	f04f 30ff 	mov.w	r0, #4294967295
 800bed8:	b005      	add	sp, #20
 800beda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bede:	4839      	ldr	r0, [pc, #228]	; (800bfc4 <_printf_i+0x21c>)
 800bee0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bee4:	6813      	ldr	r3, [r2, #0]
 800bee6:	6821      	ldr	r1, [r4, #0]
 800bee8:	1d1d      	adds	r5, r3, #4
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6015      	str	r5, [r2, #0]
 800beee:	060a      	lsls	r2, r1, #24
 800bef0:	d50b      	bpl.n	800bf0a <_printf_i+0x162>
 800bef2:	07ca      	lsls	r2, r1, #31
 800bef4:	bf44      	itt	mi
 800bef6:	f041 0120 	orrmi.w	r1, r1, #32
 800befa:	6021      	strmi	r1, [r4, #0]
 800befc:	b91b      	cbnz	r3, 800bf06 <_printf_i+0x15e>
 800befe:	6822      	ldr	r2, [r4, #0]
 800bf00:	f022 0220 	bic.w	r2, r2, #32
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	2210      	movs	r2, #16
 800bf08:	e7b7      	b.n	800be7a <_printf_i+0xd2>
 800bf0a:	064d      	lsls	r5, r1, #25
 800bf0c:	bf48      	it	mi
 800bf0e:	b29b      	uxthmi	r3, r3
 800bf10:	e7ef      	b.n	800bef2 <_printf_i+0x14a>
 800bf12:	4665      	mov	r5, ip
 800bf14:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf18:	fb02 3311 	mls	r3, r2, r1, r3
 800bf1c:	5cc3      	ldrb	r3, [r0, r3]
 800bf1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf22:	460b      	mov	r3, r1
 800bf24:	2900      	cmp	r1, #0
 800bf26:	d1f5      	bne.n	800bf14 <_printf_i+0x16c>
 800bf28:	e7b9      	b.n	800be9e <_printf_i+0xf6>
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	6825      	ldr	r5, [r4, #0]
 800bf2e:	6961      	ldr	r1, [r4, #20]
 800bf30:	1d18      	adds	r0, r3, #4
 800bf32:	6010      	str	r0, [r2, #0]
 800bf34:	0628      	lsls	r0, r5, #24
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	d501      	bpl.n	800bf3e <_printf_i+0x196>
 800bf3a:	6019      	str	r1, [r3, #0]
 800bf3c:	e002      	b.n	800bf44 <_printf_i+0x19c>
 800bf3e:	066a      	lsls	r2, r5, #25
 800bf40:	d5fb      	bpl.n	800bf3a <_printf_i+0x192>
 800bf42:	8019      	strh	r1, [r3, #0]
 800bf44:	2300      	movs	r3, #0
 800bf46:	6123      	str	r3, [r4, #16]
 800bf48:	4665      	mov	r5, ip
 800bf4a:	e7b9      	b.n	800bec0 <_printf_i+0x118>
 800bf4c:	6813      	ldr	r3, [r2, #0]
 800bf4e:	1d19      	adds	r1, r3, #4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	681d      	ldr	r5, [r3, #0]
 800bf54:	6862      	ldr	r2, [r4, #4]
 800bf56:	2100      	movs	r1, #0
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7f4 f951 	bl	8000200 <memchr>
 800bf5e:	b108      	cbz	r0, 800bf64 <_printf_i+0x1bc>
 800bf60:	1b40      	subs	r0, r0, r5
 800bf62:	6060      	str	r0, [r4, #4]
 800bf64:	6863      	ldr	r3, [r4, #4]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf6e:	e7a7      	b.n	800bec0 <_printf_i+0x118>
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	462a      	mov	r2, r5
 800bf74:	4639      	mov	r1, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	47c0      	blx	r8
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d0aa      	beq.n	800bed4 <_printf_i+0x12c>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	079b      	lsls	r3, r3, #30
 800bf82:	d413      	bmi.n	800bfac <_printf_i+0x204>
 800bf84:	68e0      	ldr	r0, [r4, #12]
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	4298      	cmp	r0, r3
 800bf8a:	bfb8      	it	lt
 800bf8c:	4618      	movlt	r0, r3
 800bf8e:	e7a3      	b.n	800bed8 <_printf_i+0x130>
 800bf90:	2301      	movs	r3, #1
 800bf92:	464a      	mov	r2, r9
 800bf94:	4639      	mov	r1, r7
 800bf96:	4630      	mov	r0, r6
 800bf98:	47c0      	blx	r8
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d09a      	beq.n	800bed4 <_printf_i+0x12c>
 800bf9e:	3501      	adds	r5, #1
 800bfa0:	68e3      	ldr	r3, [r4, #12]
 800bfa2:	9a03      	ldr	r2, [sp, #12]
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	42ab      	cmp	r3, r5
 800bfa8:	dcf2      	bgt.n	800bf90 <_printf_i+0x1e8>
 800bfaa:	e7eb      	b.n	800bf84 <_printf_i+0x1dc>
 800bfac:	2500      	movs	r5, #0
 800bfae:	f104 0919 	add.w	r9, r4, #25
 800bfb2:	e7f5      	b.n	800bfa0 <_printf_i+0x1f8>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1ac      	bne.n	800bf12 <_printf_i+0x16a>
 800bfb8:	7803      	ldrb	r3, [r0, #0]
 800bfba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfc2:	e76c      	b.n	800be9e <_printf_i+0xf6>
 800bfc4:	0800dd06 	.word	0x0800dd06
 800bfc8:	0800dd17 	.word	0x0800dd17

0800bfcc <siprintf>:
 800bfcc:	b40e      	push	{r1, r2, r3}
 800bfce:	b500      	push	{lr}
 800bfd0:	b09c      	sub	sp, #112	; 0x70
 800bfd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bfd4:	9002      	str	r0, [sp, #8]
 800bfd6:	9006      	str	r0, [sp, #24]
 800bfd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfdc:	4809      	ldr	r0, [pc, #36]	; (800c004 <siprintf+0x38>)
 800bfde:	9107      	str	r1, [sp, #28]
 800bfe0:	9104      	str	r1, [sp, #16]
 800bfe2:	4909      	ldr	r1, [pc, #36]	; (800c008 <siprintf+0x3c>)
 800bfe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe8:	9105      	str	r1, [sp, #20]
 800bfea:	6800      	ldr	r0, [r0, #0]
 800bfec:	9301      	str	r3, [sp, #4]
 800bfee:	a902      	add	r1, sp, #8
 800bff0:	f001 fb1c 	bl	800d62c <_svfiprintf_r>
 800bff4:	9b02      	ldr	r3, [sp, #8]
 800bff6:	2200      	movs	r2, #0
 800bff8:	701a      	strb	r2, [r3, #0]
 800bffa:	b01c      	add	sp, #112	; 0x70
 800bffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c000:	b003      	add	sp, #12
 800c002:	4770      	bx	lr
 800c004:	20000068 	.word	0x20000068
 800c008:	ffff0208 	.word	0xffff0208

0800c00c <strcat>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	4603      	mov	r3, r0
 800c010:	781a      	ldrb	r2, [r3, #0]
 800c012:	1c5c      	adds	r4, r3, #1
 800c014:	b93a      	cbnz	r2, 800c026 <strcat+0x1a>
 800c016:	3b01      	subs	r3, #1
 800c018:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c01c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c020:	2a00      	cmp	r2, #0
 800c022:	d1f9      	bne.n	800c018 <strcat+0xc>
 800c024:	bd10      	pop	{r4, pc}
 800c026:	4623      	mov	r3, r4
 800c028:	e7f2      	b.n	800c010 <strcat+0x4>

0800c02a <strcpy>:
 800c02a:	4603      	mov	r3, r0
 800c02c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c030:	f803 2b01 	strb.w	r2, [r3], #1
 800c034:	2a00      	cmp	r2, #0
 800c036:	d1f9      	bne.n	800c02c <strcpy+0x2>
 800c038:	4770      	bx	lr

0800c03a <_strtol_l.isra.0>:
 800c03a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c03e:	4680      	mov	r8, r0
 800c040:	4689      	mov	r9, r1
 800c042:	4692      	mov	sl, r2
 800c044:	461e      	mov	r6, r3
 800c046:	460f      	mov	r7, r1
 800c048:	463d      	mov	r5, r7
 800c04a:	9808      	ldr	r0, [sp, #32]
 800c04c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c050:	f000 feca 	bl	800cde8 <__locale_ctype_ptr_l>
 800c054:	4420      	add	r0, r4
 800c056:	7843      	ldrb	r3, [r0, #1]
 800c058:	f013 0308 	ands.w	r3, r3, #8
 800c05c:	d132      	bne.n	800c0c4 <_strtol_l.isra.0+0x8a>
 800c05e:	2c2d      	cmp	r4, #45	; 0x2d
 800c060:	d132      	bne.n	800c0c8 <_strtol_l.isra.0+0x8e>
 800c062:	787c      	ldrb	r4, [r7, #1]
 800c064:	1cbd      	adds	r5, r7, #2
 800c066:	2201      	movs	r2, #1
 800c068:	2e00      	cmp	r6, #0
 800c06a:	d05d      	beq.n	800c128 <_strtol_l.isra.0+0xee>
 800c06c:	2e10      	cmp	r6, #16
 800c06e:	d109      	bne.n	800c084 <_strtol_l.isra.0+0x4a>
 800c070:	2c30      	cmp	r4, #48	; 0x30
 800c072:	d107      	bne.n	800c084 <_strtol_l.isra.0+0x4a>
 800c074:	782b      	ldrb	r3, [r5, #0]
 800c076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c07a:	2b58      	cmp	r3, #88	; 0x58
 800c07c:	d14f      	bne.n	800c11e <_strtol_l.isra.0+0xe4>
 800c07e:	786c      	ldrb	r4, [r5, #1]
 800c080:	2610      	movs	r6, #16
 800c082:	3502      	adds	r5, #2
 800c084:	2a00      	cmp	r2, #0
 800c086:	bf14      	ite	ne
 800c088:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c08c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c090:	2700      	movs	r7, #0
 800c092:	fbb1 fcf6 	udiv	ip, r1, r6
 800c096:	4638      	mov	r0, r7
 800c098:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c09c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c0a0:	2b09      	cmp	r3, #9
 800c0a2:	d817      	bhi.n	800c0d4 <_strtol_l.isra.0+0x9a>
 800c0a4:	461c      	mov	r4, r3
 800c0a6:	42a6      	cmp	r6, r4
 800c0a8:	dd23      	ble.n	800c0f2 <_strtol_l.isra.0+0xb8>
 800c0aa:	1c7b      	adds	r3, r7, #1
 800c0ac:	d007      	beq.n	800c0be <_strtol_l.isra.0+0x84>
 800c0ae:	4584      	cmp	ip, r0
 800c0b0:	d31c      	bcc.n	800c0ec <_strtol_l.isra.0+0xb2>
 800c0b2:	d101      	bne.n	800c0b8 <_strtol_l.isra.0+0x7e>
 800c0b4:	45a6      	cmp	lr, r4
 800c0b6:	db19      	blt.n	800c0ec <_strtol_l.isra.0+0xb2>
 800c0b8:	fb00 4006 	mla	r0, r0, r6, r4
 800c0bc:	2701      	movs	r7, #1
 800c0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0c2:	e7eb      	b.n	800c09c <_strtol_l.isra.0+0x62>
 800c0c4:	462f      	mov	r7, r5
 800c0c6:	e7bf      	b.n	800c048 <_strtol_l.isra.0+0xe>
 800c0c8:	2c2b      	cmp	r4, #43	; 0x2b
 800c0ca:	bf04      	itt	eq
 800c0cc:	1cbd      	addeq	r5, r7, #2
 800c0ce:	787c      	ldrbeq	r4, [r7, #1]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	e7c9      	b.n	800c068 <_strtol_l.isra.0+0x2e>
 800c0d4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c0d8:	2b19      	cmp	r3, #25
 800c0da:	d801      	bhi.n	800c0e0 <_strtol_l.isra.0+0xa6>
 800c0dc:	3c37      	subs	r4, #55	; 0x37
 800c0de:	e7e2      	b.n	800c0a6 <_strtol_l.isra.0+0x6c>
 800c0e0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c0e4:	2b19      	cmp	r3, #25
 800c0e6:	d804      	bhi.n	800c0f2 <_strtol_l.isra.0+0xb8>
 800c0e8:	3c57      	subs	r4, #87	; 0x57
 800c0ea:	e7dc      	b.n	800c0a6 <_strtol_l.isra.0+0x6c>
 800c0ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c0f0:	e7e5      	b.n	800c0be <_strtol_l.isra.0+0x84>
 800c0f2:	1c7b      	adds	r3, r7, #1
 800c0f4:	d108      	bne.n	800c108 <_strtol_l.isra.0+0xce>
 800c0f6:	2322      	movs	r3, #34	; 0x22
 800c0f8:	f8c8 3000 	str.w	r3, [r8]
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	f1ba 0f00 	cmp.w	sl, #0
 800c102:	d107      	bne.n	800c114 <_strtol_l.isra.0+0xda>
 800c104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c108:	b102      	cbz	r2, 800c10c <_strtol_l.isra.0+0xd2>
 800c10a:	4240      	negs	r0, r0
 800c10c:	f1ba 0f00 	cmp.w	sl, #0
 800c110:	d0f8      	beq.n	800c104 <_strtol_l.isra.0+0xca>
 800c112:	b10f      	cbz	r7, 800c118 <_strtol_l.isra.0+0xde>
 800c114:	f105 39ff 	add.w	r9, r5, #4294967295
 800c118:	f8ca 9000 	str.w	r9, [sl]
 800c11c:	e7f2      	b.n	800c104 <_strtol_l.isra.0+0xca>
 800c11e:	2430      	movs	r4, #48	; 0x30
 800c120:	2e00      	cmp	r6, #0
 800c122:	d1af      	bne.n	800c084 <_strtol_l.isra.0+0x4a>
 800c124:	2608      	movs	r6, #8
 800c126:	e7ad      	b.n	800c084 <_strtol_l.isra.0+0x4a>
 800c128:	2c30      	cmp	r4, #48	; 0x30
 800c12a:	d0a3      	beq.n	800c074 <_strtol_l.isra.0+0x3a>
 800c12c:	260a      	movs	r6, #10
 800c12e:	e7a9      	b.n	800c084 <_strtol_l.isra.0+0x4a>

0800c130 <strtol>:
 800c130:	4b08      	ldr	r3, [pc, #32]	; (800c154 <strtol+0x24>)
 800c132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c134:	681c      	ldr	r4, [r3, #0]
 800c136:	4d08      	ldr	r5, [pc, #32]	; (800c158 <strtol+0x28>)
 800c138:	6a23      	ldr	r3, [r4, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bf08      	it	eq
 800c13e:	462b      	moveq	r3, r5
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	4613      	mov	r3, r2
 800c144:	460a      	mov	r2, r1
 800c146:	4601      	mov	r1, r0
 800c148:	4620      	mov	r0, r4
 800c14a:	f7ff ff76 	bl	800c03a <_strtol_l.isra.0>
 800c14e:	b003      	add	sp, #12
 800c150:	bd30      	pop	{r4, r5, pc}
 800c152:	bf00      	nop
 800c154:	20000068 	.word	0x20000068
 800c158:	200000cc 	.word	0x200000cc

0800c15c <quorem>:
 800c15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c160:	6903      	ldr	r3, [r0, #16]
 800c162:	690c      	ldr	r4, [r1, #16]
 800c164:	42a3      	cmp	r3, r4
 800c166:	4680      	mov	r8, r0
 800c168:	f2c0 8082 	blt.w	800c270 <quorem+0x114>
 800c16c:	3c01      	subs	r4, #1
 800c16e:	f101 0714 	add.w	r7, r1, #20
 800c172:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c176:	f100 0614 	add.w	r6, r0, #20
 800c17a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c17e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c182:	eb06 030c 	add.w	r3, r6, ip
 800c186:	3501      	adds	r5, #1
 800c188:	eb07 090c 	add.w	r9, r7, ip
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c192:	b395      	cbz	r5, 800c1fa <quorem+0x9e>
 800c194:	f04f 0a00 	mov.w	sl, #0
 800c198:	4638      	mov	r0, r7
 800c19a:	46b6      	mov	lr, r6
 800c19c:	46d3      	mov	fp, sl
 800c19e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1a2:	b293      	uxth	r3, r2
 800c1a4:	fb05 a303 	mla	r3, r5, r3, sl
 800c1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	ebab 0303 	sub.w	r3, fp, r3
 800c1b2:	0c12      	lsrs	r2, r2, #16
 800c1b4:	f8de b000 	ldr.w	fp, [lr]
 800c1b8:	fb05 a202 	mla	r2, r5, r2, sl
 800c1bc:	fa13 f38b 	uxtah	r3, r3, fp
 800c1c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c1c4:	fa1f fb82 	uxth.w	fp, r2
 800c1c8:	f8de 2000 	ldr.w	r2, [lr]
 800c1cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c1d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1da:	4581      	cmp	r9, r0
 800c1dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c1e0:	f84e 3b04 	str.w	r3, [lr], #4
 800c1e4:	d2db      	bcs.n	800c19e <quorem+0x42>
 800c1e6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c1ea:	b933      	cbnz	r3, 800c1fa <quorem+0x9e>
 800c1ec:	9b01      	ldr	r3, [sp, #4]
 800c1ee:	3b04      	subs	r3, #4
 800c1f0:	429e      	cmp	r6, r3
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	d330      	bcc.n	800c258 <quorem+0xfc>
 800c1f6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f001 f840 	bl	800d280 <__mcmp>
 800c200:	2800      	cmp	r0, #0
 800c202:	db25      	blt.n	800c250 <quorem+0xf4>
 800c204:	3501      	adds	r5, #1
 800c206:	4630      	mov	r0, r6
 800c208:	f04f 0c00 	mov.w	ip, #0
 800c20c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c210:	f8d0 e000 	ldr.w	lr, [r0]
 800c214:	b293      	uxth	r3, r2
 800c216:	ebac 0303 	sub.w	r3, ip, r3
 800c21a:	0c12      	lsrs	r2, r2, #16
 800c21c:	fa13 f38e 	uxtah	r3, r3, lr
 800c220:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c228:	b29b      	uxth	r3, r3
 800c22a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c22e:	45b9      	cmp	r9, r7
 800c230:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c234:	f840 3b04 	str.w	r3, [r0], #4
 800c238:	d2e8      	bcs.n	800c20c <quorem+0xb0>
 800c23a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c23e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c242:	b92a      	cbnz	r2, 800c250 <quorem+0xf4>
 800c244:	3b04      	subs	r3, #4
 800c246:	429e      	cmp	r6, r3
 800c248:	461a      	mov	r2, r3
 800c24a:	d30b      	bcc.n	800c264 <quorem+0x108>
 800c24c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c250:	4628      	mov	r0, r5
 800c252:	b003      	add	sp, #12
 800c254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c258:	6812      	ldr	r2, [r2, #0]
 800c25a:	3b04      	subs	r3, #4
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	d1ca      	bne.n	800c1f6 <quorem+0x9a>
 800c260:	3c01      	subs	r4, #1
 800c262:	e7c5      	b.n	800c1f0 <quorem+0x94>
 800c264:	6812      	ldr	r2, [r2, #0]
 800c266:	3b04      	subs	r3, #4
 800c268:	2a00      	cmp	r2, #0
 800c26a:	d1ef      	bne.n	800c24c <quorem+0xf0>
 800c26c:	3c01      	subs	r4, #1
 800c26e:	e7ea      	b.n	800c246 <quorem+0xea>
 800c270:	2000      	movs	r0, #0
 800c272:	e7ee      	b.n	800c252 <quorem+0xf6>
 800c274:	0000      	movs	r0, r0
	...

0800c278 <_dtoa_r>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	ec57 6b10 	vmov	r6, r7, d0
 800c280:	b097      	sub	sp, #92	; 0x5c
 800c282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c284:	9106      	str	r1, [sp, #24]
 800c286:	4604      	mov	r4, r0
 800c288:	920b      	str	r2, [sp, #44]	; 0x2c
 800c28a:	9312      	str	r3, [sp, #72]	; 0x48
 800c28c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c290:	e9cd 6700 	strd	r6, r7, [sp]
 800c294:	b93d      	cbnz	r5, 800c2a6 <_dtoa_r+0x2e>
 800c296:	2010      	movs	r0, #16
 800c298:	f000 fdb8 	bl	800ce0c <malloc>
 800c29c:	6260      	str	r0, [r4, #36]	; 0x24
 800c29e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2a2:	6005      	str	r5, [r0, #0]
 800c2a4:	60c5      	str	r5, [r0, #12]
 800c2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a8:	6819      	ldr	r1, [r3, #0]
 800c2aa:	b151      	cbz	r1, 800c2c2 <_dtoa_r+0x4a>
 800c2ac:	685a      	ldr	r2, [r3, #4]
 800c2ae:	604a      	str	r2, [r1, #4]
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	4093      	lsls	r3, r2
 800c2b4:	608b      	str	r3, [r1, #8]
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fe01 	bl	800cebe <_Bfree>
 800c2bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	1e3b      	subs	r3, r7, #0
 800c2c4:	bfbb      	ittet	lt
 800c2c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c2ca:	9301      	strlt	r3, [sp, #4]
 800c2cc:	2300      	movge	r3, #0
 800c2ce:	2201      	movlt	r2, #1
 800c2d0:	bfac      	ite	ge
 800c2d2:	f8c8 3000 	strge.w	r3, [r8]
 800c2d6:	f8c8 2000 	strlt.w	r2, [r8]
 800c2da:	4baf      	ldr	r3, [pc, #700]	; (800c598 <_dtoa_r+0x320>)
 800c2dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2e0:	ea33 0308 	bics.w	r3, r3, r8
 800c2e4:	d114      	bne.n	800c310 <_dtoa_r+0x98>
 800c2e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2e8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	b923      	cbnz	r3, 800c2fc <_dtoa_r+0x84>
 800c2f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	f000 8542 	beq.w	800cd80 <_dtoa_r+0xb08>
 800c2fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c5ac <_dtoa_r+0x334>
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 8544 	beq.w	800cd90 <_dtoa_r+0xb18>
 800c308:	f10b 0303 	add.w	r3, fp, #3
 800c30c:	f000 bd3e 	b.w	800cd8c <_dtoa_r+0xb14>
 800c310:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f4 fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c320:	4681      	mov	r9, r0
 800c322:	b168      	cbz	r0, 800c340 <_dtoa_r+0xc8>
 800c324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c326:	2301      	movs	r3, #1
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8524 	beq.w	800cd7a <_dtoa_r+0xb02>
 800c332:	4b9a      	ldr	r3, [pc, #616]	; (800c59c <_dtoa_r+0x324>)
 800c334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c336:	f103 3bff 	add.w	fp, r3, #4294967295
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	f000 bd28 	b.w	800cd90 <_dtoa_r+0xb18>
 800c340:	aa14      	add	r2, sp, #80	; 0x50
 800c342:	a915      	add	r1, sp, #84	; 0x54
 800c344:	ec47 6b10 	vmov	d0, r6, r7
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 f810 	bl	800d36e <__d2b>
 800c34e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c352:	9004      	str	r0, [sp, #16]
 800c354:	2d00      	cmp	r5, #0
 800c356:	d07c      	beq.n	800c452 <_dtoa_r+0x1da>
 800c358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c35c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c360:	46b2      	mov	sl, r6
 800c362:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c36a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c36e:	2200      	movs	r2, #0
 800c370:	4b8b      	ldr	r3, [pc, #556]	; (800c5a0 <_dtoa_r+0x328>)
 800c372:	4650      	mov	r0, sl
 800c374:	4659      	mov	r1, fp
 800c376:	f7f3 ff97 	bl	80002a8 <__aeabi_dsub>
 800c37a:	a381      	add	r3, pc, #516	; (adr r3, 800c580 <_dtoa_r+0x308>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f4 f94a 	bl	8000618 <__aeabi_dmul>
 800c384:	a380      	add	r3, pc, #512	; (adr r3, 800c588 <_dtoa_r+0x310>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	f7f3 ff8f 	bl	80002ac <__adddf3>
 800c38e:	4606      	mov	r6, r0
 800c390:	4628      	mov	r0, r5
 800c392:	460f      	mov	r7, r1
 800c394:	f7f4 f8d6 	bl	8000544 <__aeabi_i2d>
 800c398:	a37d      	add	r3, pc, #500	; (adr r3, 800c590 <_dtoa_r+0x318>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f7f4 f93b 	bl	8000618 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7f3 ff7f 	bl	80002ac <__adddf3>
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	f7f4 fbe1 	bl	8000b78 <__aeabi_d2iz>
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	4682      	mov	sl, r0
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4630      	mov	r0, r6
 800c3be:	4639      	mov	r1, r7
 800c3c0:	f7f4 fb9c 	bl	8000afc <__aeabi_dcmplt>
 800c3c4:	b148      	cbz	r0, 800c3da <_dtoa_r+0x162>
 800c3c6:	4650      	mov	r0, sl
 800c3c8:	f7f4 f8bc 	bl	8000544 <__aeabi_i2d>
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	463b      	mov	r3, r7
 800c3d0:	f7f4 fb8a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3d4:	b908      	cbnz	r0, 800c3da <_dtoa_r+0x162>
 800c3d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3da:	f1ba 0f16 	cmp.w	sl, #22
 800c3de:	d859      	bhi.n	800c494 <_dtoa_r+0x21c>
 800c3e0:	4970      	ldr	r1, [pc, #448]	; (800c5a4 <_dtoa_r+0x32c>)
 800c3e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c3e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ee:	f7f4 fba3 	bl	8000b38 <__aeabi_dcmpgt>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d050      	beq.n	800c498 <_dtoa_r+0x220>
 800c3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c400:	1b5d      	subs	r5, r3, r5
 800c402:	f1b5 0801 	subs.w	r8, r5, #1
 800c406:	bf49      	itett	mi
 800c408:	f1c5 0301 	rsbmi	r3, r5, #1
 800c40c:	2300      	movpl	r3, #0
 800c40e:	9305      	strmi	r3, [sp, #20]
 800c410:	f04f 0800 	movmi.w	r8, #0
 800c414:	bf58      	it	pl
 800c416:	9305      	strpl	r3, [sp, #20]
 800c418:	f1ba 0f00 	cmp.w	sl, #0
 800c41c:	db3e      	blt.n	800c49c <_dtoa_r+0x224>
 800c41e:	2300      	movs	r3, #0
 800c420:	44d0      	add	r8, sl
 800c422:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c426:	9307      	str	r3, [sp, #28]
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	2b09      	cmp	r3, #9
 800c42c:	f200 8090 	bhi.w	800c550 <_dtoa_r+0x2d8>
 800c430:	2b05      	cmp	r3, #5
 800c432:	bfc4      	itt	gt
 800c434:	3b04      	subgt	r3, #4
 800c436:	9306      	strgt	r3, [sp, #24]
 800c438:	9b06      	ldr	r3, [sp, #24]
 800c43a:	f1a3 0302 	sub.w	r3, r3, #2
 800c43e:	bfcc      	ite	gt
 800c440:	2500      	movgt	r5, #0
 800c442:	2501      	movle	r5, #1
 800c444:	2b03      	cmp	r3, #3
 800c446:	f200 808f 	bhi.w	800c568 <_dtoa_r+0x2f0>
 800c44a:	e8df f003 	tbb	[pc, r3]
 800c44e:	7f7d      	.short	0x7f7d
 800c450:	7131      	.short	0x7131
 800c452:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c456:	441d      	add	r5, r3
 800c458:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c45c:	2820      	cmp	r0, #32
 800c45e:	dd13      	ble.n	800c488 <_dtoa_r+0x210>
 800c460:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	fa08 f800 	lsl.w	r8, r8, r0
 800c46a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c46e:	fa23 f000 	lsr.w	r0, r3, r0
 800c472:	ea48 0000 	orr.w	r0, r8, r0
 800c476:	f7f4 f855 	bl	8000524 <__aeabi_ui2d>
 800c47a:	2301      	movs	r3, #1
 800c47c:	4682      	mov	sl, r0
 800c47e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c482:	3d01      	subs	r5, #1
 800c484:	9313      	str	r3, [sp, #76]	; 0x4c
 800c486:	e772      	b.n	800c36e <_dtoa_r+0xf6>
 800c488:	9b00      	ldr	r3, [sp, #0]
 800c48a:	f1c0 0020 	rsb	r0, r0, #32
 800c48e:	fa03 f000 	lsl.w	r0, r3, r0
 800c492:	e7f0      	b.n	800c476 <_dtoa_r+0x1fe>
 800c494:	2301      	movs	r3, #1
 800c496:	e7b1      	b.n	800c3fc <_dtoa_r+0x184>
 800c498:	900f      	str	r0, [sp, #60]	; 0x3c
 800c49a:	e7b0      	b.n	800c3fe <_dtoa_r+0x186>
 800c49c:	9b05      	ldr	r3, [sp, #20]
 800c49e:	eba3 030a 	sub.w	r3, r3, sl
 800c4a2:	9305      	str	r3, [sp, #20]
 800c4a4:	f1ca 0300 	rsb	r3, sl, #0
 800c4a8:	9307      	str	r3, [sp, #28]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c4ae:	e7bb      	b.n	800c428 <_dtoa_r+0x1b0>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	dd59      	ble.n	800c56e <_dtoa_r+0x2f6>
 800c4ba:	9302      	str	r3, [sp, #8]
 800c4bc:	4699      	mov	r9, r3
 800c4be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	6072      	str	r2, [r6, #4]
 800c4c4:	2204      	movs	r2, #4
 800c4c6:	f102 0014 	add.w	r0, r2, #20
 800c4ca:	4298      	cmp	r0, r3
 800c4cc:	6871      	ldr	r1, [r6, #4]
 800c4ce:	d953      	bls.n	800c578 <_dtoa_r+0x300>
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fcc0 	bl	800ce56 <_Balloc>
 800c4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d8:	6030      	str	r0, [r6, #0]
 800c4da:	f1b9 0f0e 	cmp.w	r9, #14
 800c4de:	f8d3 b000 	ldr.w	fp, [r3]
 800c4e2:	f200 80e6 	bhi.w	800c6b2 <_dtoa_r+0x43a>
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	f000 80e3 	beq.w	800c6b2 <_dtoa_r+0x43a>
 800c4ec:	ed9d 7b00 	vldr	d7, [sp]
 800c4f0:	f1ba 0f00 	cmp.w	sl, #0
 800c4f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c4f8:	dd74      	ble.n	800c5e4 <_dtoa_r+0x36c>
 800c4fa:	4a2a      	ldr	r2, [pc, #168]	; (800c5a4 <_dtoa_r+0x32c>)
 800c4fc:	f00a 030f 	and.w	r3, sl, #15
 800c500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c504:	ed93 7b00 	vldr	d7, [r3]
 800c508:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c50c:	06f0      	lsls	r0, r6, #27
 800c50e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c512:	d565      	bpl.n	800c5e0 <_dtoa_r+0x368>
 800c514:	4b24      	ldr	r3, [pc, #144]	; (800c5a8 <_dtoa_r+0x330>)
 800c516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c51a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c51e:	f7f4 f9a5 	bl	800086c <__aeabi_ddiv>
 800c522:	e9cd 0100 	strd	r0, r1, [sp]
 800c526:	f006 060f 	and.w	r6, r6, #15
 800c52a:	2503      	movs	r5, #3
 800c52c:	4f1e      	ldr	r7, [pc, #120]	; (800c5a8 <_dtoa_r+0x330>)
 800c52e:	e04c      	b.n	800c5ca <_dtoa_r+0x352>
 800c530:	2301      	movs	r3, #1
 800c532:	930a      	str	r3, [sp, #40]	; 0x28
 800c534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c536:	4453      	add	r3, sl
 800c538:	f103 0901 	add.w	r9, r3, #1
 800c53c:	9302      	str	r3, [sp, #8]
 800c53e:	464b      	mov	r3, r9
 800c540:	2b01      	cmp	r3, #1
 800c542:	bfb8      	it	lt
 800c544:	2301      	movlt	r3, #1
 800c546:	e7ba      	b.n	800c4be <_dtoa_r+0x246>
 800c548:	2300      	movs	r3, #0
 800c54a:	e7b2      	b.n	800c4b2 <_dtoa_r+0x23a>
 800c54c:	2300      	movs	r3, #0
 800c54e:	e7f0      	b.n	800c532 <_dtoa_r+0x2ba>
 800c550:	2501      	movs	r5, #1
 800c552:	2300      	movs	r3, #0
 800c554:	9306      	str	r3, [sp, #24]
 800c556:	950a      	str	r5, [sp, #40]	; 0x28
 800c558:	f04f 33ff 	mov.w	r3, #4294967295
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	4699      	mov	r9, r3
 800c560:	2200      	movs	r2, #0
 800c562:	2312      	movs	r3, #18
 800c564:	920b      	str	r2, [sp, #44]	; 0x2c
 800c566:	e7aa      	b.n	800c4be <_dtoa_r+0x246>
 800c568:	2301      	movs	r3, #1
 800c56a:	930a      	str	r3, [sp, #40]	; 0x28
 800c56c:	e7f4      	b.n	800c558 <_dtoa_r+0x2e0>
 800c56e:	2301      	movs	r3, #1
 800c570:	9302      	str	r3, [sp, #8]
 800c572:	4699      	mov	r9, r3
 800c574:	461a      	mov	r2, r3
 800c576:	e7f5      	b.n	800c564 <_dtoa_r+0x2ec>
 800c578:	3101      	adds	r1, #1
 800c57a:	6071      	str	r1, [r6, #4]
 800c57c:	0052      	lsls	r2, r2, #1
 800c57e:	e7a2      	b.n	800c4c6 <_dtoa_r+0x24e>
 800c580:	636f4361 	.word	0x636f4361
 800c584:	3fd287a7 	.word	0x3fd287a7
 800c588:	8b60c8b3 	.word	0x8b60c8b3
 800c58c:	3fc68a28 	.word	0x3fc68a28
 800c590:	509f79fb 	.word	0x509f79fb
 800c594:	3fd34413 	.word	0x3fd34413
 800c598:	7ff00000 	.word	0x7ff00000
 800c59c:	0800dd05 	.word	0x0800dd05
 800c5a0:	3ff80000 	.word	0x3ff80000
 800c5a4:	0800dd68 	.word	0x0800dd68
 800c5a8:	0800dd40 	.word	0x0800dd40
 800c5ac:	0800dd31 	.word	0x0800dd31
 800c5b0:	07f1      	lsls	r1, r6, #31
 800c5b2:	d508      	bpl.n	800c5c6 <_dtoa_r+0x34e>
 800c5b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5bc:	f7f4 f82c 	bl	8000618 <__aeabi_dmul>
 800c5c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	1076      	asrs	r6, r6, #1
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	2e00      	cmp	r6, #0
 800c5cc:	d1f0      	bne.n	800c5b0 <_dtoa_r+0x338>
 800c5ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5d6:	f7f4 f949 	bl	800086c <__aeabi_ddiv>
 800c5da:	e9cd 0100 	strd	r0, r1, [sp]
 800c5de:	e01a      	b.n	800c616 <_dtoa_r+0x39e>
 800c5e0:	2502      	movs	r5, #2
 800c5e2:	e7a3      	b.n	800c52c <_dtoa_r+0x2b4>
 800c5e4:	f000 80a0 	beq.w	800c728 <_dtoa_r+0x4b0>
 800c5e8:	f1ca 0600 	rsb	r6, sl, #0
 800c5ec:	4b9f      	ldr	r3, [pc, #636]	; (800c86c <_dtoa_r+0x5f4>)
 800c5ee:	4fa0      	ldr	r7, [pc, #640]	; (800c870 <_dtoa_r+0x5f8>)
 800c5f0:	f006 020f 	and.w	r2, r6, #15
 800c5f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c600:	f7f4 f80a 	bl	8000618 <__aeabi_dmul>
 800c604:	e9cd 0100 	strd	r0, r1, [sp]
 800c608:	1136      	asrs	r6, r6, #4
 800c60a:	2300      	movs	r3, #0
 800c60c:	2502      	movs	r5, #2
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d17f      	bne.n	800c712 <_dtoa_r+0x49a>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e1      	bne.n	800c5da <_dtoa_r+0x362>
 800c616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8087 	beq.w	800c72c <_dtoa_r+0x4b4>
 800c61e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c622:	2200      	movs	r2, #0
 800c624:	4b93      	ldr	r3, [pc, #588]	; (800c874 <_dtoa_r+0x5fc>)
 800c626:	4630      	mov	r0, r6
 800c628:	4639      	mov	r1, r7
 800c62a:	f7f4 fa67 	bl	8000afc <__aeabi_dcmplt>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d07c      	beq.n	800c72c <_dtoa_r+0x4b4>
 800c632:	f1b9 0f00 	cmp.w	r9, #0
 800c636:	d079      	beq.n	800c72c <_dtoa_r+0x4b4>
 800c638:	9b02      	ldr	r3, [sp, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dd35      	ble.n	800c6aa <_dtoa_r+0x432>
 800c63e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c642:	9308      	str	r3, [sp, #32]
 800c644:	4639      	mov	r1, r7
 800c646:	2200      	movs	r2, #0
 800c648:	4b8b      	ldr	r3, [pc, #556]	; (800c878 <_dtoa_r+0x600>)
 800c64a:	4630      	mov	r0, r6
 800c64c:	f7f3 ffe4 	bl	8000618 <__aeabi_dmul>
 800c650:	e9cd 0100 	strd	r0, r1, [sp]
 800c654:	9f02      	ldr	r7, [sp, #8]
 800c656:	3501      	adds	r5, #1
 800c658:	4628      	mov	r0, r5
 800c65a:	f7f3 ff73 	bl	8000544 <__aeabi_i2d>
 800c65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c662:	f7f3 ffd9 	bl	8000618 <__aeabi_dmul>
 800c666:	2200      	movs	r2, #0
 800c668:	4b84      	ldr	r3, [pc, #528]	; (800c87c <_dtoa_r+0x604>)
 800c66a:	f7f3 fe1f 	bl	80002ac <__adddf3>
 800c66e:	4605      	mov	r5, r0
 800c670:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c674:	2f00      	cmp	r7, #0
 800c676:	d15d      	bne.n	800c734 <_dtoa_r+0x4bc>
 800c678:	2200      	movs	r2, #0
 800c67a:	4b81      	ldr	r3, [pc, #516]	; (800c880 <_dtoa_r+0x608>)
 800c67c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c680:	f7f3 fe12 	bl	80002a8 <__aeabi_dsub>
 800c684:	462a      	mov	r2, r5
 800c686:	4633      	mov	r3, r6
 800c688:	e9cd 0100 	strd	r0, r1, [sp]
 800c68c:	f7f4 fa54 	bl	8000b38 <__aeabi_dcmpgt>
 800c690:	2800      	cmp	r0, #0
 800c692:	f040 8288 	bne.w	800cba6 <_dtoa_r+0x92e>
 800c696:	462a      	mov	r2, r5
 800c698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6a0:	f7f4 fa2c 	bl	8000afc <__aeabi_dcmplt>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	f040 827c 	bne.w	800cba2 <_dtoa_r+0x92a>
 800c6aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6ae:	e9cd 2300 	strd	r2, r3, [sp]
 800c6b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f2c0 8150 	blt.w	800c95a <_dtoa_r+0x6e2>
 800c6ba:	f1ba 0f0e 	cmp.w	sl, #14
 800c6be:	f300 814c 	bgt.w	800c95a <_dtoa_r+0x6e2>
 800c6c2:	4b6a      	ldr	r3, [pc, #424]	; (800c86c <_dtoa_r+0x5f4>)
 800c6c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6c8:	ed93 7b00 	vldr	d7, [r3]
 800c6cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6d4:	f280 80d8 	bge.w	800c888 <_dtoa_r+0x610>
 800c6d8:	f1b9 0f00 	cmp.w	r9, #0
 800c6dc:	f300 80d4 	bgt.w	800c888 <_dtoa_r+0x610>
 800c6e0:	f040 825e 	bne.w	800cba0 <_dtoa_r+0x928>
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4b66      	ldr	r3, [pc, #408]	; (800c880 <_dtoa_r+0x608>)
 800c6e8:	ec51 0b17 	vmov	r0, r1, d7
 800c6ec:	f7f3 ff94 	bl	8000618 <__aeabi_dmul>
 800c6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6f4:	f7f4 fa16 	bl	8000b24 <__aeabi_dcmpge>
 800c6f8:	464f      	mov	r7, r9
 800c6fa:	464e      	mov	r6, r9
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f040 8234 	bne.w	800cb6a <_dtoa_r+0x8f2>
 800c702:	2331      	movs	r3, #49	; 0x31
 800c704:	f10b 0501 	add.w	r5, fp, #1
 800c708:	f88b 3000 	strb.w	r3, [fp]
 800c70c:	f10a 0a01 	add.w	sl, sl, #1
 800c710:	e22f      	b.n	800cb72 <_dtoa_r+0x8fa>
 800c712:	07f2      	lsls	r2, r6, #31
 800c714:	d505      	bpl.n	800c722 <_dtoa_r+0x4aa>
 800c716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71a:	f7f3 ff7d 	bl	8000618 <__aeabi_dmul>
 800c71e:	3501      	adds	r5, #1
 800c720:	2301      	movs	r3, #1
 800c722:	1076      	asrs	r6, r6, #1
 800c724:	3708      	adds	r7, #8
 800c726:	e772      	b.n	800c60e <_dtoa_r+0x396>
 800c728:	2502      	movs	r5, #2
 800c72a:	e774      	b.n	800c616 <_dtoa_r+0x39e>
 800c72c:	f8cd a020 	str.w	sl, [sp, #32]
 800c730:	464f      	mov	r7, r9
 800c732:	e791      	b.n	800c658 <_dtoa_r+0x3e0>
 800c734:	4b4d      	ldr	r3, [pc, #308]	; (800c86c <_dtoa_r+0x5f4>)
 800c736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c73a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c740:	2b00      	cmp	r3, #0
 800c742:	d047      	beq.n	800c7d4 <_dtoa_r+0x55c>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	2000      	movs	r0, #0
 800c74a:	494e      	ldr	r1, [pc, #312]	; (800c884 <_dtoa_r+0x60c>)
 800c74c:	f7f4 f88e 	bl	800086c <__aeabi_ddiv>
 800c750:	462a      	mov	r2, r5
 800c752:	4633      	mov	r3, r6
 800c754:	f7f3 fda8 	bl	80002a8 <__aeabi_dsub>
 800c758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c75c:	465d      	mov	r5, fp
 800c75e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c762:	f7f4 fa09 	bl	8000b78 <__aeabi_d2iz>
 800c766:	4606      	mov	r6, r0
 800c768:	f7f3 feec 	bl	8000544 <__aeabi_i2d>
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c774:	f7f3 fd98 	bl	80002a8 <__aeabi_dsub>
 800c778:	3630      	adds	r6, #48	; 0x30
 800c77a:	f805 6b01 	strb.w	r6, [r5], #1
 800c77e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c782:	e9cd 0100 	strd	r0, r1, [sp]
 800c786:	f7f4 f9b9 	bl	8000afc <__aeabi_dcmplt>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d163      	bne.n	800c856 <_dtoa_r+0x5de>
 800c78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c792:	2000      	movs	r0, #0
 800c794:	4937      	ldr	r1, [pc, #220]	; (800c874 <_dtoa_r+0x5fc>)
 800c796:	f7f3 fd87 	bl	80002a8 <__aeabi_dsub>
 800c79a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c79e:	f7f4 f9ad 	bl	8000afc <__aeabi_dcmplt>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	f040 80b7 	bne.w	800c916 <_dtoa_r+0x69e>
 800c7a8:	eba5 030b 	sub.w	r3, r5, fp
 800c7ac:	429f      	cmp	r7, r3
 800c7ae:	f77f af7c 	ble.w	800c6aa <_dtoa_r+0x432>
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	4b30      	ldr	r3, [pc, #192]	; (800c878 <_dtoa_r+0x600>)
 800c7b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7ba:	f7f3 ff2d 	bl	8000618 <__aeabi_dmul>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7c4:	4b2c      	ldr	r3, [pc, #176]	; (800c878 <_dtoa_r+0x600>)
 800c7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ca:	f7f3 ff25 	bl	8000618 <__aeabi_dmul>
 800c7ce:	e9cd 0100 	strd	r0, r1, [sp]
 800c7d2:	e7c4      	b.n	800c75e <_dtoa_r+0x4e6>
 800c7d4:	462a      	mov	r2, r5
 800c7d6:	4633      	mov	r3, r6
 800c7d8:	f7f3 ff1e 	bl	8000618 <__aeabi_dmul>
 800c7dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7e0:	eb0b 0507 	add.w	r5, fp, r7
 800c7e4:	465e      	mov	r6, fp
 800c7e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ea:	f7f4 f9c5 	bl	8000b78 <__aeabi_d2iz>
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	f7f3 fea8 	bl	8000544 <__aeabi_i2d>
 800c7f4:	3730      	adds	r7, #48	; 0x30
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7fe:	f7f3 fd53 	bl	80002a8 <__aeabi_dsub>
 800c802:	f806 7b01 	strb.w	r7, [r6], #1
 800c806:	42ae      	cmp	r6, r5
 800c808:	e9cd 0100 	strd	r0, r1, [sp]
 800c80c:	f04f 0200 	mov.w	r2, #0
 800c810:	d126      	bne.n	800c860 <_dtoa_r+0x5e8>
 800c812:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <_dtoa_r+0x60c>)
 800c814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c818:	f7f3 fd48 	bl	80002ac <__adddf3>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c824:	f7f4 f988 	bl	8000b38 <__aeabi_dcmpgt>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d174      	bne.n	800c916 <_dtoa_r+0x69e>
 800c82c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c830:	2000      	movs	r0, #0
 800c832:	4914      	ldr	r1, [pc, #80]	; (800c884 <_dtoa_r+0x60c>)
 800c834:	f7f3 fd38 	bl	80002a8 <__aeabi_dsub>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c840:	f7f4 f95c 	bl	8000afc <__aeabi_dcmplt>
 800c844:	2800      	cmp	r0, #0
 800c846:	f43f af30 	beq.w	800c6aa <_dtoa_r+0x432>
 800c84a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c84e:	2b30      	cmp	r3, #48	; 0x30
 800c850:	f105 32ff 	add.w	r2, r5, #4294967295
 800c854:	d002      	beq.n	800c85c <_dtoa_r+0x5e4>
 800c856:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c85a:	e04a      	b.n	800c8f2 <_dtoa_r+0x67a>
 800c85c:	4615      	mov	r5, r2
 800c85e:	e7f4      	b.n	800c84a <_dtoa_r+0x5d2>
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <_dtoa_r+0x600>)
 800c862:	f7f3 fed9 	bl	8000618 <__aeabi_dmul>
 800c866:	e9cd 0100 	strd	r0, r1, [sp]
 800c86a:	e7bc      	b.n	800c7e6 <_dtoa_r+0x56e>
 800c86c:	0800dd68 	.word	0x0800dd68
 800c870:	0800dd40 	.word	0x0800dd40
 800c874:	3ff00000 	.word	0x3ff00000
 800c878:	40240000 	.word	0x40240000
 800c87c:	401c0000 	.word	0x401c0000
 800c880:	40140000 	.word	0x40140000
 800c884:	3fe00000 	.word	0x3fe00000
 800c888:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c88c:	465d      	mov	r5, fp
 800c88e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 ffe9 	bl	800086c <__aeabi_ddiv>
 800c89a:	f7f4 f96d 	bl	8000b78 <__aeabi_d2iz>
 800c89e:	4680      	mov	r8, r0
 800c8a0:	f7f3 fe50 	bl	8000544 <__aeabi_i2d>
 800c8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8a8:	f7f3 feb6 	bl	8000618 <__aeabi_dmul>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c8b8:	f7f3 fcf6 	bl	80002a8 <__aeabi_dsub>
 800c8bc:	f805 6b01 	strb.w	r6, [r5], #1
 800c8c0:	eba5 060b 	sub.w	r6, r5, fp
 800c8c4:	45b1      	cmp	r9, r6
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	d139      	bne.n	800c940 <_dtoa_r+0x6c8>
 800c8cc:	f7f3 fcee 	bl	80002ac <__adddf3>
 800c8d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	460f      	mov	r7, r1
 800c8d8:	f7f4 f92e 	bl	8000b38 <__aeabi_dcmpgt>
 800c8dc:	b9c8      	cbnz	r0, 800c912 <_dtoa_r+0x69a>
 800c8de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	f7f4 f8ff 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8ea:	b110      	cbz	r0, 800c8f2 <_dtoa_r+0x67a>
 800c8ec:	f018 0f01 	tst.w	r8, #1
 800c8f0:	d10f      	bne.n	800c912 <_dtoa_r+0x69a>
 800c8f2:	9904      	ldr	r1, [sp, #16]
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f000 fae2 	bl	800cebe <_Bfree>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8fe:	702b      	strb	r3, [r5, #0]
 800c900:	f10a 0301 	add.w	r3, sl, #1
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 8241 	beq.w	800cd90 <_dtoa_r+0xb18>
 800c90e:	601d      	str	r5, [r3, #0]
 800c910:	e23e      	b.n	800cd90 <_dtoa_r+0xb18>
 800c912:	f8cd a020 	str.w	sl, [sp, #32]
 800c916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c91a:	2a39      	cmp	r2, #57	; 0x39
 800c91c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c920:	d108      	bne.n	800c934 <_dtoa_r+0x6bc>
 800c922:	459b      	cmp	fp, r3
 800c924:	d10a      	bne.n	800c93c <_dtoa_r+0x6c4>
 800c926:	9b08      	ldr	r3, [sp, #32]
 800c928:	3301      	adds	r3, #1
 800c92a:	9308      	str	r3, [sp, #32]
 800c92c:	2330      	movs	r3, #48	; 0x30
 800c92e:	f88b 3000 	strb.w	r3, [fp]
 800c932:	465b      	mov	r3, fp
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	3201      	adds	r2, #1
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	e78c      	b.n	800c856 <_dtoa_r+0x5de>
 800c93c:	461d      	mov	r5, r3
 800c93e:	e7ea      	b.n	800c916 <_dtoa_r+0x69e>
 800c940:	2200      	movs	r2, #0
 800c942:	4b9b      	ldr	r3, [pc, #620]	; (800cbb0 <_dtoa_r+0x938>)
 800c944:	f7f3 fe68 	bl	8000618 <__aeabi_dmul>
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
 800c950:	f7f4 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 800c954:	2800      	cmp	r0, #0
 800c956:	d09a      	beq.n	800c88e <_dtoa_r+0x616>
 800c958:	e7cb      	b.n	800c8f2 <_dtoa_r+0x67a>
 800c95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	f000 808b 	beq.w	800ca78 <_dtoa_r+0x800>
 800c962:	9a06      	ldr	r2, [sp, #24]
 800c964:	2a01      	cmp	r2, #1
 800c966:	dc6e      	bgt.n	800ca46 <_dtoa_r+0x7ce>
 800c968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c96a:	2a00      	cmp	r2, #0
 800c96c:	d067      	beq.n	800ca3e <_dtoa_r+0x7c6>
 800c96e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c972:	9f07      	ldr	r7, [sp, #28]
 800c974:	9d05      	ldr	r5, [sp, #20]
 800c976:	9a05      	ldr	r2, [sp, #20]
 800c978:	2101      	movs	r1, #1
 800c97a:	441a      	add	r2, r3
 800c97c:	4620      	mov	r0, r4
 800c97e:	9205      	str	r2, [sp, #20]
 800c980:	4498      	add	r8, r3
 800c982:	f000 fb3c 	bl	800cffe <__i2b>
 800c986:	4606      	mov	r6, r0
 800c988:	2d00      	cmp	r5, #0
 800c98a:	dd0c      	ble.n	800c9a6 <_dtoa_r+0x72e>
 800c98c:	f1b8 0f00 	cmp.w	r8, #0
 800c990:	dd09      	ble.n	800c9a6 <_dtoa_r+0x72e>
 800c992:	4545      	cmp	r5, r8
 800c994:	9a05      	ldr	r2, [sp, #20]
 800c996:	462b      	mov	r3, r5
 800c998:	bfa8      	it	ge
 800c99a:	4643      	movge	r3, r8
 800c99c:	1ad2      	subs	r2, r2, r3
 800c99e:	9205      	str	r2, [sp, #20]
 800c9a0:	1aed      	subs	r5, r5, r3
 800c9a2:	eba8 0803 	sub.w	r8, r8, r3
 800c9a6:	9b07      	ldr	r3, [sp, #28]
 800c9a8:	b1eb      	cbz	r3, 800c9e6 <_dtoa_r+0x76e>
 800c9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d067      	beq.n	800ca80 <_dtoa_r+0x808>
 800c9b0:	b18f      	cbz	r7, 800c9d6 <_dtoa_r+0x75e>
 800c9b2:	4631      	mov	r1, r6
 800c9b4:	463a      	mov	r2, r7
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 fbc0 	bl	800d13c <__pow5mult>
 800c9bc:	9a04      	ldr	r2, [sp, #16]
 800c9be:	4601      	mov	r1, r0
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fb24 	bl	800d010 <__multiply>
 800c9c8:	9904      	ldr	r1, [sp, #16]
 800c9ca:	9008      	str	r0, [sp, #32]
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fa76 	bl	800cebe <_Bfree>
 800c9d2:	9b08      	ldr	r3, [sp, #32]
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	9b07      	ldr	r3, [sp, #28]
 800c9d8:	1bda      	subs	r2, r3, r7
 800c9da:	d004      	beq.n	800c9e6 <_dtoa_r+0x76e>
 800c9dc:	9904      	ldr	r1, [sp, #16]
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f000 fbac 	bl	800d13c <__pow5mult>
 800c9e4:	9004      	str	r0, [sp, #16]
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f000 fb08 	bl	800cffe <__i2b>
 800c9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9f0:	4607      	mov	r7, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 81d0 	beq.w	800cd98 <_dtoa_r+0xb20>
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fb9d 	bl	800d13c <__pow5mult>
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	4607      	mov	r7, r0
 800ca08:	dc40      	bgt.n	800ca8c <_dtoa_r+0x814>
 800ca0a:	9b00      	ldr	r3, [sp, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d139      	bne.n	800ca84 <_dtoa_r+0x80c>
 800ca10:	9b01      	ldr	r3, [sp, #4]
 800ca12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d136      	bne.n	800ca88 <_dtoa_r+0x810>
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca20:	0d1b      	lsrs	r3, r3, #20
 800ca22:	051b      	lsls	r3, r3, #20
 800ca24:	b12b      	cbz	r3, 800ca32 <_dtoa_r+0x7ba>
 800ca26:	9b05      	ldr	r3, [sp, #20]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	9305      	str	r3, [sp, #20]
 800ca2c:	f108 0801 	add.w	r8, r8, #1
 800ca30:	2301      	movs	r3, #1
 800ca32:	9307      	str	r3, [sp, #28]
 800ca34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d12a      	bne.n	800ca90 <_dtoa_r+0x818>
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	e030      	b.n	800caa0 <_dtoa_r+0x828>
 800ca3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca44:	e795      	b.n	800c972 <_dtoa_r+0x6fa>
 800ca46:	9b07      	ldr	r3, [sp, #28]
 800ca48:	f109 37ff 	add.w	r7, r9, #4294967295
 800ca4c:	42bb      	cmp	r3, r7
 800ca4e:	bfbf      	itttt	lt
 800ca50:	9b07      	ldrlt	r3, [sp, #28]
 800ca52:	9707      	strlt	r7, [sp, #28]
 800ca54:	1afa      	sublt	r2, r7, r3
 800ca56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ca58:	bfbb      	ittet	lt
 800ca5a:	189b      	addlt	r3, r3, r2
 800ca5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca5e:	1bdf      	subge	r7, r3, r7
 800ca60:	2700      	movlt	r7, #0
 800ca62:	f1b9 0f00 	cmp.w	r9, #0
 800ca66:	bfb5      	itete	lt
 800ca68:	9b05      	ldrlt	r3, [sp, #20]
 800ca6a:	9d05      	ldrge	r5, [sp, #20]
 800ca6c:	eba3 0509 	sublt.w	r5, r3, r9
 800ca70:	464b      	movge	r3, r9
 800ca72:	bfb8      	it	lt
 800ca74:	2300      	movlt	r3, #0
 800ca76:	e77e      	b.n	800c976 <_dtoa_r+0x6fe>
 800ca78:	9f07      	ldr	r7, [sp, #28]
 800ca7a:	9d05      	ldr	r5, [sp, #20]
 800ca7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ca7e:	e783      	b.n	800c988 <_dtoa_r+0x710>
 800ca80:	9a07      	ldr	r2, [sp, #28]
 800ca82:	e7ab      	b.n	800c9dc <_dtoa_r+0x764>
 800ca84:	2300      	movs	r3, #0
 800ca86:	e7d4      	b.n	800ca32 <_dtoa_r+0x7ba>
 800ca88:	9b00      	ldr	r3, [sp, #0]
 800ca8a:	e7d2      	b.n	800ca32 <_dtoa_r+0x7ba>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9307      	str	r3, [sp, #28]
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ca96:	6918      	ldr	r0, [r3, #16]
 800ca98:	f000 fa63 	bl	800cf62 <__hi0bits>
 800ca9c:	f1c0 0020 	rsb	r0, r0, #32
 800caa0:	4440      	add	r0, r8
 800caa2:	f010 001f 	ands.w	r0, r0, #31
 800caa6:	d047      	beq.n	800cb38 <_dtoa_r+0x8c0>
 800caa8:	f1c0 0320 	rsb	r3, r0, #32
 800caac:	2b04      	cmp	r3, #4
 800caae:	dd3b      	ble.n	800cb28 <_dtoa_r+0x8b0>
 800cab0:	9b05      	ldr	r3, [sp, #20]
 800cab2:	f1c0 001c 	rsb	r0, r0, #28
 800cab6:	4403      	add	r3, r0
 800cab8:	9305      	str	r3, [sp, #20]
 800caba:	4405      	add	r5, r0
 800cabc:	4480      	add	r8, r0
 800cabe:	9b05      	ldr	r3, [sp, #20]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dd05      	ble.n	800cad0 <_dtoa_r+0x858>
 800cac4:	461a      	mov	r2, r3
 800cac6:	9904      	ldr	r1, [sp, #16]
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fb85 	bl	800d1d8 <__lshift>
 800cace:	9004      	str	r0, [sp, #16]
 800cad0:	f1b8 0f00 	cmp.w	r8, #0
 800cad4:	dd05      	ble.n	800cae2 <_dtoa_r+0x86a>
 800cad6:	4639      	mov	r1, r7
 800cad8:	4642      	mov	r2, r8
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 fb7c 	bl	800d1d8 <__lshift>
 800cae0:	4607      	mov	r7, r0
 800cae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cae4:	b353      	cbz	r3, 800cb3c <_dtoa_r+0x8c4>
 800cae6:	4639      	mov	r1, r7
 800cae8:	9804      	ldr	r0, [sp, #16]
 800caea:	f000 fbc9 	bl	800d280 <__mcmp>
 800caee:	2800      	cmp	r0, #0
 800caf0:	da24      	bge.n	800cb3c <_dtoa_r+0x8c4>
 800caf2:	2300      	movs	r3, #0
 800caf4:	220a      	movs	r2, #10
 800caf6:	9904      	ldr	r1, [sp, #16]
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 f9f7 	bl	800ceec <__multadd>
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	9004      	str	r0, [sp, #16]
 800cb02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 814d 	beq.w	800cda6 <_dtoa_r+0xb2e>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4631      	mov	r1, r6
 800cb10:	220a      	movs	r2, #10
 800cb12:	4620      	mov	r0, r4
 800cb14:	f000 f9ea 	bl	800ceec <__multadd>
 800cb18:	9b02      	ldr	r3, [sp, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	dc4f      	bgt.n	800cbc0 <_dtoa_r+0x948>
 800cb20:	9b06      	ldr	r3, [sp, #24]
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	dd4c      	ble.n	800cbc0 <_dtoa_r+0x948>
 800cb26:	e011      	b.n	800cb4c <_dtoa_r+0x8d4>
 800cb28:	d0c9      	beq.n	800cabe <_dtoa_r+0x846>
 800cb2a:	9a05      	ldr	r2, [sp, #20]
 800cb2c:	331c      	adds	r3, #28
 800cb2e:	441a      	add	r2, r3
 800cb30:	9205      	str	r2, [sp, #20]
 800cb32:	441d      	add	r5, r3
 800cb34:	4498      	add	r8, r3
 800cb36:	e7c2      	b.n	800cabe <_dtoa_r+0x846>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	e7f6      	b.n	800cb2a <_dtoa_r+0x8b2>
 800cb3c:	f1b9 0f00 	cmp.w	r9, #0
 800cb40:	dc38      	bgt.n	800cbb4 <_dtoa_r+0x93c>
 800cb42:	9b06      	ldr	r3, [sp, #24]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	dd35      	ble.n	800cbb4 <_dtoa_r+0x93c>
 800cb48:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb4c:	9b02      	ldr	r3, [sp, #8]
 800cb4e:	b963      	cbnz	r3, 800cb6a <_dtoa_r+0x8f2>
 800cb50:	4639      	mov	r1, r7
 800cb52:	2205      	movs	r2, #5
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f9c9 	bl	800ceec <__multadd>
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	9804      	ldr	r0, [sp, #16]
 800cb60:	f000 fb8e 	bl	800d280 <__mcmp>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f73f adcc 	bgt.w	800c702 <_dtoa_r+0x48a>
 800cb6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6c:	465d      	mov	r5, fp
 800cb6e:	ea6f 0a03 	mvn.w	sl, r3
 800cb72:	f04f 0900 	mov.w	r9, #0
 800cb76:	4639      	mov	r1, r7
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 f9a0 	bl	800cebe <_Bfree>
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	f43f aeb7 	beq.w	800c8f2 <_dtoa_r+0x67a>
 800cb84:	f1b9 0f00 	cmp.w	r9, #0
 800cb88:	d005      	beq.n	800cb96 <_dtoa_r+0x91e>
 800cb8a:	45b1      	cmp	r9, r6
 800cb8c:	d003      	beq.n	800cb96 <_dtoa_r+0x91e>
 800cb8e:	4649      	mov	r1, r9
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 f994 	bl	800cebe <_Bfree>
 800cb96:	4631      	mov	r1, r6
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 f990 	bl	800cebe <_Bfree>
 800cb9e:	e6a8      	b.n	800c8f2 <_dtoa_r+0x67a>
 800cba0:	2700      	movs	r7, #0
 800cba2:	463e      	mov	r6, r7
 800cba4:	e7e1      	b.n	800cb6a <_dtoa_r+0x8f2>
 800cba6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cbaa:	463e      	mov	r6, r7
 800cbac:	e5a9      	b.n	800c702 <_dtoa_r+0x48a>
 800cbae:	bf00      	nop
 800cbb0:	40240000 	.word	0x40240000
 800cbb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80fa 	beq.w	800cdb4 <_dtoa_r+0xb3c>
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	dd05      	ble.n	800cbd0 <_dtoa_r+0x958>
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 fb05 	bl	800d1d8 <__lshift>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	9b07      	ldr	r3, [sp, #28]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d04c      	beq.n	800cc70 <_dtoa_r+0x9f8>
 800cbd6:	6871      	ldr	r1, [r6, #4]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 f93c 	bl	800ce56 <_Balloc>
 800cbde:	6932      	ldr	r2, [r6, #16]
 800cbe0:	3202      	adds	r2, #2
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	0092      	lsls	r2, r2, #2
 800cbe6:	f106 010c 	add.w	r1, r6, #12
 800cbea:	300c      	adds	r0, #12
 800cbec:	f000 f928 	bl	800ce40 <memcpy>
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 faef 	bl	800d1d8 <__lshift>
 800cbfa:	9b00      	ldr	r3, [sp, #0]
 800cbfc:	f8cd b014 	str.w	fp, [sp, #20]
 800cc00:	f003 0301 	and.w	r3, r3, #1
 800cc04:	46b1      	mov	r9, r6
 800cc06:	9307      	str	r3, [sp, #28]
 800cc08:	4606      	mov	r6, r0
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	9804      	ldr	r0, [sp, #16]
 800cc0e:	f7ff faa5 	bl	800c15c <quorem>
 800cc12:	4649      	mov	r1, r9
 800cc14:	4605      	mov	r5, r0
 800cc16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cc1a:	9804      	ldr	r0, [sp, #16]
 800cc1c:	f000 fb30 	bl	800d280 <__mcmp>
 800cc20:	4632      	mov	r2, r6
 800cc22:	9000      	str	r0, [sp, #0]
 800cc24:	4639      	mov	r1, r7
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 fb44 	bl	800d2b4 <__mdiff>
 800cc2c:	68c3      	ldr	r3, [r0, #12]
 800cc2e:	4602      	mov	r2, r0
 800cc30:	bb03      	cbnz	r3, 800cc74 <_dtoa_r+0x9fc>
 800cc32:	4601      	mov	r1, r0
 800cc34:	9008      	str	r0, [sp, #32]
 800cc36:	9804      	ldr	r0, [sp, #16]
 800cc38:	f000 fb22 	bl	800d280 <__mcmp>
 800cc3c:	9a08      	ldr	r2, [sp, #32]
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4611      	mov	r1, r2
 800cc42:	4620      	mov	r0, r4
 800cc44:	9308      	str	r3, [sp, #32]
 800cc46:	f000 f93a 	bl	800cebe <_Bfree>
 800cc4a:	9b08      	ldr	r3, [sp, #32]
 800cc4c:	b9a3      	cbnz	r3, 800cc78 <_dtoa_r+0xa00>
 800cc4e:	9a06      	ldr	r2, [sp, #24]
 800cc50:	b992      	cbnz	r2, 800cc78 <_dtoa_r+0xa00>
 800cc52:	9a07      	ldr	r2, [sp, #28]
 800cc54:	b982      	cbnz	r2, 800cc78 <_dtoa_r+0xa00>
 800cc56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc5a:	d029      	beq.n	800ccb0 <_dtoa_r+0xa38>
 800cc5c:	9b00      	ldr	r3, [sp, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dd01      	ble.n	800cc66 <_dtoa_r+0x9ee>
 800cc62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cc66:	9b05      	ldr	r3, [sp, #20]
 800cc68:	1c5d      	adds	r5, r3, #1
 800cc6a:	f883 8000 	strb.w	r8, [r3]
 800cc6e:	e782      	b.n	800cb76 <_dtoa_r+0x8fe>
 800cc70:	4630      	mov	r0, r6
 800cc72:	e7c2      	b.n	800cbfa <_dtoa_r+0x982>
 800cc74:	2301      	movs	r3, #1
 800cc76:	e7e3      	b.n	800cc40 <_dtoa_r+0x9c8>
 800cc78:	9a00      	ldr	r2, [sp, #0]
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	db04      	blt.n	800cc88 <_dtoa_r+0xa10>
 800cc7e:	d125      	bne.n	800cccc <_dtoa_r+0xa54>
 800cc80:	9a06      	ldr	r2, [sp, #24]
 800cc82:	bb1a      	cbnz	r2, 800cccc <_dtoa_r+0xa54>
 800cc84:	9a07      	ldr	r2, [sp, #28]
 800cc86:	bb0a      	cbnz	r2, 800cccc <_dtoa_r+0xa54>
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	ddec      	ble.n	800cc66 <_dtoa_r+0x9ee>
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	9904      	ldr	r1, [sp, #16]
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 faa1 	bl	800d1d8 <__lshift>
 800cc96:	4639      	mov	r1, r7
 800cc98:	9004      	str	r0, [sp, #16]
 800cc9a:	f000 faf1 	bl	800d280 <__mcmp>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	dc03      	bgt.n	800ccaa <_dtoa_r+0xa32>
 800cca2:	d1e0      	bne.n	800cc66 <_dtoa_r+0x9ee>
 800cca4:	f018 0f01 	tst.w	r8, #1
 800cca8:	d0dd      	beq.n	800cc66 <_dtoa_r+0x9ee>
 800ccaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccae:	d1d8      	bne.n	800cc62 <_dtoa_r+0x9ea>
 800ccb0:	9b05      	ldr	r3, [sp, #20]
 800ccb2:	9a05      	ldr	r2, [sp, #20]
 800ccb4:	1c5d      	adds	r5, r3, #1
 800ccb6:	2339      	movs	r3, #57	; 0x39
 800ccb8:	7013      	strb	r3, [r2, #0]
 800ccba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccbe:	2b39      	cmp	r3, #57	; 0x39
 800ccc0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ccc4:	d04f      	beq.n	800cd66 <_dtoa_r+0xaee>
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	7013      	strb	r3, [r2, #0]
 800ccca:	e754      	b.n	800cb76 <_dtoa_r+0x8fe>
 800cccc:	9a05      	ldr	r2, [sp, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f102 0501 	add.w	r5, r2, #1
 800ccd4:	dd06      	ble.n	800cce4 <_dtoa_r+0xa6c>
 800ccd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccda:	d0e9      	beq.n	800ccb0 <_dtoa_r+0xa38>
 800ccdc:	f108 0801 	add.w	r8, r8, #1
 800cce0:	9b05      	ldr	r3, [sp, #20]
 800cce2:	e7c2      	b.n	800cc6a <_dtoa_r+0x9f2>
 800cce4:	9a02      	ldr	r2, [sp, #8]
 800cce6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ccea:	eba5 030b 	sub.w	r3, r5, fp
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d021      	beq.n	800cd36 <_dtoa_r+0xabe>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	220a      	movs	r2, #10
 800ccf6:	9904      	ldr	r1, [sp, #16]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 f8f7 	bl	800ceec <__multadd>
 800ccfe:	45b1      	cmp	r9, r6
 800cd00:	9004      	str	r0, [sp, #16]
 800cd02:	f04f 0300 	mov.w	r3, #0
 800cd06:	f04f 020a 	mov.w	r2, #10
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	d105      	bne.n	800cd1c <_dtoa_r+0xaa4>
 800cd10:	f000 f8ec 	bl	800ceec <__multadd>
 800cd14:	4681      	mov	r9, r0
 800cd16:	4606      	mov	r6, r0
 800cd18:	9505      	str	r5, [sp, #20]
 800cd1a:	e776      	b.n	800cc0a <_dtoa_r+0x992>
 800cd1c:	f000 f8e6 	bl	800ceec <__multadd>
 800cd20:	4631      	mov	r1, r6
 800cd22:	4681      	mov	r9, r0
 800cd24:	2300      	movs	r3, #0
 800cd26:	220a      	movs	r2, #10
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f000 f8df 	bl	800ceec <__multadd>
 800cd2e:	4606      	mov	r6, r0
 800cd30:	e7f2      	b.n	800cd18 <_dtoa_r+0xaa0>
 800cd32:	f04f 0900 	mov.w	r9, #0
 800cd36:	2201      	movs	r2, #1
 800cd38:	9904      	ldr	r1, [sp, #16]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 fa4c 	bl	800d1d8 <__lshift>
 800cd40:	4639      	mov	r1, r7
 800cd42:	9004      	str	r0, [sp, #16]
 800cd44:	f000 fa9c 	bl	800d280 <__mcmp>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	dcb6      	bgt.n	800ccba <_dtoa_r+0xa42>
 800cd4c:	d102      	bne.n	800cd54 <_dtoa_r+0xadc>
 800cd4e:	f018 0f01 	tst.w	r8, #1
 800cd52:	d1b2      	bne.n	800ccba <_dtoa_r+0xa42>
 800cd54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd58:	2b30      	cmp	r3, #48	; 0x30
 800cd5a:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd5e:	f47f af0a 	bne.w	800cb76 <_dtoa_r+0x8fe>
 800cd62:	4615      	mov	r5, r2
 800cd64:	e7f6      	b.n	800cd54 <_dtoa_r+0xadc>
 800cd66:	4593      	cmp	fp, r2
 800cd68:	d105      	bne.n	800cd76 <_dtoa_r+0xafe>
 800cd6a:	2331      	movs	r3, #49	; 0x31
 800cd6c:	f10a 0a01 	add.w	sl, sl, #1
 800cd70:	f88b 3000 	strb.w	r3, [fp]
 800cd74:	e6ff      	b.n	800cb76 <_dtoa_r+0x8fe>
 800cd76:	4615      	mov	r5, r2
 800cd78:	e79f      	b.n	800ccba <_dtoa_r+0xa42>
 800cd7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cde0 <_dtoa_r+0xb68>
 800cd7e:	e007      	b.n	800cd90 <_dtoa_r+0xb18>
 800cd80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd82:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cde4 <_dtoa_r+0xb6c>
 800cd86:	b11b      	cbz	r3, 800cd90 <_dtoa_r+0xb18>
 800cd88:	f10b 0308 	add.w	r3, fp, #8
 800cd8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	4658      	mov	r0, fp
 800cd92:	b017      	add	sp, #92	; 0x5c
 800cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd98:	9b06      	ldr	r3, [sp, #24]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	f77f ae35 	ble.w	800ca0a <_dtoa_r+0x792>
 800cda0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cda2:	9307      	str	r3, [sp, #28]
 800cda4:	e649      	b.n	800ca3a <_dtoa_r+0x7c2>
 800cda6:	9b02      	ldr	r3, [sp, #8]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	dc03      	bgt.n	800cdb4 <_dtoa_r+0xb3c>
 800cdac:	9b06      	ldr	r3, [sp, #24]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	f73f aecc 	bgt.w	800cb4c <_dtoa_r+0x8d4>
 800cdb4:	465d      	mov	r5, fp
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	9804      	ldr	r0, [sp, #16]
 800cdba:	f7ff f9cf 	bl	800c15c <quorem>
 800cdbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cdc2:	f805 8b01 	strb.w	r8, [r5], #1
 800cdc6:	9a02      	ldr	r2, [sp, #8]
 800cdc8:	eba5 030b 	sub.w	r3, r5, fp
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	ddb0      	ble.n	800cd32 <_dtoa_r+0xaba>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	220a      	movs	r2, #10
 800cdd4:	9904      	ldr	r1, [sp, #16]
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 f888 	bl	800ceec <__multadd>
 800cddc:	9004      	str	r0, [sp, #16]
 800cdde:	e7ea      	b.n	800cdb6 <_dtoa_r+0xb3e>
 800cde0:	0800dd04 	.word	0x0800dd04
 800cde4:	0800dd28 	.word	0x0800dd28

0800cde8 <__locale_ctype_ptr_l>:
 800cde8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cdec:	4770      	bx	lr
	...

0800cdf0 <_localeconv_r>:
 800cdf0:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <_localeconv_r+0x14>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6a18      	ldr	r0, [r3, #32]
 800cdf6:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <_localeconv_r+0x18>)
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	bf08      	it	eq
 800cdfc:	4618      	moveq	r0, r3
 800cdfe:	30f0      	adds	r0, #240	; 0xf0
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20000068 	.word	0x20000068
 800ce08:	200000cc 	.word	0x200000cc

0800ce0c <malloc>:
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <malloc+0xc>)
 800ce0e:	4601      	mov	r1, r0
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	f000 bb57 	b.w	800d4c4 <_malloc_r>
 800ce16:	bf00      	nop
 800ce18:	20000068 	.word	0x20000068

0800ce1c <__ascii_mbtowc>:
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	b901      	cbnz	r1, 800ce22 <__ascii_mbtowc+0x6>
 800ce20:	a901      	add	r1, sp, #4
 800ce22:	b142      	cbz	r2, 800ce36 <__ascii_mbtowc+0x1a>
 800ce24:	b14b      	cbz	r3, 800ce3a <__ascii_mbtowc+0x1e>
 800ce26:	7813      	ldrb	r3, [r2, #0]
 800ce28:	600b      	str	r3, [r1, #0]
 800ce2a:	7812      	ldrb	r2, [r2, #0]
 800ce2c:	1c10      	adds	r0, r2, #0
 800ce2e:	bf18      	it	ne
 800ce30:	2001      	movne	r0, #1
 800ce32:	b002      	add	sp, #8
 800ce34:	4770      	bx	lr
 800ce36:	4610      	mov	r0, r2
 800ce38:	e7fb      	b.n	800ce32 <__ascii_mbtowc+0x16>
 800ce3a:	f06f 0001 	mvn.w	r0, #1
 800ce3e:	e7f8      	b.n	800ce32 <__ascii_mbtowc+0x16>

0800ce40 <memcpy>:
 800ce40:	b510      	push	{r4, lr}
 800ce42:	1e43      	subs	r3, r0, #1
 800ce44:	440a      	add	r2, r1
 800ce46:	4291      	cmp	r1, r2
 800ce48:	d100      	bne.n	800ce4c <memcpy+0xc>
 800ce4a:	bd10      	pop	{r4, pc}
 800ce4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce54:	e7f7      	b.n	800ce46 <memcpy+0x6>

0800ce56 <_Balloc>:
 800ce56:	b570      	push	{r4, r5, r6, lr}
 800ce58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460e      	mov	r6, r1
 800ce5e:	b93d      	cbnz	r5, 800ce70 <_Balloc+0x1a>
 800ce60:	2010      	movs	r0, #16
 800ce62:	f7ff ffd3 	bl	800ce0c <malloc>
 800ce66:	6260      	str	r0, [r4, #36]	; 0x24
 800ce68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce6c:	6005      	str	r5, [r0, #0]
 800ce6e:	60c5      	str	r5, [r0, #12]
 800ce70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ce72:	68eb      	ldr	r3, [r5, #12]
 800ce74:	b183      	cbz	r3, 800ce98 <_Balloc+0x42>
 800ce76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ce7e:	b9b8      	cbnz	r0, 800ceb0 <_Balloc+0x5a>
 800ce80:	2101      	movs	r1, #1
 800ce82:	fa01 f506 	lsl.w	r5, r1, r6
 800ce86:	1d6a      	adds	r2, r5, #5
 800ce88:	0092      	lsls	r2, r2, #2
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 fabe 	bl	800d40c <_calloc_r>
 800ce90:	b160      	cbz	r0, 800ceac <_Balloc+0x56>
 800ce92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ce96:	e00e      	b.n	800ceb6 <_Balloc+0x60>
 800ce98:	2221      	movs	r2, #33	; 0x21
 800ce9a:	2104      	movs	r1, #4
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 fab5 	bl	800d40c <_calloc_r>
 800cea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cea4:	60e8      	str	r0, [r5, #12]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d1e4      	bne.n	800ce76 <_Balloc+0x20>
 800ceac:	2000      	movs	r0, #0
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	6802      	ldr	r2, [r0, #0]
 800ceb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cebc:	e7f7      	b.n	800ceae <_Balloc+0x58>

0800cebe <_Bfree>:
 800cebe:	b570      	push	{r4, r5, r6, lr}
 800cec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cec2:	4606      	mov	r6, r0
 800cec4:	460d      	mov	r5, r1
 800cec6:	b93c      	cbnz	r4, 800ced8 <_Bfree+0x1a>
 800cec8:	2010      	movs	r0, #16
 800ceca:	f7ff ff9f 	bl	800ce0c <malloc>
 800cece:	6270      	str	r0, [r6, #36]	; 0x24
 800ced0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ced4:	6004      	str	r4, [r0, #0]
 800ced6:	60c4      	str	r4, [r0, #12]
 800ced8:	b13d      	cbz	r5, 800ceea <_Bfree+0x2c>
 800ceda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cedc:	686a      	ldr	r2, [r5, #4]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cee4:	6029      	str	r1, [r5, #0]
 800cee6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ceea:	bd70      	pop	{r4, r5, r6, pc}

0800ceec <__multadd>:
 800ceec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef0:	690d      	ldr	r5, [r1, #16]
 800cef2:	461f      	mov	r7, r3
 800cef4:	4606      	mov	r6, r0
 800cef6:	460c      	mov	r4, r1
 800cef8:	f101 0c14 	add.w	ip, r1, #20
 800cefc:	2300      	movs	r3, #0
 800cefe:	f8dc 0000 	ldr.w	r0, [ip]
 800cf02:	b281      	uxth	r1, r0
 800cf04:	fb02 7101 	mla	r1, r2, r1, r7
 800cf08:	0c0f      	lsrs	r7, r1, #16
 800cf0a:	0c00      	lsrs	r0, r0, #16
 800cf0c:	fb02 7000 	mla	r0, r2, r0, r7
 800cf10:	b289      	uxth	r1, r1
 800cf12:	3301      	adds	r3, #1
 800cf14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cf1e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf22:	dcec      	bgt.n	800cefe <__multadd+0x12>
 800cf24:	b1d7      	cbz	r7, 800cf5c <__multadd+0x70>
 800cf26:	68a3      	ldr	r3, [r4, #8]
 800cf28:	42ab      	cmp	r3, r5
 800cf2a:	dc12      	bgt.n	800cf52 <__multadd+0x66>
 800cf2c:	6861      	ldr	r1, [r4, #4]
 800cf2e:	4630      	mov	r0, r6
 800cf30:	3101      	adds	r1, #1
 800cf32:	f7ff ff90 	bl	800ce56 <_Balloc>
 800cf36:	6922      	ldr	r2, [r4, #16]
 800cf38:	3202      	adds	r2, #2
 800cf3a:	f104 010c 	add.w	r1, r4, #12
 800cf3e:	4680      	mov	r8, r0
 800cf40:	0092      	lsls	r2, r2, #2
 800cf42:	300c      	adds	r0, #12
 800cf44:	f7ff ff7c 	bl	800ce40 <memcpy>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7ff ffb7 	bl	800cebe <_Bfree>
 800cf50:	4644      	mov	r4, r8
 800cf52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf56:	3501      	adds	r5, #1
 800cf58:	615f      	str	r7, [r3, #20]
 800cf5a:	6125      	str	r5, [r4, #16]
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf62 <__hi0bits>:
 800cf62:	0c02      	lsrs	r2, r0, #16
 800cf64:	0412      	lsls	r2, r2, #16
 800cf66:	4603      	mov	r3, r0
 800cf68:	b9b2      	cbnz	r2, 800cf98 <__hi0bits+0x36>
 800cf6a:	0403      	lsls	r3, r0, #16
 800cf6c:	2010      	movs	r0, #16
 800cf6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cf72:	bf04      	itt	eq
 800cf74:	021b      	lsleq	r3, r3, #8
 800cf76:	3008      	addeq	r0, #8
 800cf78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cf7c:	bf04      	itt	eq
 800cf7e:	011b      	lsleq	r3, r3, #4
 800cf80:	3004      	addeq	r0, #4
 800cf82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cf86:	bf04      	itt	eq
 800cf88:	009b      	lsleq	r3, r3, #2
 800cf8a:	3002      	addeq	r0, #2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	db06      	blt.n	800cf9e <__hi0bits+0x3c>
 800cf90:	005b      	lsls	r3, r3, #1
 800cf92:	d503      	bpl.n	800cf9c <__hi0bits+0x3a>
 800cf94:	3001      	adds	r0, #1
 800cf96:	4770      	bx	lr
 800cf98:	2000      	movs	r0, #0
 800cf9a:	e7e8      	b.n	800cf6e <__hi0bits+0xc>
 800cf9c:	2020      	movs	r0, #32
 800cf9e:	4770      	bx	lr

0800cfa0 <__lo0bits>:
 800cfa0:	6803      	ldr	r3, [r0, #0]
 800cfa2:	f013 0207 	ands.w	r2, r3, #7
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	d00b      	beq.n	800cfc2 <__lo0bits+0x22>
 800cfaa:	07da      	lsls	r2, r3, #31
 800cfac:	d423      	bmi.n	800cff6 <__lo0bits+0x56>
 800cfae:	0798      	lsls	r0, r3, #30
 800cfb0:	bf49      	itett	mi
 800cfb2:	085b      	lsrmi	r3, r3, #1
 800cfb4:	089b      	lsrpl	r3, r3, #2
 800cfb6:	2001      	movmi	r0, #1
 800cfb8:	600b      	strmi	r3, [r1, #0]
 800cfba:	bf5c      	itt	pl
 800cfbc:	600b      	strpl	r3, [r1, #0]
 800cfbe:	2002      	movpl	r0, #2
 800cfc0:	4770      	bx	lr
 800cfc2:	b298      	uxth	r0, r3
 800cfc4:	b9a8      	cbnz	r0, 800cff2 <__lo0bits+0x52>
 800cfc6:	0c1b      	lsrs	r3, r3, #16
 800cfc8:	2010      	movs	r0, #16
 800cfca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cfce:	bf04      	itt	eq
 800cfd0:	0a1b      	lsreq	r3, r3, #8
 800cfd2:	3008      	addeq	r0, #8
 800cfd4:	071a      	lsls	r2, r3, #28
 800cfd6:	bf04      	itt	eq
 800cfd8:	091b      	lsreq	r3, r3, #4
 800cfda:	3004      	addeq	r0, #4
 800cfdc:	079a      	lsls	r2, r3, #30
 800cfde:	bf04      	itt	eq
 800cfe0:	089b      	lsreq	r3, r3, #2
 800cfe2:	3002      	addeq	r0, #2
 800cfe4:	07da      	lsls	r2, r3, #31
 800cfe6:	d402      	bmi.n	800cfee <__lo0bits+0x4e>
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	d006      	beq.n	800cffa <__lo0bits+0x5a>
 800cfec:	3001      	adds	r0, #1
 800cfee:	600b      	str	r3, [r1, #0]
 800cff0:	4770      	bx	lr
 800cff2:	4610      	mov	r0, r2
 800cff4:	e7e9      	b.n	800cfca <__lo0bits+0x2a>
 800cff6:	2000      	movs	r0, #0
 800cff8:	4770      	bx	lr
 800cffa:	2020      	movs	r0, #32
 800cffc:	4770      	bx	lr

0800cffe <__i2b>:
 800cffe:	b510      	push	{r4, lr}
 800d000:	460c      	mov	r4, r1
 800d002:	2101      	movs	r1, #1
 800d004:	f7ff ff27 	bl	800ce56 <_Balloc>
 800d008:	2201      	movs	r2, #1
 800d00a:	6144      	str	r4, [r0, #20]
 800d00c:	6102      	str	r2, [r0, #16]
 800d00e:	bd10      	pop	{r4, pc}

0800d010 <__multiply>:
 800d010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	4614      	mov	r4, r2
 800d016:	690a      	ldr	r2, [r1, #16]
 800d018:	6923      	ldr	r3, [r4, #16]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	bfb8      	it	lt
 800d01e:	460b      	movlt	r3, r1
 800d020:	4688      	mov	r8, r1
 800d022:	bfbc      	itt	lt
 800d024:	46a0      	movlt	r8, r4
 800d026:	461c      	movlt	r4, r3
 800d028:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d02c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d030:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d034:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d038:	eb07 0609 	add.w	r6, r7, r9
 800d03c:	42b3      	cmp	r3, r6
 800d03e:	bfb8      	it	lt
 800d040:	3101      	addlt	r1, #1
 800d042:	f7ff ff08 	bl	800ce56 <_Balloc>
 800d046:	f100 0514 	add.w	r5, r0, #20
 800d04a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d04e:	462b      	mov	r3, r5
 800d050:	2200      	movs	r2, #0
 800d052:	4573      	cmp	r3, lr
 800d054:	d316      	bcc.n	800d084 <__multiply+0x74>
 800d056:	f104 0214 	add.w	r2, r4, #20
 800d05a:	f108 0114 	add.w	r1, r8, #20
 800d05e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d062:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	9b00      	ldr	r3, [sp, #0]
 800d06a:	9201      	str	r2, [sp, #4]
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d80c      	bhi.n	800d08a <__multiply+0x7a>
 800d070:	2e00      	cmp	r6, #0
 800d072:	dd03      	ble.n	800d07c <__multiply+0x6c>
 800d074:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d05d      	beq.n	800d138 <__multiply+0x128>
 800d07c:	6106      	str	r6, [r0, #16]
 800d07e:	b003      	add	sp, #12
 800d080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d084:	f843 2b04 	str.w	r2, [r3], #4
 800d088:	e7e3      	b.n	800d052 <__multiply+0x42>
 800d08a:	f8b2 b000 	ldrh.w	fp, [r2]
 800d08e:	f1bb 0f00 	cmp.w	fp, #0
 800d092:	d023      	beq.n	800d0dc <__multiply+0xcc>
 800d094:	4689      	mov	r9, r1
 800d096:	46ac      	mov	ip, r5
 800d098:	f04f 0800 	mov.w	r8, #0
 800d09c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0a0:	f8dc a000 	ldr.w	sl, [ip]
 800d0a4:	b2a3      	uxth	r3, r4
 800d0a6:	fa1f fa8a 	uxth.w	sl, sl
 800d0aa:	fb0b a303 	mla	r3, fp, r3, sl
 800d0ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d0b2:	f8dc 4000 	ldr.w	r4, [ip]
 800d0b6:	4443      	add	r3, r8
 800d0b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d0bc:	fb0b 840a 	mla	r4, fp, sl, r8
 800d0c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d0c4:	46e2      	mov	sl, ip
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d0cc:	454f      	cmp	r7, r9
 800d0ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d0d2:	f84a 3b04 	str.w	r3, [sl], #4
 800d0d6:	d82b      	bhi.n	800d130 <__multiply+0x120>
 800d0d8:	f8cc 8004 	str.w	r8, [ip, #4]
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d0e2:	3204      	adds	r2, #4
 800d0e4:	f1ba 0f00 	cmp.w	sl, #0
 800d0e8:	d020      	beq.n	800d12c <__multiply+0x11c>
 800d0ea:	682b      	ldr	r3, [r5, #0]
 800d0ec:	4689      	mov	r9, r1
 800d0ee:	46a8      	mov	r8, r5
 800d0f0:	f04f 0b00 	mov.w	fp, #0
 800d0f4:	f8b9 c000 	ldrh.w	ip, [r9]
 800d0f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d0fc:	fb0a 440c 	mla	r4, sl, ip, r4
 800d100:	445c      	add	r4, fp
 800d102:	46c4      	mov	ip, r8
 800d104:	b29b      	uxth	r3, r3
 800d106:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d10a:	f84c 3b04 	str.w	r3, [ip], #4
 800d10e:	f859 3b04 	ldr.w	r3, [r9], #4
 800d112:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d116:	0c1b      	lsrs	r3, r3, #16
 800d118:	fb0a b303 	mla	r3, sl, r3, fp
 800d11c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d120:	454f      	cmp	r7, r9
 800d122:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d126:	d805      	bhi.n	800d134 <__multiply+0x124>
 800d128:	f8c8 3004 	str.w	r3, [r8, #4]
 800d12c:	3504      	adds	r5, #4
 800d12e:	e79b      	b.n	800d068 <__multiply+0x58>
 800d130:	46d4      	mov	ip, sl
 800d132:	e7b3      	b.n	800d09c <__multiply+0x8c>
 800d134:	46e0      	mov	r8, ip
 800d136:	e7dd      	b.n	800d0f4 <__multiply+0xe4>
 800d138:	3e01      	subs	r6, #1
 800d13a:	e799      	b.n	800d070 <__multiply+0x60>

0800d13c <__pow5mult>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	4615      	mov	r5, r2
 800d142:	f012 0203 	ands.w	r2, r2, #3
 800d146:	4606      	mov	r6, r0
 800d148:	460f      	mov	r7, r1
 800d14a:	d007      	beq.n	800d15c <__pow5mult+0x20>
 800d14c:	3a01      	subs	r2, #1
 800d14e:	4c21      	ldr	r4, [pc, #132]	; (800d1d4 <__pow5mult+0x98>)
 800d150:	2300      	movs	r3, #0
 800d152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d156:	f7ff fec9 	bl	800ceec <__multadd>
 800d15a:	4607      	mov	r7, r0
 800d15c:	10ad      	asrs	r5, r5, #2
 800d15e:	d035      	beq.n	800d1cc <__pow5mult+0x90>
 800d160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d162:	b93c      	cbnz	r4, 800d174 <__pow5mult+0x38>
 800d164:	2010      	movs	r0, #16
 800d166:	f7ff fe51 	bl	800ce0c <malloc>
 800d16a:	6270      	str	r0, [r6, #36]	; 0x24
 800d16c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d170:	6004      	str	r4, [r0, #0]
 800d172:	60c4      	str	r4, [r0, #12]
 800d174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d17c:	b94c      	cbnz	r4, 800d192 <__pow5mult+0x56>
 800d17e:	f240 2171 	movw	r1, #625	; 0x271
 800d182:	4630      	mov	r0, r6
 800d184:	f7ff ff3b 	bl	800cffe <__i2b>
 800d188:	2300      	movs	r3, #0
 800d18a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d18e:	4604      	mov	r4, r0
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	f04f 0800 	mov.w	r8, #0
 800d196:	07eb      	lsls	r3, r5, #31
 800d198:	d50a      	bpl.n	800d1b0 <__pow5mult+0x74>
 800d19a:	4639      	mov	r1, r7
 800d19c:	4622      	mov	r2, r4
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f7ff ff36 	bl	800d010 <__multiply>
 800d1a4:	4639      	mov	r1, r7
 800d1a6:	4681      	mov	r9, r0
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f7ff fe88 	bl	800cebe <_Bfree>
 800d1ae:	464f      	mov	r7, r9
 800d1b0:	106d      	asrs	r5, r5, #1
 800d1b2:	d00b      	beq.n	800d1cc <__pow5mult+0x90>
 800d1b4:	6820      	ldr	r0, [r4, #0]
 800d1b6:	b938      	cbnz	r0, 800d1c8 <__pow5mult+0x8c>
 800d1b8:	4622      	mov	r2, r4
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f7ff ff27 	bl	800d010 <__multiply>
 800d1c2:	6020      	str	r0, [r4, #0]
 800d1c4:	f8c0 8000 	str.w	r8, [r0]
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	e7e4      	b.n	800d196 <__pow5mult+0x5a>
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0800de30 	.word	0x0800de30

0800d1d8 <__lshift>:
 800d1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1dc:	460c      	mov	r4, r1
 800d1de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1e2:	6923      	ldr	r3, [r4, #16]
 800d1e4:	6849      	ldr	r1, [r1, #4]
 800d1e6:	eb0a 0903 	add.w	r9, sl, r3
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	4616      	mov	r6, r2
 800d1f0:	f109 0501 	add.w	r5, r9, #1
 800d1f4:	42ab      	cmp	r3, r5
 800d1f6:	db32      	blt.n	800d25e <__lshift+0x86>
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	f7ff fe2c 	bl	800ce56 <_Balloc>
 800d1fe:	2300      	movs	r3, #0
 800d200:	4680      	mov	r8, r0
 800d202:	f100 0114 	add.w	r1, r0, #20
 800d206:	461a      	mov	r2, r3
 800d208:	4553      	cmp	r3, sl
 800d20a:	db2b      	blt.n	800d264 <__lshift+0x8c>
 800d20c:	6920      	ldr	r0, [r4, #16]
 800d20e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d212:	f104 0314 	add.w	r3, r4, #20
 800d216:	f016 021f 	ands.w	r2, r6, #31
 800d21a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d21e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d222:	d025      	beq.n	800d270 <__lshift+0x98>
 800d224:	f1c2 0e20 	rsb	lr, r2, #32
 800d228:	2000      	movs	r0, #0
 800d22a:	681e      	ldr	r6, [r3, #0]
 800d22c:	468a      	mov	sl, r1
 800d22e:	4096      	lsls	r6, r2
 800d230:	4330      	orrs	r0, r6
 800d232:	f84a 0b04 	str.w	r0, [sl], #4
 800d236:	f853 0b04 	ldr.w	r0, [r3], #4
 800d23a:	459c      	cmp	ip, r3
 800d23c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d240:	d814      	bhi.n	800d26c <__lshift+0x94>
 800d242:	6048      	str	r0, [r1, #4]
 800d244:	b108      	cbz	r0, 800d24a <__lshift+0x72>
 800d246:	f109 0502 	add.w	r5, r9, #2
 800d24a:	3d01      	subs	r5, #1
 800d24c:	4638      	mov	r0, r7
 800d24e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d252:	4621      	mov	r1, r4
 800d254:	f7ff fe33 	bl	800cebe <_Bfree>
 800d258:	4640      	mov	r0, r8
 800d25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25e:	3101      	adds	r1, #1
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	e7c7      	b.n	800d1f4 <__lshift+0x1c>
 800d264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d268:	3301      	adds	r3, #1
 800d26a:	e7cd      	b.n	800d208 <__lshift+0x30>
 800d26c:	4651      	mov	r1, sl
 800d26e:	e7dc      	b.n	800d22a <__lshift+0x52>
 800d270:	3904      	subs	r1, #4
 800d272:	f853 2b04 	ldr.w	r2, [r3], #4
 800d276:	f841 2f04 	str.w	r2, [r1, #4]!
 800d27a:	459c      	cmp	ip, r3
 800d27c:	d8f9      	bhi.n	800d272 <__lshift+0x9a>
 800d27e:	e7e4      	b.n	800d24a <__lshift+0x72>

0800d280 <__mcmp>:
 800d280:	6903      	ldr	r3, [r0, #16]
 800d282:	690a      	ldr	r2, [r1, #16]
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	b530      	push	{r4, r5, lr}
 800d288:	d10c      	bne.n	800d2a4 <__mcmp+0x24>
 800d28a:	0092      	lsls	r2, r2, #2
 800d28c:	3014      	adds	r0, #20
 800d28e:	3114      	adds	r1, #20
 800d290:	1884      	adds	r4, r0, r2
 800d292:	4411      	add	r1, r2
 800d294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d29c:	4295      	cmp	r5, r2
 800d29e:	d003      	beq.n	800d2a8 <__mcmp+0x28>
 800d2a0:	d305      	bcc.n	800d2ae <__mcmp+0x2e>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	bd30      	pop	{r4, r5, pc}
 800d2a8:	42a0      	cmp	r0, r4
 800d2aa:	d3f3      	bcc.n	800d294 <__mcmp+0x14>
 800d2ac:	e7fa      	b.n	800d2a4 <__mcmp+0x24>
 800d2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d2b2:	e7f7      	b.n	800d2a4 <__mcmp+0x24>

0800d2b4 <__mdiff>:
 800d2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b8:	460d      	mov	r5, r1
 800d2ba:	4607      	mov	r7, r0
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4628      	mov	r0, r5
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	f7ff ffdd 	bl	800d280 <__mcmp>
 800d2c6:	1e06      	subs	r6, r0, #0
 800d2c8:	d108      	bne.n	800d2dc <__mdiff+0x28>
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	f7ff fdc2 	bl	800ce56 <_Balloc>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	bfa4      	itt	ge
 800d2de:	4623      	movge	r3, r4
 800d2e0:	462c      	movge	r4, r5
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	6861      	ldr	r1, [r4, #4]
 800d2e6:	bfa6      	itte	ge
 800d2e8:	461d      	movge	r5, r3
 800d2ea:	2600      	movge	r6, #0
 800d2ec:	2601      	movlt	r6, #1
 800d2ee:	f7ff fdb2 	bl	800ce56 <_Balloc>
 800d2f2:	692b      	ldr	r3, [r5, #16]
 800d2f4:	60c6      	str	r6, [r0, #12]
 800d2f6:	6926      	ldr	r6, [r4, #16]
 800d2f8:	f105 0914 	add.w	r9, r5, #20
 800d2fc:	f104 0214 	add.w	r2, r4, #20
 800d300:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d304:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d308:	f100 0514 	add.w	r5, r0, #20
 800d30c:	f04f 0e00 	mov.w	lr, #0
 800d310:	f852 ab04 	ldr.w	sl, [r2], #4
 800d314:	f859 4b04 	ldr.w	r4, [r9], #4
 800d318:	fa1e f18a 	uxtah	r1, lr, sl
 800d31c:	b2a3      	uxth	r3, r4
 800d31e:	1ac9      	subs	r1, r1, r3
 800d320:	0c23      	lsrs	r3, r4, #16
 800d322:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d326:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d32a:	b289      	uxth	r1, r1
 800d32c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d330:	45c8      	cmp	r8, r9
 800d332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d336:	4694      	mov	ip, r2
 800d338:	f845 3b04 	str.w	r3, [r5], #4
 800d33c:	d8e8      	bhi.n	800d310 <__mdiff+0x5c>
 800d33e:	45bc      	cmp	ip, r7
 800d340:	d304      	bcc.n	800d34c <__mdiff+0x98>
 800d342:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d346:	b183      	cbz	r3, 800d36a <__mdiff+0xb6>
 800d348:	6106      	str	r6, [r0, #16]
 800d34a:	e7c5      	b.n	800d2d8 <__mdiff+0x24>
 800d34c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d350:	fa1e f381 	uxtah	r3, lr, r1
 800d354:	141a      	asrs	r2, r3, #16
 800d356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d360:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d364:	f845 3b04 	str.w	r3, [r5], #4
 800d368:	e7e9      	b.n	800d33e <__mdiff+0x8a>
 800d36a:	3e01      	subs	r6, #1
 800d36c:	e7e9      	b.n	800d342 <__mdiff+0x8e>

0800d36e <__d2b>:
 800d36e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d372:	460e      	mov	r6, r1
 800d374:	2101      	movs	r1, #1
 800d376:	ec59 8b10 	vmov	r8, r9, d0
 800d37a:	4615      	mov	r5, r2
 800d37c:	f7ff fd6b 	bl	800ce56 <_Balloc>
 800d380:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d384:	4607      	mov	r7, r0
 800d386:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d38a:	bb34      	cbnz	r4, 800d3da <__d2b+0x6c>
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	f1b8 0300 	subs.w	r3, r8, #0
 800d392:	d027      	beq.n	800d3e4 <__d2b+0x76>
 800d394:	a802      	add	r0, sp, #8
 800d396:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d39a:	f7ff fe01 	bl	800cfa0 <__lo0bits>
 800d39e:	9900      	ldr	r1, [sp, #0]
 800d3a0:	b1f0      	cbz	r0, 800d3e0 <__d2b+0x72>
 800d3a2:	9a01      	ldr	r2, [sp, #4]
 800d3a4:	f1c0 0320 	rsb	r3, r0, #32
 800d3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ac:	430b      	orrs	r3, r1
 800d3ae:	40c2      	lsrs	r2, r0
 800d3b0:	617b      	str	r3, [r7, #20]
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	9b01      	ldr	r3, [sp, #4]
 800d3b6:	61bb      	str	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	bf14      	ite	ne
 800d3bc:	2102      	movne	r1, #2
 800d3be:	2101      	moveq	r1, #1
 800d3c0:	6139      	str	r1, [r7, #16]
 800d3c2:	b1c4      	cbz	r4, 800d3f6 <__d2b+0x88>
 800d3c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d3c8:	4404      	add	r4, r0
 800d3ca:	6034      	str	r4, [r6, #0]
 800d3cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3d0:	6028      	str	r0, [r5, #0]
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	b003      	add	sp, #12
 800d3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3de:	e7d5      	b.n	800d38c <__d2b+0x1e>
 800d3e0:	6179      	str	r1, [r7, #20]
 800d3e2:	e7e7      	b.n	800d3b4 <__d2b+0x46>
 800d3e4:	a801      	add	r0, sp, #4
 800d3e6:	f7ff fddb 	bl	800cfa0 <__lo0bits>
 800d3ea:	9b01      	ldr	r3, [sp, #4]
 800d3ec:	617b      	str	r3, [r7, #20]
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	6139      	str	r1, [r7, #16]
 800d3f2:	3020      	adds	r0, #32
 800d3f4:	e7e5      	b.n	800d3c2 <__d2b+0x54>
 800d3f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d3fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3fe:	6030      	str	r0, [r6, #0]
 800d400:	6918      	ldr	r0, [r3, #16]
 800d402:	f7ff fdae 	bl	800cf62 <__hi0bits>
 800d406:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d40a:	e7e1      	b.n	800d3d0 <__d2b+0x62>

0800d40c <_calloc_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	fb02 f401 	mul.w	r4, r2, r1
 800d412:	4621      	mov	r1, r4
 800d414:	f000 f856 	bl	800d4c4 <_malloc_r>
 800d418:	4605      	mov	r5, r0
 800d41a:	b118      	cbz	r0, 800d424 <_calloc_r+0x18>
 800d41c:	4622      	mov	r2, r4
 800d41e:	2100      	movs	r1, #0
 800d420:	f7fe f970 	bl	800b704 <memset>
 800d424:	4628      	mov	r0, r5
 800d426:	bd38      	pop	{r3, r4, r5, pc}

0800d428 <_free_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4605      	mov	r5, r0
 800d42c:	2900      	cmp	r1, #0
 800d42e:	d045      	beq.n	800d4bc <_free_r+0x94>
 800d430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d434:	1f0c      	subs	r4, r1, #4
 800d436:	2b00      	cmp	r3, #0
 800d438:	bfb8      	it	lt
 800d43a:	18e4      	addlt	r4, r4, r3
 800d43c:	f000 fa24 	bl	800d888 <__malloc_lock>
 800d440:	4a1f      	ldr	r2, [pc, #124]	; (800d4c0 <_free_r+0x98>)
 800d442:	6813      	ldr	r3, [r2, #0]
 800d444:	4610      	mov	r0, r2
 800d446:	b933      	cbnz	r3, 800d456 <_free_r+0x2e>
 800d448:	6063      	str	r3, [r4, #4]
 800d44a:	6014      	str	r4, [r2, #0]
 800d44c:	4628      	mov	r0, r5
 800d44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d452:	f000 ba1a 	b.w	800d88a <__malloc_unlock>
 800d456:	42a3      	cmp	r3, r4
 800d458:	d90c      	bls.n	800d474 <_free_r+0x4c>
 800d45a:	6821      	ldr	r1, [r4, #0]
 800d45c:	1862      	adds	r2, r4, r1
 800d45e:	4293      	cmp	r3, r2
 800d460:	bf04      	itt	eq
 800d462:	681a      	ldreq	r2, [r3, #0]
 800d464:	685b      	ldreq	r3, [r3, #4]
 800d466:	6063      	str	r3, [r4, #4]
 800d468:	bf04      	itt	eq
 800d46a:	1852      	addeq	r2, r2, r1
 800d46c:	6022      	streq	r2, [r4, #0]
 800d46e:	6004      	str	r4, [r0, #0]
 800d470:	e7ec      	b.n	800d44c <_free_r+0x24>
 800d472:	4613      	mov	r3, r2
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	b10a      	cbz	r2, 800d47c <_free_r+0x54>
 800d478:	42a2      	cmp	r2, r4
 800d47a:	d9fa      	bls.n	800d472 <_free_r+0x4a>
 800d47c:	6819      	ldr	r1, [r3, #0]
 800d47e:	1858      	adds	r0, r3, r1
 800d480:	42a0      	cmp	r0, r4
 800d482:	d10b      	bne.n	800d49c <_free_r+0x74>
 800d484:	6820      	ldr	r0, [r4, #0]
 800d486:	4401      	add	r1, r0
 800d488:	1858      	adds	r0, r3, r1
 800d48a:	4282      	cmp	r2, r0
 800d48c:	6019      	str	r1, [r3, #0]
 800d48e:	d1dd      	bne.n	800d44c <_free_r+0x24>
 800d490:	6810      	ldr	r0, [r2, #0]
 800d492:	6852      	ldr	r2, [r2, #4]
 800d494:	605a      	str	r2, [r3, #4]
 800d496:	4401      	add	r1, r0
 800d498:	6019      	str	r1, [r3, #0]
 800d49a:	e7d7      	b.n	800d44c <_free_r+0x24>
 800d49c:	d902      	bls.n	800d4a4 <_free_r+0x7c>
 800d49e:	230c      	movs	r3, #12
 800d4a0:	602b      	str	r3, [r5, #0]
 800d4a2:	e7d3      	b.n	800d44c <_free_r+0x24>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	1821      	adds	r1, r4, r0
 800d4a8:	428a      	cmp	r2, r1
 800d4aa:	bf04      	itt	eq
 800d4ac:	6811      	ldreq	r1, [r2, #0]
 800d4ae:	6852      	ldreq	r2, [r2, #4]
 800d4b0:	6062      	str	r2, [r4, #4]
 800d4b2:	bf04      	itt	eq
 800d4b4:	1809      	addeq	r1, r1, r0
 800d4b6:	6021      	streq	r1, [r4, #0]
 800d4b8:	605c      	str	r4, [r3, #4]
 800d4ba:	e7c7      	b.n	800d44c <_free_r+0x24>
 800d4bc:	bd38      	pop	{r3, r4, r5, pc}
 800d4be:	bf00      	nop
 800d4c0:	20000268 	.word	0x20000268

0800d4c4 <_malloc_r>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	1ccd      	adds	r5, r1, #3
 800d4c8:	f025 0503 	bic.w	r5, r5, #3
 800d4cc:	3508      	adds	r5, #8
 800d4ce:	2d0c      	cmp	r5, #12
 800d4d0:	bf38      	it	cc
 800d4d2:	250c      	movcc	r5, #12
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	db01      	blt.n	800d4de <_malloc_r+0x1a>
 800d4da:	42a9      	cmp	r1, r5
 800d4dc:	d903      	bls.n	800d4e6 <_malloc_r+0x22>
 800d4de:	230c      	movs	r3, #12
 800d4e0:	6033      	str	r3, [r6, #0]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	f000 f9cf 	bl	800d888 <__malloc_lock>
 800d4ea:	4a21      	ldr	r2, [pc, #132]	; (800d570 <_malloc_r+0xac>)
 800d4ec:	6814      	ldr	r4, [r2, #0]
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	b991      	cbnz	r1, 800d518 <_malloc_r+0x54>
 800d4f2:	4c20      	ldr	r4, [pc, #128]	; (800d574 <_malloc_r+0xb0>)
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	b91b      	cbnz	r3, 800d500 <_malloc_r+0x3c>
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f000 f98f 	bl	800d81c <_sbrk_r>
 800d4fe:	6020      	str	r0, [r4, #0]
 800d500:	4629      	mov	r1, r5
 800d502:	4630      	mov	r0, r6
 800d504:	f000 f98a 	bl	800d81c <_sbrk_r>
 800d508:	1c43      	adds	r3, r0, #1
 800d50a:	d124      	bne.n	800d556 <_malloc_r+0x92>
 800d50c:	230c      	movs	r3, #12
 800d50e:	6033      	str	r3, [r6, #0]
 800d510:	4630      	mov	r0, r6
 800d512:	f000 f9ba 	bl	800d88a <__malloc_unlock>
 800d516:	e7e4      	b.n	800d4e2 <_malloc_r+0x1e>
 800d518:	680b      	ldr	r3, [r1, #0]
 800d51a:	1b5b      	subs	r3, r3, r5
 800d51c:	d418      	bmi.n	800d550 <_malloc_r+0x8c>
 800d51e:	2b0b      	cmp	r3, #11
 800d520:	d90f      	bls.n	800d542 <_malloc_r+0x7e>
 800d522:	600b      	str	r3, [r1, #0]
 800d524:	50cd      	str	r5, [r1, r3]
 800d526:	18cc      	adds	r4, r1, r3
 800d528:	4630      	mov	r0, r6
 800d52a:	f000 f9ae 	bl	800d88a <__malloc_unlock>
 800d52e:	f104 000b 	add.w	r0, r4, #11
 800d532:	1d23      	adds	r3, r4, #4
 800d534:	f020 0007 	bic.w	r0, r0, #7
 800d538:	1ac3      	subs	r3, r0, r3
 800d53a:	d0d3      	beq.n	800d4e4 <_malloc_r+0x20>
 800d53c:	425a      	negs	r2, r3
 800d53e:	50e2      	str	r2, [r4, r3]
 800d540:	e7d0      	b.n	800d4e4 <_malloc_r+0x20>
 800d542:	428c      	cmp	r4, r1
 800d544:	684b      	ldr	r3, [r1, #4]
 800d546:	bf16      	itet	ne
 800d548:	6063      	strne	r3, [r4, #4]
 800d54a:	6013      	streq	r3, [r2, #0]
 800d54c:	460c      	movne	r4, r1
 800d54e:	e7eb      	b.n	800d528 <_malloc_r+0x64>
 800d550:	460c      	mov	r4, r1
 800d552:	6849      	ldr	r1, [r1, #4]
 800d554:	e7cc      	b.n	800d4f0 <_malloc_r+0x2c>
 800d556:	1cc4      	adds	r4, r0, #3
 800d558:	f024 0403 	bic.w	r4, r4, #3
 800d55c:	42a0      	cmp	r0, r4
 800d55e:	d005      	beq.n	800d56c <_malloc_r+0xa8>
 800d560:	1a21      	subs	r1, r4, r0
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f95a 	bl	800d81c <_sbrk_r>
 800d568:	3001      	adds	r0, #1
 800d56a:	d0cf      	beq.n	800d50c <_malloc_r+0x48>
 800d56c:	6025      	str	r5, [r4, #0]
 800d56e:	e7db      	b.n	800d528 <_malloc_r+0x64>
 800d570:	20000268 	.word	0x20000268
 800d574:	2000026c 	.word	0x2000026c

0800d578 <__ssputs_r>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	688e      	ldr	r6, [r1, #8]
 800d57e:	429e      	cmp	r6, r3
 800d580:	4682      	mov	sl, r0
 800d582:	460c      	mov	r4, r1
 800d584:	4690      	mov	r8, r2
 800d586:	4699      	mov	r9, r3
 800d588:	d837      	bhi.n	800d5fa <__ssputs_r+0x82>
 800d58a:	898a      	ldrh	r2, [r1, #12]
 800d58c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d590:	d031      	beq.n	800d5f6 <__ssputs_r+0x7e>
 800d592:	6825      	ldr	r5, [r4, #0]
 800d594:	6909      	ldr	r1, [r1, #16]
 800d596:	1a6f      	subs	r7, r5, r1
 800d598:	6965      	ldr	r5, [r4, #20]
 800d59a:	2302      	movs	r3, #2
 800d59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5a0:	fb95 f5f3 	sdiv	r5, r5, r3
 800d5a4:	f109 0301 	add.w	r3, r9, #1
 800d5a8:	443b      	add	r3, r7
 800d5aa:	429d      	cmp	r5, r3
 800d5ac:	bf38      	it	cc
 800d5ae:	461d      	movcc	r5, r3
 800d5b0:	0553      	lsls	r3, r2, #21
 800d5b2:	d530      	bpl.n	800d616 <__ssputs_r+0x9e>
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	f7ff ff85 	bl	800d4c4 <_malloc_r>
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	b950      	cbnz	r0, 800d5d4 <__ssputs_r+0x5c>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	f8ca 3000 	str.w	r3, [sl]
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d4:	463a      	mov	r2, r7
 800d5d6:	6921      	ldr	r1, [r4, #16]
 800d5d8:	f7ff fc32 	bl	800ce40 <memcpy>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e6:	81a3      	strh	r3, [r4, #12]
 800d5e8:	6126      	str	r6, [r4, #16]
 800d5ea:	6165      	str	r5, [r4, #20]
 800d5ec:	443e      	add	r6, r7
 800d5ee:	1bed      	subs	r5, r5, r7
 800d5f0:	6026      	str	r6, [r4, #0]
 800d5f2:	60a5      	str	r5, [r4, #8]
 800d5f4:	464e      	mov	r6, r9
 800d5f6:	454e      	cmp	r6, r9
 800d5f8:	d900      	bls.n	800d5fc <__ssputs_r+0x84>
 800d5fa:	464e      	mov	r6, r9
 800d5fc:	4632      	mov	r2, r6
 800d5fe:	4641      	mov	r1, r8
 800d600:	6820      	ldr	r0, [r4, #0]
 800d602:	f000 f928 	bl	800d856 <memmove>
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	1b9b      	subs	r3, r3, r6
 800d60a:	60a3      	str	r3, [r4, #8]
 800d60c:	6823      	ldr	r3, [r4, #0]
 800d60e:	441e      	add	r6, r3
 800d610:	6026      	str	r6, [r4, #0]
 800d612:	2000      	movs	r0, #0
 800d614:	e7dc      	b.n	800d5d0 <__ssputs_r+0x58>
 800d616:	462a      	mov	r2, r5
 800d618:	f000 f938 	bl	800d88c <_realloc_r>
 800d61c:	4606      	mov	r6, r0
 800d61e:	2800      	cmp	r0, #0
 800d620:	d1e2      	bne.n	800d5e8 <__ssputs_r+0x70>
 800d622:	6921      	ldr	r1, [r4, #16]
 800d624:	4650      	mov	r0, sl
 800d626:	f7ff feff 	bl	800d428 <_free_r>
 800d62a:	e7c8      	b.n	800d5be <__ssputs_r+0x46>

0800d62c <_svfiprintf_r>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	461d      	mov	r5, r3
 800d632:	898b      	ldrh	r3, [r1, #12]
 800d634:	061f      	lsls	r7, r3, #24
 800d636:	b09d      	sub	sp, #116	; 0x74
 800d638:	4680      	mov	r8, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	4616      	mov	r6, r2
 800d63e:	d50f      	bpl.n	800d660 <_svfiprintf_r+0x34>
 800d640:	690b      	ldr	r3, [r1, #16]
 800d642:	b96b      	cbnz	r3, 800d660 <_svfiprintf_r+0x34>
 800d644:	2140      	movs	r1, #64	; 0x40
 800d646:	f7ff ff3d 	bl	800d4c4 <_malloc_r>
 800d64a:	6020      	str	r0, [r4, #0]
 800d64c:	6120      	str	r0, [r4, #16]
 800d64e:	b928      	cbnz	r0, 800d65c <_svfiprintf_r+0x30>
 800d650:	230c      	movs	r3, #12
 800d652:	f8c8 3000 	str.w	r3, [r8]
 800d656:	f04f 30ff 	mov.w	r0, #4294967295
 800d65a:	e0c8      	b.n	800d7ee <_svfiprintf_r+0x1c2>
 800d65c:	2340      	movs	r3, #64	; 0x40
 800d65e:	6163      	str	r3, [r4, #20]
 800d660:	2300      	movs	r3, #0
 800d662:	9309      	str	r3, [sp, #36]	; 0x24
 800d664:	2320      	movs	r3, #32
 800d666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d66a:	2330      	movs	r3, #48	; 0x30
 800d66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d670:	9503      	str	r5, [sp, #12]
 800d672:	f04f 0b01 	mov.w	fp, #1
 800d676:	4637      	mov	r7, r6
 800d678:	463d      	mov	r5, r7
 800d67a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d67e:	b10b      	cbz	r3, 800d684 <_svfiprintf_r+0x58>
 800d680:	2b25      	cmp	r3, #37	; 0x25
 800d682:	d13e      	bne.n	800d702 <_svfiprintf_r+0xd6>
 800d684:	ebb7 0a06 	subs.w	sl, r7, r6
 800d688:	d00b      	beq.n	800d6a2 <_svfiprintf_r+0x76>
 800d68a:	4653      	mov	r3, sl
 800d68c:	4632      	mov	r2, r6
 800d68e:	4621      	mov	r1, r4
 800d690:	4640      	mov	r0, r8
 800d692:	f7ff ff71 	bl	800d578 <__ssputs_r>
 800d696:	3001      	adds	r0, #1
 800d698:	f000 80a4 	beq.w	800d7e4 <_svfiprintf_r+0x1b8>
 800d69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d69e:	4453      	add	r3, sl
 800d6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a2:	783b      	ldrb	r3, [r7, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 809d 	beq.w	800d7e4 <_svfiprintf_r+0x1b8>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	9307      	str	r3, [sp, #28]
 800d6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800d6be:	462f      	mov	r7, r5
 800d6c0:	2205      	movs	r2, #5
 800d6c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d6c6:	4850      	ldr	r0, [pc, #320]	; (800d808 <_svfiprintf_r+0x1dc>)
 800d6c8:	f7f2 fd9a 	bl	8000200 <memchr>
 800d6cc:	9b04      	ldr	r3, [sp, #16]
 800d6ce:	b9d0      	cbnz	r0, 800d706 <_svfiprintf_r+0xda>
 800d6d0:	06d9      	lsls	r1, r3, #27
 800d6d2:	bf44      	itt	mi
 800d6d4:	2220      	movmi	r2, #32
 800d6d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6da:	071a      	lsls	r2, r3, #28
 800d6dc:	bf44      	itt	mi
 800d6de:	222b      	movmi	r2, #43	; 0x2b
 800d6e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6e4:	782a      	ldrb	r2, [r5, #0]
 800d6e6:	2a2a      	cmp	r2, #42	; 0x2a
 800d6e8:	d015      	beq.n	800d716 <_svfiprintf_r+0xea>
 800d6ea:	9a07      	ldr	r2, [sp, #28]
 800d6ec:	462f      	mov	r7, r5
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	250a      	movs	r5, #10
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f8:	3b30      	subs	r3, #48	; 0x30
 800d6fa:	2b09      	cmp	r3, #9
 800d6fc:	d94d      	bls.n	800d79a <_svfiprintf_r+0x16e>
 800d6fe:	b1b8      	cbz	r0, 800d730 <_svfiprintf_r+0x104>
 800d700:	e00f      	b.n	800d722 <_svfiprintf_r+0xf6>
 800d702:	462f      	mov	r7, r5
 800d704:	e7b8      	b.n	800d678 <_svfiprintf_r+0x4c>
 800d706:	4a40      	ldr	r2, [pc, #256]	; (800d808 <_svfiprintf_r+0x1dc>)
 800d708:	1a80      	subs	r0, r0, r2
 800d70a:	fa0b f000 	lsl.w	r0, fp, r0
 800d70e:	4318      	orrs	r0, r3
 800d710:	9004      	str	r0, [sp, #16]
 800d712:	463d      	mov	r5, r7
 800d714:	e7d3      	b.n	800d6be <_svfiprintf_r+0x92>
 800d716:	9a03      	ldr	r2, [sp, #12]
 800d718:	1d11      	adds	r1, r2, #4
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	9103      	str	r1, [sp, #12]
 800d71e:	2a00      	cmp	r2, #0
 800d720:	db01      	blt.n	800d726 <_svfiprintf_r+0xfa>
 800d722:	9207      	str	r2, [sp, #28]
 800d724:	e004      	b.n	800d730 <_svfiprintf_r+0x104>
 800d726:	4252      	negs	r2, r2
 800d728:	f043 0302 	orr.w	r3, r3, #2
 800d72c:	9207      	str	r2, [sp, #28]
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	783b      	ldrb	r3, [r7, #0]
 800d732:	2b2e      	cmp	r3, #46	; 0x2e
 800d734:	d10c      	bne.n	800d750 <_svfiprintf_r+0x124>
 800d736:	787b      	ldrb	r3, [r7, #1]
 800d738:	2b2a      	cmp	r3, #42	; 0x2a
 800d73a:	d133      	bne.n	800d7a4 <_svfiprintf_r+0x178>
 800d73c:	9b03      	ldr	r3, [sp, #12]
 800d73e:	1d1a      	adds	r2, r3, #4
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	9203      	str	r2, [sp, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	bfb8      	it	lt
 800d748:	f04f 33ff 	movlt.w	r3, #4294967295
 800d74c:	3702      	adds	r7, #2
 800d74e:	9305      	str	r3, [sp, #20]
 800d750:	4d2e      	ldr	r5, [pc, #184]	; (800d80c <_svfiprintf_r+0x1e0>)
 800d752:	7839      	ldrb	r1, [r7, #0]
 800d754:	2203      	movs	r2, #3
 800d756:	4628      	mov	r0, r5
 800d758:	f7f2 fd52 	bl	8000200 <memchr>
 800d75c:	b138      	cbz	r0, 800d76e <_svfiprintf_r+0x142>
 800d75e:	2340      	movs	r3, #64	; 0x40
 800d760:	1b40      	subs	r0, r0, r5
 800d762:	fa03 f000 	lsl.w	r0, r3, r0
 800d766:	9b04      	ldr	r3, [sp, #16]
 800d768:	4303      	orrs	r3, r0
 800d76a:	3701      	adds	r7, #1
 800d76c:	9304      	str	r3, [sp, #16]
 800d76e:	7839      	ldrb	r1, [r7, #0]
 800d770:	4827      	ldr	r0, [pc, #156]	; (800d810 <_svfiprintf_r+0x1e4>)
 800d772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d776:	2206      	movs	r2, #6
 800d778:	1c7e      	adds	r6, r7, #1
 800d77a:	f7f2 fd41 	bl	8000200 <memchr>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d038      	beq.n	800d7f4 <_svfiprintf_r+0x1c8>
 800d782:	4b24      	ldr	r3, [pc, #144]	; (800d814 <_svfiprintf_r+0x1e8>)
 800d784:	bb13      	cbnz	r3, 800d7cc <_svfiprintf_r+0x1a0>
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	3307      	adds	r3, #7
 800d78a:	f023 0307 	bic.w	r3, r3, #7
 800d78e:	3308      	adds	r3, #8
 800d790:	9303      	str	r3, [sp, #12]
 800d792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d794:	444b      	add	r3, r9
 800d796:	9309      	str	r3, [sp, #36]	; 0x24
 800d798:	e76d      	b.n	800d676 <_svfiprintf_r+0x4a>
 800d79a:	fb05 3202 	mla	r2, r5, r2, r3
 800d79e:	2001      	movs	r0, #1
 800d7a0:	460f      	mov	r7, r1
 800d7a2:	e7a6      	b.n	800d6f2 <_svfiprintf_r+0xc6>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	3701      	adds	r7, #1
 800d7a8:	9305      	str	r3, [sp, #20]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	250a      	movs	r5, #10
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7b4:	3a30      	subs	r2, #48	; 0x30
 800d7b6:	2a09      	cmp	r2, #9
 800d7b8:	d903      	bls.n	800d7c2 <_svfiprintf_r+0x196>
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0c8      	beq.n	800d750 <_svfiprintf_r+0x124>
 800d7be:	9105      	str	r1, [sp, #20]
 800d7c0:	e7c6      	b.n	800d750 <_svfiprintf_r+0x124>
 800d7c2:	fb05 2101 	mla	r1, r5, r1, r2
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	4607      	mov	r7, r0
 800d7ca:	e7f0      	b.n	800d7ae <_svfiprintf_r+0x182>
 800d7cc:	ab03      	add	r3, sp, #12
 800d7ce:	9300      	str	r3, [sp, #0]
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4b11      	ldr	r3, [pc, #68]	; (800d818 <_svfiprintf_r+0x1ec>)
 800d7d4:	a904      	add	r1, sp, #16
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	f7fe f830 	bl	800b83c <_printf_float>
 800d7dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d7e0:	4681      	mov	r9, r0
 800d7e2:	d1d6      	bne.n	800d792 <_svfiprintf_r+0x166>
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	065b      	lsls	r3, r3, #25
 800d7e8:	f53f af35 	bmi.w	800d656 <_svfiprintf_r+0x2a>
 800d7ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7ee:	b01d      	add	sp, #116	; 0x74
 800d7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f4:	ab03      	add	r3, sp, #12
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <_svfiprintf_r+0x1ec>)
 800d7fc:	a904      	add	r1, sp, #16
 800d7fe:	4640      	mov	r0, r8
 800d800:	f7fe fad2 	bl	800bda8 <_printf_i>
 800d804:	e7ea      	b.n	800d7dc <_svfiprintf_r+0x1b0>
 800d806:	bf00      	nop
 800d808:	0800de3c 	.word	0x0800de3c
 800d80c:	0800de42 	.word	0x0800de42
 800d810:	0800de46 	.word	0x0800de46
 800d814:	0800b83d 	.word	0x0800b83d
 800d818:	0800d579 	.word	0x0800d579

0800d81c <_sbrk_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4c06      	ldr	r4, [pc, #24]	; (800d838 <_sbrk_r+0x1c>)
 800d820:	2300      	movs	r3, #0
 800d822:	4605      	mov	r5, r0
 800d824:	4608      	mov	r0, r1
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	f7f9 fed8 	bl	80075dc <_sbrk>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_sbrk_r+0x1a>
 800d830:	6823      	ldr	r3, [r4, #0]
 800d832:	b103      	cbz	r3, 800d836 <_sbrk_r+0x1a>
 800d834:	602b      	str	r3, [r5, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	20003608 	.word	0x20003608

0800d83c <__ascii_wctomb>:
 800d83c:	b149      	cbz	r1, 800d852 <__ascii_wctomb+0x16>
 800d83e:	2aff      	cmp	r2, #255	; 0xff
 800d840:	bf85      	ittet	hi
 800d842:	238a      	movhi	r3, #138	; 0x8a
 800d844:	6003      	strhi	r3, [r0, #0]
 800d846:	700a      	strbls	r2, [r1, #0]
 800d848:	f04f 30ff 	movhi.w	r0, #4294967295
 800d84c:	bf98      	it	ls
 800d84e:	2001      	movls	r0, #1
 800d850:	4770      	bx	lr
 800d852:	4608      	mov	r0, r1
 800d854:	4770      	bx	lr

0800d856 <memmove>:
 800d856:	4288      	cmp	r0, r1
 800d858:	b510      	push	{r4, lr}
 800d85a:	eb01 0302 	add.w	r3, r1, r2
 800d85e:	d807      	bhi.n	800d870 <memmove+0x1a>
 800d860:	1e42      	subs	r2, r0, #1
 800d862:	4299      	cmp	r1, r3
 800d864:	d00a      	beq.n	800d87c <memmove+0x26>
 800d866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d86a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d86e:	e7f8      	b.n	800d862 <memmove+0xc>
 800d870:	4283      	cmp	r3, r0
 800d872:	d9f5      	bls.n	800d860 <memmove+0xa>
 800d874:	1881      	adds	r1, r0, r2
 800d876:	1ad2      	subs	r2, r2, r3
 800d878:	42d3      	cmn	r3, r2
 800d87a:	d100      	bne.n	800d87e <memmove+0x28>
 800d87c:	bd10      	pop	{r4, pc}
 800d87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d882:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d886:	e7f7      	b.n	800d878 <memmove+0x22>

0800d888 <__malloc_lock>:
 800d888:	4770      	bx	lr

0800d88a <__malloc_unlock>:
 800d88a:	4770      	bx	lr

0800d88c <_realloc_r>:
 800d88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88e:	4607      	mov	r7, r0
 800d890:	4614      	mov	r4, r2
 800d892:	460e      	mov	r6, r1
 800d894:	b921      	cbnz	r1, 800d8a0 <_realloc_r+0x14>
 800d896:	4611      	mov	r1, r2
 800d898:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d89c:	f7ff be12 	b.w	800d4c4 <_malloc_r>
 800d8a0:	b922      	cbnz	r2, 800d8ac <_realloc_r+0x20>
 800d8a2:	f7ff fdc1 	bl	800d428 <_free_r>
 800d8a6:	4625      	mov	r5, r4
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ac:	f000 f814 	bl	800d8d8 <_malloc_usable_size_r>
 800d8b0:	42a0      	cmp	r0, r4
 800d8b2:	d20f      	bcs.n	800d8d4 <_realloc_r+0x48>
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	f7ff fe04 	bl	800d4c4 <_malloc_r>
 800d8bc:	4605      	mov	r5, r0
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d0f2      	beq.n	800d8a8 <_realloc_r+0x1c>
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	f7ff fabb 	bl	800ce40 <memcpy>
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f7ff fdab 	bl	800d428 <_free_r>
 800d8d2:	e7e9      	b.n	800d8a8 <_realloc_r+0x1c>
 800d8d4:	4635      	mov	r5, r6
 800d8d6:	e7e7      	b.n	800d8a8 <_realloc_r+0x1c>

0800d8d8 <_malloc_usable_size_r>:
 800d8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8dc:	1f18      	subs	r0, r3, #4
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	bfbc      	itt	lt
 800d8e2:	580b      	ldrlt	r3, [r1, r0]
 800d8e4:	18c0      	addlt	r0, r0, r3
 800d8e6:	4770      	bx	lr

0800d8e8 <_init>:
 800d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ea:	bf00      	nop
 800d8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ee:	bc08      	pop	{r3}
 800d8f0:	469e      	mov	lr, r3
 800d8f2:	4770      	bx	lr

0800d8f4 <_fini>:
 800d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f6:	bf00      	nop
 800d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8fa:	bc08      	pop	{r3}
 800d8fc:	469e      	mov	lr, r3
 800d8fe:	4770      	bx	lr
