
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800b6e8  0800b6e8  0001b6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc10  0800bc10  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc10  0800bc10  0001bc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc18  0800bc18  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc18  0800bc18  0001bc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc1c  0800bc1c  0001bc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800bc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  20000238  0800be58  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000be4  0800be58  00020be4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726a  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000333b  00000000  00000000  000374d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  0003be00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242ed  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012f59  00000000  00000000  000615a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7998  00000000  00000000  000744fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014be96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e0  00000000  00000000  0014bf14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6d0 	.word	0x0800b6d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800b6d0 	.word	0x0800b6d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <_LCD_SetRowOffsets+0x3c>)
 8000edc:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_LCD_SetRowOffsets+0x3c>)
 8000ee4:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <_LCD_SetRowOffsets+0x3c>)
 8000eec:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <_LCD_SetRowOffsets+0x3c>)
 8000ef4:	70da      	strb	r2, [r3, #3]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200004a0 	.word	0x200004a0

08000f08 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <_LCD_EnableSignal+0x38>)
 8000f12:	f004 ffa1 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f004 fc96 	bl	8005848 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <_LCD_EnableSignal+0x38>)
 8000f22:	f004 ff99 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f004 fc8e 	bl	8005848 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <_LCD_EnableSignal+0x38>)
 8000f32:	f004 ff91 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f004 fc86 	bl	8005848 <HAL_Delay>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	e012      	b.n	8000f7a <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _data[i],
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <_LCD_WriteData+0x48>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	fa42 f303 	asr.w	r3, r2, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _data[i],
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <_LCD_WriteData+0x4c>)
 8000f70:	f004 ff72 	bl	8005e58 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	dde9      	ble.n	8000f54 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 8000f80:	f7ff ffc2 	bl	8000f08 <_LCD_EnableSignal>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200004a8 	.word	0x200004a8
 8000f90:	40021000 	.word	0x40021000

08000f94 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2110      	movs	r1, #16
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <_LCD_SendByteWithState+0x44>)
 8000fac:	f004 ff54 	bl	8005e58 <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <_LCD_SendByteWithState+0x44>)
 8000fb6:	f004 ff4f 	bl	8005e58 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffbf 	bl	8000f44 <_LCD_WriteData>
	_LCD_WriteData(value);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffbb 	bl	8000f44 <_LCD_WriteData>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffd2 	bl	8000f94 <_LCD_SendByteWithState>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2101      	movs	r1, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc1 	bl	8000f94 <_LCD_SendByteWithState>

	if (moveCursor) {
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d021      	beq.n	800105c <_LCD_SendData+0x64>
		++_currentCol;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <_LCD_SendData+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_LCD_SendData+0x6c>)
 8001022:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <_LCD_SendData+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b13      	cmp	r3, #19
 800102a:	d917      	bls.n	800105c <_LCD_SendData+0x64>
			_currentCol = 0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <_LCD_SendData+0x6c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <_LCD_SendData+0x70>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <_LCD_SendData+0x70>)
 800103c:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <_LCD_SendData+0x70>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d902      	bls.n	800104c <_LCD_SendData+0x54>
				_currentRow = 0;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_LCD_SendData+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <_LCD_SendData+0x6c>)
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <_LCD_SendData+0x70>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f000 f908 	bl	800126c <LCD_SetCursor>
		}
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200004a5 	.word	0x200004a5
 8001068:	2000049c 	.word	0x2000049c

0800106c <LCD_Init>:

void LCD_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
	/* Piny danych */
	_data[0] = D4_PIN;
 8001072:	4b52      	ldr	r3, [pc, #328]	; (80011bc <LCD_Init+0x150>)
 8001074:	2201      	movs	r2, #1
 8001076:	801a      	strh	r2, [r3, #0]
	_data[1] = D5_PIN;
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <LCD_Init+0x150>)
 800107a:	2202      	movs	r2, #2
 800107c:	805a      	strh	r2, [r3, #2]
	_data[2] = D6_PIN;
 800107e:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <LCD_Init+0x150>)
 8001080:	2204      	movs	r2, #4
 8001082:	809a      	strh	r2, [r3, #4]
	_data[3] = D7_PIN;
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <LCD_Init+0x150>)
 8001086:	2208      	movs	r2, #8
 8001088:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <LCD_Init+0x154>)
 800108c:	2208      	movs	r2, #8
 800108e:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 8001090:	f000 f8ba 	bl	8001208 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 8001094:	2354      	movs	r3, #84	; 0x54
 8001096:	2214      	movs	r2, #20
 8001098:	2140      	movs	r1, #64	; 0x40
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff ff14 	bl	8000ec8 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f004 fbd1 	bl	8005848 <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2110      	movs	r1, #16
 80010aa:	4846      	ldr	r0, [pc, #280]	; (80011c4 <LCD_Init+0x158>)
 80010ac:	f004 fed4 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	4843      	ldr	r0, [pc, #268]	; (80011c4 <LCD_Init+0x158>)
 80010b6:	f004 fecf 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	4841      	ldr	r0, [pc, #260]	; (80011c4 <LCD_Init+0x158>)
 80010c0:	f004 feca 	bl	8005e58 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f7ff ff3d 	bl	8000f44 <_LCD_WriteData>
	HAL_Delay(5);
 80010ca:	2005      	movs	r0, #5
 80010cc:	f004 fbbc 	bl	8005848 <HAL_Delay>

	_LCD_WriteData(0x03);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff ff37 	bl	8000f44 <_LCD_WriteData>
	HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f004 fbb6 	bl	8005848 <HAL_Delay>

	_LCD_WriteData(0x03);
 80010dc:	2003      	movs	r0, #3
 80010de:	f7ff ff31 	bl	8000f44 <_LCD_WriteData>
	HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f004 fbb0 	bl	8005848 <HAL_Delay>

	_LCD_WriteData(0x02);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff ff2b 	bl	8000f44 <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <LCD_Init+0x154>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff6f 	bl	8000fdc <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <LCD_Init+0x15c>)
 8001100:	2204      	movs	r2, #4
 8001102:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8001104:	f000 f8e2 	bl	80012cc <LCD_DisplayOn>
	LCD_ClearScreen();
 8001108:	f000 f896 	bl	8001238 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <LCD_Init+0x160>)
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <LCD_Init+0x160>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <_LCD_SendCommand>

	_currentRow = 0;
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <LCD_Init+0x164>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <LCD_Init+0x168>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 800112e:	482a      	ldr	r0, [pc, #168]	; (80011d8 <LCD_Init+0x16c>)
 8001130:	f000 f95e 	bl	80013f0 <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <LCD_Init+0x170>)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4619      	mov	r1, r3
 8001148:	2007      	movs	r0, #7
 800114a:	f000 fb61 	bl	8001810 <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 800114e:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <LCD_Init+0x174>)
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001158:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4619      	mov	r1, r3
 8001162:	2006      	movs	r0, #6
 8001164:	f000 fb54 	bl	8001810 <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <LCD_Init+0x178>)
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001172:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	2005      	movs	r0, #5
 800117e:	f000 fb47 	bl	8001810 <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <LCD_Init+0x17c>)
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	2004      	movs	r0, #4
 8001198:	f000 fb3a 	bl	8001810 <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 800119c:	4a13      	ldr	r2, [pc, #76]	; (80011ec <LCD_Init+0x180>)
 800119e:	463b      	mov	r3, r7
 80011a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 fb2f 	bl	8001810 <LCD_DefineCustomChar>
}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200004a8 	.word	0x200004a8
 80011c0:	2000049d 	.word	0x2000049d
 80011c4:	40021000 	.word	0x40021000
 80011c8:	200004a4 	.word	0x200004a4
 80011cc:	200004a6 	.word	0x200004a6
 80011d0:	2000049c 	.word	0x2000049c
 80011d4:	200004a5 	.word	0x200004a5
 80011d8:	0800b6e8 	.word	0x0800b6e8
 80011dc:	0800b6f4 	.word	0x0800b6f4
 80011e0:	0800b6fc 	.word	0x0800b6fc
 80011e4:	0800b704 	.word	0x0800b704
 80011e8:	0800b70c 	.word	0x0800b70c
 80011ec:	0800b714 	.word	0x0800b714

080011f0 <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 80011f4:	f000 f808 	bl	8001208 <LCD_BackgroundOn>
	ResetTIM(3);
 80011f8:	4b02      	ldr	r3, [pc, #8]	; (8001204 <LCD_WakeScreen+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000ae0 	.word	0x20000ae0

08001208 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001212:	4802      	ldr	r0, [pc, #8]	; (800121c <LCD_BackgroundOn+0x14>)
 8001214:	f004 fe20 	bl	8005e58 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40020800 	.word	0x40020800

08001220 <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <LCD_BackgroundOff+0x14>)
 800122c:	f004 fe14 	bl	8005e58 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020800 	.word	0x40020800

08001238 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fecd 	bl	8000fdc <_LCD_SendCommand>
	HAL_Delay(2);
 8001242:	2002      	movs	r0, #2
 8001244:	f004 fb00 	bl	8005848 <HAL_Delay>
	LCD_ResetCursor();
 8001248:	f000 f802 	bl	8001250 <LCD_ResetCursor>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	_LCD_SendCommand(RETURN_HOME);
 8001254:	2002      	movs	r0, #2
 8001256:	f7ff fec1 	bl	8000fdc <_LCD_SendCommand>
	HAL_Delay(2);
 800125a:	2002      	movs	r0, #2
 800125c:	f004 faf4 	bl	8005848 <HAL_Delay>
	LCD_SetCursor(0, 0);
 8001260:	2100      	movs	r1, #0
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f802 	bl	800126c <LCD_SetCursor>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	460a      	mov	r2, r1
 8001276:	71fb      	strb	r3, [r7, #7]
 8001278:	4613      	mov	r3, r2
 800127a:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d901      	bls.n	8001286 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 8001282:	2303      	movs	r3, #3
 8001284:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b13      	cmp	r3, #19
 800128a:	d901      	bls.n	8001290 <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 800128c:	2313      	movs	r3, #19
 800128e:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LCD_SetCursor+0x54>)
 8001294:	5cd2      	ldrb	r2, [r2, r3]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4413      	add	r3, r2
 800129a:	b2db      	uxtb	r3, r3
 800129c:	b25b      	sxtb	r3, r3
 800129e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe98 	bl	8000fdc <_LCD_SendCommand>
	_currentRow = row;
 80012ac:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <LCD_SetCursor+0x58>)
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <LCD_SetCursor+0x5c>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	7013      	strb	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200004a0 	.word	0x200004a0
 80012c4:	2000049c 	.word	0x2000049c
 80012c8:	200004a5 	.word	0x200004a5

080012cc <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LCD_DisplayOn+0x28>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LCD_DisplayOn+0x28>)
 80012dc:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LCD_DisplayOn+0x28>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe77 	bl	8000fdc <_LCD_SendCommand>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200004a4 	.word	0x200004a4

080012f8 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <LCD_DisableCursor+0x28>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	f023 0302 	bic.w	r3, r3, #2
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <LCD_DisableCursor+0x28>)
 8001308:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <LCD_DisableCursor+0x28>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f043 0308 	orr.w	r3, r3, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe61 	bl	8000fdc <_LCD_SendCommand>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200004a4 	.word	0x200004a4

08001324 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LCD_EnableCursor+0x28>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <LCD_EnableCursor+0x28>)
 8001334:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <LCD_EnableCursor+0x28>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe4b 	bl	8000fdc <_LCD_SendCommand>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200004a4 	.word	0x200004a4

08001350 <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LCD_DisableBlink+0x28>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <LCD_DisableBlink+0x28>)
 8001360:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LCD_DisableBlink+0x28>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe35 	bl	8000fdc <_LCD_SendCommand>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200004a4 	.word	0x200004a4

0800137c <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <LCD_EnableBlink+0x28>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <LCD_EnableBlink+0x28>)
 800138c:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <LCD_EnableBlink+0x28>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe1f 	bl	8000fdc <_LCD_SendCommand>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200004a4 	.word	0x200004a4

080013a8 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d018      	beq.n	80013e8 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7fe ff12 	bl	80001e4 <strlen>
 80013c0:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e00a      	b.n	80013de <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe10 	bl	8000ff8 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8f0      	bhi.n	80013c8 <LCD_Print+0x20>
 80013e6:	e000      	b.n	80013ea <LCD_Print+0x42>
		return;
 80013e8:	bf00      	nop
	}
}
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7fe fef3 	bl	80001e4 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b14      	cmp	r3, #20
 8001406:	dc14      	bgt.n	8001432 <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f1c3 0314 	rsb	r3, r3, #20
 800140e:	0fda      	lsrs	r2, r3, #31
 8001410:	4413      	add	r3, r2
 8001412:	105b      	asrs	r3, r3, #1
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <LCD_PrintCentered+0x4c>)
 8001418:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <LCD_PrintCentered+0x4c>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <LCD_PrintCentered+0x50>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4610      	mov	r0, r2
 8001426:	f7ff ff21 	bl	800126c <LCD_SetCursor>
	LCD_Print(str);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffbc 	bl	80013a8 <LCD_Print>
 8001430:	e000      	b.n	8001434 <LCD_PrintCentered+0x44>
		return;
 8001432:	bf00      	nop
}
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200004a5 	.word	0x200004a5
 8001440:	2000049c 	.word	0x2000049c

08001444 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8104 	beq.w	800165e <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d50e      	bpl.n	8001488 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f87a 	bl	8000568 <__aeabi_f2d>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	f107 0014 	add.w	r0, r7, #20
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	4979      	ldr	r1, [pc, #484]	; (8001668 <LCD_PrintTempInfo+0x224>)
 8001482:	f008 fd35 	bl	8009ef0 <siprintf>
 8001486:	e00d      	b.n	80014a4 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f86b 	bl	8000568 <__aeabi_f2d>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	f107 0014 	add.w	r0, r7, #20
 800149a:	461a      	mov	r2, r3
 800149c:	4623      	mov	r3, r4
 800149e:	4973      	ldr	r1, [pc, #460]	; (800166c <LCD_PrintTempInfo+0x228>)
 80014a0:	f008 fd26 	bl	8009ef0 <siprintf>

	if (data1[1] < 10.f)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3304      	adds	r3, #4
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d50f      	bpl.n	80014da <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3304      	adds	r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f851 	bl	8000568 <__aeabi_f2d>
 80014c6:	4603      	mov	r3, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	f107 0008 	add.w	r0, r7, #8
 80014ce:	461a      	mov	r2, r3
 80014d0:	4623      	mov	r3, r4
 80014d2:	4967      	ldr	r1, [pc, #412]	; (8001670 <LCD_PrintTempInfo+0x22c>)
 80014d4:	f008 fd0c 	bl	8009ef0 <siprintf>
 80014d8:	e020      	b.n	800151c <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3304      	adds	r3, #4
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001674 <LCD_PrintTempInfo+0x230>
 80014e6:	eef4 7a47 	vcmp.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d106      	bne.n	80014fe <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4960      	ldr	r1, [pc, #384]	; (8001678 <LCD_PrintTempInfo+0x234>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f008 fcfa 	bl	8009ef0 <siprintf>
 80014fc:	e00e      	b.n	800151c <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f82f 	bl	8000568 <__aeabi_f2d>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	f107 0008 	add.w	r0, r7, #8
 8001512:	461a      	mov	r2, r3
 8001514:	4623      	mov	r3, r4
 8001516:	4959      	ldr	r1, [pc, #356]	; (800167c <LCD_PrintTempInfo+0x238>)
 8001518:	f008 fcea 	bl	8009ef0 <siprintf>

	if (data2 != NULL) {
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8088 	beq.w	8001634 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001524:	2101      	movs	r1, #1
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fea0 	bl	800126c <LCD_SetCursor>
		LCD_Print(temp);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff39 	bl	80013a8 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001536:	2102      	movs	r1, #2
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fe97 	bl	800126c <LCD_SetCursor>
		LCD_Print(rh);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff30 	bl	80013a8 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d50e      	bpl.n	800157a <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f801 	bl	8000568 <__aeabi_f2d>
 8001566:	4603      	mov	r3, r0
 8001568:	460c      	mov	r4, r1
 800156a:	f107 0014 	add.w	r0, r7, #20
 800156e:	461a      	mov	r2, r3
 8001570:	4623      	mov	r3, r4
 8001572:	4943      	ldr	r1, [pc, #268]	; (8001680 <LCD_PrintTempInfo+0x23c>)
 8001574:	f008 fcbc 	bl	8009ef0 <siprintf>
 8001578:	e00d      	b.n	8001596 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fff2 	bl	8000568 <__aeabi_f2d>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	f107 0014 	add.w	r0, r7, #20
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	493c      	ldr	r1, [pc, #240]	; (8001684 <LCD_PrintTempInfo+0x240>)
 8001592:	f008 fcad 	bl	8009ef0 <siprintf>

		if (data2[1] < 10.f)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3304      	adds	r3, #4
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d50f      	bpl.n	80015cc <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3304      	adds	r3, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffd8 	bl	8000568 <__aeabi_f2d>
 80015b8:	4603      	mov	r3, r0
 80015ba:	460c      	mov	r4, r1
 80015bc:	f107 0008 	add.w	r0, r7, #8
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	4930      	ldr	r1, [pc, #192]	; (8001688 <LCD_PrintTempInfo+0x244>)
 80015c6:	f008 fc93 	bl	8009ef0 <siprintf>
 80015ca:	e020      	b.n	800160e <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3304      	adds	r3, #4
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001674 <LCD_PrintTempInfo+0x230>
 80015d8:	eef4 7a47 	vcmp.f32	s15, s14
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	d106      	bne.n	80015f0 <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4929      	ldr	r1, [pc, #164]	; (800168c <LCD_PrintTempInfo+0x248>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 fc81 	bl	8009ef0 <siprintf>
 80015ee:	e00e      	b.n	800160e <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffb6 	bl	8000568 <__aeabi_f2d>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	f107 0008 	add.w	r0, r7, #8
 8001604:	461a      	mov	r2, r3
 8001606:	4623      	mov	r3, r4
 8001608:	4921      	ldr	r1, [pc, #132]	; (8001690 <LCD_PrintTempInfo+0x24c>)
 800160a:	f008 fc71 	bl	8009ef0 <siprintf>

		LCD_SetCursor(16, 1);
 800160e:	2101      	movs	r1, #1
 8001610:	2010      	movs	r0, #16
 8001612:	f7ff fe2b 	bl	800126c <LCD_SetCursor>
		LCD_Print(temp);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fec4 	bl	80013a8 <LCD_Print>
		LCD_SetCursor(16, 2);
 8001620:	2102      	movs	r1, #2
 8001622:	2010      	movs	r0, #16
 8001624:	f7ff fe22 	bl	800126c <LCD_SetCursor>
		LCD_Print(rh);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff febb 	bl	80013a8 <LCD_Print>
 8001632:	e010      	b.n	8001656 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001634:	2101      	movs	r1, #1
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fe18 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered(temp);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fed5 	bl	80013f0 <LCD_PrintCentered>
		LCD_NextLine("");
 8001646:	4813      	ldr	r0, [pc, #76]	; (8001694 <LCD_PrintTempInfo+0x250>)
 8001648:	f000 f826 	bl	8001698 <LCD_NextLine>
		LCD_PrintCentered(rh);
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fecd 	bl	80013f0 <LCD_PrintCentered>
	}
	LCD_NextLine("");
 8001656:	480f      	ldr	r0, [pc, #60]	; (8001694 <LCD_PrintTempInfo+0x250>)
 8001658:	f000 f81e 	bl	8001698 <LCD_NextLine>
 800165c:	e000      	b.n	8001660 <LCD_PrintTempInfo+0x21c>
		return;
 800165e:	bf00      	nop
}
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	0800b71c 	.word	0x0800b71c
 800166c:	0800b724 	.word	0x0800b724
 8001670:	0800b72c 	.word	0x0800b72c
 8001674:	42c80000 	.word	0x42c80000
 8001678:	0800b738 	.word	0x0800b738
 800167c:	0800b740 	.word	0x0800b740
 8001680:	0800b748 	.word	0x0800b748
 8001684:	0800b750 	.word	0x0800b750
 8001688:	0800b758 	.word	0x0800b758
 800168c:	0800b764 	.word	0x0800b764
 8001690:	0800b76c 	.word	0x0800b76c
 8001694:	0800b774 	.word	0x0800b774

08001698 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fe81 	bl	80013a8 <LCD_Print>

	_currentCol = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <LCD_NextLine+0x48>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <LCD_NextLine+0x4c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <LCD_NextLine+0x4c>)
 80016b6:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <LCD_NextLine+0x4c>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d902      	bls.n	80016c6 <LCD_NextLine+0x2e>
		_currentRow = 0;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <LCD_NextLine+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <LCD_NextLine+0x48>)
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <LCD_NextLine+0x4c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4610      	mov	r0, r2
 80016d2:	f7ff fdcb 	bl	800126c <LCD_SetCursor>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200004a5 	.word	0x200004a5
 80016e4:	2000049c 	.word	0x2000049c

080016e8 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <LCD_CursorUp+0x30>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <LCD_CursorUp+0x18>
		--_currentRow;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <LCD_CursorUp+0x30>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LCD_CursorUp+0x30>)
 80016fe:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <LCD_CursorUp+0x34>)
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <LCD_CursorUp+0x30>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fdae 	bl	800126c <LCD_SetCursor>
	return _currentRow;
 8001710:	4b01      	ldr	r3, [pc, #4]	; (8001718 <LCD_CursorUp+0x30>)
 8001712:	781b      	ldrb	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000049c 	.word	0x2000049c
 800171c:	200004a5 	.word	0x200004a5

08001720 <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <LCD_CursorDown+0x30>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d805      	bhi.n	8001738 <LCD_CursorDown+0x18>
		++_currentRow;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <LCD_CursorDown+0x30>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <LCD_CursorDown+0x30>)
 8001736:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <LCD_CursorDown+0x34>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <LCD_CursorDown+0x30>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7ff fd92 	bl	800126c <LCD_SetCursor>
	return _currentRow;
 8001748:	4b01      	ldr	r3, [pc, #4]	; (8001750 <LCD_CursorDown+0x30>)
 800174a:	781b      	ldrb	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000049c 	.word	0x2000049c
 8001754:	200004a5 	.word	0x200004a5

08001758 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <LCD_CursorLeft+0x54>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <LCD_CursorLeft+0x1a>
		--_currentCol;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <LCD_CursorLeft+0x54>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <LCD_CursorLeft+0x54>)
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e010      	b.n	8001794 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <LCD_CursorLeft+0x54>)
 8001774:	2213      	movs	r2, #19
 8001776:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <LCD_CursorLeft+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <LCD_CursorLeft+0x58>)
 8001782:	2203      	movs	r2, #3
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <LCD_CursorLeft+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <LCD_CursorLeft+0x58>)
 8001792:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <LCD_CursorLeft+0x54>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LCD_CursorLeft+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f7ff fd64 	bl	800126c <LCD_SetCursor>
	return _currentCol;
 80017a4:	4b01      	ldr	r3, [pc, #4]	; (80017ac <LCD_CursorLeft+0x54>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200004a5 	.word	0x200004a5
 80017b0:	2000049c 	.word	0x2000049c

080017b4 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <LCD_CursorRight+0x54>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	d806      	bhi.n	80017ce <LCD_CursorRight+0x1a>
		++_currentCol;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <LCD_CursorRight+0x54>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <LCD_CursorRight+0x54>)
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e010      	b.n	80017f0 <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <LCD_CursorRight+0x54>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <LCD_CursorRight+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d103      	bne.n	80017e4 <LCD_CursorRight+0x30>
			_currentRow = 0;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <LCD_CursorRight+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e005      	b.n	80017f0 <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <LCD_CursorRight+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <LCD_CursorRight+0x58>)
 80017ee:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <LCD_CursorRight+0x54>)
 80017f2:	781a      	ldrb	r2, [r3, #0]
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LCD_CursorRight+0x58>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f7ff fd36 	bl	800126c <LCD_SetCursor>
	return _currentCol;
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <LCD_CursorRight+0x54>)
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200004a5 	.word	0x200004a5
 800180c:	2000049c 	.word	0x2000049c

08001810 <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	b25b      	sxtb	r3, r3
 800182a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fbd2 	bl	8000fdc <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e00a      	b.n	8001854 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fbd5 	bl	8000ff8 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b07      	cmp	r3, #7
 8001858:	ddf1      	ble.n	800183e <LCD_DefineCustomChar+0x2e>
	}
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fcfb 	bl	800126c <LCD_SetCursor>
	LCD_Print(date);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fd96 	bl	80013a8 <LCD_Print>
	LCD_SetCursor(12, 0);
 800187c:	2100      	movs	r1, #0
 800187e:	200c      	movs	r0, #12
 8001880:	f7ff fcf4 	bl	800126c <LCD_SetCursor>
	LCD_Print(time);
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f7ff fd8f 	bl	80013a8 <LCD_Print>
	LCD_NextLine("");
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <LCD_PrintDateTime+0x34>)
 800188c:	f7ff ff04 	bl	8001698 <LCD_NextLine>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	0800b774 	.word	0x0800b774

0800189c <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fba4 	bl	8000ff8 <_LCD_SendData>
	LCD_CursorLeft();
 80018b0:	f7ff ff52 	bl	8001758 <LCD_CursorLeft>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	int index = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
	int column = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3330      	adds	r3, #48	; 0x30
 80018d4:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e00c      	b.n	80018f6 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 80018dc:	bf00      	nop
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b3b      	cmp	r3, #59	; 0x3b
 80018ee:	d1f6      	bne.n	80018de <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	3301      	adds	r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbed      	blt.n	80018dc <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 8001900:	f7ff fc9a 	bl	8001238 <LCD_ClearScreen>
	LCD_SetCursor(0, 0);
 8001904:	2100      	movs	r1, #0
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fcb0 	bl	800126c <LCD_SetCursor>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 800190c:	2301      	movs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e037      	b.n	8001982 <LCD_PrintNetworks+0xc6>
		LCD_WriteChar(number++);
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	75fa      	strb	r2, [r7, #23]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffbf 	bl	800189c <LCD_WriteChar>
		column = LCD_CursorRight();
 800191e:	f7ff ff49 	bl	80017b4 <LCD_CursorRight>
 8001922:	4603      	mov	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 8001926:	481b      	ldr	r0, [pc, #108]	; (8001994 <LCD_PrintNetworks+0xd8>)
 8001928:	f7ff fd3e 	bl	80013a8 <LCD_Print>

		while (data[index] != ';') {
 800192c:	e010      	b.n	8001950 <LCD_PrintNetworks+0x94>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dd0a      	ble.n	800194a <LCD_PrintNetworks+0x8e>
				LCD_WriteChar(data[index]);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ffad 	bl	800189c <LCD_WriteChar>
				column = LCD_CursorRight();
 8001942:	f7ff ff37 	bl	80017b4 <LCD_CursorRight>
 8001946:	4603      	mov	r3, r0
 8001948:	61bb      	str	r3, [r7, #24]
			}
			index++;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b3b      	cmp	r3, #59	; 0x3b
 800195a:	d1e8      	bne.n	800192e <LCD_PrintNetworks+0x72>
		}

		if (data[index + 1] == 0) {
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3301      	adds	r3, #1
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00f      	beq.n	800198a <LCD_PrintNetworks+0xce>
			break;
		} else {
			if (column != 0)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <LCD_PrintNetworks+0xba>
				LCD_NextLine("");
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <LCD_PrintNetworks+0xdc>)
 8001972:	f7ff fe91 	bl	8001698 <LCD_NextLine>
			index++;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b04      	cmp	r3, #4
 8001986:	ddc4      	ble.n	8001912 <LCD_PrintNetworks+0x56>
		}
	}
}
 8001988:	e000      	b.n	800198c <LCD_PrintNetworks+0xd0>
			break;
 800198a:	bf00      	nop
}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	0800b778 	.word	0x0800b778
 8001998:	0800b774 	.word	0x0800b774

0800199c <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	int index = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e00c      	b.n	80019ca <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 80019b0:	bf00      	nop
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	617a      	str	r2, [r7, #20]
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b3b      	cmp	r3, #59	; 0x3b
 80019c2:	d1f6      	bne.n	80019b2 <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	3301      	adds	r3, #1
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbed      	blt.n	80019b0 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 80019d4:	f7ff fc30 	bl	8001238 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 80019d8:	4815      	ldr	r0, [pc, #84]	; (8001a30 <LCD_PrintOptionsScreen+0x94>)
 80019da:	f7ff fd09 	bl	80013f0 <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 80019de:	2301      	movs	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e01e      	b.n	8001a22 <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4619      	mov	r1, r3
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fc3e 	bl	800126c <LCD_SetCursor>

		while (string[index] != ';') {
 80019f0:	e00b      	b.n	8001a0a <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	617a      	str	r2, [r7, #20]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff4b 	bl	800189c <LCD_WriteChar>
			LCD_CursorRight();
 8001a06:	f7ff fed5 	bl	80017b4 <LCD_CursorRight>
		while (string[index] != ';') {
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b3b      	cmp	r3, #59	; 0x3b
 8001a14:	d1ed      	bne.n	80019f2 <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	dddd      	ble.n	80019e4 <LCD_PrintOptionsScreen+0x48>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800b77c 	.word	0x0800b77c

08001a34 <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 8001a40:	2103      	movs	r1, #3
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fc12 	bl	800126c <LCD_SetCursor>
	LCD_Print("                    ");
 8001a48:	4825      	ldr	r0, [pc, #148]	; (8001ae0 <LCD_PrintNetworkStatus+0xac>)
 8001a4a:	f7ff fcad 	bl	80013a8 <LCD_Print>
	LCD_SetCursor(0, 3);
 8001a4e:	2103      	movs	r1, #3
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fc0b 	bl	800126c <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d103      	bne.n	8001a64 <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 8001a5c:	4821      	ldr	r0, [pc, #132]	; (8001ae4 <LCD_PrintNetworkStatus+0xb0>)
 8001a5e:	f7ff fcc7 	bl	80013f0 <LCD_PrintCentered>
 8001a62:	e03a      	b.n	8001ada <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d12c      	bne.n	8001ac4 <LCD_PrintNetworkStatus+0x90>
		if (data == NULL) return;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d033      	beq.n	8001ad8 <LCD_PrintNetworkStatus+0xa4>

		int size = strlen(data);
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	f7fe fbb7 	bl	80001e4 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f1c3 0314 	rsb	r3, r3, #20
 8001a80:	0fda      	lsrs	r2, r3, #31
 8001a82:	4413      	add	r3, r2
 8001a84:	105b      	asrs	r3, r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <LCD_PrintNetworkStatus+0xb4>)
 8001a8a:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <LCD_PrintNetworkStatus+0xb4>)
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <LCD_PrintNetworkStatus+0xb8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7ff fbe8 	bl	800126c <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e00b      	b.n	8001aba <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fef6 	bl	800189c <LCD_WriteChar>
			LCD_CursorRight();
 8001ab0:	f7ff fe80 	bl	80017b4 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbef      	blt.n	8001aa2 <LCD_PrintNetworkStatus+0x6e>
 8001ac2:	e00a      	b.n	8001ada <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d007      	beq.n	8001ada <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d104      	bne.n	8001ada <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <LCD_PrintNetworkStatus+0xbc>)
 8001ad2:	f7ff fc8d 	bl	80013f0 <LCD_PrintCentered>
 8001ad6:	e000      	b.n	8001ada <LCD_PrintNetworkStatus+0xa6>
		if (data == NULL) return;
 8001ad8:	bf00      	nop
	}
}
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800b788 	.word	0x0800b788
 8001ae4:	0800b7a0 	.word	0x0800b7a0
 8001ae8:	200004a5 	.word	0x200004a5
 8001aec:	2000049c 	.word	0x2000049c
 8001af0:	0800b7b4 	.word	0x0800b7b4

08001af4 <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
	State = ST_Clock;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <MENU_Init+0x14>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	20000b21 	.word	0x20000b21

08001b0c <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	e007      	b.n	8001b28 <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <_PWD_ResetPasswd+0x3c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3301      	adds	r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b27      	cmp	r3, #39	; 0x27
 8001b2c:	ddf4      	ble.n	8001b18 <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_PWD_ResetPasswd+0x40>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <_PWD_ResetPasswd+0x44>)
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	701a      	strb	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200004b8 	.word	0x200004b8
 8001b4c:	200004f7 	.word	0x200004f7
 8001b50:	200004b3 	.word	0x200004b3

08001b54 <_PWD_NextChar>:

char _PWD_NextChar(void) {
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <_PWD_NextChar+0x2c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <_PWD_NextChar+0x2c>)
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <_PWD_NextChar+0x2c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b7e      	cmp	r3, #126	; 0x7e
 8001b6a:	d902      	bls.n	8001b72 <_PWD_NextChar+0x1e>
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <_PWD_NextChar+0x2c>)
 8001b6e:	2220      	movs	r2, #32
 8001b70:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 8001b72:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <_PWD_NextChar+0x2c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	200004b3 	.word	0x200004b3

08001b84 <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d001      	beq.n	8001b98 <_PWD_SaveAndWrite+0x14>
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	e000      	b.n	8001b9a <_PWD_SaveAndWrite+0x16>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <_PWD_SaveAndWrite+0x30>)
 8001b9c:	7812      	ldrb	r2, [r2, #0]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <_PWD_SaveAndWrite+0x34>)
 8001ba2:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe78 	bl	800189c <LCD_WriteChar>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200004f7 	.word	0x200004f7
 8001bb8:	200004b8 	.word	0x200004b8

08001bbc <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001bc0:	4b9d      	ldr	r3, [pc, #628]	; (8001e38 <_CLK_HandleDateTimeInput+0x27c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	f200 8141 	bhi.w	8001e4e <_CLK_HandleDateTimeInput+0x292>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <_CLK_HandleDateTimeInput+0x18>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001c1d 	.word	0x08001c1d
 8001bd8:	08001c4b 	.word	0x08001c4b
 8001bdc:	08001e4f 	.word	0x08001e4f
 8001be0:	08001c79 	.word	0x08001c79
 8001be4:	08001ca7 	.word	0x08001ca7
 8001be8:	08001e4f 	.word	0x08001e4f
 8001bec:	08001cd5 	.word	0x08001cd5
 8001bf0:	08001d03 	.word	0x08001d03
 8001bf4:	08001e4f 	.word	0x08001e4f
 8001bf8:	08001e4f 	.word	0x08001e4f
 8001bfc:	08001d31 	.word	0x08001d31
 8001c00:	08001d5f 	.word	0x08001d5f
 8001c04:	08001e4f 	.word	0x08001e4f
 8001c08:	08001d8d 	.word	0x08001d8d
 8001c0c:	08001dbb 	.word	0x08001dbb
 8001c10:	08001e4f 	.word	0x08001e4f
 8001c14:	08001de9 	.word	0x08001de9
 8001c18:	08001e17 	.word	0x08001e17
		ColIs(1)
			SetBetween('0', '3');
 8001c1c:	4b87      	ldr	r3, [pc, #540]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b32      	cmp	r3, #50	; 0x32
 8001c22:	d903      	bls.n	8001c2c <_CLK_HandleDateTimeInput+0x70>
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c26:	2230      	movs	r2, #48	; 0x30
 8001c28:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c2a:	e110      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b2f      	cmp	r3, #47	; 0x2f
 8001c32:	d803      	bhi.n	8001c3c <_CLK_HandleDateTimeInput+0x80>
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c36:	2230      	movs	r2, #48	; 0x30
 8001c38:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c3a:	e108      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001c3c:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c46:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c48:	e101      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b38      	cmp	r3, #56	; 0x38
 8001c50:	d903      	bls.n	8001c5a <_CLK_HandleDateTimeInput+0x9e>
 8001c52:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c54:	2230      	movs	r2, #48	; 0x30
 8001c56:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c58:	e0f9      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001c5a:	4b78      	ldr	r3, [pc, #480]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8001c60:	d803      	bhi.n	8001c6a <_CLK_HandleDateTimeInput+0xae>
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c64:	2230      	movs	r2, #48	; 0x30
 8001c66:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c68:	e0f1      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c74:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c76:	e0ea      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8001c78:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b30      	cmp	r3, #48	; 0x30
 8001c7e:	d903      	bls.n	8001c88 <_CLK_HandleDateTimeInput+0xcc>
 8001c80:	4b6e      	ldr	r3, [pc, #440]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c82:	2230      	movs	r2, #48	; 0x30
 8001c84:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c86:	e0e2      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8001c8e:	d803      	bhi.n	8001c98 <_CLK_HandleDateTimeInput+0xdc>
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c92:	2230      	movs	r2, #48	; 0x30
 8001c94:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001c96:	e0da      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001ca2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ca4:	e0d3      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b38      	cmp	r3, #56	; 0x38
 8001cac:	d903      	bls.n	8001cb6 <_CLK_HandleDateTimeInput+0xfa>
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cb0:	2230      	movs	r2, #48	; 0x30
 8001cb2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001cb4:	e0cb      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b2f      	cmp	r3, #47	; 0x2f
 8001cbc:	d803      	bhi.n	8001cc6 <_CLK_HandleDateTimeInput+0x10a>
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cc0:	2230      	movs	r2, #48	; 0x30
 8001cc2:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001cc4:	e0c3      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cd0:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001cd2:	e0bc      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b38      	cmp	r3, #56	; 0x38
 8001cda:	d903      	bls.n	8001ce4 <_CLK_HandleDateTimeInput+0x128>
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cde:	2232      	movs	r2, #50	; 0x32
 8001ce0:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ce2:	e0b4      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b31      	cmp	r3, #49	; 0x31
 8001cea:	d803      	bhi.n	8001cf4 <_CLK_HandleDateTimeInput+0x138>
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cee:	2232      	movs	r2, #50	; 0x32
 8001cf0:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001cf2:	e0ac      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001cf4:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001cfe:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d00:	e0a5      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 8001d02:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b38      	cmp	r3, #56	; 0x38
 8001d08:	d903      	bls.n	8001d12 <_CLK_HandleDateTimeInput+0x156>
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d0c:	2230      	movs	r2, #48	; 0x30
 8001d0e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d10:	e09d      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b2f      	cmp	r3, #47	; 0x2f
 8001d18:	d803      	bhi.n	8001d22 <_CLK_HandleDateTimeInput+0x166>
 8001d1a:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d1c:	2230      	movs	r2, #48	; 0x30
 8001d1e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d20:	e095      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d2c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d2e:	e08e      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 8001d30:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b31      	cmp	r3, #49	; 0x31
 8001d36:	d903      	bls.n	8001d40 <_CLK_HandleDateTimeInput+0x184>
 8001d38:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d3a:	2230      	movs	r2, #48	; 0x30
 8001d3c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d3e:	e086      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b2f      	cmp	r3, #47	; 0x2f
 8001d46:	d803      	bhi.n	8001d50 <_CLK_HandleDateTimeInput+0x194>
 8001d48:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d4a:	2230      	movs	r2, #48	; 0x30
 8001d4c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d4e:	e07e      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d5a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d5c:	e077      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b38      	cmp	r3, #56	; 0x38
 8001d64:	d903      	bls.n	8001d6e <_CLK_HandleDateTimeInput+0x1b2>
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d68:	2230      	movs	r2, #48	; 0x30
 8001d6a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d6c:	e06f      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d803      	bhi.n	8001d7e <_CLK_HandleDateTimeInput+0x1c2>
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d78:	2230      	movs	r2, #48	; 0x30
 8001d7a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d7c:	e067      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d88:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d8a:	e060      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b34      	cmp	r3, #52	; 0x34
 8001d92:	d903      	bls.n	8001d9c <_CLK_HandleDateTimeInput+0x1e0>
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d96:	2230      	movs	r2, #48	; 0x30
 8001d98:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001d9a:	e058      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b2f      	cmp	r3, #47	; 0x2f
 8001da2:	d803      	bhi.n	8001dac <_CLK_HandleDateTimeInput+0x1f0>
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001da6:	2230      	movs	r2, #48	; 0x30
 8001da8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001daa:	e050      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001db6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001db8:	e049      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b38      	cmp	r3, #56	; 0x38
 8001dc0:	d903      	bls.n	8001dca <_CLK_HandleDateTimeInput+0x20e>
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dc4:	2230      	movs	r2, #48	; 0x30
 8001dc6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001dc8:	e041      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b2f      	cmp	r3, #47	; 0x2f
 8001dd0:	d803      	bhi.n	8001dda <_CLK_HandleDateTimeInput+0x21e>
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dd4:	2230      	movs	r2, #48	; 0x30
 8001dd6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001dd8:	e039      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001de4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001de6:	e032      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b34      	cmp	r3, #52	; 0x34
 8001dee:	d903      	bls.n	8001df8 <_CLK_HandleDateTimeInput+0x23c>
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001df6:	e02a      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b2f      	cmp	r3, #47	; 0x2f
 8001dfe:	d803      	bhi.n	8001e08 <_CLK_HandleDateTimeInput+0x24c>
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e02:	2230      	movs	r2, #48	; 0x30
 8001e04:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e06:	e022      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e12:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e14:	e01b      	b.n	8001e4e <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b38      	cmp	r3, #56	; 0x38
 8001e1c:	d903      	bls.n	8001e26 <_CLK_HandleDateTimeInput+0x26a>
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e20:	2230      	movs	r2, #48	; 0x30
 8001e22:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e24:	e012      	b.n	8001e4c <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8001e2c:	d808      	bhi.n	8001e40 <_CLK_HandleDateTimeInput+0x284>
 8001e2e:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <_CLK_HandleDateTimeInput+0x280>)
 8001e30:	2230      	movs	r2, #48	; 0x30
 8001e32:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e34:	e00a      	b.n	8001e4c <_CLK_HandleDateTimeInput+0x290>
 8001e36:	bf00      	nop
 8001e38:	200004b2 	.word	0x200004b2
 8001e3c:	200004b3 	.word	0x200004b3
			SetBetween('0', '9');
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <_CLK_HandleDateTimeInput+0x2b0>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_CLK_HandleDateTimeInput+0x2b0>)
 8001e4a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e4c:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_CLK_HandleDateTimeInput+0x2b0>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fd22 	bl	800189c <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <_CLK_HandleDateTimeInput+0x2b4>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <_CLK_HandleDateTimeInput+0x2b0>)
 8001e60:	7819      	ldrb	r1, [r3, #0]
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <_CLK_HandleDateTimeInput+0x2b8>)
 8001e64:	5499      	strb	r1, [r3, r2]
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200004b3 	.word	0x200004b3
 8001e70:	200004b2 	.word	0x200004b2
 8001e74:	200004e4 	.word	0x200004e4

08001e78 <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b02      	subs	r3, #2
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d84c      	bhi.n	8001f20 <_CLK_MoveInputRight+0xa8>
 8001e86:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <_CLK_MoveInputRight+0x14>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001f11 	.word	0x08001f11
 8001e90:	08001f21 	.word	0x08001f21
 8001e94:	08001f21 	.word	0x08001f21
 8001e98:	08001f01 	.word	0x08001f01
 8001e9c:	08001f21 	.word	0x08001f21
 8001ea0:	08001f21 	.word	0x08001f21
 8001ea4:	08001ef1 	.word	0x08001ef1
 8001ea8:	08001f21 	.word	0x08001f21
 8001eac:	08001f21 	.word	0x08001f21
 8001eb0:	08001f21 	.word	0x08001f21
 8001eb4:	08001ee1 	.word	0x08001ee1
 8001eb8:	08001f21 	.word	0x08001f21
 8001ebc:	08001f21 	.word	0x08001f21
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001f21 	.word	0x08001f21
 8001ec8:	08001f21 	.word	0x08001f21
 8001ecc:	08001f2f 	.word	0x08001f2f
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2011      	movs	r0, #17
 8001ed4:	f7ff f9ca 	bl	800126c <LCD_SetCursor>
			_optionsCol = 17;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001eda:	2211      	movs	r2, #17
 8001edc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ede:	e027      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	200e      	movs	r0, #14
 8001ee4:	f7ff f9c2 	bl	800126c <LCD_SetCursor>
			_optionsCol = 14;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001eea:	220e      	movs	r2, #14
 8001eec:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eee:	e01f      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	200b      	movs	r0, #11
 8001ef4:	f7ff f9ba 	bl	800126c <LCD_SetCursor>
			_optionsCol = 11;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001efa:	220b      	movs	r2, #11
 8001efc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001efe:	e017      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 8001f00:	2101      	movs	r1, #1
 8001f02:	2007      	movs	r0, #7
 8001f04:	f7ff f9b2 	bl	800126c <LCD_SetCursor>
			_optionsCol = 7;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f0e:	e00f      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 8001f10:	2101      	movs	r1, #1
 8001f12:	2004      	movs	r0, #4
 8001f14:	f7ff f9aa 	bl	800126c <LCD_SetCursor>
			_optionsCol = 4;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f1e:	e007      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 8001f20:	f7ff fc48 	bl	80017b4 <LCD_CursorRight>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <_CLK_MoveInputRight+0xbc>)
 8001f2a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f2c:	e000      	b.n	8001f30 <_CLK_MoveInputRight+0xb8>
		ColEnd
 8001f2e:	bf00      	nop
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200004b2 	.word	0x200004b2

08001f38 <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	2b10      	cmp	r3, #16
 8001f44:	d84c      	bhi.n	8001fe0 <_CLK_MoveInputLeft+0xa8>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <_CLK_MoveInputLeft+0x14>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fef 	.word	0x08001fef
 8001f50:	08001fe1 	.word	0x08001fe1
 8001f54:	08001fe1 	.word	0x08001fe1
 8001f58:	08001f91 	.word	0x08001f91
 8001f5c:	08001fe1 	.word	0x08001fe1
 8001f60:	08001fe1 	.word	0x08001fe1
 8001f64:	08001fa1 	.word	0x08001fa1
 8001f68:	08001fe1 	.word	0x08001fe1
 8001f6c:	08001fe1 	.word	0x08001fe1
 8001f70:	08001fe1 	.word	0x08001fe1
 8001f74:	08001fb1 	.word	0x08001fb1
 8001f78:	08001fe1 	.word	0x08001fe1
 8001f7c:	08001fe1 	.word	0x08001fe1
 8001f80:	08001fc1 	.word	0x08001fc1
 8001f84:	08001fe1 	.word	0x08001fe1
 8001f88:	08001fe1 	.word	0x08001fe1
 8001f8c:	08001fd1 	.word	0x08001fd1
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7ff f96a 	bl	800126c <LCD_SetCursor>
			_optionsCol = 2;
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f9e:	e027      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2005      	movs	r0, #5
 8001fa4:	f7ff f962 	bl	800126c <LCD_SetCursor>
			_optionsCol = 5;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001faa:	2205      	movs	r2, #5
 8001fac:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fae:	e01f      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2008      	movs	r0, #8
 8001fb4:	f7ff f95a 	bl	800126c <LCD_SetCursor>
			_optionsCol = 8;
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001fba:	2208      	movs	r2, #8
 8001fbc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fbe:	e017      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	200c      	movs	r0, #12
 8001fc4:	f7ff f952 	bl	800126c <LCD_SetCursor>
			_optionsCol = 12;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fce:	e00f      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7ff f94a 	bl	800126c <LCD_SetCursor>
			_optionsCol = 15;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001fda:	220f      	movs	r2, #15
 8001fdc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fde:	e007      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 8001fe0:	f7ff fbba 	bl	8001758 <LCD_CursorLeft>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <_CLK_MoveInputLeft+0xbc>)
 8001fea:	701a      	strb	r2, [r3, #0]
	}
}
 8001fec:	e000      	b.n	8001ff0 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 8001fee:	bf00      	nop
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200004b2 	.word	0x200004b2

08001ff8 <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 8002002:	4b72      	ldr	r3, [pc, #456]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002004:	785b      	ldrb	r3, [r3, #1]
 8002006:	3b30      	subs	r3, #48	; 0x30
 8002008:	b2db      	uxtb	r3, r3
 800200a:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 800200c:	4b6f      	ldr	r3, [pc, #444]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	3b30      	subs	r3, #48	; 0x30
 8002012:	b2db      	uxtb	r3, r3
 8002014:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 8002016:	4b6d      	ldr	r3, [pc, #436]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002018:	791b      	ldrb	r3, [r3, #4]
 800201a:	3b30      	subs	r3, #48	; 0x30
 800201c:	b2db      	uxtb	r3, r3
 800201e:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002022:	795b      	ldrb	r3, [r3, #5]
 8002024:	3b30      	subs	r3, #48	; 0x30
 8002026:	b2db      	uxtb	r3, r3
 8002028:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 800202a:	4b68      	ldr	r3, [pc, #416]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 800202c:	79db      	ldrb	r3, [r3, #7]
 800202e:	3b30      	subs	r3, #48	; 0x30
 8002030:	b2db      	uxtb	r3, r3
 8002032:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 8002034:	4b65      	ldr	r3, [pc, #404]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002036:	7a1b      	ldrb	r3, [r3, #8]
 8002038:	3b30      	subs	r3, #48	; 0x30
 800203a:	b2db      	uxtb	r3, r3
 800203c:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002040:	7adb      	ldrb	r3, [r3, #11]
 8002042:	3b30      	subs	r3, #48	; 0x30
 8002044:	b2db      	uxtb	r3, r3
 8002046:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 8002048:	4b60      	ldr	r3, [pc, #384]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	3b30      	subs	r3, #48	; 0x30
 800204e:	b2db      	uxtb	r3, r3
 8002050:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 8002052:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002054:	7b9b      	ldrb	r3, [r3, #14]
 8002056:	3b30      	subs	r3, #48	; 0x30
 8002058:	b2db      	uxtb	r3, r3
 800205a:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 800205c:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 800205e:	7bdb      	ldrb	r3, [r3, #15]
 8002060:	3b30      	subs	r3, #48	; 0x30
 8002062:	b2db      	uxtb	r3, r3
 8002064:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 8002066:	4b59      	ldr	r3, [pc, #356]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002068:	7c5b      	ldrb	r3, [r3, #17]
 800206a:	3b30      	subs	r3, #48	; 0x30
 800206c:	b2db      	uxtb	r3, r3
 800206e:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 8002070:	4b56      	ldr	r3, [pc, #344]	; (80021cc <_CLK_ParseAndSetDateTime+0x1d4>)
 8002072:	7c9b      	ldrb	r3, [r3, #18]
 8002074:	3b30      	subs	r3, #48	; 0x30
 8002076:	b2db      	uxtb	r3, r3
 8002078:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 800207a:	7abb      	ldrb	r3, [r7, #10]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d104      	bne.n	800208a <_CLK_ParseAndSetDateTime+0x92>
 8002080:	7afb      	ldrb	r3, [r7, #11]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 800208a:	7abb      	ldrb	r3, [r7, #10]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <_CLK_ParseAndSetDateTime+0xa2>
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 800209a:	783b      	ldrb	r3, [r7, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d104      	bne.n	80020aa <_CLK_ParseAndSetDateTime+0xb2>
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d901      	bls.n	80020aa <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_CLK_ParseAndSetDateTime+0xbe>
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d023      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
 80020b6:	7abb      	ldrb	r3, [r7, #10]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_CLK_ParseAndSetDateTime+0xca>
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d01d      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
 80020c2:	7abb      	ldrb	r3, [r7, #10]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <_CLK_ParseAndSetDateTime+0xd6>
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d017      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80020ce:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	2b07      	cmp	r3, #7
 80020d8:	d011      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
 80020da:	7abb      	ldrb	r3, [r7, #10]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_CLK_ParseAndSetDateTime+0xee>
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d00b      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <_CLK_ParseAndSetDateTime+0xfa>
 80020ec:	7afb      	ldrb	r3, [r7, #11]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 80020f2:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10a      	bne.n	800210e <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 80020fe:	7a3b      	ldrb	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d104      	bne.n	800210e <_CLK_ParseAndSetDateTime+0x116>
 8002104:	7a7b      	ldrb	r3, [r7, #9]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d901      	bls.n	800210e <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 800210e:	7abb      	ldrb	r3, [r7, #10]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_CLK_ParseAndSetDateTime+0x122>
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d011      	beq.n	800213e <_CLK_ParseAndSetDateTime+0x146>
 800211a:	7abb      	ldrb	r3, [r7, #10]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_CLK_ParseAndSetDateTime+0x12e>
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d00b      	beq.n	800213e <_CLK_ParseAndSetDateTime+0x146>
 8002126:	7abb      	ldrb	r3, [r7, #10]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_CLK_ParseAndSetDateTime+0x13a>
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	2b04      	cmp	r3, #4
 8002130:	d005      	beq.n	800213e <_CLK_ParseAndSetDateTime+0x146>
		Month(0,4)) {
 8002132:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <_CLK_ParseAndSetDateTime+0x156>
		Month(0,4)) {
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 800213e:	7a3b      	ldrb	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d104      	bne.n	800214e <_CLK_ParseAndSetDateTime+0x156>
 8002144:	7a7b      	ldrb	r3, [r7, #9]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 800214e:	7abb      	ldrb	r3, [r7, #10]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d115      	bne.n	8002180 <_CLK_ParseAndSetDateTime+0x188>
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d112      	bne.n	8002180 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 800215a:	7a3b      	ldrb	r3, [r7, #8]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 8002160:	2301      	movs	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 8002164:	7b7b      	ldrb	r3, [r7, #13]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 8002170:	7a3b      	ldrb	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d104      	bne.n	8002180 <_CLK_ParseAndSetDateTime+0x188>
 8002176:	7a7b      	ldrb	r3, [r7, #9]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d101      	bne.n	8002180 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 8002180:	f7ff f8ba 	bl	80012f8 <LCD_DisableCursor>

	if (error) {
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d014      	beq.n	80021b4 <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 800218a:	f7ff f855 	bl	8001238 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 800218e:	2101      	movs	r1, #1
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff f86b 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 8002196:	480e      	ldr	r0, [pc, #56]	; (80021d0 <_CLK_ParseAndSetDateTime+0x1d8>)
 8002198:	f7ff f92a 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 800219c:	2102      	movs	r1, #2
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff f864 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <_CLK_ParseAndSetDateTime+0x1dc>)
 80021a6:	f7ff f923 	bl	80013f0 <LCD_PrintCentered>

		HAL_Delay(1000);
 80021aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ae:	f003 fb4b 	bl	8005848 <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 80021b2:	e006      	b.n	80021c2 <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 80021b4:	463a      	mov	r2, r7
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fa85 	bl	80036cc <SD_SetDateTime>
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200004e4 	.word	0x200004e4
 80021d0:	0800b7cc 	.word	0x0800b7cc
 80021d4:	0800b7dc 	.word	0x0800b7dc

080021d8 <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MENU_PasswdInput+0x44>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d018      	beq.n	8002216 <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <MENU_PasswdInput+0x44>)
 80021e6:	2203      	movs	r2, #3
 80021e8:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80021ea:	f7ff f825 	bl	8001238 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <MENU_PasswdInput+0x48>)
 80021f0:	f7ff f8fe 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 80021f4:	2103      	movs	r1, #3
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff f838 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <MENU_PasswdInput+0x4c>)
 80021fe:	f7ff f8f7 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 8002202:	2101      	movs	r1, #1
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff f831 	bl	800126c <LCD_SetCursor>

		_PWD_ResetPasswd();
 800220a:	f7ff fc7f 	bl	8001b0c <_PWD_ResetPasswd>

		LCD_DisableBlink();
 800220e:	f7ff f89f 	bl	8001350 <LCD_DisableBlink>
		LCD_EnableCursor();
 8002212:	f7ff f887 	bl	8001324 <LCD_EnableCursor>
	}
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000b21 	.word	0x20000b21
 8002220:	0800b7f0 	.word	0x0800b7f0
 8002224:	0800b808 	.word	0x0800b808

08002228 <MENU_Options>:

void MENU_Options(void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MENU_Options+0x40>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d016      	beq.n	8002262 <MENU_Options+0x3a>
		State = ST_Options;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MENU_Options+0x40>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800223a:	f7fe fffd 	bl	8001238 <LCD_ClearScreen>

		_currentOption = 1;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MENU_Options+0x44>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MENU_Options+0x44>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <MENU_Options+0x48>)
 800224c:	f7ff fba6 	bl	800199c <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 8002250:	2101      	movs	r1, #1
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff f80a 	bl	800126c <LCD_SetCursor>
		_optionsRow = 1;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MENU_Options+0x4c>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 800225e:	f7ff f88d 	bl	800137c <LCD_EnableBlink>
	}
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000b21 	.word	0x20000b21
 800226c:	200004b1 	.word	0x200004b1
 8002270:	20000000 	.word	0x20000000
 8002274:	200004b0 	.word	0x200004b0

08002278 <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <MENU_OptionsSetDateTime+0x88>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d038      	beq.n	80022f8 <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <MENU_OptionsSetDateTime+0x88>)
 8002288:	2204      	movs	r2, #4
 800228a:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800228c:	f7fe ffd4 	bl	8001238 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 8002290:	481c      	ldr	r0, [pc, #112]	; (8002304 <MENU_OptionsSetDateTime+0x8c>)
 8002292:	f7ff f889 	bl	80013a8 <LCD_Print>
		LCD_SetCursor(0, 1);
 8002296:	2101      	movs	r1, #1
 8002298:	2000      	movs	r0, #0
 800229a:	f7fe ffe7 	bl	800126c <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 800229e:	481a      	ldr	r0, [pc, #104]	; (8002308 <MENU_OptionsSetDateTime+0x90>)
 80022a0:	f7ff f882 	bl	80013a8 <LCD_Print>
		LCD_SetCursor(0, 2);
 80022a4:	2102      	movs	r1, #2
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7fe ffe0 	bl	800126c <LCD_SetCursor>
		LCD_Print("--------------------");
 80022ac:	4817      	ldr	r0, [pc, #92]	; (800230c <MENU_OptionsSetDateTime+0x94>)
 80022ae:	f7ff f87b 	bl	80013a8 <LCD_Print>
		LCD_SetCursor(0, 3);
 80022b2:	2103      	movs	r1, #3
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe ffd9 	bl	800126c <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <MENU_OptionsSetDateTime+0x98>)
 80022bc:	f7ff f874 	bl	80013a8 <LCD_Print>

		LCD_SetCursor(1, 1);
 80022c0:	2101      	movs	r1, #1
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe ffd2 	bl	800126c <LCD_SetCursor>
		_optionsCol = 1;
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MENU_OptionsSetDateTime+0x9c>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 80022ce:	f7ff f83f 	bl	8001350 <LCD_DisableBlink>
		LCD_EnableCursor();
 80022d2:	f7ff f827 	bl	8001324 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	e007      	b.n	80022ec <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <MENU_OptionsSetDateTime+0xa0>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	2230      	movs	r2, #48	; 0x30
 80022e4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3301      	adds	r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b12      	cmp	r3, #18
 80022f0:	ddf4      	ble.n	80022dc <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <MENU_OptionsSetDateTime+0xa4>)
 80022f4:	2230      	movs	r2, #48	; 0x30
 80022f6:	701a      	strb	r2, [r3, #0]
	}
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000b21 	.word	0x20000b21
 8002304:	0800b820 	.word	0x0800b820
 8002308:	0800b838 	.word	0x0800b838
 800230c:	0800b850 	.word	0x0800b850
 8002310:	0800b808 	.word	0x0800b808
 8002314:	200004b2 	.word	0x200004b2
 8002318:	200004e4 	.word	0x200004e4
 800231c:	200004b3 	.word	0x200004b3

08002320 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	int amount = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_WiFi_NofNetworks+0x22>
			return amount;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e00c      	b.n	800235c <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b3b      	cmp	r3, #59	; 0x3b
 800234c:	d102      	bne.n	8002354 <_WiFi_NofNetworks+0x34>
			amount++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	3301      	adds	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 800235a:	e7e9      	b.n	8002330 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
	int clearRest = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	e015      	b.n	80023a4 <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <_WiFi_RequestConn+0x26>
 800237e:	4a2b      	ldr	r2, [pc, #172]	; (800242c <_WiFi_RequestConn+0xc4>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4413      	add	r3, r2
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <_WiFi_RequestConn+0x26>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <_WiFi_RequestConn+0x36>
 8002394:	4a25      	ldr	r2, [pc, #148]	; (800242c <_WiFi_RequestConn+0xc4>)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4413      	add	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b27      	cmp	r3, #39	; 0x27
 80023a8:	dde6      	ble.n	8002378 <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 80023aa:	f7fe ff45 	bl	8001238 <LCD_ClearScreen>
	LCD_DisableCursor();
 80023ae:	f7fe ffa3 	bl	80012f8 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 80023b2:	2101      	movs	r1, #1
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe ff59 	bl	800126c <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 80023ba:	481d      	ldr	r0, [pc, #116]	; (8002430 <_WiFi_RequestConn+0xc8>)
 80023bc:	f7ff f818 	bl	80013f0 <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 80023c0:	2103      	movs	r1, #3
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe ff52 	bl	800126c <LCD_SetCursor>
	LCD_PrintCentered("please wait xD");
 80023c8:	481a      	ldr	r0, [pc, #104]	; (8002434 <_WiFi_RequestConn+0xcc>)
 80023ca:	f7ff f811 	bl	80013f0 <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <_WiFi_RequestConn+0xd0>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4815      	ldr	r0, [pc, #84]	; (800242c <_WiFi_RequestConn+0xc4>)
 80023d6:	f000 fca5 	bl	8002d24 <NET_ConnectToWiFi>
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 80023de:	f7fe ff2b 	bl	8001238 <LCD_ClearScreen>

	if (result == 0) {
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 80023e8:	2101      	movs	r1, #1
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe ff3e 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 80023f0:	4812      	ldr	r0, [pc, #72]	; (800243c <_WiFi_RequestConn+0xd4>)
 80023f2:	f7fe fffd 	bl	80013f0 <LCD_PrintCentered>

		HAL_Delay(1000);
 80023f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fa:	f003 fa25 	bl	8005848 <HAL_Delay>
 80023fe:	e00d      	b.n	800241c <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 8002400:	2101      	movs	r1, #1
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe ff32 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 8002408:	480d      	ldr	r0, [pc, #52]	; (8002440 <_WiFi_RequestConn+0xd8>)
 800240a:	f7fe fff1 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 800240e:	2102      	movs	r1, #2
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe ff2b 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 8002416:	480b      	ldr	r0, [pc, #44]	; (8002444 <_WiFi_RequestConn+0xdc>)
 8002418:	f7fe ffea 	bl	80013f0 <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 800241c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002420:	f003 fa12 	bl	8005848 <HAL_Delay>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200004b8 	.word	0x200004b8
 8002430:	0800b868 	.word	0x0800b868
 8002434:	0800b874 	.word	0x0800b874
 8002438:	200004b1 	.word	0x200004b1
 800243c:	0800b884 	.word	0x0800b884
 8002440:	0800b890 	.word	0x0800b890
 8002444:	0800b8a4 	.word	0x0800b8a4

08002448 <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <MENU_OptionsWifiList+0xac>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d049      	beq.n	80024ea <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <MENU_OptionsWifiList+0xac>)
 8002458:	2202      	movs	r2, #2
 800245a:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800245c:	f7fe feec 	bl	8001238 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002460:	f7fe ff76 	bl	8001350 <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 8002464:	4824      	ldr	r0, [pc, #144]	; (80024f8 <MENU_OptionsWifiList+0xb0>)
 8002466:	f7fe ffc3 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 800246a:	2102      	movs	r1, #2
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fefd 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 8002472:	4822      	ldr	r0, [pc, #136]	; (80024fc <MENU_OptionsWifiList+0xb4>)
 8002474:	f7fe ffbc 	bl	80013f0 <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 8002478:	2103      	movs	r1, #3
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe fef6 	bl	800126c <LCD_SetCursor>
		LCD_PrintCentered("please wait :)");
 8002480:	481f      	ldr	r0, [pc, #124]	; (8002500 <MENU_OptionsWifiList+0xb8>)
 8002482:	f7fe ffb5 	bl	80013f0 <LCD_PrintCentered>

		_optionsRow = 0;
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <MENU_OptionsWifiList+0xbc>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 800248c:	f000 fb16 	bl	8002abc <NET_RequestNetworkList>
 8002490:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d019      	beq.n	80024cc <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff41 	bl	8002320 <_WiFi_NofNetworks>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MENU_OptionsWifiList+0xc0>)
 80024a4:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <MENU_OptionsWifiList+0xc4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <MENU_OptionsWifiList+0xc8>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <MENU_OptionsWifiList+0xc4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff f9ff 	bl	80018bc <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 80024be:	f7fe ff5d 	bl	800137c <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 80024c2:	2100      	movs	r1, #0
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fed1 	bl	800126c <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 80024ca:	e00e      	b.n	80024ea <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 80024cc:	f7fe feb4 	bl	8001238 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 80024d0:	2101      	movs	r1, #1
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe feca 	bl	800126c <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 80024d8:	480e      	ldr	r0, [pc, #56]	; (8002514 <MENU_OptionsWifiList+0xcc>)
 80024da:	f7fe ff89 	bl	80013f0 <LCD_PrintCentered>
			HAL_Delay(1000);
 80024de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e2:	f003 f9b1 	bl	8005848 <HAL_Delay>
			MENU_Options();
 80024e6:	f7ff fe9f 	bl	8002228 <MENU_Options>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000b21 	.word	0x20000b21
 80024f8:	0800b8b8 	.word	0x0800b8b8
 80024fc:	0800b8cc 	.word	0x0800b8cc
 8002500:	0800b8dc 	.word	0x0800b8dc
 8002504:	200004b0 	.word	0x200004b0
 8002508:	200004e0 	.word	0x200004e0
 800250c:	200004b1 	.word	0x200004b1
 8002510:	200004b4 	.word	0x200004b4
 8002514:	0800b8ec 	.word	0x0800b8ec

08002518 <MENU_Clock>:

void MENU_Clock(void) {
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MENU_Clock+0x74>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <MENU_Clock+0x1c>
		State = ST_Clock;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <MENU_Clock+0x74>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 800252c:	f7fe fe84 	bl	8001238 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002530:	f7fe ff0e 	bl	8001350 <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 8002534:	f001 f806 	bl	8003544 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 8002538:	f107 0208 	add.w	r2, r7, #8
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f87c 	bl	8003640 <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 8002548:	f107 0208 	add.w	r2, r7, #8
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f986 	bl	8001864 <LCD_PrintDateTime>

	if (THS_ReadData(THS_In, data)) {
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	2000      	movs	r0, #0
 800255e:	f001 fa35 	bl	80039cc <THS_ReadData>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <MENU_Clock+0x5a>
		LCD_PrintTempInfo(data, NULL);
 8002568:	463b      	mov	r3, r7
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe ff69 	bl	8001444 <LCD_PrintTempInfo>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <MENU_Clock+0x78>)
 8002574:	781c      	ldrb	r4, [r3, #0]
 8002576:	f000 fc7b 	bl	8002e70 <NET_GetConnInfo>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	4620      	mov	r0, r4
 8002580:	f7ff fa58 	bl	8001a34 <LCD_PrintNetworkStatus>
}
 8002584:	bf00      	nop
 8002586:	3724      	adds	r7, #36	; 0x24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	20000b21 	.word	0x20000b21
 8002590:	20000b20 	.word	0x20000b20

08002594 <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	48ad      	ldr	r0, [pc, #692]	; (8002850 <MENU_HandleKeys+0x2bc>)
 800259c:	f003 fc44 	bl	8005e28 <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 808c 	beq.w	80026c0 <MENU_HandleKeys+0x12c>
 80025a8:	200a      	movs	r0, #10
 80025aa:	f003 f94d 	bl	8005848 <HAL_Delay>
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	48a7      	ldr	r0, [pc, #668]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80025b2:	f003 fc39 	bl	8005e28 <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 81dd 	beq.w	8002978 <MENU_HandleKeys+0x3e4>
 80025be:	bf00      	nop
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	48a3      	ldr	r0, [pc, #652]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80025c4:	f003 fc30 	bl	8005e28 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f8      	bne.n	80025c0 <MENU_HandleKeys+0x2c>
		if (State == ST_Clock) {
 80025ce:	4ba1      	ldr	r3, [pc, #644]	; (8002854 <MENU_HandleKeys+0x2c0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <MENU_HandleKeys+0x48>
			/* Przejdz w ekran opcji */
			MENU_Options();
 80025d6:	f7ff fe27 	bl	8002228 <MENU_Options>
 80025da:	e06a      	b.n	80026b2 <MENU_HandleKeys+0x11e>
		} else if (State == ST_Options) {
 80025dc:	4b9d      	ldr	r3, [pc, #628]	; (8002854 <MENU_HandleKeys+0x2c0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d125      	bne.n	8002630 <MENU_HandleKeys+0x9c>
			if (_optionsRow > 1) {
 80025e4:	4b9c      	ldr	r3, [pc, #624]	; (8002858 <MENU_HandleKeys+0x2c4>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d90c      	bls.n	8002606 <MENU_HandleKeys+0x72>
				_optionsRow = LCD_CursorUp();
 80025ec:	f7ff f87c 	bl	80016e8 <LCD_CursorUp>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b98      	ldr	r3, [pc, #608]	; (8002858 <MENU_HandleKeys+0x2c4>)
 80025f6:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 80025f8:	4b98      	ldr	r3, [pc, #608]	; (800285c <MENU_HandleKeys+0x2c8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e055      	b.n	80026b2 <MENU_HandleKeys+0x11e>
			} else if (_currentOption != 1) {
 8002606:	4b95      	ldr	r3, [pc, #596]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d051      	beq.n	80026b2 <MENU_HandleKeys+0x11e>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 800260e:	4b93      	ldr	r3, [pc, #588]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	3b01      	subs	r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b91      	ldr	r3, [pc, #580]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	4b90      	ldr	r3, [pc, #576]	; (800285c <MENU_HandleKeys+0x2c8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	488f      	ldr	r0, [pc, #572]	; (8002860 <MENU_HandleKeys+0x2cc>)
 8002622:	f7ff f9bb 	bl	800199c <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 8002626:	2101      	movs	r1, #1
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe fe1f 	bl	800126c <LCD_SetCursor>
 800262e:	e040      	b.n	80026b2 <MENU_HandleKeys+0x11e>
			}
		} else if (State == ST_PassInput) {
 8002630:	4b88      	ldr	r3, [pc, #544]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d106      	bne.n	8002646 <MENU_HandleKeys+0xb2>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 8002638:	f7ff fa8c 	bl	8001b54 <_PWD_NextChar>
 800263c:	4603      	mov	r3, r0
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff faa0 	bl	8001b84 <_PWD_SaveAndWrite>
 8002644:	e035      	b.n	80026b2 <MENU_HandleKeys+0x11e>
		} else if (State == ST_SetDateTime) {
 8002646:	4b83      	ldr	r3, [pc, #524]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b04      	cmp	r3, #4
 800264c:	d102      	bne.n	8002654 <MENU_HandleKeys+0xc0>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 800264e:	f7ff fab5 	bl	8001bbc <_CLK_HandleDateTimeInput>
 8002652:	e02e      	b.n	80026b2 <MENU_HandleKeys+0x11e>
		} else if (State == ST_WiFi) {
 8002654:	4b7f      	ldr	r3, [pc, #508]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d12a      	bne.n	80026b2 <MENU_HandleKeys+0x11e>
			if (_optionsRow > 0) {
 800265c:	4b7e      	ldr	r3, [pc, #504]	; (8002858 <MENU_HandleKeys+0x2c4>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00c      	beq.n	800267e <MENU_HandleKeys+0xea>
				_optionsRow = LCD_CursorUp();
 8002664:	f7ff f840 	bl	80016e8 <LCD_CursorUp>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <MENU_HandleKeys+0x2c4>)
 800266e:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002670:	4b7a      	ldr	r3, [pc, #488]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <MENU_HandleKeys+0x2c8>)
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e019      	b.n	80026b2 <MENU_HandleKeys+0x11e>
			} else if (_networksIn > 4 && _currentOption != 1) {
 800267e:	4b79      	ldr	r3, [pc, #484]	; (8002864 <MENU_HandleKeys+0x2d0>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d915      	bls.n	80026b2 <MENU_HandleKeys+0x11e>
 8002686:	4b75      	ldr	r3, [pc, #468]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d011      	beq.n	80026b2 <MENU_HandleKeys+0x11e>
				LCD_PrintNetworks(_networksList, --_currentOption);
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <MENU_HandleKeys+0x2d4>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b72      	ldr	r3, [pc, #456]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	3b01      	subs	r3, #1
 8002698:	b2d9      	uxtb	r1, r3
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <MENU_HandleKeys+0x2c8>)
 800269c:	7019      	strb	r1, [r3, #0]
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <MENU_HandleKeys+0x2c8>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4610      	mov	r0, r2
 80026a6:	f7ff f909 	bl	80018bc <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 80026aa:	2100      	movs	r1, #0
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe fddd 	bl	800126c <LCD_SetCursor>
			}
		}

		LED_T(Red);
 80026b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b6:	486d      	ldr	r0, [pc, #436]	; (800286c <MENU_HandleKeys+0x2d8>)
 80026b8:	f003 fbe7 	bl	8005e8a <HAL_GPIO_TogglePin>
		return 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	e15c      	b.n	800297a <MENU_HandleKeys+0x3e6>

	} Or (DOWN) {
 80026c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c4:	4862      	ldr	r0, [pc, #392]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80026c6:	f003 fbaf 	bl	8005e28 <HAL_GPIO_ReadPin>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8091 	beq.w	80027f4 <MENU_HandleKeys+0x260>
 80026d2:	200a      	movs	r0, #10
 80026d4:	f003 f8b8 	bl	8005848 <HAL_Delay>
 80026d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026dc:	485c      	ldr	r0, [pc, #368]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80026de:	f003 fba3 	bl	8005e28 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8147 	beq.w	8002978 <MENU_HandleKeys+0x3e4>
 80026ea:	bf00      	nop
 80026ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f0:	4857      	ldr	r0, [pc, #348]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80026f2:	f003 fb99 	bl	8005e28 <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f7      	bne.n	80026ec <MENU_HandleKeys+0x158>
		if (State == ST_Options) {
 80026fc:	4b55      	ldr	r3, [pc, #340]	; (8002854 <MENU_HandleKeys+0x2c0>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d126      	bne.n	8002752 <MENU_HandleKeys+0x1be>
			if (_optionsRow < 3) {
 8002704:	4b54      	ldr	r3, [pc, #336]	; (8002858 <MENU_HandleKeys+0x2c4>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d80c      	bhi.n	8002726 <MENU_HandleKeys+0x192>
				_optionsRow = LCD_CursorDown();
 800270c:	f7ff f808 	bl	8001720 <LCD_CursorDown>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <MENU_HandleKeys+0x2c4>)
 8002716:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <MENU_HandleKeys+0x2c8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b4e      	ldr	r3, [pc, #312]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e05f      	b.n	80027e6 <MENU_HandleKeys+0x252>
			} else if (_currentOption != NOF_OPTIONS) {
 8002726:	4b4d      	ldr	r3, [pc, #308]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b05      	cmp	r3, #5
 800272c:	d05b      	beq.n	80027e6 <MENU_HandleKeys+0x252>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <MENU_HandleKeys+0x2c8>)
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <MENU_HandleKeys+0x2c8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3b02      	subs	r3, #2
 8002740:	4619      	mov	r1, r3
 8002742:	4847      	ldr	r0, [pc, #284]	; (8002860 <MENU_HandleKeys+0x2cc>)
 8002744:	f7ff f92a 	bl	800199c <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 8002748:	2103      	movs	r1, #3
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fd8e 	bl	800126c <LCD_SetCursor>
 8002750:	e049      	b.n	80027e6 <MENU_HandleKeys+0x252>
			}
		} else if (State == ST_PassInput) {
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d104      	bne.n	8002764 <MENU_HandleKeys+0x1d0>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 800275a:	f7ff fe05 	bl	8002368 <_WiFi_RequestConn>
			MENU_Clock();
 800275e:	f7ff fedb 	bl	8002518 <MENU_Clock>
 8002762:	e040      	b.n	80027e6 <MENU_HandleKeys+0x252>
		} else if (State == ST_SetDateTime) {
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d104      	bne.n	8002776 <MENU_HandleKeys+0x1e2>
			_CLK_ParseAndSetDateTime();
 800276c:	f7ff fc44 	bl	8001ff8 <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 8002770:	f7ff fed2 	bl	8002518 <MENU_Clock>
 8002774:	e037      	b.n	80027e6 <MENU_HandleKeys+0x252>
		} else if (State == ST_WiFi) {
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d133      	bne.n	80027e6 <MENU_HandleKeys+0x252>
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <MENU_HandleKeys+0x2c4>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d814      	bhi.n	80027b0 <MENU_HandleKeys+0x21c>
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <MENU_HandleKeys+0x2c4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4b35      	ldr	r3, [pc, #212]	; (8002864 <MENU_HandleKeys+0x2d0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	429a      	cmp	r2, r3
 8002794:	da0c      	bge.n	80027b0 <MENU_HandleKeys+0x21c>
				_optionsRow = LCD_CursorDown();
 8002796:	f7fe ffc3 	bl	8001720 <LCD_CursorDown>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <MENU_HandleKeys+0x2c4>)
 80027a0:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e01a      	b.n	80027e6 <MENU_HandleKeys+0x252>
			} else if (_networksIn > 4 && _currentOption != 4) {
 80027b0:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <MENU_HandleKeys+0x2d0>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d916      	bls.n	80027e6 <MENU_HandleKeys+0x252>
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d012      	beq.n	80027e6 <MENU_HandleKeys+0x252>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <MENU_HandleKeys+0x2d4>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	b2d9      	uxtb	r1, r3
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027ce:	7019      	strb	r1, [r3, #0]
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <MENU_HandleKeys+0x2c8>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3b04      	subs	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4610      	mov	r0, r2
 80027da:	f7ff f86f 	bl	80018bc <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 80027de:	2103      	movs	r1, #3
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fd43 	bl	800126c <LCD_SetCursor>
			}
		}

		LED_T(Green);
 80027e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ea:	4820      	ldr	r0, [pc, #128]	; (800286c <MENU_HandleKeys+0x2d8>)
 80027ec:	f003 fb4d 	bl	8005e8a <HAL_GPIO_TogglePin>
		return 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0c2      	b.n	800297a <MENU_HandleKeys+0x3e6>

	} Or (LEFT) {
 80027f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027f8:	4815      	ldr	r0, [pc, #84]	; (8002850 <MENU_HandleKeys+0x2bc>)
 80027fa:	f003 fb15 	bl	8005e28 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d052      	beq.n	80028aa <MENU_HandleKeys+0x316>
 8002804:	200a      	movs	r0, #10
 8002806:	f003 f81f 	bl	8005848 <HAL_Delay>
 800280a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280e:	4810      	ldr	r0, [pc, #64]	; (8002850 <MENU_HandleKeys+0x2bc>)
 8002810:	f003 fb0a 	bl	8005e28 <HAL_GPIO_ReadPin>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80ae 	beq.w	8002978 <MENU_HandleKeys+0x3e4>
 800281c:	bf00      	nop
 800281e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002822:	480b      	ldr	r0, [pc, #44]	; (8002850 <MENU_HandleKeys+0x2bc>)
 8002824:	f003 fb00 	bl	8005e28 <HAL_GPIO_ReadPin>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f7      	bne.n	800281e <MENU_HandleKeys+0x28a>
		if (State == ST_PassInput) {
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MENU_HandleKeys+0x2c0>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d11e      	bne.n	8002874 <MENU_HandleKeys+0x2e0>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <MENU_HandleKeys+0x2dc>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02e      	beq.n	800289c <MENU_HandleKeys+0x308>
				--_PWD_index;
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MENU_HandleKeys+0x2dc>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <MENU_HandleKeys+0x2dc>)
 8002848:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 800284a:	f7fe ff85 	bl	8001758 <LCD_CursorLeft>
 800284e:	e025      	b.n	800289c <MENU_HandleKeys+0x308>
 8002850:	40021000 	.word	0x40021000
 8002854:	20000b21 	.word	0x20000b21
 8002858:	200004b0 	.word	0x200004b0
 800285c:	200004b1 	.word	0x200004b1
 8002860:	20000000 	.word	0x20000000
 8002864:	200004e0 	.word	0x200004e0
 8002868:	200004b4 	.word	0x200004b4
 800286c:	40020c00 	.word	0x40020c00
 8002870:	200004f7 	.word	0x200004f7
			}
		} else if (State == ST_Options) {
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <MENU_HandleKeys+0x2ee>
			MENU_Clock();
 800287c:	f7ff fe4c 	bl	8002518 <MENU_Clock>
 8002880:	e00c      	b.n	800289c <MENU_HandleKeys+0x308>
		} else if (State == ST_SetDateTime) {
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d102      	bne.n	8002890 <MENU_HandleKeys+0x2fc>
			_CLK_MoveInputLeft();
 800288a:	f7ff fb55 	bl	8001f38 <_CLK_MoveInputLeft>
 800288e:	e005      	b.n	800289c <MENU_HandleKeys+0x308>
		} else if (State == ST_WiFi) {
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d101      	bne.n	800289c <MENU_HandleKeys+0x308>
			MENU_Options();
 8002898:	f7ff fcc6 	bl	8002228 <MENU_Options>
		}

		LED_T(Blue);
 800289c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a0:	4838      	ldr	r0, [pc, #224]	; (8002984 <MENU_HandleKeys+0x3f0>)
 80028a2:	f003 faf2 	bl	8005e8a <HAL_GPIO_TogglePin>
		return 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e067      	b.n	800297a <MENU_HandleKeys+0x3e6>

	} Or (RIGHT) {
 80028aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ae:	4836      	ldr	r0, [pc, #216]	; (8002988 <MENU_HandleKeys+0x3f4>)
 80028b0:	f003 faba 	bl	8005e28 <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d05e      	beq.n	8002978 <MENU_HandleKeys+0x3e4>
 80028ba:	200a      	movs	r0, #10
 80028bc:	f002 ffc4 	bl	8005848 <HAL_Delay>
 80028c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c4:	4830      	ldr	r0, [pc, #192]	; (8002988 <MENU_HandleKeys+0x3f4>)
 80028c6:	f003 faaf 	bl	8005e28 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d053      	beq.n	8002978 <MENU_HandleKeys+0x3e4>
 80028d0:	bf00      	nop
 80028d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d6:	482c      	ldr	r0, [pc, #176]	; (8002988 <MENU_HandleKeys+0x3f4>)
 80028d8:	f003 faa6 	bl	8005e28 <HAL_GPIO_ReadPin>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f7      	bne.n	80028d2 <MENU_HandleKeys+0x33e>
		if (State == ST_PassInput) {
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <MENU_HandleKeys+0x3ec>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d113      	bne.n	8002912 <MENU_HandleKeys+0x37e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <MENU_HandleKeys+0x3f8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <MENU_HandleKeys+0x3fc>)
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d038      	beq.n	800296a <MENU_HandleKeys+0x3d6>
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <MENU_HandleKeys+0x3f8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b26      	cmp	r3, #38	; 0x26
 80028fe:	d834      	bhi.n	800296a <MENU_HandleKeys+0x3d6>
				++_PWD_index;
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <MENU_HandleKeys+0x3f8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <MENU_HandleKeys+0x3f8>)
 800290a:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 800290c:	f7fe ff52 	bl	80017b4 <LCD_CursorRight>
 8002910:	e02b      	b.n	800296a <MENU_HandleKeys+0x3d6>
			}
		} else if (State == ST_Options) {
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11a      	bne.n	8002950 <MENU_HandleKeys+0x3bc>
			if (_currentOption == 1) {
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <MENU_HandleKeys+0x400>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <MENU_HandleKeys+0x394>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 8002922:	f7ff fd91 	bl	8002448 <MENU_OptionsWifiList>
 8002926:	e020      	b.n	800296a <MENU_HandleKeys+0x3d6>
			} else if (_currentOption == 2) {
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MENU_HandleKeys+0x400>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d104      	bne.n	800293a <MENU_HandleKeys+0x3a6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 8002930:	f000 faf6 	bl	8002f20 <NET_WiFiDisconnect>
				MENU_Clock();
 8002934:	f7ff fdf0 	bl	8002518 <MENU_Clock>
 8002938:	e017      	b.n	800296a <MENU_HandleKeys+0x3d6>

			} else if (_currentOption == 3) {
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <MENU_HandleKeys+0x400>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d013      	beq.n	800296a <MENU_HandleKeys+0x3d6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MENU_HandleKeys+0x400>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b04      	cmp	r3, #4
 8002948:	d10f      	bne.n	800296a <MENU_HandleKeys+0x3d6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 800294a:	f7ff fc95 	bl	8002278 <MENU_OptionsSetDateTime>
 800294e:	e00c      	b.n	800296a <MENU_HandleKeys+0x3d6>
			}
		} else if (State == ST_SetDateTime) {
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d102      	bne.n	800295e <MENU_HandleKeys+0x3ca>
			_CLK_MoveInputRight();
 8002958:	f7ff fa8e 	bl	8001e78 <_CLK_MoveInputRight>
 800295c:	e005      	b.n	800296a <MENU_HandleKeys+0x3d6>
		} else if (State == ST_WiFi) {
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <MENU_HandleKeys+0x3ec>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d101      	bne.n	800296a <MENU_HandleKeys+0x3d6>
			MENU_PasswdInput();
 8002966:	f7ff fc37 	bl	80021d8 <MENU_PasswdInput>
		}

		LED_T(Orange);
 800296a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MENU_HandleKeys+0x3f0>)
 8002970:	f003 fa8b 	bl	8005e8a <HAL_GPIO_TogglePin>
		return 1;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <MENU_HandleKeys+0x3e6>

	} IfEnd;
	return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000b21 	.word	0x20000b21
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	200004f7 	.word	0x200004f7
 8002990:	200004b8 	.word	0x200004b8
 8002994:	200004b1 	.word	0x200004b1

08002998 <_NET_ResetBuffer>:
extern UART_HandleTypeDef huart3;
extern ModeEnum Mode;

char _receive[RECEIVE_BUFFER_SIZE];

void _NET_ResetBuffer(void) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	e007      	b.n	80029b4 <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <_NET_ResetBuffer+0x30>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3301      	adds	r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ba:	dbf3      	blt.n	80029a4 <_NET_ResetBuffer+0xc>
	}
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	200004f8 	.word	0x200004f8

080029cc <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 80029d8:	f7ff ffde 	bl	8002998 <_NET_ResetBuffer>
	size_t len = strlen(command);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7fd fc01 	bl	80001e4 <strlen>
 80029e2:	6138      	str	r0, [r7, #16]

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	68f9      	ldr	r1, [r7, #12]
 80029ec:	481c      	ldr	r0, [pc, #112]	; (8002a60 <_NET_SendCommand+0x94>)
 80029ee:	f005 feac 	bl	800874a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 80029f2:	2301      	movs	r3, #1
 80029f4:	2202      	movs	r2, #2
 80029f6:	491b      	ldr	r1, [pc, #108]	; (8002a64 <_NET_SendCommand+0x98>)
 80029f8:	4819      	ldr	r0, [pc, #100]	; (8002a60 <_NET_SendCommand+0x94>)
 80029fa:	f005 fea6 	bl	800874a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a04:	4918      	ldr	r1, [pc, #96]	; (8002a68 <_NET_SendCommand+0x9c>)
 8002a06:	4816      	ldr	r0, [pc, #88]	; (8002a60 <_NET_SendCommand+0x94>)
 8002a08:	f005 ff38 	bl	800887c <HAL_UART_Receive>
			rTimeout);

	/* szukaj odpowiedzi 'OK\r\n' */
	for (int i = RECEIVE_BUFFER_SIZE; i >= 0; i--) {
 8002a0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e01c      	b.n	8002a4e <_NET_SendCommand+0x82>
		if (_receive[i] == '\n' && _receive[i - 1] == '\r'
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <_NET_SendCommand+0x9c>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b0a      	cmp	r3, #10
 8002a1e:	d113      	bne.n	8002a48 <_NET_SendCommand+0x7c>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <_NET_SendCommand+0x9c>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	2b0d      	cmp	r3, #13
 8002a2a:	d10d      	bne.n	8002a48 <_NET_SendCommand+0x7c>
				&& _receive[i - 2] == 'K' && _receive[i - 3] == 'O') {
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3b02      	subs	r3, #2
 8002a30:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <_NET_SendCommand+0x9c>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	2b4b      	cmp	r3, #75	; 0x4b
 8002a36:	d107      	bne.n	8002a48 <_NET_SendCommand+0x7c>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3b03      	subs	r3, #3
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <_NET_SendCommand+0x9c>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	2b4f      	cmp	r3, #79	; 0x4f
 8002a42:	d101      	bne.n	8002a48 <_NET_SendCommand+0x7c>
			return 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e006      	b.n	8002a56 <_NET_SendCommand+0x8a>
	for (int i = RECEIVE_BUFFER_SIZE; i >= 0; i--) {
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	dadf      	bge.n	8002a14 <_NET_SendCommand+0x48>
		}
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000aa0 	.word	0x20000aa0
 8002a64:	0800b900 	.word	0x0800b900
 8002a68:	200004f8 	.word	0x200004f8

08002a6c <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(AT_RESET, 1, 50) != 0)
 8002a70:	e002      	b.n	8002a78 <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f002 fee8 	bl	8005848 <HAL_Delay>
	while (_NET_SendCommand(AT_RESET, 1, 50) != 0)
 8002a78:	2232      	movs	r2, #50	; 0x32
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <_NET_SetClientDConnMode+0x3c>)
 8002a7e:	f7ff ffa5 	bl	80029cc <_NET_SendCommand>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f4      	bne.n	8002a72 <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(AT_SET_MODE(MODE_CLI), 5, 100) != 0)
 8002a88:	e002      	b.n	8002a90 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f002 fedc 	bl	8005848 <HAL_Delay>
	while (_NET_SendCommand(AT_SET_MODE(MODE_CLI), 5, 100) != 0)
 8002a90:	2264      	movs	r2, #100	; 0x64
 8002a92:	2105      	movs	r1, #5
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <_NET_SetClientDConnMode+0x40>)
 8002a96:	f7ff ff99 	bl	80029cc <_NET_SendCommand>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f4      	bne.n	8002a8a <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8002aa0:	f000 fa3e 	bl	8002f20 <NET_WiFiDisconnect>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	0800b904 	.word	0x0800b904
 8002aac:	0800b90c 	.word	0x0800b90c

08002ab0 <NET_Init>:

void NET_Init(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8002ab4:	f7ff ffda 	bl	8002a6c <_NET_SetClientDConnMode>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(AT_CLI_SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8002ac2:	f241 7270 	movw	r2, #6000	; 0x1770
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4894      	ldr	r0, [pc, #592]	; (8002d1c <NET_RequestNetworkList+0x260>)
 8002aca:	f7ff ff7f 	bl	80029cc <_NET_SendCommand>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 811e 	bne.w	8002d12 <NET_RequestNetworkList+0x256>
		int index = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	e0f8      	b.n	8002cd2 <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8002ae0:	4a8f      	ldr	r2, [pc, #572]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b28      	cmp	r3, #40	; 0x28
 8002aea:	f040 80e4 	bne.w	8002cb6 <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	60ba      	str	r2, [r7, #8]
 8002af4:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002af6:	2101      	movs	r1, #1
 8002af8:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 8002afa:	4a89      	ldr	r2, [pc, #548]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	3b30      	subs	r3, #48	; 0x30
 8002b04:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	f000 80e8 	beq.w	8002cde <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 8002b0e:	e005      	b.n	8002b1c <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	4a82      	ldr	r2, [pc, #520]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002b1c:	4a80      	ldr	r2, [pc, #512]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b22      	cmp	r3, #34	; 0x22
 8002b26:	d1f3      	bne.n	8002b10 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 8002b34:	e00e      	b.n	8002b54 <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	4978      	ldr	r1, [pc, #480]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	440a      	add	r2, r1
 8002b42:	7811      	ldrb	r1, [r2, #0]
 8002b44:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b46:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	60ba      	str	r2, [r7, #8]
 8002b4e:	4a74      	ldr	r2, [pc, #464]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002b54:	4a72      	ldr	r2, [pc, #456]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b22      	cmp	r3, #34	; 0x22
 8002b5e:	d1ea      	bne.n	8002b36 <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 8002b60:	e005      	b.n	8002b6e <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	60ba      	str	r2, [r7, #8]
 8002b68:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 8002b6e:	4a6c      	ldr	r2, [pc, #432]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b29      	cmp	r3, #41	; 0x29
 8002b78:	d1f3      	bne.n	8002b62 <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = '-';
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	60fa      	str	r2, [r7, #12]
 8002b80:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b82:	212d      	movs	r1, #45	; 0x2d
 8002b84:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d118      	bne.n	8002bca <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	60fa      	str	r2, [r7, #12]
 8002b9e:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002ba0:	214f      	movs	r1, #79	; 0x4f
 8002ba2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60fa      	str	r2, [r7, #12]
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bac:	2150      	movs	r1, #80	; 0x50
 8002bae:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60fa      	str	r2, [r7, #12]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bb8:	2145      	movs	r1, #69	; 0x45
 8002bba:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60fa      	str	r2, [r7, #12]
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bc4:	214e      	movs	r1, #78	; 0x4e
 8002bc6:	54d1      	strb	r1, [r2, r3]
 8002bc8:	e06e      	b.n	8002ca8 <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d118      	bne.n	8002c02 <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	60fa      	str	r2, [r7, #12]
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bd8:	2157      	movs	r1, #87	; 0x57
 8002bda:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	60fa      	str	r2, [r7, #12]
 8002be2:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002be4:	2145      	movs	r1, #69	; 0x45
 8002be6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60fa      	str	r2, [r7, #12]
 8002bee:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bf0:	2150      	movs	r1, #80	; 0x50
 8002bf2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	60fa      	str	r2, [r7, #12]
 8002bfa:	4a49      	ldr	r2, [pc, #292]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	54d1      	strb	r1, [r2, r3]
 8002c00:	e052      	b.n	8002ca8 <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d118      	bne.n	8002c3a <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	60fa      	str	r2, [r7, #12]
 8002c0e:	4a44      	ldr	r2, [pc, #272]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c10:	2157      	movs	r1, #87	; 0x57
 8002c12:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	60fa      	str	r2, [r7, #12]
 8002c1a:	4a41      	ldr	r2, [pc, #260]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c1c:	2150      	movs	r1, #80	; 0x50
 8002c1e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60fa      	str	r2, [r7, #12]
 8002c26:	4a3e      	ldr	r2, [pc, #248]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c28:	2141      	movs	r1, #65	; 0x41
 8002c2a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60fa      	str	r2, [r7, #12]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c34:	2120      	movs	r1, #32
 8002c36:	54d1      	strb	r1, [r2, r3]
 8002c38:	e036      	b.n	8002ca8 <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d118      	bne.n	8002c72 <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60fa      	str	r2, [r7, #12]
 8002c46:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c48:	2157      	movs	r1, #87	; 0x57
 8002c4a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	60fa      	str	r2, [r7, #12]
 8002c52:	4a33      	ldr	r2, [pc, #204]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	60fa      	str	r2, [r7, #12]
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c60:	2141      	movs	r1, #65	; 0x41
 8002c62:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60fa      	str	r2, [r7, #12]
 8002c6a:	4a2d      	ldr	r2, [pc, #180]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c6c:	2132      	movs	r1, #50	; 0x32
 8002c6e:	54d1      	strb	r1, [r2, r3]
 8002c70:	e01a      	b.n	8002ca8 <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d117      	bne.n	8002ca8 <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	60fa      	str	r2, [r7, #12]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c80:	214d      	movs	r1, #77	; 0x4d
 8002c82:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60fa      	str	r2, [r7, #12]
 8002c8a:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c8c:	2149      	movs	r1, #73	; 0x49
 8002c8e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	60fa      	str	r2, [r7, #12]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002c98:	2158      	movs	r1, #88	; 0x58
 8002c9a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	60fa      	str	r2, [r7, #12]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002ca4:	2144      	movs	r1, #68	; 0x44
 8002ca6:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	60fa      	str	r2, [r7, #12]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002cb0:	213b      	movs	r1, #59	; 0x3b
 8002cb2:	54d1      	strb	r1, [r2, r3]
				continue;
 8002cb4:	e00a      	b.n	8002ccc <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8002cc2:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cd8:	f6ff af02 	blt.w	8002ae0 <NET_RequestNetworkList+0x24>
 8002cdc:	e002      	b.n	8002ce4 <NET_RequestNetworkList+0x228>
					break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <NET_RequestNetworkList+0x228>
				break;
 8002ce2:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002ce4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	e007      	b.n	8002cfc <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	daf3      	bge.n	8002cec <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <NET_RequestNetworkList+0x252>
			return NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e002      	b.n	8002d14 <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <NET_RequestNetworkList+0x264>)
 8002d10:	e000      	b.n	8002d14 <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	0800b918 	.word	0x0800b918
 8002d20:	200004f8 	.word	0x200004f8

08002d24 <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	6018      	str	r0, [r3, #0]
 8002d30:	463b      	mov	r3, r7
 8002d32:	6019      	str	r1, [r3, #0]
	int ssidIndex = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	int cmdIndex = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	char cmd[RECEIVE_BUFFER_SIZE] = { 0 };
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4618      	mov	r0, r3
 8002d46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f006 fc6b 	bl	8009628 <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002d58:	e00e      	b.n	8002d78 <NET_ConnectToWiFi+0x54>
		while (_receive[ssidIndex++] != ';')
 8002d5a:	bf00      	nop
 8002d5c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <NET_ConnectToWiFi+0x138>)
 8002d68:	5cd3      	ldrb	r3, [r2, r3]
 8002d6a:	2b3b      	cmp	r3, #59	; 0x3b
 8002d6c:	d1f6      	bne.n	8002d5c <NET_ConnectToWiFi+0x38>
	for (int i = 0; i < network - 1; i++) {
 8002d6e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002d72:	3301      	adds	r3, #1
 8002d74:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002d78:	463b      	mov	r3, r7
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbe9      	blt.n	8002d5a <NET_ConnectToWiFi+0x36>
			;
	}

	strcpy(cmd, R_AT_CLI_CONN_TO);
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <NET_ConnectToWiFi+0x13c>)
 8002d8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8e:	c303      	stmia	r3!, {r0, r1}
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	3302      	adds	r3, #2
 8002d94:	0c12      	lsrs	r2, r2, #16
 8002d96:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(R_AT_CLI_CONN_TO);
 8002d98:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002d9c:	330a      	adds	r3, #10
 8002d9e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	for (int i = 0;; i++) {
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		if (_receive[ssidIndex] == '-') {
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <NET_ConnectToWiFi+0x138>)
 8002daa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b2d      	cmp	r3, #45	; 0x2d
 8002db4:	d014      	beq.n	8002de0 <NET_ConnectToWiFi+0xbc>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 8002db6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8002dba:	1c53      	adds	r3, r2, #1
 8002dbc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002dc0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8002dca:	4924      	ldr	r1, [pc, #144]	; (8002e5c <NET_ConnectToWiFi+0x138>)
 8002dcc:	5c89      	ldrb	r1, [r1, r2]
 8002dce:	f107 020c 	add.w	r2, r7, #12
 8002dd2:	54d1      	strb	r1, [r2, r3]
	for (int i = 0;; i++) {
 8002dd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
		if (_receive[ssidIndex] == '-') {
 8002dde:	e7e3      	b.n	8002da8 <NET_ConnectToWiFi+0x84>
			break;
 8002de0:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd f9fc 	bl	80001e4 <strlen>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461a      	mov	r2, r3
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	4413      	add	r3, r2
 8002df6:	4a1b      	ldr	r2, [pc, #108]	; (8002e64 <NET_ConnectToWiFi+0x140>)
 8002df8:	6810      	ldr	r0, [r2, #0]
 8002dfa:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	f107 020c 	add.w	r2, r7, #12
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	4610      	mov	r0, r2
 8002e06:	f007 f893 	bl	8009f30 <strcat>
	strcat(cmd, "\"");
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd f9e8 	bl	80001e4 <strlen>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4912      	ldr	r1, [pc, #72]	; (8002e68 <NET_ConnectToWiFi+0x144>)
 8002e20:	461a      	mov	r2, r3
 8002e22:	460b      	mov	r3, r1
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e30:	210a      	movs	r1, #10
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdca 	bl	80029cc <_NET_SendCommand>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <NET_ConnectToWiFi+0x124>
		Mode = MD_ClientConn;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <NET_ConnectToWiFi+0x148>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
		return 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e003      	b.n	8002e50 <NET_ConnectToWiFi+0x12c>
	}
	Mode = MD_LostHost;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <NET_ConnectToWiFi+0x148>)
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	701a      	strb	r2, [r3, #0]
	return 1;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200004f8 	.word	0x200004f8
 8002e60:	0800b924 	.word	0x0800b924
 8002e64:	0800b930 	.word	0x0800b930
 8002e68:	0800b934 	.word	0x0800b934
 8002e6c:	20000b20 	.word	0x20000b20

08002e70 <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost) && _NET_SendCommand(AT_CLI_SHOW_IP, 5, 50) == 0) {
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <NET_GetConnInfo+0xa0>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <NET_GetConnInfo+0x16>
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <NET_GetConnInfo+0xa0>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d13e      	bne.n	8002f04 <NET_GetConnInfo+0x94>
 8002e86:	2232      	movs	r2, #50	; 0x32
 8002e88:	2105      	movs	r1, #5
 8002e8a:	4822      	ldr	r0, [pc, #136]	; (8002f14 <NET_GetConnInfo+0xa4>)
 8002e8c:	f7ff fd9e 	bl	80029cc <_NET_SendCommand>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d136      	bne.n	8002f04 <NET_GetConnInfo+0x94>
		int cursor = 0, index = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
		while (_receive[cursor++] != '"')
 8002e9e:	bf00      	nop
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
 8002eaa:	2b22      	cmp	r3, #34	; 0x22
 8002eac:	d1f8      	bne.n	8002ea0 <NET_GetConnInfo+0x30>
			;
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 8002eae:	e009      	b.n	8002ec4 <NET_GetConnInfo+0x54>
			_receive[index++] = _receive[cursor++];
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	1c53      	adds	r3, r2, #1
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	1c59      	adds	r1, r3, #1
 8002eba:	6039      	str	r1, [r7, #0]
 8002ebc:	4916      	ldr	r1, [pc, #88]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002ebe:	5c89      	ldrb	r1, [r1, r2]
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002ec2:	54d1      	strb	r1, [r2, r3]
		while (_receive[cursor] != '"') {
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b22      	cmp	r3, #34	; 0x22
 8002ece:	d1ef      	bne.n	8002eb0 <NET_GetConnInfo+0x40>
		}
		_receive[index] = 0;
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
		if (index - 1 > 15) return NULL; /* to nie jest adres ip */
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	dd01      	ble.n	8002ee6 <NET_GetConnInfo+0x76>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e00f      	b.n	8002f06 <NET_GetConnInfo+0x96>
		Mode = MD_ClientConn;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <NET_GetConnInfo+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]

		if (strcmp("0.0.0.0", _receive) == 0) {
 8002eec:	490a      	ldr	r1, [pc, #40]	; (8002f18 <NET_GetConnInfo+0xa8>)
 8002eee:	480b      	ldr	r0, [pc, #44]	; (8002f1c <NET_GetConnInfo+0xac>)
 8002ef0:	f7fd f96e 	bl	80001d0 <strcmp>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <NET_GetConnInfo+0x94>
			Mode = MD_LostHost;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <NET_GetConnInfo+0xa0>)
 8002efc:	2203      	movs	r2, #3
 8002efe:	701a      	strb	r2, [r3, #0]
			return NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <NET_GetConnInfo+0x96>
		}
	}

	return (char*) _receive;
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <NET_GetConnInfo+0xa8>)
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000b20 	.word	0x20000b20
 8002f14:	0800b938 	.word	0x0800b938
 8002f18:	200004f8 	.word	0x200004f8
 8002f1c:	0800b944 	.word	0x0800b944

08002f20 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(AT_CLI_DISCONN, 5, 100) != 0)
 8002f24:	e002      	b.n	8002f2c <NET_WiFiDisconnect+0xc>
		HAL_Delay(1);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f002 fc8e 	bl	8005848 <HAL_Delay>
	while (_NET_SendCommand(AT_CLI_DISCONN, 5, 100) != 0)
 8002f2c:	2264      	movs	r2, #100	; 0x64
 8002f2e:	2105      	movs	r1, #5
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <NET_WiFiDisconnect+0x28>)
 8002f32:	f7ff fd4b 	bl	80029cc <_NET_SendCommand>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f4      	bne.n	8002f26 <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <NET_WiFiDisconnect+0x2c>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
	return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800b94c 	.word	0x0800b94c
 8002f4c:	20000b20 	.word	0x20000b20

08002f50 <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <RGB_Init+0x2c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <RGB_Init+0x30>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <RGB_Init+0x34>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
	_state = 0;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <RGB_Init+0x38>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <RGB_Init+0x3c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	200006f4 	.word	0x200006f4
 8002f80:	200006ec 	.word	0x200006ec
 8002f84:	200006f8 	.word	0x200006f8
 8002f88:	200006f0 	.word	0x200006f0
 8002f8c:	200006fc 	.word	0x200006fc

08002f90 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <_RGB_UpdateRegisters+0x80>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9c:	d303      	bcc.n	8002fa6 <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <_RGB_UpdateRegisters+0x80>)
 8002fa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fa4:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <_RGB_UpdateRegisters+0x84>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fae:	d303      	bcc.n	8002fb8 <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <_RGB_UpdateRegisters+0x84>)
 8002fb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fb6:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <_RGB_UpdateRegisters+0x88>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc0:	d303      	bcc.n	8002fca <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <_RGB_UpdateRegisters+0x88>)
 8002fc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fc8:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 8002fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <_RGB_UpdateRegisters+0x80>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8002fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <_RGB_UpdateRegisters+0x84>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8002fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <_RGB_UpdateRegisters+0x88>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <_RGB_UpdateRegisters+0x8c>)
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <_RGB_UpdateRegisters+0x8c>)
 8002ff2:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <_RGB_UpdateRegisters+0x8c>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8002ffc:	d902      	bls.n	8003004 <_RGB_UpdateRegisters+0x74>
		_state = 0;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_RGB_UpdateRegisters+0x8c>)
 8003000:	2200      	movs	r2, #0
 8003002:	801a      	strh	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	200006f4 	.word	0x200006f4
 8003014:	200006ec 	.word	0x200006ec
 8003018:	200006f8 	.word	0x200006f8
 800301c:	200006f0 	.word	0x200006f0

08003020 <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <_RGB_SetWhite+0x2c>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <_RGB_SetWhite+0x30>)
 800302c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003030:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <_RGB_SetWhite+0x34>)
 8003034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003038:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <_RGB_SetWhite+0x38>)
 800303c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003040:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003042:	f7ff ffa5 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200006fc 	.word	0x200006fc
 8003050:	200006f4 	.word	0x200006f4
 8003054:	200006ec 	.word	0x200006ec
 8003058:	200006f8 	.word	0x200006f8

0800305c <_RGB_SetRed>:

void _RGB_SetRed(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_RGB_SetRed+0x28>)
 8003062:	2202      	movs	r2, #2
 8003064:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <_RGB_SetRed+0x2c>)
 8003068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800306c:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <_RGB_SetRed+0x30>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <_RGB_SetRed+0x34>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800307a:	f7ff ff89 	bl	8002f90 <_RGB_UpdateRegisters>
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200006fc 	.word	0x200006fc
 8003088:	200006f4 	.word	0x200006f4
 800308c:	200006ec 	.word	0x200006ec
 8003090:	200006f8 	.word	0x200006f8

08003094 <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <_RGB_SetGreen+0x28>)
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <_RGB_SetGreen+0x2c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <_RGB_SetGreen+0x30>)
 80030a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030aa:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <_RGB_SetGreen+0x34>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80030b2:	f7ff ff6d 	bl	8002f90 <_RGB_UpdateRegisters>
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200006fc 	.word	0x200006fc
 80030c0:	200006f4 	.word	0x200006f4
 80030c4:	200006ec 	.word	0x200006ec
 80030c8:	200006f8 	.word	0x200006f8

080030cc <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <_RGB_SetBlue+0x28>)
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <_RGB_SetBlue+0x2c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <_RGB_SetBlue+0x30>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <_RGB_SetBlue+0x34>)
 80030e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030e8:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80030ea:	f7ff ff51 	bl	8002f90 <_RGB_UpdateRegisters>
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200006fc 	.word	0x200006fc
 80030f8:	200006f4 	.word	0x200006f4
 80030fc:	200006ec 	.word	0x200006ec
 8003100:	200006f8 	.word	0x200006f8

08003104 <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <_RGB_SetBlack+0x24>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <_RGB_SetBlack+0x28>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <_RGB_SetBlack+0x2c>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <_RGB_SetBlack+0x30>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003120:	f7ff ff36 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200006fc 	.word	0x200006fc
 800312c:	200006f4 	.word	0x200006f4
 8003130:	200006ec 	.word	0x200006ec
 8003134:	200006f8 	.word	0x200006f8

08003138 <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 800313c:	4b41      	ldr	r3, [pc, #260]	; (8003244 <_RGB_Rainbow+0x10c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b09      	cmp	r3, #9
 8003142:	d002      	beq.n	800314a <_RGB_Rainbow+0x12>
		_state = 0;
 8003144:	4b40      	ldr	r3, [pc, #256]	; (8003248 <_RGB_Rainbow+0x110>)
 8003146:	2200      	movs	r2, #0
 8003148:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <_RGB_Rainbow+0x10c>)
 800314c:	2209      	movs	r2, #9
 800314e:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 8003150:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <_RGB_Rainbow+0x110>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f240 124d 	movw	r2, #333	; 0x14d
 8003158:	4293      	cmp	r3, r2
 800315a:	d010      	beq.n	800317e <_RGB_Rainbow+0x46>
 800315c:	f240 229a 	movw	r2, #666	; 0x29a
 8003160:	4293      	cmp	r3, r2
 8003162:	d017      	beq.n	8003194 <_RGB_Rainbow+0x5c>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d120      	bne.n	80031aa <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <_RGB_Rainbow+0x114>)
 800316a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800316e:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003170:	4b37      	ldr	r3, [pc, #220]	; (8003250 <_RGB_Rainbow+0x118>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <_RGB_Rainbow+0x11c>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
		break;
 800317c:	e05e      	b.n	800323c <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 800317e:	4b33      	ldr	r3, [pc, #204]	; (800324c <_RGB_Rainbow+0x114>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <_RGB_Rainbow+0x118>)
 8003186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800318a:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <_RGB_Rainbow+0x11c>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
		break;
 8003192:	e053      	b.n	800323c <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <_RGB_Rainbow+0x114>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <_RGB_Rainbow+0x118>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 80031a0:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <_RGB_Rainbow+0x11c>)
 80031a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a6:	601a      	str	r2, [r3, #0]
		break;
 80031a8:	e048      	b.n	800323c <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <_RGB_Rainbow+0x110>)
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <_RGB_Rainbow+0xa0>
 80031b2:	4b25      	ldr	r3, [pc, #148]	; (8003248 <_RGB_Rainbow+0x110>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 80031ba:	d80d      	bhi.n	80031d8 <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <_RGB_Rainbow+0x114>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	4a22      	ldr	r2, [pc, #136]	; (800324c <_RGB_Rainbow+0x114>)
 80031c4:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <_RGB_Rainbow+0x118>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3303      	adds	r3, #3
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <_RGB_Rainbow+0x118>)
 80031ce:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <_RGB_Rainbow+0x11c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e031      	b.n	800323c <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <_RGB_Rainbow+0x110>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 80031e0:	d313      	bcc.n	800320a <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <_RGB_Rainbow+0x110>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	f240 2299 	movw	r2, #665	; 0x299
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d80d      	bhi.n	800320a <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <_RGB_Rainbow+0x114>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <_RGB_Rainbow+0x118>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <_RGB_Rainbow+0x118>)
 80031fc:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <_RGB_Rainbow+0x11c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3303      	adds	r3, #3
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <_RGB_Rainbow+0x11c>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e018      	b.n	800323c <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <_RGB_Rainbow+0x110>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	f240 229a 	movw	r2, #666	; 0x29a
 8003212:	4293      	cmp	r3, r2
 8003214:	d912      	bls.n	800323c <_RGB_Rainbow+0x104>
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <_RGB_Rainbow+0x110>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800321e:	4293      	cmp	r3, r2
 8003220:	d80c      	bhi.n	800323c <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <_RGB_Rainbow+0x114>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3303      	adds	r3, #3
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <_RGB_Rainbow+0x114>)
 800322a:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <_RGB_Rainbow+0x118>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <_RGB_Rainbow+0x11c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3b03      	subs	r3, #3
 8003238:	4a06      	ldr	r2, [pc, #24]	; (8003254 <_RGB_Rainbow+0x11c>)
 800323a:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 800323c:	f7ff fea8 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200006fc 	.word	0x200006fc
 8003248:	200006f0 	.word	0x200006f0
 800324c:	200006f4 	.word	0x200006f4
 8003250:	200006ec 	.word	0x200006ec
 8003254:	200006f8 	.word	0x200006f8

08003258 <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <_RGB_BlinkRed+0x5c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d002      	beq.n	800326a <_RGB_BlinkRed+0x12>
		_state = 0;
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <_RGB_BlinkRed+0x60>)
 8003266:	2200      	movs	r2, #0
 8003268:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <_RGB_BlinkRed+0x5c>)
 800326c:	2206      	movs	r2, #6
 800326e:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <_RGB_BlinkRed+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <_RGB_BlinkRed+0x68>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <_RGB_BlinkRed+0x60>)
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d103      	bne.n	800328c <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <_RGB_BlinkRed+0x6c>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00f      	b.n	80032ac <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <_RGB_BlinkRed+0x60>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003294:	d805      	bhi.n	80032a2 <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <_RGB_BlinkRed+0x6c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3302      	adds	r3, #2
 800329c:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <_RGB_BlinkRed+0x6c>)
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e004      	b.n	80032ac <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <_RGB_BlinkRed+0x6c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3b02      	subs	r3, #2
 80032a8:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <_RGB_BlinkRed+0x6c>)
 80032aa:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80032ac:	f7ff fe70 	bl	8002f90 <_RGB_UpdateRegisters>
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200006fc 	.word	0x200006fc
 80032b8:	200006f0 	.word	0x200006f0
 80032bc:	200006ec 	.word	0x200006ec
 80032c0:	200006f8 	.word	0x200006f8
 80032c4:	200006f4 	.word	0x200006f4

080032c8 <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <_RGB_BlinkGreen+0x5c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b07      	cmp	r3, #7
 80032d2:	d002      	beq.n	80032da <_RGB_BlinkGreen+0x12>
		_state = 0;
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <_RGB_BlinkGreen+0x60>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <_RGB_BlinkGreen+0x5c>)
 80032dc:	2207      	movs	r2, #7
 80032de:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <_RGB_BlinkGreen+0x64>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <_RGB_BlinkGreen+0x68>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <_RGB_BlinkGreen+0x60>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <_RGB_BlinkGreen+0x6c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e00f      	b.n	800331c <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <_RGB_BlinkGreen+0x60>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003304:	d805      	bhi.n	8003312 <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <_RGB_BlinkGreen+0x6c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3302      	adds	r3, #2
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <_RGB_BlinkGreen+0x6c>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e004      	b.n	800331c <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <_RGB_BlinkGreen+0x6c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b02      	subs	r3, #2
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <_RGB_BlinkGreen+0x6c>)
 800331a:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 800331c:	f7ff fe38 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200006fc 	.word	0x200006fc
 8003328:	200006f0 	.word	0x200006f0
 800332c:	200006f4 	.word	0x200006f4
 8003330:	200006f8 	.word	0x200006f8
 8003334:	200006ec 	.word	0x200006ec

08003338 <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <_RGB_BlinkBlue+0x5c>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d002      	beq.n	800334a <_RGB_BlinkBlue+0x12>
		_state = 0;
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <_RGB_BlinkBlue+0x60>)
 8003346:	2200      	movs	r2, #0
 8003348:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <_RGB_BlinkBlue+0x5c>)
 800334c:	2208      	movs	r2, #8
 800334e:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <_RGB_BlinkBlue+0x64>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <_RGB_BlinkBlue+0x68>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <_RGB_BlinkBlue+0x60>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <_RGB_BlinkBlue+0x6c>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e00f      	b.n	800338c <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <_RGB_BlinkBlue+0x60>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003374:	d805      	bhi.n	8003382 <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <_RGB_BlinkBlue+0x6c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3302      	adds	r3, #2
 800337c:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <_RGB_BlinkBlue+0x6c>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e004      	b.n	800338c <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <_RGB_BlinkBlue+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b02      	subs	r3, #2
 8003388:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <_RGB_BlinkBlue+0x6c>)
 800338a:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 800338c:	f7ff fe00 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200006fc 	.word	0x200006fc
 8003398:	200006f0 	.word	0x200006f0
 800339c:	200006f4 	.word	0x200006f4
 80033a0:	200006ec 	.word	0x200006ec
 80033a4:	200006f8 	.word	0x200006f8

080033a8 <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <_RGB_BlinkWhite+0x84>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d002      	beq.n	80033ba <_RGB_BlinkWhite+0x12>
		_state = 0;
 80033b4:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <_RGB_BlinkWhite+0x88>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <_RGB_BlinkWhite+0x84>)
 80033bc:	2205      	movs	r2, #5
 80033be:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 80033c0:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <_RGB_BlinkWhite+0x88>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <_RGB_BlinkWhite+0x8c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <_RGB_BlinkWhite+0x90>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <_RGB_BlinkWhite+0x94>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e023      	b.n	8003424 <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <_RGB_BlinkWhite+0x88>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80033e4:	d80f      	bhi.n	8003406 <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <_RGB_BlinkWhite+0x8c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3302      	adds	r3, #2
 80033ec:	4a11      	ldr	r2, [pc, #68]	; (8003434 <_RGB_BlinkWhite+0x8c>)
 80033ee:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <_RGB_BlinkWhite+0x90>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3302      	adds	r3, #2
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <_RGB_BlinkWhite+0x90>)
 80033f8:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <_RGB_BlinkWhite+0x94>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3302      	adds	r3, #2
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <_RGB_BlinkWhite+0x94>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e00e      	b.n	8003424 <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <_RGB_BlinkWhite+0x8c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3b02      	subs	r3, #2
 800340c:	4a09      	ldr	r2, [pc, #36]	; (8003434 <_RGB_BlinkWhite+0x8c>)
 800340e:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <_RGB_BlinkWhite+0x90>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3b02      	subs	r3, #2
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <_RGB_BlinkWhite+0x90>)
 8003418:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <_RGB_BlinkWhite+0x94>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3b02      	subs	r3, #2
 8003420:	4a06      	ldr	r2, [pc, #24]	; (800343c <_RGB_BlinkWhite+0x94>)
 8003422:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003424:	f7ff fdb4 	bl	8002f90 <_RGB_UpdateRegisters>
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200006fc 	.word	0x200006fc
 8003430:	200006f0 	.word	0x200006f0
 8003434:	200006f4 	.word	0x200006f4
 8003438:	200006ec 	.word	0x200006ec
 800343c:	200006f8 	.word	0x200006f8

08003440 <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2b09      	cmp	r3, #9
 800344e:	d835      	bhi.n	80034bc <RGB_SetMode+0x7c>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <RGB_SetMode+0x18>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003481 	.word	0x08003481
 800345c:	08003487 	.word	0x08003487
 8003460:	0800348d 	.word	0x0800348d
 8003464:	08003493 	.word	0x08003493
 8003468:	08003499 	.word	0x08003499
 800346c:	080034b1 	.word	0x080034b1
 8003470:	0800349f 	.word	0x0800349f
 8003474:	080034a5 	.word	0x080034a5
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034b7 	.word	0x080034b7
	case RGB_Disabled:
		_RGB_SetBlack();
 8003480:	f7ff fe40 	bl	8003104 <_RGB_SetBlack>
		break;
 8003484:	e01a      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 8003486:	f7ff fdcb 	bl	8003020 <_RGB_SetWhite>
		break;
 800348a:	e017      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 800348c:	f7ff fde6 	bl	800305c <_RGB_SetRed>
		break;
 8003490:	e014      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 8003492:	f7ff fdff 	bl	8003094 <_RGB_SetGreen>
		break;
 8003496:	e011      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 8003498:	f7ff fe18 	bl	80030cc <_RGB_SetBlue>
		break;
 800349c:	e00e      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 800349e:	f7ff fedb 	bl	8003258 <_RGB_BlinkRed>
		break;
 80034a2:	e00b      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 80034a4:	f7ff ff10 	bl	80032c8 <_RGB_BlinkGreen>
		break;
 80034a8:	e008      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 80034aa:	f7ff ff45 	bl	8003338 <_RGB_BlinkBlue>
		break;
 80034ae:	e005      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 80034b0:	f7ff ff7a 	bl	80033a8 <_RGB_BlinkWhite>
		break;
 80034b4:	e002      	b.n	80034bc <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 80034b6:	f7ff fe3f 	bl	8003138 <_RGB_Rainbow>
		break;
 80034ba:	bf00      	nop
	}
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <SD_Init>:

uint8_t _buffer[256]; //bufor odczytu i zapisu
uint16_t _bytesWritten; //liczba zapisanych byte
uint16_t _bytesRead;

void SD_Init(void) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
	f_mount(&_ffHandle, "", 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	4904      	ldr	r1, [pc, #16]	; (80034dc <SD_Init+0x18>)
 80034cc:	4804      	ldr	r0, [pc, #16]	; (80034e0 <SD_Init+0x1c>)
 80034ce:	f001 fadd 	bl	8004a8c <f_mount>

	SD_RefreshDateTime();
 80034d2:	f000 f837 	bl	8003544 <SD_RefreshDateTime>
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	0800b958 	.word	0x0800b958
 80034e0:	20000254 	.word	0x20000254

080034e4 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 800350e:	2200      	movs	r2, #0
 8003510:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <_SD_ClearDateTimeRegisters+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <_SD_ClearDateTimeRegisters+0x5c>)
 800351a:	2200      	movs	r2, #0
 800351c:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_SD_ClearDateTimeRegisters+0x5c>)
 8003520:	2200      	movs	r2, #0
 8003522:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <_SD_ClearDateTimeRegisters+0x5c>)
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <_SD_ClearDateTimeRegisters+0x5c>)
 800352c:	2200      	movs	r2, #0
 800352e:	70da      	strb	r2, [r3, #3]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000a3c 	.word	0x20000a3c
 8003540:	20000934 	.word	0x20000934

08003544 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8003548:	f7ff ffcc 	bl	80034e4 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 800354c:	2201      	movs	r2, #1
 800354e:	4938      	ldr	r1, [pc, #224]	; (8003630 <SD_RefreshDateTime+0xec>)
 8003550:	4838      	ldr	r0, [pc, #224]	; (8003634 <SD_RefreshDateTime+0xf0>)
 8003552:	f003 fb5f 	bl	8006c14 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003556:	2201      	movs	r2, #1
 8003558:	4937      	ldr	r1, [pc, #220]	; (8003638 <SD_RefreshDateTime+0xf4>)
 800355a:	4836      	ldr	r0, [pc, #216]	; (8003634 <SD_RefreshDateTime+0xf0>)
 800355c:	f003 fc5f 	bl	8006e1e <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 8003560:	4b33      	ldr	r3, [pc, #204]	; (8003630 <SD_RefreshDateTime+0xec>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3330      	adds	r3, #48	; 0x30
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b33      	ldr	r3, [pc, #204]	; (800363c <SD_RefreshDateTime+0xf8>)
 800356e:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 8003570:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <SD_RefreshDateTime+0xec>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3330      	adds	r3, #48	; 0x30
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <SD_RefreshDateTime+0xf8>)
 8003580:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <SD_RefreshDateTime+0xec>)
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3330      	adds	r3, #48	; 0x30
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <SD_RefreshDateTime+0xf8>)
 8003590:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <SD_RefreshDateTime+0xec>)
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3330      	adds	r3, #48	; 0x30
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035a2:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <SD_RefreshDateTime+0xec>)
 80035a6:	789b      	ldrb	r3, [r3, #2]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	3330      	adds	r3, #48	; 0x30
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035b2:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <SD_RefreshDateTime+0xec>)
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3330      	adds	r3, #48	; 0x30
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035c4:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <SD_RefreshDateTime+0xf4>)
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	3330      	adds	r3, #48	; 0x30
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035d4:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <SD_RefreshDateTime+0xf4>)
 80035d8:	789b      	ldrb	r3, [r3, #2]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	3330      	adds	r3, #48	; 0x30
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	4b15      	ldr	r3, [pc, #84]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035e6:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 80035e8:	4b13      	ldr	r3, [pc, #76]	; (8003638 <SD_RefreshDateTime+0xf4>)
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3330      	adds	r3, #48	; 0x30
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <SD_RefreshDateTime+0xf8>)
 80035f6:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <SD_RefreshDateTime+0xf4>)
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3330      	adds	r3, #48	; 0x30
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <SD_RefreshDateTime+0xf8>)
 8003608:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <SD_RefreshDateTime+0xf4>)
 800360c:	78db      	ldrb	r3, [r3, #3]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3330      	adds	r3, #48	; 0x30
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <SD_RefreshDateTime+0xf8>)
 8003618:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <SD_RefreshDateTime+0xf4>)
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3330      	adds	r3, #48	; 0x30
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <SD_RefreshDateTime+0xf8>)
 800362a:	715a      	strb	r2, [r3, #5]
}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000a3c 	.word	0x20000a3c
 8003634:	20000b24 	.word	0x20000b24
 8003638:	20000934 	.word	0x20000934
 800363c:	20000700 	.word	0x20000700

08003640 <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af04      	add	r7, sp, #16
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <SD_GetDateTime+0x80>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461c      	mov	r4, r3
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <SD_GetDateTime+0x80>)
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <SD_GetDateTime+0x80>)
 8003658:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 800365a:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 800365c:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <SD_GetDateTime+0x80>)
 800365e:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003660:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <SD_GetDateTime+0x80>)
 8003664:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003666:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <SD_GetDateTime+0x80>)
 800366a:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 800366c:	9303      	str	r3, [sp, #12]
 800366e:	9002      	str	r0, [sp, #8]
 8003670:	9101      	str	r1, [sp, #4]
 8003672:	9200      	str	r2, [sp, #0]
 8003674:	462b      	mov	r3, r5
 8003676:	4622      	mov	r2, r4
 8003678:	4912      	ldr	r1, [pc, #72]	; (80036c4 <SD_GetDateTime+0x84>)
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f006 fc38 	bl	8009ef0 <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <SD_GetDateTime+0x80>)
 8003682:	799b      	ldrb	r3, [r3, #6]
 8003684:	461c      	mov	r4, r3
 8003686:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <SD_GetDateTime+0x80>)
 8003688:	79db      	ldrb	r3, [r3, #7]
 800368a:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 800368c:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <SD_GetDateTime+0x80>)
 800368e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003690:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <SD_GetDateTime+0x80>)
 8003694:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003696:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <SD_GetDateTime+0x80>)
 800369a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 800369c:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <SD_GetDateTime+0x80>)
 80036a0:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 80036a2:	9303      	str	r3, [sp, #12]
 80036a4:	9002      	str	r0, [sp, #8]
 80036a6:	9101      	str	r1, [sp, #4]
 80036a8:	9200      	str	r2, [sp, #0]
 80036aa:	462b      	mov	r3, r5
 80036ac:	4622      	mov	r2, r4
 80036ae:	4906      	ldr	r1, [pc, #24]	; (80036c8 <SD_GetDateTime+0x88>)
 80036b0:	6838      	ldr	r0, [r7, #0]
 80036b2:	f006 fc1d 	bl	8009ef0 <siprintf>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bdb0      	pop	{r4, r5, r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000700 	.word	0x20000700
 80036c4:	0800b95c 	.word	0x0800b95c
 80036c8:	0800b96c 	.word	0x0800b96c

080036cc <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 80036d6:	f7ff ff05 	bl	80034e4 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3301      	adds	r3, #1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <SD_SetDateTime+0xb8>)
 80036ee:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3302      	adds	r3, #2
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3303      	adds	r3, #3
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4413      	add	r3, r2
 8003702:	b2da      	uxtb	r2, r3
 8003704:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <SD_SetDateTime+0xb8>)
 8003706:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	b2da      	uxtb	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3305      	adds	r3, #5
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4413      	add	r3, r2
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <SD_SetDateTime+0xb8>)
 800371e:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	b2da      	uxtb	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <SD_SetDateTime+0xbc>)
 8003734:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	3302      	adds	r3, #2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	3303      	adds	r3, #3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <SD_SetDateTime+0xbc>)
 800374c:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	b2da      	uxtb	r2, r3
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	3305      	adds	r3, #5
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <SD_SetDateTime+0xbc>)
 8003764:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003766:	2201      	movs	r2, #1
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <SD_SetDateTime+0xbc>)
 800376a:	4808      	ldr	r0, [pc, #32]	; (800378c <SD_SetDateTime+0xc0>)
 800376c:	f003 f995 	bl	8006a9a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003770:	2201      	movs	r2, #1
 8003772:	4904      	ldr	r1, [pc, #16]	; (8003784 <SD_SetDateTime+0xb8>)
 8003774:	4805      	ldr	r0, [pc, #20]	; (800378c <SD_SetDateTime+0xc0>)
 8003776:	f003 faab 	bl	8006cd0 <HAL_RTC_SetDate>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000934 	.word	0x20000934
 8003788:	20000a3c 	.word	0x20000a3c
 800378c:	20000b24 	.word	0x20000b24

08003790 <THS_Init>:

bool _ready;
uint8_t _data[5];
uint32_t _clockCounter;

void THS_Init() {
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <THS_Init+0x1c>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

	_ready = true;
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <THS_Init+0x20>)
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000a58 	.word	0x20000a58
 80037b0:	20000a54 	.word	0x20000a54

080037b4 <THS_Delay>:

void THS_Delay(uint16_t micros) {
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <THS_Delay+0x2c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 80037c6:	bf00      	nop
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <THS_Delay+0x2c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3f9      	bcc.n	80037c8 <THS_Delay+0x14>
		;
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000a60 	.word	0x20000a60

080037e4 <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003802:	2301      	movs	r3, #1
 8003804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 800380a:	f107 030c 	add.w	r3, r7, #12
 800380e:	4619      	mov	r1, r3
 8003810:	4803      	ldr	r0, [pc, #12]	; (8003820 <_THS_SetPinOutput+0x3c>)
 8003812:	f002 f96f 	bl	8005af4 <HAL_GPIO_Init>
}
 8003816:	bf00      	nop
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40020800 	.word	0x40020800

08003824 <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	4619      	mov	r1, r3
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <_THS_SetPinInput+0x3c>)
 8003852:	f002 f94f 	bl	8005af4 <HAL_GPIO_Init>
}
 8003856:	bf00      	nop
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40020800 	.word	0x40020800

08003864 <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <_THS_InitConn+0x9c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <_THS_InitConn+0x1c>
		return 0;
 800387c:	2300      	movs	r3, #0
 800387e:	e03b      	b.n	80038f8 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ffae 	bl	80037e4 <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	2200      	movs	r2, #0
 800388c:	4619      	mov	r1, r3
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <_THS_InitConn+0xa0>)
 8003890:	f002 fae2 	bl	8005e58 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8003894:	2012      	movs	r0, #18
 8003896:	f001 ffd7 	bl	8005848 <HAL_Delay>
	Write(1);
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2201      	movs	r2, #1
 800389e:	4619      	mov	r1, r3
 80038a0:	4818      	ldr	r0, [pc, #96]	; (8003904 <_THS_InitConn+0xa0>)
 80038a2:	f002 fad9 	bl	8005e58 <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 80038a6:	2014      	movs	r0, #20
 80038a8:	f7ff ff84 	bl	80037b4 <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ffb8 	bl	8003824 <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 80038b4:	2028      	movs	r0, #40	; 0x28
 80038b6:	f7ff ff7d 	bl	80037b4 <THS_Delay>

	if (!Read()) {
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	4619      	mov	r1, r3
 80038be:	4811      	ldr	r0, [pc, #68]	; (8003904 <_THS_InitConn+0xa0>)
 80038c0:	f002 fab2 	bl	8005e28 <HAL_GPIO_ReadPin>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 80038ca:	2050      	movs	r0, #80	; 0x50
 80038cc:	f7ff ff72 	bl	80037b4 <THS_Delay>
		if (!Read()) {
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	4619      	mov	r1, r3
 80038d4:	480b      	ldr	r0, [pc, #44]	; (8003904 <_THS_InitConn+0xa0>)
 80038d6:	f002 faa7 	bl	8005e28 <HAL_GPIO_ReadPin>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e009      	b.n	80038f8 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 80038e4:	bf00      	nop
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	4619      	mov	r1, r3
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <_THS_InitConn+0xa0>)
 80038ec:	f002 fa9c 	bl	8005e28 <HAL_GPIO_ReadPin>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d0f7      	beq.n	80038e6 <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 80038f6:	2301      	movs	r3, #1
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000a54 	.word	0x20000a54
 8003904:	40020800 	.word	0x40020800

08003908 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8003916:	2300      	movs	r3, #0
 8003918:	73bb      	strb	r3, [r7, #14]
 800391a:	e02f      	b.n	800397c <_THS_ReadByte+0x74>
		_clockCounter = 0;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <_THS_ReadByte+0x84>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8003922:	e005      	b.n	8003930 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <_THS_ReadByte+0x84>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2bc8      	cmp	r3, #200	; 0xc8
 800392a:	d901      	bls.n	8003930 <_THS_ReadByte+0x28>
				return 255;
 800392c:	23ff      	movs	r3, #255	; 0xff
 800392e:	e029      	b.n	8003984 <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	4619      	mov	r1, r3
 8003934:	4816      	ldr	r0, [pc, #88]	; (8003990 <_THS_ReadByte+0x88>)
 8003936:	f002 fa77 	bl	8005e28 <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f1      	beq.n	8003924 <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8003940:	203c      	movs	r0, #60	; 0x3c
 8003942:	f7ff ff37 	bl	80037b4 <THS_Delay>

		byte <<= 1;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	4619      	mov	r1, r3
 8003950:	480f      	ldr	r0, [pc, #60]	; (8003990 <_THS_ReadByte+0x88>)
 8003952:	f002 fa69 	bl	8005e28 <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8003964:	bf00      	nop
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	4619      	mov	r1, r3
 800396a:	4809      	ldr	r0, [pc, #36]	; (8003990 <_THS_ReadByte+0x88>)
 800396c:	f002 fa5c 	bl	8005e28 <HAL_GPIO_ReadPin>
 8003970:	4603      	mov	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d0f7      	beq.n	8003966 <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	3301      	adds	r3, #1
 800397a:	73bb      	strb	r3, [r7, #14]
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	2b07      	cmp	r3, #7
 8003980:	d9cc      	bls.n	800391c <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000a58 	.word	0x20000a58
 8003990:	40020800 	.word	0x40020800

08003994 <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	460a      	mov	r2, r1
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	4613      	mov	r3, r2
 80039a2:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	f1a3 020a 	sub.w	r2, r3, #10
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dc06      	bgt.n	80039be <_THS_CCR_Acceptable+0x2a>
 80039b0:	79fa      	ldrb	r2, [r7, #7]
 80039b2:	79bb      	ldrb	r3, [r7, #6]
 80039b4:	330a      	adds	r3, #10
 80039b6:	429a      	cmp	r2, r3
 80039b8:	dc01      	bgt.n	80039be <_THS_CCR_Acceptable+0x2a>
		return 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <_THS_CCR_Acceptable+0x2c>
	return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	6039      	str	r1, [r7, #0]
 80039d6:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <THS_ReadData+0x16>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <THS_ReadData+0x18>
 80039e2:	2302      	movs	r3, #2
 80039e4:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 80039e6:	8bfb      	ldrh	r3, [r7, #30]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff3b 	bl	8003864 <_THS_InitConn>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <THS_ReadData+0x2c>
		return 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e091      	b.n	8003b1c <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 80039f8:	8bfb      	ldrh	r3, [r7, #30]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff84 	bl	8003908 <_THS_ReadByte>
 8003a00:	4603      	mov	r3, r0
 8003a02:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 8003a04:	8bfb      	ldrh	r3, [r7, #30]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff7e 	bl	8003908 <_THS_ReadByte>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 8003a10:	8bfb      	ldrh	r3, [r7, #30]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff78 	bl	8003908 <_THS_ReadByte>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 8003a1c:	8bfb      	ldrh	r3, [r7, #30]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff72 	bl	8003908 <_THS_ReadByte>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 8003a28:	8bfb      	ldrh	r3, [r7, #30]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff6c 	bl	8003908 <_THS_ReadByte>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 8003a34:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <THS_ReadData+0x158>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 8003a3a:	8bbb      	ldrh	r3, [r7, #28]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	7efb      	ldrb	r3, [r7, #27]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	b25a      	sxtb	r2, r3
 8003a46:	8b3b      	ldrh	r3, [r7, #24]
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b25a      	sxtb	r2, r3
 8003a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	7dbb      	ldrb	r3, [r7, #22]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff99 	bl	8003994 <_THS_CCR_Acceptable>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d04f      	beq.n	8003b08 <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 8003a68:	8b3b      	ldrh	r3, [r7, #24]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a78:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003b28 <THS_ReadData+0x15c>
 8003a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a80:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8003a84:	8bbb      	ldrh	r3, [r7, #28]
 8003a86:	021a      	lsls	r2, r3, #8
 8003a88:	7efb      	ldrb	r3, [r7, #27]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	ee07 3a90 	vmov	s15, r3
 8003a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a94:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003b28 <THS_ReadData+0x15c>
 8003a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a9c:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8003aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	d418      	bmi.n	8003ae0 <THS_ReadData+0x114>
 8003aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ab2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003b2c <THS_ReadData+0x160>
 8003ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	dc0f      	bgt.n	8003ae0 <THS_ReadData+0x114>
 8003ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	d408      	bmi.n	8003ae0 <THS_ReadData+0x114>
 8003ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003b30 <THS_ReadData+0x164>
 8003ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	dd0a      	ble.n	8003af6 <THS_ReadData+0x12a>
			data[0] = 0.f;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	3304      	adds	r3, #4
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
			return 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e012      	b.n	8003b1c <THS_ReadData+0x150>
		}
		data[0] = t;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	601a      	str	r2, [r3, #0]
		data[1] = r;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	3304      	adds	r3, #4
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]
		return 1;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e009      	b.n	8003b1c <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	3304      	adds	r3, #4
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
	return 0;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000a54 	.word	0x20000a54
 8003b28:	43800000 	.word	0x43800000
 8003b2c:	42480000 	.word	0x42480000
 8003b30:	42c80000 	.word	0x42c80000

08003b34 <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <THS_ErrorClock+0x30>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b40:	d905      	bls.n	8003b4e <THS_ErrorClock+0x1a>
		_ready = true;
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <THS_ErrorClock+0x34>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <THS_ErrorClock+0x30>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <THS_ErrorClock+0x30>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3301      	adds	r3, #1
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <THS_ErrorClock+0x30>)
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000a58 	.word	0x20000a58
 8003b68:	20000a54 	.word	0x20000a54

08003b6c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <DESELECT>:

static
inline void DESELECT(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0

}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003b92:	bf00      	nop
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <xmit_spi+0x30>)
 8003b96:	f003 fd9d 	bl	80076d4 <HAL_SPI_GetState>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d1f9      	bne.n	8003b94 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8003ba0:	1df9      	adds	r1, r7, #7
 8003ba2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <xmit_spi+0x30>)
 8003baa:	f003 fabd 	bl	8007128 <HAL_SPI_Transmit>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000b44 	.word	0x20000b44

08003bbc <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8003bc2:	23ff      	movs	r3, #255	; 0xff
 8003bc4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8003bca:	bf00      	nop
 8003bcc:	4809      	ldr	r0, [pc, #36]	; (8003bf4 <rcvr_spi+0x38>)
 8003bce:	f003 fd81 	bl	80076d4 <HAL_SPI_GetState>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d1f9      	bne.n	8003bcc <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8003bd8:	1dba      	adds	r2, r7, #6
 8003bda:	1df9      	adds	r1, r7, #7
 8003bdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2301      	movs	r3, #1
 8003be4:	4803      	ldr	r0, [pc, #12]	; (8003bf4 <rcvr_spi+0x38>)
 8003be6:	f003 fbd3 	bl	8007390 <HAL_SPI_TransmitReceive>

	return Data;
 8003bea:	79bb      	ldrb	r3, [r7, #6]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000b44 	.word	0x20000b44

08003bf8 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8003c00:	f7ff ffdc 	bl	8003bbc <rcvr_spi>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	701a      	strb	r2, [r3, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <wait_ready+0x34>)
 8003c1c:	2232      	movs	r2, #50	; 0x32
 8003c1e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8003c20:	f7ff ffcc 	bl	8003bbc <rcvr_spi>
	do
		res = rcvr_spi();
 8003c24:	f7ff ffca 	bl	8003bbc <rcvr_spi>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2bff      	cmp	r3, #255	; 0xff
 8003c30:	d004      	beq.n	8003c3c <wait_ready+0x28>
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <wait_ready+0x34>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f3      	bne.n	8003c24 <wait_ready+0x10>

	return res;
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000485 	.word	0x20000485

08003c4c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8003c52:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003c56:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8003c58:	f7ff ff8f 	bl	8003b7a <DESELECT>

	for (i = 0; i < 10; i++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e005      	b.n	8003c6e <power_on+0x22>
		xmit_spi(0xFF);
 8003c62:	20ff      	movs	r0, #255	; 0xff
 8003c64:	f7ff ff90 	bl	8003b88 <xmit_spi>
	for (i = 0; i < 10; i++)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d9f6      	bls.n	8003c62 <power_on+0x16>

	SELECT();
 8003c74:	f7ff ff7a 	bl	8003b6c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8003c78:	2340      	movs	r3, #64	; 0x40
 8003c7a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8003c8c:	2395      	movs	r3, #149	; 0x95
 8003c8e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	e00b      	b.n	8003cae <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	f107 0210 	add.w	r2, r7, #16
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff70 	bl	8003b88 <xmit_spi>
	for (i = 0; i < 6; i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d9f0      	bls.n	8003c96 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8003cb4:	e002      	b.n	8003cbc <power_on+0x70>
		Count--;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8003cbc:	f7ff ff7e 	bl	8003bbc <rcvr_spi>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d002      	beq.n	8003ccc <power_on+0x80>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f4      	bne.n	8003cb6 <power_on+0x6a>

	DESELECT();
 8003ccc:	f7ff ff55 	bl	8003b7a <DESELECT>
	xmit_spi(0XFF);
 8003cd0:	20ff      	movs	r0, #255	; 0xff
 8003cd2:	f7ff ff59 	bl	8003b88 <xmit_spi>

	PowerFlag = 1;
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <power_on+0x98>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000487 	.word	0x20000487

08003ce8 <power_off>:

static
void power_off(void) {
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <power_off+0x14>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000487 	.word	0x20000487

08003d00 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <rcvr_datablock+0x68>)
 8003d0c:	220a      	movs	r2, #10
 8003d0e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8003d10:	f7ff ff54 	bl	8003bbc <rcvr_spi>
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2bff      	cmp	r3, #255	; 0xff
 8003d1c:	d104      	bne.n	8003d28 <rcvr_datablock+0x28>
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <rcvr_datablock+0x68>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f3      	bne.n	8003d10 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d2c:	d001      	beq.n	8003d32 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e016      	b.n	8003d60 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff57 	bl	8003bf8 <rcvr_spi_m>
	} while (btr -= 2);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	3b02      	subs	r3, #2
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ed      	bne.n	8003d32 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8003d56:	f7ff ff31 	bl	8003bbc <rcvr_spi>
	rcvr_spi();
 8003d5a:	f7ff ff2f 	bl	8003bbc <rcvr_spi>

	return TRUE; /* Return with success */
 8003d5e:	2301      	movs	r3, #1
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000484 	.word	0x20000484

08003d6c <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8003d7c:	f7ff ff4a 	bl	8003c14 <wait_ready>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d001      	beq.n	8003d8a <xmit_datablock+0x1e>
		return FALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e040      	b.n	8003e0c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8003d8a:	78fb      	ldrb	r3, [r7, #3]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fefb 	bl	8003b88 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	2bfd      	cmp	r3, #253	; 0xfd
 8003d96:	d031      	beq.n	8003dfc <xmit_datablock+0x90>
		wc = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff feef 	bl	8003b88 <xmit_spi>
			xmit_spi(*buff++);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fee8 	bl	8003b88 <xmit_spi>
		} while (--wc);
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	73bb      	strb	r3, [r7, #14]
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1eb      	bne.n	8003d9c <xmit_datablock+0x30>

		rcvr_spi();
 8003dc4:	f7ff fefa 	bl	8003bbc <rcvr_spi>
		rcvr_spi();
 8003dc8:	f7ff fef8 	bl	8003bbc <rcvr_spi>

		while (i <= 64) {
 8003dcc:	e00b      	b.n	8003de6 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8003dce:	f7ff fef5 	bl	8003bbc <rcvr_spi>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d006      	beq.n	8003dee <xmit_datablock+0x82>
				break;
			i++;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d9f0      	bls.n	8003dce <xmit_datablock+0x62>
 8003dec:	e000      	b.n	8003df0 <xmit_datablock+0x84>
				break;
 8003dee:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8003df0:	bf00      	nop
 8003df2:	f7ff fee3 	bl	8003bbc <rcvr_spi>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0fa      	beq.n	8003df2 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d101      	bne.n	8003e0a <xmit_datablock+0x9e>
		return TRUE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xmit_datablock+0xa0>
	else
		return FALSE;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8003e20:	f7ff fef8 	bl	8003c14 <wait_ready>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d001      	beq.n	8003e2e <send_cmd+0x1a>
		return 0xFF;
 8003e2a:	23ff      	movs	r3, #255	; 0xff
 8003e2c:	e040      	b.n	8003eb0 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fea9 	bl	8003b88 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fea3 	bl	8003b88 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe9d 	bl	8003b88 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fe97 	bl	8003b88 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fe92 	bl	8003b88 <xmit_spi>
	n = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d101      	bne.n	8003e72 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8003e6e:	2395      	movs	r3, #149	; 0x95
 8003e70:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b48      	cmp	r3, #72	; 0x48
 8003e76:	d101      	bne.n	8003e7c <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8003e78:	2387      	movs	r3, #135	; 0x87
 8003e7a:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fe82 	bl	8003b88 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	2b4c      	cmp	r3, #76	; 0x4c
 8003e88:	d101      	bne.n	8003e8e <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8003e8a:	f7ff fe97 	bl	8003bbc <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8003e8e:	230a      	movs	r3, #10
 8003e90:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8003e92:	f7ff fe93 	bl	8003bbc <rcvr_spi>
 8003e96:	4603      	mov	r3, r0
 8003e98:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8003e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da05      	bge.n	8003eae <send_cmd+0x9a>
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f1      	bne.n	8003e92 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8003eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0d5      	b.n	8004078 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8003ecc:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <disk_initialize+0x1c8>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8003eda:	4b69      	ldr	r3, [pc, #420]	; (8004080 <disk_initialize+0x1c8>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e0ca      	b.n	8004078 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8003ee2:	f7ff feb3 	bl	8003c4c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8003ee6:	f7ff fe41 	bl	8003b6c <SELECT>
	ty = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8003eee:	2100      	movs	r1, #0
 8003ef0:	2040      	movs	r0, #64	; 0x40
 8003ef2:	f7ff ff8f 	bl	8003e14 <send_cmd>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 80a5 	bne.w	8004048 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8003efe:	4b61      	ldr	r3, [pc, #388]	; (8004084 <disk_initialize+0x1cc>)
 8003f00:	2264      	movs	r2, #100	; 0x64
 8003f02:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8003f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f08:	2048      	movs	r0, #72	; 0x48
 8003f0a:	f7ff ff83 	bl	8003e14 <send_cmd>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d158      	bne.n	8003fc6 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	e00c      	b.n	8003f34 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8003f1a:	7bfc      	ldrb	r4, [r7, #15]
 8003f1c:	f7ff fe4e 	bl	8003bbc <rcvr_spi>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	f107 0310 	add.w	r3, r7, #16
 8003f28:	4423      	add	r3, r4
 8003f2a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3301      	adds	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d9ef      	bls.n	8003f1a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8003f3a:	7abb      	ldrb	r3, [r7, #10]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f040 8083 	bne.w	8004048 <disk_initialize+0x190>
 8003f42:	7afb      	ldrb	r3, [r7, #11]
 8003f44:	2baa      	cmp	r3, #170	; 0xaa
 8003f46:	d17f      	bne.n	8004048 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2077      	movs	r0, #119	; 0x77
 8003f4c:	f7ff ff62 	bl	8003e14 <send_cmd>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d807      	bhi.n	8003f66 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8003f56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f5a:	2069      	movs	r0, #105	; 0x69
 8003f5c:	f7ff ff5a 	bl	8003e14 <send_cmd>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <disk_initialize+0x1cc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1eb      	bne.n	8003f48 <disk_initialize+0x90>
 8003f70:	e000      	b.n	8003f74 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8003f72:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8003f74:	4b43      	ldr	r3, [pc, #268]	; (8004084 <disk_initialize+0x1cc>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d064      	beq.n	8004048 <disk_initialize+0x190>
 8003f7e:	2100      	movs	r1, #0
 8003f80:	207a      	movs	r0, #122	; 0x7a
 8003f82:	f7ff ff47 	bl	8003e14 <send_cmd>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d15d      	bne.n	8004048 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e00c      	b.n	8003fac <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8003f92:	7bfc      	ldrb	r4, [r7, #15]
 8003f94:	f7ff fe12 	bl	8003bbc <rcvr_spi>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f107 0310 	add.w	r3, r7, #16
 8003fa0:	4423      	add	r3, r4
 8003fa2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d9ef      	bls.n	8003f92 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8003fb2:	7a3b      	ldrb	r3, [r7, #8]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <disk_initialize+0x108>
 8003fbc:	2306      	movs	r3, #6
 8003fbe:	e000      	b.n	8003fc2 <disk_initialize+0x10a>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	73bb      	strb	r3, [r7, #14]
 8003fc4:	e040      	b.n	8004048 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2077      	movs	r0, #119	; 0x77
 8003fca:	f7ff ff23 	bl	8003e14 <send_cmd>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d808      	bhi.n	8003fe6 <disk_initialize+0x12e>
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	2069      	movs	r0, #105	; 0x69
 8003fd8:	f7ff ff1c 	bl	8003e14 <send_cmd>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d801      	bhi.n	8003fe6 <disk_initialize+0x12e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e000      	b.n	8003fe8 <disk_initialize+0x130>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d10e      	bne.n	800400e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2077      	movs	r0, #119	; 0x77
 8003ff4:	f7ff ff0e 	bl	8003e14 <send_cmd>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d80e      	bhi.n	800401c <disk_initialize+0x164>
 8003ffe:	2100      	movs	r1, #0
 8004000:	2069      	movs	r0, #105	; 0x69
 8004002:	f7ff ff07 	bl	8003e14 <send_cmd>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <disk_initialize+0x164>
						break; /* ACMD41 */
 800400c:	e00d      	b.n	800402a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800400e:	2100      	movs	r1, #0
 8004010:	2041      	movs	r0, #65	; 0x41
 8004012:	f7ff feff 	bl	8003e14 <send_cmd>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <disk_initialize+0x1cc>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e1      	bne.n	8003fea <disk_initialize+0x132>
 8004026:	e000      	b.n	800402a <disk_initialize+0x172>
						break; /* CMD1 */
 8004028:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <disk_initialize+0x1cc>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <disk_initialize+0x18c>
 8004034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004038:	2050      	movs	r0, #80	; 0x50
 800403a:	f7ff feeb 	bl	8003e14 <send_cmd>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <disk_initialize+0x190>
				ty = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8004048:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <disk_initialize+0x1d0>)
 800404a:	7bbb      	ldrb	r3, [r7, #14]
 800404c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800404e:	f7ff fd94 	bl	8003b7a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004052:	f7ff fdb3 	bl	8003bbc <rcvr_spi>

	if (ty) /* Initialization succeded */
 8004056:	7bbb      	ldrb	r3, [r7, #14]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <disk_initialize+0x1c8>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <disk_initialize+0x1c8>)
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e001      	b.n	8004072 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800406e:	f7ff fe3b 	bl	8003ce8 <power_off>

	return Stat;
 8004072:	4b03      	ldr	r3, [pc, #12]	; (8004080 <disk_initialize+0x1c8>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b2db      	uxtb	r3, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bd90      	pop	{r4, r7, pc}
 8004080:	20000058 	.word	0x20000058
 8004084:	20000484 	.word	0x20000484
 8004088:	20000486 	.word	0x20000486

0800408c <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800409c:	2301      	movs	r3, #1
 800409e:	e002      	b.n	80040a6 <disk_status+0x1a>
	return Stat;
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <disk_status+0x28>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000058 	.word	0x20000058

080040b8 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <disk_read+0x1c>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <disk_read+0x20>
		return RES_PARERR;
 80040d4:	2304      	movs	r3, #4
 80040d6:	e051      	b.n	800417c <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80040d8:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <disk_read+0xcc>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <disk_read+0x32>
		return RES_NOTRDY;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e048      	b.n	800417c <disk_read+0xc4>

	if (!(CardType & 4))
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <disk_read+0xd0>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80040fc:	f7ff fd36 	bl	8003b6c <SELECT>

	if (count == 1) { /* Single block read */
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d111      	bne.n	800412a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	2051      	movs	r0, #81	; 0x51
 800410a:	f7ff fe83 	bl	8003e14 <send_cmd>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d129      	bne.n	8004168 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8004114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004118:	68b8      	ldr	r0, [r7, #8]
 800411a:	f7ff fdf1 	bl	8003d00 <rcvr_datablock>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d021      	beq.n	8004168 <disk_read+0xb0>
			count = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	e01e      	b.n	8004168 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	2052      	movs	r0, #82	; 0x52
 800412e:	f7ff fe71 	bl	8003e14 <send_cmd>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d117      	bne.n	8004168 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8004138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800413c:	68b8      	ldr	r0, [r7, #8]
 800413e:	f7ff fddf 	bl	8003d00 <rcvr_datablock>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <disk_read+0xa6>
					break;
				buff += 512;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800414e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	3b01      	subs	r3, #1
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ed      	bne.n	8004138 <disk_read+0x80>
 800415c:	e000      	b.n	8004160 <disk_read+0xa8>
					break;
 800415e:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8004160:	2100      	movs	r1, #0
 8004162:	204c      	movs	r0, #76	; 0x4c
 8004164:	f7ff fe56 	bl	8003e14 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8004168:	f7ff fd07 	bl	8003b7a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800416c:	f7ff fd26 	bl	8003bbc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000058 	.word	0x20000058
 8004188:	20000486 	.word	0x20000486

0800418c <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <disk_write+0x1c>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <disk_write+0x20>
		return RES_PARERR;
 80041a8:	2304      	movs	r3, #4
 80041aa:	e06b      	b.n	8004284 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80041ac:	4b37      	ldr	r3, [pc, #220]	; (800428c <disk_write+0x100>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <disk_write+0x32>
		return RES_NOTRDY;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e062      	b.n	8004284 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <disk_write+0x100>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <disk_write+0x44>
		return RES_WRPRT;
 80041cc:	2302      	movs	r3, #2
 80041ce:	e059      	b.n	8004284 <disk_write+0xf8>

	if (!(CardType & 4))
 80041d0:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <disk_write+0x104>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	025b      	lsls	r3, r3, #9
 80041e0:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80041e2:	f7ff fcc3 	bl	8003b6c <SELECT>

	if (count == 1) { /* Single block write */
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d110      	bne.n	800420e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	2058      	movs	r0, #88	; 0x58
 80041f0:	f7ff fe10 	bl	8003e14 <send_cmd>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d13a      	bne.n	8004270 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80041fa:	21fe      	movs	r1, #254	; 0xfe
 80041fc:	68b8      	ldr	r0, [r7, #8]
 80041fe:	f7ff fdb5 	bl	8003d6c <xmit_datablock>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d033      	beq.n	8004270 <disk_write+0xe4>
			count = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	e030      	b.n	8004270 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800420e:	4b20      	ldr	r3, [pc, #128]	; (8004290 <disk_write+0x104>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800421a:	2100      	movs	r1, #0
 800421c:	2077      	movs	r0, #119	; 0x77
 800421e:	f7ff fdf9 	bl	8003e14 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	2057      	movs	r0, #87	; 0x57
 8004226:	f7ff fdf5 	bl	8003e14 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	2059      	movs	r0, #89	; 0x59
 800422e:	f7ff fdf1 	bl	8003e14 <send_cmd>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11b      	bne.n	8004270 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8004238:	21fc      	movs	r1, #252	; 0xfc
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f7ff fd96 	bl	8003d6c <xmit_datablock>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <disk_write+0xd0>
					break;
				buff += 512;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800424c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	3b01      	subs	r3, #1
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1ee      	bne.n	8004238 <disk_write+0xac>
 800425a:	e000      	b.n	800425e <disk_write+0xd2>
					break;
 800425c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800425e:	21fd      	movs	r1, #253	; 0xfd
 8004260:	2000      	movs	r0, #0
 8004262:	f7ff fd83 	bl	8003d6c <xmit_datablock>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <disk_write+0xe4>
				count = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8004270:	f7ff fc83 	bl	8003b7a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004274:	f7ff fca2 	bl	8003bbc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000058 	.word	0x20000058
 8004290:	20000486 	.word	0x20000486

08004294 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <disk_timerproc+0x44>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	71fb      	strb	r3, [r7, #7]
	if (n)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <disk_timerproc+0x1e>
		Timer1 = --n;
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	71fb      	strb	r3, [r7, #7]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <disk_timerproc+0x44>)
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <disk_timerproc+0x48>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <disk_timerproc+0x36>
		Timer2 = --n;
 80042be:	79fb      	ldrb	r3, [r7, #7]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	71fb      	strb	r3, [r7, #7]
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <disk_timerproc+0x48>)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	7013      	strb	r3, [r2, #0]

}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	20000484 	.word	0x20000484
 80042dc:	20000485 	.word	0x20000485

080042e0 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <sdcard_systick_timerproc+0x2c>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <sdcard_systick_timerproc+0x2c>)
 80042f0:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <sdcard_systick_timerproc+0x2c>)
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b09      	cmp	r3, #9
 80042fa:	d904      	bls.n	8004306 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <sdcard_systick_timerproc+0x2c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8004302:	f7ff ffc7 	bl	8004294 <disk_timerproc>
	}
}
 8004306:	bf00      	nop
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000a5c 	.word	0x20000a5c

08004310 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3301      	adds	r3, #1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004320:	89fb      	ldrh	r3, [r7, #14]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	b21a      	sxth	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b21b      	sxth	r3, r3
 800432c:	4313      	orrs	r3, r2
 800432e:	b21b      	sxth	r3, r3
 8004330:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004332:	89fb      	ldrh	r3, [r7, #14]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3303      	adds	r3, #3
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	3202      	adds	r2, #2
 8004358:	7812      	ldrb	r2, [r2, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	3201      	adds	r2, #1
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
	return rv;
 8004378:	68fb      	ldr	r3, [r7, #12]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8004386:	b480      	push	{r7}
 8004388:	b089      	sub	sp, #36	; 0x24
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	61fa      	str	r2, [r7, #28]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4619      	mov	r1, r3
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	61ba      	str	r2, [r7, #24]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	1acb      	subs	r3, r1, r3
 80043b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <mem_cmp+0x40>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0eb      	beq.n	800439e <mem_cmp+0x18>

	return r;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	78db      	ldrb	r3, [r3, #3]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02c      	beq.n	8004442 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7858      	ldrb	r0, [r3, #1]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	2301      	movs	r3, #1
 80043f8:	f7ff fec8 	bl	800418c <disk_write>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11d      	bne.n	800443e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	1ad2      	subs	r2, r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	429a      	cmp	r2, r3
 8004418:	d213      	bcs.n	8004442 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	789b      	ldrb	r3, [r3, #2]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d10f      	bne.n	8004442 <sync_window+0x6e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7858      	ldrb	r0, [r3, #1]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	441a      	add	r2, r3
 8004436:	2301      	movs	r3, #1
 8004438:	f7ff fea8 	bl	800418c <disk_write>
 800443c:	e001      	b.n	8004442 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800443e:	2301      	movs	r3, #1
 8004440:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d01b      	beq.n	800449c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ffb5 	bl	80043d4 <sync_window>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d113      	bne.n	800449c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7858      	ldrb	r0, [r3, #1]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800447e:	2301      	movs	r3, #1
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	f7ff fe19 	bl	80040b8 <disk_read>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004492:	2301      	movs	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b089      	sub	sp, #36	; 0x24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <get_ldnumber+0x22>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	e02d      	b.n	8004524 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	61fa      	str	r2, [r7, #28]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d902      	bls.n	80044de <get_ldnumber+0x38>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b3a      	cmp	r3, #58	; 0x3a
 80044dc:	d1f4      	bne.n	80044c8 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b3a      	cmp	r3, #58	; 0x3a
 80044e2:	d11c      	bne.n	800451e <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80044e4:	2301      	movs	r3, #1
 80044e6:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b2f      	cmp	r3, #47	; 0x2f
 80044ee:	d90c      	bls.n	800450a <get_ldnumber+0x64>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b39      	cmp	r3, #57	; 0x39
 80044f6:	d808      	bhi.n	800450a <get_ldnumber+0x64>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3302      	adds	r3, #2
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d103      	bne.n	800450a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	3b30      	subs	r3, #48	; 0x30
 8004508:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc04      	bgt.n	800451a <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	e002      	b.n	8004524 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3724      	adds	r7, #36	; 0x24
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	70da      	strb	r2, [r3, #3]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff7e 	bl	800444c <move_window>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <check_fs+0x2a>
 8004556:	2304      	movs	r3, #4
 8004558:	e038      	b.n	80045cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3330      	adds	r3, #48	; 0x30
 800455e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fed4 	bl	8004310 <ld_word>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <check_fs+0x48>
 8004574:	2303      	movs	r3, #3
 8004576:	e029      	b.n	80045cc <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800457e:	2be9      	cmp	r3, #233	; 0xe9
 8004580:	d009      	beq.n	8004596 <check_fs+0x66>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004588:	2beb      	cmp	r3, #235	; 0xeb
 800458a:	d004      	beq.n	8004596 <check_fs+0x66>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004592:	2be8      	cmp	r3, #232	; 0xe8
 8004594:	d119      	bne.n	80045ca <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3330      	adds	r3, #48	; 0x30
 800459a:	3336      	adds	r3, #54	; 0x36
 800459c:	2203      	movs	r2, #3
 800459e:	490d      	ldr	r1, [pc, #52]	; (80045d4 <check_fs+0xa4>)
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fef0 	bl	8004386 <mem_cmp>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <check_fs+0x80>
 80045ac:	2300      	movs	r3, #0
 80045ae:	e00d      	b.n	80045cc <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3330      	adds	r3, #48	; 0x30
 80045b4:	3352      	adds	r3, #82	; 0x52
 80045b6:	2205      	movs	r2, #5
 80045b8:	4907      	ldr	r1, [pc, #28]	; (80045d8 <check_fs+0xa8>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fee3 	bl	8004386 <mem_cmp>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <check_fs+0x9a>
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 80045ca:	2302      	movs	r3, #2
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	0800b98c 	.word	0x0800b98c
 80045d8:	0800b990 	.word	0x0800b990

080045dc <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b096      	sub	sp, #88	; 0x58
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff ff58 	bl	80044a6 <get_ldnumber>
 80045f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	da01      	bge.n	8004602 <find_volume+0x26>
 80045fe:	230b      	movs	r3, #11
 8004600:	e238      	b.n	8004a74 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8004602:	4aa8      	ldr	r2, [pc, #672]	; (80048a4 <find_volume+0x2c8>)
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <find_volume+0x3a>
 8004612:	230c      	movs	r3, #12
 8004614:	e22e      	b.n	8004a74 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01a      	beq.n	8004662 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fd2b 	bl	800408c <disk_status>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800463c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10c      	bne.n	8004662 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <find_volume+0x82>
 800464e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800465a:	230a      	movs	r3, #10
 800465c:	e20a      	b.n	8004a74 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 800465e:	2300      	movs	r3, #0
 8004660:	e208      	b.n	8004a74 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fc1f 	bl	8003eb8 <disk_initialize>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800468c:	2303      	movs	r3, #3
 800468e:	e1f1      	b.n	8004a74 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <find_volume+0xca>
 8004696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80046a2:	230a      	movs	r3, #10
 80046a4:	e1e6      	b.n	8004a74 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80046aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046ae:	f7ff ff3f 	bl	8004530 <check_fs>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80046b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d14b      	bne.n	8004758 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80046c0:	2300      	movs	r3, #0
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
 80046c4:	e01f      	b.n	8004706 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80046d4:	4413      	add	r3, r2
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	3304      	adds	r3, #4
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <find_volume+0x114>
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	3308      	adds	r3, #8
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fe2a 	bl	8004340 <ld_dword>
 80046ec:	4602      	mov	r2, r0
 80046ee:	e000      	b.n	80046f2 <find_volume+0x116>
 80046f0:	2200      	movs	r2, #0
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80046fa:	440b      	add	r3, r1
 80046fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	3301      	adds	r3, #1
 8004704:	643b      	str	r3, [r7, #64]	; 0x40
 8004706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004708:	2b03      	cmp	r3, #3
 800470a:	d9dc      	bls.n	80046c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800470c:	2300      	movs	r3, #0
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <find_volume+0x140>
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	3b01      	subs	r3, #1
 800471a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004724:	4413      	add	r3, r2
 8004726:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800472a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800472c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472e:	2b00      	cmp	r3, #0
 8004730:	d005      	beq.n	800473e <find_volume+0x162>
 8004732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004736:	f7ff fefb 	bl	8004530 <check_fs>
 800473a:	4603      	mov	r3, r0
 800473c:	e000      	b.n	8004740 <find_volume+0x164>
 800473e:	2303      	movs	r3, #3
 8004740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004748:	2b01      	cmp	r3, #1
 800474a:	d905      	bls.n	8004758 <find_volume+0x17c>
 800474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474e:	3301      	adds	r3, #1
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
 8004752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004754:	2b03      	cmp	r3, #3
 8004756:	d9e1      	bls.n	800471c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800475c:	2b04      	cmp	r3, #4
 800475e:	d101      	bne.n	8004764 <find_volume+0x188>
 8004760:	2301      	movs	r3, #1
 8004762:	e187      	b.n	8004a74 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004768:	2b01      	cmp	r3, #1
 800476a:	d901      	bls.n	8004770 <find_volume+0x194>
 800476c:	230d      	movs	r3, #13
 800476e:	e181      	b.n	8004a74 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	3330      	adds	r3, #48	; 0x30
 8004774:	330b      	adds	r3, #11
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fdca 	bl	8004310 <ld_word>
 800477c:	4603      	mov	r3, r0
 800477e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004782:	d001      	beq.n	8004788 <find_volume+0x1ac>
 8004784:	230d      	movs	r3, #13
 8004786:	e175      	b.n	8004a74 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	3330      	adds	r3, #48	; 0x30
 800478c:	3316      	adds	r3, #22
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fdbe 	bl	8004310 <ld_word>
 8004794:	4603      	mov	r3, r0
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <find_volume+0x1d0>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	3330      	adds	r3, #48	; 0x30
 80047a2:	3324      	adds	r3, #36	; 0x24
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fdcb 	bl	8004340 <ld_dword>
 80047aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80047b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	789b      	ldrb	r3, [r3, #2]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d005      	beq.n	80047d0 <find_volume+0x1f4>
 80047c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c6:	789b      	ldrb	r3, [r3, #2]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d001      	beq.n	80047d0 <find_volume+0x1f4>
 80047cc:	230d      	movs	r3, #13
 80047ce:	e151      	b.n	8004a74 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d2:	789b      	ldrb	r3, [r3, #2]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	895b      	ldrh	r3, [r3, #10]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <find_volume+0x228>
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	895b      	ldrh	r3, [r3, #10]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	895b      	ldrh	r3, [r3, #10]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <find_volume+0x22c>
 8004804:	230d      	movs	r3, #13
 8004806:	e135      	b.n	8004a74 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	3311      	adds	r3, #17
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fd7e 	bl	8004310 <ld_word>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <find_volume+0x252>
 800482a:	230d      	movs	r3, #13
 800482c:	e122      	b.n	8004a74 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	3330      	adds	r3, #48	; 0x30
 8004832:	3313      	adds	r3, #19
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fd6b 	bl	8004310 <ld_word>
 800483a:	4603      	mov	r3, r0
 800483c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800483e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <find_volume+0x276>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	3330      	adds	r3, #48	; 0x30
 8004848:	3320      	adds	r3, #32
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fd78 	bl	8004340 <ld_dword>
 8004850:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	3330      	adds	r3, #48	; 0x30
 8004856:	330e      	adds	r3, #14
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff fd59 	bl	8004310 <ld_word>
 800485e:	4603      	mov	r3, r0
 8004860:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004862:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <find_volume+0x290>
 8004868:	230d      	movs	r3, #13
 800486a:	e103      	b.n	8004a74 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800486c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	4413      	add	r3, r2
 8004872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004874:	8912      	ldrh	r2, [r2, #8]
 8004876:	0912      	lsrs	r2, r2, #4
 8004878:	b292      	uxth	r2, r2
 800487a:	4413      	add	r3, r2
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800487e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	429a      	cmp	r2, r3
 8004884:	d201      	bcs.n	800488a <find_volume+0x2ae>
 8004886:	230d      	movs	r3, #13
 8004888:	e0f4      	b.n	8004a74 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800488a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004892:	8952      	ldrh	r2, [r2, #10]
 8004894:	fbb3 f3f2 	udiv	r3, r3, r2
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <find_volume+0x2cc>
 80048a0:	230d      	movs	r3, #13
 80048a2:	e0e7      	b.n	8004a74 <find_volume+0x498>
 80048a4:	20000488 	.word	0x20000488
		fmt = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	4a72      	ldr	r2, [pc, #456]	; (8004a7c <find_volume+0x4a0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d802      	bhi.n	80048bc <find_volume+0x2e0>
 80048b6:	2303      	movs	r3, #3
 80048b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d802      	bhi.n	80048cc <find_volume+0x2f0>
 80048c6:	2302      	movs	r3, #2
 80048c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d802      	bhi.n	80048dc <find_volume+0x300>
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80048dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <find_volume+0x30c>
 80048e4:	230d      	movs	r3, #13
 80048e6:	e0c5      	b.n	8004a74 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80048f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	441a      	add	r2, r3
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	441a      	add	r2, r3
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800490a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800490e:	2b03      	cmp	r3, #3
 8004910:	d11e      	bne.n	8004950 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	3330      	adds	r3, #48	; 0x30
 8004916:	332a      	adds	r3, #42	; 0x2a
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fcf9 	bl	8004310 <ld_word>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <find_volume+0x34c>
 8004924:	230d      	movs	r3, #13
 8004926:	e0a5      	b.n	8004a74 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	891b      	ldrh	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <find_volume+0x358>
 8004930:	230d      	movs	r3, #13
 8004932:	e09f      	b.n	8004a74 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	3330      	adds	r3, #48	; 0x30
 8004938:	332c      	adds	r3, #44	; 0x2c
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fd00 	bl	8004340 <ld_dword>
 8004940:	4602      	mov	r2, r0
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
 800494e:	e01f      	b.n	8004990 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	891b      	ldrh	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <find_volume+0x380>
 8004958:	230d      	movs	r3, #13
 800495a:	e08b      	b.n	8004a74 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004962:	441a      	add	r2, r3
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800496c:	2b02      	cmp	r3, #2
 800496e:	d103      	bne.n	8004978 <find_volume+0x39c>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	e00a      	b.n	800498e <find_volume+0x3b2>
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	4613      	mov	r3, r2
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4413      	add	r3, r2
 8004982:	085a      	lsrs	r2, r3, #1
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800498e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004996:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800499a:	0a5b      	lsrs	r3, r3, #9
 800499c:	429a      	cmp	r2, r3
 800499e:	d201      	bcs.n	80049a4 <find_volume+0x3c8>
 80049a0:	230d      	movs	r3, #13
 80049a2:	e067      	b.n	8004a74 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	f04f 32ff 	mov.w	r2, #4294967295
 80049aa:	611a      	str	r2, [r3, #16]
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80049b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80049ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d149      	bne.n	8004a56 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	3330      	adds	r3, #48	; 0x30
 80049c6:	3330      	adds	r3, #48	; 0x30
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fca1 	bl	8004310 <ld_word>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d140      	bne.n	8004a56 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 80049d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d6:	3301      	adds	r3, #1
 80049d8:	4619      	mov	r1, r3
 80049da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049dc:	f7ff fd36 	bl	800444c <move_window>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d137      	bne.n	8004a56 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2200      	movs	r2, #0
 80049ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	3330      	adds	r3, #48	; 0x30
 80049f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fc8b 	bl	8004310 <ld_word>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d127      	bne.n	8004a56 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	3330      	adds	r3, #48	; 0x30
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fc98 	bl	8004340 <ld_dword>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <find_volume+0x4a4>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d11e      	bne.n	8004a56 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	3330      	adds	r3, #48	; 0x30
 8004a1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fc8d 	bl	8004340 <ld_dword>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <find_volume+0x4a8>)
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d113      	bne.n	8004a56 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	3330      	adds	r3, #48	; 0x30
 8004a32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fc82 	bl	8004340 <ld_dword>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	3330      	adds	r3, #48	; 0x30
 8004a46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fc78 	bl	8004340 <ld_dword>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004a5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <find_volume+0x4ac>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <find_volume+0x4ac>)
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <find_volume+0x4ac>)
 8004a6c:	881a      	ldrh	r2, [r3, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3758      	adds	r7, #88	; 0x58
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	0ffffff5 	.word	0x0ffffff5
 8004a80:	41615252 	.word	0x41615252
 8004a84:	61417272 	.word	0x61417272
 8004a88:	2000048c 	.word	0x2000048c

08004a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004a9e:	f107 0310 	add.w	r3, r7, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fcff 	bl	80044a6 <get_ldnumber>
 8004aa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da01      	bge.n	8004ab4 <f_mount+0x28>
 8004ab0:	230b      	movs	r3, #11
 8004ab2:	e025      	b.n	8004b00 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004ab4:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <f_mount+0x7c>)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	490b      	ldr	r1, [pc, #44]	; (8004b08 <f_mount+0x7c>)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <f_mount+0x5e>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e00a      	b.n	8004b00 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004aea:	f107 010c 	add.w	r1, r7, #12
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	2200      	movs	r2, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fd71 	bl	80045dc <find_volume>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000488 	.word	0x20000488

08004b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b12:	f000 fe27 	bl	8005764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b16:	f000 f855 	bl	8004bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b1a:	f000 fabf 	bl	800509c <MX_GPIO_Init>
  MX_RTC_Init();
 8004b1e:	f000 f8d1 	bl	8004cc4 <MX_RTC_Init>
  MX_SPI1_Init();
 8004b22:	f000 f933 	bl	8004d8c <MX_SPI1_Init>
  MX_TIM2_Init();
 8004b26:	f000 f967 	bl	8004df8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004b2a:	f000 f9f1 	bl	8004f10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004b2e:	f000 fa3d 	bl	8004fac <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8004b32:	f000 fa89 	bl	8005048 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8004b36:	481d      	ldr	r0, [pc, #116]	; (8004bac <main+0xa0>)
 8004b38:	f002 fed5 	bl	80078e6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	481b      	ldr	r0, [pc, #108]	; (8004bac <main+0xa0>)
 8004b40:	f002 ff2a 	bl	8007998 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004b44:	2104      	movs	r1, #4
 8004b46:	4819      	ldr	r0, [pc, #100]	; (8004bac <main+0xa0>)
 8004b48:	f002 ff26 	bl	8007998 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004b4c:	2108      	movs	r1, #8
 8004b4e:	4817      	ldr	r0, [pc, #92]	; (8004bac <main+0xa0>)
 8004b50:	f002 ff22 	bl	8007998 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8004b54:	4816      	ldr	r0, [pc, #88]	; (8004bb0 <main+0xa4>)
 8004b56:	f002 fec6 	bl	80078e6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8004b5a:	4816      	ldr	r0, [pc, #88]	; (8004bb4 <main+0xa8>)
 8004b5c:	f002 fe9f 	bl	800789e <HAL_TIM_Base_Start>

	RGB_Init();
 8004b60:	f7fe f9f6 	bl	8002f50 <RGB_Init>
	LCD_Init();
 8004b64:	f7fc fa82 	bl	800106c <LCD_Init>
	THS_Init();
 8004b68:	f7fe fe12 	bl	8003790 <THS_Init>
	SD_Init();
 8004b6c:	f7fe fcaa 	bl	80034c4 <SD_Init>
	NET_Init();
 8004b70:	f7fd ff9e 	bl	8002ab0 <NET_Init>
	MENU_Init();
 8004b74:	f7fc ffbe 	bl	8001af4 <MENU_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8004b78:	f7fc fb5e 	bl	8001238 <LCD_ClearScreen>
	int check = 1000001;
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <main+0xac>)
 8004b7e:	607b      	str	r3, [r7, #4]

	while (1) {

		if (MENU_HandleKeys()) { /* Uzytkownik zareagowal */
 8004b80:	f7fd fd08 	bl	8002594 <MENU_HandleKeys>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <main+0x82>
			LCD_WakeScreen();
 8004b8a:	f7fc fb31 	bl	80011f0 <LCD_WakeScreen>

		}

		if (check++ > 720000 && State == ST_Clock) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <main+0xb0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	ddf2      	ble.n	8004b80 <main+0x74>
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <main+0xb4>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ee      	bne.n	8004b80 <main+0x74>
			MENU_Clock();
 8004ba2:	f7fd fcb9 	bl	8002518 <MENU_Clock>
			check = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
		if (MENU_HandleKeys()) { /* Uzytkownik zareagowal */
 8004baa:	e7e9      	b.n	8004b80 <main+0x74>
 8004bac:	20000b9c 	.word	0x20000b9c
 8004bb0:	20000ae0 	.word	0x20000ae0
 8004bb4:	20000a60 	.word	0x20000a60
 8004bb8:	000f4241 	.word	0x000f4241
 8004bbc:	000afc80 	.word	0x000afc80
 8004bc0:	20000b21 	.word	0x20000b21

08004bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b098      	sub	sp, #96	; 0x60
 8004bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bce:	2230      	movs	r2, #48	; 0x30
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f004 fd28 	bl	8009628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bd8:	f107 031c 	add.w	r3, r7, #28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004be8:	f107 030c 	add.w	r3, r7, #12
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <SystemClock_Config+0xf4>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <SystemClock_Config+0xf4>)
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <SystemClock_Config+0xf4>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
 8004c16:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <SystemClock_Config+0xf8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <SystemClock_Config+0xf8>)
 8004c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <SystemClock_Config+0xf8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004c42:	2304      	movs	r3, #4
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004c46:	2348      	movs	r3, #72	; 0x48
 8004c48:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f94a 	bl	8005ef0 <HAL_RCC_OscConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004c62:	f000 fb4d 	bl	8005300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c66:	230f      	movs	r3, #15
 8004c68:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c7c:	f107 031c 	add.w	r3, r7, #28
 8004c80:	2102      	movs	r1, #2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 fba4 	bl	80063d0 <HAL_RCC_ClockConfig>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8004c8e:	f000 fb37 	bl	8005300 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c92:	2302      	movs	r3, #2
 8004c94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <SystemClock_Config+0xfc>)
 8004c98:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fd88 	bl	80067b4 <HAL_RCCEx_PeriphCLKConfig>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004caa:	f000 fb29 	bl	8005300 <Error_Handler>
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3760      	adds	r7, #96	; 0x60
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40007000 	.word	0x40007000
 8004cc0:	00100300 	.word	0x00100300

08004cc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004cca:	1d3b      	adds	r3, r7, #4
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004cd8:	2300      	movs	r3, #0
 8004cda:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <MX_RTC_Init+0xc4>)
 8004ce0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ce2:	4b28      	ldr	r3, [pc, #160]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125;
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004cea:	227d      	movs	r2, #125	; 0x7d
 8004cec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 4000;
 8004cee:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004cf0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004cf4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cfc:	4b21      	ldr	r3, [pc, #132]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004d08:	481e      	ldr	r0, [pc, #120]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004d0a:	f001 fe35 	bl	8006978 <HAL_RTC_Init>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8004d14:	f000 faf4 	bl	8005300 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4619      	mov	r1, r3
 8004d32:	4814      	ldr	r0, [pc, #80]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004d34:	f001 feb1 	bl	8006a9a <HAL_RTC_SetTime>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8004d3e:	f000 fadf 	bl	8005300 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8004d42:	2303      	movs	r3, #3
 8004d44:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8004d46:	2304      	movs	r3, #4
 8004d48:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x8;
 8004d4a:	2308      	movs	r3, #8
 8004d4c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8004d4e:	2320      	movs	r3, #32
 8004d50:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004d52:	463b      	mov	r3, r7
 8004d54:	2201      	movs	r2, #1
 8004d56:	4619      	mov	r1, r3
 8004d58:	480a      	ldr	r0, [pc, #40]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004d5a:	f001 ffb9 	bl	8006cd0 <HAL_RTC_SetDate>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8004d64:	f000 facc 	bl	8005300 <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8004d68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d6c:	4805      	ldr	r0, [pc, #20]	; (8004d84 <MX_RTC_Init+0xc0>)
 8004d6e:	f002 f935 	bl	8006fdc <HAL_RTCEx_SetCalibrationOutPut>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8004d78:	f000 fac2 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004d7c:	bf00      	nop
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000b24 	.word	0x20000b24
 8004d88:	40002800 	.word	0x40002800

08004d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004d92:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <MX_SPI1_Init+0x68>)
 8004d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d96:	4b16      	ldr	r3, [pc, #88]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dc0:	2218      	movs	r2, #24
 8004dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dd8:	220a      	movs	r2, #10
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004ddc:	4804      	ldr	r0, [pc, #16]	; (8004df0 <MX_SPI1_Init+0x64>)
 8004dde:	f002 f93f 	bl	8007060 <HAL_SPI_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004de8:	f000 fa8a 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000b44 	.word	0x20000b44
 8004df4:	40013000 	.word	0x40013000

08004df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08e      	sub	sp, #56	; 0x38
 8004dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	609a      	str	r2, [r3, #8]
 8004e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e0c:	f107 0320 	add.w	r3, r7, #32
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	611a      	str	r2, [r3, #16]
 8004e24:	615a      	str	r2, [r3, #20]
 8004e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e28:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8004e30:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e32:	2247      	movs	r2, #71	; 0x47
 8004e34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e36:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004e3c:	4b33      	ldr	r3, [pc, #204]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e44:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e50:	482e      	ldr	r0, [pc, #184]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e52:	f002 fcf9 	bl	8007848 <HAL_TIM_Base_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004e5c:	f000 fa50 	bl	8005300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4827      	ldr	r0, [pc, #156]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e6e:	f002 ff9f 	bl	8007db0 <HAL_TIM_ConfigClockSource>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004e78:	f000 fa42 	bl	8005300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004e7c:	4823      	ldr	r0, [pc, #140]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e7e:	f002 fd56 	bl	800792e <HAL_TIM_PWM_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004e88:	f000 fa3a 	bl	8005300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e94:	f107 0320 	add.w	r3, r7, #32
 8004e98:	4619      	mov	r1, r3
 8004e9a:	481c      	ldr	r0, [pc, #112]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004e9c:	f003 fb78 	bl	8008590 <HAL_TIMEx_MasterConfigSynchronization>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004ea6:	f000 fa2b 	bl	8005300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eaa:	2360      	movs	r3, #96	; 0x60
 8004eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4812      	ldr	r0, [pc, #72]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004ec2:	f002 feaf 	bl	8007c24 <HAL_TIM_PWM_ConfigChannel>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004ecc:	f000 fa18 	bl	8005300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ed0:	1d3b      	adds	r3, r7, #4
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	480d      	ldr	r0, [pc, #52]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004ed8:	f002 fea4 	bl	8007c24 <HAL_TIM_PWM_ConfigChannel>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004ee2:	f000 fa0d 	bl	8005300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	2208      	movs	r2, #8
 8004eea:	4619      	mov	r1, r3
 8004eec:	4807      	ldr	r0, [pc, #28]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004eee:	f002 fe99 	bl	8007c24 <HAL_TIM_PWM_ConfigChannel>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8004ef8:	f000 fa02 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004efc:	4803      	ldr	r0, [pc, #12]	; (8004f0c <MX_TIM2_Init+0x114>)
 8004efe:	f000 fae7 	bl	80054d0 <HAL_TIM_MspPostInit>

}
 8004f02:	bf00      	nop
 8004f04:	3738      	adds	r7, #56	; 0x38
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000b9c 	.word	0x20000b9c

08004f10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f24:	463b      	mov	r3, r7
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <MX_TIM3_Init+0x98>)
 8004f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8004f32:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f34:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8004f38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8004f40:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f42:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004f46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f48:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f54:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f56:	f002 fc77 	bl	8007848 <HAL_TIM_Base_Init>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004f60:	f000 f9ce 	bl	8005300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4619      	mov	r1, r3
 8004f70:	480c      	ldr	r0, [pc, #48]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f72:	f002 ff1d 	bl	8007db0 <HAL_TIM_ConfigClockSource>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004f7c:	f000 f9c0 	bl	8005300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_TIM3_Init+0x94>)
 8004f8e:	f003 faff 	bl	8008590 <HAL_TIMEx_MasterConfigSynchronization>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004f98:	f000 f9b2 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000ae0 	.word	0x20000ae0
 8004fa8:	40000400 	.word	0x40000400

08004fac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <MX_TIM4_Init+0x98>)
 8004fcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fd0:	2247      	movs	r2, #71	; 0x47
 8004fd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8004fda:	4b19      	ldr	r3, [pc, #100]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fe0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe2:	4b17      	ldr	r3, [pc, #92]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <MX_TIM4_Init+0x94>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004fee:	4814      	ldr	r0, [pc, #80]	; (8005040 <MX_TIM4_Init+0x94>)
 8004ff0:	f002 fc2a 	bl	8007848 <HAL_TIM_Base_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004ffa:	f000 f981 	bl	8005300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4619      	mov	r1, r3
 800500a:	480d      	ldr	r0, [pc, #52]	; (8005040 <MX_TIM4_Init+0x94>)
 800500c:	f002 fed0 	bl	8007db0 <HAL_TIM_ConfigClockSource>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005016:	f000 f973 	bl	8005300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005022:	463b      	mov	r3, r7
 8005024:	4619      	mov	r1, r3
 8005026:	4806      	ldr	r0, [pc, #24]	; (8005040 <MX_TIM4_Init+0x94>)
 8005028:	f003 fab2 	bl	8008590 <HAL_TIMEx_MasterConfigSynchronization>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005032:	f000 f965 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000a60 	.word	0x20000a60
 8005044:	40000800 	.word	0x40000800

08005048 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <MX_USART3_UART_Init+0x50>)
 8005050:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 8005054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005058:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800505a:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 800505c:	2200      	movs	r2, #0
 800505e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 8005062:	2200      	movs	r2, #0
 8005064:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 8005068:	2200      	movs	r2, #0
 800506a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 800506e:	220c      	movs	r2, #12
 8005070:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 8005074:	2200      	movs	r2, #0
 8005076:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800507e:	4805      	ldr	r0, [pc, #20]	; (8005094 <MX_USART3_UART_Init+0x4c>)
 8005080:	f003 fb16 	bl	80086b0 <HAL_UART_Init>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800508a:	f000 f939 	bl	8005300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000aa0 	.word	0x20000aa0
 8005098:	40004800 	.word	0x40004800

0800509c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	609a      	str	r2, [r3, #8]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	4b67      	ldr	r3, [pc, #412]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4a66      	ldr	r2, [pc, #408]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050bc:	f043 0310 	orr.w	r3, r3, #16
 80050c0:	6313      	str	r3, [r2, #48]	; 0x30
 80050c2:	4b64      	ldr	r3, [pc, #400]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	4b60      	ldr	r3, [pc, #384]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4a5f      	ldr	r2, [pc, #380]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050d8:	f043 0304 	orr.w	r3, r3, #4
 80050dc:	6313      	str	r3, [r2, #48]	; 0x30
 80050de:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	4b59      	ldr	r3, [pc, #356]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	4a58      	ldr	r2, [pc, #352]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	6313      	str	r3, [r2, #48]	; 0x30
 80050fa:	4b56      	ldr	r3, [pc, #344]	; (8005254 <MX_GPIO_Init+0x1b8>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b52      	ldr	r3, [pc, #328]	; (8005254 <MX_GPIO_Init+0x1b8>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a51      	ldr	r2, [pc, #324]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4a4a      	ldr	r2, [pc, #296]	; (8005254 <MX_GPIO_Init+0x1b8>)
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	6313      	str	r3, [r2, #48]	; 0x30
 8005132:	4b48      	ldr	r3, [pc, #288]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	60bb      	str	r3, [r7, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	4b44      	ldr	r3, [pc, #272]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	4a43      	ldr	r2, [pc, #268]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	6313      	str	r3, [r2, #48]	; 0x30
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <MX_GPIO_Init+0x1b8>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin|LCD_RW_Pin 
 800515a:	2200      	movs	r2, #0
 800515c:	217f      	movs	r1, #127	; 0x7f
 800515e:	483e      	ldr	r0, [pc, #248]	; (8005258 <MX_GPIO_Init+0x1bc>)
 8005160:	f000 fe7a 	bl	8005e58 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin|THS_Sensor1_Pin|THS_Sensor2_Pin, GPIO_PIN_RESET);
 8005164:	2200      	movs	r2, #0
 8005166:	f248 0103 	movw	r1, #32771	; 0x8003
 800516a:	483c      	ldr	r0, [pc, #240]	; (800525c <MX_GPIO_Init+0x1c0>)
 800516c:	f000 fe74 	bl	8005e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STM_Green_Pin|STM_Orange_Pin|STM_Red_Pin|STM_Blue_Pin, GPIO_PIN_RESET);
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005176:	483a      	ldr	r0, [pc, #232]	; (8005260 <MX_GPIO_Init+0x1c4>)
 8005178:	f000 fe6e 	bl	8005e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin 
                           LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin|LCD_RW_Pin 
 800517c:	237f      	movs	r3, #127	; 0x7f
 800517e:	61fb      	str	r3, [r7, #28]
                          |LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005180:	2301      	movs	r3, #1
 8005182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005184:	2302      	movs	r3, #2
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800518c:	f107 031c 	add.w	r3, r7, #28
 8005190:	4619      	mov	r1, r3
 8005192:	4831      	ldr	r0, [pc, #196]	; (8005258 <MX_GPIO_Init+0x1bc>)
 8005194:	f000 fcae 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Screen_Pin */
  GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8005198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800519e:	2301      	movs	r3, #1
 80051a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051a2:	2302      	movs	r3, #2
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a6:	2300      	movs	r3, #0
 80051a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 80051aa:	f107 031c 	add.w	r3, r7, #28
 80051ae:	4619      	mov	r1, r3
 80051b0:	482a      	ldr	r0, [pc, #168]	; (800525c <MX_GPIO_Init+0x1c0>)
 80051b2:	f000 fc9f 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
  GPIO_InitStruct.Pin = THS_Sensor1_Pin|THS_Sensor2_Pin;
 80051b6:	2303      	movs	r3, #3
 80051b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ba:	2301      	movs	r3, #1
 80051bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051be:	2301      	movs	r3, #1
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c2:	2300      	movs	r3, #0
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051c6:	f107 031c 	add.w	r3, r7, #28
 80051ca:	4619      	mov	r1, r3
 80051cc:	4823      	ldr	r0, [pc, #140]	; (800525c <MX_GPIO_Init+0x1c0>)
 80051ce:	f000 fc91 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STM_UserButton_Pin */
  GPIO_InitStruct.Pin = STM_UserButton_Pin;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051d6:	4b23      	ldr	r3, [pc, #140]	; (8005264 <MX_GPIO_Init+0x1c8>)
 80051d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051da:	2302      	movs	r3, #2
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 80051de:	f107 031c 	add.w	r3, r7, #28
 80051e2:	4619      	mov	r1, r3
 80051e4:	4820      	ldr	r0, [pc, #128]	; (8005268 <MX_GPIO_Init+0x1cc>)
 80051e6:	f000 fc85 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_Btn1_Pin */
  GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051f2:	2301      	movs	r3, #1
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 80051f6:	f107 031c 	add.w	r3, r7, #28
 80051fa:	4619      	mov	r1, r3
 80051fc:	4816      	ldr	r0, [pc, #88]	; (8005258 <MX_GPIO_Init+0x1bc>)
 80051fe:	f000 fc79 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
  GPIO_InitStruct.Pin = MENU_Btn2_Pin|MENU_Btn3_Pin|MENU_Btn4_Pin;
 8005202:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005208:	2300      	movs	r3, #0
 800520a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800520c:	2302      	movs	r3, #2
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005210:	f107 031c 	add.w	r3, r7, #28
 8005214:	4619      	mov	r1, r3
 8005216:	4810      	ldr	r0, [pc, #64]	; (8005258 <MX_GPIO_Init+0x1bc>)
 8005218:	f000 fc6c 	bl	8005af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
  GPIO_InitStruct.Pin = STM_Green_Pin|STM_Orange_Pin|STM_Red_Pin|STM_Blue_Pin;
 800521c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005222:	2301      	movs	r3, #1
 8005224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522a:	2300      	movs	r3, #0
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800522e:	f107 031c 	add.w	r3, r7, #28
 8005232:	4619      	mov	r1, r3
 8005234:	480a      	ldr	r0, [pc, #40]	; (8005260 <MX_GPIO_Init+0x1c4>)
 8005236:	f000 fc5d 	bl	8005af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800523a:	2200      	movs	r2, #0
 800523c:	2101      	movs	r1, #1
 800523e:	2006      	movs	r0, #6
 8005240:	f000 fbff 	bl	8005a42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005244:	2006      	movs	r0, #6
 8005246:	f000 fc18 	bl	8005a7a <HAL_NVIC_EnableIRQ>

}
 800524a:	bf00      	nop
 800524c:	3730      	adds	r7, #48	; 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	40021000 	.word	0x40021000
 800525c:	40020800 	.word	0x40020800
 8005260:	40020c00 	.word	0x40020c00
 8005264:	10110000 	.word	0x10110000
 8005268:	40020000 	.word	0x40020000

0800526c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d107      	bne.n	800528e <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe f8dc 	bl	8003440 <RGB_SetMode>
		THS_ErrorClock();
 8005288:	f7fe fc54 	bl	8003b34 <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
	}
}
 800528c:	e00a      	b.n	80052a4 <HAL_TIM_PeriodElapsedCallback+0x38>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d105      	bne.n	80052a4 <HAL_TIM_PeriodElapsedCallback+0x38>
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_PeriodElapsedCallback+0x38>
		LCD_BackgroundOff();
 80052a0:	f7fb ffbe 	bl	8001220 <LCD_BackgroundOff>
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2000048e 	.word	0x2000048e
 80052b0:	40000400 	.word	0x40000400
 80052b4:	20000b21 	.word	0x20000b21

080052b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d113      	bne.n	80052f0 <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 80052c8:	2101      	movs	r1, #1
 80052ca:	480b      	ldr	r0, [pc, #44]	; (80052f8 <HAL_GPIO_EXTI_Callback+0x40>)
 80052cc:	f000 fdac 	bl	8005e28 <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10c      	bne.n	80052f0 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9)
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_GPIO_EXTI_Callback+0x44>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <HAL_GPIO_EXTI_Callback+0x44>)
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_GPIO_EXTI_Callback+0x44>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	d902      	bls.n	80052f0 <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <HAL_GPIO_EXTI_Callback+0x44>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40020000 	.word	0x40020000
 80052fc:	2000048e 	.word	0x2000048e

08005300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
	...

08005310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_MspInit+0x4c>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	4a0f      	ldr	r2, [pc, #60]	; (800535c <HAL_MspInit+0x4c>)
 8005320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005324:	6453      	str	r3, [r2, #68]	; 0x44
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_MspInit+0x4c>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_MspInit+0x4c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_MspInit+0x4c>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b06      	ldr	r3, [pc, #24]	; (800535c <HAL_MspInit+0x4c>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800

08005360 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <HAL_RTC_MspInit+0x24>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d102      	bne.n	8005378 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RTC_MspInit+0x28>)
 8005374:	2201      	movs	r2, #1
 8005376:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40002800 	.word	0x40002800
 8005388:	42470e3c 	.word	0x42470e3c

0800538c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	; 0x28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_SPI_MspInit+0x84>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d12b      	bne.n	8005406 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	4b18      	ldr	r3, [pc, #96]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053bc:	6453      	str	r3, [r2, #68]	; 0x44
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4b11      	ldr	r3, [pc, #68]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4a10      	ldr	r2, [pc, #64]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6313      	str	r3, [r2, #48]	; 0x30
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <HAL_SPI_MspInit+0x88>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80053e6:	2338      	movs	r3, #56	; 0x38
 80053e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f2:	2303      	movs	r3, #3
 80053f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053f6:	2305      	movs	r3, #5
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4619      	mov	r1, r3
 8005400:	4805      	ldr	r0, [pc, #20]	; (8005418 <HAL_SPI_MspInit+0x8c>)
 8005402:	f000 fb77 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005406:	bf00      	nop
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40013000 	.word	0x40013000
 8005414:	40023800 	.word	0x40023800
 8005418:	40020400 	.word	0x40020400

0800541c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d116      	bne.n	800545c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6413      	str	r3, [r2, #64]	; 0x40
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2102      	movs	r1, #2
 800544e:	201c      	movs	r0, #28
 8005450:	f000 faf7 	bl	8005a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005454:	201c      	movs	r0, #28
 8005456:	f000 fb10 	bl	8005a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800545a:	e02e      	b.n	80054ba <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <HAL_TIM_Base_MspInit+0xac>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d116      	bne.n	8005494 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	6413      	str	r3, [r2, #64]	; 0x40
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8005482:	2200      	movs	r2, #0
 8005484:	2103      	movs	r1, #3
 8005486:	201d      	movs	r0, #29
 8005488:	f000 fadb 	bl	8005a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800548c:	201d      	movs	r0, #29
 800548e:	f000 faf4 	bl	8005a7a <HAL_NVIC_EnableIRQ>
}
 8005492:	e012      	b.n	80054ba <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <HAL_TIM_Base_MspInit+0xb0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d10d      	bne.n	80054ba <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 80054a8:	f043 0304 	orr.w	r3, r3, #4
 80054ac:	6413      	str	r3, [r2, #64]	; 0x40
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_TIM_Base_MspInit+0xa8>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
}
 80054ba:	bf00      	nop
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800

080054d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d11d      	bne.n	800552e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_TIM_MspPostInit+0x68>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a0f      	ldr	r2, [pc, #60]	; (8005538 <HAL_TIM_MspPostInit+0x68>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <HAL_TIM_MspPostInit+0x68>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 800550e:	2326      	movs	r3, #38	; 0x26
 8005510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4619      	mov	r1, r3
 8005528:	4804      	ldr	r0, [pc, #16]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 800552a:	f000 fae3 	bl	8005af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800
 800553c:	40020000 	.word	0x40020000

08005540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005548:	f107 0314 	add.w	r3, r7, #20
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <HAL_UART_MspInit+0x94>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d134      	bne.n	80055cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_UART_MspInit+0x98>)
 800556c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005570:	6413      	str	r3, [r2, #64]	; 0x40
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005588:	f043 0304 	orr.w	r3, r3, #4
 800558c:	6313      	str	r3, [r2, #48]	; 0x30
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_UART_MspInit+0x98>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 800559a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800559e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a8:	2303      	movs	r3, #3
 80055aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055ac:	2307      	movs	r3, #7
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055b0:	f107 0314 	add.w	r3, r7, #20
 80055b4:	4619      	mov	r1, r3
 80055b6:	4809      	ldr	r0, [pc, #36]	; (80055dc <HAL_UART_MspInit+0x9c>)
 80055b8:	f000 fa9c 	bl	8005af4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80055bc:	2200      	movs	r2, #0
 80055be:	2102      	movs	r1, #2
 80055c0:	2027      	movs	r0, #39	; 0x27
 80055c2:	f000 fa3e 	bl	8005a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055c6:	2027      	movs	r0, #39	; 0x27
 80055c8:	f000 fa57 	bl	8005a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80055cc:	bf00      	nop
 80055ce:	3728      	adds	r7, #40	; 0x28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40004800 	.word	0x40004800
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020800 	.word	0x40020800

080055e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055f2:	e7fe      	b.n	80055f2 <HardFault_Handler+0x4>

080055f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055f8:	e7fe      	b.n	80055f8 <MemManage_Handler+0x4>

080055fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055fa:	b480      	push	{r7}
 80055fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055fe:	e7fe      	b.n	80055fe <BusFault_Handler+0x4>

08005600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005604:	e7fe      	b.n	8005604 <UsageFault_Handler+0x4>

08005606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8005634:	f7fe fe54 	bl	80042e0 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005638:	f000 f8e6 	bl	8005808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}

08005640 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005644:	2001      	movs	r0, #1
 8005646:	f000 fc3b 	bl	8005ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005654:	4802      	ldr	r0, [pc, #8]	; (8005660 <TIM2_IRQHandler+0x10>)
 8005656:	f002 f9dd 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000b9c 	.word	0x20000b9c

08005664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005668:	4802      	ldr	r0, [pc, #8]	; (8005674 <TIM3_IRQHandler+0x10>)
 800566a:	f002 f9d3 	bl	8007a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000ae0 	.word	0x20000ae0

08005678 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <USART3_IRQHandler+0x10>)
 800567e:	f003 f9a3 	bl	80089c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000aa0 	.word	0x20000aa0

0800568c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005694:	4b11      	ldr	r3, [pc, #68]	; (80056dc <_sbrk+0x50>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <_sbrk+0x16>
		heap_end = &end;
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <_sbrk+0x50>)
 800569e:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <_sbrk+0x54>)
 80056a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <_sbrk+0x50>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <_sbrk+0x50>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4413      	add	r3, r2
 80056b0:	466a      	mov	r2, sp
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d907      	bls.n	80056c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80056b6:	f003 ff8d 	bl	80095d4 <__errno>
 80056ba:	4602      	mov	r2, r0
 80056bc:	230c      	movs	r3, #12
 80056be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	e006      	b.n	80056d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <_sbrk+0x50>)
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	4a03      	ldr	r2, [pc, #12]	; (80056dc <_sbrk+0x50>)
 80056d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000490 	.word	0x20000490
 80056e0:	20000be8 	.word	0x20000be8

080056e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <SystemInit+0x28>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	4a07      	ldr	r2, [pc, #28]	; (800570c <SystemInit+0x28>)
 80056f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <SystemInit+0x28>)
 80056fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056fe:	609a      	str	r2, [r3, #8]
#endif
}
 8005700:	bf00      	nop
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005716:	e003      	b.n	8005720 <LoopCopyDataInit>

08005718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800571a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800571c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800571e:	3104      	adds	r1, #4

08005720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005720:	480b      	ldr	r0, [pc, #44]	; (8005750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005728:	d3f6      	bcc.n	8005718 <CopyDataInit>
  ldr  r2, =_sbss
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800572c:	e002      	b.n	8005734 <LoopFillZerobss>

0800572e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800572e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005730:	f842 3b04 	str.w	r3, [r2], #4

08005734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005738:	d3f9      	bcc.n	800572e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800573a:	f7ff ffd3 	bl	80056e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800573e:	f003 ff4f 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005742:	f7ff f9e3 	bl	8004b0c <main>
  bx  lr    
 8005746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005748:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800574c:	0800bc20 	.word	0x0800bc20
  ldr  r0, =_sdata
 8005750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005754:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8005758:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 800575c:	20000be4 	.word	0x20000be4

08005760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005760:	e7fe      	b.n	8005760 <ADC_IRQHandler>
	...

08005764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_Init+0x40>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a0d      	ldr	r2, [pc, #52]	; (80057a4 <HAL_Init+0x40>)
 800576e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_Init+0x40>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <HAL_Init+0x40>)
 800577a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800577e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <HAL_Init+0x40>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <HAL_Init+0x40>)
 8005786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800578c:	2003      	movs	r0, #3
 800578e:	f000 f94d 	bl	8005a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005792:	2000      	movs	r0, #0
 8005794:	f000 f808 	bl	80057a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005798:	f7ff fdba 	bl	8005310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023c00 	.word	0x40023c00

080057a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_InitTick+0x54>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b12      	ldr	r3, [pc, #72]	; (8005800 <HAL_InitTick+0x58>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057be:	fbb3 f3f1 	udiv	r3, r3, r1
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f965 	bl	8005a96 <HAL_SYSTICK_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e00e      	b.n	80057f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d80a      	bhi.n	80057f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057dc:	2200      	movs	r2, #0
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	f000 f92d 	bl	8005a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057e8:	4a06      	ldr	r2, [pc, #24]	; (8005804 <HAL_InitTick+0x5c>)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000005c 	.word	0x2000005c
 8005800:	20000064 	.word	0x20000064
 8005804:	20000060 	.word	0x20000060

08005808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_IncTick+0x20>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_IncTick+0x24>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4413      	add	r3, r2
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <HAL_IncTick+0x24>)
 800581a:	6013      	str	r3, [r2, #0]
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000064 	.word	0x20000064
 800582c:	20000bdc 	.word	0x20000bdc

08005830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return uwTick;
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <HAL_GetTick+0x14>)
 8005836:	681b      	ldr	r3, [r3, #0]
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000bdc 	.word	0x20000bdc

08005848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005850:	f7ff ffee 	bl	8005830 <HAL_GetTick>
 8005854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d005      	beq.n	800586e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_Delay+0x40>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800586e:	bf00      	nop
 8005870:	f7ff ffde 	bl	8005830 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	429a      	cmp	r2, r3
 800587e:	d8f7      	bhi.n	8005870 <HAL_Delay+0x28>
  {
  }
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000064 	.word	0x20000064

0800588c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <__NVIC_SetPriorityGrouping+0x44>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058a8:	4013      	ands	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058be:	4a04      	ldr	r2, [pc, #16]	; (80058d0 <__NVIC_SetPriorityGrouping+0x44>)
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	60d3      	str	r3, [r2, #12]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d8:	4b04      	ldr	r3, [pc, #16]	; (80058ec <__NVIC_GetPriorityGrouping+0x18>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	f003 0307 	and.w	r3, r3, #7
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	db0b      	blt.n	800591a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	f003 021f 	and.w	r2, r3, #31
 8005908:	4907      	ldr	r1, [pc, #28]	; (8005928 <__NVIC_EnableIRQ+0x38>)
 800590a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2001      	movs	r0, #1
 8005912:	fa00 f202 	lsl.w	r2, r0, r2
 8005916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	e000e100 	.word	0xe000e100

0800592c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593c:	2b00      	cmp	r3, #0
 800593e:	db0a      	blt.n	8005956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	490c      	ldr	r1, [pc, #48]	; (8005978 <__NVIC_SetPriority+0x4c>)
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	0112      	lsls	r2, r2, #4
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	440b      	add	r3, r1
 8005950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005954:	e00a      	b.n	800596c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4908      	ldr	r1, [pc, #32]	; (800597c <__NVIC_SetPriority+0x50>)
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	3b04      	subs	r3, #4
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	440b      	add	r3, r1
 800596a:	761a      	strb	r2, [r3, #24]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	e000e100 	.word	0xe000e100
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f1c3 0307 	rsb	r3, r3, #7
 800599a:	2b04      	cmp	r3, #4
 800599c:	bf28      	it	cs
 800599e:	2304      	movcs	r3, #4
 80059a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3304      	adds	r3, #4
 80059a6:	2b06      	cmp	r3, #6
 80059a8:	d902      	bls.n	80059b0 <NVIC_EncodePriority+0x30>
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3b03      	subs	r3, #3
 80059ae:	e000      	b.n	80059b2 <NVIC_EncodePriority+0x32>
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43da      	mvns	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	401a      	ands	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059c8:	f04f 31ff 	mov.w	r1, #4294967295
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	43d9      	mvns	r1, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d8:	4313      	orrs	r3, r2
         );
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3724      	adds	r7, #36	; 0x24
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f8:	d301      	bcc.n	80059fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059fa:	2301      	movs	r3, #1
 80059fc:	e00f      	b.n	8005a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <SysTick_Config+0x40>)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a06:	210f      	movs	r1, #15
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	f7ff ff8e 	bl	800592c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <SysTick_Config+0x40>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a16:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <SysTick_Config+0x40>)
 8005a18:	2207      	movs	r2, #7
 8005a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	e000e010 	.word	0xe000e010

08005a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff29 	bl	800588c <__NVIC_SetPriorityGrouping>
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b086      	sub	sp, #24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	4603      	mov	r3, r0
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a54:	f7ff ff3e 	bl	80058d4 <__NVIC_GetPriorityGrouping>
 8005a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	6978      	ldr	r0, [r7, #20]
 8005a60:	f7ff ff8e 	bl	8005980 <NVIC_EncodePriority>
 8005a64:	4602      	mov	r2, r0
 8005a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ff5d 	bl	800592c <__NVIC_SetPriority>
}
 8005a72:	bf00      	nop
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	4603      	mov	r3, r0
 8005a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff31 	bl	80058f0 <__NVIC_EnableIRQ>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ffa2 	bl	80059e8 <SysTick_Config>
 8005aa4:	4603      	mov	r3, r0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e00c      	b.n	8005ae6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2205      	movs	r2, #5
 8005ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e16b      	b.n	8005de8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b10:	2201      	movs	r2, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4013      	ands	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	f040 815a 	bne.w	8005de2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d00b      	beq.n	8005b4e <HAL_GPIO_Init+0x5a>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d007      	beq.n	8005b4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b42:	2b11      	cmp	r3, #17
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b12      	cmp	r3, #18
 8005b4c:	d130      	bne.n	8005bb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2203      	movs	r2, #3
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b84:	2201      	movs	r2, #1
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 0201 	and.w	r2, r3, #1
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	2203      	movs	r2, #3
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_Init+0xfc>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b12      	cmp	r3, #18
 8005bee:	d123      	bne.n	8005c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	08da      	lsrs	r2, r3, #3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3208      	adds	r2, #8
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	220f      	movs	r2, #15
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	08da      	lsrs	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3208      	adds	r2, #8
 8005c32:	69b9      	ldr	r1, [r7, #24]
 8005c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	2203      	movs	r2, #3
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f003 0203 	and.w	r2, r3, #3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80b4 	beq.w	8005de2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <HAL_GPIO_Init+0x308>)
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	4a5e      	ldr	r2, [pc, #376]	; (8005dfc <HAL_GPIO_Init+0x308>)
 8005c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c88:	6453      	str	r3, [r2, #68]	; 0x44
 8005c8a:	4b5c      	ldr	r3, [pc, #368]	; (8005dfc <HAL_GPIO_Init+0x308>)
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c96:	4a5a      	ldr	r2, [pc, #360]	; (8005e00 <HAL_GPIO_Init+0x30c>)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	089b      	lsrs	r3, r3, #2
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	220f      	movs	r2, #15
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a51      	ldr	r2, [pc, #324]	; (8005e04 <HAL_GPIO_Init+0x310>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02b      	beq.n	8005d1a <HAL_GPIO_Init+0x226>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a50      	ldr	r2, [pc, #320]	; (8005e08 <HAL_GPIO_Init+0x314>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d025      	beq.n	8005d16 <HAL_GPIO_Init+0x222>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a4f      	ldr	r2, [pc, #316]	; (8005e0c <HAL_GPIO_Init+0x318>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01f      	beq.n	8005d12 <HAL_GPIO_Init+0x21e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a4e      	ldr	r2, [pc, #312]	; (8005e10 <HAL_GPIO_Init+0x31c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d019      	beq.n	8005d0e <HAL_GPIO_Init+0x21a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <HAL_GPIO_Init+0x320>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_GPIO_Init+0x216>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a4c      	ldr	r2, [pc, #304]	; (8005e18 <HAL_GPIO_Init+0x324>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00d      	beq.n	8005d06 <HAL_GPIO_Init+0x212>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a4b      	ldr	r2, [pc, #300]	; (8005e1c <HAL_GPIO_Init+0x328>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <HAL_GPIO_Init+0x20e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a4a      	ldr	r2, [pc, #296]	; (8005e20 <HAL_GPIO_Init+0x32c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d101      	bne.n	8005cfe <HAL_GPIO_Init+0x20a>
 8005cfa:	2307      	movs	r3, #7
 8005cfc:	e00e      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005cfe:	2308      	movs	r3, #8
 8005d00:	e00c      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d02:	2306      	movs	r3, #6
 8005d04:	e00a      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d06:	2305      	movs	r3, #5
 8005d08:	e008      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d0a:	2304      	movs	r3, #4
 8005d0c:	e006      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e004      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e002      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <HAL_GPIO_Init+0x228>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	f002 0203 	and.w	r2, r2, #3
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	4093      	lsls	r3, r2
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d2c:	4934      	ldr	r1, [pc, #208]	; (8005e00 <HAL_GPIO_Init+0x30c>)
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	089b      	lsrs	r3, r3, #2
 8005d32:	3302      	adds	r3, #2
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d3a:	4b3a      	ldr	r3, [pc, #232]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d5e:	4a31      	ldr	r2, [pc, #196]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d64:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d88:	4a26      	ldr	r2, [pc, #152]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d8e:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	43db      	mvns	r3, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005db2:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005db8:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ddc:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <HAL_GPIO_Init+0x330>)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3301      	adds	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	f67f ae90 	bls.w	8005b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005df0:	bf00      	nop
 8005df2:	3724      	adds	r7, #36	; 0x24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40013800 	.word	0x40013800
 8005e04:	40020000 	.word	0x40020000
 8005e08:	40020400 	.word	0x40020400
 8005e0c:	40020800 	.word	0x40020800
 8005e10:	40020c00 	.word	0x40020c00
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40021400 	.word	0x40021400
 8005e1c:	40021800 	.word	0x40021800
 8005e20:	40021c00 	.word	0x40021c00
 8005e24:	40013c00 	.word	0x40013c00

08005e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	887b      	ldrh	r3, [r7, #2]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e40:	2301      	movs	r3, #1
 8005e42:	73fb      	strb	r3, [r7, #15]
 8005e44:	e001      	b.n	8005e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
 8005e64:	4613      	mov	r3, r2
 8005e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e68:	787b      	ldrb	r3, [r7, #1]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e74:	e003      	b.n	8005e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e76:	887b      	ldrh	r3, [r7, #2]
 8005e78:	041a      	lsls	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	619a      	str	r2, [r3, #24]
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695a      	ldr	r2, [r3, #20]
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	401a      	ands	r2, r3
 8005e9e:	887b      	ldrh	r3, [r7, #2]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d104      	bne.n	8005eae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ea4:	887b      	ldrh	r3, [r7, #2]
 8005ea6:	041a      	lsls	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005eac:	e002      	b.n	8005eb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ed6:	4a05      	ldr	r2, [pc, #20]	; (8005eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ed8:	88fb      	ldrh	r3, [r7, #6]
 8005eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f9ea 	bl	80052b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40013c00 	.word	0x40013c00

08005ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e25b      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d075      	beq.n	8005ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f0e:	4ba3      	ldr	r3, [pc, #652]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 030c 	and.w	r3, r3, #12
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d00c      	beq.n	8005f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f1a:	4ba0      	ldr	r3, [pc, #640]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d112      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f26:	4b9d      	ldr	r3, [pc, #628]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f32:	d10b      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	4b99      	ldr	r3, [pc, #612]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d05b      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x108>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d157      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e236      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_OscConfig+0x74>
 8005f56:	4b91      	ldr	r3, [pc, #580]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a90      	ldr	r2, [pc, #576]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e01d      	b.n	8005fa0 <HAL_RCC_OscConfig+0xb0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x98>
 8005f6e:	4b8b      	ldr	r3, [pc, #556]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a8a      	ldr	r2, [pc, #552]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4b88      	ldr	r3, [pc, #544]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a87      	ldr	r2, [pc, #540]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e00b      	b.n	8005fa0 <HAL_RCC_OscConfig+0xb0>
 8005f88:	4b84      	ldr	r3, [pc, #528]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a83      	ldr	r2, [pc, #524]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b81      	ldr	r3, [pc, #516]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a80      	ldr	r2, [pc, #512]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7ff fc42 	bl	8005830 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7ff fc3e 	bl	8005830 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e1fb      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	4b76      	ldr	r3, [pc, #472]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xc0>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7ff fc2e 	bl	8005830 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd8:	f7ff fc2a 	bl	8005830 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	; 0x64
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e1e7      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	4b6c      	ldr	r3, [pc, #432]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0xe8>
 8005ff6:	e000      	b.n	8005ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d063      	beq.n	80060ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006006:	4b65      	ldr	r3, [pc, #404]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006012:	4b62      	ldr	r3, [pc, #392]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800601a:	2b08      	cmp	r3, #8
 800601c:	d11c      	bne.n	8006058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601e:	4b5f      	ldr	r3, [pc, #380]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	4b5c      	ldr	r3, [pc, #368]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_RCC_OscConfig+0x152>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d001      	beq.n	8006042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e1bb      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006042:	4b56      	ldr	r3, [pc, #344]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4952      	ldr	r1, [pc, #328]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006056:	e03a      	b.n	80060ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006060:	4b4f      	ldr	r3, [pc, #316]	; (80061a0 <HAL_RCC_OscConfig+0x2b0>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006066:	f7ff fbe3 	bl	8005830 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606e:	f7ff fbdf 	bl	8005830 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e19c      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	4b43      	ldr	r3, [pc, #268]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4940      	ldr	r1, [pc, #256]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
 80060a0:	e015      	b.n	80060ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a2:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <HAL_RCC_OscConfig+0x2b0>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7ff fbc2 	bl	8005830 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060b0:	f7ff fbbe 	bl	8005830 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e17b      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	4b36      	ldr	r3, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d030      	beq.n	800613c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e2:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <HAL_RCC_OscConfig+0x2b4>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e8:	f7ff fba2 	bl	8005830 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f0:	f7ff fb9e 	bl	8005830 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e15b      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x200>
 800610e:	e015      	b.n	800613c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <HAL_RCC_OscConfig+0x2b4>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006116:	f7ff fb8b 	bl	8005830 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800611e:	f7ff fb87 	bl	8005830 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e144      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f0      	bne.n	800611e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a0 	beq.w	800628a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614e:	4b13      	ldr	r3, [pc, #76]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10f      	bne.n	800617a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	4b0f      	ldr	r3, [pc, #60]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a0e      	ldr	r2, [pc, #56]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_RCC_OscConfig+0x2ac>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_OscConfig+0x2b8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d121      	bne.n	80061ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <HAL_RCC_OscConfig+0x2b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <HAL_RCC_OscConfig+0x2b8>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006192:	f7ff fb4d 	bl	8005830 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006198:	e011      	b.n	80061be <HAL_RCC_OscConfig+0x2ce>
 800619a:	bf00      	nop
 800619c:	40023800 	.word	0x40023800
 80061a0:	42470000 	.word	0x42470000
 80061a4:	42470e80 	.word	0x42470e80
 80061a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ac:	f7ff fb40 	bl	8005830 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e0fd      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061be:	4b81      	ldr	r3, [pc, #516]	; (80063c4 <HAL_RCC_OscConfig+0x4d4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d106      	bne.n	80061e0 <HAL_RCC_OscConfig+0x2f0>
 80061d2:	4b7d      	ldr	r3, [pc, #500]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	4a7c      	ldr	r2, [pc, #496]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	6713      	str	r3, [r2, #112]	; 0x70
 80061de:	e01c      	b.n	800621a <HAL_RCC_OscConfig+0x32a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b05      	cmp	r3, #5
 80061e6:	d10c      	bne.n	8006202 <HAL_RCC_OscConfig+0x312>
 80061e8:	4b77      	ldr	r3, [pc, #476]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	4a76      	ldr	r2, [pc, #472]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061ee:	f043 0304 	orr.w	r3, r3, #4
 80061f2:	6713      	str	r3, [r2, #112]	; 0x70
 80061f4:	4b74      	ldr	r3, [pc, #464]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	4a73      	ldr	r2, [pc, #460]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006200:	e00b      	b.n	800621a <HAL_RCC_OscConfig+0x32a>
 8006202:	4b71      	ldr	r3, [pc, #452]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	4a70      	ldr	r2, [pc, #448]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	6713      	str	r3, [r2, #112]	; 0x70
 800620e:	4b6e      	ldr	r3, [pc, #440]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	4a6d      	ldr	r2, [pc, #436]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d015      	beq.n	800624e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7ff fb05 	bl	8005830 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622a:	f7ff fb01 	bl	8005830 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0bc      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006240:	4b61      	ldr	r3, [pc, #388]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ee      	beq.n	800622a <HAL_RCC_OscConfig+0x33a>
 800624c:	e014      	b.n	8006278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800624e:	f7ff faef 	bl	8005830 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006254:	e00a      	b.n	800626c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006256:	f7ff faeb 	bl	8005830 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	f241 3288 	movw	r2, #5000	; 0x1388
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e0a6      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800626c:	4b56      	ldr	r3, [pc, #344]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1ee      	bne.n	8006256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627e:	4b52      	ldr	r3, [pc, #328]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a51      	ldr	r2, [pc, #324]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8092 	beq.w	80063b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006294:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 030c 	and.w	r3, r3, #12
 800629c:	2b08      	cmp	r3, #8
 800629e:	d05c      	beq.n	800635a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d141      	bne.n	800632c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a8:	4b48      	ldr	r3, [pc, #288]	; (80063cc <HAL_RCC_OscConfig+0x4dc>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ae:	f7ff fabf 	bl	8005830 <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b6:	f7ff fabb 	bl	8005830 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e078      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	019b      	lsls	r3, r3, #6
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	3b01      	subs	r3, #1
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	061b      	lsls	r3, r3, #24
 80062f8:	4933      	ldr	r1, [pc, #204]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fe:	4b33      	ldr	r3, [pc, #204]	; (80063cc <HAL_RCC_OscConfig+0x4dc>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7ff fa94 	bl	8005830 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800630c:	f7ff fa90 	bl	8005830 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e04d      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631e:	4b2a      	ldr	r3, [pc, #168]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x41c>
 800632a:	e045      	b.n	80063b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632c:	4b27      	ldr	r3, [pc, #156]	; (80063cc <HAL_RCC_OscConfig+0x4dc>)
 800632e:	2200      	movs	r2, #0
 8006330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006332:	f7ff fa7d 	bl	8005830 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800633a:	f7ff fa79 	bl	8005830 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e036      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634c:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f0      	bne.n	800633a <HAL_RCC_OscConfig+0x44a>
 8006358:	e02e      	b.n	80063b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e029      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <HAL_RCC_OscConfig+0x4d8>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	429a      	cmp	r2, r3
 8006378:	d11c      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d115      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800638e:	4013      	ands	r3, r2
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006394:	4293      	cmp	r3, r2
 8006396:	d10d      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d106      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40007000 	.word	0x40007000
 80063c8:	40023800 	.word	0x40023800
 80063cc:	42470060 	.word	0x42470060

080063d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e0cc      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d90c      	bls.n	800640c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f2:	4b65      	ldr	r3, [pc, #404]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b63      	ldr	r3, [pc, #396]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0b8      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d020      	beq.n	800645a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006424:	4b59      	ldr	r3, [pc, #356]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4a58      	ldr	r2, [pc, #352]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800642e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800643c:	4b53      	ldr	r3, [pc, #332]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4a52      	ldr	r2, [pc, #328]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006448:	4b50      	ldr	r3, [pc, #320]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	494d      	ldr	r1, [pc, #308]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	4313      	orrs	r3, r2
 8006458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d044      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d107      	bne.n	800647e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646e:	4b47      	ldr	r3, [pc, #284]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d119      	bne.n	80064ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e07f      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d003      	beq.n	800648e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648a:	2b03      	cmp	r3, #3
 800648c:	d107      	bne.n	800649e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648e:	4b3f      	ldr	r3, [pc, #252]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e06f      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800649e:	4b3b      	ldr	r3, [pc, #236]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e067      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ae:	4b37      	ldr	r3, [pc, #220]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f023 0203 	bic.w	r2, r3, #3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4934      	ldr	r1, [pc, #208]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064c0:	f7ff f9b6 	bl	8005830 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c6:	e00a      	b.n	80064de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c8:	f7ff f9b2 	bl	8005830 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e04f      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064de:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 020c 	and.w	r2, r3, #12
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d1eb      	bne.n	80064c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064f0:	4b25      	ldr	r3, [pc, #148]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 030f 	and.w	r3, r3, #15
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d20c      	bcs.n	8006518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fe:	4b22      	ldr	r3, [pc, #136]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006506:	4b20      	ldr	r3, [pc, #128]	; (8006588 <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e032      	b.n	800657e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006524:	4b19      	ldr	r3, [pc, #100]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4916      	ldr	r1, [pc, #88]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	4313      	orrs	r3, r2
 8006534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006542:	4b12      	ldr	r3, [pc, #72]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	490e      	ldr	r1, [pc, #56]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006556:	f000 f821 	bl	800659c <HAL_RCC_GetSysClockFreq>
 800655a:	4601      	mov	r1, r0
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <HAL_RCC_ClockConfig+0x1c0>)
 8006568:	5cd3      	ldrb	r3, [r2, r3]
 800656a:	fa21 f303 	lsr.w	r3, r1, r3
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <HAL_RCC_ClockConfig+0x1c4>)
 8006570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006572:	4b09      	ldr	r3, [pc, #36]	; (8006598 <HAL_RCC_ClockConfig+0x1c8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff f916 	bl	80057a8 <HAL_InitTick>

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023c00 	.word	0x40023c00
 800658c:	40023800 	.word	0x40023800
 8006590:	0800b998 	.word	0x0800b998
 8006594:	2000005c 	.word	0x2000005c
 8006598:	20000060 	.word	0x20000060

0800659c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	2300      	movs	r3, #0
 80065ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065b2:	4b63      	ldr	r3, [pc, #396]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d007      	beq.n	80065ce <HAL_RCC_GetSysClockFreq+0x32>
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d008      	beq.n	80065d4 <HAL_RCC_GetSysClockFreq+0x38>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f040 80b4 	bne.w	8006730 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065c8:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065ca:	60bb      	str	r3, [r7, #8]
       break;
 80065cc:	e0b3      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ce:	4b5e      	ldr	r3, [pc, #376]	; (8006748 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80065d0:	60bb      	str	r3, [r7, #8]
      break;
 80065d2:	e0b0      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065d4:	4b5a      	ldr	r3, [pc, #360]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065de:	4b58      	ldr	r3, [pc, #352]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d04a      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ea:	4b55      	ldr	r3, [pc, #340]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	099b      	lsrs	r3, r3, #6
 80065f0:	f04f 0400 	mov.w	r4, #0
 80065f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	ea03 0501 	and.w	r5, r3, r1
 8006600:	ea04 0602 	and.w	r6, r4, r2
 8006604:	4629      	mov	r1, r5
 8006606:	4632      	mov	r2, r6
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	f04f 0400 	mov.w	r4, #0
 8006610:	0154      	lsls	r4, r2, #5
 8006612:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006616:	014b      	lsls	r3, r1, #5
 8006618:	4619      	mov	r1, r3
 800661a:	4622      	mov	r2, r4
 800661c:	1b49      	subs	r1, r1, r5
 800661e:	eb62 0206 	sbc.w	r2, r2, r6
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	f04f 0400 	mov.w	r4, #0
 800662a:	0194      	lsls	r4, r2, #6
 800662c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006630:	018b      	lsls	r3, r1, #6
 8006632:	1a5b      	subs	r3, r3, r1
 8006634:	eb64 0402 	sbc.w	r4, r4, r2
 8006638:	f04f 0100 	mov.w	r1, #0
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	00e2      	lsls	r2, r4, #3
 8006642:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006646:	00d9      	lsls	r1, r3, #3
 8006648:	460b      	mov	r3, r1
 800664a:	4614      	mov	r4, r2
 800664c:	195b      	adds	r3, r3, r5
 800664e:	eb44 0406 	adc.w	r4, r4, r6
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	0262      	lsls	r2, r4, #9
 800665c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006660:	0259      	lsls	r1, r3, #9
 8006662:	460b      	mov	r3, r1
 8006664:	4614      	mov	r4, r2
 8006666:	4618      	mov	r0, r3
 8006668:	4621      	mov	r1, r4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	461a      	mov	r2, r3
 8006672:	4623      	mov	r3, r4
 8006674:	f7fa faa8 	bl	8000bc8 <__aeabi_uldivmod>
 8006678:	4603      	mov	r3, r0
 800667a:	460c      	mov	r4, r1
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e049      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006680:	4b2f      	ldr	r3, [pc, #188]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	099b      	lsrs	r3, r3, #6
 8006686:	f04f 0400 	mov.w	r4, #0
 800668a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	ea03 0501 	and.w	r5, r3, r1
 8006696:	ea04 0602 	and.w	r6, r4, r2
 800669a:	4629      	mov	r1, r5
 800669c:	4632      	mov	r2, r6
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	f04f 0400 	mov.w	r4, #0
 80066a6:	0154      	lsls	r4, r2, #5
 80066a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066ac:	014b      	lsls	r3, r1, #5
 80066ae:	4619      	mov	r1, r3
 80066b0:	4622      	mov	r2, r4
 80066b2:	1b49      	subs	r1, r1, r5
 80066b4:	eb62 0206 	sbc.w	r2, r2, r6
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	f04f 0400 	mov.w	r4, #0
 80066c0:	0194      	lsls	r4, r2, #6
 80066c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066c6:	018b      	lsls	r3, r1, #6
 80066c8:	1a5b      	subs	r3, r3, r1
 80066ca:	eb64 0402 	sbc.w	r4, r4, r2
 80066ce:	f04f 0100 	mov.w	r1, #0
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	00e2      	lsls	r2, r4, #3
 80066d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80066dc:	00d9      	lsls	r1, r3, #3
 80066de:	460b      	mov	r3, r1
 80066e0:	4614      	mov	r4, r2
 80066e2:	195b      	adds	r3, r3, r5
 80066e4:	eb44 0406 	adc.w	r4, r4, r6
 80066e8:	f04f 0100 	mov.w	r1, #0
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	02a2      	lsls	r2, r4, #10
 80066f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80066f6:	0299      	lsls	r1, r3, #10
 80066f8:	460b      	mov	r3, r1
 80066fa:	4614      	mov	r4, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	4621      	mov	r1, r4
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f04f 0400 	mov.w	r4, #0
 8006706:	461a      	mov	r2, r3
 8006708:	4623      	mov	r3, r4
 800670a:	f7fa fa5d 	bl	8000bc8 <__aeabi_uldivmod>
 800670e:	4603      	mov	r3, r0
 8006710:	460c      	mov	r4, r1
 8006712:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	0c1b      	lsrs	r3, r3, #16
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	3301      	adds	r3, #1
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	60bb      	str	r3, [r7, #8]
      break;
 800672e:	e002      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b04      	ldr	r3, [pc, #16]	; (8006744 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006732:	60bb      	str	r3, [r7, #8]
      break;
 8006734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006736:	68bb      	ldr	r3, [r7, #8]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006740:	40023800 	.word	0x40023800
 8006744:	00f42400 	.word	0x00f42400
 8006748:	007a1200 	.word	0x007a1200

0800674c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <HAL_RCC_GetHCLKFreq+0x14>)
 8006752:	681b      	ldr	r3, [r3, #0]
}
 8006754:	4618      	mov	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	2000005c 	.word	0x2000005c

08006764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006768:	f7ff fff0 	bl	800674c <HAL_RCC_GetHCLKFreq>
 800676c:	4601      	mov	r1, r0
 800676e:	4b05      	ldr	r3, [pc, #20]	; (8006784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	0a9b      	lsrs	r3, r3, #10
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	4a03      	ldr	r2, [pc, #12]	; (8006788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800677a:	5cd3      	ldrb	r3, [r2, r3]
 800677c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40023800 	.word	0x40023800
 8006788:	0800b9a8 	.word	0x0800b9a8

0800678c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006790:	f7ff ffdc 	bl	800674c <HAL_RCC_GetHCLKFreq>
 8006794:	4601      	mov	r1, r0
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	0b5b      	lsrs	r3, r3, #13
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	4a03      	ldr	r2, [pc, #12]	; (80067b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067a2:	5cd3      	ldrb	r3, [r2, r3]
 80067a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40023800 	.word	0x40023800
 80067b0:	0800b9a8 	.word	0x0800b9a8

080067b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d035      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067dc:	4b62      	ldr	r3, [pc, #392]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067e2:	f7ff f825 	bl	8005830 <HAL_GetTick>
 80067e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067ea:	f7ff f821 	bl	8005830 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0b0      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067fc:	4b5b      	ldr	r3, [pc, #364]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f0      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	019a      	lsls	r2, r3, #6
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	071b      	lsls	r3, r3, #28
 8006814:	4955      	ldr	r1, [pc, #340]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800681c:	4b52      	ldr	r3, [pc, #328]	; (8006968 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006822:	f7ff f805 	bl	8005830 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006828:	e008      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800682a:	f7ff f801 	bl	8005830 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e090      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800683c:	4b4b      	ldr	r3, [pc, #300]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8083 	beq.w	800695c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	4b44      	ldr	r3, [pc, #272]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	4a43      	ldr	r2, [pc, #268]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006864:	6413      	str	r3, [r2, #64]	; 0x40
 8006866:	4b41      	ldr	r3, [pc, #260]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006872:	4b3f      	ldr	r3, [pc, #252]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a3e      	ldr	r2, [pc, #248]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800687e:	f7fe ffd7 	bl	8005830 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006884:	e008      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006886:	f7fe ffd3 	bl	8005830 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e062      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006898:	4b35      	ldr	r3, [pc, #212]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068a4:	4b31      	ldr	r3, [pc, #196]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02f      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d028      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c2:	4b2a      	ldr	r3, [pc, #168]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068cc:	4b29      	ldr	r3, [pc, #164]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068d2:	4b28      	ldr	r3, [pc, #160]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068d8:	4a24      	ldr	r2, [pc, #144]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068de:	4b23      	ldr	r3, [pc, #140]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d114      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fe ffa1 	bl	8005830 <HAL_GetTick>
 80068ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fe ff9d 	bl	8005830 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e02a      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	4b18      	ldr	r3, [pc, #96]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ee      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006920:	d10d      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	490d      	ldr	r1, [pc, #52]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006938:	4313      	orrs	r3, r2
 800693a:	608b      	str	r3, [r1, #8]
 800693c:	e005      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4a0a      	ldr	r2, [pc, #40]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006944:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800694c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006956:	4905      	ldr	r1, [pc, #20]	; (800696c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	42470068 	.word	0x42470068
 800696c:	40023800 	.word	0x40023800
 8006970:	40007000 	.word	0x40007000
 8006974:	42470e40 	.word	0x42470e40

08006978 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e083      	b.n	8006a92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7f5b      	ldrb	r3, [r3, #29]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe fce0 	bl	8005360 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	22ca      	movs	r2, #202	; 0xca
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2253      	movs	r2, #83	; 0x53
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 faa8 	bl	8006f0c <RTC_EnterInitMode>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d008      	beq.n	80069d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ff      	movs	r2, #255	; 0xff
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e05e      	b.n	8006a92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6899      	ldr	r1, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	68d2      	ldr	r2, [r2, #12]
 8006a0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6919      	ldr	r1, [r3, #16]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	041a      	lsls	r2, r3, #16
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10e      	bne.n	8006a60 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa3a 	bl	8006ebc <HAL_RTC_WaitForSynchro>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e018      	b.n	8006a92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	22ff      	movs	r2, #255	; 0xff
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006a90:	2300      	movs	r3, #0
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a9a:	b590      	push	{r4, r7, lr}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	7f1b      	ldrb	r3, [r3, #28]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_RTC_SetTime+0x1c>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e0aa      	b.n	8006c0c <HAL_RTC_SetTime+0x172>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d126      	bne.n	8006b16 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d102      	bne.n	8006adc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fa3f 	bl	8006f64 <RTC_ByteToBcd2>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fa38 	bl	8006f64 <RTC_ByteToBcd2>
 8006af4:	4603      	mov	r3, r0
 8006af6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006af8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	789b      	ldrb	r3, [r3, #2]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fa30 	bl	8006f64 <RTC_ByteToBcd2>
 8006b04:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	78db      	ldrb	r3, [r3, #3]
 8006b0e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e018      	b.n	8006b48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	78db      	ldrb	r3, [r3, #3]
 8006b42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	22ca      	movs	r2, #202	; 0xca
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2253      	movs	r2, #83	; 0x53
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f9d7 	bl	8006f0c <RTC_EnterInitMode>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e047      	b.n	8006c0c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b8a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d111      	bne.n	8006bf6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 f972 	bl	8006ebc <HAL_RTC_WaitForSynchro>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	22ff      	movs	r2, #255	; 0xff
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2204      	movs	r2, #4
 8006bea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e00a      	b.n	8006c0c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	22ff      	movs	r2, #255	; 0xff
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd90      	pop	{r4, r7, pc}

08006c14 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	0c1b      	lsrs	r3, r3, #16
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11a      	bne.n	8006cc6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 f983 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f97a 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	789b      	ldrb	r3, [r3, #2]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f971 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	7f1b      	ldrb	r3, [r3, #28]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_RTC_SetDate+0x1c>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e094      	b.n	8006e16 <HAL_RTC_SetDate+0x146>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10e      	bne.n	8006d1c <HAL_RTC_SetDate+0x4c>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	330a      	adds	r3, #10
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d11c      	bne.n	8006d5c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	78db      	ldrb	r3, [r3, #3]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f91c 	bl	8006f64 <RTC_ByteToBcd2>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	785b      	ldrb	r3, [r3, #1]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f915 	bl	8006f64 <RTC_ByteToBcd2>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d3e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	789b      	ldrb	r3, [r3, #2]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f90d 	bl	8006f64 <RTC_ByteToBcd2>
 8006d4a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d4c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e00e      	b.n	8006d7a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	78db      	ldrb	r3, [r3, #3]
 8006d60:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	785b      	ldrb	r3, [r3, #1]
 8006d66:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d68:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d6e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	22ca      	movs	r2, #202	; 0xca
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2253      	movs	r2, #83	; 0x53
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f8be 	bl	8006f0c <RTC_EnterInitMode>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	22ff      	movs	r2, #255	; 0xff
 8006d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2204      	movs	r2, #4
 8006da2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e033      	b.n	8006e16 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dbc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dcc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d111      	bne.n	8006e00 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f86d 	bl	8006ebc <HAL_RTC_WaitForSynchro>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00b      	beq.n	8006e00 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	22ff      	movs	r2, #255	; 0xff
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2204      	movs	r2, #4
 8006df4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e00a      	b.n	8006e16 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	22ff      	movs	r2, #255	; 0xff
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}

08006e1e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	0b5b      	lsrs	r3, r3, #13
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d11a      	bne.n	8006eb2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	78db      	ldrb	r3, [r3, #3]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f88d 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006e86:	4603      	mov	r3, r0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f884 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	789b      	ldrb	r3, [r3, #2]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f87b 	bl	8006fa0 <RTC_Bcd2ToByte>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	461a      	mov	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ed6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed8:	f7fe fcaa 	bl	8005830 <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ede:	e009      	b.n	8006ef4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006ee0:	f7fe fca6 	bl	8005830 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eee:	d901      	bls.n	8006ef4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e007      	b.n	8006f04 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0ee      	beq.n	8006ee0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d119      	bne.n	8006f5a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f30:	f7fe fc7e 	bl	8005830 <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f36:	e009      	b.n	8006f4c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f38:	f7fe fc7a 	bl	8005830 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f46:	d901      	bls.n	8006f4c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e007      	b.n	8006f5c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0ee      	beq.n	8006f38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006f72:	e005      	b.n	8006f80 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	3b0a      	subs	r3, #10
 8006f7e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d8f6      	bhi.n	8006f74 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	b2db      	uxtb	r3, r3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	b2db      	uxtb	r3, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7f1b      	ldrb	r3, [r3, #28]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e030      	b.n	8007054 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	22ca      	movs	r2, #202	; 0xca
 8007004:	625a      	str	r2, [r3, #36]	; 0x24
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2253      	movs	r2, #83	; 0x53
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800701c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6899      	ldr	r1, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800703c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	22ff      	movs	r2, #255	; 0xff
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e056      	b.n	8007120 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7fe f97d 	bl	800538c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	ea42 0103 	orr.w	r1, r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	f003 0104 	and.w	r1, r3, #4
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800710e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_SPI_Transmit+0x22>
 8007146:	2302      	movs	r3, #2
 8007148:	e11e      	b.n	8007388 <HAL_SPI_Transmit+0x260>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007152:	f7fe fb6d 	bl	8005830 <HAL_GetTick>
 8007156:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d002      	beq.n	800716e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007168:	2302      	movs	r3, #2
 800716a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800716c:	e103      	b.n	8007376 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_SPI_Transmit+0x52>
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800717e:	e0fa      	b.n	8007376 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2203      	movs	r2, #3
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	88fa      	ldrh	r2, [r7, #6]
 800719e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c6:	d107      	bne.n	80071d8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d007      	beq.n	80071f6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fe:	d14b      	bne.n	8007298 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_SPI_Transmit+0xe6>
 8007208:	8afb      	ldrh	r3, [r7, #22]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d13e      	bne.n	800728c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	881a      	ldrh	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	1c9a      	adds	r2, r3, #2
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007232:	e02b      	b.n	800728c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d112      	bne.n	8007268 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	881a      	ldrh	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	1c9a      	adds	r2, r3, #2
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	86da      	strh	r2, [r3, #54]	; 0x36
 8007266:	e011      	b.n	800728c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007268:	f7fe fae2 	bl	8005830 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d803      	bhi.n	8007280 <HAL_SPI_Transmit+0x158>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d102      	bne.n	8007286 <HAL_SPI_Transmit+0x15e>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	77fb      	strb	r3, [r7, #31]
          goto error;
 800728a:	e074      	b.n	8007376 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1ce      	bne.n	8007234 <HAL_SPI_Transmit+0x10c>
 8007296:	e04c      	b.n	8007332 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_SPI_Transmit+0x17e>
 80072a0:	8afb      	ldrh	r3, [r7, #22]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d140      	bne.n	8007328 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072cc:	e02c      	b.n	8007328 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d113      	bne.n	8007304 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	7812      	ldrb	r2, [r2, #0]
 80072e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	86da      	strh	r2, [r3, #54]	; 0x36
 8007302:	e011      	b.n	8007328 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007304:	f7fe fa94 	bl	8005830 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d803      	bhi.n	800731c <HAL_SPI_Transmit+0x1f4>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d102      	bne.n	8007322 <HAL_SPI_Transmit+0x1fa>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007326:	e026      	b.n	8007376 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1cd      	bne.n	80072ce <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fa44 	bl	80077c4 <SPI_EndRxTxTransaction>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	77fb      	strb	r3, [r7, #31]
 8007372:	e000      	b.n	8007376 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007386:	7ffb      	ldrb	r3, [r7, #31]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08c      	sub	sp, #48	; 0x30
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800739e:	2301      	movs	r3, #1
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x26>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e18a      	b.n	80076cc <HAL_SPI_TransmitReceive+0x33c>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073be:	f7fe fa37 	bl	8005830 <HAL_GetTick>
 80073c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d00f      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x70>
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e6:	d107      	bne.n	80073f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <HAL_SPI_TransmitReceive+0x68>
 80073f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d003      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80073f8:	2302      	movs	r3, #2
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073fe:	e15b      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_SPI_TransmitReceive+0x82>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_SPI_TransmitReceive+0x82>
 800740c:	887b      	ldrh	r3, [r7, #2]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007418:	e14e      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b04      	cmp	r3, #4
 8007424:	d003      	beq.n	800742e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2205      	movs	r2, #5
 800742a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	887a      	ldrh	r2, [r7, #2]
 800743e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	887a      	ldrh	r2, [r7, #2]
 8007456:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d007      	beq.n	8007482 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748a:	d178      	bne.n	800757e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_TransmitReceive+0x10a>
 8007494:	8b7b      	ldrh	r3, [r7, #26]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d166      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	881a      	ldrh	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	1c9a      	adds	r2, r3, #2
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074be:	e053      	b.n	8007568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d11b      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x176>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d016      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x176>
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d113      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d119      	bne.n	8007548 <HAL_SPI_TransmitReceive+0x1b8>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d014      	beq.n	8007548 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007528:	b292      	uxth	r2, r2
 800752a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	1c9a      	adds	r2, r3, #2
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007544:	2301      	movs	r3, #1
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007548:	f7fe f972 	bl	8005830 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007554:	429a      	cmp	r2, r3
 8007556:	d807      	bhi.n	8007568 <HAL_SPI_TransmitReceive+0x1d8>
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d003      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007566:	e0a7      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1a6      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x130>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1a1      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x130>
 800757c:	e07c      	b.n	8007678 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_SPI_TransmitReceive+0x1fc>
 8007586:	8b7b      	ldrh	r3, [r7, #26]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d16b      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	7812      	ldrb	r2, [r2, #0]
 8007598:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b2:	e057      	b.n	8007664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d11c      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x26c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d017      	beq.n	80075fc <HAL_SPI_TransmitReceive+0x26c>
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d114      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b01      	cmp	r3, #1
 8007608:	d119      	bne.n	800763e <HAL_SPI_TransmitReceive+0x2ae>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d014      	beq.n	800763e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	1c5a      	adds	r2, r3, #1
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800763a:	2301      	movs	r3, #1
 800763c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800763e:	f7fe f8f7 	bl	8005830 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800764a:	429a      	cmp	r2, r3
 800764c:	d803      	bhi.n	8007656 <HAL_SPI_TransmitReceive+0x2c6>
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d102      	bne.n	800765c <HAL_SPI_TransmitReceive+0x2cc>
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007662:	e029      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1a2      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x224>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d19d      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f8a1 	bl	80077c4 <SPI_EndRxTxTransaction>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007694:	e010      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	e000      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80076b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3730      	adds	r7, #48	; 0x30
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e2:	b2db      	uxtb	r3, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007700:	e04c      	b.n	800779c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d048      	beq.n	800779c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800770a:	f7fe f891 	bl	8005830 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d902      	bls.n	8007720 <SPI_WaitFlagStateUntilTimeout+0x30>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d13d      	bne.n	800779c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800772e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007738:	d111      	bne.n	800775e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007742:	d004      	beq.n	800774e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d107      	bne.n	800775e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800775c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007766:	d10f      	bne.n	8007788 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e00f      	b.n	80077bc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4013      	ands	r3, r2
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	bf0c      	ite	eq
 80077ac:	2301      	moveq	r3, #1
 80077ae:	2300      	movne	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	461a      	mov	r2, r3
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d1a3      	bne.n	8007702 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077d0:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <SPI_EndRxTxTransaction+0x7c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <SPI_EndRxTxTransaction+0x80>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	0d5b      	lsrs	r3, r3, #21
 80077dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
 80077e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ee:	d112      	bne.n	8007816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2200      	movs	r2, #0
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff ff78 	bl	80076f0 <SPI_WaitFlagStateUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d016      	beq.n	8007834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	f043 0220 	orr.w	r2, r3, #32
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e00f      	b.n	8007836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	3b01      	subs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b80      	cmp	r3, #128	; 0x80
 800782e:	d0f2      	beq.n	8007816 <SPI_EndRxTxTransaction+0x52>
 8007830:	e000      	b.n	8007834 <SPI_EndRxTxTransaction+0x70>
        break;
 8007832:	bf00      	nop
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	2000005c 	.word	0x2000005c
 8007844:	165e9f81 	.word	0x165e9f81

08007848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e01d      	b.n	8007896 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fd fdd4 	bl	800541c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f000 fb72 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b06      	cmp	r3, #6
 80078be:	d007      	beq.n	80078d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b06      	cmp	r3, #6
 800790e:	d007      	beq.n	8007920 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e01d      	b.n	800797c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d106      	bne.n	800795a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f815 	bl	8007984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2202      	movs	r2, #2
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3304      	adds	r3, #4
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f000 faff 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fdca 	bl	8008544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <HAL_TIM_PWM_Start+0x74>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_TIM_PWM_Start+0x2c>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a14      	ldr	r2, [pc, #80]	; (8007a10 <HAL_TIM_PWM_Start+0x78>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d101      	bne.n	80079c8 <HAL_TIM_PWM_Start+0x30>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <HAL_TIM_PWM_Start+0x32>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d007      	beq.n	8007a00 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40010400 	.word	0x40010400

08007a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0302 	and.w	r3, r3, #2
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0202 	mvn.w	r2, #2
 8007a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa6b 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa5d 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa6e 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0204 	mvn.w	r2, #4
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa41 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa33 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa44 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d122      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d11b      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0208 	mvn.w	r2, #8
 8007ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f003 0303 	and.w	r3, r3, #3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa17 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007b04:	e005      	b.n	8007b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa09 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa1a 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b10      	cmp	r3, #16
 8007b24:	d122      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d11b      	bne.n	8007b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0210 	mvn.w	r2, #16
 8007b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2208      	movs	r2, #8
 8007b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f9ed 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007b58:	e005      	b.n	8007b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9df 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f9f0 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10e      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d107      	bne.n	8007b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f06f 0201 	mvn.w	r2, #1
 8007b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fd fb6a 	bl	800526c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba2:	2b80      	cmp	r3, #128	; 0x80
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb0:	2b80      	cmp	r3, #128	; 0x80
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fd6c 	bl	800869c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d107      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9b5 	bl	8007f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d10e      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d107      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0220 	mvn.w	r2, #32
 8007c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd36 	bl	8008688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e0b4      	b.n	8007da8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b0c      	cmp	r3, #12
 8007c52:	f200 809f 	bhi.w	8007d94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c91 	.word	0x08007c91
 8007c60:	08007d95 	.word	0x08007d95
 8007c64:	08007d95 	.word	0x08007d95
 8007c68:	08007d95 	.word	0x08007d95
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007d95 	.word	0x08007d95
 8007c74:	08007d95 	.word	0x08007d95
 8007c78:	08007d95 	.word	0x08007d95
 8007c7c:	08007d13 	.word	0x08007d13
 8007c80:	08007d95 	.word	0x08007d95
 8007c84:	08007d95 	.word	0x08007d95
 8007c88:	08007d95 	.word	0x08007d95
 8007c8c:	08007d53 	.word	0x08007d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fa0a 	bl	80080b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0208 	orr.w	r2, r2, #8
 8007caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0204 	bic.w	r2, r2, #4
 8007cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6999      	ldr	r1, [r3, #24]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	619a      	str	r2, [r3, #24]
      break;
 8007cce:	e062      	b.n	8007d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fa5a 	bl	8008190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6999      	ldr	r1, [r3, #24]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	021a      	lsls	r2, r3, #8
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	619a      	str	r2, [r3, #24]
      break;
 8007d10:	e041      	b.n	8007d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 faaf 	bl	800827c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0208 	orr.w	r2, r2, #8
 8007d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0204 	bic.w	r2, r2, #4
 8007d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69d9      	ldr	r1, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	61da      	str	r2, [r3, #28]
      break;
 8007d50:	e021      	b.n	8007d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fb03 	bl	8008364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69da      	ldr	r2, [r3, #28]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69d9      	ldr	r1, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	021a      	lsls	r2, r3, #8
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	61da      	str	r2, [r3, #28]
      break;
 8007d92:	e000      	b.n	8007d96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007d94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIM_ConfigClockSource+0x18>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e0a6      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x166>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d067      	beq.n	8007ed0 <HAL_TIM_ConfigClockSource+0x120>
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	d80b      	bhi.n	8007e1c <HAL_TIM_ConfigClockSource+0x6c>
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d073      	beq.n	8007ef0 <HAL_TIM_ConfigClockSource+0x140>
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d802      	bhi.n	8007e12 <HAL_TIM_ConfigClockSource+0x62>
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d06f      	beq.n	8007ef0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007e10:	e078      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d06c      	beq.n	8007ef0 <HAL_TIM_ConfigClockSource+0x140>
 8007e16:	2b30      	cmp	r3, #48	; 0x30
 8007e18:	d06a      	beq.n	8007ef0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007e1a:	e073      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e1c:	2b70      	cmp	r3, #112	; 0x70
 8007e1e:	d00d      	beq.n	8007e3c <HAL_TIM_ConfigClockSource+0x8c>
 8007e20:	2b70      	cmp	r3, #112	; 0x70
 8007e22:	d804      	bhi.n	8007e2e <HAL_TIM_ConfigClockSource+0x7e>
 8007e24:	2b50      	cmp	r3, #80	; 0x50
 8007e26:	d033      	beq.n	8007e90 <HAL_TIM_ConfigClockSource+0xe0>
 8007e28:	2b60      	cmp	r3, #96	; 0x60
 8007e2a:	d041      	beq.n	8007eb0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007e2c:	e06a      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d066      	beq.n	8007f02 <HAL_TIM_ConfigClockSource+0x152>
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d017      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007e3a:	e063      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	6899      	ldr	r1, [r3, #8]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f000 fb5a 	bl	8008504 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	609a      	str	r2, [r3, #8]
      break;
 8007e68:	e04c      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6899      	ldr	r1, [r3, #8]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f000 fb43 	bl	8008504 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e8c:	609a      	str	r2, [r3, #8]
      break;
 8007e8e:	e039      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6859      	ldr	r1, [r3, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f000 fab7 	bl	8008410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2150      	movs	r1, #80	; 0x50
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fb10 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 8007eae:	e029      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	6859      	ldr	r1, [r3, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f000 fad6 	bl	800846e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2160      	movs	r1, #96	; 0x60
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fb00 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 8007ece:	e019      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6859      	ldr	r1, [r3, #4]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	461a      	mov	r2, r3
 8007ede:	f000 fa97 	bl	8008410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2140      	movs	r1, #64	; 0x40
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 faf0 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 8007eee:	e009      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f000 fae7 	bl	80084ce <TIM_ITRx_SetConfig>
      break;
 8007f00:	e000      	b.n	8007f04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a40      	ldr	r2, [pc, #256]	; (8008084 <TIM_Base_SetConfig+0x114>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3d      	ldr	r2, [pc, #244]	; (8008088 <TIM_Base_SetConfig+0x118>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a3c      	ldr	r2, [pc, #240]	; (800808c <TIM_Base_SetConfig+0x11c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a3b      	ldr	r2, [pc, #236]	; (8008090 <TIM_Base_SetConfig+0x120>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a3a      	ldr	r2, [pc, #232]	; (8008094 <TIM_Base_SetConfig+0x124>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d108      	bne.n	8007fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2f      	ldr	r2, [pc, #188]	; (8008084 <TIM_Base_SetConfig+0x114>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d02b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd0:	d027      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <TIM_Base_SetConfig+0x118>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d023      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2b      	ldr	r2, [pc, #172]	; (800808c <TIM_Base_SetConfig+0x11c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01f      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a2a      	ldr	r2, [pc, #168]	; (8008090 <TIM_Base_SetConfig+0x120>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a29      	ldr	r2, [pc, #164]	; (8008094 <TIM_Base_SetConfig+0x124>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d017      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a28      	ldr	r2, [pc, #160]	; (8008098 <TIM_Base_SetConfig+0x128>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a27      	ldr	r2, [pc, #156]	; (800809c <TIM_Base_SetConfig+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00f      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <TIM_Base_SetConfig+0x130>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00b      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a25      	ldr	r2, [pc, #148]	; (80080a4 <TIM_Base_SetConfig+0x134>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d007      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a24      	ldr	r2, [pc, #144]	; (80080a8 <TIM_Base_SetConfig+0x138>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d003      	beq.n	8008022 <TIM_Base_SetConfig+0xb2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a23      	ldr	r2, [pc, #140]	; (80080ac <TIM_Base_SetConfig+0x13c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d108      	bne.n	8008034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a0a      	ldr	r2, [pc, #40]	; (8008084 <TIM_Base_SetConfig+0x114>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_Base_SetConfig+0xf8>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a0c      	ldr	r2, [pc, #48]	; (8008094 <TIM_Base_SetConfig+0x124>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d103      	bne.n	8008070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	615a      	str	r2, [r3, #20]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40010000 	.word	0x40010000
 8008088:	40000400 	.word	0x40000400
 800808c:	40000800 	.word	0x40000800
 8008090:	40000c00 	.word	0x40000c00
 8008094:	40010400 	.word	0x40010400
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800
 80080a4:	40001800 	.word	0x40001800
 80080a8:	40001c00 	.word	0x40001c00
 80080ac:	40002000 	.word	0x40002000

080080b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f023 0201 	bic.w	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f023 0302 	bic.w	r3, r3, #2
 80080f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a20      	ldr	r2, [pc, #128]	; (8008188 <TIM_OC1_SetConfig+0xd8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_OC1_SetConfig+0x64>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1f      	ldr	r2, [pc, #124]	; (800818c <TIM_OC1_SetConfig+0xdc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d10c      	bne.n	800812e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0308 	bic.w	r3, r3, #8
 800811a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 0304 	bic.w	r3, r3, #4
 800812c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <TIM_OC1_SetConfig+0xd8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_OC1_SetConfig+0x8e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a14      	ldr	r2, [pc, #80]	; (800818c <TIM_OC1_SetConfig+0xdc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d111      	bne.n	8008162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800814c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	621a      	str	r2, [r3, #32]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	40010000 	.word	0x40010000
 800818c:	40010400 	.word	0x40010400

08008190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	f023 0210 	bic.w	r2, r3, #16
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0320 	bic.w	r3, r3, #32
 80081da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a22      	ldr	r2, [pc, #136]	; (8008274 <TIM_OC2_SetConfig+0xe4>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d003      	beq.n	80081f8 <TIM_OC2_SetConfig+0x68>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a21      	ldr	r2, [pc, #132]	; (8008278 <TIM_OC2_SetConfig+0xe8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d10d      	bne.n	8008214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a17      	ldr	r2, [pc, #92]	; (8008274 <TIM_OC2_SetConfig+0xe4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_OC2_SetConfig+0x94>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a16      	ldr	r2, [pc, #88]	; (8008278 <TIM_OC2_SetConfig+0xe8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d113      	bne.n	800824c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800822a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	621a      	str	r2, [r3, #32]
}
 8008266:	bf00      	nop
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	40010000 	.word	0x40010000
 8008278:	40010400 	.word	0x40010400

0800827c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0303 	bic.w	r3, r3, #3
 80082b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	021b      	lsls	r3, r3, #8
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a21      	ldr	r2, [pc, #132]	; (800835c <TIM_OC3_SetConfig+0xe0>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_OC3_SetConfig+0x66>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a20      	ldr	r2, [pc, #128]	; (8008360 <TIM_OC3_SetConfig+0xe4>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d10d      	bne.n	80082fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a16      	ldr	r2, [pc, #88]	; (800835c <TIM_OC3_SetConfig+0xe0>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d003      	beq.n	800830e <TIM_OC3_SetConfig+0x92>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a15      	ldr	r2, [pc, #84]	; (8008360 <TIM_OC3_SetConfig+0xe4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d113      	bne.n	8008336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	621a      	str	r2, [r3, #32]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	40010000 	.word	0x40010000
 8008360:	40010400 	.word	0x40010400

08008364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800839a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	031b      	lsls	r3, r3, #12
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <TIM_OC4_SetConfig+0xa4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_OC4_SetConfig+0x68>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a11      	ldr	r2, [pc, #68]	; (800840c <TIM_OC4_SetConfig+0xa8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d109      	bne.n	80083e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	019b      	lsls	r3, r3, #6
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	621a      	str	r2, [r3, #32]
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40010000 	.word	0x40010000
 800840c:	40010400 	.word	0x40010400

08008410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f023 0201 	bic.w	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800843a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4313      	orrs	r3, r2
 8008444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f023 030a 	bic.w	r3, r3, #10
 800844c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800846e:	b480      	push	{r7}
 8008470:	b087      	sub	sp, #28
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	f023 0210 	bic.w	r2, r3, #16
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	031b      	lsls	r3, r3, #12
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f043 0307 	orr.w	r3, r3, #7
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	609a      	str	r2, [r3, #8]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800851e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	021a      	lsls	r2, r3, #8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	431a      	orrs	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4313      	orrs	r3, r2
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	609a      	str	r2, [r3, #8]
}
 8008538:	bf00      	nop
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f003 031f 	and.w	r3, r3, #31
 8008556:	2201      	movs	r2, #1
 8008558:	fa02 f303 	lsl.w	r3, r2, r3
 800855c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a1a      	ldr	r2, [r3, #32]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	43db      	mvns	r3, r3
 8008566:	401a      	ands	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1a      	ldr	r2, [r3, #32]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	fa01 f303 	lsl.w	r3, r1, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
	...

08008590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e05a      	b.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a21      	ldr	r2, [pc, #132]	; (800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d022      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f4:	d01d      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a1d      	ldr	r2, [pc, #116]	; (8008670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d018      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a1b      	ldr	r2, [pc, #108]	; (8008674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1a      	ldr	r2, [pc, #104]	; (8008678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a18      	ldr	r2, [pc, #96]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a17      	ldr	r2, [pc, #92]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a15      	ldr	r2, [pc, #84]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d10c      	bne.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4313      	orrs	r3, r2
 8008642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40010000 	.word	0x40010000
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800
 8008678:	40000c00 	.word	0x40000c00
 800867c:	40010400 	.word	0x40010400
 8008680:	40014000 	.word	0x40014000
 8008684:	40001800 	.word	0x40001800

08008688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e03f      	b.n	8008742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fc ff32 	bl	8005540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2224      	movs	r2, #36	; 0x24
 80086e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fbf1 	bl	8008edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b088      	sub	sp, #32
 800874e:	af02      	add	r7, sp, #8
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b20      	cmp	r3, #32
 8008768:	f040 8083 	bne.w	8008872 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_UART_Transmit+0x2e>
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e07b      	b.n	8008874 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_UART_Transmit+0x40>
 8008786:	2302      	movs	r3, #2
 8008788:	e074      	b.n	8008874 <HAL_UART_Transmit+0x12a>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2221      	movs	r2, #33	; 0x21
 800879c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80087a0:	f7fd f846 	bl	8005830 <HAL_GetTick>
 80087a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	88fa      	ldrh	r2, [r7, #6]
 80087aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	88fa      	ldrh	r2, [r7, #6]
 80087b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80087ba:	e042      	b.n	8008842 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	3b01      	subs	r3, #1
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d2:	d122      	bne.n	800881a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 fa10 	bl	8008c04 <UART_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e042      	b.n	8008874 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008800:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	3302      	adds	r3, #2
 800880e:	60bb      	str	r3, [r7, #8]
 8008810:	e017      	b.n	8008842 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3301      	adds	r3, #1
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	e013      	b.n	8008842 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2200      	movs	r2, #0
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f9ed 	bl	8008c04 <UART_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e01f      	b.n	8008874 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	60ba      	str	r2, [r7, #8]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1b7      	bne.n	80087bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2200      	movs	r2, #0
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f9d4 	bl	8008c04 <UART_WaitOnFlagUntilTimeout>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e006      	b.n	8008874 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	e000      	b.n	8008874 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008872:	2302      	movs	r3, #2
  }
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	4613      	mov	r3, r2
 800888a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b20      	cmp	r3, #32
 800889a:	f040 8090 	bne.w	80089be <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_UART_Receive+0x2e>
 80088a4:	88fb      	ldrh	r3, [r7, #6]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e088      	b.n	80089c0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_UART_Receive+0x40>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e081      	b.n	80089c0 <HAL_UART_Receive+0x144>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2222      	movs	r2, #34	; 0x22
 80088ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088d2:	f7fc ffad 	bl	8005830 <HAL_GetTick>
 80088d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	88fa      	ldrh	r2, [r7, #6]
 80088dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	88fa      	ldrh	r2, [r7, #6]
 80088e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80088ec:	e05c      	b.n	80089a8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008904:	d12b      	bne.n	800895e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2200      	movs	r2, #0
 800890e:	2120      	movs	r1, #32
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f977 	bl	8008c04 <UART_WaitOnFlagUntilTimeout>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e04f      	b.n	80089c0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	b29a      	uxth	r2, r3
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3302      	adds	r3, #2
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	e030      	b.n	80089a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	b29b      	uxth	r3, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	b29a      	uxth	r2, r3
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	3301      	adds	r3, #1
 800895a:	60bb      	str	r3, [r7, #8]
 800895c:	e024      	b.n	80089a8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2200      	movs	r2, #0
 8008966:	2120      	movs	r1, #32
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 f94b 	bl	8008c04 <UART_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e023      	b.n	80089c0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d108      	bne.n	8008992 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	60ba      	str	r2, [r7, #8]
 800898c:	b2ca      	uxtb	r2, r1
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e00a      	b.n	80089a8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	1c59      	adds	r1, r3, #1
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d19d      	bne.n	80088ee <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e000      	b.n	80089c0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80089be:	2302      	movs	r3, #2
  }
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10d      	bne.n	8008a1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d008      	beq.n	8008a1a <HAL_UART_IRQHandler+0x52>
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9e0 	bl	8008dd8 <UART_Receive_IT>
      return;
 8008a18:	e0d1      	b.n	8008bbe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80b0 	beq.w	8008b82 <HAL_UART_IRQHandler+0x1ba>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d105      	bne.n	8008a38 <HAL_UART_IRQHandler+0x70>
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80a5 	beq.w	8008b82 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <HAL_UART_IRQHandler+0x90>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d005      	beq.n	8008a58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a50:	f043 0201 	orr.w	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <HAL_UART_IRQHandler+0xb0>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	f043 0202 	orr.w	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <HAL_UART_IRQHandler+0xd0>
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	f043 0204 	orr.w	r2, r3, #4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00f      	beq.n	8008ac2 <HAL_UART_IRQHandler+0xfa>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d104      	bne.n	8008ab6 <HAL_UART_IRQHandler+0xee>
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aba:	f043 0208 	orr.w	r2, r3, #8
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d078      	beq.n	8008bbc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x11c>
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f97a 	bl	8008dd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <HAL_UART_IRQHandler+0x144>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d031      	beq.n	8008b70 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f8c3 	bl	8008c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	d123      	bne.n	8008b68 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b2e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d013      	beq.n	8008b60 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	4a21      	ldr	r2, [pc, #132]	; (8008bc4 <HAL_UART_IRQHandler+0x1fc>)
 8008b3e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fc ffb2 	bl	8005aae <HAL_DMA_Abort_IT>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d016      	beq.n	8008b7e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b5e:	e00e      	b.n	8008b7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f845 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b66:	e00a      	b.n	8008b7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f841 	bl	8008bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b6e:	e006      	b.n	8008b7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f83d 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008b7c:	e01e      	b.n	8008bbc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b7e:	bf00      	nop
    return;
 8008b80:	e01c      	b.n	8008bbc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1d6>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f8b0 	bl	8008cfc <UART_Transmit_IT>
    return;
 8008b9c:	e00f      	b.n	8008bbe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <HAL_UART_IRQHandler+0x1f6>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8f8 	bl	8008da8 <UART_EndTransmit_IT>
    return;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <HAL_UART_IRQHandler+0x1f6>
    return;
 8008bbc:	bf00      	nop
  }
}
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	08008cd5 	.word	0x08008cd5

08008bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c14:	e02c      	b.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1c:	d028      	beq.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c24:	f7fc fe04 	bl	8005830 <HAL_GetTick>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d21d      	bcs.n	8008c70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695a      	ldr	r2, [r3, #20]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0201 	bic.w	r2, r2, #1
 8008c52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e00f      	b.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	bf0c      	ite	eq
 8008c80:	2301      	moveq	r3, #1
 8008c82:	2300      	movne	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d0c3      	beq.n	8008c16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695a      	ldr	r2, [r3, #20]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0201 	bic.w	r2, r2, #1
 8008cbe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff ff7e 	bl	8008bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b21      	cmp	r3, #33	; 0x21
 8008d0e:	d144      	bne.n	8008d9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d18:	d11a      	bne.n	8008d50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	1c9a      	adds	r2, r3, #2
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	621a      	str	r2, [r3, #32]
 8008d42:	e00e      	b.n	8008d62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	621a      	str	r2, [r3, #32]
 8008d4e:	e008      	b.n	8008d62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	1c59      	adds	r1, r3, #1
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	6211      	str	r1, [r2, #32]
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10f      	bne.n	8008d96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e000      	b.n	8008d9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
  }
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fefd 	bl	8008bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b22      	cmp	r3, #34	; 0x22
 8008dea:	d171      	bne.n	8008ed0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df4:	d123      	bne.n	8008e3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10e      	bne.n	8008e22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e20:	e029      	b.n	8008e76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e3c:	e01b      	b.n	8008e76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6858      	ldr	r0, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	1c59      	adds	r1, r3, #1
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6291      	str	r1, [r2, #40]	; 0x28
 8008e56:	b2c2      	uxtb	r2, r0
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	e00c      	b.n	8008e76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	1c58      	adds	r0, r3, #1
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	6288      	str	r0, [r1, #40]	; 0x28
 8008e6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4619      	mov	r1, r3
 8008e84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d120      	bne.n	8008ecc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0220 	bic.w	r2, r2, #32
 8008e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695a      	ldr	r2, [r3, #20]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0201 	bic.w	r2, r2, #1
 8008eb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fe8a 	bl	8008bdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e002      	b.n	8008ed2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e000      	b.n	8008ed2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ed0:	2302      	movs	r3, #2
  }
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f1e:	f023 030c 	bic.w	r3, r3, #12
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	6812      	ldr	r2, [r2, #0]
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f4a:	f040 818b 	bne.w	8009264 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4ac1      	ldr	r2, [pc, #772]	; (8009258 <UART_SetConfig+0x37c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d005      	beq.n	8008f64 <UART_SetConfig+0x88>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4abf      	ldr	r2, [pc, #764]	; (800925c <UART_SetConfig+0x380>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f040 80bd 	bne.w	80090de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f64:	f7fd fc12 	bl	800678c <HAL_RCC_GetPCLK2Freq>
 8008f68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	461d      	mov	r5, r3
 8008f6e:	f04f 0600 	mov.w	r6, #0
 8008f72:	46a8      	mov	r8, r5
 8008f74:	46b1      	mov	r9, r6
 8008f76:	eb18 0308 	adds.w	r3, r8, r8
 8008f7a:	eb49 0409 	adc.w	r4, r9, r9
 8008f7e:	4698      	mov	r8, r3
 8008f80:	46a1      	mov	r9, r4
 8008f82:	eb18 0805 	adds.w	r8, r8, r5
 8008f86:	eb49 0906 	adc.w	r9, r9, r6
 8008f8a:	f04f 0100 	mov.w	r1, #0
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f9e:	4688      	mov	r8, r1
 8008fa0:	4691      	mov	r9, r2
 8008fa2:	eb18 0005 	adds.w	r0, r8, r5
 8008fa6:	eb49 0106 	adc.w	r1, r9, r6
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	461d      	mov	r5, r3
 8008fb0:	f04f 0600 	mov.w	r6, #0
 8008fb4:	196b      	adds	r3, r5, r5
 8008fb6:	eb46 0406 	adc.w	r4, r6, r6
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	f7f7 fe03 	bl	8000bc8 <__aeabi_uldivmod>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	460c      	mov	r4, r1
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4ba5      	ldr	r3, [pc, #660]	; (8009260 <UART_SetConfig+0x384>)
 8008fca:	fba3 2302 	umull	r2, r3, r3, r2
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	461d      	mov	r5, r3
 8008fd8:	f04f 0600 	mov.w	r6, #0
 8008fdc:	46a9      	mov	r9, r5
 8008fde:	46b2      	mov	sl, r6
 8008fe0:	eb19 0309 	adds.w	r3, r9, r9
 8008fe4:	eb4a 040a 	adc.w	r4, sl, sl
 8008fe8:	4699      	mov	r9, r3
 8008fea:	46a2      	mov	sl, r4
 8008fec:	eb19 0905 	adds.w	r9, r9, r5
 8008ff0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ff4:	f04f 0100 	mov.w	r1, #0
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009008:	4689      	mov	r9, r1
 800900a:	4692      	mov	sl, r2
 800900c:	eb19 0005 	adds.w	r0, r9, r5
 8009010:	eb4a 0106 	adc.w	r1, sl, r6
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	461d      	mov	r5, r3
 800901a:	f04f 0600 	mov.w	r6, #0
 800901e:	196b      	adds	r3, r5, r5
 8009020:	eb46 0406 	adc.w	r4, r6, r6
 8009024:	461a      	mov	r2, r3
 8009026:	4623      	mov	r3, r4
 8009028:	f7f7 fdce 	bl	8000bc8 <__aeabi_uldivmod>
 800902c:	4603      	mov	r3, r0
 800902e:	460c      	mov	r4, r1
 8009030:	461a      	mov	r2, r3
 8009032:	4b8b      	ldr	r3, [pc, #556]	; (8009260 <UART_SetConfig+0x384>)
 8009034:	fba3 1302 	umull	r1, r3, r3, r2
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	2164      	movs	r1, #100	; 0x64
 800903c:	fb01 f303 	mul.w	r3, r1, r3
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	3332      	adds	r3, #50	; 0x32
 8009046:	4a86      	ldr	r2, [pc, #536]	; (8009260 <UART_SetConfig+0x384>)
 8009048:	fba2 2303 	umull	r2, r3, r2, r3
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009054:	4498      	add	r8, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	461d      	mov	r5, r3
 800905a:	f04f 0600 	mov.w	r6, #0
 800905e:	46a9      	mov	r9, r5
 8009060:	46b2      	mov	sl, r6
 8009062:	eb19 0309 	adds.w	r3, r9, r9
 8009066:	eb4a 040a 	adc.w	r4, sl, sl
 800906a:	4699      	mov	r9, r3
 800906c:	46a2      	mov	sl, r4
 800906e:	eb19 0905 	adds.w	r9, r9, r5
 8009072:	eb4a 0a06 	adc.w	sl, sl, r6
 8009076:	f04f 0100 	mov.w	r1, #0
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800908a:	4689      	mov	r9, r1
 800908c:	4692      	mov	sl, r2
 800908e:	eb19 0005 	adds.w	r0, r9, r5
 8009092:	eb4a 0106 	adc.w	r1, sl, r6
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	461d      	mov	r5, r3
 800909c:	f04f 0600 	mov.w	r6, #0
 80090a0:	196b      	adds	r3, r5, r5
 80090a2:	eb46 0406 	adc.w	r4, r6, r6
 80090a6:	461a      	mov	r2, r3
 80090a8:	4623      	mov	r3, r4
 80090aa:	f7f7 fd8d 	bl	8000bc8 <__aeabi_uldivmod>
 80090ae:	4603      	mov	r3, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	461a      	mov	r2, r3
 80090b4:	4b6a      	ldr	r3, [pc, #424]	; (8009260 <UART_SetConfig+0x384>)
 80090b6:	fba3 1302 	umull	r1, r3, r3, r2
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2164      	movs	r1, #100	; 0x64
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	3332      	adds	r3, #50	; 0x32
 80090c8:	4a65      	ldr	r2, [pc, #404]	; (8009260 <UART_SetConfig+0x384>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	f003 0207 	and.w	r2, r3, #7
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4442      	add	r2, r8
 80090da:	609a      	str	r2, [r3, #8]
 80090dc:	e26f      	b.n	80095be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090de:	f7fd fb41 	bl	8006764 <HAL_RCC_GetPCLK1Freq>
 80090e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	461d      	mov	r5, r3
 80090e8:	f04f 0600 	mov.w	r6, #0
 80090ec:	46a8      	mov	r8, r5
 80090ee:	46b1      	mov	r9, r6
 80090f0:	eb18 0308 	adds.w	r3, r8, r8
 80090f4:	eb49 0409 	adc.w	r4, r9, r9
 80090f8:	4698      	mov	r8, r3
 80090fa:	46a1      	mov	r9, r4
 80090fc:	eb18 0805 	adds.w	r8, r8, r5
 8009100:	eb49 0906 	adc.w	r9, r9, r6
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009118:	4688      	mov	r8, r1
 800911a:	4691      	mov	r9, r2
 800911c:	eb18 0005 	adds.w	r0, r8, r5
 8009120:	eb49 0106 	adc.w	r1, r9, r6
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	461d      	mov	r5, r3
 800912a:	f04f 0600 	mov.w	r6, #0
 800912e:	196b      	adds	r3, r5, r5
 8009130:	eb46 0406 	adc.w	r4, r6, r6
 8009134:	461a      	mov	r2, r3
 8009136:	4623      	mov	r3, r4
 8009138:	f7f7 fd46 	bl	8000bc8 <__aeabi_uldivmod>
 800913c:	4603      	mov	r3, r0
 800913e:	460c      	mov	r4, r1
 8009140:	461a      	mov	r2, r3
 8009142:	4b47      	ldr	r3, [pc, #284]	; (8009260 <UART_SetConfig+0x384>)
 8009144:	fba3 2302 	umull	r2, r3, r3, r2
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	461d      	mov	r5, r3
 8009152:	f04f 0600 	mov.w	r6, #0
 8009156:	46a9      	mov	r9, r5
 8009158:	46b2      	mov	sl, r6
 800915a:	eb19 0309 	adds.w	r3, r9, r9
 800915e:	eb4a 040a 	adc.w	r4, sl, sl
 8009162:	4699      	mov	r9, r3
 8009164:	46a2      	mov	sl, r4
 8009166:	eb19 0905 	adds.w	r9, r9, r5
 800916a:	eb4a 0a06 	adc.w	sl, sl, r6
 800916e:	f04f 0100 	mov.w	r1, #0
 8009172:	f04f 0200 	mov.w	r2, #0
 8009176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800917a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800917e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009182:	4689      	mov	r9, r1
 8009184:	4692      	mov	sl, r2
 8009186:	eb19 0005 	adds.w	r0, r9, r5
 800918a:	eb4a 0106 	adc.w	r1, sl, r6
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	461d      	mov	r5, r3
 8009194:	f04f 0600 	mov.w	r6, #0
 8009198:	196b      	adds	r3, r5, r5
 800919a:	eb46 0406 	adc.w	r4, r6, r6
 800919e:	461a      	mov	r2, r3
 80091a0:	4623      	mov	r3, r4
 80091a2:	f7f7 fd11 	bl	8000bc8 <__aeabi_uldivmod>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	461a      	mov	r2, r3
 80091ac:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <UART_SetConfig+0x384>)
 80091ae:	fba3 1302 	umull	r1, r3, r3, r2
 80091b2:	095b      	lsrs	r3, r3, #5
 80091b4:	2164      	movs	r1, #100	; 0x64
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	3332      	adds	r3, #50	; 0x32
 80091c0:	4a27      	ldr	r2, [pc, #156]	; (8009260 <UART_SetConfig+0x384>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091ce:	4498      	add	r8, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	461d      	mov	r5, r3
 80091d4:	f04f 0600 	mov.w	r6, #0
 80091d8:	46a9      	mov	r9, r5
 80091da:	46b2      	mov	sl, r6
 80091dc:	eb19 0309 	adds.w	r3, r9, r9
 80091e0:	eb4a 040a 	adc.w	r4, sl, sl
 80091e4:	4699      	mov	r9, r3
 80091e6:	46a2      	mov	sl, r4
 80091e8:	eb19 0905 	adds.w	r9, r9, r5
 80091ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80091f0:	f04f 0100 	mov.w	r1, #0
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009204:	4689      	mov	r9, r1
 8009206:	4692      	mov	sl, r2
 8009208:	eb19 0005 	adds.w	r0, r9, r5
 800920c:	eb4a 0106 	adc.w	r1, sl, r6
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	461d      	mov	r5, r3
 8009216:	f04f 0600 	mov.w	r6, #0
 800921a:	196b      	adds	r3, r5, r5
 800921c:	eb46 0406 	adc.w	r4, r6, r6
 8009220:	461a      	mov	r2, r3
 8009222:	4623      	mov	r3, r4
 8009224:	f7f7 fcd0 	bl	8000bc8 <__aeabi_uldivmod>
 8009228:	4603      	mov	r3, r0
 800922a:	460c      	mov	r4, r1
 800922c:	461a      	mov	r2, r3
 800922e:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <UART_SetConfig+0x384>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a07      	ldr	r2, [pc, #28]	; (8009260 <UART_SetConfig+0x384>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	f003 0207 	and.w	r2, r3, #7
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4442      	add	r2, r8
 8009254:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009256:	e1b2      	b.n	80095be <UART_SetConfig+0x6e2>
 8009258:	40011000 	.word	0x40011000
 800925c:	40011400 	.word	0x40011400
 8009260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4ad7      	ldr	r2, [pc, #860]	; (80095c8 <UART_SetConfig+0x6ec>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d005      	beq.n	800927a <UART_SetConfig+0x39e>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4ad6      	ldr	r2, [pc, #856]	; (80095cc <UART_SetConfig+0x6f0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	f040 80d1 	bne.w	800941c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800927a:	f7fd fa87 	bl	800678c <HAL_RCC_GetPCLK2Freq>
 800927e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	469a      	mov	sl, r3
 8009284:	f04f 0b00 	mov.w	fp, #0
 8009288:	46d0      	mov	r8, sl
 800928a:	46d9      	mov	r9, fp
 800928c:	eb18 0308 	adds.w	r3, r8, r8
 8009290:	eb49 0409 	adc.w	r4, r9, r9
 8009294:	4698      	mov	r8, r3
 8009296:	46a1      	mov	r9, r4
 8009298:	eb18 080a 	adds.w	r8, r8, sl
 800929c:	eb49 090b 	adc.w	r9, r9, fp
 80092a0:	f04f 0100 	mov.w	r1, #0
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092b4:	4688      	mov	r8, r1
 80092b6:	4691      	mov	r9, r2
 80092b8:	eb1a 0508 	adds.w	r5, sl, r8
 80092bc:	eb4b 0609 	adc.w	r6, fp, r9
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	4619      	mov	r1, r3
 80092c6:	f04f 0200 	mov.w	r2, #0
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	f04f 0400 	mov.w	r4, #0
 80092d2:	0094      	lsls	r4, r2, #2
 80092d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092d8:	008b      	lsls	r3, r1, #2
 80092da:	461a      	mov	r2, r3
 80092dc:	4623      	mov	r3, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	4631      	mov	r1, r6
 80092e2:	f7f7 fc71 	bl	8000bc8 <__aeabi_uldivmod>
 80092e6:	4603      	mov	r3, r0
 80092e8:	460c      	mov	r4, r1
 80092ea:	461a      	mov	r2, r3
 80092ec:	4bb8      	ldr	r3, [pc, #736]	; (80095d0 <UART_SetConfig+0x6f4>)
 80092ee:	fba3 2302 	umull	r2, r3, r3, r2
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	469b      	mov	fp, r3
 80092fc:	f04f 0c00 	mov.w	ip, #0
 8009300:	46d9      	mov	r9, fp
 8009302:	46e2      	mov	sl, ip
 8009304:	eb19 0309 	adds.w	r3, r9, r9
 8009308:	eb4a 040a 	adc.w	r4, sl, sl
 800930c:	4699      	mov	r9, r3
 800930e:	46a2      	mov	sl, r4
 8009310:	eb19 090b 	adds.w	r9, r9, fp
 8009314:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009318:	f04f 0100 	mov.w	r1, #0
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009324:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009328:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800932c:	4689      	mov	r9, r1
 800932e:	4692      	mov	sl, r2
 8009330:	eb1b 0509 	adds.w	r5, fp, r9
 8009334:	eb4c 060a 	adc.w	r6, ip, sl
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4619      	mov	r1, r3
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	f04f 0300 	mov.w	r3, #0
 8009346:	f04f 0400 	mov.w	r4, #0
 800934a:	0094      	lsls	r4, r2, #2
 800934c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009350:	008b      	lsls	r3, r1, #2
 8009352:	461a      	mov	r2, r3
 8009354:	4623      	mov	r3, r4
 8009356:	4628      	mov	r0, r5
 8009358:	4631      	mov	r1, r6
 800935a:	f7f7 fc35 	bl	8000bc8 <__aeabi_uldivmod>
 800935e:	4603      	mov	r3, r0
 8009360:	460c      	mov	r4, r1
 8009362:	461a      	mov	r2, r3
 8009364:	4b9a      	ldr	r3, [pc, #616]	; (80095d0 <UART_SetConfig+0x6f4>)
 8009366:	fba3 1302 	umull	r1, r3, r3, r2
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	2164      	movs	r1, #100	; 0x64
 800936e:	fb01 f303 	mul.w	r3, r1, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	3332      	adds	r3, #50	; 0x32
 8009378:	4a95      	ldr	r2, [pc, #596]	; (80095d0 <UART_SetConfig+0x6f4>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009384:	4498      	add	r8, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	469b      	mov	fp, r3
 800938a:	f04f 0c00 	mov.w	ip, #0
 800938e:	46d9      	mov	r9, fp
 8009390:	46e2      	mov	sl, ip
 8009392:	eb19 0309 	adds.w	r3, r9, r9
 8009396:	eb4a 040a 	adc.w	r4, sl, sl
 800939a:	4699      	mov	r9, r3
 800939c:	46a2      	mov	sl, r4
 800939e:	eb19 090b 	adds.w	r9, r9, fp
 80093a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093a6:	f04f 0100 	mov.w	r1, #0
 80093aa:	f04f 0200 	mov.w	r2, #0
 80093ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093ba:	4689      	mov	r9, r1
 80093bc:	4692      	mov	sl, r2
 80093be:	eb1b 0509 	adds.w	r5, fp, r9
 80093c2:	eb4c 060a 	adc.w	r6, ip, sl
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4619      	mov	r1, r3
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	f04f 0400 	mov.w	r4, #0
 80093d8:	0094      	lsls	r4, r2, #2
 80093da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093de:	008b      	lsls	r3, r1, #2
 80093e0:	461a      	mov	r2, r3
 80093e2:	4623      	mov	r3, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	4631      	mov	r1, r6
 80093e8:	f7f7 fbee 	bl	8000bc8 <__aeabi_uldivmod>
 80093ec:	4603      	mov	r3, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b77      	ldr	r3, [pc, #476]	; (80095d0 <UART_SetConfig+0x6f4>)
 80093f4:	fba3 1302 	umull	r1, r3, r3, r2
 80093f8:	095b      	lsrs	r3, r3, #5
 80093fa:	2164      	movs	r1, #100	; 0x64
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	3332      	adds	r3, #50	; 0x32
 8009406:	4a72      	ldr	r2, [pc, #456]	; (80095d0 <UART_SetConfig+0x6f4>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	f003 020f 	and.w	r2, r3, #15
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4442      	add	r2, r8
 8009418:	609a      	str	r2, [r3, #8]
 800941a:	e0d0      	b.n	80095be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800941c:	f7fd f9a2 	bl	8006764 <HAL_RCC_GetPCLK1Freq>
 8009420:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	469a      	mov	sl, r3
 8009426:	f04f 0b00 	mov.w	fp, #0
 800942a:	46d0      	mov	r8, sl
 800942c:	46d9      	mov	r9, fp
 800942e:	eb18 0308 	adds.w	r3, r8, r8
 8009432:	eb49 0409 	adc.w	r4, r9, r9
 8009436:	4698      	mov	r8, r3
 8009438:	46a1      	mov	r9, r4
 800943a:	eb18 080a 	adds.w	r8, r8, sl
 800943e:	eb49 090b 	adc.w	r9, r9, fp
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	f04f 0200 	mov.w	r2, #0
 800944a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800944e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009452:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009456:	4688      	mov	r8, r1
 8009458:	4691      	mov	r9, r2
 800945a:	eb1a 0508 	adds.w	r5, sl, r8
 800945e:	eb4b 0609 	adc.w	r6, fp, r9
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	4619      	mov	r1, r3
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	f04f 0400 	mov.w	r4, #0
 8009474:	0094      	lsls	r4, r2, #2
 8009476:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800947a:	008b      	lsls	r3, r1, #2
 800947c:	461a      	mov	r2, r3
 800947e:	4623      	mov	r3, r4
 8009480:	4628      	mov	r0, r5
 8009482:	4631      	mov	r1, r6
 8009484:	f7f7 fba0 	bl	8000bc8 <__aeabi_uldivmod>
 8009488:	4603      	mov	r3, r0
 800948a:	460c      	mov	r4, r1
 800948c:	461a      	mov	r2, r3
 800948e:	4b50      	ldr	r3, [pc, #320]	; (80095d0 <UART_SetConfig+0x6f4>)
 8009490:	fba3 2302 	umull	r2, r3, r3, r2
 8009494:	095b      	lsrs	r3, r3, #5
 8009496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	469b      	mov	fp, r3
 800949e:	f04f 0c00 	mov.w	ip, #0
 80094a2:	46d9      	mov	r9, fp
 80094a4:	46e2      	mov	sl, ip
 80094a6:	eb19 0309 	adds.w	r3, r9, r9
 80094aa:	eb4a 040a 	adc.w	r4, sl, sl
 80094ae:	4699      	mov	r9, r3
 80094b0:	46a2      	mov	sl, r4
 80094b2:	eb19 090b 	adds.w	r9, r9, fp
 80094b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094ba:	f04f 0100 	mov.w	r1, #0
 80094be:	f04f 0200 	mov.w	r2, #0
 80094c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094ce:	4689      	mov	r9, r1
 80094d0:	4692      	mov	sl, r2
 80094d2:	eb1b 0509 	adds.w	r5, fp, r9
 80094d6:	eb4c 060a 	adc.w	r6, ip, sl
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	f04f 0400 	mov.w	r4, #0
 80094ec:	0094      	lsls	r4, r2, #2
 80094ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094f2:	008b      	lsls	r3, r1, #2
 80094f4:	461a      	mov	r2, r3
 80094f6:	4623      	mov	r3, r4
 80094f8:	4628      	mov	r0, r5
 80094fa:	4631      	mov	r1, r6
 80094fc:	f7f7 fb64 	bl	8000bc8 <__aeabi_uldivmod>
 8009500:	4603      	mov	r3, r0
 8009502:	460c      	mov	r4, r1
 8009504:	461a      	mov	r2, r3
 8009506:	4b32      	ldr	r3, [pc, #200]	; (80095d0 <UART_SetConfig+0x6f4>)
 8009508:	fba3 1302 	umull	r1, r3, r3, r2
 800950c:	095b      	lsrs	r3, r3, #5
 800950e:	2164      	movs	r1, #100	; 0x64
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	3332      	adds	r3, #50	; 0x32
 800951a:	4a2d      	ldr	r2, [pc, #180]	; (80095d0 <UART_SetConfig+0x6f4>)
 800951c:	fba2 2303 	umull	r2, r3, r2, r3
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009526:	4498      	add	r8, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	469b      	mov	fp, r3
 800952c:	f04f 0c00 	mov.w	ip, #0
 8009530:	46d9      	mov	r9, fp
 8009532:	46e2      	mov	sl, ip
 8009534:	eb19 0309 	adds.w	r3, r9, r9
 8009538:	eb4a 040a 	adc.w	r4, sl, sl
 800953c:	4699      	mov	r9, r3
 800953e:	46a2      	mov	sl, r4
 8009540:	eb19 090b 	adds.w	r9, r9, fp
 8009544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009548:	f04f 0100 	mov.w	r1, #0
 800954c:	f04f 0200 	mov.w	r2, #0
 8009550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800955c:	4689      	mov	r9, r1
 800955e:	4692      	mov	sl, r2
 8009560:	eb1b 0509 	adds.w	r5, fp, r9
 8009564:	eb4c 060a 	adc.w	r6, ip, sl
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	4619      	mov	r1, r3
 800956e:	f04f 0200 	mov.w	r2, #0
 8009572:	f04f 0300 	mov.w	r3, #0
 8009576:	f04f 0400 	mov.w	r4, #0
 800957a:	0094      	lsls	r4, r2, #2
 800957c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009580:	008b      	lsls	r3, r1, #2
 8009582:	461a      	mov	r2, r3
 8009584:	4623      	mov	r3, r4
 8009586:	4628      	mov	r0, r5
 8009588:	4631      	mov	r1, r6
 800958a:	f7f7 fb1d 	bl	8000bc8 <__aeabi_uldivmod>
 800958e:	4603      	mov	r3, r0
 8009590:	460c      	mov	r4, r1
 8009592:	461a      	mov	r2, r3
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <UART_SetConfig+0x6f4>)
 8009596:	fba3 1302 	umull	r1, r3, r3, r2
 800959a:	095b      	lsrs	r3, r3, #5
 800959c:	2164      	movs	r1, #100	; 0x64
 800959e:	fb01 f303 	mul.w	r3, r1, r3
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	3332      	adds	r3, #50	; 0x32
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <UART_SetConfig+0x6f4>)
 80095aa:	fba2 2303 	umull	r2, r3, r2, r3
 80095ae:	095b      	lsrs	r3, r3, #5
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4442      	add	r2, r8
 80095ba:	609a      	str	r2, [r3, #8]
}
 80095bc:	e7ff      	b.n	80095be <UART_SetConfig+0x6e2>
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	40011000 	.word	0x40011000
 80095cc:	40011400 	.word	0x40011400
 80095d0:	51eb851f 	.word	0x51eb851f

080095d4 <__errno>:
 80095d4:	4b01      	ldr	r3, [pc, #4]	; (80095dc <__errno+0x8>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000068 	.word	0x20000068

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	4e0d      	ldr	r6, [pc, #52]	; (8009618 <__libc_init_array+0x38>)
 80095e4:	4c0d      	ldr	r4, [pc, #52]	; (800961c <__libc_init_array+0x3c>)
 80095e6:	1ba4      	subs	r4, r4, r6
 80095e8:	10a4      	asrs	r4, r4, #2
 80095ea:	2500      	movs	r5, #0
 80095ec:	42a5      	cmp	r5, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	4e0b      	ldr	r6, [pc, #44]	; (8009620 <__libc_init_array+0x40>)
 80095f2:	4c0c      	ldr	r4, [pc, #48]	; (8009624 <__libc_init_array+0x44>)
 80095f4:	f002 f86c 	bl	800b6d0 <_init>
 80095f8:	1ba4      	subs	r4, r4, r6
 80095fa:	10a4      	asrs	r4, r4, #2
 80095fc:	2500      	movs	r5, #0
 80095fe:	42a5      	cmp	r5, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009608:	4798      	blx	r3
 800960a:	3501      	adds	r5, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009612:	4798      	blx	r3
 8009614:	3501      	adds	r5, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	0800bc18 	.word	0x0800bc18
 800961c:	0800bc18 	.word	0x0800bc18
 8009620:	0800bc18 	.word	0x0800bc18
 8009624:	0800bc1c 	.word	0x0800bc1c

08009628 <memset>:
 8009628:	4402      	add	r2, r0
 800962a:	4603      	mov	r3, r0
 800962c:	4293      	cmp	r3, r2
 800962e:	d100      	bne.n	8009632 <memset+0xa>
 8009630:	4770      	bx	lr
 8009632:	f803 1b01 	strb.w	r1, [r3], #1
 8009636:	e7f9      	b.n	800962c <memset+0x4>

08009638 <__cvt>:
 8009638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	ec55 4b10 	vmov	r4, r5, d0
 8009640:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009642:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009646:	2d00      	cmp	r5, #0
 8009648:	460e      	mov	r6, r1
 800964a:	4691      	mov	r9, r2
 800964c:	4619      	mov	r1, r3
 800964e:	bfb8      	it	lt
 8009650:	4622      	movlt	r2, r4
 8009652:	462b      	mov	r3, r5
 8009654:	f027 0720 	bic.w	r7, r7, #32
 8009658:	bfbb      	ittet	lt
 800965a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800965e:	461d      	movlt	r5, r3
 8009660:	2300      	movge	r3, #0
 8009662:	232d      	movlt	r3, #45	; 0x2d
 8009664:	bfb8      	it	lt
 8009666:	4614      	movlt	r4, r2
 8009668:	2f46      	cmp	r7, #70	; 0x46
 800966a:	700b      	strb	r3, [r1, #0]
 800966c:	d004      	beq.n	8009678 <__cvt+0x40>
 800966e:	2f45      	cmp	r7, #69	; 0x45
 8009670:	d100      	bne.n	8009674 <__cvt+0x3c>
 8009672:	3601      	adds	r6, #1
 8009674:	2102      	movs	r1, #2
 8009676:	e000      	b.n	800967a <__cvt+0x42>
 8009678:	2103      	movs	r1, #3
 800967a:	ab03      	add	r3, sp, #12
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	ab02      	add	r3, sp, #8
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	4632      	mov	r2, r6
 8009684:	4653      	mov	r3, sl
 8009686:	ec45 4b10 	vmov	d0, r4, r5
 800968a:	f000 fced 	bl	800a068 <_dtoa_r>
 800968e:	2f47      	cmp	r7, #71	; 0x47
 8009690:	4680      	mov	r8, r0
 8009692:	d102      	bne.n	800969a <__cvt+0x62>
 8009694:	f019 0f01 	tst.w	r9, #1
 8009698:	d026      	beq.n	80096e8 <__cvt+0xb0>
 800969a:	2f46      	cmp	r7, #70	; 0x46
 800969c:	eb08 0906 	add.w	r9, r8, r6
 80096a0:	d111      	bne.n	80096c6 <__cvt+0x8e>
 80096a2:	f898 3000 	ldrb.w	r3, [r8]
 80096a6:	2b30      	cmp	r3, #48	; 0x30
 80096a8:	d10a      	bne.n	80096c0 <__cvt+0x88>
 80096aa:	2200      	movs	r2, #0
 80096ac:	2300      	movs	r3, #0
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f7 fa19 	bl	8000ae8 <__aeabi_dcmpeq>
 80096b6:	b918      	cbnz	r0, 80096c0 <__cvt+0x88>
 80096b8:	f1c6 0601 	rsb	r6, r6, #1
 80096bc:	f8ca 6000 	str.w	r6, [sl]
 80096c0:	f8da 3000 	ldr.w	r3, [sl]
 80096c4:	4499      	add	r9, r3
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	4620      	mov	r0, r4
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7f7 fa0b 	bl	8000ae8 <__aeabi_dcmpeq>
 80096d2:	b938      	cbnz	r0, 80096e4 <__cvt+0xac>
 80096d4:	2230      	movs	r2, #48	; 0x30
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	454b      	cmp	r3, r9
 80096da:	d205      	bcs.n	80096e8 <__cvt+0xb0>
 80096dc:	1c59      	adds	r1, r3, #1
 80096de:	9103      	str	r1, [sp, #12]
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e7f8      	b.n	80096d6 <__cvt+0x9e>
 80096e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ec:	eba3 0308 	sub.w	r3, r3, r8
 80096f0:	4640      	mov	r0, r8
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	b004      	add	sp, #16
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080096fa <__exponent>:
 80096fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096fc:	2900      	cmp	r1, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	bfba      	itte	lt
 8009702:	4249      	neglt	r1, r1
 8009704:	232d      	movlt	r3, #45	; 0x2d
 8009706:	232b      	movge	r3, #43	; 0x2b
 8009708:	2909      	cmp	r1, #9
 800970a:	f804 2b02 	strb.w	r2, [r4], #2
 800970e:	7043      	strb	r3, [r0, #1]
 8009710:	dd20      	ble.n	8009754 <__exponent+0x5a>
 8009712:	f10d 0307 	add.w	r3, sp, #7
 8009716:	461f      	mov	r7, r3
 8009718:	260a      	movs	r6, #10
 800971a:	fb91 f5f6 	sdiv	r5, r1, r6
 800971e:	fb06 1115 	mls	r1, r6, r5, r1
 8009722:	3130      	adds	r1, #48	; 0x30
 8009724:	2d09      	cmp	r5, #9
 8009726:	f803 1c01 	strb.w	r1, [r3, #-1]
 800972a:	f103 32ff 	add.w	r2, r3, #4294967295
 800972e:	4629      	mov	r1, r5
 8009730:	dc09      	bgt.n	8009746 <__exponent+0x4c>
 8009732:	3130      	adds	r1, #48	; 0x30
 8009734:	3b02      	subs	r3, #2
 8009736:	f802 1c01 	strb.w	r1, [r2, #-1]
 800973a:	42bb      	cmp	r3, r7
 800973c:	4622      	mov	r2, r4
 800973e:	d304      	bcc.n	800974a <__exponent+0x50>
 8009740:	1a10      	subs	r0, r2, r0
 8009742:	b003      	add	sp, #12
 8009744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009746:	4613      	mov	r3, r2
 8009748:	e7e7      	b.n	800971a <__exponent+0x20>
 800974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974e:	f804 2b01 	strb.w	r2, [r4], #1
 8009752:	e7f2      	b.n	800973a <__exponent+0x40>
 8009754:	2330      	movs	r3, #48	; 0x30
 8009756:	4419      	add	r1, r3
 8009758:	7083      	strb	r3, [r0, #2]
 800975a:	1d02      	adds	r2, r0, #4
 800975c:	70c1      	strb	r1, [r0, #3]
 800975e:	e7ef      	b.n	8009740 <__exponent+0x46>

08009760 <_printf_float>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	b08d      	sub	sp, #52	; 0x34
 8009766:	460c      	mov	r4, r1
 8009768:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800976c:	4616      	mov	r6, r2
 800976e:	461f      	mov	r7, r3
 8009770:	4605      	mov	r5, r0
 8009772:	f001 fa31 	bl	800abd8 <_localeconv_r>
 8009776:	6803      	ldr	r3, [r0, #0]
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	4618      	mov	r0, r3
 800977c:	f7f6 fd32 	bl	80001e4 <strlen>
 8009780:	2300      	movs	r3, #0
 8009782:	930a      	str	r3, [sp, #40]	; 0x28
 8009784:	f8d8 3000 	ldr.w	r3, [r8]
 8009788:	9005      	str	r0, [sp, #20]
 800978a:	3307      	adds	r3, #7
 800978c:	f023 0307 	bic.w	r3, r3, #7
 8009790:	f103 0208 	add.w	r2, r3, #8
 8009794:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009798:	f8d4 b000 	ldr.w	fp, [r4]
 800979c:	f8c8 2000 	str.w	r2, [r8]
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097a8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80097ac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097b0:	9307      	str	r3, [sp, #28]
 80097b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	4ba7      	ldr	r3, [pc, #668]	; (8009a58 <_printf_float+0x2f8>)
 80097bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097c0:	f7f7 f9c4 	bl	8000b4c <__aeabi_dcmpun>
 80097c4:	bb70      	cbnz	r0, 8009824 <_printf_float+0xc4>
 80097c6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ca:	4ba3      	ldr	r3, [pc, #652]	; (8009a58 <_printf_float+0x2f8>)
 80097cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097d0:	f7f7 f99e 	bl	8000b10 <__aeabi_dcmple>
 80097d4:	bb30      	cbnz	r0, 8009824 <_printf_float+0xc4>
 80097d6:	2200      	movs	r2, #0
 80097d8:	2300      	movs	r3, #0
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7f7 f98d 	bl	8000afc <__aeabi_dcmplt>
 80097e2:	b110      	cbz	r0, 80097ea <_printf_float+0x8a>
 80097e4:	232d      	movs	r3, #45	; 0x2d
 80097e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ea:	4a9c      	ldr	r2, [pc, #624]	; (8009a5c <_printf_float+0x2fc>)
 80097ec:	4b9c      	ldr	r3, [pc, #624]	; (8009a60 <_printf_float+0x300>)
 80097ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80097f2:	bf8c      	ite	hi
 80097f4:	4690      	movhi	r8, r2
 80097f6:	4698      	movls	r8, r3
 80097f8:	2303      	movs	r3, #3
 80097fa:	f02b 0204 	bic.w	r2, fp, #4
 80097fe:	6123      	str	r3, [r4, #16]
 8009800:	6022      	str	r2, [r4, #0]
 8009802:	f04f 0900 	mov.w	r9, #0
 8009806:	9700      	str	r7, [sp, #0]
 8009808:	4633      	mov	r3, r6
 800980a:	aa0b      	add	r2, sp, #44	; 0x2c
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 f9e6 	bl	8009be0 <_printf_common>
 8009814:	3001      	adds	r0, #1
 8009816:	f040 808d 	bne.w	8009934 <_printf_float+0x1d4>
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	b00d      	add	sp, #52	; 0x34
 8009820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009824:	4642      	mov	r2, r8
 8009826:	464b      	mov	r3, r9
 8009828:	4640      	mov	r0, r8
 800982a:	4649      	mov	r1, r9
 800982c:	f7f7 f98e 	bl	8000b4c <__aeabi_dcmpun>
 8009830:	b110      	cbz	r0, 8009838 <_printf_float+0xd8>
 8009832:	4a8c      	ldr	r2, [pc, #560]	; (8009a64 <_printf_float+0x304>)
 8009834:	4b8c      	ldr	r3, [pc, #560]	; (8009a68 <_printf_float+0x308>)
 8009836:	e7da      	b.n	80097ee <_printf_float+0x8e>
 8009838:	6861      	ldr	r1, [r4, #4]
 800983a:	1c4b      	adds	r3, r1, #1
 800983c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009840:	a80a      	add	r0, sp, #40	; 0x28
 8009842:	d13e      	bne.n	80098c2 <_printf_float+0x162>
 8009844:	2306      	movs	r3, #6
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	2300      	movs	r3, #0
 800984a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800984e:	ab09      	add	r3, sp, #36	; 0x24
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	ec49 8b10 	vmov	d0, r8, r9
 8009856:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800985a:	6022      	str	r2, [r4, #0]
 800985c:	f8cd a004 	str.w	sl, [sp, #4]
 8009860:	6861      	ldr	r1, [r4, #4]
 8009862:	4628      	mov	r0, r5
 8009864:	f7ff fee8 	bl	8009638 <__cvt>
 8009868:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800986c:	2b47      	cmp	r3, #71	; 0x47
 800986e:	4680      	mov	r8, r0
 8009870:	d109      	bne.n	8009886 <_printf_float+0x126>
 8009872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009874:	1cd8      	adds	r0, r3, #3
 8009876:	db02      	blt.n	800987e <_printf_float+0x11e>
 8009878:	6862      	ldr	r2, [r4, #4]
 800987a:	4293      	cmp	r3, r2
 800987c:	dd47      	ble.n	800990e <_printf_float+0x1ae>
 800987e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009882:	fa5f fa8a 	uxtb.w	sl, sl
 8009886:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800988a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800988c:	d824      	bhi.n	80098d8 <_printf_float+0x178>
 800988e:	3901      	subs	r1, #1
 8009890:	4652      	mov	r2, sl
 8009892:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009896:	9109      	str	r1, [sp, #36]	; 0x24
 8009898:	f7ff ff2f 	bl	80096fa <__exponent>
 800989c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800989e:	1813      	adds	r3, r2, r0
 80098a0:	2a01      	cmp	r2, #1
 80098a2:	4681      	mov	r9, r0
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	dc02      	bgt.n	80098ae <_printf_float+0x14e>
 80098a8:	6822      	ldr	r2, [r4, #0]
 80098aa:	07d1      	lsls	r1, r2, #31
 80098ac:	d501      	bpl.n	80098b2 <_printf_float+0x152>
 80098ae:	3301      	adds	r3, #1
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0a5      	beq.n	8009806 <_printf_float+0xa6>
 80098ba:	232d      	movs	r3, #45	; 0x2d
 80098bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098c0:	e7a1      	b.n	8009806 <_printf_float+0xa6>
 80098c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80098c6:	f000 8177 	beq.w	8009bb8 <_printf_float+0x458>
 80098ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80098ce:	d1bb      	bne.n	8009848 <_printf_float+0xe8>
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d1b9      	bne.n	8009848 <_printf_float+0xe8>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e7b6      	b.n	8009846 <_printf_float+0xe6>
 80098d8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80098dc:	d119      	bne.n	8009912 <_printf_float+0x1b2>
 80098de:	2900      	cmp	r1, #0
 80098e0:	6863      	ldr	r3, [r4, #4]
 80098e2:	dd0c      	ble.n	80098fe <_printf_float+0x19e>
 80098e4:	6121      	str	r1, [r4, #16]
 80098e6:	b913      	cbnz	r3, 80098ee <_printf_float+0x18e>
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	07d2      	lsls	r2, r2, #31
 80098ec:	d502      	bpl.n	80098f4 <_printf_float+0x194>
 80098ee:	3301      	adds	r3, #1
 80098f0:	440b      	add	r3, r1
 80098f2:	6123      	str	r3, [r4, #16]
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80098f8:	f04f 0900 	mov.w	r9, #0
 80098fc:	e7d9      	b.n	80098b2 <_printf_float+0x152>
 80098fe:	b913      	cbnz	r3, 8009906 <_printf_float+0x1a6>
 8009900:	6822      	ldr	r2, [r4, #0]
 8009902:	07d0      	lsls	r0, r2, #31
 8009904:	d501      	bpl.n	800990a <_printf_float+0x1aa>
 8009906:	3302      	adds	r3, #2
 8009908:	e7f3      	b.n	80098f2 <_printf_float+0x192>
 800990a:	2301      	movs	r3, #1
 800990c:	e7f1      	b.n	80098f2 <_printf_float+0x192>
 800990e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009912:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009916:	4293      	cmp	r3, r2
 8009918:	db05      	blt.n	8009926 <_printf_float+0x1c6>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	07d1      	lsls	r1, r2, #31
 8009920:	d5e8      	bpl.n	80098f4 <_printf_float+0x194>
 8009922:	3301      	adds	r3, #1
 8009924:	e7e5      	b.n	80098f2 <_printf_float+0x192>
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfd4      	ite	le
 800992a:	f1c3 0302 	rsble	r3, r3, #2
 800992e:	2301      	movgt	r3, #1
 8009930:	4413      	add	r3, r2
 8009932:	e7de      	b.n	80098f2 <_printf_float+0x192>
 8009934:	6823      	ldr	r3, [r4, #0]
 8009936:	055a      	lsls	r2, r3, #21
 8009938:	d407      	bmi.n	800994a <_printf_float+0x1ea>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	4642      	mov	r2, r8
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	d12b      	bne.n	80099a0 <_printf_float+0x240>
 8009948:	e767      	b.n	800981a <_printf_float+0xba>
 800994a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800994e:	f240 80dc 	bls.w	8009b0a <_printf_float+0x3aa>
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800995a:	f7f7 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800995e:	2800      	cmp	r0, #0
 8009960:	d033      	beq.n	80099ca <_printf_float+0x26a>
 8009962:	2301      	movs	r3, #1
 8009964:	4a41      	ldr	r2, [pc, #260]	; (8009a6c <_printf_float+0x30c>)
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f af54 	beq.w	800981a <_printf_float+0xba>
 8009972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009976:	429a      	cmp	r2, r3
 8009978:	db02      	blt.n	8009980 <_printf_float+0x220>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	07d8      	lsls	r0, r3, #31
 800997e:	d50f      	bpl.n	80099a0 <_printf_float+0x240>
 8009980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009984:	4631      	mov	r1, r6
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	f43f af45 	beq.w	800981a <_printf_float+0xba>
 8009990:	f04f 0800 	mov.w	r8, #0
 8009994:	f104 091a 	add.w	r9, r4, #26
 8009998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999a:	3b01      	subs	r3, #1
 800999c:	4543      	cmp	r3, r8
 800999e:	dc09      	bgt.n	80099b4 <_printf_float+0x254>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	079b      	lsls	r3, r3, #30
 80099a4:	f100 8103 	bmi.w	8009bae <_printf_float+0x44e>
 80099a8:	68e0      	ldr	r0, [r4, #12]
 80099aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ac:	4298      	cmp	r0, r3
 80099ae:	bfb8      	it	lt
 80099b0:	4618      	movlt	r0, r3
 80099b2:	e734      	b.n	800981e <_printf_float+0xbe>
 80099b4:	2301      	movs	r3, #1
 80099b6:	464a      	mov	r2, r9
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f af2b 	beq.w	800981a <_printf_float+0xba>
 80099c4:	f108 0801 	add.w	r8, r8, #1
 80099c8:	e7e6      	b.n	8009998 <_printf_float+0x238>
 80099ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dc2b      	bgt.n	8009a28 <_printf_float+0x2c8>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4a26      	ldr	r2, [pc, #152]	; (8009a6c <_printf_float+0x30c>)
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f af1d 	beq.w	800981a <_printf_float+0xba>
 80099e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e2:	b923      	cbnz	r3, 80099ee <_printf_float+0x28e>
 80099e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e6:	b913      	cbnz	r3, 80099ee <_printf_float+0x28e>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07d9      	lsls	r1, r3, #31
 80099ec:	d5d8      	bpl.n	80099a0 <_printf_float+0x240>
 80099ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f2:	4631      	mov	r1, r6
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b8      	blx	r7
 80099f8:	3001      	adds	r0, #1
 80099fa:	f43f af0e 	beq.w	800981a <_printf_float+0xba>
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	f104 0a1a 	add.w	sl, r4, #26
 8009a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a08:	425b      	negs	r3, r3
 8009a0a:	454b      	cmp	r3, r9
 8009a0c:	dc01      	bgt.n	8009a12 <_printf_float+0x2b2>
 8009a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a10:	e794      	b.n	800993c <_printf_float+0x1dc>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4652      	mov	r2, sl
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f aefc 	beq.w	800981a <_printf_float+0xba>
 8009a22:	f109 0901 	add.w	r9, r9, #1
 8009a26:	e7ee      	b.n	8009a06 <_printf_float+0x2a6>
 8009a28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	bfa8      	it	ge
 8009a30:	461a      	movge	r2, r3
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	4691      	mov	r9, r2
 8009a36:	dd07      	ble.n	8009a48 <_printf_float+0x2e8>
 8009a38:	4613      	mov	r3, r2
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f aee9 	beq.w	800981a <_printf_float+0xba>
 8009a48:	f104 031a 	add.w	r3, r4, #26
 8009a4c:	f04f 0b00 	mov.w	fp, #0
 8009a50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a54:	9306      	str	r3, [sp, #24]
 8009a56:	e015      	b.n	8009a84 <_printf_float+0x324>
 8009a58:	7fefffff 	.word	0x7fefffff
 8009a5c:	0800b9b4 	.word	0x0800b9b4
 8009a60:	0800b9b0 	.word	0x0800b9b0
 8009a64:	0800b9bc 	.word	0x0800b9bc
 8009a68:	0800b9b8 	.word	0x0800b9b8
 8009a6c:	0800b9c0 	.word	0x0800b9c0
 8009a70:	2301      	movs	r3, #1
 8009a72:	9a06      	ldr	r2, [sp, #24]
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f43f aecd 	beq.w	800981a <_printf_float+0xba>
 8009a80:	f10b 0b01 	add.w	fp, fp, #1
 8009a84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a88:	ebaa 0309 	sub.w	r3, sl, r9
 8009a8c:	455b      	cmp	r3, fp
 8009a8e:	dcef      	bgt.n	8009a70 <_printf_float+0x310>
 8009a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a94:	429a      	cmp	r2, r3
 8009a96:	44d0      	add	r8, sl
 8009a98:	db15      	blt.n	8009ac6 <_printf_float+0x366>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	07da      	lsls	r2, r3, #31
 8009a9e:	d412      	bmi.n	8009ac6 <_printf_float+0x366>
 8009aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aa4:	eba3 020a 	sub.w	r2, r3, sl
 8009aa8:	eba3 0a01 	sub.w	sl, r3, r1
 8009aac:	4592      	cmp	sl, r2
 8009aae:	bfa8      	it	ge
 8009ab0:	4692      	movge	sl, r2
 8009ab2:	f1ba 0f00 	cmp.w	sl, #0
 8009ab6:	dc0e      	bgt.n	8009ad6 <_printf_float+0x376>
 8009ab8:	f04f 0800 	mov.w	r8, #0
 8009abc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac0:	f104 091a 	add.w	r9, r4, #26
 8009ac4:	e019      	b.n	8009afa <_printf_float+0x39a>
 8009ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d1e5      	bne.n	8009aa0 <_printf_float+0x340>
 8009ad4:	e6a1      	b.n	800981a <_printf_float+0xba>
 8009ad6:	4653      	mov	r3, sl
 8009ad8:	4642      	mov	r2, r8
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d1e9      	bne.n	8009ab8 <_printf_float+0x358>
 8009ae4:	e699      	b.n	800981a <_printf_float+0xba>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	464a      	mov	r2, r9
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f ae92 	beq.w	800981a <_printf_float+0xba>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	eba3 030a 	sub.w	r3, r3, sl
 8009b04:	4543      	cmp	r3, r8
 8009b06:	dcee      	bgt.n	8009ae6 <_printf_float+0x386>
 8009b08:	e74a      	b.n	80099a0 <_printf_float+0x240>
 8009b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0c:	2a01      	cmp	r2, #1
 8009b0e:	dc01      	bgt.n	8009b14 <_printf_float+0x3b4>
 8009b10:	07db      	lsls	r3, r3, #31
 8009b12:	d53a      	bpl.n	8009b8a <_printf_float+0x42a>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4642      	mov	r2, r8
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f ae7b 	beq.w	800981a <_printf_float+0xba>
 8009b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f108 0801 	add.w	r8, r8, #1
 8009b34:	f43f ae71 	beq.w	800981a <_printf_float+0xba>
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b44:	2300      	movs	r3, #0
 8009b46:	f7f6 ffcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b4a:	b9c8      	cbnz	r0, 8009b80 <_printf_float+0x420>
 8009b4c:	4653      	mov	r3, sl
 8009b4e:	4642      	mov	r2, r8
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	d10e      	bne.n	8009b78 <_printf_float+0x418>
 8009b5a:	e65e      	b.n	800981a <_printf_float+0xba>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	4652      	mov	r2, sl
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f ae57 	beq.w	800981a <_printf_float+0xba>
 8009b6c:	f108 0801 	add.w	r8, r8, #1
 8009b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b72:	3b01      	subs	r3, #1
 8009b74:	4543      	cmp	r3, r8
 8009b76:	dcf1      	bgt.n	8009b5c <_printf_float+0x3fc>
 8009b78:	464b      	mov	r3, r9
 8009b7a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b7e:	e6de      	b.n	800993e <_printf_float+0x1de>
 8009b80:	f04f 0800 	mov.w	r8, #0
 8009b84:	f104 0a1a 	add.w	sl, r4, #26
 8009b88:	e7f2      	b.n	8009b70 <_printf_float+0x410>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e7df      	b.n	8009b4e <_printf_float+0x3ee>
 8009b8e:	2301      	movs	r3, #1
 8009b90:	464a      	mov	r2, r9
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f43f ae3e 	beq.w	800981a <_printf_float+0xba>
 8009b9e:	f108 0801 	add.w	r8, r8, #1
 8009ba2:	68e3      	ldr	r3, [r4, #12]
 8009ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	4543      	cmp	r3, r8
 8009baa:	dcf0      	bgt.n	8009b8e <_printf_float+0x42e>
 8009bac:	e6fc      	b.n	80099a8 <_printf_float+0x248>
 8009bae:	f04f 0800 	mov.w	r8, #0
 8009bb2:	f104 0919 	add.w	r9, r4, #25
 8009bb6:	e7f4      	b.n	8009ba2 <_printf_float+0x442>
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	f43f ae8b 	beq.w	80098d4 <_printf_float+0x174>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bc4:	ab09      	add	r3, sp, #36	; 0x24
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	ec49 8b10 	vmov	d0, r8, r9
 8009bcc:	6022      	str	r2, [r4, #0]
 8009bce:	f8cd a004 	str.w	sl, [sp, #4]
 8009bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f7ff fd2e 	bl	8009638 <__cvt>
 8009bdc:	4680      	mov	r8, r0
 8009bde:	e648      	b.n	8009872 <_printf_float+0x112>

08009be0 <_printf_common>:
 8009be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be4:	4691      	mov	r9, r2
 8009be6:	461f      	mov	r7, r3
 8009be8:	688a      	ldr	r2, [r1, #8]
 8009bea:	690b      	ldr	r3, [r1, #16]
 8009bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	bfb8      	it	lt
 8009bf4:	4613      	movlt	r3, r2
 8009bf6:	f8c9 3000 	str.w	r3, [r9]
 8009bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	b112      	cbz	r2, 8009c0a <_printf_common+0x2a>
 8009c04:	3301      	adds	r3, #1
 8009c06:	f8c9 3000 	str.w	r3, [r9]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	0699      	lsls	r1, r3, #26
 8009c0e:	bf42      	ittt	mi
 8009c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c14:	3302      	addmi	r3, #2
 8009c16:	f8c9 3000 	strmi.w	r3, [r9]
 8009c1a:	6825      	ldr	r5, [r4, #0]
 8009c1c:	f015 0506 	ands.w	r5, r5, #6
 8009c20:	d107      	bne.n	8009c32 <_printf_common+0x52>
 8009c22:	f104 0a19 	add.w	sl, r4, #25
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	f8d9 2000 	ldr.w	r2, [r9]
 8009c2c:	1a9b      	subs	r3, r3, r2
 8009c2e:	42ab      	cmp	r3, r5
 8009c30:	dc28      	bgt.n	8009c84 <_printf_common+0xa4>
 8009c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	3300      	adds	r3, #0
 8009c3a:	bf18      	it	ne
 8009c3c:	2301      	movne	r3, #1
 8009c3e:	0692      	lsls	r2, r2, #26
 8009c40:	d42d      	bmi.n	8009c9e <_printf_common+0xbe>
 8009c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c46:	4639      	mov	r1, r7
 8009c48:	4630      	mov	r0, r6
 8009c4a:	47c0      	blx	r8
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d020      	beq.n	8009c92 <_printf_common+0xb2>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	68e5      	ldr	r5, [r4, #12]
 8009c54:	f8d9 2000 	ldr.w	r2, [r9]
 8009c58:	f003 0306 	and.w	r3, r3, #6
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	bf08      	it	eq
 8009c60:	1aad      	subeq	r5, r5, r2
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	6922      	ldr	r2, [r4, #16]
 8009c66:	bf0c      	ite	eq
 8009c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c6c:	2500      	movne	r5, #0
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	bfc4      	itt	gt
 8009c72:	1a9b      	subgt	r3, r3, r2
 8009c74:	18ed      	addgt	r5, r5, r3
 8009c76:	f04f 0900 	mov.w	r9, #0
 8009c7a:	341a      	adds	r4, #26
 8009c7c:	454d      	cmp	r5, r9
 8009c7e:	d11a      	bne.n	8009cb6 <_printf_common+0xd6>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e008      	b.n	8009c96 <_printf_common+0xb6>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4652      	mov	r2, sl
 8009c88:	4639      	mov	r1, r7
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	47c0      	blx	r8
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d103      	bne.n	8009c9a <_printf_common+0xba>
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c9a:	3501      	adds	r5, #1
 8009c9c:	e7c3      	b.n	8009c26 <_printf_common+0x46>
 8009c9e:	18e1      	adds	r1, r4, r3
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	2030      	movs	r0, #48	; 0x30
 8009ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ca8:	4422      	add	r2, r4
 8009caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	e7c5      	b.n	8009c42 <_printf_common+0x62>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4622      	mov	r2, r4
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	47c0      	blx	r8
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d0e6      	beq.n	8009c92 <_printf_common+0xb2>
 8009cc4:	f109 0901 	add.w	r9, r9, #1
 8009cc8:	e7d8      	b.n	8009c7c <_printf_common+0x9c>
	...

08009ccc <_printf_i>:
 8009ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	7e09      	ldrb	r1, [r1, #24]
 8009cd8:	b085      	sub	sp, #20
 8009cda:	296e      	cmp	r1, #110	; 0x6e
 8009cdc:	4617      	mov	r7, r2
 8009cde:	4606      	mov	r6, r0
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce4:	f000 80b3 	beq.w	8009e4e <_printf_i+0x182>
 8009ce8:	d822      	bhi.n	8009d30 <_printf_i+0x64>
 8009cea:	2963      	cmp	r1, #99	; 0x63
 8009cec:	d036      	beq.n	8009d5c <_printf_i+0x90>
 8009cee:	d80a      	bhi.n	8009d06 <_printf_i+0x3a>
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	f000 80b9 	beq.w	8009e68 <_printf_i+0x19c>
 8009cf6:	2958      	cmp	r1, #88	; 0x58
 8009cf8:	f000 8083 	beq.w	8009e02 <_printf_i+0x136>
 8009cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d04:	e032      	b.n	8009d6c <_printf_i+0xa0>
 8009d06:	2964      	cmp	r1, #100	; 0x64
 8009d08:	d001      	beq.n	8009d0e <_printf_i+0x42>
 8009d0a:	2969      	cmp	r1, #105	; 0x69
 8009d0c:	d1f6      	bne.n	8009cfc <_printf_i+0x30>
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	6813      	ldr	r3, [r2, #0]
 8009d12:	0605      	lsls	r5, r0, #24
 8009d14:	f103 0104 	add.w	r1, r3, #4
 8009d18:	d52a      	bpl.n	8009d70 <_printf_i+0xa4>
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	da03      	bge.n	8009d2a <_printf_i+0x5e>
 8009d22:	222d      	movs	r2, #45	; 0x2d
 8009d24:	425b      	negs	r3, r3
 8009d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d2a:	486f      	ldr	r0, [pc, #444]	; (8009ee8 <_printf_i+0x21c>)
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	e039      	b.n	8009da4 <_printf_i+0xd8>
 8009d30:	2973      	cmp	r1, #115	; 0x73
 8009d32:	f000 809d 	beq.w	8009e70 <_printf_i+0x1a4>
 8009d36:	d808      	bhi.n	8009d4a <_printf_i+0x7e>
 8009d38:	296f      	cmp	r1, #111	; 0x6f
 8009d3a:	d020      	beq.n	8009d7e <_printf_i+0xb2>
 8009d3c:	2970      	cmp	r1, #112	; 0x70
 8009d3e:	d1dd      	bne.n	8009cfc <_printf_i+0x30>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f043 0320 	orr.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	e003      	b.n	8009d52 <_printf_i+0x86>
 8009d4a:	2975      	cmp	r1, #117	; 0x75
 8009d4c:	d017      	beq.n	8009d7e <_printf_i+0xb2>
 8009d4e:	2978      	cmp	r1, #120	; 0x78
 8009d50:	d1d4      	bne.n	8009cfc <_printf_i+0x30>
 8009d52:	2378      	movs	r3, #120	; 0x78
 8009d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d58:	4864      	ldr	r0, [pc, #400]	; (8009eec <_printf_i+0x220>)
 8009d5a:	e055      	b.n	8009e08 <_printf_i+0x13c>
 8009d5c:	6813      	ldr	r3, [r2, #0]
 8009d5e:	1d19      	adds	r1, r3, #4
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6011      	str	r1, [r2, #0]
 8009d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e08c      	b.n	8009e8a <_printf_i+0x1be>
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6011      	str	r1, [r2, #0]
 8009d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d78:	bf18      	it	ne
 8009d7a:	b21b      	sxthne	r3, r3
 8009d7c:	e7cf      	b.n	8009d1e <_printf_i+0x52>
 8009d7e:	6813      	ldr	r3, [r2, #0]
 8009d80:	6825      	ldr	r5, [r4, #0]
 8009d82:	1d18      	adds	r0, r3, #4
 8009d84:	6010      	str	r0, [r2, #0]
 8009d86:	0628      	lsls	r0, r5, #24
 8009d88:	d501      	bpl.n	8009d8e <_printf_i+0xc2>
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	e002      	b.n	8009d94 <_printf_i+0xc8>
 8009d8e:	0668      	lsls	r0, r5, #25
 8009d90:	d5fb      	bpl.n	8009d8a <_printf_i+0xbe>
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	4854      	ldr	r0, [pc, #336]	; (8009ee8 <_printf_i+0x21c>)
 8009d96:	296f      	cmp	r1, #111	; 0x6f
 8009d98:	bf14      	ite	ne
 8009d9a:	220a      	movne	r2, #10
 8009d9c:	2208      	moveq	r2, #8
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009da4:	6865      	ldr	r5, [r4, #4]
 8009da6:	60a5      	str	r5, [r4, #8]
 8009da8:	2d00      	cmp	r5, #0
 8009daa:	f2c0 8095 	blt.w	8009ed8 <_printf_i+0x20c>
 8009dae:	6821      	ldr	r1, [r4, #0]
 8009db0:	f021 0104 	bic.w	r1, r1, #4
 8009db4:	6021      	str	r1, [r4, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d13d      	bne.n	8009e36 <_printf_i+0x16a>
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	f040 808e 	bne.w	8009edc <_printf_i+0x210>
 8009dc0:	4665      	mov	r5, ip
 8009dc2:	2a08      	cmp	r2, #8
 8009dc4:	d10b      	bne.n	8009dde <_printf_i+0x112>
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	07db      	lsls	r3, r3, #31
 8009dca:	d508      	bpl.n	8009dde <_printf_i+0x112>
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	6862      	ldr	r2, [r4, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	bfde      	ittt	le
 8009dd4:	2330      	movle	r3, #48	; 0x30
 8009dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dde:	ebac 0305 	sub.w	r3, ip, r5
 8009de2:	6123      	str	r3, [r4, #16]
 8009de4:	f8cd 8000 	str.w	r8, [sp]
 8009de8:	463b      	mov	r3, r7
 8009dea:	aa03      	add	r2, sp, #12
 8009dec:	4621      	mov	r1, r4
 8009dee:	4630      	mov	r0, r6
 8009df0:	f7ff fef6 	bl	8009be0 <_printf_common>
 8009df4:	3001      	adds	r0, #1
 8009df6:	d14d      	bne.n	8009e94 <_printf_i+0x1c8>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	b005      	add	sp, #20
 8009dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e02:	4839      	ldr	r0, [pc, #228]	; (8009ee8 <_printf_i+0x21c>)
 8009e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e08:	6813      	ldr	r3, [r2, #0]
 8009e0a:	6821      	ldr	r1, [r4, #0]
 8009e0c:	1d1d      	adds	r5, r3, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6015      	str	r5, [r2, #0]
 8009e12:	060a      	lsls	r2, r1, #24
 8009e14:	d50b      	bpl.n	8009e2e <_printf_i+0x162>
 8009e16:	07ca      	lsls	r2, r1, #31
 8009e18:	bf44      	itt	mi
 8009e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8009e1e:	6021      	strmi	r1, [r4, #0]
 8009e20:	b91b      	cbnz	r3, 8009e2a <_printf_i+0x15e>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	f022 0220 	bic.w	r2, r2, #32
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	2210      	movs	r2, #16
 8009e2c:	e7b7      	b.n	8009d9e <_printf_i+0xd2>
 8009e2e:	064d      	lsls	r5, r1, #25
 8009e30:	bf48      	it	mi
 8009e32:	b29b      	uxthmi	r3, r3
 8009e34:	e7ef      	b.n	8009e16 <_printf_i+0x14a>
 8009e36:	4665      	mov	r5, ip
 8009e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8009e40:	5cc3      	ldrb	r3, [r0, r3]
 8009e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e46:	460b      	mov	r3, r1
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	d1f5      	bne.n	8009e38 <_printf_i+0x16c>
 8009e4c:	e7b9      	b.n	8009dc2 <_printf_i+0xf6>
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	6825      	ldr	r5, [r4, #0]
 8009e52:	6961      	ldr	r1, [r4, #20]
 8009e54:	1d18      	adds	r0, r3, #4
 8009e56:	6010      	str	r0, [r2, #0]
 8009e58:	0628      	lsls	r0, r5, #24
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	d501      	bpl.n	8009e62 <_printf_i+0x196>
 8009e5e:	6019      	str	r1, [r3, #0]
 8009e60:	e002      	b.n	8009e68 <_printf_i+0x19c>
 8009e62:	066a      	lsls	r2, r5, #25
 8009e64:	d5fb      	bpl.n	8009e5e <_printf_i+0x192>
 8009e66:	8019      	strh	r1, [r3, #0]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	6123      	str	r3, [r4, #16]
 8009e6c:	4665      	mov	r5, ip
 8009e6e:	e7b9      	b.n	8009de4 <_printf_i+0x118>
 8009e70:	6813      	ldr	r3, [r2, #0]
 8009e72:	1d19      	adds	r1, r3, #4
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	681d      	ldr	r5, [r3, #0]
 8009e78:	6862      	ldr	r2, [r4, #4]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f7f6 f9bf 	bl	8000200 <memchr>
 8009e82:	b108      	cbz	r0, 8009e88 <_printf_i+0x1bc>
 8009e84:	1b40      	subs	r0, r0, r5
 8009e86:	6060      	str	r0, [r4, #4]
 8009e88:	6863      	ldr	r3, [r4, #4]
 8009e8a:	6123      	str	r3, [r4, #16]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e92:	e7a7      	b.n	8009de4 <_printf_i+0x118>
 8009e94:	6923      	ldr	r3, [r4, #16]
 8009e96:	462a      	mov	r2, r5
 8009e98:	4639      	mov	r1, r7
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	47c0      	blx	r8
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	d0aa      	beq.n	8009df8 <_printf_i+0x12c>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	079b      	lsls	r3, r3, #30
 8009ea6:	d413      	bmi.n	8009ed0 <_printf_i+0x204>
 8009ea8:	68e0      	ldr	r0, [r4, #12]
 8009eaa:	9b03      	ldr	r3, [sp, #12]
 8009eac:	4298      	cmp	r0, r3
 8009eae:	bfb8      	it	lt
 8009eb0:	4618      	movlt	r0, r3
 8009eb2:	e7a3      	b.n	8009dfc <_printf_i+0x130>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	464a      	mov	r2, r9
 8009eb8:	4639      	mov	r1, r7
 8009eba:	4630      	mov	r0, r6
 8009ebc:	47c0      	blx	r8
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d09a      	beq.n	8009df8 <_printf_i+0x12c>
 8009ec2:	3501      	adds	r5, #1
 8009ec4:	68e3      	ldr	r3, [r4, #12]
 8009ec6:	9a03      	ldr	r2, [sp, #12]
 8009ec8:	1a9b      	subs	r3, r3, r2
 8009eca:	42ab      	cmp	r3, r5
 8009ecc:	dcf2      	bgt.n	8009eb4 <_printf_i+0x1e8>
 8009ece:	e7eb      	b.n	8009ea8 <_printf_i+0x1dc>
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	f104 0919 	add.w	r9, r4, #25
 8009ed6:	e7f5      	b.n	8009ec4 <_printf_i+0x1f8>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ac      	bne.n	8009e36 <_printf_i+0x16a>
 8009edc:	7803      	ldrb	r3, [r0, #0]
 8009ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee6:	e76c      	b.n	8009dc2 <_printf_i+0xf6>
 8009ee8:	0800b9c2 	.word	0x0800b9c2
 8009eec:	0800b9d3 	.word	0x0800b9d3

08009ef0 <siprintf>:
 8009ef0:	b40e      	push	{r1, r2, r3}
 8009ef2:	b500      	push	{lr}
 8009ef4:	b09c      	sub	sp, #112	; 0x70
 8009ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ef8:	9002      	str	r0, [sp, #8]
 8009efa:	9006      	str	r0, [sp, #24]
 8009efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f00:	4809      	ldr	r0, [pc, #36]	; (8009f28 <siprintf+0x38>)
 8009f02:	9107      	str	r1, [sp, #28]
 8009f04:	9104      	str	r1, [sp, #16]
 8009f06:	4909      	ldr	r1, [pc, #36]	; (8009f2c <siprintf+0x3c>)
 8009f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	a902      	add	r1, sp, #8
 8009f14:	f001 fa6c 	bl	800b3f0 <_svfiprintf_r>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	b01c      	add	sp, #112	; 0x70
 8009f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f24:	b003      	add	sp, #12
 8009f26:	4770      	bx	lr
 8009f28:	20000068 	.word	0x20000068
 8009f2c:	ffff0208 	.word	0xffff0208

08009f30 <strcat>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	4603      	mov	r3, r0
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	1c5c      	adds	r4, r3, #1
 8009f38:	b93a      	cbnz	r2, 8009f4a <strcat+0x1a>
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d1f9      	bne.n	8009f3c <strcat+0xc>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	4623      	mov	r3, r4
 8009f4c:	e7f2      	b.n	8009f34 <strcat+0x4>

08009f4e <quorem>:
 8009f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f52:	6903      	ldr	r3, [r0, #16]
 8009f54:	690c      	ldr	r4, [r1, #16]
 8009f56:	42a3      	cmp	r3, r4
 8009f58:	4680      	mov	r8, r0
 8009f5a:	f2c0 8082 	blt.w	800a062 <quorem+0x114>
 8009f5e:	3c01      	subs	r4, #1
 8009f60:	f101 0714 	add.w	r7, r1, #20
 8009f64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009f68:	f100 0614 	add.w	r6, r0, #20
 8009f6c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f70:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f74:	eb06 030c 	add.w	r3, r6, ip
 8009f78:	3501      	adds	r5, #1
 8009f7a:	eb07 090c 	add.w	r9, r7, ip
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f84:	b395      	cbz	r5, 8009fec <quorem+0x9e>
 8009f86:	f04f 0a00 	mov.w	sl, #0
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	46b6      	mov	lr, r6
 8009f8e:	46d3      	mov	fp, sl
 8009f90:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f94:	b293      	uxth	r3, r2
 8009f96:	fb05 a303 	mla	r3, r5, r3, sl
 8009f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ebab 0303 	sub.w	r3, fp, r3
 8009fa4:	0c12      	lsrs	r2, r2, #16
 8009fa6:	f8de b000 	ldr.w	fp, [lr]
 8009faa:	fb05 a202 	mla	r2, r5, r2, sl
 8009fae:	fa13 f38b 	uxtah	r3, r3, fp
 8009fb2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009fb6:	fa1f fb82 	uxth.w	fp, r2
 8009fba:	f8de 2000 	ldr.w	r2, [lr]
 8009fbe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fcc:	4581      	cmp	r9, r0
 8009fce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fd2:	f84e 3b04 	str.w	r3, [lr], #4
 8009fd6:	d2db      	bcs.n	8009f90 <quorem+0x42>
 8009fd8:	f856 300c 	ldr.w	r3, [r6, ip]
 8009fdc:	b933      	cbnz	r3, 8009fec <quorem+0x9e>
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	3b04      	subs	r3, #4
 8009fe2:	429e      	cmp	r6, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	d330      	bcc.n	800a04a <quorem+0xfc>
 8009fe8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fec:	4640      	mov	r0, r8
 8009fee:	f001 f829 	bl	800b044 <__mcmp>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	db25      	blt.n	800a042 <quorem+0xf4>
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f04f 0c00 	mov.w	ip, #0
 8009ffe:	f857 2b04 	ldr.w	r2, [r7], #4
 800a002:	f8d0 e000 	ldr.w	lr, [r0]
 800a006:	b293      	uxth	r3, r2
 800a008:	ebac 0303 	sub.w	r3, ip, r3
 800a00c:	0c12      	lsrs	r2, r2, #16
 800a00e:	fa13 f38e 	uxtah	r3, r3, lr
 800a012:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a016:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a020:	45b9      	cmp	r9, r7
 800a022:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a026:	f840 3b04 	str.w	r3, [r0], #4
 800a02a:	d2e8      	bcs.n	8009ffe <quorem+0xb0>
 800a02c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a030:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a034:	b92a      	cbnz	r2, 800a042 <quorem+0xf4>
 800a036:	3b04      	subs	r3, #4
 800a038:	429e      	cmp	r6, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	d30b      	bcc.n	800a056 <quorem+0x108>
 800a03e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a042:	4628      	mov	r0, r5
 800a044:	b003      	add	sp, #12
 800a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04a:	6812      	ldr	r2, [r2, #0]
 800a04c:	3b04      	subs	r3, #4
 800a04e:	2a00      	cmp	r2, #0
 800a050:	d1ca      	bne.n	8009fe8 <quorem+0x9a>
 800a052:	3c01      	subs	r4, #1
 800a054:	e7c5      	b.n	8009fe2 <quorem+0x94>
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	3b04      	subs	r3, #4
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	d1ef      	bne.n	800a03e <quorem+0xf0>
 800a05e:	3c01      	subs	r4, #1
 800a060:	e7ea      	b.n	800a038 <quorem+0xea>
 800a062:	2000      	movs	r0, #0
 800a064:	e7ee      	b.n	800a044 <quorem+0xf6>
	...

0800a068 <_dtoa_r>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	ec57 6b10 	vmov	r6, r7, d0
 800a070:	b097      	sub	sp, #92	; 0x5c
 800a072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a074:	9106      	str	r1, [sp, #24]
 800a076:	4604      	mov	r4, r0
 800a078:	920b      	str	r2, [sp, #44]	; 0x2c
 800a07a:	9312      	str	r3, [sp, #72]	; 0x48
 800a07c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a080:	e9cd 6700 	strd	r6, r7, [sp]
 800a084:	b93d      	cbnz	r5, 800a096 <_dtoa_r+0x2e>
 800a086:	2010      	movs	r0, #16
 800a088:	f000 fdb4 	bl	800abf4 <malloc>
 800a08c:	6260      	str	r0, [r4, #36]	; 0x24
 800a08e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a092:	6005      	str	r5, [r0, #0]
 800a094:	60c5      	str	r5, [r0, #12]
 800a096:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a098:	6819      	ldr	r1, [r3, #0]
 800a09a:	b151      	cbz	r1, 800a0b2 <_dtoa_r+0x4a>
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	604a      	str	r2, [r1, #4]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	4093      	lsls	r3, r2
 800a0a4:	608b      	str	r3, [r1, #8]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 fdeb 	bl	800ac82 <_Bfree>
 800a0ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	1e3b      	subs	r3, r7, #0
 800a0b4:	bfbb      	ittet	lt
 800a0b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0ba:	9301      	strlt	r3, [sp, #4]
 800a0bc:	2300      	movge	r3, #0
 800a0be:	2201      	movlt	r2, #1
 800a0c0:	bfac      	ite	ge
 800a0c2:	f8c8 3000 	strge.w	r3, [r8]
 800a0c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ca:	4baf      	ldr	r3, [pc, #700]	; (800a388 <_dtoa_r+0x320>)
 800a0cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0d0:	ea33 0308 	bics.w	r3, r3, r8
 800a0d4:	d114      	bne.n	800a100 <_dtoa_r+0x98>
 800a0d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	9b00      	ldr	r3, [sp, #0]
 800a0e0:	b923      	cbnz	r3, 800a0ec <_dtoa_r+0x84>
 800a0e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f000 8542 	beq.w	800ab70 <_dtoa_r+0xb08>
 800a0ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a39c <_dtoa_r+0x334>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 8544 	beq.w	800ab80 <_dtoa_r+0xb18>
 800a0f8:	f10b 0303 	add.w	r3, fp, #3
 800a0fc:	f000 bd3e 	b.w	800ab7c <_dtoa_r+0xb14>
 800a100:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a110:	4681      	mov	r9, r0
 800a112:	b168      	cbz	r0, 800a130 <_dtoa_r+0xc8>
 800a114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a116:	2301      	movs	r3, #1
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8524 	beq.w	800ab6a <_dtoa_r+0xb02>
 800a122:	4b9a      	ldr	r3, [pc, #616]	; (800a38c <_dtoa_r+0x324>)
 800a124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a126:	f103 3bff 	add.w	fp, r3, #4294967295
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	f000 bd28 	b.w	800ab80 <_dtoa_r+0xb18>
 800a130:	aa14      	add	r2, sp, #80	; 0x50
 800a132:	a915      	add	r1, sp, #84	; 0x54
 800a134:	ec47 6b10 	vmov	d0, r6, r7
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fffa 	bl	800b132 <__d2b>
 800a13e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a142:	9004      	str	r0, [sp, #16]
 800a144:	2d00      	cmp	r5, #0
 800a146:	d07c      	beq.n	800a242 <_dtoa_r+0x1da>
 800a148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a14c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a150:	46b2      	mov	sl, r6
 800a152:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a15a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a15e:	2200      	movs	r2, #0
 800a160:	4b8b      	ldr	r3, [pc, #556]	; (800a390 <_dtoa_r+0x328>)
 800a162:	4650      	mov	r0, sl
 800a164:	4659      	mov	r1, fp
 800a166:	f7f6 f89f 	bl	80002a8 <__aeabi_dsub>
 800a16a:	a381      	add	r3, pc, #516	; (adr r3, 800a370 <_dtoa_r+0x308>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 fa52 	bl	8000618 <__aeabi_dmul>
 800a174:	a380      	add	r3, pc, #512	; (adr r3, 800a378 <_dtoa_r+0x310>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	f7f6 f897 	bl	80002ac <__adddf3>
 800a17e:	4606      	mov	r6, r0
 800a180:	4628      	mov	r0, r5
 800a182:	460f      	mov	r7, r1
 800a184:	f7f6 f9de 	bl	8000544 <__aeabi_i2d>
 800a188:	a37d      	add	r3, pc, #500	; (adr r3, 800a380 <_dtoa_r+0x318>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 fa43 	bl	8000618 <__aeabi_dmul>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 f887 	bl	80002ac <__adddf3>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	f7f6 fce9 	bl	8000b78 <__aeabi_d2iz>
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f7f6 fca4 	bl	8000afc <__aeabi_dcmplt>
 800a1b4:	b148      	cbz	r0, 800a1ca <_dtoa_r+0x162>
 800a1b6:	4650      	mov	r0, sl
 800a1b8:	f7f6 f9c4 	bl	8000544 <__aeabi_i2d>
 800a1bc:	4632      	mov	r2, r6
 800a1be:	463b      	mov	r3, r7
 800a1c0:	f7f6 fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1c4:	b908      	cbnz	r0, 800a1ca <_dtoa_r+0x162>
 800a1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ca:	f1ba 0f16 	cmp.w	sl, #22
 800a1ce:	d859      	bhi.n	800a284 <_dtoa_r+0x21c>
 800a1d0:	4970      	ldr	r1, [pc, #448]	; (800a394 <_dtoa_r+0x32c>)
 800a1d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1de:	f7f6 fcab 	bl	8000b38 <__aeabi_dcmpgt>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d050      	beq.n	800a288 <_dtoa_r+0x220>
 800a1e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1f0:	1b5d      	subs	r5, r3, r5
 800a1f2:	f1b5 0801 	subs.w	r8, r5, #1
 800a1f6:	bf49      	itett	mi
 800a1f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1fc:	2300      	movpl	r3, #0
 800a1fe:	9305      	strmi	r3, [sp, #20]
 800a200:	f04f 0800 	movmi.w	r8, #0
 800a204:	bf58      	it	pl
 800a206:	9305      	strpl	r3, [sp, #20]
 800a208:	f1ba 0f00 	cmp.w	sl, #0
 800a20c:	db3e      	blt.n	800a28c <_dtoa_r+0x224>
 800a20e:	2300      	movs	r3, #0
 800a210:	44d0      	add	r8, sl
 800a212:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a216:	9307      	str	r3, [sp, #28]
 800a218:	9b06      	ldr	r3, [sp, #24]
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	f200 8090 	bhi.w	800a340 <_dtoa_r+0x2d8>
 800a220:	2b05      	cmp	r3, #5
 800a222:	bfc4      	itt	gt
 800a224:	3b04      	subgt	r3, #4
 800a226:	9306      	strgt	r3, [sp, #24]
 800a228:	9b06      	ldr	r3, [sp, #24]
 800a22a:	f1a3 0302 	sub.w	r3, r3, #2
 800a22e:	bfcc      	ite	gt
 800a230:	2500      	movgt	r5, #0
 800a232:	2501      	movle	r5, #1
 800a234:	2b03      	cmp	r3, #3
 800a236:	f200 808f 	bhi.w	800a358 <_dtoa_r+0x2f0>
 800a23a:	e8df f003 	tbb	[pc, r3]
 800a23e:	7f7d      	.short	0x7f7d
 800a240:	7131      	.short	0x7131
 800a242:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a246:	441d      	add	r5, r3
 800a248:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a24c:	2820      	cmp	r0, #32
 800a24e:	dd13      	ble.n	800a278 <_dtoa_r+0x210>
 800a250:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	fa08 f800 	lsl.w	r8, r8, r0
 800a25a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a25e:	fa23 f000 	lsr.w	r0, r3, r0
 800a262:	ea48 0000 	orr.w	r0, r8, r0
 800a266:	f7f6 f95d 	bl	8000524 <__aeabi_ui2d>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4682      	mov	sl, r0
 800a26e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a272:	3d01      	subs	r5, #1
 800a274:	9313      	str	r3, [sp, #76]	; 0x4c
 800a276:	e772      	b.n	800a15e <_dtoa_r+0xf6>
 800a278:	9b00      	ldr	r3, [sp, #0]
 800a27a:	f1c0 0020 	rsb	r0, r0, #32
 800a27e:	fa03 f000 	lsl.w	r0, r3, r0
 800a282:	e7f0      	b.n	800a266 <_dtoa_r+0x1fe>
 800a284:	2301      	movs	r3, #1
 800a286:	e7b1      	b.n	800a1ec <_dtoa_r+0x184>
 800a288:	900f      	str	r0, [sp, #60]	; 0x3c
 800a28a:	e7b0      	b.n	800a1ee <_dtoa_r+0x186>
 800a28c:	9b05      	ldr	r3, [sp, #20]
 800a28e:	eba3 030a 	sub.w	r3, r3, sl
 800a292:	9305      	str	r3, [sp, #20]
 800a294:	f1ca 0300 	rsb	r3, sl, #0
 800a298:	9307      	str	r3, [sp, #28]
 800a29a:	2300      	movs	r3, #0
 800a29c:	930e      	str	r3, [sp, #56]	; 0x38
 800a29e:	e7bb      	b.n	800a218 <_dtoa_r+0x1b0>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	dd59      	ble.n	800a35e <_dtoa_r+0x2f6>
 800a2aa:	9302      	str	r3, [sp, #8]
 800a2ac:	4699      	mov	r9, r3
 800a2ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	6072      	str	r2, [r6, #4]
 800a2b4:	2204      	movs	r2, #4
 800a2b6:	f102 0014 	add.w	r0, r2, #20
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	6871      	ldr	r1, [r6, #4]
 800a2be:	d953      	bls.n	800a368 <_dtoa_r+0x300>
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fcaa 	bl	800ac1a <_Balloc>
 800a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c8:	6030      	str	r0, [r6, #0]
 800a2ca:	f1b9 0f0e 	cmp.w	r9, #14
 800a2ce:	f8d3 b000 	ldr.w	fp, [r3]
 800a2d2:	f200 80e6 	bhi.w	800a4a2 <_dtoa_r+0x43a>
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	f000 80e3 	beq.w	800a4a2 <_dtoa_r+0x43a>
 800a2dc:	ed9d 7b00 	vldr	d7, [sp]
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a2e8:	dd74      	ble.n	800a3d4 <_dtoa_r+0x36c>
 800a2ea:	4a2a      	ldr	r2, [pc, #168]	; (800a394 <_dtoa_r+0x32c>)
 800a2ec:	f00a 030f 	and.w	r3, sl, #15
 800a2f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2f4:	ed93 7b00 	vldr	d7, [r3]
 800a2f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a2fc:	06f0      	lsls	r0, r6, #27
 800a2fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a302:	d565      	bpl.n	800a3d0 <_dtoa_r+0x368>
 800a304:	4b24      	ldr	r3, [pc, #144]	; (800a398 <_dtoa_r+0x330>)
 800a306:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a30a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a30e:	f7f6 faad 	bl	800086c <__aeabi_ddiv>
 800a312:	e9cd 0100 	strd	r0, r1, [sp]
 800a316:	f006 060f 	and.w	r6, r6, #15
 800a31a:	2503      	movs	r5, #3
 800a31c:	4f1e      	ldr	r7, [pc, #120]	; (800a398 <_dtoa_r+0x330>)
 800a31e:	e04c      	b.n	800a3ba <_dtoa_r+0x352>
 800a320:	2301      	movs	r3, #1
 800a322:	930a      	str	r3, [sp, #40]	; 0x28
 800a324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a326:	4453      	add	r3, sl
 800a328:	f103 0901 	add.w	r9, r3, #1
 800a32c:	9302      	str	r3, [sp, #8]
 800a32e:	464b      	mov	r3, r9
 800a330:	2b01      	cmp	r3, #1
 800a332:	bfb8      	it	lt
 800a334:	2301      	movlt	r3, #1
 800a336:	e7ba      	b.n	800a2ae <_dtoa_r+0x246>
 800a338:	2300      	movs	r3, #0
 800a33a:	e7b2      	b.n	800a2a2 <_dtoa_r+0x23a>
 800a33c:	2300      	movs	r3, #0
 800a33e:	e7f0      	b.n	800a322 <_dtoa_r+0x2ba>
 800a340:	2501      	movs	r5, #1
 800a342:	2300      	movs	r3, #0
 800a344:	9306      	str	r3, [sp, #24]
 800a346:	950a      	str	r5, [sp, #40]	; 0x28
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	9302      	str	r3, [sp, #8]
 800a34e:	4699      	mov	r9, r3
 800a350:	2200      	movs	r2, #0
 800a352:	2312      	movs	r3, #18
 800a354:	920b      	str	r2, [sp, #44]	; 0x2c
 800a356:	e7aa      	b.n	800a2ae <_dtoa_r+0x246>
 800a358:	2301      	movs	r3, #1
 800a35a:	930a      	str	r3, [sp, #40]	; 0x28
 800a35c:	e7f4      	b.n	800a348 <_dtoa_r+0x2e0>
 800a35e:	2301      	movs	r3, #1
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	4699      	mov	r9, r3
 800a364:	461a      	mov	r2, r3
 800a366:	e7f5      	b.n	800a354 <_dtoa_r+0x2ec>
 800a368:	3101      	adds	r1, #1
 800a36a:	6071      	str	r1, [r6, #4]
 800a36c:	0052      	lsls	r2, r2, #1
 800a36e:	e7a2      	b.n	800a2b6 <_dtoa_r+0x24e>
 800a370:	636f4361 	.word	0x636f4361
 800a374:	3fd287a7 	.word	0x3fd287a7
 800a378:	8b60c8b3 	.word	0x8b60c8b3
 800a37c:	3fc68a28 	.word	0x3fc68a28
 800a380:	509f79fb 	.word	0x509f79fb
 800a384:	3fd34413 	.word	0x3fd34413
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	0800b9c1 	.word	0x0800b9c1
 800a390:	3ff80000 	.word	0x3ff80000
 800a394:	0800ba20 	.word	0x0800ba20
 800a398:	0800b9f8 	.word	0x0800b9f8
 800a39c:	0800b9ed 	.word	0x0800b9ed
 800a3a0:	07f1      	lsls	r1, r6, #31
 800a3a2:	d508      	bpl.n	800a3b6 <_dtoa_r+0x34e>
 800a3a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ac:	f7f6 f934 	bl	8000618 <__aeabi_dmul>
 800a3b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	1076      	asrs	r6, r6, #1
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <_dtoa_r+0x338>
 800a3be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c6:	f7f6 fa51 	bl	800086c <__aeabi_ddiv>
 800a3ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ce:	e01a      	b.n	800a406 <_dtoa_r+0x39e>
 800a3d0:	2502      	movs	r5, #2
 800a3d2:	e7a3      	b.n	800a31c <_dtoa_r+0x2b4>
 800a3d4:	f000 80a0 	beq.w	800a518 <_dtoa_r+0x4b0>
 800a3d8:	f1ca 0600 	rsb	r6, sl, #0
 800a3dc:	4b9f      	ldr	r3, [pc, #636]	; (800a65c <_dtoa_r+0x5f4>)
 800a3de:	4fa0      	ldr	r7, [pc, #640]	; (800a660 <_dtoa_r+0x5f8>)
 800a3e0:	f006 020f 	and.w	r2, r6, #15
 800a3e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3f0:	f7f6 f912 	bl	8000618 <__aeabi_dmul>
 800a3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f8:	1136      	asrs	r6, r6, #4
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	2502      	movs	r5, #2
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	d17f      	bne.n	800a502 <_dtoa_r+0x49a>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1e1      	bne.n	800a3ca <_dtoa_r+0x362>
 800a406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 8087 	beq.w	800a51c <_dtoa_r+0x4b4>
 800a40e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a412:	2200      	movs	r2, #0
 800a414:	4b93      	ldr	r3, [pc, #588]	; (800a664 <_dtoa_r+0x5fc>)
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d07c      	beq.n	800a51c <_dtoa_r+0x4b4>
 800a422:	f1b9 0f00 	cmp.w	r9, #0
 800a426:	d079      	beq.n	800a51c <_dtoa_r+0x4b4>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd35      	ble.n	800a49a <_dtoa_r+0x432>
 800a42e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a432:	9308      	str	r3, [sp, #32]
 800a434:	4639      	mov	r1, r7
 800a436:	2200      	movs	r2, #0
 800a438:	4b8b      	ldr	r3, [pc, #556]	; (800a668 <_dtoa_r+0x600>)
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7f6 f8ec 	bl	8000618 <__aeabi_dmul>
 800a440:	e9cd 0100 	strd	r0, r1, [sp]
 800a444:	9f02      	ldr	r7, [sp, #8]
 800a446:	3501      	adds	r5, #1
 800a448:	4628      	mov	r0, r5
 800a44a:	f7f6 f87b 	bl	8000544 <__aeabi_i2d>
 800a44e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	2200      	movs	r2, #0
 800a458:	4b84      	ldr	r3, [pc, #528]	; (800a66c <_dtoa_r+0x604>)
 800a45a:	f7f5 ff27 	bl	80002ac <__adddf3>
 800a45e:	4605      	mov	r5, r0
 800a460:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a464:	2f00      	cmp	r7, #0
 800a466:	d15d      	bne.n	800a524 <_dtoa_r+0x4bc>
 800a468:	2200      	movs	r2, #0
 800a46a:	4b81      	ldr	r3, [pc, #516]	; (800a670 <_dtoa_r+0x608>)
 800a46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a470:	f7f5 ff1a 	bl	80002a8 <__aeabi_dsub>
 800a474:	462a      	mov	r2, r5
 800a476:	4633      	mov	r3, r6
 800a478:	e9cd 0100 	strd	r0, r1, [sp]
 800a47c:	f7f6 fb5c 	bl	8000b38 <__aeabi_dcmpgt>
 800a480:	2800      	cmp	r0, #0
 800a482:	f040 8288 	bne.w	800a996 <_dtoa_r+0x92e>
 800a486:	462a      	mov	r2, r5
 800a488:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a490:	f7f6 fb34 	bl	8000afc <__aeabi_dcmplt>
 800a494:	2800      	cmp	r0, #0
 800a496:	f040 827c 	bne.w	800a992 <_dtoa_r+0x92a>
 800a49a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a49e:	e9cd 2300 	strd	r2, r3, [sp]
 800a4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f2c0 8150 	blt.w	800a74a <_dtoa_r+0x6e2>
 800a4aa:	f1ba 0f0e 	cmp.w	sl, #14
 800a4ae:	f300 814c 	bgt.w	800a74a <_dtoa_r+0x6e2>
 800a4b2:	4b6a      	ldr	r3, [pc, #424]	; (800a65c <_dtoa_r+0x5f4>)
 800a4b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4b8:	ed93 7b00 	vldr	d7, [r3]
 800a4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4c4:	f280 80d8 	bge.w	800a678 <_dtoa_r+0x610>
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	f300 80d4 	bgt.w	800a678 <_dtoa_r+0x610>
 800a4d0:	f040 825e 	bne.w	800a990 <_dtoa_r+0x928>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4b66      	ldr	r3, [pc, #408]	; (800a670 <_dtoa_r+0x608>)
 800a4d8:	ec51 0b17 	vmov	r0, r1, d7
 800a4dc:	f7f6 f89c 	bl	8000618 <__aeabi_dmul>
 800a4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e4:	f7f6 fb1e 	bl	8000b24 <__aeabi_dcmpge>
 800a4e8:	464f      	mov	r7, r9
 800a4ea:	464e      	mov	r6, r9
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 8234 	bne.w	800a95a <_dtoa_r+0x8f2>
 800a4f2:	2331      	movs	r3, #49	; 0x31
 800a4f4:	f10b 0501 	add.w	r5, fp, #1
 800a4f8:	f88b 3000 	strb.w	r3, [fp]
 800a4fc:	f10a 0a01 	add.w	sl, sl, #1
 800a500:	e22f      	b.n	800a962 <_dtoa_r+0x8fa>
 800a502:	07f2      	lsls	r2, r6, #31
 800a504:	d505      	bpl.n	800a512 <_dtoa_r+0x4aa>
 800a506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50a:	f7f6 f885 	bl	8000618 <__aeabi_dmul>
 800a50e:	3501      	adds	r5, #1
 800a510:	2301      	movs	r3, #1
 800a512:	1076      	asrs	r6, r6, #1
 800a514:	3708      	adds	r7, #8
 800a516:	e772      	b.n	800a3fe <_dtoa_r+0x396>
 800a518:	2502      	movs	r5, #2
 800a51a:	e774      	b.n	800a406 <_dtoa_r+0x39e>
 800a51c:	f8cd a020 	str.w	sl, [sp, #32]
 800a520:	464f      	mov	r7, r9
 800a522:	e791      	b.n	800a448 <_dtoa_r+0x3e0>
 800a524:	4b4d      	ldr	r3, [pc, #308]	; (800a65c <_dtoa_r+0x5f4>)
 800a526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a52a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a530:	2b00      	cmp	r3, #0
 800a532:	d047      	beq.n	800a5c4 <_dtoa_r+0x55c>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	2000      	movs	r0, #0
 800a53a:	494e      	ldr	r1, [pc, #312]	; (800a674 <_dtoa_r+0x60c>)
 800a53c:	f7f6 f996 	bl	800086c <__aeabi_ddiv>
 800a540:	462a      	mov	r2, r5
 800a542:	4633      	mov	r3, r6
 800a544:	f7f5 feb0 	bl	80002a8 <__aeabi_dsub>
 800a548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a54c:	465d      	mov	r5, fp
 800a54e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a552:	f7f6 fb11 	bl	8000b78 <__aeabi_d2iz>
 800a556:	4606      	mov	r6, r0
 800a558:	f7f5 fff4 	bl	8000544 <__aeabi_i2d>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a564:	f7f5 fea0 	bl	80002a8 <__aeabi_dsub>
 800a568:	3630      	adds	r6, #48	; 0x30
 800a56a:	f805 6b01 	strb.w	r6, [r5], #1
 800a56e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a572:	e9cd 0100 	strd	r0, r1, [sp]
 800a576:	f7f6 fac1 	bl	8000afc <__aeabi_dcmplt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d163      	bne.n	800a646 <_dtoa_r+0x5de>
 800a57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a582:	2000      	movs	r0, #0
 800a584:	4937      	ldr	r1, [pc, #220]	; (800a664 <_dtoa_r+0x5fc>)
 800a586:	f7f5 fe8f 	bl	80002a8 <__aeabi_dsub>
 800a58a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a58e:	f7f6 fab5 	bl	8000afc <__aeabi_dcmplt>
 800a592:	2800      	cmp	r0, #0
 800a594:	f040 80b7 	bne.w	800a706 <_dtoa_r+0x69e>
 800a598:	eba5 030b 	sub.w	r3, r5, fp
 800a59c:	429f      	cmp	r7, r3
 800a59e:	f77f af7c 	ble.w	800a49a <_dtoa_r+0x432>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4b30      	ldr	r3, [pc, #192]	; (800a668 <_dtoa_r+0x600>)
 800a5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5aa:	f7f6 f835 	bl	8000618 <__aeabi_dmul>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5b4:	4b2c      	ldr	r3, [pc, #176]	; (800a668 <_dtoa_r+0x600>)
 800a5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ba:	f7f6 f82d 	bl	8000618 <__aeabi_dmul>
 800a5be:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c2:	e7c4      	b.n	800a54e <_dtoa_r+0x4e6>
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4633      	mov	r3, r6
 800a5c8:	f7f6 f826 	bl	8000618 <__aeabi_dmul>
 800a5cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5d0:	eb0b 0507 	add.w	r5, fp, r7
 800a5d4:	465e      	mov	r6, fp
 800a5d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5da:	f7f6 facd 	bl	8000b78 <__aeabi_d2iz>
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f7f5 ffb0 	bl	8000544 <__aeabi_i2d>
 800a5e4:	3730      	adds	r7, #48	; 0x30
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ee:	f7f5 fe5b 	bl	80002a8 <__aeabi_dsub>
 800a5f2:	f806 7b01 	strb.w	r7, [r6], #1
 800a5f6:	42ae      	cmp	r6, r5
 800a5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	d126      	bne.n	800a650 <_dtoa_r+0x5e8>
 800a602:	4b1c      	ldr	r3, [pc, #112]	; (800a674 <_dtoa_r+0x60c>)
 800a604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a608:	f7f5 fe50 	bl	80002ac <__adddf3>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a614:	f7f6 fa90 	bl	8000b38 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d174      	bne.n	800a706 <_dtoa_r+0x69e>
 800a61c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a620:	2000      	movs	r0, #0
 800a622:	4914      	ldr	r1, [pc, #80]	; (800a674 <_dtoa_r+0x60c>)
 800a624:	f7f5 fe40 	bl	80002a8 <__aeabi_dsub>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a630:	f7f6 fa64 	bl	8000afc <__aeabi_dcmplt>
 800a634:	2800      	cmp	r0, #0
 800a636:	f43f af30 	beq.w	800a49a <_dtoa_r+0x432>
 800a63a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a63e:	2b30      	cmp	r3, #48	; 0x30
 800a640:	f105 32ff 	add.w	r2, r5, #4294967295
 800a644:	d002      	beq.n	800a64c <_dtoa_r+0x5e4>
 800a646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a64a:	e04a      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a64c:	4615      	mov	r5, r2
 800a64e:	e7f4      	b.n	800a63a <_dtoa_r+0x5d2>
 800a650:	4b05      	ldr	r3, [pc, #20]	; (800a668 <_dtoa_r+0x600>)
 800a652:	f7f5 ffe1 	bl	8000618 <__aeabi_dmul>
 800a656:	e9cd 0100 	strd	r0, r1, [sp]
 800a65a:	e7bc      	b.n	800a5d6 <_dtoa_r+0x56e>
 800a65c:	0800ba20 	.word	0x0800ba20
 800a660:	0800b9f8 	.word	0x0800b9f8
 800a664:	3ff00000 	.word	0x3ff00000
 800a668:	40240000 	.word	0x40240000
 800a66c:	401c0000 	.word	0x401c0000
 800a670:	40140000 	.word	0x40140000
 800a674:	3fe00000 	.word	0x3fe00000
 800a678:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a67c:	465d      	mov	r5, fp
 800a67e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a682:	4630      	mov	r0, r6
 800a684:	4639      	mov	r1, r7
 800a686:	f7f6 f8f1 	bl	800086c <__aeabi_ddiv>
 800a68a:	f7f6 fa75 	bl	8000b78 <__aeabi_d2iz>
 800a68e:	4680      	mov	r8, r0
 800a690:	f7f5 ff58 	bl	8000544 <__aeabi_i2d>
 800a694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a698:	f7f5 ffbe 	bl	8000618 <__aeabi_dmul>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a6a8:	f7f5 fdfe 	bl	80002a8 <__aeabi_dsub>
 800a6ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a6b0:	eba5 060b 	sub.w	r6, r5, fp
 800a6b4:	45b1      	cmp	r9, r6
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	d139      	bne.n	800a730 <_dtoa_r+0x6c8>
 800a6bc:	f7f5 fdf6 	bl	80002ac <__adddf3>
 800a6c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	f7f6 fa36 	bl	8000b38 <__aeabi_dcmpgt>
 800a6cc:	b9c8      	cbnz	r0, 800a702 <_dtoa_r+0x69a>
 800a6ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f6 fa07 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6da:	b110      	cbz	r0, 800a6e2 <_dtoa_r+0x67a>
 800a6dc:	f018 0f01 	tst.w	r8, #1
 800a6e0:	d10f      	bne.n	800a702 <_dtoa_r+0x69a>
 800a6e2:	9904      	ldr	r1, [sp, #16]
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 facc 	bl	800ac82 <_Bfree>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6ee:	702b      	strb	r3, [r5, #0]
 800a6f0:	f10a 0301 	add.w	r3, sl, #1
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 8241 	beq.w	800ab80 <_dtoa_r+0xb18>
 800a6fe:	601d      	str	r5, [r3, #0]
 800a700:	e23e      	b.n	800ab80 <_dtoa_r+0xb18>
 800a702:	f8cd a020 	str.w	sl, [sp, #32]
 800a706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a70a:	2a39      	cmp	r2, #57	; 0x39
 800a70c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a710:	d108      	bne.n	800a724 <_dtoa_r+0x6bc>
 800a712:	459b      	cmp	fp, r3
 800a714:	d10a      	bne.n	800a72c <_dtoa_r+0x6c4>
 800a716:	9b08      	ldr	r3, [sp, #32]
 800a718:	3301      	adds	r3, #1
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	2330      	movs	r3, #48	; 0x30
 800a71e:	f88b 3000 	strb.w	r3, [fp]
 800a722:	465b      	mov	r3, fp
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	3201      	adds	r2, #1
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	e78c      	b.n	800a646 <_dtoa_r+0x5de>
 800a72c:	461d      	mov	r5, r3
 800a72e:	e7ea      	b.n	800a706 <_dtoa_r+0x69e>
 800a730:	2200      	movs	r2, #0
 800a732:	4b9b      	ldr	r3, [pc, #620]	; (800a9a0 <_dtoa_r+0x938>)
 800a734:	f7f5 ff70 	bl	8000618 <__aeabi_dmul>
 800a738:	2200      	movs	r2, #0
 800a73a:	2300      	movs	r3, #0
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	f7f6 f9d2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a744:	2800      	cmp	r0, #0
 800a746:	d09a      	beq.n	800a67e <_dtoa_r+0x616>
 800a748:	e7cb      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a74c:	2a00      	cmp	r2, #0
 800a74e:	f000 808b 	beq.w	800a868 <_dtoa_r+0x800>
 800a752:	9a06      	ldr	r2, [sp, #24]
 800a754:	2a01      	cmp	r2, #1
 800a756:	dc6e      	bgt.n	800a836 <_dtoa_r+0x7ce>
 800a758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a75a:	2a00      	cmp	r2, #0
 800a75c:	d067      	beq.n	800a82e <_dtoa_r+0x7c6>
 800a75e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a762:	9f07      	ldr	r7, [sp, #28]
 800a764:	9d05      	ldr	r5, [sp, #20]
 800a766:	9a05      	ldr	r2, [sp, #20]
 800a768:	2101      	movs	r1, #1
 800a76a:	441a      	add	r2, r3
 800a76c:	4620      	mov	r0, r4
 800a76e:	9205      	str	r2, [sp, #20]
 800a770:	4498      	add	r8, r3
 800a772:	f000 fb26 	bl	800adc2 <__i2b>
 800a776:	4606      	mov	r6, r0
 800a778:	2d00      	cmp	r5, #0
 800a77a:	dd0c      	ble.n	800a796 <_dtoa_r+0x72e>
 800a77c:	f1b8 0f00 	cmp.w	r8, #0
 800a780:	dd09      	ble.n	800a796 <_dtoa_r+0x72e>
 800a782:	4545      	cmp	r5, r8
 800a784:	9a05      	ldr	r2, [sp, #20]
 800a786:	462b      	mov	r3, r5
 800a788:	bfa8      	it	ge
 800a78a:	4643      	movge	r3, r8
 800a78c:	1ad2      	subs	r2, r2, r3
 800a78e:	9205      	str	r2, [sp, #20]
 800a790:	1aed      	subs	r5, r5, r3
 800a792:	eba8 0803 	sub.w	r8, r8, r3
 800a796:	9b07      	ldr	r3, [sp, #28]
 800a798:	b1eb      	cbz	r3, 800a7d6 <_dtoa_r+0x76e>
 800a79a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d067      	beq.n	800a870 <_dtoa_r+0x808>
 800a7a0:	b18f      	cbz	r7, 800a7c6 <_dtoa_r+0x75e>
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	463a      	mov	r2, r7
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fbaa 	bl	800af00 <__pow5mult>
 800a7ac:	9a04      	ldr	r2, [sp, #16]
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fb0e 	bl	800add4 <__multiply>
 800a7b8:	9904      	ldr	r1, [sp, #16]
 800a7ba:	9008      	str	r0, [sp, #32]
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fa60 	bl	800ac82 <_Bfree>
 800a7c2:	9b08      	ldr	r3, [sp, #32]
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	9b07      	ldr	r3, [sp, #28]
 800a7c8:	1bda      	subs	r2, r3, r7
 800a7ca:	d004      	beq.n	800a7d6 <_dtoa_r+0x76e>
 800a7cc:	9904      	ldr	r1, [sp, #16]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fb96 	bl	800af00 <__pow5mult>
 800a7d4:	9004      	str	r0, [sp, #16]
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 faf2 	bl	800adc2 <__i2b>
 800a7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 81d0 	beq.w	800ab88 <_dtoa_r+0xb20>
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fb87 	bl	800af00 <__pow5mult>
 800a7f2:	9b06      	ldr	r3, [sp, #24]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	dc40      	bgt.n	800a87c <_dtoa_r+0x814>
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d139      	bne.n	800a874 <_dtoa_r+0x80c>
 800a800:	9b01      	ldr	r3, [sp, #4]
 800a802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a806:	2b00      	cmp	r3, #0
 800a808:	d136      	bne.n	800a878 <_dtoa_r+0x810>
 800a80a:	9b01      	ldr	r3, [sp, #4]
 800a80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a810:	0d1b      	lsrs	r3, r3, #20
 800a812:	051b      	lsls	r3, r3, #20
 800a814:	b12b      	cbz	r3, 800a822 <_dtoa_r+0x7ba>
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	3301      	adds	r3, #1
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f108 0801 	add.w	r8, r8, #1
 800a820:	2301      	movs	r3, #1
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a826:	2b00      	cmp	r3, #0
 800a828:	d12a      	bne.n	800a880 <_dtoa_r+0x818>
 800a82a:	2001      	movs	r0, #1
 800a82c:	e030      	b.n	800a890 <_dtoa_r+0x828>
 800a82e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a830:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a834:	e795      	b.n	800a762 <_dtoa_r+0x6fa>
 800a836:	9b07      	ldr	r3, [sp, #28]
 800a838:	f109 37ff 	add.w	r7, r9, #4294967295
 800a83c:	42bb      	cmp	r3, r7
 800a83e:	bfbf      	itttt	lt
 800a840:	9b07      	ldrlt	r3, [sp, #28]
 800a842:	9707      	strlt	r7, [sp, #28]
 800a844:	1afa      	sublt	r2, r7, r3
 800a846:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a848:	bfbb      	ittet	lt
 800a84a:	189b      	addlt	r3, r3, r2
 800a84c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a84e:	1bdf      	subge	r7, r3, r7
 800a850:	2700      	movlt	r7, #0
 800a852:	f1b9 0f00 	cmp.w	r9, #0
 800a856:	bfb5      	itete	lt
 800a858:	9b05      	ldrlt	r3, [sp, #20]
 800a85a:	9d05      	ldrge	r5, [sp, #20]
 800a85c:	eba3 0509 	sublt.w	r5, r3, r9
 800a860:	464b      	movge	r3, r9
 800a862:	bfb8      	it	lt
 800a864:	2300      	movlt	r3, #0
 800a866:	e77e      	b.n	800a766 <_dtoa_r+0x6fe>
 800a868:	9f07      	ldr	r7, [sp, #28]
 800a86a:	9d05      	ldr	r5, [sp, #20]
 800a86c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a86e:	e783      	b.n	800a778 <_dtoa_r+0x710>
 800a870:	9a07      	ldr	r2, [sp, #28]
 800a872:	e7ab      	b.n	800a7cc <_dtoa_r+0x764>
 800a874:	2300      	movs	r3, #0
 800a876:	e7d4      	b.n	800a822 <_dtoa_r+0x7ba>
 800a878:	9b00      	ldr	r3, [sp, #0]
 800a87a:	e7d2      	b.n	800a822 <_dtoa_r+0x7ba>
 800a87c:	2300      	movs	r3, #0
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a886:	6918      	ldr	r0, [r3, #16]
 800a888:	f000 fa4d 	bl	800ad26 <__hi0bits>
 800a88c:	f1c0 0020 	rsb	r0, r0, #32
 800a890:	4440      	add	r0, r8
 800a892:	f010 001f 	ands.w	r0, r0, #31
 800a896:	d047      	beq.n	800a928 <_dtoa_r+0x8c0>
 800a898:	f1c0 0320 	rsb	r3, r0, #32
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	dd3b      	ble.n	800a918 <_dtoa_r+0x8b0>
 800a8a0:	9b05      	ldr	r3, [sp, #20]
 800a8a2:	f1c0 001c 	rsb	r0, r0, #28
 800a8a6:	4403      	add	r3, r0
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	4405      	add	r5, r0
 800a8ac:	4480      	add	r8, r0
 800a8ae:	9b05      	ldr	r3, [sp, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dd05      	ble.n	800a8c0 <_dtoa_r+0x858>
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	9904      	ldr	r1, [sp, #16]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f000 fb6f 	bl	800af9c <__lshift>
 800a8be:	9004      	str	r0, [sp, #16]
 800a8c0:	f1b8 0f00 	cmp.w	r8, #0
 800a8c4:	dd05      	ble.n	800a8d2 <_dtoa_r+0x86a>
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fb66 	bl	800af9c <__lshift>
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d4:	b353      	cbz	r3, 800a92c <_dtoa_r+0x8c4>
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	9804      	ldr	r0, [sp, #16]
 800a8da:	f000 fbb3 	bl	800b044 <__mcmp>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	da24      	bge.n	800a92c <_dtoa_r+0x8c4>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	220a      	movs	r2, #10
 800a8e6:	9904      	ldr	r1, [sp, #16]
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f9e1 	bl	800acb0 <__multadd>
 800a8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f0:	9004      	str	r0, [sp, #16]
 800a8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 814d 	beq.w	800ab96 <_dtoa_r+0xb2e>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4631      	mov	r1, r6
 800a900:	220a      	movs	r2, #10
 800a902:	4620      	mov	r0, r4
 800a904:	f000 f9d4 	bl	800acb0 <__multadd>
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	4606      	mov	r6, r0
 800a90e:	dc4f      	bgt.n	800a9b0 <_dtoa_r+0x948>
 800a910:	9b06      	ldr	r3, [sp, #24]
 800a912:	2b02      	cmp	r3, #2
 800a914:	dd4c      	ble.n	800a9b0 <_dtoa_r+0x948>
 800a916:	e011      	b.n	800a93c <_dtoa_r+0x8d4>
 800a918:	d0c9      	beq.n	800a8ae <_dtoa_r+0x846>
 800a91a:	9a05      	ldr	r2, [sp, #20]
 800a91c:	331c      	adds	r3, #28
 800a91e:	441a      	add	r2, r3
 800a920:	9205      	str	r2, [sp, #20]
 800a922:	441d      	add	r5, r3
 800a924:	4498      	add	r8, r3
 800a926:	e7c2      	b.n	800a8ae <_dtoa_r+0x846>
 800a928:	4603      	mov	r3, r0
 800a92a:	e7f6      	b.n	800a91a <_dtoa_r+0x8b2>
 800a92c:	f1b9 0f00 	cmp.w	r9, #0
 800a930:	dc38      	bgt.n	800a9a4 <_dtoa_r+0x93c>
 800a932:	9b06      	ldr	r3, [sp, #24]
 800a934:	2b02      	cmp	r3, #2
 800a936:	dd35      	ble.n	800a9a4 <_dtoa_r+0x93c>
 800a938:	f8cd 9008 	str.w	r9, [sp, #8]
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	b963      	cbnz	r3, 800a95a <_dtoa_r+0x8f2>
 800a940:	4639      	mov	r1, r7
 800a942:	2205      	movs	r2, #5
 800a944:	4620      	mov	r0, r4
 800a946:	f000 f9b3 	bl	800acb0 <__multadd>
 800a94a:	4601      	mov	r1, r0
 800a94c:	4607      	mov	r7, r0
 800a94e:	9804      	ldr	r0, [sp, #16]
 800a950:	f000 fb78 	bl	800b044 <__mcmp>
 800a954:	2800      	cmp	r0, #0
 800a956:	f73f adcc 	bgt.w	800a4f2 <_dtoa_r+0x48a>
 800a95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95c:	465d      	mov	r5, fp
 800a95e:	ea6f 0a03 	mvn.w	sl, r3
 800a962:	f04f 0900 	mov.w	r9, #0
 800a966:	4639      	mov	r1, r7
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 f98a 	bl	800ac82 <_Bfree>
 800a96e:	2e00      	cmp	r6, #0
 800a970:	f43f aeb7 	beq.w	800a6e2 <_dtoa_r+0x67a>
 800a974:	f1b9 0f00 	cmp.w	r9, #0
 800a978:	d005      	beq.n	800a986 <_dtoa_r+0x91e>
 800a97a:	45b1      	cmp	r9, r6
 800a97c:	d003      	beq.n	800a986 <_dtoa_r+0x91e>
 800a97e:	4649      	mov	r1, r9
 800a980:	4620      	mov	r0, r4
 800a982:	f000 f97e 	bl	800ac82 <_Bfree>
 800a986:	4631      	mov	r1, r6
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 f97a 	bl	800ac82 <_Bfree>
 800a98e:	e6a8      	b.n	800a6e2 <_dtoa_r+0x67a>
 800a990:	2700      	movs	r7, #0
 800a992:	463e      	mov	r6, r7
 800a994:	e7e1      	b.n	800a95a <_dtoa_r+0x8f2>
 800a996:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a99a:	463e      	mov	r6, r7
 800a99c:	e5a9      	b.n	800a4f2 <_dtoa_r+0x48a>
 800a99e:	bf00      	nop
 800a9a0:	40240000 	.word	0x40240000
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80fa 	beq.w	800aba4 <_dtoa_r+0xb3c>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	dd05      	ble.n	800a9c0 <_dtoa_r+0x958>
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 faef 	bl	800af9c <__lshift>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d04c      	beq.n	800aa60 <_dtoa_r+0x9f8>
 800a9c6:	6871      	ldr	r1, [r6, #4]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 f926 	bl	800ac1a <_Balloc>
 800a9ce:	6932      	ldr	r2, [r6, #16]
 800a9d0:	3202      	adds	r2, #2
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	0092      	lsls	r2, r2, #2
 800a9d6:	f106 010c 	add.w	r1, r6, #12
 800a9da:	300c      	adds	r0, #12
 800a9dc:	f000 f912 	bl	800ac04 <memcpy>
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 fad9 	bl	800af9c <__lshift>
 800a9ea:	9b00      	ldr	r3, [sp, #0]
 800a9ec:	f8cd b014 	str.w	fp, [sp, #20]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	46b1      	mov	r9, r6
 800a9f6:	9307      	str	r3, [sp, #28]
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	9804      	ldr	r0, [sp, #16]
 800a9fe:	f7ff faa6 	bl	8009f4e <quorem>
 800aa02:	4649      	mov	r1, r9
 800aa04:	4605      	mov	r5, r0
 800aa06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aa0a:	9804      	ldr	r0, [sp, #16]
 800aa0c:	f000 fb1a 	bl	800b044 <__mcmp>
 800aa10:	4632      	mov	r2, r6
 800aa12:	9000      	str	r0, [sp, #0]
 800aa14:	4639      	mov	r1, r7
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 fb2e 	bl	800b078 <__mdiff>
 800aa1c:	68c3      	ldr	r3, [r0, #12]
 800aa1e:	4602      	mov	r2, r0
 800aa20:	bb03      	cbnz	r3, 800aa64 <_dtoa_r+0x9fc>
 800aa22:	4601      	mov	r1, r0
 800aa24:	9008      	str	r0, [sp, #32]
 800aa26:	9804      	ldr	r0, [sp, #16]
 800aa28:	f000 fb0c 	bl	800b044 <__mcmp>
 800aa2c:	9a08      	ldr	r2, [sp, #32]
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4611      	mov	r1, r2
 800aa32:	4620      	mov	r0, r4
 800aa34:	9308      	str	r3, [sp, #32]
 800aa36:	f000 f924 	bl	800ac82 <_Bfree>
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	b9a3      	cbnz	r3, 800aa68 <_dtoa_r+0xa00>
 800aa3e:	9a06      	ldr	r2, [sp, #24]
 800aa40:	b992      	cbnz	r2, 800aa68 <_dtoa_r+0xa00>
 800aa42:	9a07      	ldr	r2, [sp, #28]
 800aa44:	b982      	cbnz	r2, 800aa68 <_dtoa_r+0xa00>
 800aa46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa4a:	d029      	beq.n	800aaa0 <_dtoa_r+0xa38>
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd01      	ble.n	800aa56 <_dtoa_r+0x9ee>
 800aa52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aa56:	9b05      	ldr	r3, [sp, #20]
 800aa58:	1c5d      	adds	r5, r3, #1
 800aa5a:	f883 8000 	strb.w	r8, [r3]
 800aa5e:	e782      	b.n	800a966 <_dtoa_r+0x8fe>
 800aa60:	4630      	mov	r0, r6
 800aa62:	e7c2      	b.n	800a9ea <_dtoa_r+0x982>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e7e3      	b.n	800aa30 <_dtoa_r+0x9c8>
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	db04      	blt.n	800aa78 <_dtoa_r+0xa10>
 800aa6e:	d125      	bne.n	800aabc <_dtoa_r+0xa54>
 800aa70:	9a06      	ldr	r2, [sp, #24]
 800aa72:	bb1a      	cbnz	r2, 800aabc <_dtoa_r+0xa54>
 800aa74:	9a07      	ldr	r2, [sp, #28]
 800aa76:	bb0a      	cbnz	r2, 800aabc <_dtoa_r+0xa54>
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	ddec      	ble.n	800aa56 <_dtoa_r+0x9ee>
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	9904      	ldr	r1, [sp, #16]
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fa8b 	bl	800af9c <__lshift>
 800aa86:	4639      	mov	r1, r7
 800aa88:	9004      	str	r0, [sp, #16]
 800aa8a:	f000 fadb 	bl	800b044 <__mcmp>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dc03      	bgt.n	800aa9a <_dtoa_r+0xa32>
 800aa92:	d1e0      	bne.n	800aa56 <_dtoa_r+0x9ee>
 800aa94:	f018 0f01 	tst.w	r8, #1
 800aa98:	d0dd      	beq.n	800aa56 <_dtoa_r+0x9ee>
 800aa9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa9e:	d1d8      	bne.n	800aa52 <_dtoa_r+0x9ea>
 800aaa0:	9b05      	ldr	r3, [sp, #20]
 800aaa2:	9a05      	ldr	r2, [sp, #20]
 800aaa4:	1c5d      	adds	r5, r3, #1
 800aaa6:	2339      	movs	r3, #57	; 0x39
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aaae:	2b39      	cmp	r3, #57	; 0x39
 800aab0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aab4:	d04f      	beq.n	800ab56 <_dtoa_r+0xaee>
 800aab6:	3301      	adds	r3, #1
 800aab8:	7013      	strb	r3, [r2, #0]
 800aaba:	e754      	b.n	800a966 <_dtoa_r+0x8fe>
 800aabc:	9a05      	ldr	r2, [sp, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f102 0501 	add.w	r5, r2, #1
 800aac4:	dd06      	ble.n	800aad4 <_dtoa_r+0xa6c>
 800aac6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaca:	d0e9      	beq.n	800aaa0 <_dtoa_r+0xa38>
 800aacc:	f108 0801 	add.w	r8, r8, #1
 800aad0:	9b05      	ldr	r3, [sp, #20]
 800aad2:	e7c2      	b.n	800aa5a <_dtoa_r+0x9f2>
 800aad4:	9a02      	ldr	r2, [sp, #8]
 800aad6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aada:	eba5 030b 	sub.w	r3, r5, fp
 800aade:	4293      	cmp	r3, r2
 800aae0:	d021      	beq.n	800ab26 <_dtoa_r+0xabe>
 800aae2:	2300      	movs	r3, #0
 800aae4:	220a      	movs	r2, #10
 800aae6:	9904      	ldr	r1, [sp, #16]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 f8e1 	bl	800acb0 <__multadd>
 800aaee:	45b1      	cmp	r9, r6
 800aaf0:	9004      	str	r0, [sp, #16]
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f04f 020a 	mov.w	r2, #10
 800aafa:	4649      	mov	r1, r9
 800aafc:	4620      	mov	r0, r4
 800aafe:	d105      	bne.n	800ab0c <_dtoa_r+0xaa4>
 800ab00:	f000 f8d6 	bl	800acb0 <__multadd>
 800ab04:	4681      	mov	r9, r0
 800ab06:	4606      	mov	r6, r0
 800ab08:	9505      	str	r5, [sp, #20]
 800ab0a:	e776      	b.n	800a9fa <_dtoa_r+0x992>
 800ab0c:	f000 f8d0 	bl	800acb0 <__multadd>
 800ab10:	4631      	mov	r1, r6
 800ab12:	4681      	mov	r9, r0
 800ab14:	2300      	movs	r3, #0
 800ab16:	220a      	movs	r2, #10
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 f8c9 	bl	800acb0 <__multadd>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	e7f2      	b.n	800ab08 <_dtoa_r+0xaa0>
 800ab22:	f04f 0900 	mov.w	r9, #0
 800ab26:	2201      	movs	r2, #1
 800ab28:	9904      	ldr	r1, [sp, #16]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fa36 	bl	800af9c <__lshift>
 800ab30:	4639      	mov	r1, r7
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	f000 fa86 	bl	800b044 <__mcmp>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	dcb6      	bgt.n	800aaaa <_dtoa_r+0xa42>
 800ab3c:	d102      	bne.n	800ab44 <_dtoa_r+0xadc>
 800ab3e:	f018 0f01 	tst.w	r8, #1
 800ab42:	d1b2      	bne.n	800aaaa <_dtoa_r+0xa42>
 800ab44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab48:	2b30      	cmp	r3, #48	; 0x30
 800ab4a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab4e:	f47f af0a 	bne.w	800a966 <_dtoa_r+0x8fe>
 800ab52:	4615      	mov	r5, r2
 800ab54:	e7f6      	b.n	800ab44 <_dtoa_r+0xadc>
 800ab56:	4593      	cmp	fp, r2
 800ab58:	d105      	bne.n	800ab66 <_dtoa_r+0xafe>
 800ab5a:	2331      	movs	r3, #49	; 0x31
 800ab5c:	f10a 0a01 	add.w	sl, sl, #1
 800ab60:	f88b 3000 	strb.w	r3, [fp]
 800ab64:	e6ff      	b.n	800a966 <_dtoa_r+0x8fe>
 800ab66:	4615      	mov	r5, r2
 800ab68:	e79f      	b.n	800aaaa <_dtoa_r+0xa42>
 800ab6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800abd0 <_dtoa_r+0xb68>
 800ab6e:	e007      	b.n	800ab80 <_dtoa_r+0xb18>
 800ab70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab72:	f8df b060 	ldr.w	fp, [pc, #96]	; 800abd4 <_dtoa_r+0xb6c>
 800ab76:	b11b      	cbz	r3, 800ab80 <_dtoa_r+0xb18>
 800ab78:	f10b 0308 	add.w	r3, fp, #8
 800ab7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	4658      	mov	r0, fp
 800ab82:	b017      	add	sp, #92	; 0x5c
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab88:	9b06      	ldr	r3, [sp, #24]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	f77f ae35 	ble.w	800a7fa <_dtoa_r+0x792>
 800ab90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	e649      	b.n	800a82a <_dtoa_r+0x7c2>
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc03      	bgt.n	800aba4 <_dtoa_r+0xb3c>
 800ab9c:	9b06      	ldr	r3, [sp, #24]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	f73f aecc 	bgt.w	800a93c <_dtoa_r+0x8d4>
 800aba4:	465d      	mov	r5, fp
 800aba6:	4639      	mov	r1, r7
 800aba8:	9804      	ldr	r0, [sp, #16]
 800abaa:	f7ff f9d0 	bl	8009f4e <quorem>
 800abae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800abb2:	f805 8b01 	strb.w	r8, [r5], #1
 800abb6:	9a02      	ldr	r2, [sp, #8]
 800abb8:	eba5 030b 	sub.w	r3, r5, fp
 800abbc:	429a      	cmp	r2, r3
 800abbe:	ddb0      	ble.n	800ab22 <_dtoa_r+0xaba>
 800abc0:	2300      	movs	r3, #0
 800abc2:	220a      	movs	r2, #10
 800abc4:	9904      	ldr	r1, [sp, #16]
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f872 	bl	800acb0 <__multadd>
 800abcc:	9004      	str	r0, [sp, #16]
 800abce:	e7ea      	b.n	800aba6 <_dtoa_r+0xb3e>
 800abd0:	0800b9c0 	.word	0x0800b9c0
 800abd4:	0800b9e4 	.word	0x0800b9e4

0800abd8 <_localeconv_r>:
 800abd8:	4b04      	ldr	r3, [pc, #16]	; (800abec <_localeconv_r+0x14>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6a18      	ldr	r0, [r3, #32]
 800abde:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <_localeconv_r+0x18>)
 800abe0:	2800      	cmp	r0, #0
 800abe2:	bf08      	it	eq
 800abe4:	4618      	moveq	r0, r3
 800abe6:	30f0      	adds	r0, #240	; 0xf0
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000068 	.word	0x20000068
 800abf0:	200000cc 	.word	0x200000cc

0800abf4 <malloc>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <malloc+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f000 bb45 	b.w	800b288 <_malloc_r>
 800abfe:	bf00      	nop
 800ac00:	20000068 	.word	0x20000068

0800ac04 <memcpy>:
 800ac04:	b510      	push	{r4, lr}
 800ac06:	1e43      	subs	r3, r0, #1
 800ac08:	440a      	add	r2, r1
 800ac0a:	4291      	cmp	r1, r2
 800ac0c:	d100      	bne.n	800ac10 <memcpy+0xc>
 800ac0e:	bd10      	pop	{r4, pc}
 800ac10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac18:	e7f7      	b.n	800ac0a <memcpy+0x6>

0800ac1a <_Balloc>:
 800ac1a:	b570      	push	{r4, r5, r6, lr}
 800ac1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460e      	mov	r6, r1
 800ac22:	b93d      	cbnz	r5, 800ac34 <_Balloc+0x1a>
 800ac24:	2010      	movs	r0, #16
 800ac26:	f7ff ffe5 	bl	800abf4 <malloc>
 800ac2a:	6260      	str	r0, [r4, #36]	; 0x24
 800ac2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac30:	6005      	str	r5, [r0, #0]
 800ac32:	60c5      	str	r5, [r0, #12]
 800ac34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ac36:	68eb      	ldr	r3, [r5, #12]
 800ac38:	b183      	cbz	r3, 800ac5c <_Balloc+0x42>
 800ac3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac42:	b9b8      	cbnz	r0, 800ac74 <_Balloc+0x5a>
 800ac44:	2101      	movs	r1, #1
 800ac46:	fa01 f506 	lsl.w	r5, r1, r6
 800ac4a:	1d6a      	adds	r2, r5, #5
 800ac4c:	0092      	lsls	r2, r2, #2
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fabe 	bl	800b1d0 <_calloc_r>
 800ac54:	b160      	cbz	r0, 800ac70 <_Balloc+0x56>
 800ac56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ac5a:	e00e      	b.n	800ac7a <_Balloc+0x60>
 800ac5c:	2221      	movs	r2, #33	; 0x21
 800ac5e:	2104      	movs	r1, #4
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fab5 	bl	800b1d0 <_calloc_r>
 800ac66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac68:	60e8      	str	r0, [r5, #12]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d1e4      	bne.n	800ac3a <_Balloc+0x20>
 800ac70:	2000      	movs	r0, #0
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	6802      	ldr	r2, [r0, #0]
 800ac76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac80:	e7f7      	b.n	800ac72 <_Balloc+0x58>

0800ac82 <_Bfree>:
 800ac82:	b570      	push	{r4, r5, r6, lr}
 800ac84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac86:	4606      	mov	r6, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	b93c      	cbnz	r4, 800ac9c <_Bfree+0x1a>
 800ac8c:	2010      	movs	r0, #16
 800ac8e:	f7ff ffb1 	bl	800abf4 <malloc>
 800ac92:	6270      	str	r0, [r6, #36]	; 0x24
 800ac94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac98:	6004      	str	r4, [r0, #0]
 800ac9a:	60c4      	str	r4, [r0, #12]
 800ac9c:	b13d      	cbz	r5, 800acae <_Bfree+0x2c>
 800ac9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aca0:	686a      	ldr	r2, [r5, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aca8:	6029      	str	r1, [r5, #0]
 800acaa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800acae:	bd70      	pop	{r4, r5, r6, pc}

0800acb0 <__multadd>:
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	690d      	ldr	r5, [r1, #16]
 800acb6:	461f      	mov	r7, r3
 800acb8:	4606      	mov	r6, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	f101 0c14 	add.w	ip, r1, #20
 800acc0:	2300      	movs	r3, #0
 800acc2:	f8dc 0000 	ldr.w	r0, [ip]
 800acc6:	b281      	uxth	r1, r0
 800acc8:	fb02 7101 	mla	r1, r2, r1, r7
 800accc:	0c0f      	lsrs	r7, r1, #16
 800acce:	0c00      	lsrs	r0, r0, #16
 800acd0:	fb02 7000 	mla	r0, r2, r0, r7
 800acd4:	b289      	uxth	r1, r1
 800acd6:	3301      	adds	r3, #1
 800acd8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800acdc:	429d      	cmp	r5, r3
 800acde:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ace2:	f84c 1b04 	str.w	r1, [ip], #4
 800ace6:	dcec      	bgt.n	800acc2 <__multadd+0x12>
 800ace8:	b1d7      	cbz	r7, 800ad20 <__multadd+0x70>
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	42ab      	cmp	r3, r5
 800acee:	dc12      	bgt.n	800ad16 <__multadd+0x66>
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	4630      	mov	r0, r6
 800acf4:	3101      	adds	r1, #1
 800acf6:	f7ff ff90 	bl	800ac1a <_Balloc>
 800acfa:	6922      	ldr	r2, [r4, #16]
 800acfc:	3202      	adds	r2, #2
 800acfe:	f104 010c 	add.w	r1, r4, #12
 800ad02:	4680      	mov	r8, r0
 800ad04:	0092      	lsls	r2, r2, #2
 800ad06:	300c      	adds	r0, #12
 800ad08:	f7ff ff7c 	bl	800ac04 <memcpy>
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ffb7 	bl	800ac82 <_Bfree>
 800ad14:	4644      	mov	r4, r8
 800ad16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad1a:	3501      	adds	r5, #1
 800ad1c:	615f      	str	r7, [r3, #20]
 800ad1e:	6125      	str	r5, [r4, #16]
 800ad20:	4620      	mov	r0, r4
 800ad22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad26 <__hi0bits>:
 800ad26:	0c02      	lsrs	r2, r0, #16
 800ad28:	0412      	lsls	r2, r2, #16
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	b9b2      	cbnz	r2, 800ad5c <__hi0bits+0x36>
 800ad2e:	0403      	lsls	r3, r0, #16
 800ad30:	2010      	movs	r0, #16
 800ad32:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad36:	bf04      	itt	eq
 800ad38:	021b      	lsleq	r3, r3, #8
 800ad3a:	3008      	addeq	r0, #8
 800ad3c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad40:	bf04      	itt	eq
 800ad42:	011b      	lsleq	r3, r3, #4
 800ad44:	3004      	addeq	r0, #4
 800ad46:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad4a:	bf04      	itt	eq
 800ad4c:	009b      	lsleq	r3, r3, #2
 800ad4e:	3002      	addeq	r0, #2
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	db06      	blt.n	800ad62 <__hi0bits+0x3c>
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	d503      	bpl.n	800ad60 <__hi0bits+0x3a>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	4770      	bx	lr
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	e7e8      	b.n	800ad32 <__hi0bits+0xc>
 800ad60:	2020      	movs	r0, #32
 800ad62:	4770      	bx	lr

0800ad64 <__lo0bits>:
 800ad64:	6803      	ldr	r3, [r0, #0]
 800ad66:	f013 0207 	ands.w	r2, r3, #7
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	d00b      	beq.n	800ad86 <__lo0bits+0x22>
 800ad6e:	07da      	lsls	r2, r3, #31
 800ad70:	d423      	bmi.n	800adba <__lo0bits+0x56>
 800ad72:	0798      	lsls	r0, r3, #30
 800ad74:	bf49      	itett	mi
 800ad76:	085b      	lsrmi	r3, r3, #1
 800ad78:	089b      	lsrpl	r3, r3, #2
 800ad7a:	2001      	movmi	r0, #1
 800ad7c:	600b      	strmi	r3, [r1, #0]
 800ad7e:	bf5c      	itt	pl
 800ad80:	600b      	strpl	r3, [r1, #0]
 800ad82:	2002      	movpl	r0, #2
 800ad84:	4770      	bx	lr
 800ad86:	b298      	uxth	r0, r3
 800ad88:	b9a8      	cbnz	r0, 800adb6 <__lo0bits+0x52>
 800ad8a:	0c1b      	lsrs	r3, r3, #16
 800ad8c:	2010      	movs	r0, #16
 800ad8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad92:	bf04      	itt	eq
 800ad94:	0a1b      	lsreq	r3, r3, #8
 800ad96:	3008      	addeq	r0, #8
 800ad98:	071a      	lsls	r2, r3, #28
 800ad9a:	bf04      	itt	eq
 800ad9c:	091b      	lsreq	r3, r3, #4
 800ad9e:	3004      	addeq	r0, #4
 800ada0:	079a      	lsls	r2, r3, #30
 800ada2:	bf04      	itt	eq
 800ada4:	089b      	lsreq	r3, r3, #2
 800ada6:	3002      	addeq	r0, #2
 800ada8:	07da      	lsls	r2, r3, #31
 800adaa:	d402      	bmi.n	800adb2 <__lo0bits+0x4e>
 800adac:	085b      	lsrs	r3, r3, #1
 800adae:	d006      	beq.n	800adbe <__lo0bits+0x5a>
 800adb0:	3001      	adds	r0, #1
 800adb2:	600b      	str	r3, [r1, #0]
 800adb4:	4770      	bx	lr
 800adb6:	4610      	mov	r0, r2
 800adb8:	e7e9      	b.n	800ad8e <__lo0bits+0x2a>
 800adba:	2000      	movs	r0, #0
 800adbc:	4770      	bx	lr
 800adbe:	2020      	movs	r0, #32
 800adc0:	4770      	bx	lr

0800adc2 <__i2b>:
 800adc2:	b510      	push	{r4, lr}
 800adc4:	460c      	mov	r4, r1
 800adc6:	2101      	movs	r1, #1
 800adc8:	f7ff ff27 	bl	800ac1a <_Balloc>
 800adcc:	2201      	movs	r2, #1
 800adce:	6144      	str	r4, [r0, #20]
 800add0:	6102      	str	r2, [r0, #16]
 800add2:	bd10      	pop	{r4, pc}

0800add4 <__multiply>:
 800add4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	4614      	mov	r4, r2
 800adda:	690a      	ldr	r2, [r1, #16]
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	429a      	cmp	r2, r3
 800ade0:	bfb8      	it	lt
 800ade2:	460b      	movlt	r3, r1
 800ade4:	4688      	mov	r8, r1
 800ade6:	bfbc      	itt	lt
 800ade8:	46a0      	movlt	r8, r4
 800adea:	461c      	movlt	r4, r3
 800adec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adf0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800adf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adfc:	eb07 0609 	add.w	r6, r7, r9
 800ae00:	42b3      	cmp	r3, r6
 800ae02:	bfb8      	it	lt
 800ae04:	3101      	addlt	r1, #1
 800ae06:	f7ff ff08 	bl	800ac1a <_Balloc>
 800ae0a:	f100 0514 	add.w	r5, r0, #20
 800ae0e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ae12:	462b      	mov	r3, r5
 800ae14:	2200      	movs	r2, #0
 800ae16:	4573      	cmp	r3, lr
 800ae18:	d316      	bcc.n	800ae48 <__multiply+0x74>
 800ae1a:	f104 0214 	add.w	r2, r4, #20
 800ae1e:	f108 0114 	add.w	r1, r8, #20
 800ae22:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ae26:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	9b00      	ldr	r3, [sp, #0]
 800ae2e:	9201      	str	r2, [sp, #4]
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d80c      	bhi.n	800ae4e <__multiply+0x7a>
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	dd03      	ble.n	800ae40 <__multiply+0x6c>
 800ae38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d05d      	beq.n	800aefc <__multiply+0x128>
 800ae40:	6106      	str	r6, [r0, #16]
 800ae42:	b003      	add	sp, #12
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	f843 2b04 	str.w	r2, [r3], #4
 800ae4c:	e7e3      	b.n	800ae16 <__multiply+0x42>
 800ae4e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ae52:	f1bb 0f00 	cmp.w	fp, #0
 800ae56:	d023      	beq.n	800aea0 <__multiply+0xcc>
 800ae58:	4689      	mov	r9, r1
 800ae5a:	46ac      	mov	ip, r5
 800ae5c:	f04f 0800 	mov.w	r8, #0
 800ae60:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae64:	f8dc a000 	ldr.w	sl, [ip]
 800ae68:	b2a3      	uxth	r3, r4
 800ae6a:	fa1f fa8a 	uxth.w	sl, sl
 800ae6e:	fb0b a303 	mla	r3, fp, r3, sl
 800ae72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae76:	f8dc 4000 	ldr.w	r4, [ip]
 800ae7a:	4443      	add	r3, r8
 800ae7c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae80:	fb0b 840a 	mla	r4, fp, sl, r8
 800ae84:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ae88:	46e2      	mov	sl, ip
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae90:	454f      	cmp	r7, r9
 800ae92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae96:	f84a 3b04 	str.w	r3, [sl], #4
 800ae9a:	d82b      	bhi.n	800aef4 <__multiply+0x120>
 800ae9c:	f8cc 8004 	str.w	r8, [ip, #4]
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aea6:	3204      	adds	r2, #4
 800aea8:	f1ba 0f00 	cmp.w	sl, #0
 800aeac:	d020      	beq.n	800aef0 <__multiply+0x11c>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	4689      	mov	r9, r1
 800aeb2:	46a8      	mov	r8, r5
 800aeb4:	f04f 0b00 	mov.w	fp, #0
 800aeb8:	f8b9 c000 	ldrh.w	ip, [r9]
 800aebc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aec0:	fb0a 440c 	mla	r4, sl, ip, r4
 800aec4:	445c      	add	r4, fp
 800aec6:	46c4      	mov	ip, r8
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aece:	f84c 3b04 	str.w	r3, [ip], #4
 800aed2:	f859 3b04 	ldr.w	r3, [r9], #4
 800aed6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aeda:	0c1b      	lsrs	r3, r3, #16
 800aedc:	fb0a b303 	mla	r3, sl, r3, fp
 800aee0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aee4:	454f      	cmp	r7, r9
 800aee6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aeea:	d805      	bhi.n	800aef8 <__multiply+0x124>
 800aeec:	f8c8 3004 	str.w	r3, [r8, #4]
 800aef0:	3504      	adds	r5, #4
 800aef2:	e79b      	b.n	800ae2c <__multiply+0x58>
 800aef4:	46d4      	mov	ip, sl
 800aef6:	e7b3      	b.n	800ae60 <__multiply+0x8c>
 800aef8:	46e0      	mov	r8, ip
 800aefa:	e7dd      	b.n	800aeb8 <__multiply+0xe4>
 800aefc:	3e01      	subs	r6, #1
 800aefe:	e799      	b.n	800ae34 <__multiply+0x60>

0800af00 <__pow5mult>:
 800af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af04:	4615      	mov	r5, r2
 800af06:	f012 0203 	ands.w	r2, r2, #3
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	d007      	beq.n	800af20 <__pow5mult+0x20>
 800af10:	3a01      	subs	r2, #1
 800af12:	4c21      	ldr	r4, [pc, #132]	; (800af98 <__pow5mult+0x98>)
 800af14:	2300      	movs	r3, #0
 800af16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af1a:	f7ff fec9 	bl	800acb0 <__multadd>
 800af1e:	4607      	mov	r7, r0
 800af20:	10ad      	asrs	r5, r5, #2
 800af22:	d035      	beq.n	800af90 <__pow5mult+0x90>
 800af24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af26:	b93c      	cbnz	r4, 800af38 <__pow5mult+0x38>
 800af28:	2010      	movs	r0, #16
 800af2a:	f7ff fe63 	bl	800abf4 <malloc>
 800af2e:	6270      	str	r0, [r6, #36]	; 0x24
 800af30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af34:	6004      	str	r4, [r0, #0]
 800af36:	60c4      	str	r4, [r0, #12]
 800af38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af40:	b94c      	cbnz	r4, 800af56 <__pow5mult+0x56>
 800af42:	f240 2171 	movw	r1, #625	; 0x271
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ff3b 	bl	800adc2 <__i2b>
 800af4c:	2300      	movs	r3, #0
 800af4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af52:	4604      	mov	r4, r0
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	f04f 0800 	mov.w	r8, #0
 800af5a:	07eb      	lsls	r3, r5, #31
 800af5c:	d50a      	bpl.n	800af74 <__pow5mult+0x74>
 800af5e:	4639      	mov	r1, r7
 800af60:	4622      	mov	r2, r4
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff ff36 	bl	800add4 <__multiply>
 800af68:	4639      	mov	r1, r7
 800af6a:	4681      	mov	r9, r0
 800af6c:	4630      	mov	r0, r6
 800af6e:	f7ff fe88 	bl	800ac82 <_Bfree>
 800af72:	464f      	mov	r7, r9
 800af74:	106d      	asrs	r5, r5, #1
 800af76:	d00b      	beq.n	800af90 <__pow5mult+0x90>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	b938      	cbnz	r0, 800af8c <__pow5mult+0x8c>
 800af7c:	4622      	mov	r2, r4
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f7ff ff27 	bl	800add4 <__multiply>
 800af86:	6020      	str	r0, [r4, #0]
 800af88:	f8c0 8000 	str.w	r8, [r0]
 800af8c:	4604      	mov	r4, r0
 800af8e:	e7e4      	b.n	800af5a <__pow5mult+0x5a>
 800af90:	4638      	mov	r0, r7
 800af92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af96:	bf00      	nop
 800af98:	0800bae8 	.word	0x0800bae8

0800af9c <__lshift>:
 800af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	460c      	mov	r4, r1
 800afa2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afa6:	6923      	ldr	r3, [r4, #16]
 800afa8:	6849      	ldr	r1, [r1, #4]
 800afaa:	eb0a 0903 	add.w	r9, sl, r3
 800afae:	68a3      	ldr	r3, [r4, #8]
 800afb0:	4607      	mov	r7, r0
 800afb2:	4616      	mov	r6, r2
 800afb4:	f109 0501 	add.w	r5, r9, #1
 800afb8:	42ab      	cmp	r3, r5
 800afba:	db32      	blt.n	800b022 <__lshift+0x86>
 800afbc:	4638      	mov	r0, r7
 800afbe:	f7ff fe2c 	bl	800ac1a <_Balloc>
 800afc2:	2300      	movs	r3, #0
 800afc4:	4680      	mov	r8, r0
 800afc6:	f100 0114 	add.w	r1, r0, #20
 800afca:	461a      	mov	r2, r3
 800afcc:	4553      	cmp	r3, sl
 800afce:	db2b      	blt.n	800b028 <__lshift+0x8c>
 800afd0:	6920      	ldr	r0, [r4, #16]
 800afd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd6:	f104 0314 	add.w	r3, r4, #20
 800afda:	f016 021f 	ands.w	r2, r6, #31
 800afde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afe6:	d025      	beq.n	800b034 <__lshift+0x98>
 800afe8:	f1c2 0e20 	rsb	lr, r2, #32
 800afec:	2000      	movs	r0, #0
 800afee:	681e      	ldr	r6, [r3, #0]
 800aff0:	468a      	mov	sl, r1
 800aff2:	4096      	lsls	r6, r2
 800aff4:	4330      	orrs	r0, r6
 800aff6:	f84a 0b04 	str.w	r0, [sl], #4
 800affa:	f853 0b04 	ldr.w	r0, [r3], #4
 800affe:	459c      	cmp	ip, r3
 800b000:	fa20 f00e 	lsr.w	r0, r0, lr
 800b004:	d814      	bhi.n	800b030 <__lshift+0x94>
 800b006:	6048      	str	r0, [r1, #4]
 800b008:	b108      	cbz	r0, 800b00e <__lshift+0x72>
 800b00a:	f109 0502 	add.w	r5, r9, #2
 800b00e:	3d01      	subs	r5, #1
 800b010:	4638      	mov	r0, r7
 800b012:	f8c8 5010 	str.w	r5, [r8, #16]
 800b016:	4621      	mov	r1, r4
 800b018:	f7ff fe33 	bl	800ac82 <_Bfree>
 800b01c:	4640      	mov	r0, r8
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	3101      	adds	r1, #1
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	e7c7      	b.n	800afb8 <__lshift+0x1c>
 800b028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b02c:	3301      	adds	r3, #1
 800b02e:	e7cd      	b.n	800afcc <__lshift+0x30>
 800b030:	4651      	mov	r1, sl
 800b032:	e7dc      	b.n	800afee <__lshift+0x52>
 800b034:	3904      	subs	r1, #4
 800b036:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b03e:	459c      	cmp	ip, r3
 800b040:	d8f9      	bhi.n	800b036 <__lshift+0x9a>
 800b042:	e7e4      	b.n	800b00e <__lshift+0x72>

0800b044 <__mcmp>:
 800b044:	6903      	ldr	r3, [r0, #16]
 800b046:	690a      	ldr	r2, [r1, #16]
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	b530      	push	{r4, r5, lr}
 800b04c:	d10c      	bne.n	800b068 <__mcmp+0x24>
 800b04e:	0092      	lsls	r2, r2, #2
 800b050:	3014      	adds	r0, #20
 800b052:	3114      	adds	r1, #20
 800b054:	1884      	adds	r4, r0, r2
 800b056:	4411      	add	r1, r2
 800b058:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b05c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b060:	4295      	cmp	r5, r2
 800b062:	d003      	beq.n	800b06c <__mcmp+0x28>
 800b064:	d305      	bcc.n	800b072 <__mcmp+0x2e>
 800b066:	2301      	movs	r3, #1
 800b068:	4618      	mov	r0, r3
 800b06a:	bd30      	pop	{r4, r5, pc}
 800b06c:	42a0      	cmp	r0, r4
 800b06e:	d3f3      	bcc.n	800b058 <__mcmp+0x14>
 800b070:	e7fa      	b.n	800b068 <__mcmp+0x24>
 800b072:	f04f 33ff 	mov.w	r3, #4294967295
 800b076:	e7f7      	b.n	800b068 <__mcmp+0x24>

0800b078 <__mdiff>:
 800b078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b07c:	460d      	mov	r5, r1
 800b07e:	4607      	mov	r7, r0
 800b080:	4611      	mov	r1, r2
 800b082:	4628      	mov	r0, r5
 800b084:	4614      	mov	r4, r2
 800b086:	f7ff ffdd 	bl	800b044 <__mcmp>
 800b08a:	1e06      	subs	r6, r0, #0
 800b08c:	d108      	bne.n	800b0a0 <__mdiff+0x28>
 800b08e:	4631      	mov	r1, r6
 800b090:	4638      	mov	r0, r7
 800b092:	f7ff fdc2 	bl	800ac1a <_Balloc>
 800b096:	2301      	movs	r3, #1
 800b098:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a0:	bfa4      	itt	ge
 800b0a2:	4623      	movge	r3, r4
 800b0a4:	462c      	movge	r4, r5
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	6861      	ldr	r1, [r4, #4]
 800b0aa:	bfa6      	itte	ge
 800b0ac:	461d      	movge	r5, r3
 800b0ae:	2600      	movge	r6, #0
 800b0b0:	2601      	movlt	r6, #1
 800b0b2:	f7ff fdb2 	bl	800ac1a <_Balloc>
 800b0b6:	692b      	ldr	r3, [r5, #16]
 800b0b8:	60c6      	str	r6, [r0, #12]
 800b0ba:	6926      	ldr	r6, [r4, #16]
 800b0bc:	f105 0914 	add.w	r9, r5, #20
 800b0c0:	f104 0214 	add.w	r2, r4, #20
 800b0c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b0c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b0cc:	f100 0514 	add.w	r5, r0, #20
 800b0d0:	f04f 0e00 	mov.w	lr, #0
 800b0d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b0d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b0dc:	fa1e f18a 	uxtah	r1, lr, sl
 800b0e0:	b2a3      	uxth	r3, r4
 800b0e2:	1ac9      	subs	r1, r1, r3
 800b0e4:	0c23      	lsrs	r3, r4, #16
 800b0e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b0ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b0ee:	b289      	uxth	r1, r1
 800b0f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b0f4:	45c8      	cmp	r8, r9
 800b0f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b0fa:	4694      	mov	ip, r2
 800b0fc:	f845 3b04 	str.w	r3, [r5], #4
 800b100:	d8e8      	bhi.n	800b0d4 <__mdiff+0x5c>
 800b102:	45bc      	cmp	ip, r7
 800b104:	d304      	bcc.n	800b110 <__mdiff+0x98>
 800b106:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b10a:	b183      	cbz	r3, 800b12e <__mdiff+0xb6>
 800b10c:	6106      	str	r6, [r0, #16]
 800b10e:	e7c5      	b.n	800b09c <__mdiff+0x24>
 800b110:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b114:	fa1e f381 	uxtah	r3, lr, r1
 800b118:	141a      	asrs	r2, r3, #16
 800b11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b11e:	b29b      	uxth	r3, r3
 800b120:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b124:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b128:	f845 3b04 	str.w	r3, [r5], #4
 800b12c:	e7e9      	b.n	800b102 <__mdiff+0x8a>
 800b12e:	3e01      	subs	r6, #1
 800b130:	e7e9      	b.n	800b106 <__mdiff+0x8e>

0800b132 <__d2b>:
 800b132:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b136:	460e      	mov	r6, r1
 800b138:	2101      	movs	r1, #1
 800b13a:	ec59 8b10 	vmov	r8, r9, d0
 800b13e:	4615      	mov	r5, r2
 800b140:	f7ff fd6b 	bl	800ac1a <_Balloc>
 800b144:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b148:	4607      	mov	r7, r0
 800b14a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b14e:	bb34      	cbnz	r4, 800b19e <__d2b+0x6c>
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	f1b8 0300 	subs.w	r3, r8, #0
 800b156:	d027      	beq.n	800b1a8 <__d2b+0x76>
 800b158:	a802      	add	r0, sp, #8
 800b15a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b15e:	f7ff fe01 	bl	800ad64 <__lo0bits>
 800b162:	9900      	ldr	r1, [sp, #0]
 800b164:	b1f0      	cbz	r0, 800b1a4 <__d2b+0x72>
 800b166:	9a01      	ldr	r2, [sp, #4]
 800b168:	f1c0 0320 	rsb	r3, r0, #32
 800b16c:	fa02 f303 	lsl.w	r3, r2, r3
 800b170:	430b      	orrs	r3, r1
 800b172:	40c2      	lsrs	r2, r0
 800b174:	617b      	str	r3, [r7, #20]
 800b176:	9201      	str	r2, [sp, #4]
 800b178:	9b01      	ldr	r3, [sp, #4]
 800b17a:	61bb      	str	r3, [r7, #24]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bf14      	ite	ne
 800b180:	2102      	movne	r1, #2
 800b182:	2101      	moveq	r1, #1
 800b184:	6139      	str	r1, [r7, #16]
 800b186:	b1c4      	cbz	r4, 800b1ba <__d2b+0x88>
 800b188:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b18c:	4404      	add	r4, r0
 800b18e:	6034      	str	r4, [r6, #0]
 800b190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b194:	6028      	str	r0, [r5, #0]
 800b196:	4638      	mov	r0, r7
 800b198:	b003      	add	sp, #12
 800b19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b19e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1a2:	e7d5      	b.n	800b150 <__d2b+0x1e>
 800b1a4:	6179      	str	r1, [r7, #20]
 800b1a6:	e7e7      	b.n	800b178 <__d2b+0x46>
 800b1a8:	a801      	add	r0, sp, #4
 800b1aa:	f7ff fddb 	bl	800ad64 <__lo0bits>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	6139      	str	r1, [r7, #16]
 800b1b6:	3020      	adds	r0, #32
 800b1b8:	e7e5      	b.n	800b186 <__d2b+0x54>
 800b1ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1c2:	6030      	str	r0, [r6, #0]
 800b1c4:	6918      	ldr	r0, [r3, #16]
 800b1c6:	f7ff fdae 	bl	800ad26 <__hi0bits>
 800b1ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b1ce:	e7e1      	b.n	800b194 <__d2b+0x62>

0800b1d0 <_calloc_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	fb02 f401 	mul.w	r4, r2, r1
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	f000 f856 	bl	800b288 <_malloc_r>
 800b1dc:	4605      	mov	r5, r0
 800b1de:	b118      	cbz	r0, 800b1e8 <_calloc_r+0x18>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	f7fe fa20 	bl	8009628 <memset>
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	bd38      	pop	{r3, r4, r5, pc}

0800b1ec <_free_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d045      	beq.n	800b280 <_free_r+0x94>
 800b1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f8:	1f0c      	subs	r4, r1, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	18e4      	addlt	r4, r4, r3
 800b200:	f000 fa29 	bl	800b656 <__malloc_lock>
 800b204:	4a1f      	ldr	r2, [pc, #124]	; (800b284 <_free_r+0x98>)
 800b206:	6813      	ldr	r3, [r2, #0]
 800b208:	4610      	mov	r0, r2
 800b20a:	b933      	cbnz	r3, 800b21a <_free_r+0x2e>
 800b20c:	6063      	str	r3, [r4, #4]
 800b20e:	6014      	str	r4, [r2, #0]
 800b210:	4628      	mov	r0, r5
 800b212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b216:	f000 ba1f 	b.w	800b658 <__malloc_unlock>
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	d90c      	bls.n	800b238 <_free_r+0x4c>
 800b21e:	6821      	ldr	r1, [r4, #0]
 800b220:	1862      	adds	r2, r4, r1
 800b222:	4293      	cmp	r3, r2
 800b224:	bf04      	itt	eq
 800b226:	681a      	ldreq	r2, [r3, #0]
 800b228:	685b      	ldreq	r3, [r3, #4]
 800b22a:	6063      	str	r3, [r4, #4]
 800b22c:	bf04      	itt	eq
 800b22e:	1852      	addeq	r2, r2, r1
 800b230:	6022      	streq	r2, [r4, #0]
 800b232:	6004      	str	r4, [r0, #0]
 800b234:	e7ec      	b.n	800b210 <_free_r+0x24>
 800b236:	4613      	mov	r3, r2
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	b10a      	cbz	r2, 800b240 <_free_r+0x54>
 800b23c:	42a2      	cmp	r2, r4
 800b23e:	d9fa      	bls.n	800b236 <_free_r+0x4a>
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	1858      	adds	r0, r3, r1
 800b244:	42a0      	cmp	r0, r4
 800b246:	d10b      	bne.n	800b260 <_free_r+0x74>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	4401      	add	r1, r0
 800b24c:	1858      	adds	r0, r3, r1
 800b24e:	4282      	cmp	r2, r0
 800b250:	6019      	str	r1, [r3, #0]
 800b252:	d1dd      	bne.n	800b210 <_free_r+0x24>
 800b254:	6810      	ldr	r0, [r2, #0]
 800b256:	6852      	ldr	r2, [r2, #4]
 800b258:	605a      	str	r2, [r3, #4]
 800b25a:	4401      	add	r1, r0
 800b25c:	6019      	str	r1, [r3, #0]
 800b25e:	e7d7      	b.n	800b210 <_free_r+0x24>
 800b260:	d902      	bls.n	800b268 <_free_r+0x7c>
 800b262:	230c      	movs	r3, #12
 800b264:	602b      	str	r3, [r5, #0]
 800b266:	e7d3      	b.n	800b210 <_free_r+0x24>
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	1821      	adds	r1, r4, r0
 800b26c:	428a      	cmp	r2, r1
 800b26e:	bf04      	itt	eq
 800b270:	6811      	ldreq	r1, [r2, #0]
 800b272:	6852      	ldreq	r2, [r2, #4]
 800b274:	6062      	str	r2, [r4, #4]
 800b276:	bf04      	itt	eq
 800b278:	1809      	addeq	r1, r1, r0
 800b27a:	6021      	streq	r1, [r4, #0]
 800b27c:	605c      	str	r4, [r3, #4]
 800b27e:	e7c7      	b.n	800b210 <_free_r+0x24>
 800b280:	bd38      	pop	{r3, r4, r5, pc}
 800b282:	bf00      	nop
 800b284:	20000494 	.word	0x20000494

0800b288 <_malloc_r>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	1ccd      	adds	r5, r1, #3
 800b28c:	f025 0503 	bic.w	r5, r5, #3
 800b290:	3508      	adds	r5, #8
 800b292:	2d0c      	cmp	r5, #12
 800b294:	bf38      	it	cc
 800b296:	250c      	movcc	r5, #12
 800b298:	2d00      	cmp	r5, #0
 800b29a:	4606      	mov	r6, r0
 800b29c:	db01      	blt.n	800b2a2 <_malloc_r+0x1a>
 800b29e:	42a9      	cmp	r1, r5
 800b2a0:	d903      	bls.n	800b2aa <_malloc_r+0x22>
 800b2a2:	230c      	movs	r3, #12
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	f000 f9d4 	bl	800b656 <__malloc_lock>
 800b2ae:	4a21      	ldr	r2, [pc, #132]	; (800b334 <_malloc_r+0xac>)
 800b2b0:	6814      	ldr	r4, [r2, #0]
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	b991      	cbnz	r1, 800b2dc <_malloc_r+0x54>
 800b2b6:	4c20      	ldr	r4, [pc, #128]	; (800b338 <_malloc_r+0xb0>)
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	b91b      	cbnz	r3, 800b2c4 <_malloc_r+0x3c>
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f000 f98f 	bl	800b5e0 <_sbrk_r>
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f000 f98a 	bl	800b5e0 <_sbrk_r>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d124      	bne.n	800b31a <_malloc_r+0x92>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	6033      	str	r3, [r6, #0]
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f000 f9bf 	bl	800b658 <__malloc_unlock>
 800b2da:	e7e4      	b.n	800b2a6 <_malloc_r+0x1e>
 800b2dc:	680b      	ldr	r3, [r1, #0]
 800b2de:	1b5b      	subs	r3, r3, r5
 800b2e0:	d418      	bmi.n	800b314 <_malloc_r+0x8c>
 800b2e2:	2b0b      	cmp	r3, #11
 800b2e4:	d90f      	bls.n	800b306 <_malloc_r+0x7e>
 800b2e6:	600b      	str	r3, [r1, #0]
 800b2e8:	50cd      	str	r5, [r1, r3]
 800b2ea:	18cc      	adds	r4, r1, r3
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f9b3 	bl	800b658 <__malloc_unlock>
 800b2f2:	f104 000b 	add.w	r0, r4, #11
 800b2f6:	1d23      	adds	r3, r4, #4
 800b2f8:	f020 0007 	bic.w	r0, r0, #7
 800b2fc:	1ac3      	subs	r3, r0, r3
 800b2fe:	d0d3      	beq.n	800b2a8 <_malloc_r+0x20>
 800b300:	425a      	negs	r2, r3
 800b302:	50e2      	str	r2, [r4, r3]
 800b304:	e7d0      	b.n	800b2a8 <_malloc_r+0x20>
 800b306:	428c      	cmp	r4, r1
 800b308:	684b      	ldr	r3, [r1, #4]
 800b30a:	bf16      	itet	ne
 800b30c:	6063      	strne	r3, [r4, #4]
 800b30e:	6013      	streq	r3, [r2, #0]
 800b310:	460c      	movne	r4, r1
 800b312:	e7eb      	b.n	800b2ec <_malloc_r+0x64>
 800b314:	460c      	mov	r4, r1
 800b316:	6849      	ldr	r1, [r1, #4]
 800b318:	e7cc      	b.n	800b2b4 <_malloc_r+0x2c>
 800b31a:	1cc4      	adds	r4, r0, #3
 800b31c:	f024 0403 	bic.w	r4, r4, #3
 800b320:	42a0      	cmp	r0, r4
 800b322:	d005      	beq.n	800b330 <_malloc_r+0xa8>
 800b324:	1a21      	subs	r1, r4, r0
 800b326:	4630      	mov	r0, r6
 800b328:	f000 f95a 	bl	800b5e0 <_sbrk_r>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d0cf      	beq.n	800b2d0 <_malloc_r+0x48>
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	e7db      	b.n	800b2ec <_malloc_r+0x64>
 800b334:	20000494 	.word	0x20000494
 800b338:	20000498 	.word	0x20000498

0800b33c <__ssputs_r>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	688e      	ldr	r6, [r1, #8]
 800b342:	429e      	cmp	r6, r3
 800b344:	4682      	mov	sl, r0
 800b346:	460c      	mov	r4, r1
 800b348:	4690      	mov	r8, r2
 800b34a:	4699      	mov	r9, r3
 800b34c:	d837      	bhi.n	800b3be <__ssputs_r+0x82>
 800b34e:	898a      	ldrh	r2, [r1, #12]
 800b350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b354:	d031      	beq.n	800b3ba <__ssputs_r+0x7e>
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	6909      	ldr	r1, [r1, #16]
 800b35a:	1a6f      	subs	r7, r5, r1
 800b35c:	6965      	ldr	r5, [r4, #20]
 800b35e:	2302      	movs	r3, #2
 800b360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b364:	fb95 f5f3 	sdiv	r5, r5, r3
 800b368:	f109 0301 	add.w	r3, r9, #1
 800b36c:	443b      	add	r3, r7
 800b36e:	429d      	cmp	r5, r3
 800b370:	bf38      	it	cc
 800b372:	461d      	movcc	r5, r3
 800b374:	0553      	lsls	r3, r2, #21
 800b376:	d530      	bpl.n	800b3da <__ssputs_r+0x9e>
 800b378:	4629      	mov	r1, r5
 800b37a:	f7ff ff85 	bl	800b288 <_malloc_r>
 800b37e:	4606      	mov	r6, r0
 800b380:	b950      	cbnz	r0, 800b398 <__ssputs_r+0x5c>
 800b382:	230c      	movs	r3, #12
 800b384:	f8ca 3000 	str.w	r3, [sl]
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b398:	463a      	mov	r2, r7
 800b39a:	6921      	ldr	r1, [r4, #16]
 800b39c:	f7ff fc32 	bl	800ac04 <memcpy>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	6126      	str	r6, [r4, #16]
 800b3ae:	6165      	str	r5, [r4, #20]
 800b3b0:	443e      	add	r6, r7
 800b3b2:	1bed      	subs	r5, r5, r7
 800b3b4:	6026      	str	r6, [r4, #0]
 800b3b6:	60a5      	str	r5, [r4, #8]
 800b3b8:	464e      	mov	r6, r9
 800b3ba:	454e      	cmp	r6, r9
 800b3bc:	d900      	bls.n	800b3c0 <__ssputs_r+0x84>
 800b3be:	464e      	mov	r6, r9
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	f000 f92d 	bl	800b624 <memmove>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	1b9b      	subs	r3, r3, r6
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	441e      	add	r6, r3
 800b3d4:	6026      	str	r6, [r4, #0]
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e7dc      	b.n	800b394 <__ssputs_r+0x58>
 800b3da:	462a      	mov	r2, r5
 800b3dc:	f000 f93d 	bl	800b65a <_realloc_r>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d1e2      	bne.n	800b3ac <__ssputs_r+0x70>
 800b3e6:	6921      	ldr	r1, [r4, #16]
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f7ff feff 	bl	800b1ec <_free_r>
 800b3ee:	e7c8      	b.n	800b382 <__ssputs_r+0x46>

0800b3f0 <_svfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	461d      	mov	r5, r3
 800b3f6:	898b      	ldrh	r3, [r1, #12]
 800b3f8:	061f      	lsls	r7, r3, #24
 800b3fa:	b09d      	sub	sp, #116	; 0x74
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	4616      	mov	r6, r2
 800b402:	d50f      	bpl.n	800b424 <_svfiprintf_r+0x34>
 800b404:	690b      	ldr	r3, [r1, #16]
 800b406:	b96b      	cbnz	r3, 800b424 <_svfiprintf_r+0x34>
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	f7ff ff3d 	bl	800b288 <_malloc_r>
 800b40e:	6020      	str	r0, [r4, #0]
 800b410:	6120      	str	r0, [r4, #16]
 800b412:	b928      	cbnz	r0, 800b420 <_svfiprintf_r+0x30>
 800b414:	230c      	movs	r3, #12
 800b416:	f8c8 3000 	str.w	r3, [r8]
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	e0c8      	b.n	800b5b2 <_svfiprintf_r+0x1c2>
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	6163      	str	r3, [r4, #20]
 800b424:	2300      	movs	r3, #0
 800b426:	9309      	str	r3, [sp, #36]	; 0x24
 800b428:	2320      	movs	r3, #32
 800b42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b42e:	2330      	movs	r3, #48	; 0x30
 800b430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b434:	9503      	str	r5, [sp, #12]
 800b436:	f04f 0b01 	mov.w	fp, #1
 800b43a:	4637      	mov	r7, r6
 800b43c:	463d      	mov	r5, r7
 800b43e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b442:	b10b      	cbz	r3, 800b448 <_svfiprintf_r+0x58>
 800b444:	2b25      	cmp	r3, #37	; 0x25
 800b446:	d13e      	bne.n	800b4c6 <_svfiprintf_r+0xd6>
 800b448:	ebb7 0a06 	subs.w	sl, r7, r6
 800b44c:	d00b      	beq.n	800b466 <_svfiprintf_r+0x76>
 800b44e:	4653      	mov	r3, sl
 800b450:	4632      	mov	r2, r6
 800b452:	4621      	mov	r1, r4
 800b454:	4640      	mov	r0, r8
 800b456:	f7ff ff71 	bl	800b33c <__ssputs_r>
 800b45a:	3001      	adds	r0, #1
 800b45c:	f000 80a4 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b462:	4453      	add	r3, sl
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	783b      	ldrb	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 809d 	beq.w	800b5a8 <_svfiprintf_r+0x1b8>
 800b46e:	2300      	movs	r3, #0
 800b470:	f04f 32ff 	mov.w	r2, #4294967295
 800b474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b478:	9304      	str	r3, [sp, #16]
 800b47a:	9307      	str	r3, [sp, #28]
 800b47c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b480:	931a      	str	r3, [sp, #104]	; 0x68
 800b482:	462f      	mov	r7, r5
 800b484:	2205      	movs	r2, #5
 800b486:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b48a:	4850      	ldr	r0, [pc, #320]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b48c:	f7f4 feb8 	bl	8000200 <memchr>
 800b490:	9b04      	ldr	r3, [sp, #16]
 800b492:	b9d0      	cbnz	r0, 800b4ca <_svfiprintf_r+0xda>
 800b494:	06d9      	lsls	r1, r3, #27
 800b496:	bf44      	itt	mi
 800b498:	2220      	movmi	r2, #32
 800b49a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b49e:	071a      	lsls	r2, r3, #28
 800b4a0:	bf44      	itt	mi
 800b4a2:	222b      	movmi	r2, #43	; 0x2b
 800b4a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4a8:	782a      	ldrb	r2, [r5, #0]
 800b4aa:	2a2a      	cmp	r2, #42	; 0x2a
 800b4ac:	d015      	beq.n	800b4da <_svfiprintf_r+0xea>
 800b4ae:	9a07      	ldr	r2, [sp, #28]
 800b4b0:	462f      	mov	r7, r5
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	250a      	movs	r5, #10
 800b4b6:	4639      	mov	r1, r7
 800b4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4bc:	3b30      	subs	r3, #48	; 0x30
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	d94d      	bls.n	800b55e <_svfiprintf_r+0x16e>
 800b4c2:	b1b8      	cbz	r0, 800b4f4 <_svfiprintf_r+0x104>
 800b4c4:	e00f      	b.n	800b4e6 <_svfiprintf_r+0xf6>
 800b4c6:	462f      	mov	r7, r5
 800b4c8:	e7b8      	b.n	800b43c <_svfiprintf_r+0x4c>
 800b4ca:	4a40      	ldr	r2, [pc, #256]	; (800b5cc <_svfiprintf_r+0x1dc>)
 800b4cc:	1a80      	subs	r0, r0, r2
 800b4ce:	fa0b f000 	lsl.w	r0, fp, r0
 800b4d2:	4318      	orrs	r0, r3
 800b4d4:	9004      	str	r0, [sp, #16]
 800b4d6:	463d      	mov	r5, r7
 800b4d8:	e7d3      	b.n	800b482 <_svfiprintf_r+0x92>
 800b4da:	9a03      	ldr	r2, [sp, #12]
 800b4dc:	1d11      	adds	r1, r2, #4
 800b4de:	6812      	ldr	r2, [r2, #0]
 800b4e0:	9103      	str	r1, [sp, #12]
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	db01      	blt.n	800b4ea <_svfiprintf_r+0xfa>
 800b4e6:	9207      	str	r2, [sp, #28]
 800b4e8:	e004      	b.n	800b4f4 <_svfiprintf_r+0x104>
 800b4ea:	4252      	negs	r2, r2
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	9207      	str	r2, [sp, #28]
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	783b      	ldrb	r3, [r7, #0]
 800b4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f8:	d10c      	bne.n	800b514 <_svfiprintf_r+0x124>
 800b4fa:	787b      	ldrb	r3, [r7, #1]
 800b4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4fe:	d133      	bne.n	800b568 <_svfiprintf_r+0x178>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	1d1a      	adds	r2, r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	9203      	str	r2, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfb8      	it	lt
 800b50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b510:	3702      	adds	r7, #2
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	4d2e      	ldr	r5, [pc, #184]	; (800b5d0 <_svfiprintf_r+0x1e0>)
 800b516:	7839      	ldrb	r1, [r7, #0]
 800b518:	2203      	movs	r2, #3
 800b51a:	4628      	mov	r0, r5
 800b51c:	f7f4 fe70 	bl	8000200 <memchr>
 800b520:	b138      	cbz	r0, 800b532 <_svfiprintf_r+0x142>
 800b522:	2340      	movs	r3, #64	; 0x40
 800b524:	1b40      	subs	r0, r0, r5
 800b526:	fa03 f000 	lsl.w	r0, r3, r0
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	4303      	orrs	r3, r0
 800b52e:	3701      	adds	r7, #1
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	7839      	ldrb	r1, [r7, #0]
 800b534:	4827      	ldr	r0, [pc, #156]	; (800b5d4 <_svfiprintf_r+0x1e4>)
 800b536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53a:	2206      	movs	r2, #6
 800b53c:	1c7e      	adds	r6, r7, #1
 800b53e:	f7f4 fe5f 	bl	8000200 <memchr>
 800b542:	2800      	cmp	r0, #0
 800b544:	d038      	beq.n	800b5b8 <_svfiprintf_r+0x1c8>
 800b546:	4b24      	ldr	r3, [pc, #144]	; (800b5d8 <_svfiprintf_r+0x1e8>)
 800b548:	bb13      	cbnz	r3, 800b590 <_svfiprintf_r+0x1a0>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	3307      	adds	r3, #7
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	3308      	adds	r3, #8
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	444b      	add	r3, r9
 800b55a:	9309      	str	r3, [sp, #36]	; 0x24
 800b55c:	e76d      	b.n	800b43a <_svfiprintf_r+0x4a>
 800b55e:	fb05 3202 	mla	r2, r5, r2, r3
 800b562:	2001      	movs	r0, #1
 800b564:	460f      	mov	r7, r1
 800b566:	e7a6      	b.n	800b4b6 <_svfiprintf_r+0xc6>
 800b568:	2300      	movs	r3, #0
 800b56a:	3701      	adds	r7, #1
 800b56c:	9305      	str	r3, [sp, #20]
 800b56e:	4619      	mov	r1, r3
 800b570:	250a      	movs	r5, #10
 800b572:	4638      	mov	r0, r7
 800b574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b578:	3a30      	subs	r2, #48	; 0x30
 800b57a:	2a09      	cmp	r2, #9
 800b57c:	d903      	bls.n	800b586 <_svfiprintf_r+0x196>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0c8      	beq.n	800b514 <_svfiprintf_r+0x124>
 800b582:	9105      	str	r1, [sp, #20]
 800b584:	e7c6      	b.n	800b514 <_svfiprintf_r+0x124>
 800b586:	fb05 2101 	mla	r1, r5, r1, r2
 800b58a:	2301      	movs	r3, #1
 800b58c:	4607      	mov	r7, r0
 800b58e:	e7f0      	b.n	800b572 <_svfiprintf_r+0x182>
 800b590:	ab03      	add	r3, sp, #12
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4622      	mov	r2, r4
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b598:	a904      	add	r1, sp, #16
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7fe f8e0 	bl	8009760 <_printf_float>
 800b5a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	d1d6      	bne.n	800b556 <_svfiprintf_r+0x166>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	065b      	lsls	r3, r3, #25
 800b5ac:	f53f af35 	bmi.w	800b41a <_svfiprintf_r+0x2a>
 800b5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5b2:	b01d      	add	sp, #116	; 0x74
 800b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4b07      	ldr	r3, [pc, #28]	; (800b5dc <_svfiprintf_r+0x1ec>)
 800b5c0:	a904      	add	r1, sp, #16
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f7fe fb82 	bl	8009ccc <_printf_i>
 800b5c8:	e7ea      	b.n	800b5a0 <_svfiprintf_r+0x1b0>
 800b5ca:	bf00      	nop
 800b5cc:	0800baf4 	.word	0x0800baf4
 800b5d0:	0800bafa 	.word	0x0800bafa
 800b5d4:	0800bafe 	.word	0x0800bafe
 800b5d8:	08009761 	.word	0x08009761
 800b5dc:	0800b33d 	.word	0x0800b33d

0800b5e0 <_sbrk_r>:
 800b5e0:	b538      	push	{r3, r4, r5, lr}
 800b5e2:	4c06      	ldr	r4, [pc, #24]	; (800b5fc <_sbrk_r+0x1c>)
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	4608      	mov	r0, r1
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	f7fa f84e 	bl	800568c <_sbrk>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_sbrk_r+0x1a>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_sbrk_r+0x1a>
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20000be0 	.word	0x20000be0

0800b600 <__ascii_mbtowc>:
 800b600:	b082      	sub	sp, #8
 800b602:	b901      	cbnz	r1, 800b606 <__ascii_mbtowc+0x6>
 800b604:	a901      	add	r1, sp, #4
 800b606:	b142      	cbz	r2, 800b61a <__ascii_mbtowc+0x1a>
 800b608:	b14b      	cbz	r3, 800b61e <__ascii_mbtowc+0x1e>
 800b60a:	7813      	ldrb	r3, [r2, #0]
 800b60c:	600b      	str	r3, [r1, #0]
 800b60e:	7812      	ldrb	r2, [r2, #0]
 800b610:	1c10      	adds	r0, r2, #0
 800b612:	bf18      	it	ne
 800b614:	2001      	movne	r0, #1
 800b616:	b002      	add	sp, #8
 800b618:	4770      	bx	lr
 800b61a:	4610      	mov	r0, r2
 800b61c:	e7fb      	b.n	800b616 <__ascii_mbtowc+0x16>
 800b61e:	f06f 0001 	mvn.w	r0, #1
 800b622:	e7f8      	b.n	800b616 <__ascii_mbtowc+0x16>

0800b624 <memmove>:
 800b624:	4288      	cmp	r0, r1
 800b626:	b510      	push	{r4, lr}
 800b628:	eb01 0302 	add.w	r3, r1, r2
 800b62c:	d807      	bhi.n	800b63e <memmove+0x1a>
 800b62e:	1e42      	subs	r2, r0, #1
 800b630:	4299      	cmp	r1, r3
 800b632:	d00a      	beq.n	800b64a <memmove+0x26>
 800b634:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b638:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b63c:	e7f8      	b.n	800b630 <memmove+0xc>
 800b63e:	4283      	cmp	r3, r0
 800b640:	d9f5      	bls.n	800b62e <memmove+0xa>
 800b642:	1881      	adds	r1, r0, r2
 800b644:	1ad2      	subs	r2, r2, r3
 800b646:	42d3      	cmn	r3, r2
 800b648:	d100      	bne.n	800b64c <memmove+0x28>
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b650:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b654:	e7f7      	b.n	800b646 <memmove+0x22>

0800b656 <__malloc_lock>:
 800b656:	4770      	bx	lr

0800b658 <__malloc_unlock>:
 800b658:	4770      	bx	lr

0800b65a <_realloc_r>:
 800b65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65c:	4607      	mov	r7, r0
 800b65e:	4614      	mov	r4, r2
 800b660:	460e      	mov	r6, r1
 800b662:	b921      	cbnz	r1, 800b66e <_realloc_r+0x14>
 800b664:	4611      	mov	r1, r2
 800b666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b66a:	f7ff be0d 	b.w	800b288 <_malloc_r>
 800b66e:	b922      	cbnz	r2, 800b67a <_realloc_r+0x20>
 800b670:	f7ff fdbc 	bl	800b1ec <_free_r>
 800b674:	4625      	mov	r5, r4
 800b676:	4628      	mov	r0, r5
 800b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67a:	f000 f821 	bl	800b6c0 <_malloc_usable_size_r>
 800b67e:	42a0      	cmp	r0, r4
 800b680:	d20f      	bcs.n	800b6a2 <_realloc_r+0x48>
 800b682:	4621      	mov	r1, r4
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff fdff 	bl	800b288 <_malloc_r>
 800b68a:	4605      	mov	r5, r0
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d0f2      	beq.n	800b676 <_realloc_r+0x1c>
 800b690:	4631      	mov	r1, r6
 800b692:	4622      	mov	r2, r4
 800b694:	f7ff fab6 	bl	800ac04 <memcpy>
 800b698:	4631      	mov	r1, r6
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff fda6 	bl	800b1ec <_free_r>
 800b6a0:	e7e9      	b.n	800b676 <_realloc_r+0x1c>
 800b6a2:	4635      	mov	r5, r6
 800b6a4:	e7e7      	b.n	800b676 <_realloc_r+0x1c>

0800b6a6 <__ascii_wctomb>:
 800b6a6:	b149      	cbz	r1, 800b6bc <__ascii_wctomb+0x16>
 800b6a8:	2aff      	cmp	r2, #255	; 0xff
 800b6aa:	bf85      	ittet	hi
 800b6ac:	238a      	movhi	r3, #138	; 0x8a
 800b6ae:	6003      	strhi	r3, [r0, #0]
 800b6b0:	700a      	strbls	r2, [r1, #0]
 800b6b2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6b6:	bf98      	it	ls
 800b6b8:	2001      	movls	r0, #1
 800b6ba:	4770      	bx	lr
 800b6bc:	4608      	mov	r0, r1
 800b6be:	4770      	bx	lr

0800b6c0 <_malloc_usable_size_r>:
 800b6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c4:	1f18      	subs	r0, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfbc      	itt	lt
 800b6ca:	580b      	ldrlt	r3, [r1, r0]
 800b6cc:	18c0      	addlt	r0, r0, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_init>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr

0800b6dc <_fini>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	bf00      	nop
 800b6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e2:	bc08      	pop	{r3}
 800b6e4:	469e      	mov	lr, r3
 800b6e6:	4770      	bx	lr
