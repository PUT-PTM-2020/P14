
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08008b50  08008b50  00018b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e98  08008e98  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008e98  08008e98  00018e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ea0  08008ea0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ea0  08008ea0  00018ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  200001e0  08009088  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08009088  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b94  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002880  00000000  00000000  00032da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f0  00000000  00000000  00035628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00036718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002331b  00000000  00000000  000376c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e9d1  00000000  00000000  0005a9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3e81  00000000  00000000  000693ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d22d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  0013d2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b38 	.word	0x08008b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008b38 	.word	0x08008b38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LCD_Init>:
uint8_t _rowOffsets[4];

uint8_t _currentRow;
uint8_t _currentCol;

void LCD_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
	_rs = GPIO_PIN_4;
 8000eae:	4b5b      	ldr	r3, [pc, #364]	; (800101c <LCD_Init+0x174>)
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	801a      	strh	r2, [r3, #0]
	_rw = GPIO_PIN_5;
 8000eb4:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <LCD_Init+0x178>)
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	801a      	strh	r2, [r3, #0]
	_enable = GPIO_PIN_6;
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <LCD_Init+0x17c>)
 8000ebc:	2240      	movs	r2, #64	; 0x40
 8000ebe:	801a      	strh	r2, [r3, #0]

	_data[0] = GPIO_PIN_0;
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <LCD_Init+0x180>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	801a      	strh	r2, [r3, #0]
	_data[1] = GPIO_PIN_1;
 8000ec6:	4b58      	ldr	r3, [pc, #352]	; (8001028 <LCD_Init+0x180>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	805a      	strh	r2, [r3, #2]
	_data[2] = GPIO_PIN_2;
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <LCD_Init+0x180>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	809a      	strh	r2, [r3, #4]
	_data[3] = GPIO_PIN_3;
 8000ed2:	4b55      	ldr	r3, [pc, #340]	; (8001028 <LCD_Init+0x180>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	80da      	strh	r2, [r3, #6]

	_displayFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <LCD_Init+0x184>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee4:	4852      	ldr	r0, [pc, #328]	; (8001030 <LCD_Init+0x188>)
 8000ee6:	f003 fa01 	bl	80042ec <HAL_GPIO_WritePin>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + LCD_COLUMNS, 0x40 + LCD_COLUMNS);
 8000eea:	2354      	movs	r3, #84	; 0x54
 8000eec:	2214      	movs	r2, #20
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f8c1 	bl	8001078 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 8000ef6:	2032      	movs	r0, #50	; 0x32
 8000ef8:	f002 ff12 	bl	8003d20 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_PORT, _rs, GPIO_PIN_RESET);
 8000efc:	4b47      	ldr	r3, [pc, #284]	; (800101c <LCD_Init+0x174>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	484b      	ldr	r0, [pc, #300]	; (8001034 <LCD_Init+0x18c>)
 8000f06:	f003 f9f1 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <LCD_Init+0x17c>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4848      	ldr	r0, [pc, #288]	; (8001034 <LCD_Init+0x18c>)
 8000f14:	f003 f9ea 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, _rw, GPIO_PIN_RESET);
 8000f18:	4b41      	ldr	r3, [pc, #260]	; (8001020 <LCD_Init+0x178>)
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4844      	ldr	r0, [pc, #272]	; (8001034 <LCD_Init+0x18c>)
 8000f22:	f003 f9e3 	bl	80042ec <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 fb74 	bl	8001614 <_LCD_WriteData>
	HAL_Delay(5);
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f002 fef7 	bl	8003d20 <HAL_Delay>

	_LCD_WriteData(0x03);
 8000f32:	2003      	movs	r0, #3
 8000f34:	f000 fb6e 	bl	8001614 <_LCD_WriteData>
	HAL_Delay(5);
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f002 fef1 	bl	8003d20 <HAL_Delay>

	_LCD_WriteData(0x03);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 fb68 	bl	8001614 <_LCD_WriteData>
	HAL_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f002 feeb 	bl	8003d20 <HAL_Delay>

	_LCD_WriteData(0x02);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f000 fb62 	bl	8001614 <_LCD_WriteData>
	_LCD_SendCommand(LCD_FUNCTIONSET | _displayFunction);
 8000f50:	4b36      	ldr	r3, [pc, #216]	; (800102c <LCD_Init+0x184>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fabd 	bl	80014da <_LCD_SendCommand>
	_displayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <LCD_Init+0x190>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8000f66:	f000 f8ed 	bl	8001144 <LCD_DisplayOn>
	LCD_ClearScreen();
 8000f6a:	f000 f8a5 	bl	80010b8 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f6e:	4b33      	ldr	r3, [pc, #204]	; (800103c <LCD_Init+0x194>)
 8000f70:	2202      	movs	r2, #2
 8000f72:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(LCD_ENTRYMODESET | _displayMode);
 8000f74:	4b31      	ldr	r3, [pc, #196]	; (800103c <LCD_Init+0x194>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 faab 	bl	80014da <_LCD_SendCommand>

	_currentRow = 0;
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <LCD_Init+0x198>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8000f8a:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <LCD_Init+0x19c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 8000f90:	482d      	ldr	r0, [pc, #180]	; (8001048 <LCD_Init+0x1a0>)
 8000f92:	f000 f911 	bl	80011b8 <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <LCD_Init+0x1a4>)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(7, char7); /* Stopnie */
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fa6c 	bl	8001488 <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 8000fb0:	4a27      	ldr	r2, [pc, #156]	; (8001050 <LCD_Init+0x1a8>)
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(6, char6); /* Temp IN */
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2006      	movs	r0, #6
 8000fc6:	f000 fa5f 	bl	8001488 <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8000fca:	4a22      	ldr	r2, [pc, #136]	; (8001054 <LCD_Init+0x1ac>)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fd4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(5, char5); /* Temp OUT */
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2005      	movs	r0, #5
 8000fe0:	f000 fa52 	bl	8001488 <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <LCD_Init+0x1b0>)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fee:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(4, char4); /* Humid IN */
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2004      	movs	r0, #4
 8000ffa:	f000 fa45 	bl	8001488 <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <LCD_Init+0x1b4>)
 8001000:	463b      	mov	r3, r7
 8001002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001006:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(3, char3); /* Humid OUT */
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	2003      	movs	r0, #3
 8001010:	f000 fa3a 	bl	8001488 <LCD_DefineCustomChar>
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000045c 	.word	0x2000045c
 8001020:	20000446 	.word	0x20000446
 8001024:	20000460 	.word	0x20000460
 8001028:	20000454 	.word	0x20000454
 800102c:	20000448 	.word	0x20000448
 8001030:	40020800 	.word	0x40020800
 8001034:	40021000 	.word	0x40021000
 8001038:	20000450 	.word	0x20000450
 800103c:	20000452 	.word	0x20000452
 8001040:	20000444 	.word	0x20000444
 8001044:	20000451 	.word	0x20000451
 8001048:	08008b50 	.word	0x08008b50
 800104c:	08008b5c 	.word	0x08008b5c
 8001050:	08008b64 	.word	0x08008b64
 8001054:	08008b6c 	.word	0x08008b6c
 8001058:	08008b74 	.word	0x08008b74
 800105c:	08008b7c 	.word	0x08008b7c

08001060 <LCD_ToggleBackgroundLED>:

void LCD_ToggleBackgroundLED(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8001064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <LCD_ToggleBackgroundLED+0x14>)
 800106a:	f003 f958 	bl	800431e <HAL_GPIO_TogglePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020800 	.word	0x40020800

08001078 <_LCD_SetRowOffsets>:

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <_LCD_SetRowOffsets+0x3c>)
 800108c:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_LCD_SetRowOffsets+0x3c>)
 8001094:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <_LCD_SetRowOffsets+0x3c>)
 800109c:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_LCD_SetRowOffsets+0x3c>)
 80010a4:	70da      	strb	r2, [r3, #3]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000044c 	.word	0x2000044c

080010b8 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	_LCD_SendCommand(LCD_CLEARDISPLAY);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fa0c 	bl	80014da <_LCD_SendCommand>
	HAL_Delay(2);
 80010c2:	2002      	movs	r0, #2
 80010c4:	f002 fe2c 	bl	8003d20 <HAL_Delay>
	LCD_ResetCursor();
 80010c8:	f000 f802 	bl	80010d0 <LCD_ResetCursor>
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	_LCD_SendCommand(LCD_RETURNHOME);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 fa00 	bl	80014da <_LCD_SendCommand>
	HAL_Delay(2);
 80010da:	2002      	movs	r0, #2
 80010dc:	f002 fe20 	bl	8003d20 <HAL_Delay>
	LCD_SetCursor(0, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f802 	bl	80010ec <LCD_SetCursor>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	/* Aby nigdy nie wyjsc poza zakres tablicy */
	if (row >= LCD_ROWS) {
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d901      	bls.n	8001106 <LCD_SetCursor+0x1a>
		row = LCD_ROWS - 1;
 8001102:	2303      	movs	r3, #3
 8001104:	71bb      	strb	r3, [r7, #6]
	}

	_LCD_SendCommand(LCD_SETDDRAMADDR | (col + _rowOffsets[row]));
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LCD_SetCursor+0x4c>)
 800110a:	5cd2      	ldrb	r2, [r2, r3]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4413      	add	r3, r2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f9dc 	bl	80014da <_LCD_SendCommand>
	_currentRow = row;
 8001122:	4a06      	ldr	r2, [pc, #24]	; (800113c <LCD_SetCursor+0x50>)
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <LCD_SetCursor+0x54>)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	7013      	strb	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000044c 	.word	0x2000044c
 800113c:	20000444 	.word	0x20000444
 8001140:	20000451 	.word	0x20000451

08001144 <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~LCD_DISPLAYON;
	_LCD_SendCommand(LCD_DISPLAYCONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	_displayControl |= LCD_DISPLAYON;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <LCD_DisplayOn+0x28>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <LCD_DisplayOn+0x28>)
 8001154:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(LCD_DISPLAYCONTROL | _displayControl);
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <LCD_DisplayOn+0x28>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f9ba 	bl	80014da <_LCD_SendCommand>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000450 	.word	0x20000450

08001170 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~LCD_ENTRYSHIFTINCREMENT;
	_LCD_SendCommand(LCD_ENTRYMODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d018      	beq.n	80011b0 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff f824 	bl	80001d0 <strlen>
 8001188:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e00a      	b.n	80011a6 <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f9ac 	bl	80014f8 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d8f0      	bhi.n	8001190 <LCD_Print+0x20>
 80011ae:	e000      	b.n	80011b2 <LCD_Print+0x42>
		return;
 80011b0:	bf00      	nop
	}
}
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f805 	bl	80001d0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b14      	cmp	r3, #20
 80011ce:	dc14      	bgt.n	80011fa <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((LCD_COLUMNS - size) / 2);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f1c3 0314 	rsb	r3, r3, #20
 80011d6:	0fda      	lsrs	r2, r3, #31
 80011d8:	4413      	add	r3, r2
 80011da:	105b      	asrs	r3, r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <LCD_PrintCentered+0x4c>)
 80011e0:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <LCD_PrintCentered+0x4c>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <LCD_PrintCentered+0x50>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f7ff ff7d 	bl	80010ec <LCD_SetCursor>
	LCD_Print(str);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffbc 	bl	8001170 <LCD_Print>
 80011f8:	e000      	b.n	80011fc <LCD_PrintCentered+0x44>
		return;
 80011fa:	bf00      	nop
}
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000451 	.word	0x20000451
 8001208:	20000444 	.word	0x20000444

0800120c <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80f1 	beq.w	8001400 <LCD_PrintTempInfo+0x1f4>
		return;

	char temp[10], rh[10];

	if (data1[0] < 10.f)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d50e      	bpl.n	8001250 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4603      	mov	r3, r0
 800123e:	460c      	mov	r4, r1
 8001240:	f107 0014 	add.w	r0, r7, #20
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	496f      	ldr	r1, [pc, #444]	; (8001408 <LCD_PrintTempInfo+0x1fc>)
 800124a:	f006 f953 	bl	80074f4 <siprintf>
 800124e:	e00d      	b.n	800126c <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f977 	bl	8000548 <__aeabi_f2d>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	f107 0014 	add.w	r0, r7, #20
 8001262:	461a      	mov	r2, r3
 8001264:	4623      	mov	r3, r4
 8001266:	4969      	ldr	r1, [pc, #420]	; (800140c <LCD_PrintTempInfo+0x200>)
 8001268:	f006 f944 	bl	80074f4 <siprintf>

	if (data1[1] < 10.f)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d50f      	bpl.n	80012a2 <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f95d 	bl	8000548 <__aeabi_f2d>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	f107 0008 	add.w	r0, r7, #8
 8001296:	461a      	mov	r2, r3
 8001298:	4623      	mov	r3, r4
 800129a:	495d      	ldr	r1, [pc, #372]	; (8001410 <LCD_PrintTempInfo+0x204>)
 800129c:	f006 f92a 	bl	80074f4 <siprintf>
 80012a0:	e020      	b.n	80012e4 <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3304      	adds	r3, #4
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001414 <LCD_PrintTempInfo+0x208>
 80012ae:	eef4 7a47 	vcmp.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d106      	bne.n	80012c6 <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4956      	ldr	r1, [pc, #344]	; (8001418 <LCD_PrintTempInfo+0x20c>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 f918 	bl	80074f4 <siprintf>
 80012c4:	e00e      	b.n	80012e4 <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	f107 0008 	add.w	r0, r7, #8
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	494f      	ldr	r1, [pc, #316]	; (800141c <LCD_PrintTempInfo+0x210>)
 80012e0:	f006 f908 	bl	80074f4 <siprintf>

	LCD_SetCursor(0, 1);
 80012e4:	2101      	movs	r1, #1
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ff00 	bl	80010ec <LCD_SetCursor>
	LCD_Print(temp);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff3d 	bl	8001170 <LCD_Print>
	LCD_SetCursor(0, 2);
 80012f6:	2102      	movs	r1, #2
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fef7 	bl	80010ec <LCD_SetCursor>
	LCD_Print(rh);
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff34 	bl	8001170 <LCD_Print>

	if (data2 != NULL) {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d074      	beq.n	80013f8 <LCD_PrintTempInfo+0x1ec>
		if (data2[0] < 10.f)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d50e      	bpl.n	8001340 <LCD_PrintTempInfo+0x134>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f90e 	bl	8000548 <__aeabi_f2d>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	f107 0014 	add.w	r0, r7, #20
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	4939      	ldr	r1, [pc, #228]	; (8001420 <LCD_PrintTempInfo+0x214>)
 800133a:	f006 f8db 	bl	80074f4 <siprintf>
 800133e:	e00d      	b.n	800135c <LCD_PrintTempInfo+0x150>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8ff 	bl	8000548 <__aeabi_f2d>
 800134a:	4603      	mov	r3, r0
 800134c:	460c      	mov	r4, r1
 800134e:	f107 0014 	add.w	r0, r7, #20
 8001352:	461a      	mov	r2, r3
 8001354:	4623      	mov	r3, r4
 8001356:	4933      	ldr	r1, [pc, #204]	; (8001424 <LCD_PrintTempInfo+0x218>)
 8001358:	f006 f8cc 	bl	80074f4 <siprintf>

		if (data2[1] < 10.f)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	edd3 7a00 	vldr	s15, [r3]
 8001364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d50f      	bpl.n	8001392 <LCD_PrintTempInfo+0x186>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	3304      	adds	r3, #4
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8e5 	bl	8000548 <__aeabi_f2d>
 800137e:	4603      	mov	r3, r0
 8001380:	460c      	mov	r4, r1
 8001382:	f107 0008 	add.w	r0, r7, #8
 8001386:	461a      	mov	r2, r3
 8001388:	4623      	mov	r3, r4
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <LCD_PrintTempInfo+0x21c>)
 800138c:	f006 f8b2 	bl	80074f4 <siprintf>
 8001390:	e020      	b.n	80013d4 <LCD_PrintTempInfo+0x1c8>
		else if (data2[1] == 100.f)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3304      	adds	r3, #4
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001414 <LCD_PrintTempInfo+0x208>
 800139e:	eef4 7a47 	vcmp.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	d106      	bne.n	80013b6 <LCD_PrintTempInfo+0x1aa>
			sprintf(rh, "\399%%");
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	491f      	ldr	r1, [pc, #124]	; (800142c <LCD_PrintTempInfo+0x220>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 f8a0 	bl	80074f4 <siprintf>
 80013b4:	e00e      	b.n	80013d4 <LCD_PrintTempInfo+0x1c8>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8c3 	bl	8000548 <__aeabi_f2d>
 80013c2:	4603      	mov	r3, r0
 80013c4:	460c      	mov	r4, r1
 80013c6:	f107 0008 	add.w	r0, r7, #8
 80013ca:	461a      	mov	r2, r3
 80013cc:	4623      	mov	r3, r4
 80013ce:	4918      	ldr	r1, [pc, #96]	; (8001430 <LCD_PrintTempInfo+0x224>)
 80013d0:	f006 f890 	bl	80074f4 <siprintf>

		LCD_SetCursor(16, 1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2010      	movs	r0, #16
 80013d8:	f7ff fe88 	bl	80010ec <LCD_SetCursor>
		LCD_Print(temp);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fec5 	bl	8001170 <LCD_Print>
		LCD_SetCursor(16, 2);
 80013e6:	2102      	movs	r1, #2
 80013e8:	2010      	movs	r0, #16
 80013ea:	f7ff fe7f 	bl	80010ec <LCD_SetCursor>
		LCD_Print(rh);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff febc 	bl	8001170 <LCD_Print>
	}

	LCD_NextLine("");
 80013f8:	480e      	ldr	r0, [pc, #56]	; (8001434 <LCD_PrintTempInfo+0x228>)
 80013fa:	f000 f81d 	bl	8001438 <LCD_NextLine>
 80013fe:	e000      	b.n	8001402 <LCD_PrintTempInfo+0x1f6>
		return;
 8001400:	bf00      	nop
}
 8001402:	3724      	adds	r7, #36	; 0x24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	08008b84 	.word	0x08008b84
 800140c:	08008b8c 	.word	0x08008b8c
 8001410:	08008b94 	.word	0x08008b94
 8001414:	42c80000 	.word	0x42c80000
 8001418:	08008ba0 	.word	0x08008ba0
 800141c:	08008ba8 	.word	0x08008ba8
 8001420:	08008bb0 	.word	0x08008bb0
 8001424:	08008bb8 	.word	0x08008bb8
 8001428:	08008bc0 	.word	0x08008bc0
 800142c:	08008bcc 	.word	0x08008bcc
 8001430:	08008bd4 	.word	0x08008bd4
 8001434:	08008bdc 	.word	0x08008bdc

08001438 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fe95 	bl	8001170 <LCD_Print>

	_currentCol = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <LCD_NextLine+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <LCD_NextLine+0x4c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <LCD_NextLine+0x4c>)
 8001456:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= LCD_ROWS) {
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <LCD_NextLine+0x4c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d902      	bls.n	8001466 <LCD_NextLine+0x2e>
		_currentRow = 0;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LCD_NextLine+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <LCD_NextLine+0x48>)
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <LCD_NextLine+0x4c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4619      	mov	r1, r3
 8001470:	4610      	mov	r0, r2
 8001472:	f7ff fe3b 	bl	80010ec <LCD_SetCursor>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000451 	.word	0x20000451
 8001484:	20000444 	.word	0x20000444

08001488 <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f815 	bl	80014da <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e00a      	b.n	80014cc <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f819 	bl	80014f8 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	ddf1      	ble.n	80014b6 <LCD_DefineCustomChar+0x2e>
	}
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 f83f 	bl	800156c <_LCD_SendByteWithState>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f000 f82d 	bl	800156c <_LCD_SendByteWithState>

	if (moveCursor) {
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <_LCD_SendData+0x64>
		++_currentCol;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <_LCD_SendData+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_LCD_SendData+0x6c>)
 8001522:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= LCD_COLUMNS) {
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <_LCD_SendData+0x6c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b13      	cmp	r3, #19
 800152a:	d917      	bls.n	800155c <_LCD_SendData+0x64>
			_currentCol = 0;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <_LCD_SendData+0x6c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <_LCD_SendData+0x70>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <_LCD_SendData+0x70>)
 800153c:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= LCD_ROWS) {
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <_LCD_SendData+0x70>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d902      	bls.n	800154c <_LCD_SendData+0x54>
				_currentRow = 0;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <_LCD_SendData+0x70>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <_LCD_SendData+0x6c>)
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <_LCD_SendData+0x70>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f7ff fdc8 	bl	80010ec <LCD_SetCursor>
		}
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000451 	.word	0x20000451
 8001568:	20000444 	.word	0x20000444

0800156c <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	460a      	mov	r2, r1
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_PORT, _rs, mode);
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <_LCD_SendByteWithState+0x50>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	79ba      	ldrb	r2, [r7, #6]
 8001582:	4619      	mov	r1, r3
 8001584:	480e      	ldr	r0, [pc, #56]	; (80015c0 <_LCD_SendByteWithState+0x54>)
 8001586:	f002 feb1 	bl	80042ec <HAL_GPIO_WritePin>

	if (_rw != 255) {
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <_LCD_SendByteWithState+0x58>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d006      	beq.n	80015a0 <_LCD_SendByteWithState+0x34>
		HAL_GPIO_WritePin(LCD_PORT, _rw, GPIO_PIN_RESET);
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <_LCD_SendByteWithState+0x58>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <_LCD_SendByteWithState+0x54>)
 800159c:	f002 fea6 	bl	80042ec <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f834 	bl	8001614 <_LCD_WriteData>
	_LCD_WriteData(value);
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f830 	bl	8001614 <_LCD_WriteData>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000045c 	.word	0x2000045c
 80015c0:	40021000 	.word	0x40021000
 80015c4:	20000446 	.word	0x20000446

080015c8 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <_LCD_EnableSignal+0x44>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	480e      	ldr	r0, [pc, #56]	; (8001610 <_LCD_EnableSignal+0x48>)
 80015d6:	f002 fe89 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 fba0 	bl	8003d20 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_SET);
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <_LCD_EnableSignal+0x44>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <_LCD_EnableSignal+0x48>)
 80015ea:	f002 fe7f 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f002 fb96 	bl	8003d20 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <_LCD_EnableSignal+0x44>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <_LCD_EnableSignal+0x48>)
 80015fe:	f002 fe75 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f002 fb8c 	bl	8003d20 <HAL_Delay>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000460 	.word	0x20000460
 8001610:	40021000 	.word	0x40021000

08001614 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e012      	b.n	800164a <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(LCD_PORT, _data[i],
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <_LCD_WriteData+0x48>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800162c:	79fa      	ldrb	r2, [r7, #7]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	fa42 f303 	asr.w	r3, r2, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(LCD_PORT, _data[i],
 800163c:	461a      	mov	r2, r3
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <_LCD_WriteData+0x4c>)
 8001640:	f002 fe54 	bl	80042ec <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b03      	cmp	r3, #3
 800164e:	dde9      	ble.n	8001624 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 8001650:	f7ff ffba 	bl	80015c8 <_LCD_EnableSignal>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000454 	.word	0x20000454
 8001660:	40021000 	.word	0x40021000

08001664 <RGB_Init>:
	
uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <RGB_Init+0x2c>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <RGB_Init+0x30>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <RGB_Init+0x34>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
	_state = 0;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <RGB_Init+0x38>)
 800167c:	2200      	movs	r2, #0
 800167e:	801a      	strh	r2, [r3, #0]
	_mode = NONE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <RGB_Init+0x3c>)
 8001682:	220a      	movs	r2, #10
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	2000046c 	.word	0x2000046c
 8001694:	20000464 	.word	0x20000464
 8001698:	20000470 	.word	0x20000470
 800169c:	20000468 	.word	0x20000468
 80016a0:	20000474 	.word	0x20000474

080016a4 <RGB_SetWhite>:
void RGB_SetWhite(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	_mode = White;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <RGB_SetWhite+0x2c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = RGB_MAX_REGISTER_VAL;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <RGB_SetWhite+0x30>)
 80016b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b4:	601a      	str	r2, [r3, #0]
	_CCR2 = RGB_MAX_REGISTER_VAL;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <RGB_SetWhite+0x34>)
 80016b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016bc:	601a      	str	r2, [r3, #0]
	_CCR3 = RGB_MAX_REGISTER_VAL;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <RGB_SetWhite+0x38>)
 80016c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c4:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 80016c6:	f000 f879 	bl	80017bc <_RGB_UpdateRegisters>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000474 	.word	0x20000474
 80016d4:	2000046c 	.word	0x2000046c
 80016d8:	20000464 	.word	0x20000464
 80016dc:	20000470 	.word	0x20000470

080016e0 <RGB_SetRed>:
void RGB_SetRed(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	_mode = Red;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <RGB_SetRed+0x28>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = RGB_MAX_REGISTER_VAL;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <RGB_SetRed+0x2c>)
 80016ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f0:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <RGB_SetRed+0x30>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <RGB_SetRed+0x34>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 80016fe:	f000 f85d 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000474 	.word	0x20000474
 800170c:	2000046c 	.word	0x2000046c
 8001710:	20000464 	.word	0x20000464
 8001714:	20000470 	.word	0x20000470

08001718 <RGB_SetGreen>:
void RGB_SetGreen(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	_mode = Green;
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <RGB_SetGreen+0x28>)
 800171e:	2203      	movs	r2, #3
 8001720:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <RGB_SetGreen+0x2c>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
	_CCR2 = RGB_MAX_REGISTER_VAL;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <RGB_SetGreen+0x30>)
 800172a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800172e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <RGB_SetGreen+0x34>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 8001736:	f000 f841 	bl	80017bc <_RGB_UpdateRegisters>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000474 	.word	0x20000474
 8001744:	2000046c 	.word	0x2000046c
 8001748:	20000464 	.word	0x20000464
 800174c:	20000470 	.word	0x20000470

08001750 <RGB_SetBlue>:
void RGB_SetBlue(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	_mode = Blue;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <RGB_SetBlue+0x28>)
 8001756:	2204      	movs	r2, #4
 8001758:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <RGB_SetBlue+0x2c>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <RGB_SetBlue+0x30>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	_CCR3 = RGB_MAX_REGISTER_VAL;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <RGB_SetBlue+0x34>)
 8001768:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176c:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 800176e:	f000 f825 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000474 	.word	0x20000474
 800177c:	2000046c 	.word	0x2000046c
 8001780:	20000464 	.word	0x20000464
 8001784:	20000470 	.word	0x20000470

08001788 <RGB_SetBlack>:
void RGB_SetBlack(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	_mode = Disabled;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <RGB_SetBlack+0x24>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <RGB_SetBlack+0x28>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <RGB_SetBlack+0x2c>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <RGB_SetBlack+0x30>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 80017a4:	f000 f80a 	bl	80017bc <_RGB_UpdateRegisters>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000474 	.word	0x20000474
 80017b0:	2000046c 	.word	0x2000046c
 80017b4:	20000464 	.word	0x20000464
 80017b8:	20000470 	.word	0x20000470

080017bc <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	if (_CCR1 > RGB_MAX_REGISTER_VAL) _CCR1 = RGB_MAX_REGISTER_VAL;
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <_RGB_UpdateRegisters+0x80>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c8:	d303      	bcc.n	80017d2 <_RGB_UpdateRegisters+0x16>
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <_RGB_UpdateRegisters+0x80>)
 80017cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017d0:	601a      	str	r2, [r3, #0]
	if (_CCR2 > RGB_MAX_REGISTER_VAL) _CCR2 = RGB_MAX_REGISTER_VAL;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <_RGB_UpdateRegisters+0x84>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017da:	d303      	bcc.n	80017e4 <_RGB_UpdateRegisters+0x28>
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <_RGB_UpdateRegisters+0x84>)
 80017de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e2:	601a      	str	r2, [r3, #0]
	if (_CCR3 > RGB_MAX_REGISTER_VAL) _CCR3 = RGB_MAX_REGISTER_VAL;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <_RGB_UpdateRegisters+0x88>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ec:	d303      	bcc.n	80017f6 <_RGB_UpdateRegisters+0x3a>
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_RGB_UpdateRegisters+0x88>)
 80017f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f4:	601a      	str	r2, [r3, #0]
	
	if (_CCR1 < 0) _CCR1 = 0;
	if (_CCR2 < 0) _CCR2 = 0;
	if (_CCR3 < 0) _CCR3 = 0;
	
	TIM2->CCR1 = _CCR1;
 80017f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_RGB_UpdateRegisters+0x80>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8001800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_RGB_UpdateRegisters+0x84>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 800180a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <_RGB_UpdateRegisters+0x88>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	63d3      	str	r3, [r2, #60]	; 0x3c
	
	++_state;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <_RGB_UpdateRegisters+0x8c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <_RGB_UpdateRegisters+0x8c>)
 800181e:	801a      	strh	r2, [r3, #0]
	if (_state > RGB_MAX_REGISTER_VAL - 3) _state = 0;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <_RGB_UpdateRegisters+0x8c>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8001828:	d902      	bls.n	8001830 <_RGB_UpdateRegisters+0x74>
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_RGB_UpdateRegisters+0x8c>)
 800182c:	2200      	movs	r2, #0
 800182e:	801a      	strh	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000046c 	.word	0x2000046c
 8001840:	20000464 	.word	0x20000464
 8001844:	20000470 	.word	0x20000470
 8001848:	20000468 	.word	0x20000468

0800184c <RGB_Rainbow>:

void RGB_Rainbow(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	if (_mode != Rainbow) _state = 0;
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <RGB_Rainbow+0x10c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b09      	cmp	r3, #9
 8001856:	d002      	beq.n	800185e <RGB_Rainbow+0x12>
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <RGB_Rainbow+0x110>)
 800185a:	2200      	movs	r2, #0
 800185c:	801a      	strh	r2, [r3, #0]
	_mode = Rainbow;
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <RGB_Rainbow+0x10c>)
 8001860:	2209      	movs	r2, #9
 8001862:	701a      	strb	r2, [r3, #0]
	
	switch (_state)
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <RGB_Rainbow+0x110>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f240 124d 	movw	r2, #333	; 0x14d
 800186c:	4293      	cmp	r3, r2
 800186e:	d010      	beq.n	8001892 <RGB_Rainbow+0x46>
 8001870:	f240 229a 	movw	r2, #666	; 0x29a
 8001874:	4293      	cmp	r3, r2
 8001876:	d017      	beq.n	80018a8 <RGB_Rainbow+0x5c>
 8001878:	2b00      	cmp	r3, #0
 800187a:	d120      	bne.n	80018be <RGB_Rainbow+0x72>
	{
	case 0: 
		{
			_CCR1 = RGB_MAX_REGISTER_VAL;
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <RGB_Rainbow+0x114>)
 800187e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001882:	601a      	str	r2, [r3, #0]
			_CCR2 = 0;
 8001884:	4b37      	ldr	r3, [pc, #220]	; (8001964 <RGB_Rainbow+0x118>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
			_CCR3 = 0;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <RGB_Rainbow+0x11c>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
			break;
 8001890:	e05e      	b.n	8001950 <RGB_Rainbow+0x104>
		}
	case (int)(RGB_MAX_REGISTER_VAL / 3): 
		{
			_CCR1 = 0;
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <RGB_Rainbow+0x114>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
			_CCR2 = RGB_MAX_REGISTER_VAL;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <RGB_Rainbow+0x118>)
 800189a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189e:	601a      	str	r2, [r3, #0]
			_CCR3 = 0;
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <RGB_Rainbow+0x11c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
			break;
 80018a6:	e053      	b.n	8001950 <RGB_Rainbow+0x104>
		}
	case (int)(RGB_MAX_REGISTER_VAL * 2 / 3): 
		{
			_CCR1 = 0;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <RGB_Rainbow+0x114>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
			_CCR2 = 0;
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <RGB_Rainbow+0x118>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
			_CCR3 = RGB_MAX_REGISTER_VAL;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <RGB_Rainbow+0x11c>)
 80018b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ba:	601a      	str	r2, [r3, #0]
			break;
 80018bc:	e048      	b.n	8001950 <RGB_Rainbow+0x104>
		}
	default: 
		{
			if (_state > 0 && (_state < RGB_MAX_REGISTER_VAL / 3))
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <RGB_Rainbow+0x110>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <RGB_Rainbow+0xa0>
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <RGB_Rainbow+0x110>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 80018ce:	d80d      	bhi.n	80018ec <RGB_Rainbow+0xa0>
			{
				_CCR1 -= 3;
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <RGB_Rainbow+0x114>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	4a22      	ldr	r2, [pc, #136]	; (8001960 <RGB_Rainbow+0x114>)
 80018d8:	6013      	str	r3, [r2, #0]
				_CCR2 += 3;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <RGB_Rainbow+0x118>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3303      	adds	r3, #3
 80018e0:	4a20      	ldr	r2, [pc, #128]	; (8001964 <RGB_Rainbow+0x118>)
 80018e2:	6013      	str	r3, [r2, #0]
				_CCR3 = 0;
 80018e4:	4b20      	ldr	r3, [pc, #128]	; (8001968 <RGB_Rainbow+0x11c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e031      	b.n	8001950 <RGB_Rainbow+0x104>
			}
			else if ((_state > RGB_MAX_REGISTER_VAL / 3) && (_state < RGB_MAX_REGISTER_VAL * 2 / 3))
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <RGB_Rainbow+0x110>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 80018f4:	d313      	bcc.n	800191e <RGB_Rainbow+0xd2>
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <RGB_Rainbow+0x110>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	f240 2299 	movw	r2, #665	; 0x299
 80018fe:	4293      	cmp	r3, r2
 8001900:	d80d      	bhi.n	800191e <RGB_Rainbow+0xd2>
			{
				_CCR1 = 0;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <RGB_Rainbow+0x114>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
				_CCR2 -= 3;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <RGB_Rainbow+0x118>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3b03      	subs	r3, #3
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <RGB_Rainbow+0x118>)
 8001910:	6013      	str	r3, [r2, #0]
				_CCR3 += 3;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <RGB_Rainbow+0x11c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3303      	adds	r3, #3
 8001918:	4a13      	ldr	r2, [pc, #76]	; (8001968 <RGB_Rainbow+0x11c>)
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e018      	b.n	8001950 <RGB_Rainbow+0x104>
			}
			else if ((_state > RGB_MAX_REGISTER_VAL * 2 / 3) && (_state < RGB_MAX_REGISTER_VAL))
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <RGB_Rainbow+0x110>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	f240 229a 	movw	r2, #666	; 0x29a
 8001926:	4293      	cmp	r3, r2
 8001928:	d912      	bls.n	8001950 <RGB_Rainbow+0x104>
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <RGB_Rainbow+0x110>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001932:	4293      	cmp	r3, r2
 8001934:	d80c      	bhi.n	8001950 <RGB_Rainbow+0x104>
			{
				_CCR1 += 3;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <RGB_Rainbow+0x114>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3303      	adds	r3, #3
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <RGB_Rainbow+0x114>)
 800193e:	6013      	str	r3, [r2, #0]
				_CCR2 = 0;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <RGB_Rainbow+0x118>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
				_CCR3 -= 3;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <RGB_Rainbow+0x11c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	3b03      	subs	r3, #3
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <RGB_Rainbow+0x11c>)
 800194e:	6013      	str	r3, [r2, #0]
			}
		}
	}
	_RGB_UpdateRegisters();
 8001950:	f7ff ff34 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000474 	.word	0x20000474
 800195c:	20000468 	.word	0x20000468
 8001960:	2000046c 	.word	0x2000046c
 8001964:	20000464 	.word	0x20000464
 8001968:	20000470 	.word	0x20000470

0800196c <RGB_BlinkRed>:

void RGB_BlinkRed(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	if (_mode != BlinkRed) _state = 0;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <RGB_BlinkRed+0x5c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b06      	cmp	r3, #6
 8001976:	d002      	beq.n	800197e <RGB_BlinkRed+0x12>
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <RGB_BlinkRed+0x60>)
 800197a:	2200      	movs	r2, #0
 800197c:	801a      	strh	r2, [r3, #0]
	_mode = BlinkRed;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <RGB_BlinkRed+0x5c>)
 8001980:	2206      	movs	r2, #6
 8001982:	701a      	strb	r2, [r3, #0]
	
	_CCR2 = 0;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <RGB_BlinkRed+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <RGB_BlinkRed+0x68>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <RGB_BlinkRed+0x60>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <RGB_BlinkRed+0x34>
	{
		_CCR1 = 0;	
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <RGB_BlinkRed+0x6c>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e00f      	b.n	80019c0 <RGB_BlinkRed+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <RGB_BlinkRed+0x60>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80019a8:	d805      	bhi.n	80019b6 <RGB_BlinkRed+0x4a>
	{
		_CCR1 += 2;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <RGB_BlinkRed+0x6c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3302      	adds	r3, #2
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <RGB_BlinkRed+0x6c>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e004      	b.n	80019c0 <RGB_BlinkRed+0x54>
	}
	else
	{
		_CCR1 -= 2;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <RGB_BlinkRed+0x6c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3b02      	subs	r3, #2
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <RGB_BlinkRed+0x6c>)
 80019be:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 80019c0:	f7ff fefc 	bl	80017bc <_RGB_UpdateRegisters>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000474 	.word	0x20000474
 80019cc:	20000468 	.word	0x20000468
 80019d0:	20000464 	.word	0x20000464
 80019d4:	20000470 	.word	0x20000470
 80019d8:	2000046c 	.word	0x2000046c

080019dc <RGB_BlinkGreen>:
void RGB_BlinkGreen(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	if (_mode != BlinkGreen) _state = 0;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <RGB_BlinkGreen+0x5c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b07      	cmp	r3, #7
 80019e6:	d002      	beq.n	80019ee <RGB_BlinkGreen+0x12>
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <RGB_BlinkGreen+0x60>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	801a      	strh	r2, [r3, #0]
	_mode = BlinkGreen;
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <RGB_BlinkGreen+0x5c>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <RGB_BlinkGreen+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <RGB_BlinkGreen+0x68>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <RGB_BlinkGreen+0x60>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d103      	bne.n	8001a10 <RGB_BlinkGreen+0x34>
	{
		_CCR2 = 0;	
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <RGB_BlinkGreen+0x6c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e00f      	b.n	8001a30 <RGB_BlinkGreen+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <RGB_BlinkGreen+0x60>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001a18:	d805      	bhi.n	8001a26 <RGB_BlinkGreen+0x4a>
	{
		_CCR2 += 2;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <RGB_BlinkGreen+0x6c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <RGB_BlinkGreen+0x6c>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e004      	b.n	8001a30 <RGB_BlinkGreen+0x54>
	}
	else
	{
		_CCR2 -= 2;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <RGB_BlinkGreen+0x6c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b02      	subs	r3, #2
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <RGB_BlinkGreen+0x6c>)
 8001a2e:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 8001a30:	f7ff fec4 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000474 	.word	0x20000474
 8001a3c:	20000468 	.word	0x20000468
 8001a40:	2000046c 	.word	0x2000046c
 8001a44:	20000470 	.word	0x20000470
 8001a48:	20000464 	.word	0x20000464

08001a4c <RGB_BlinkBlue>:
void RGB_BlinkBlue(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	if (_mode != BlinkBlue) _state = 0;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <RGB_BlinkBlue+0x5c>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d002      	beq.n	8001a5e <RGB_BlinkBlue+0x12>
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <RGB_BlinkBlue+0x60>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	801a      	strh	r2, [r3, #0]
	_mode = BlinkBlue;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <RGB_BlinkBlue+0x5c>)
 8001a60:	2208      	movs	r2, #8
 8001a62:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <RGB_BlinkBlue+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <RGB_BlinkBlue+0x68>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <RGB_BlinkBlue+0x60>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <RGB_BlinkBlue+0x34>
	{
		_CCR3 = 0;	
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <RGB_BlinkBlue+0x6c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e00f      	b.n	8001aa0 <RGB_BlinkBlue+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <RGB_BlinkBlue+0x60>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001a88:	d805      	bhi.n	8001a96 <RGB_BlinkBlue+0x4a>
	{
		_CCR3 += 2;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <RGB_BlinkBlue+0x6c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <RGB_BlinkBlue+0x6c>)
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e004      	b.n	8001aa0 <RGB_BlinkBlue+0x54>
	}
	else
	{
		_CCR3 -= 2;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <RGB_BlinkBlue+0x6c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3b02      	subs	r3, #2
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <RGB_BlinkBlue+0x6c>)
 8001a9e:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 8001aa0:	f7ff fe8c 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000474 	.word	0x20000474
 8001aac:	20000468 	.word	0x20000468
 8001ab0:	2000046c 	.word	0x2000046c
 8001ab4:	20000464 	.word	0x20000464
 8001ab8:	20000470 	.word	0x20000470

08001abc <RGB_BlinkWhite>:
void RGB_BlinkWhite(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	if (_mode != BlinkWhite) _state = 0;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <RGB_BlinkWhite+0x84>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d002      	beq.n	8001ace <RGB_BlinkWhite+0x12>
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <RGB_BlinkWhite+0x88>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]
	_mode = BlinkWhite;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <RGB_BlinkWhite+0x84>)
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	701a      	strb	r2, [r3, #0]
	
	if (_state == 0)
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <RGB_BlinkWhite+0x88>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <RGB_BlinkWhite+0x34>
	{
		_CCR1 = 0;	
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <RGB_BlinkWhite+0x8c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;	
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <RGB_BlinkWhite+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;	
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <RGB_BlinkWhite+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e023      	b.n	8001b38 <RGB_BlinkWhite+0x7c>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <RGB_BlinkWhite+0x88>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001af8:	d80f      	bhi.n	8001b1a <RGB_BlinkWhite+0x5e>
	{
		_CCR1 += 2;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <RGB_BlinkWhite+0x8c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3302      	adds	r3, #2
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <RGB_BlinkWhite+0x8c>)
 8001b02:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <RGB_BlinkWhite+0x90>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	4a10      	ldr	r2, [pc, #64]	; (8001b4c <RGB_BlinkWhite+0x90>)
 8001b0c:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <RGB_BlinkWhite+0x94>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3302      	adds	r3, #2
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <RGB_BlinkWhite+0x94>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e00e      	b.n	8001b38 <RGB_BlinkWhite+0x7c>
	}
	else
	{
		_CCR1 -= 2;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <RGB_BlinkWhite+0x8c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3b02      	subs	r3, #2
 8001b20:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <RGB_BlinkWhite+0x8c>)
 8001b22:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <RGB_BlinkWhite+0x90>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <RGB_BlinkWhite+0x90>)
 8001b2c:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <RGB_BlinkWhite+0x94>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3b02      	subs	r3, #2
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <RGB_BlinkWhite+0x94>)
 8001b36:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 8001b38:	f7ff fe40 	bl	80017bc <_RGB_UpdateRegisters>
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000474 	.word	0x20000474
 8001b44:	20000468 	.word	0x20000468
 8001b48:	2000046c 	.word	0x2000046c
 8001b4c:	20000464 	.word	0x20000464
 8001b50:	20000470 	.word	0x20000470

08001b54 <_RGB_Test>:

void _RGB_Test(uint8_t choice)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	switch (choice)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d835      	bhi.n	8001bd0 <_RGB_Test+0x7c>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <_RGB_Test+0x18>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b95 	.word	0x08001b95
 8001b70:	08001b9b 	.word	0x08001b9b
 8001b74:	08001ba1 	.word	0x08001ba1
 8001b78:	08001ba7 	.word	0x08001ba7
 8001b7c:	08001bad 	.word	0x08001bad
 8001b80:	08001bb3 	.word	0x08001bb3
 8001b84:	08001bb9 	.word	0x08001bb9
 8001b88:	08001bbf 	.word	0x08001bbf
 8001b8c:	08001bc5 	.word	0x08001bc5
 8001b90:	08001bcb 	.word	0x08001bcb
	{
	case 0: RGB_SetBlack(); break;
 8001b94:	f7ff fdf8 	bl	8001788 <RGB_SetBlack>
 8001b98:	e01a      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 1: RGB_SetWhite(); break;
 8001b9a:	f7ff fd83 	bl	80016a4 <RGB_SetWhite>
 8001b9e:	e017      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 2: RGB_SetRed(); break;
 8001ba0:	f7ff fd9e 	bl	80016e0 <RGB_SetRed>
 8001ba4:	e014      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 3: RGB_SetGreen(); break;
 8001ba6:	f7ff fdb7 	bl	8001718 <RGB_SetGreen>
 8001baa:	e011      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 4: RGB_SetBlue(); break;
 8001bac:	f7ff fdd0 	bl	8001750 <RGB_SetBlue>
 8001bb0:	e00e      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 5: RGB_BlinkRed(); break;
 8001bb2:	f7ff fedb 	bl	800196c <RGB_BlinkRed>
 8001bb6:	e00b      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 6: RGB_BlinkGreen(); break;
 8001bb8:	f7ff ff10 	bl	80019dc <RGB_BlinkGreen>
 8001bbc:	e008      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 7: RGB_BlinkBlue(); break;
 8001bbe:	f7ff ff45 	bl	8001a4c <RGB_BlinkBlue>
 8001bc2:	e005      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 8: RGB_BlinkWhite(); break;
 8001bc4:	f7ff ff7a 	bl	8001abc <RGB_BlinkWhite>
 8001bc8:	e002      	b.n	8001bd0 <_RGB_Test+0x7c>
	case 9: RGB_Rainbow(); break;
 8001bca:	f7ff fe3f 	bl	800184c <RGB_Rainbow>
 8001bce:	bf00      	nop
	}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <SD_Init>:
extern RTC_TimeTypeDef hTime;
extern RTC_DateTypeDef hDate;

SD_Time _tHandle;

void SD_Init(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	f_mount(&_ffHandle, "", 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <SD_Init+0x18>)
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <SD_Init+0x1c>)
 8001be2:	f001 fa59 	bl	8003098 <f_mount>

	SD_RefreshDateTime();
 8001be6:	f000 f807 	bl	8001bf8 <SD_RefreshDateTime>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08008be0 	.word	0x08008be0
 8001bf4:	200001fc 	.word	0x200001fc

08001bf8 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &hTime, RTC_FORMAT_BCD);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4938      	ldr	r1, [pc, #224]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c00:	4838      	ldr	r0, [pc, #224]	; (8001ce4 <SD_RefreshDateTime+0xec>)
 8001c02:	f003 fa1d 	bl	8005040 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BCD);
 8001c06:	2201      	movs	r2, #1
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <SD_RefreshDateTime+0xec>)
 8001c0c:	f003 fb1d 	bl	800524a <HAL_RTC_GetDate>

	_tHandle.time[0] = (hTime.Hours / 16) + 48;
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3330      	adds	r3, #48	; 0x30
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c1e:	719a      	strb	r2, [r3, #6]
	_tHandle.time[1] = (hTime.Hours % 16) + 48;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3330      	adds	r3, #48	; 0x30
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c30:	71da      	strb	r2, [r3, #7]
	_tHandle.time[2] = (hTime.Minutes / 16) + 48;
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3330      	adds	r3, #48	; 0x30
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c40:	721a      	strb	r2, [r3, #8]
	_tHandle.time[3] = (hTime.Minutes % 16) + 48;
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3330      	adds	r3, #48	; 0x30
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c52:	725a      	strb	r2, [r3, #9]
	_tHandle.time[4] = (hTime.Seconds / 16) + 48;
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c56:	789b      	ldrb	r3, [r3, #2]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3330      	adds	r3, #48	; 0x30
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c62:	729a      	strb	r2, [r3, #10]
	_tHandle.time[5] = (hTime.Seconds % 16) + 48;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <SD_RefreshDateTime+0xe8>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3330      	adds	r3, #48	; 0x30
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c74:	72da      	strb	r2, [r3, #11]

	_tHandle.date[0] = (hDate.Date / 16) + 48;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3330      	adds	r3, #48	; 0x30
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c84:	701a      	strb	r2, [r3, #0]
	_tHandle.date[1] = (hDate.Date % 16) + 48;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3330      	adds	r3, #48	; 0x30
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001c96:	705a      	strb	r2, [r3, #1]
	_tHandle.date[2] = (hDate.Month / 16) + 48;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	3330      	adds	r3, #48	; 0x30
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001ca6:	709a      	strb	r2, [r3, #2]
	_tHandle.date[3] = (hDate.Month % 16) + 48;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001caa:	785b      	ldrb	r3, [r3, #1]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3330      	adds	r3, #48	; 0x30
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001cb8:	70da      	strb	r2, [r3, #3]
	_tHandle.date[4] = (hDate.Year / 16) + 48;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3330      	adds	r3, #48	; 0x30
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001cc8:	711a      	strb	r2, [r3, #4]
	_tHandle.date[5] = (hDate.Year % 16) + 48;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <SD_RefreshDateTime+0xf0>)
 8001ccc:	78db      	ldrb	r3, [r3, #3]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3330      	adds	r3, #48	; 0x30
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SD_RefreshDateTime+0xf4>)
 8001cda:	715a      	strb	r2, [r3, #5]
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000804 	.word	0x20000804
 8001ce4:	2000085c 	.word	0x2000085c
 8001ce8:	20000818 	.word	0x20000818
 8001cec:	200007a4 	.word	0x200007a4

08001cf0 <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _tHandle.date[0], _tHandle.date[1],
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <SD_GetDateTime+0x80>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461c      	mov	r4, r3
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d02:	785b      	ldrb	r3, [r3, #1]
 8001d04:	461d      	mov	r5, r3
			_tHandle.date[2], _tHandle.date[3], _tHandle.date[4], _tHandle.date[5]);
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d08:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _tHandle.date[0], _tHandle.date[1],
 8001d0a:	461a      	mov	r2, r3
			_tHandle.date[2], _tHandle.date[3], _tHandle.date[4], _tHandle.date[5]);
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d0e:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _tHandle.date[0], _tHandle.date[1],
 8001d10:	4619      	mov	r1, r3
			_tHandle.date[2], _tHandle.date[3], _tHandle.date[4], _tHandle.date[5]);
 8001d12:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d14:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _tHandle.date[0], _tHandle.date[1],
 8001d16:	4618      	mov	r0, r3
			_tHandle.date[2], _tHandle.date[3], _tHandle.date[4], _tHandle.date[5]);
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d1a:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _tHandle.date[0], _tHandle.date[1],
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	9002      	str	r0, [sp, #8]
 8001d20:	9101      	str	r1, [sp, #4]
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	462b      	mov	r3, r5
 8001d26:	4622      	mov	r2, r4
 8001d28:	4912      	ldr	r1, [pc, #72]	; (8001d74 <SD_GetDateTime+0x84>)
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f005 fbe2 	bl	80074f4 <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _tHandle.time[0], _tHandle.time[1],
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d32:	799b      	ldrb	r3, [r3, #6]
 8001d34:	461c      	mov	r4, r3
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d38:	79db      	ldrb	r3, [r3, #7]
 8001d3a:	461d      	mov	r5, r3
			_tHandle.time[2], _tHandle.time[3], _tHandle.time[4], _tHandle.time[5]);
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d3e:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _tHandle.time[0], _tHandle.time[1],
 8001d40:	461a      	mov	r2, r3
			_tHandle.time[2], _tHandle.time[3], _tHandle.time[4], _tHandle.time[5]);
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d44:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _tHandle.time[0], _tHandle.time[1],
 8001d46:	4619      	mov	r1, r3
			_tHandle.time[2], _tHandle.time[3], _tHandle.time[4], _tHandle.time[5]);
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d4a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _tHandle.time[0], _tHandle.time[1],
 8001d4c:	4618      	mov	r0, r3
			_tHandle.time[2], _tHandle.time[3], _tHandle.time[4], _tHandle.time[5]);
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <SD_GetDateTime+0x80>)
 8001d50:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _tHandle.time[0], _tHandle.time[1],
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	9002      	str	r0, [sp, #8]
 8001d56:	9101      	str	r1, [sp, #4]
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	462b      	mov	r3, r5
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	4906      	ldr	r1, [pc, #24]	; (8001d78 <SD_GetDateTime+0x88>)
 8001d60:	6838      	ldr	r0, [r7, #0]
 8001d62:	f005 fbc7 	bl	80074f4 <siprintf>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200007a4 	.word	0x200007a4
 8001d74:	08008be4 	.word	0x08008be4
 8001d78:	08008bf4 	.word	0x08008bf4

08001d7c <THS_Init>:

uint32_t _clockCounter;

extern TIM_HandleTypeDef htim4;

void THS_Init() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	_pin1 = GPIO_PIN_0;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <THS_Init+0x28>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	801a      	strh	r2, [r3, #0]
	_pin2 = GPIO_PIN_1;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <THS_Init+0x2c>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	801a      	strh	r2, [r3, #0]

	_clockCounter = 0;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <THS_Init+0x30>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

	HAL_Delay(500);
 8001d92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d96:	f001 ffc3 	bl	8003d20 <HAL_Delay>
	_ready = true;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <THS_Init+0x34>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200007b8 	.word	0x200007b8
 8001da8:	200007b6 	.word	0x200007b6
 8001dac:	200007bc 	.word	0x200007bc
 8001db0:	200007b4 	.word	0x200007b4

08001db4 <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <THS_Delay+0x2c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8001dc6:	bf00      	nop
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <THS_Delay+0x2c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3f9      	bcc.n	8001dc8 <THS_Delay+0x14>
		;
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	200007c4 	.word	0x200007c4

08001de4 <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4803      	ldr	r0, [pc, #12]	; (8001e20 <_THS_SetPinOutput+0x3c>)
 8001e12:	f002 f8b9 	bl	8003f88 <HAL_GPIO_Init>
}
 8001e16:	bf00      	nop
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020800 	.word	0x40020800

08001e24 <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <_THS_SetPinInput+0x3c>)
 8001e52:	f002 f899 	bl	8003f88 <HAL_GPIO_Init>
}
 8001e56:	bf00      	nop
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40020800 	.word	0x40020800

08001e64 <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <_THS_InitConn+0x9c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_THS_InitConn+0x1c>
		return 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e03b      	b.n	8001ef8 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffae 	bl	8001de4 <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	481d      	ldr	r0, [pc, #116]	; (8001f04 <_THS_InitConn+0xa0>)
 8001e90:	f002 fa2c 	bl	80042ec <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8001e94:	2012      	movs	r0, #18
 8001e96:	f001 ff43 	bl	8003d20 <HAL_Delay>
	Write(1);
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4818      	ldr	r0, [pc, #96]	; (8001f04 <_THS_InitConn+0xa0>)
 8001ea2:	f002 fa23 	bl	80042ec <HAL_GPIO_WritePin>
	THS_Delay(THS_START_HI);
 8001ea6:	2014      	movs	r0, #20
 8001ea8:	f7ff ff84 	bl	8001db4 <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffb8 	bl	8001e24 <_THS_SetPinInput>
	THS_Delay(THS_RESPONSE);
 8001eb4:	2028      	movs	r0, #40	; 0x28
 8001eb6:	f7ff ff7d 	bl	8001db4 <THS_Delay>

	if (!Read()) {
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4811      	ldr	r0, [pc, #68]	; (8001f04 <_THS_InitConn+0xa0>)
 8001ec0:	f002 f9fc 	bl	80042bc <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <_THS_InitConn+0x80>
		THS_Delay(2 * THS_RESPONSE);
 8001eca:	2050      	movs	r0, #80	; 0x50
 8001ecc:	f7ff ff72 	bl	8001db4 <THS_Delay>
		if (!Read()) {
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <_THS_InitConn+0xa0>)
 8001ed6:	f002 f9f1 	bl	80042bc <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e009      	b.n	8001ef8 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 8001ee4:	bf00      	nop
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <_THS_InitConn+0xa0>)
 8001eec:	f002 f9e6 	bl	80042bc <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d0f7      	beq.n	8001ee6 <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200007b4 	.word	0x200007b4
 8001f04:	40020800 	.word	0x40020800

08001f08 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	73bb      	strb	r3, [r7, #14]
 8001f1a:	e02f      	b.n	8001f7c <_THS_ReadByte+0x74>
		_clockCounter = 0;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <_THS_ReadByte+0x84>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8001f22:	e005      	b.n	8001f30 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <_THS_ReadByte+0x84>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2bc8      	cmp	r3, #200	; 0xc8
 8001f2a:	d901      	bls.n	8001f30 <_THS_ReadByte+0x28>
				return 255;
 8001f2c:	23ff      	movs	r3, #255	; 0xff
 8001f2e:	e029      	b.n	8001f84 <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4816      	ldr	r0, [pc, #88]	; (8001f90 <_THS_ReadByte+0x88>)
 8001f36:	f002 f9c1 	bl	80042bc <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f1      	beq.n	8001f24 <_THS_ReadByte+0x1c>
		}
		THS_Delay(THS_SIGNAL_WAIT);
 8001f40:	203c      	movs	r0, #60	; 0x3c
 8001f42:	f7ff ff37 	bl	8001db4 <THS_Delay>

		byte <<= 1;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <_THS_ReadByte+0x88>)
 8001f52:	f002 f9b3 	bl	80042bc <HAL_GPIO_ReadPin>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8001f64:	bf00      	nop
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <_THS_ReadByte+0x88>)
 8001f6c:	f002 f9a6 	bl	80042bc <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d0f7      	beq.n	8001f66 <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	73bb      	strb	r3, [r7, #14]
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b07      	cmp	r3, #7
 8001f80:	d9cc      	bls.n	8001f1c <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200007bc 	.word	0x200007bc
 8001f90:	40020800 	.word	0x40020800

08001f94 <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	71fb      	strb	r3, [r7, #7]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - THS_ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + THS_ERROR_RANGE)
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	f1a3 020a 	sub.w	r2, r3, #10
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dc06      	bgt.n	8001fbe <_THS_CCR_Acceptable+0x2a>
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dc01      	bgt.n	8001fbe <_THS_CCR_Acceptable+0x2a>
		return 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <_THS_CCR_Acceptable+0x2c>
	return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? _pin1 : _pin2;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <THS_ReadData+0x18>
 8001fde:	4b52      	ldr	r3, [pc, #328]	; (8002128 <THS_ReadData+0x15c>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	e001      	b.n	8001fe8 <THS_ReadData+0x1c>
 8001fe4:	4b51      	ldr	r3, [pc, #324]	; (800212c <THS_ReadData+0x160>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff39 	bl	8001e64 <_THS_InitConn>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <THS_ReadData+0x30>
		return 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e091      	b.n	8002120 <THS_ReadData+0x154>

	uint16_t rh1 = _THS_ReadByte(pin);
 8001ffc:	8bfb      	ldrh	r3, [r7, #30]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff82 	bl	8001f08 <_THS_ReadByte>
 8002004:	4603      	mov	r3, r0
 8002006:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 8002008:	8bfb      	ldrh	r3, [r7, #30]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff7c 	bl	8001f08 <_THS_ReadByte>
 8002010:	4603      	mov	r3, r0
 8002012:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 8002014:	8bfb      	ldrh	r3, [r7, #30]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff76 	bl	8001f08 <_THS_ReadByte>
 800201c:	4603      	mov	r3, r0
 800201e:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 8002020:	8bfb      	ldrh	r3, [r7, #30]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff70 	bl	8001f08 <_THS_ReadByte>
 8002028:	4603      	mov	r3, r0
 800202a:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 800202c:	8bfb      	ldrh	r3, [r7, #30]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff6a 	bl	8001f08 <_THS_ReadByte>
 8002034:	4603      	mov	r3, r0
 8002036:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <THS_ReadData+0x164>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 800203e:	8bbb      	ldrh	r3, [r7, #28]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	7efb      	ldrb	r3, [r7, #27]
 8002044:	4313      	orrs	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	b25a      	sxtb	r2, r3
 800204a:	8b3b      	ldrh	r3, [r7, #24]
 800204c:	b25b      	sxtb	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b25a      	sxtb	r2, r3
 8002052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2da      	uxtb	r2, r3
 800205c:	7dbb      	ldrb	r3, [r7, #22]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff97 	bl	8001f94 <_THS_CCR_Acceptable>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d04f      	beq.n	800210c <THS_ReadData+0x140>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 800206c:	8b3b      	ldrh	r3, [r7, #24]
 800206e:	021a      	lsls	r2, r3, #8
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	4313      	orrs	r3, r2
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002134 <THS_ReadData+0x168>
 8002080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002084:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	7efb      	ldrb	r3, [r7, #27]
 800208e:	4313      	orrs	r3, r2
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002134 <THS_ReadData+0x168>
 800209c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a0:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 80020a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d418      	bmi.n	80020e4 <THS_ReadData+0x118>
 80020b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002138 <THS_ReadData+0x16c>
 80020ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	dc0f      	bgt.n	80020e4 <THS_ReadData+0x118>
 80020c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d408      	bmi.n	80020e4 <THS_ReadData+0x118>
 80020d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800213c <THS_ReadData+0x170>
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	dd0a      	ble.n	80020fa <THS_ReadData+0x12e>
			data[0] = 0.f;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3304      	adds	r3, #4
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
			return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e012      	b.n	8002120 <THS_ReadData+0x154>
		}
		data[0] = t;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	601a      	str	r2, [r3, #0]
		data[1] = r;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3304      	adds	r3, #4
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	601a      	str	r2, [r3, #0]
		return 1;
 8002108:	2301      	movs	r3, #1
 800210a:	e009      	b.n	8002120 <THS_ReadData+0x154>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3304      	adds	r3, #4
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
	return 0;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200007b8 	.word	0x200007b8
 800212c:	200007b6 	.word	0x200007b6
 8002130:	200007b4 	.word	0x200007b4
 8002134:	43800000 	.word	0x43800000
 8002138:	42480000 	.word	0x42480000
 800213c:	42c80000 	.word	0x42c80000

08002140 <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara  tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	if (_clockCounter > THS_SECOND) {
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <THS_ErrorClock+0x30>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214c:	d905      	bls.n	800215a <THS_ErrorClock+0x1a>
		_ready = true;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <THS_ErrorClock+0x34>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <THS_ErrorClock+0x30>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <THS_ErrorClock+0x30>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <THS_ErrorClock+0x30>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200007bc 	.word	0x200007bc
 8002174:	200007b4 	.word	0x200007b4

08002178 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DESELECT>:

static
inline void DESELECT(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800219e:	bf00      	nop
 80021a0:	4808      	ldr	r0, [pc, #32]	; (80021c4 <xmit_spi+0x30>)
 80021a2:	f003 fc6b 	bl	8005a7c <HAL_SPI_GetState>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d1f9      	bne.n	80021a0 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80021ac:	1df9      	adds	r1, r7, #7
 80021ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80021b2:	2201      	movs	r2, #1
 80021b4:	4803      	ldr	r0, [pc, #12]	; (80021c4 <xmit_spi+0x30>)
 80021b6:	f003 f98b 	bl	80054d0 <HAL_SPI_Transmit>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000087c 	.word	0x2000087c

080021c8 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80021ce:	23ff      	movs	r3, #255	; 0xff
 80021d0:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80021d6:	bf00      	nop
 80021d8:	4809      	ldr	r0, [pc, #36]	; (8002200 <rcvr_spi+0x38>)
 80021da:	f003 fc4f 	bl	8005a7c <HAL_SPI_GetState>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d1f9      	bne.n	80021d8 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 80021e4:	1dba      	adds	r2, r7, #6
 80021e6:	1df9      	adds	r1, r7, #7
 80021e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2301      	movs	r3, #1
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <rcvr_spi+0x38>)
 80021f2:	f003 faa1 	bl	8005738 <HAL_SPI_TransmitReceive>

	return Data;
 80021f6:	79bb      	ldrb	r3, [r7, #6]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000087c 	.word	0x2000087c

08002204 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 800220c:	f7ff ffdc 	bl	80021c8 <rcvr_spi>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	701a      	strb	r2, [r3, #0]
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <wait_ready+0x34>)
 8002228:	2232      	movs	r2, #50	; 0x32
 800222a:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 800222c:	f7ff ffcc 	bl	80021c8 <rcvr_spi>
	do
		res = rcvr_spi();
 8002230:	f7ff ffca 	bl	80021c8 <rcvr_spi>
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d004      	beq.n	8002248 <wait_ready+0x28>
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <wait_ready+0x34>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f3      	bne.n	8002230 <wait_ready+0x10>

	return res;
 8002248:	79fb      	ldrb	r3, [r7, #7]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000042d 	.word	0x2000042d

08002258 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 800225e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002262:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8002264:	f7ff ff8f 	bl	8002186 <DESELECT>

	for (i = 0; i < 10; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e005      	b.n	800227a <power_on+0x22>
		xmit_spi(0xFF);
 800226e:	20ff      	movs	r0, #255	; 0xff
 8002270:	f7ff ff90 	bl	8002194 <xmit_spi>
	for (i = 0; i < 10; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d9f6      	bls.n	800226e <power_on+0x16>

	SELECT();
 8002280:	f7ff ff7a 	bl	8002178 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8002298:	2395      	movs	r3, #149	; 0x95
 800229a:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e00b      	b.n	80022ba <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	f107 0210 	add.w	r2, r7, #16
 80022a8:	4413      	add	r3, r2
 80022aa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff70 	bl	8002194 <xmit_spi>
	for (i = 0; i < 6; i++)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d9f0      	bls.n	80022a2 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80022c0:	e002      	b.n	80022c8 <power_on+0x70>
		Count--;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80022c8:	f7ff ff7e 	bl	80021c8 <rcvr_spi>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d002      	beq.n	80022d8 <power_on+0x80>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f4      	bne.n	80022c2 <power_on+0x6a>

	DESELECT();
 80022d8:	f7ff ff55 	bl	8002186 <DESELECT>
	xmit_spi(0XFF);
 80022dc:	20ff      	movs	r0, #255	; 0xff
 80022de:	f7ff ff59 	bl	8002194 <xmit_spi>

	PowerFlag = 1;
 80022e2:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <power_on+0x98>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000042f 	.word	0x2000042f

080022f4 <power_off>:

static
void power_off(void) {
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <power_off+0x14>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	2000042f 	.word	0x2000042f

0800230c <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <rcvr_datablock+0x68>)
 8002318:	220a      	movs	r2, #10
 800231a:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 800231c:	f7ff ff54 	bl	80021c8 <rcvr_spi>
 8002320:	4603      	mov	r3, r0
 8002322:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	d104      	bne.n	8002334 <rcvr_datablock+0x28>
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <rcvr_datablock+0x68>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f3      	bne.n	800231c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2bfe      	cmp	r3, #254	; 0xfe
 8002338:	d001      	beq.n	800233e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800233a:	2300      	movs	r3, #0
 800233c:	e016      	b.n	800236c <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5d 	bl	8002204 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff57 	bl	8002204 <rcvr_spi_m>
	} while (btr -= 2);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3b02      	subs	r3, #2
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ed      	bne.n	800233e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8002362:	f7ff ff31 	bl	80021c8 <rcvr_spi>
	rcvr_spi();
 8002366:	f7ff ff2f 	bl	80021c8 <rcvr_spi>

	return TRUE; /* Return with success */
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	2000042c 	.word	0x2000042c

08002378 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8002388:	f7ff ff4a 	bl	8002220 <wait_ready>
 800238c:	4603      	mov	r3, r0
 800238e:	2bff      	cmp	r3, #255	; 0xff
 8002390:	d001      	beq.n	8002396 <xmit_datablock+0x1e>
		return FALSE;
 8002392:	2300      	movs	r3, #0
 8002394:	e040      	b.n	8002418 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fefb 	bl	8002194 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	2bfd      	cmp	r3, #253	; 0xfd
 80023a2:	d031      	beq.n	8002408 <xmit_datablock+0x90>
		wc = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff feef 	bl	8002194 <xmit_spi>
			xmit_spi(*buff++);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fee8 	bl	8002194 <xmit_spi>
		} while (--wc);
 80023c4:	7bbb      	ldrb	r3, [r7, #14]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	73bb      	strb	r3, [r7, #14]
 80023ca:	7bbb      	ldrb	r3, [r7, #14]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1eb      	bne.n	80023a8 <xmit_datablock+0x30>

		rcvr_spi();
 80023d0:	f7ff fefa 	bl	80021c8 <rcvr_spi>
		rcvr_spi();
 80023d4:	f7ff fef8 	bl	80021c8 <rcvr_spi>

		while (i <= 64) {
 80023d8:	e00b      	b.n	80023f2 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 80023da:	f7ff fef5 	bl	80021c8 <rcvr_spi>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d006      	beq.n	80023fa <xmit_datablock+0x82>
				break;
			i++;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	3301      	adds	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d9f0      	bls.n	80023da <xmit_datablock+0x62>
 80023f8:	e000      	b.n	80023fc <xmit_datablock+0x84>
				break;
 80023fa:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 80023fc:	bf00      	nop
 80023fe:	f7ff fee3 	bl	80021c8 <rcvr_spi>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0fa      	beq.n	80023fe <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b05      	cmp	r3, #5
 8002410:	d101      	bne.n	8002416 <xmit_datablock+0x9e>
		return TRUE;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xmit_datablock+0xa0>
	else
		return FALSE;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800242c:	f7ff fef8 	bl	8002220 <wait_ready>
 8002430:	4603      	mov	r3, r0
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d001      	beq.n	800243a <send_cmd+0x1a>
		return 0xFF;
 8002436:	23ff      	movs	r3, #255	; 0xff
 8002438:	e040      	b.n	80024bc <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fea9 	bl	8002194 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	0e1b      	lsrs	r3, r3, #24
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fea3 	bl	8002194 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fe9d 	bl	8002194 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fe97 	bl	8002194 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe92 	bl	8002194 <xmit_spi>
	n = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b40      	cmp	r3, #64	; 0x40
 8002478:	d101      	bne.n	800247e <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800247a:	2395      	movs	r3, #149	; 0x95
 800247c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2b48      	cmp	r3, #72	; 0x48
 8002482:	d101      	bne.n	8002488 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8002484:	2387      	movs	r3, #135	; 0x87
 8002486:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fe82 	bl	8002194 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b4c      	cmp	r3, #76	; 0x4c
 8002494:	d101      	bne.n	800249a <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8002496:	f7ff fe97 	bl	80021c8 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 800249a:	230a      	movs	r3, #10
 800249c:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 800249e:	f7ff fe93 	bl	80021c8 <rcvr_spi>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80024a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da05      	bge.n	80024ba <send_cmd+0x9a>
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <send_cmd+0x7e>

	return res; /* Return with the response value */
 80024ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d5      	b.n	8002684 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80024d8:	4b6c      	ldr	r3, [pc, #432]	; (800268c <disk_initialize+0x1c8>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80024e6:	4b69      	ldr	r3, [pc, #420]	; (800268c <disk_initialize+0x1c8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	e0ca      	b.n	8002684 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80024ee:	f7ff feb3 	bl	8002258 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80024f2:	f7ff fe41 	bl	8002178 <SELECT>
	ty = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80024fa:	2100      	movs	r1, #0
 80024fc:	2040      	movs	r0, #64	; 0x40
 80024fe:	f7ff ff8f 	bl	8002420 <send_cmd>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	f040 80a5 	bne.w	8002654 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <disk_initialize+0x1cc>)
 800250c:	2264      	movs	r2, #100	; 0x64
 800250e:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8002510:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002514:	2048      	movs	r0, #72	; 0x48
 8002516:	f7ff ff83 	bl	8002420 <send_cmd>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d158      	bne.n	80025d2 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e00c      	b.n	8002540 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8002526:	7bfc      	ldrb	r4, [r7, #15]
 8002528:	f7ff fe4e 	bl	80021c8 <rcvr_spi>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	4423      	add	r3, r4
 8002536:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	3301      	adds	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d9ef      	bls.n	8002526 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8002546:	7abb      	ldrb	r3, [r7, #10]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 8083 	bne.w	8002654 <disk_initialize+0x190>
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	2baa      	cmp	r3, #170	; 0xaa
 8002552:	d17f      	bne.n	8002654 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8002554:	2100      	movs	r1, #0
 8002556:	2077      	movs	r0, #119	; 0x77
 8002558:	f7ff ff62 	bl	8002420 <send_cmd>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d807      	bhi.n	8002572 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8002562:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002566:	2069      	movs	r0, #105	; 0x69
 8002568:	f7ff ff5a 	bl	8002420 <send_cmd>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <disk_initialize+0x1cc>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1eb      	bne.n	8002554 <disk_initialize+0x90>
 800257c:	e000      	b.n	8002580 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800257e:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <disk_initialize+0x1cc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d064      	beq.n	8002654 <disk_initialize+0x190>
 800258a:	2100      	movs	r1, #0
 800258c:	207a      	movs	r0, #122	; 0x7a
 800258e:	f7ff ff47 	bl	8002420 <send_cmd>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d15d      	bne.n	8002654 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e00c      	b.n	80025b8 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800259e:	7bfc      	ldrb	r4, [r7, #15]
 80025a0:	f7ff fe12 	bl	80021c8 <rcvr_spi>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4423      	add	r3, r4
 80025ae:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3301      	adds	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d9ef      	bls.n	800259e <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80025be:	7a3b      	ldrb	r3, [r7, #8]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <disk_initialize+0x108>
 80025c8:	2306      	movs	r3, #6
 80025ca:	e000      	b.n	80025ce <disk_initialize+0x10a>
 80025cc:	2302      	movs	r3, #2
 80025ce:	73bb      	strb	r3, [r7, #14]
 80025d0:	e040      	b.n	8002654 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80025d2:	2100      	movs	r1, #0
 80025d4:	2077      	movs	r0, #119	; 0x77
 80025d6:	f7ff ff23 	bl	8002420 <send_cmd>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d808      	bhi.n	80025f2 <disk_initialize+0x12e>
 80025e0:	2100      	movs	r1, #0
 80025e2:	2069      	movs	r0, #105	; 0x69
 80025e4:	f7ff ff1c 	bl	8002420 <send_cmd>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d801      	bhi.n	80025f2 <disk_initialize+0x12e>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e000      	b.n	80025f4 <disk_initialize+0x130>
 80025f2:	2301      	movs	r3, #1
 80025f4:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80025f6:	7bbb      	ldrb	r3, [r7, #14]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d10e      	bne.n	800261a <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80025fc:	2100      	movs	r1, #0
 80025fe:	2077      	movs	r0, #119	; 0x77
 8002600:	f7ff ff0e 	bl	8002420 <send_cmd>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d80e      	bhi.n	8002628 <disk_initialize+0x164>
 800260a:	2100      	movs	r1, #0
 800260c:	2069      	movs	r0, #105	; 0x69
 800260e:	f7ff ff07 	bl	8002420 <send_cmd>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <disk_initialize+0x164>
						break; /* ACMD41 */
 8002618:	e00d      	b.n	8002636 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800261a:	2100      	movs	r1, #0
 800261c:	2041      	movs	r0, #65	; 0x41
 800261e:	f7ff feff 	bl	8002420 <send_cmd>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <disk_initialize+0x1cc>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e1      	bne.n	80025f6 <disk_initialize+0x132>
 8002632:	e000      	b.n	8002636 <disk_initialize+0x172>
						break; /* CMD1 */
 8002634:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <disk_initialize+0x1cc>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <disk_initialize+0x18c>
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	2050      	movs	r0, #80	; 0x50
 8002646:	f7ff feeb 	bl	8002420 <send_cmd>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <disk_initialize+0x190>
				ty = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <disk_initialize+0x1d0>)
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800265a:	f7ff fd94 	bl	8002186 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800265e:	f7ff fdb3 	bl	80021c8 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8002662:	7bbb      	ldrb	r3, [r7, #14]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <disk_initialize+0x1c8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <disk_initialize+0x1c8>)
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e001      	b.n	800267e <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800267a:	f7ff fe3b 	bl	80022f4 <power_off>

	return Stat;
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <disk_initialize+0x1c8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}
 800268c:	20000000 	.word	0x20000000
 8002690:	2000042c 	.word	0x2000042c
 8002694:	2000042e 	.word	0x2000042e

08002698 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80026a8:	2301      	movs	r3, #1
 80026aa:	e002      	b.n	80026b2 <disk_status+0x1a>
	return Stat;
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <disk_status+0x28>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <disk_read+0x1c>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <disk_read+0x20>
		return RES_PARERR;
 80026e0:	2304      	movs	r3, #4
 80026e2:	e051      	b.n	8002788 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <disk_read+0xcc>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <disk_read+0x32>
		return RES_NOTRDY;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e048      	b.n	8002788 <disk_read+0xc4>

	if (!(CardType & 4))
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <disk_read+0xd0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	025b      	lsls	r3, r3, #9
 8002706:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8002708:	f7ff fd36 	bl	8002178 <SELECT>

	if (count == 1) { /* Single block read */
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d111      	bne.n	8002736 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	2051      	movs	r0, #81	; 0x51
 8002716:	f7ff fe83 	bl	8002420 <send_cmd>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d129      	bne.n	8002774 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8002720:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002724:	68b8      	ldr	r0, [r7, #8]
 8002726:	f7ff fdf1 	bl	800230c <rcvr_datablock>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <disk_read+0xb0>
			count = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	e01e      	b.n	8002774 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	2052      	movs	r0, #82	; 0x52
 800273a:	f7ff fe71 	bl	8002420 <send_cmd>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d117      	bne.n	8002774 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8002744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002748:	68b8      	ldr	r0, [r7, #8]
 800274a:	f7ff fddf 	bl	800230c <rcvr_datablock>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <disk_read+0xa6>
					break;
				buff += 512;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800275a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ed      	bne.n	8002744 <disk_read+0x80>
 8002768:	e000      	b.n	800276c <disk_read+0xa8>
					break;
 800276a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800276c:	2100      	movs	r1, #0
 800276e:	204c      	movs	r0, #76	; 0x4c
 8002770:	f7ff fe56 	bl	8002420 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8002774:	f7ff fd07 	bl	8002186 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8002778:	f7ff fd26 	bl	80021c8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000000 	.word	0x20000000
 8002794:	2000042e 	.word	0x2000042e

08002798 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d102      	bne.n	80027b4 <disk_write+0x1c>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <disk_write+0x20>
		return RES_PARERR;
 80027b4:	2304      	movs	r3, #4
 80027b6:	e06b      	b.n	8002890 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <disk_write+0x100>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <disk_write+0x32>
		return RES_NOTRDY;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e062      	b.n	8002890 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <disk_write+0x100>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <disk_write+0x44>
		return RES_WRPRT;
 80027d8:	2302      	movs	r3, #2
 80027da:	e059      	b.n	8002890 <disk_write+0xf8>

	if (!(CardType & 4))
 80027dc:	4b2f      	ldr	r3, [pc, #188]	; (800289c <disk_write+0x104>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80027ee:	f7ff fcc3 	bl	8002178 <SELECT>

	if (count == 1) { /* Single block write */
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d110      	bne.n	800281a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	2058      	movs	r0, #88	; 0x58
 80027fc:	f7ff fe10 	bl	8002420 <send_cmd>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d13a      	bne.n	800287c <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8002806:	21fe      	movs	r1, #254	; 0xfe
 8002808:	68b8      	ldr	r0, [r7, #8]
 800280a:	f7ff fdb5 	bl	8002378 <xmit_datablock>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d033      	beq.n	800287c <disk_write+0xe4>
			count = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	e030      	b.n	800287c <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <disk_write+0x104>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8002826:	2100      	movs	r1, #0
 8002828:	2077      	movs	r0, #119	; 0x77
 800282a:	f7ff fdf9 	bl	8002420 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	2057      	movs	r0, #87	; 0x57
 8002832:	f7ff fdf5 	bl	8002420 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	2059      	movs	r0, #89	; 0x59
 800283a:	f7ff fdf1 	bl	8002420 <send_cmd>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d11b      	bne.n	800287c <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8002844:	21fc      	movs	r1, #252	; 0xfc
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f7ff fd96 	bl	8002378 <xmit_datablock>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <disk_write+0xd0>
					break;
				buff += 512;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002858:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1ee      	bne.n	8002844 <disk_write+0xac>
 8002866:	e000      	b.n	800286a <disk_write+0xd2>
					break;
 8002868:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800286a:	21fd      	movs	r1, #253	; 0xfd
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fd83 	bl	8002378 <xmit_datablock>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <disk_write+0xe4>
				count = 1;
 8002878:	2301      	movs	r3, #1
 800287a:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 800287c:	f7ff fc83 	bl	8002186 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8002880:	f7ff fca2 	bl	80021c8 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000000 	.word	0x20000000
 800289c:	2000042e 	.word	0x2000042e

080028a0 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <disk_timerproc+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
	if (n)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <disk_timerproc+0x1e>
		Timer1 = --n;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	71fb      	strb	r3, [r7, #7]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <disk_timerproc+0x44>)
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <disk_timerproc+0x48>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
	if (n)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <disk_timerproc+0x36>
		Timer2 = --n;
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	4a05      	ldr	r2, [pc, #20]	; (80028e8 <disk_timerproc+0x48>)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	7013      	strb	r3, [r2, #0]

}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000042c 	.word	0x2000042c
 80028e8:	2000042d 	.word	0x2000042d

080028ec <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <sdcard_systick_timerproc+0x2c>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <sdcard_systick_timerproc+0x2c>)
 80028fc:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <sdcard_systick_timerproc+0x2c>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b09      	cmp	r3, #9
 8002906:	d904      	bls.n	8002912 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <sdcard_systick_timerproc+0x2c>)
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800290e:	f7ff ffc7 	bl	80028a0 <disk_timerproc>
	}
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200007c0 	.word	0x200007c0

0800291c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3301      	adds	r3, #1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	b21a      	sxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b21b      	sxth	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	b21b      	sxth	r3, r3
 800293c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800293e:	89fb      	ldrh	r3, [r7, #14]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3303      	adds	r3, #3
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	3202      	adds	r2, #2
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	3201      	adds	r2, #1
 8002972:	7812      	ldrb	r2, [r2, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
	return rv;
 8002984:	68fb      	ldr	r3, [r7, #12]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002992:	b480      	push	{r7}
 8002994:	b089      	sub	sp, #36	; 0x24
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	61fa      	str	r2, [r7, #28]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	61ba      	str	r2, [r7, #24]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	1acb      	subs	r3, r1, r3
 80029be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <mem_cmp+0x40>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0eb      	beq.n	80029aa <mem_cmp+0x18>

	return r;
 80029d2:	697b      	ldr	r3, [r7, #20]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	78db      	ldrb	r3, [r3, #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02c      	beq.n	8002a4e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7858      	ldrb	r0, [r3, #1]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a02:	2301      	movs	r3, #1
 8002a04:	f7ff fec8 	bl	8002798 <disk_write>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	1ad2      	subs	r2, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d213      	bcs.n	8002a4e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d10f      	bne.n	8002a4e <sync_window+0x6e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7858      	ldrb	r0, [r3, #1]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	441a      	add	r2, r3
 8002a42:	2301      	movs	r3, #1
 8002a44:	f7ff fea8 	bl	8002798 <disk_write>
 8002a48:	e001      	b.n	8002a4e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d01b      	beq.n	8002aa8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ffb5 	bl	80029e0 <sync_window>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d113      	bne.n	8002aa8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7858      	ldrb	r0, [r3, #1]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	f7ff fe19 	bl	80026c4 <disk_read>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b089      	sub	sp, #36	; 0x24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <get_ldnumber+0x22>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	e02d      	b.n	8002b30 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d902      	bls.n	8002aea <get_ldnumber+0x38>
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b3a      	cmp	r3, #58	; 0x3a
 8002ae8:	d1f4      	bne.n	8002ad4 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b3a      	cmp	r3, #58	; 0x3a
 8002aee:	d11c      	bne.n	8002b2a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b2f      	cmp	r3, #47	; 0x2f
 8002afa:	d90c      	bls.n	8002b16 <get_ldnumber+0x64>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b39      	cmp	r3, #57	; 0x39
 8002b02:	d808      	bhi.n	8002b16 <get_ldnumber+0x64>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	3302      	adds	r3, #2
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d103      	bne.n	8002b16 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	3b30      	subs	r3, #48	; 0x30
 8002b14:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	dc04      	bgt.n	8002b26 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	e002      	b.n	8002b30 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002b2e:	697b      	ldr	r3, [r7, #20]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	70da      	strb	r2, [r3, #3]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff7e 	bl	8002a58 <move_window>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <check_fs+0x2a>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e038      	b.n	8002bd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3330      	adds	r3, #48	; 0x30
 8002b6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fed4 	bl	800291c <ld_word>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <check_fs+0x48>
 8002b80:	2303      	movs	r3, #3
 8002b82:	e029      	b.n	8002bd8 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8a:	2be9      	cmp	r3, #233	; 0xe9
 8002b8c:	d009      	beq.n	8002ba2 <check_fs+0x66>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b94:	2beb      	cmp	r3, #235	; 0xeb
 8002b96:	d004      	beq.n	8002ba2 <check_fs+0x66>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b9e:	2be8      	cmp	r3, #232	; 0xe8
 8002ba0:	d119      	bne.n	8002bd6 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3330      	adds	r3, #48	; 0x30
 8002ba6:	3336      	adds	r3, #54	; 0x36
 8002ba8:	2203      	movs	r2, #3
 8002baa:	490d      	ldr	r1, [pc, #52]	; (8002be0 <check_fs+0xa4>)
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fef0 	bl	8002992 <mem_cmp>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <check_fs+0x80>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e00d      	b.n	8002bd8 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3330      	adds	r3, #48	; 0x30
 8002bc0:	3352      	adds	r3, #82	; 0x52
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	4907      	ldr	r1, [pc, #28]	; (8002be4 <check_fs+0xa8>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fee3 	bl	8002992 <mem_cmp>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <check_fs+0x9a>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8002bd6:	2302      	movs	r3, #2
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	08008c14 	.word	0x08008c14
 8002be4:	08008c18 	.word	0x08008c18

08002be8 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b096      	sub	sp, #88	; 0x58
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff ff58 	bl	8002ab2 <get_ldnumber>
 8002c02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da01      	bge.n	8002c0e <find_volume+0x26>
 8002c0a:	230b      	movs	r3, #11
 8002c0c:	e238      	b.n	8003080 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002c0e:	4aa8      	ldr	r2, [pc, #672]	; (8002eb0 <find_volume+0x2c8>)
 8002c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <find_volume+0x3a>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	e22e      	b.n	8003080 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01a      	beq.n	8002c6e <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	785b      	ldrb	r3, [r3, #1]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fd2b 	bl	8002698 <disk_status>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <find_volume+0x82>
 8002c5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8002c66:	230a      	movs	r3, #10
 8002c68:	e20a      	b.n	8003080 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e208      	b.n	8003080 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fc1f 	bl	80024c4 <disk_initialize>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1f1      	b.n	8003080 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <find_volume+0xca>
 8002ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8002cae:	230a      	movs	r3, #10
 8002cb0:	e1e6      	b.n	8003080 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8002cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cba:	f7ff ff3f 	bl	8002b3c <check_fs>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d14b      	bne.n	8002d64 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd0:	e01f      	b.n	8002d12 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8002ce0:	4413      	add	r3, r2
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <find_volume+0x114>
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe2a 	bl	800294c <ld_dword>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	e000      	b.n	8002cfe <find_volume+0x116>
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d06:	440b      	add	r3, r1
 8002d08:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0e:	3301      	adds	r3, #1
 8002d10:	643b      	str	r3, [r7, #64]	; 0x40
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d9dc      	bls.n	8002cd2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <find_volume+0x140>
 8002d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d24:	3b01      	subs	r3, #1
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8002d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d30:	4413      	add	r3, r2
 8002d32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <find_volume+0x162>
 8002d3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d42:	f7ff fefb 	bl	8002b3c <check_fs>
 8002d46:	4603      	mov	r3, r0
 8002d48:	e000      	b.n	8002d4c <find_volume+0x164>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d905      	bls.n	8002d64 <find_volume+0x17c>
 8002d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d9e1      	bls.n	8002d28 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002d64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d101      	bne.n	8002d70 <find_volume+0x188>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e187      	b.n	8003080 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d901      	bls.n	8002d7c <find_volume+0x194>
 8002d78:	230d      	movs	r3, #13
 8002d7a:	e181      	b.n	8003080 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7e:	3330      	adds	r3, #48	; 0x30
 8002d80:	330b      	adds	r3, #11
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fdca 	bl	800291c <ld_word>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8e:	d001      	beq.n	8002d94 <find_volume+0x1ac>
 8002d90:	230d      	movs	r3, #13
 8002d92:	e175      	b.n	8003080 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	3330      	adds	r3, #48	; 0x30
 8002d98:	3316      	adds	r3, #22
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fdbe 	bl	800291c <ld_word>
 8002da0:	4603      	mov	r3, r0
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <find_volume+0x1d0>
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	3330      	adds	r3, #48	; 0x30
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fdcb 	bl	800294c <ld_dword>
 8002db6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dbc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	789b      	ldrb	r3, [r3, #2]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d005      	beq.n	8002ddc <find_volume+0x1f4>
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd2:	789b      	ldrb	r3, [r3, #2]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d001      	beq.n	8002ddc <find_volume+0x1f4>
 8002dd8:	230d      	movs	r3, #13
 8002dda:	e151      	b.n	8003080 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	895b      	ldrh	r3, [r3, #10]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <find_volume+0x228>
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	895b      	ldrh	r3, [r3, #10]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	895b      	ldrh	r3, [r3, #10]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <find_volume+0x22c>
 8002e10:	230d      	movs	r3, #13
 8002e12:	e135      	b.n	8003080 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	3330      	adds	r3, #48	; 0x30
 8002e18:	3311      	adds	r3, #17
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fd7e 	bl	800291c <ld_word>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	891b      	ldrh	r3, [r3, #8]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <find_volume+0x252>
 8002e36:	230d      	movs	r3, #13
 8002e38:	e122      	b.n	8003080 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	3330      	adds	r3, #48	; 0x30
 8002e3e:	3313      	adds	r3, #19
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd6b 	bl	800291c <ld_word>
 8002e46:	4603      	mov	r3, r0
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d106      	bne.n	8002e5e <find_volume+0x276>
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	3330      	adds	r3, #48	; 0x30
 8002e54:	3320      	adds	r3, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd78 	bl	800294c <ld_dword>
 8002e5c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	3330      	adds	r3, #48	; 0x30
 8002e62:	330e      	adds	r3, #14
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fd59 	bl	800291c <ld_word>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <find_volume+0x290>
 8002e74:	230d      	movs	r3, #13
 8002e76:	e103      	b.n	8003080 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002e78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	4413      	add	r3, r2
 8002e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e80:	8912      	ldrh	r2, [r2, #8]
 8002e82:	0912      	lsrs	r2, r2, #4
 8002e84:	b292      	uxth	r2, r2
 8002e86:	4413      	add	r3, r2
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d201      	bcs.n	8002e96 <find_volume+0x2ae>
 8002e92:	230d      	movs	r3, #13
 8002e94:	e0f4      	b.n	8003080 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e9e:	8952      	ldrh	r2, [r2, #10]
 8002ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <find_volume+0x2cc>
 8002eac:	230d      	movs	r3, #13
 8002eae:	e0e7      	b.n	8003080 <find_volume+0x498>
 8002eb0:	20000430 	.word	0x20000430
		fmt = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	4a72      	ldr	r2, [pc, #456]	; (8003088 <find_volume+0x4a0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <find_volume+0x2e0>
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <find_volume+0x2f0>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	f640 72f5 	movw	r2, #4085	; 0xff5
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <find_volume+0x300>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <find_volume+0x30c>
 8002ef0:	230d      	movs	r3, #13
 8002ef2:	e0c5      	b.n	8003080 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f06:	441a      	add	r2, r3
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002f0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	441a      	add	r2, r3
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8002f16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d11e      	bne.n	8002f5c <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	3330      	adds	r3, #48	; 0x30
 8002f22:	332a      	adds	r3, #42	; 0x2a
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fcf9 	bl	800291c <ld_word>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <find_volume+0x34c>
 8002f30:	230d      	movs	r3, #13
 8002f32:	e0a5      	b.n	8003080 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	891b      	ldrh	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <find_volume+0x358>
 8002f3c:	230d      	movs	r3, #13
 8002f3e:	e09f      	b.n	8003080 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f42:	3330      	adds	r3, #48	; 0x30
 8002f44:	332c      	adds	r3, #44	; 0x2c
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fd00 	bl	800294c <ld_dword>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5a:	e01f      	b.n	8002f9c <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	891b      	ldrh	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <find_volume+0x380>
 8002f64:	230d      	movs	r3, #13
 8002f66:	e08b      	b.n	8003080 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6e:	441a      	add	r2, r3
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d103      	bne.n	8002f84 <find_volume+0x39c>
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	e00a      	b.n	8002f9a <find_volume+0x3b2>
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	085a      	lsrs	r2, r3, #1
 8002f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8002f9a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fa6:	0a5b      	lsrs	r3, r3, #9
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d201      	bcs.n	8002fb0 <find_volume+0x3c8>
 8002fac:	230d      	movs	r3, #13
 8002fae:	e067      	b.n	8003080 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb6:	611a      	str	r2, [r3, #16]
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002fc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d149      	bne.n	8003062 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	3330      	adds	r3, #48	; 0x30
 8002fd2:	3330      	adds	r3, #48	; 0x30
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fca1 	bl	800291c <ld_word>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d140      	bne.n	8003062 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fe8:	f7ff fd36 	bl	8002a58 <move_window>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d137      	bne.n	8003062 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8002ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	3330      	adds	r3, #48	; 0x30
 8002ffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fc8b 	bl	800291c <ld_word>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800300e:	429a      	cmp	r2, r3
 8003010:	d127      	bne.n	8003062 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	3330      	adds	r3, #48	; 0x30
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc98 	bl	800294c <ld_dword>
 800301c:	4602      	mov	r2, r0
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <find_volume+0x4a4>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d11e      	bne.n	8003062 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	3330      	adds	r3, #48	; 0x30
 8003028:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fc8d 	bl	800294c <ld_dword>
 8003032:	4602      	mov	r2, r0
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <find_volume+0x4a8>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d113      	bne.n	8003062 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	3330      	adds	r3, #48	; 0x30
 800303e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fc82 	bl	800294c <ld_dword>
 8003048:	4602      	mov	r2, r0
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800304e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003050:	3330      	adds	r3, #48	; 0x30
 8003052:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fc78 	bl	800294c <ld_dword>
 800305c:	4602      	mov	r2, r0
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003068:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <find_volume+0x4ac>)
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	3301      	adds	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <find_volume+0x4ac>)
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <find_volume+0x4ac>)
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3758      	adds	r7, #88	; 0x58
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0ffffff5 	.word	0x0ffffff5
 800308c:	41615252 	.word	0x41615252
 8003090:	61417272 	.word	0x61417272
 8003094:	20000434 	.word	0x20000434

08003098 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fcff 	bl	8002ab2 <get_ldnumber>
 80030b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da01      	bge.n	80030c0 <f_mount+0x28>
 80030bc:	230b      	movs	r3, #11
 80030be:	e025      	b.n	800310c <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <f_mount+0x7c>)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <f_mount+0x7c>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <f_mount+0x5e>
 80030f2:	2300      	movs	r3, #0
 80030f4:	e00a      	b.n	800310c <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80030f6:	f107 010c 	add.w	r1, r7, #12
 80030fa:	f107 0308 	add.w	r3, r7, #8
 80030fe:	2200      	movs	r2, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd71 	bl	8002be8 <find_volume>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000430 	.word	0x20000430

08003118 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800311e:	f000 fd8d 	bl	8003c3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003122:	f000 f869 	bl	80031f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003126:	f000 fa9f 	bl	8003668 <MX_GPIO_Init>
	MX_RTC_Init();
 800312a:	f000 f8e5 	bl	80032f8 <MX_RTC_Init>
	MX_SPI1_Init();
 800312e:	f000 f93d 	bl	80033ac <MX_SPI1_Init>
	MX_TIM2_Init();
 8003132:	f000 f971 	bl	8003418 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003136:	f000 f9fb 	bl	8003530 <MX_TIM3_Init>
	MX_TIM4_Init();
 800313a:	f000 fa47 	bl	80035cc <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	RGB_Init();
 800313e:	f7fe fa91 	bl	8001664 <RGB_Init>
	LCD_Init();
 8003142:	f7fd feb1 	bl	8000ea8 <LCD_Init>
	THS_Init();
 8003146:	f7fe fe19 	bl	8001d7c <THS_Init>
	SD_Init();
 800314a:	f7fe fd45 	bl	8001bd8 <SD_Init>

	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 800314e:	4826      	ldr	r0, [pc, #152]	; (80031e8 <main+0xd0>)
 8003150:	f002 fd9d 	bl	8005c8e <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003154:	2100      	movs	r1, #0
 8003156:	4824      	ldr	r0, [pc, #144]	; (80031e8 <main+0xd0>)
 8003158:	f002 fdf2 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800315c:	2104      	movs	r1, #4
 800315e:	4822      	ldr	r0, [pc, #136]	; (80031e8 <main+0xd0>)
 8003160:	f002 fdee 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003164:	2108      	movs	r1, #8
 8003166:	4820      	ldr	r0, [pc, #128]	; (80031e8 <main+0xd0>)
 8003168:	f002 fdea 	bl	8005d40 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 800316c:	481f      	ldr	r0, [pc, #124]	; (80031ec <main+0xd4>)
 800316e:	f002 fd8e 	bl	8005c8e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8003172:	481f      	ldr	r0, [pc, #124]	; (80031f0 <main+0xd8>)
 8003174:	f002 fd67 	bl	8005c46 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	LCD_ClearScreen();
 8003178:	f7fd ff9e 	bl	80010b8 <LCD_ClearScreen>
	while (1) {

		char date[9], time[9];
		float data[2];

		SD_RefreshDateTime();
 800317c:	f7fe fd3c 	bl	8001bf8 <SD_RefreshDateTime>
		SD_GetDateTime(date, time);
 8003180:	f107 0208 	add.w	r2, r7, #8
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fdb0 	bl	8001cf0 <SD_GetDateTime>

		uint8_t success = THS_ReadData(THS_In, data);
 8003190:	463b      	mov	r3, r7
 8003192:	4619      	mov	r1, r3
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe ff19 	bl	8001fcc <THS_ReadData>
 800319a:	4603      	mov	r3, r0
 800319c:	77fb      	strb	r3, [r7, #31]


		if (success) {
 800319e:	7ffb      	ldrb	r3, [r7, #31]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <main+0x9a>
			LCD_PrintTempInfo(data, data);
 80031a4:	463a      	mov	r2, r7
 80031a6:	463b      	mov	r3, r7
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f82e 	bl	800120c <LCD_PrintTempInfo>
 80031b0:	e002      	b.n	80031b8 <main+0xa0>
		} else {
			LCD_PrintCentered("ERROR");
 80031b2:	4810      	ldr	r0, [pc, #64]	; (80031f4 <main+0xdc>)
 80031b4:	f7fe f800 	bl	80011b8 <LCD_PrintCentered>
		}

		LCD_SetCursor(0, 0);
 80031b8:	2100      	movs	r1, #0
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fd ff96 	bl	80010ec <LCD_SetCursor>
		LCD_PrintCentered(date);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fff7 	bl	80011b8 <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 80031ca:	2103      	movs	r1, #3
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fd ff8d 	bl	80010ec <LCD_SetCursor>
		LCD_PrintCentered(time);
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd ffee 	bl	80011b8 <LCD_PrintCentered>

		HAL_Delay(1000);
 80031dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031e0:	f000 fd9e 	bl	8003d20 <HAL_Delay>
	while (1) {
 80031e4:	e7ca      	b.n	800317c <main+0x64>
 80031e6:	bf00      	nop
 80031e8:	200008d4 	.word	0x200008d4
 80031ec:	2000081c 	.word	0x2000081c
 80031f0:	200007c4 	.word	0x200007c4
 80031f4:	08008c20 	.word	0x08008c20

080031f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b098      	sub	sp, #96	; 0x60
 80031fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80031fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003202:	2230      	movs	r2, #48	; 0x30
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fc58 	bl	8006abc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800320c:	f107 031c 	add.w	r3, r7, #28
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <SystemClock_Config+0xf8>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <SystemClock_Config+0xf8>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <SystemClock_Config+0xf8>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <SystemClock_Config+0xfc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a29      	ldr	r2, [pc, #164]	; (80032f4 <SystemClock_Config+0xfc>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <SystemClock_Config+0xfc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8003262:	2309      	movs	r3, #9
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800326c:	2301      	movs	r3, #1
 800326e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003270:	2302      	movs	r3, #2
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003278:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800327a:	2304      	movs	r3, #4
 800327c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 800327e:	2348      	movs	r3, #72	; 0x48
 8003280:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003282:	2302      	movs	r3, #2
 8003284:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8003286:	2303      	movs	r3, #3
 8003288:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800328a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800328e:	4618      	mov	r0, r3
 8003290:	f001 f878 	bl	8004384 <HAL_RCC_OscConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0xa6>
		Error_Handler();
 800329a:	f000 faf7 	bl	800388c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800329e:	230f      	movs	r3, #15
 80032a0:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a2:	2302      	movs	r3, #2
 80032a4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 fad2 	bl	8004864 <HAL_RCC_ClockConfig>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <SystemClock_Config+0xd2>
		Error_Handler();
 80032c6:	f000 fae1 	bl	800388c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032ca:	2302      	movs	r3, #2
 80032cc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d2:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc81 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <SystemClock_Config+0xf0>
		Error_Handler();
 80032e4:	f000 fad2 	bl	800388c <Error_Handler>
	}
}
 80032e8:	bf00      	nop
 80032ea:	3760      	adds	r7, #96	; 0x60
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000

080032f8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <MX_RTC_Init+0xac>)
 8003312:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <MX_RTC_Init+0xb0>)
 8003314:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003316:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <MX_RTC_Init+0xac>)
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <MX_RTC_Init+0xac>)
 800331e:	227d      	movs	r2, #125	; 0x7d
 8003320:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 320;
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <MX_RTC_Init+0xac>)
 8003324:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003328:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <MX_RTC_Init+0xac>)
 800332c:	2200      	movs	r2, #0
 800332e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <MX_RTC_Init+0xac>)
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <MX_RTC_Init+0xac>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800333c:	4819      	ldr	r0, [pc, #100]	; (80033a4 <MX_RTC_Init+0xac>)
 800333e:	f001 fd31 	bl	8004da4 <HAL_RTC_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_RTC_Init+0x54>
		Error_Handler();
 8003348:	f000 faa0 	bl	800388c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x15;
 800334c:	2315      	movs	r3, #21
 800334e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8003350:	2300      	movs	r3, #0
 8003352:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8003354:	2300      	movs	r3, #0
 8003356:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	2201      	movs	r2, #1
 8003364:	4619      	mov	r1, r3
 8003366:	480f      	ldr	r0, [pc, #60]	; (80033a4 <MX_RTC_Init+0xac>)
 8003368:	f001 fdad 	bl	8004ec6 <HAL_RTC_SetTime>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_RTC_Init+0x7e>
		Error_Handler();
 8003372:	f000 fa8b 	bl	800388c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003376:	2301      	movs	r3, #1
 8003378:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_MARCH;
 800337a:	2303      	movs	r3, #3
 800337c:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x30;
 800337e:	2330      	movs	r3, #48	; 0x30
 8003380:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8003382:	2320      	movs	r3, #32
 8003384:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8003386:	463b      	mov	r3, r7
 8003388:	2201      	movs	r2, #1
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <MX_RTC_Init+0xac>)
 800338e:	f001 feb5 	bl	80050fc <HAL_RTC_SetDate>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_RTC_Init+0xa4>
		Error_Handler();
 8003398:	f000 fa78 	bl	800388c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800339c:	bf00      	nop
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000085c 	.word	0x2000085c
 80033a8:	40002800 	.word	0x40002800

080033ac <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <MX_SPI1_Init+0x64>)
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <MX_SPI1_Init+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <MX_SPI1_Init+0x64>)
 80033b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <MX_SPI1_Init+0x64>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033c4:	4b12      	ldr	r3, [pc, #72]	; (8003410 <MX_SPI1_Init+0x64>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <MX_SPI1_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <MX_SPI1_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_SPI1_Init+0x64>)
 80033d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033dc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_SPI1_Init+0x64>)
 80033e0:	2218      	movs	r2, #24
 80033e2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <MX_SPI1_Init+0x64>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_SPI1_Init+0x64>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <MX_SPI1_Init+0x64>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_SPI1_Init+0x64>)
 80033f8:	220a      	movs	r2, #10
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80033fc:	4804      	ldr	r0, [pc, #16]	; (8003410 <MX_SPI1_Init+0x64>)
 80033fe:	f002 f803 	bl	8005408 <HAL_SPI_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_SPI1_Init+0x60>
		Error_Handler();
 8003408:	f000 fa40 	bl	800388c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	2000087c 	.word	0x2000087c
 8003414:	40013000 	.word	0x40013000

08003418 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b08e      	sub	sp, #56	; 0x38
 800341c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800341e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800342c:	f107 0320 	add.w	r3, r7, #32
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	615a      	str	r2, [r3, #20]
 8003446:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003448:	4b38      	ldr	r3, [pc, #224]	; (800352c <MX_TIM2_Init+0x114>)
 800344a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <MX_TIM2_Init+0x114>)
 8003452:	2247      	movs	r2, #71	; 0x47
 8003454:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003456:	4b35      	ldr	r3, [pc, #212]	; (800352c <MX_TIM2_Init+0x114>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <MX_TIM2_Init+0x114>)
 800345e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003462:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <MX_TIM2_Init+0x114>)
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <MX_TIM2_Init+0x114>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003470:	482e      	ldr	r0, [pc, #184]	; (800352c <MX_TIM2_Init+0x114>)
 8003472:	f002 fbbd 	bl	8005bf0 <HAL_TIM_Base_Init>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM2_Init+0x68>
		Error_Handler();
 800347c:	f000 fa06 	bl	800388c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348a:	4619      	mov	r1, r3
 800348c:	4827      	ldr	r0, [pc, #156]	; (800352c <MX_TIM2_Init+0x114>)
 800348e:	f002 fe63 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM2_Init+0x84>
		Error_Handler();
 8003498:	f000 f9f8 	bl	800388c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800349c:	4823      	ldr	r0, [pc, #140]	; (800352c <MX_TIM2_Init+0x114>)
 800349e:	f002 fc1a 	bl	8005cd6 <HAL_TIM_PWM_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_TIM2_Init+0x94>
		Error_Handler();
 80034a8:	f000 f9f0 	bl	800388c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	4619      	mov	r1, r3
 80034ba:	481c      	ldr	r0, [pc, #112]	; (800352c <MX_TIM2_Init+0x114>)
 80034bc:	f003 fa3c 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80034c6:	f000 f9e1 	bl	800388c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ca:	2360      	movs	r3, #96	; 0x60
 80034cc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	4619      	mov	r1, r3
 80034e0:	4812      	ldr	r0, [pc, #72]	; (800352c <MX_TIM2_Init+0x114>)
 80034e2:	f002 fd73 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80034ec:	f000 f9ce 	bl	800388c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	2204      	movs	r2, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_TIM2_Init+0x114>)
 80034f8:	f002 fd68 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8003502:	f000 f9c3 	bl	800388c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	2208      	movs	r2, #8
 800350a:	4619      	mov	r1, r3
 800350c:	4807      	ldr	r0, [pc, #28]	; (800352c <MX_TIM2_Init+0x114>)
 800350e:	f002 fd5d 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8003518:	f000 f9b8 	bl	800388c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800351c:	4803      	ldr	r0, [pc, #12]	; (800352c <MX_TIM2_Init+0x114>)
 800351e:	f000 fa9d 	bl	8003a5c <HAL_TIM_MspPostInit>

}
 8003522:	bf00      	nop
 8003524:	3738      	adds	r7, #56	; 0x38
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200008d4 	.word	0x200008d4

08003530 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003544:	463b      	mov	r3, r7
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <MX_TIM3_Init+0x94>)
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <MX_TIM3_Init+0x98>)
 8003550:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <MX_TIM3_Init+0x94>)
 8003554:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003558:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <MX_TIM3_Init+0x94>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <MX_TIM3_Init+0x94>)
 8003562:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003566:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <MX_TIM3_Init+0x94>)
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <MX_TIM3_Init+0x94>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003574:	4813      	ldr	r0, [pc, #76]	; (80035c4 <MX_TIM3_Init+0x94>)
 8003576:	f002 fb3b 	bl	8005bf0 <HAL_TIM_Base_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM3_Init+0x54>
		Error_Handler();
 8003580:	f000 f984 	bl	800388c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003588:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	4619      	mov	r1, r3
 8003590:	480c      	ldr	r0, [pc, #48]	; (80035c4 <MX_TIM3_Init+0x94>)
 8003592:	f002 fde1 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <MX_TIM3_Init+0x70>
		Error_Handler();
 800359c:	f000 f976 	bl	800388c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035a0:	2300      	movs	r3, #0
 80035a2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80035a8:	463b      	mov	r3, r7
 80035aa:	4619      	mov	r1, r3
 80035ac:	4805      	ldr	r0, [pc, #20]	; (80035c4 <MX_TIM3_Init+0x94>)
 80035ae:	f003 f9c3 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80035b8:	f000 f968 	bl	800388c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000081c 	.word	0x2000081c
 80035c8:	40000400 	.word	0x40000400

080035cc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80035e0:	463b      	mov	r3, r7
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <MX_TIM4_Init+0x94>)
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <MX_TIM4_Init+0x98>)
 80035ec:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 80035ee:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <MX_TIM4_Init+0x94>)
 80035f0:	2247      	movs	r2, #71	; 0x47
 80035f2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <MX_TIM4_Init+0x94>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <MX_TIM4_Init+0x94>)
 80035fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003600:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <MX_TIM4_Init+0x94>)
 8003604:	2200      	movs	r2, #0
 8003606:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <MX_TIM4_Init+0x94>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800360e:	4814      	ldr	r0, [pc, #80]	; (8003660 <MX_TIM4_Init+0x94>)
 8003610:	f002 faee 	bl	8005bf0 <HAL_TIM_Base_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM4_Init+0x52>
		Error_Handler();
 800361a:	f000 f937 	bl	800388c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800361e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003622:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	4619      	mov	r1, r3
 800362a:	480d      	ldr	r0, [pc, #52]	; (8003660 <MX_TIM4_Init+0x94>)
 800362c:	f002 fd94 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM4_Init+0x6e>
		Error_Handler();
 8003636:	f000 f929 	bl	800388c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003642:	463b      	mov	r3, r7
 8003644:	4619      	mov	r1, r3
 8003646:	4806      	ldr	r0, [pc, #24]	; (8003660 <MX_TIM4_Init+0x94>)
 8003648:	f003 f976 	bl	8006938 <HAL_TIMEx_MasterConfigSynchronization>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8003652:	f000 f91b 	bl	800388c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200007c4 	.word	0x200007c4
 8003664:	40000800 	.word	0x40000800

08003668 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	4b5a      	ldr	r3, [pc, #360]	; (80037ec <MX_GPIO_Init+0x184>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a59      	ldr	r2, [pc, #356]	; (80037ec <MX_GPIO_Init+0x184>)
 8003688:	f043 0310 	orr.w	r3, r3, #16
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b57      	ldr	r3, [pc, #348]	; (80037ec <MX_GPIO_Init+0x184>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	4b53      	ldr	r3, [pc, #332]	; (80037ec <MX_GPIO_Init+0x184>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a52      	ldr	r2, [pc, #328]	; (80037ec <MX_GPIO_Init+0x184>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b50      	ldr	r3, [pc, #320]	; (80037ec <MX_GPIO_Init+0x184>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <MX_GPIO_Init+0x184>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a4b      	ldr	r2, [pc, #300]	; (80037ec <MX_GPIO_Init+0x184>)
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <MX_GPIO_Init+0x184>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b45      	ldr	r3, [pc, #276]	; (80037ec <MX_GPIO_Init+0x184>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a44      	ldr	r2, [pc, #272]	; (80037ec <MX_GPIO_Init+0x184>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b42      	ldr	r3, [pc, #264]	; (80037ec <MX_GPIO_Init+0x184>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <MX_GPIO_Init+0x184>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a3d      	ldr	r2, [pc, #244]	; (80037ec <MX_GPIO_Init+0x184>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <MX_GPIO_Init+0x184>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <MX_GPIO_Init+0x184>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a36      	ldr	r2, [pc, #216]	; (80037ec <MX_GPIO_Init+0x184>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <MX_GPIO_Init+0x184>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8003726:	2200      	movs	r2, #0
 8003728:	217f      	movs	r1, #127	; 0x7f
 800372a:	4831      	ldr	r0, [pc, #196]	; (80037f0 <MX_GPIO_Init+0x188>)
 800372c:	f000 fdde 	bl	80042ec <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 8003730:	2200      	movs	r2, #0
 8003732:	f248 0103 	movw	r1, #32771	; 0x8003
 8003736:	482f      	ldr	r0, [pc, #188]	; (80037f4 <MX_GPIO_Init+0x18c>)
 8003738:	f000 fdd8 	bl	80042ec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003742:	482d      	ldr	r0, [pc, #180]	; (80037f8 <MX_GPIO_Init+0x190>)
 8003744:	f000 fdd2 	bl	80042ec <HAL_GPIO_WritePin>
	STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 8003748:	237f      	movs	r3, #127	; 0x7f
 800374a:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374c:	2301      	movs	r3, #1
 800374e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003750:	2302      	movs	r3, #2
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	4619      	mov	r1, r3
 800375e:	4824      	ldr	r0, [pc, #144]	; (80037f0 <MX_GPIO_Init+0x188>)
 8003760:	f000 fc12 	bl	8003f88 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8003764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003768:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800376a:	2301      	movs	r3, #1
 800376c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800376e:	2302      	movs	r3, #2
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003772:	2300      	movs	r3, #0
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 8003776:	f107 031c 	add.w	r3, r7, #28
 800377a:	4619      	mov	r1, r3
 800377c:	481d      	ldr	r0, [pc, #116]	; (80037f4 <MX_GPIO_Init+0x18c>)
 800377e:	f000 fc03 	bl	8003f88 <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 8003782:	2303      	movs	r3, #3
 8003784:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003786:	2301      	movs	r3, #1
 8003788:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800378a:	2301      	movs	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	4816      	ldr	r0, [pc, #88]	; (80037f4 <MX_GPIO_Init+0x18c>)
 800379a:	f000 fbf5 	bl	8003f88 <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037a2:	4b16      	ldr	r3, [pc, #88]	; (80037fc <MX_GPIO_Init+0x194>)
 80037a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037a6:	2302      	movs	r3, #2
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	4619      	mov	r1, r3
 80037b0:	4813      	ldr	r0, [pc, #76]	; (8003800 <MX_GPIO_Init+0x198>)
 80037b2:	f000 fbe9 	bl	8003f88 <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 80037b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80037ba:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037bc:	2301      	movs	r3, #1
 80037be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	480a      	ldr	r0, [pc, #40]	; (80037f8 <MX_GPIO_Init+0x190>)
 80037d0:	f000 fbda 	bl	8003f88 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2101      	movs	r1, #1
 80037d8:	2006      	movs	r0, #6
 80037da:	f000 fb9e 	bl	8003f1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80037de:	2006      	movs	r0, #6
 80037e0:	f000 fbb7 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 80037e4:	bf00      	nop
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40020800 	.word	0x40020800
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	10110000 	.word	0x10110000
 8003800:	40020000 	.word	0x40020000

08003804 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d106      	bne.n	8003824 <HAL_TIM_PeriodElapsedCallback+0x20>
		_RGB_Test(_led);
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe f99a 	bl	8001b54 <_RGB_Test>
		THS_ErrorClock();
 8003820:	f7fe fc8e 	bl	8002140 <THS_ErrorClock>
	} else if (htim->Instance == TIM3) {

	}
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000436 	.word	0x20000436

08003830 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d11a      	bne.n	8003876 <HAL_GPIO_EXTI_Callback+0x46>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 8003840:	2101      	movs	r1, #1
 8003842:	480f      	ldr	r0, [pc, #60]	; (8003880 <HAL_GPIO_EXTI_Callback+0x50>)
 8003844:	f000 fd3a 	bl	80042bc <HAL_GPIO_ReadPin>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d113      	bne.n	8003876 <HAL_GPIO_EXTI_Callback+0x46>
		{
			LCD_ToggleBackgroundLED();
 800384e:	f7fd fc07 	bl	8001060 <LCD_ToggleBackgroundLED>

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8003852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003856:	480b      	ldr	r0, [pc, #44]	; (8003884 <HAL_GPIO_EXTI_Callback+0x54>)
 8003858:	f000 fd61 	bl	800431e <HAL_GPIO_TogglePin>
			++_led;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_GPIO_EXTI_Callback+0x58>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_GPIO_EXTI_Callback+0x58>)
 8003866:	701a      	strb	r2, [r3, #0]
			if (_led > 9)
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_GPIO_EXTI_Callback+0x58>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b09      	cmp	r3, #9
 800386e:	d902      	bls.n	8003876 <HAL_GPIO_EXTI_Callback+0x46>
				_led = 0;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_GPIO_EXTI_Callback+0x58>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40020000 	.word	0x40020000
 8003884:	40020c00 	.word	0x40020c00
 8003888:	20000436 	.word	0x20000436

0800388c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_MspInit+0x4c>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <HAL_MspInit+0x4c>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_MspInit+0x4c>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_MspInit+0x4c>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <HAL_MspInit+0x4c>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_MspInit+0x4c>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800

080038ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a05      	ldr	r2, [pc, #20]	; (8003910 <HAL_RTC_MspInit+0x24>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d102      	bne.n	8003904 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RTC_MspInit+0x28>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40002800 	.word	0x40002800
 8003914:	42470e3c 	.word	0x42470e3c

08003918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_SPI_MspInit+0x84>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d12b      	bne.n	8003992 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 8003944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003948:	6453      	str	r3, [r2, #68]	; 0x44
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_SPI_MspInit+0x88>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003972:	2338      	movs	r3, #56	; 0x38
 8003974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397e:	2303      	movs	r3, #3
 8003980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003982:	2305      	movs	r3, #5
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	4619      	mov	r1, r3
 800398c:	4805      	ldr	r0, [pc, #20]	; (80039a4 <HAL_SPI_MspInit+0x8c>)
 800398e:	f000 fafb 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40013000 	.word	0x40013000
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020400 	.word	0x40020400

080039a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d116      	bne.n	80039e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2102      	movs	r1, #2
 80039da:	201c      	movs	r0, #28
 80039dc:	f000 fa9d 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039e0:	201c      	movs	r0, #28
 80039e2:	f000 fab6 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039e6:	e02e      	b.n	8003a46 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_Base_MspInit+0xac>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d116      	bne.n	8003a20 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2103      	movs	r1, #3
 8003a12:	201d      	movs	r0, #29
 8003a14:	f000 fa81 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a18:	201d      	movs	r0, #29
 8003a1a:	f000 fa9a 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 8003a1e:	e012      	b.n	8003a46 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <HAL_TIM_Base_MspInit+0xb0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_TIM_Base_MspInit+0xa8>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7c:	d11d      	bne.n	8003aba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_TIM_MspPostInit+0x68>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <HAL_TIM_MspPostInit+0x68>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_TIM_MspPostInit+0x68>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 8003a9a:	2326      	movs	r3, #38	; 0x26
 8003a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4804      	ldr	r0, [pc, #16]	; (8003ac8 <HAL_TIM_MspPostInit+0x6c>)
 8003ab6:	f000 fa67 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003aba:	bf00      	nop
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40020000 	.word	0x40020000

08003acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <HardFault_Handler+0x4>

08003ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler+0x4>

08003ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <BusFault_Handler+0x4>

08003aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <UsageFault_Handler+0x4>

08003af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8003b20:	f7fe fee4 	bl	80028ec <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b24:	f000 f8dc 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b30:	2001      	movs	r0, #1
 8003b32:	f000 fc0f 	bl	8004354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM2_IRQHandler+0x10>)
 8003b42:	f002 f93b 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200008d4 	.word	0x200008d4

08003b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <TIM3_IRQHandler+0x10>)
 8003b56:	f002 f931 	bl	8005dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	2000081c 	.word	0x2000081c

08003b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <_sbrk+0x50>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x16>
		heap_end = &end;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <_sbrk+0x50>)
 8003b76:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <_sbrk+0x54>)
 8003b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <_sbrk+0x50>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <_sbrk+0x50>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	466a      	mov	r2, sp
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d907      	bls.n	8003b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003b8e:	f002 ff63 	bl	8006a58 <__errno>
 8003b92:	4602      	mov	r2, r0
 8003b94:	230c      	movs	r3, #12
 8003b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e006      	b.n	8003bac <_sbrk+0x48>
	}

	heap_end += incr;
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <_sbrk+0x50>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <_sbrk+0x50>)
 8003ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000438 	.word	0x20000438
 8003bb8:	20000920 	.word	0x20000920

08003bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <SystemInit+0x28>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <SystemInit+0x28>)
 8003bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <SystemInit+0x28>)
 8003bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003bec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003bee:	e003      	b.n	8003bf8 <LoopCopyDataInit>

08003bf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bf6:	3104      	adds	r1, #4

08003bf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c00:	d3f6      	bcc.n	8003bf0 <CopyDataInit>
  ldr  r2, =_sbss
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c04:	e002      	b.n	8003c0c <LoopFillZerobss>

08003c06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c08:	f842 3b04 	str.w	r3, [r2], #4

08003c0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c10:	d3f9      	bcc.n	8003c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c12:	f7ff ffd3 	bl	8003bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c16:	f002 ff25 	bl	8006a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1a:	f7ff fa7d 	bl	8003118 <main>
  bx  lr    
 8003c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c24:	08008ea8 	.word	0x08008ea8
  ldr  r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c2c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003c30:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003c34:	2000091c 	.word	0x2000091c

08003c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c38:	e7fe      	b.n	8003c38 <ADC_IRQHandler>
	...

08003c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_Init+0x40>)
 8003c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_Init+0x40>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_Init+0x40>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c64:	2003      	movs	r0, #3
 8003c66:	f000 f94d 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f000 f808 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c70:	f7ff fe14 	bl	800389c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_InitTick+0x54>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f965 	bl	8003f6e <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f000 f92d 	bl	8003f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <HAL_InitTick+0x5c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000004 	.word	0x20000004
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	20000008 	.word	0x20000008

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	20000914 	.word	0x20000914

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000914 	.word	0x20000914

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_Delay+0x40>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d80:	4013      	ands	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d96:	4a04      	ldr	r2, [pc, #16]	; (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	60d3      	str	r3, [r2, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db0:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 0307 	and.w	r3, r3, #7
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	db0b      	blt.n	8003df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4907      	ldr	r1, [pc, #28]	; (8003e00 <__NVIC_EnableIRQ+0x38>)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2001      	movs	r0, #1
 8003dea:	fa00 f202 	lsl.w	r2, r0, r2
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed0:	d301      	bcc.n	8003ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00f      	b.n	8003ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <SysTick_Config+0x40>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ede:	210f      	movs	r1, #15
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f7ff ff8e 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <SysTick_Config+0x40>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <SysTick_Config+0x40>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010

08003f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff29 	bl	8003d64 <__NVIC_SetPriorityGrouping>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff3e 	bl	8003dac <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff8e 	bl	8003e58 <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5d 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff31 	bl	8003dc8 <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa2 	bl	8003ec0 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e16b      	b.n	800427c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	f040 815a 	bne.w	8004276 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_GPIO_Init+0x5a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d007      	beq.n	8003fe2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd6:	2b11      	cmp	r3, #17
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b12      	cmp	r3, #18
 8003fe0:	d130      	bne.n	8004044 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0xfc>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b12      	cmp	r3, #18
 8004082:	d123      	bne.n	80040cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0203 	and.w	r2, r3, #3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80b4 	beq.w	8004276 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b5f      	ldr	r3, [pc, #380]	; (8004290 <HAL_GPIO_Init+0x308>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a5e      	ldr	r2, [pc, #376]	; (8004290 <HAL_GPIO_Init+0x308>)
 8004118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b5c      	ldr	r3, [pc, #368]	; (8004290 <HAL_GPIO_Init+0x308>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412a:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_GPIO_Init+0x30c>)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a51      	ldr	r2, [pc, #324]	; (8004298 <HAL_GPIO_Init+0x310>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d02b      	beq.n	80041ae <HAL_GPIO_Init+0x226>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a50      	ldr	r2, [pc, #320]	; (800429c <HAL_GPIO_Init+0x314>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d025      	beq.n	80041aa <HAL_GPIO_Init+0x222>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4f      	ldr	r2, [pc, #316]	; (80042a0 <HAL_GPIO_Init+0x318>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01f      	beq.n	80041a6 <HAL_GPIO_Init+0x21e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4e      	ldr	r2, [pc, #312]	; (80042a4 <HAL_GPIO_Init+0x31c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d019      	beq.n	80041a2 <HAL_GPIO_Init+0x21a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4d      	ldr	r2, [pc, #308]	; (80042a8 <HAL_GPIO_Init+0x320>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_GPIO_Init+0x216>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4c      	ldr	r2, [pc, #304]	; (80042ac <HAL_GPIO_Init+0x324>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00d      	beq.n	800419a <HAL_GPIO_Init+0x212>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4b      	ldr	r2, [pc, #300]	; (80042b0 <HAL_GPIO_Init+0x328>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <HAL_GPIO_Init+0x20e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4a      	ldr	r2, [pc, #296]	; (80042b4 <HAL_GPIO_Init+0x32c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_GPIO_Init+0x20a>
 800418e:	2307      	movs	r3, #7
 8004190:	e00e      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 8004192:	2308      	movs	r3, #8
 8004194:	e00c      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 8004196:	2306      	movs	r3, #6
 8004198:	e00a      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 800419a:	2305      	movs	r3, #5
 800419c:	e008      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 800419e:	2304      	movs	r3, #4
 80041a0:	e006      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 80041a2:	2303      	movs	r3, #3
 80041a4:	e004      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e002      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_GPIO_Init+0x228>
 80041ae:	2300      	movs	r3, #0
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	f002 0203 	and.w	r2, r2, #3
 80041b6:	0092      	lsls	r2, r2, #2
 80041b8:	4093      	lsls	r3, r2
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c0:	4934      	ldr	r1, [pc, #208]	; (8004294 <HAL_GPIO_Init+0x30c>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3302      	adds	r3, #2
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ce:	4b3a      	ldr	r3, [pc, #232]	; (80042b8 <HAL_GPIO_Init+0x330>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f2:	4a31      	ldr	r2, [pc, #196]	; (80042b8 <HAL_GPIO_Init+0x330>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_GPIO_Init+0x330>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800421c:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <HAL_GPIO_Init+0x330>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004222:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_GPIO_Init+0x330>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004246:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <HAL_GPIO_Init+0x330>)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_GPIO_Init+0x330>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004270:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <HAL_GPIO_Init+0x330>)
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3301      	adds	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	f67f ae90 	bls.w	8003fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004284:	bf00      	nop
 8004286:	3724      	adds	r7, #36	; 0x24
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40023800 	.word	0x40023800
 8004294:	40013800 	.word	0x40013800
 8004298:	40020000 	.word	0x40020000
 800429c:	40020400 	.word	0x40020400
 80042a0:	40020800 	.word	0x40020800
 80042a4:	40020c00 	.word	0x40020c00
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40021400 	.word	0x40021400
 80042b0:	40021800 	.word	0x40021800
 80042b4:	40021c00 	.word	0x40021c00
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	887b      	ldrh	r3, [r7, #2]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
 80042d8:	e001      	b.n	80042de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042de:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
 80042f8:	4613      	mov	r3, r2
 80042fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042fc:	787b      	ldrb	r3, [r7, #1]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004308:	e003      	b.n	8004312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	041a      	lsls	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	619a      	str	r2, [r3, #24]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	401a      	ands	r2, r3
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	429a      	cmp	r2, r3
 8004336:	d104      	bne.n	8004342 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	041a      	lsls	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004340:	e002      	b.n	8004348 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d006      	beq.n	8004378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fa5c 	bl	8003830 <HAL_GPIO_EXTI_Callback>
  }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40013c00 	.word	0x40013c00

08004384 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e25b      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d075      	beq.n	800448e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a2:	4ba3      	ldr	r3, [pc, #652]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d00c      	beq.n	80043c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4ba0      	ldr	r3, [pc, #640]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d112      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b9d      	ldr	r3, [pc, #628]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	4b99      	ldr	r3, [pc, #612]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05b      	beq.n	800448c <HAL_RCC_OscConfig+0x108>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d157      	bne.n	800448c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e236      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x74>
 80043ea:	4b91      	ldr	r3, [pc, #580]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a90      	ldr	r2, [pc, #576]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0x98>
 8004402:	4b8b      	ldr	r3, [pc, #556]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a8a      	ldr	r2, [pc, #552]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a87      	ldr	r2, [pc, #540]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xb0>
 800441c:	4b84      	ldr	r3, [pc, #528]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a83      	ldr	r2, [pc, #524]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a80      	ldr	r2, [pc, #512]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7ff fc64 	bl	8003d08 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004444:	f7ff fc60 	bl	8003d08 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1fb      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b76      	ldr	r3, [pc, #472]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xc0>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7ff fc50 	bl	8003d08 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446c:	f7ff fc4c 	bl	8003d08 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e1e7      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b6c      	ldr	r3, [pc, #432]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0xe8>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b62      	ldr	r3, [pc, #392]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1bb      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4952      	ldr	r1, [pc, #328]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b4f      	ldr	r3, [pc, #316]	; (8004634 <HAL_RCC_OscConfig+0x2b0>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7ff fc05 	bl	8003d08 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004502:	f7ff fc01 	bl	8003d08 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e19c      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4940      	ldr	r1, [pc, #256]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004536:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <HAL_RCC_OscConfig+0x2b0>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7ff fbe4 	bl	8003d08 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004544:	f7ff fbe0 	bl	8003d08 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e17b      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d030      	beq.n	80045d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCC_OscConfig+0x2b4>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7ff fbc4 	bl	8003d08 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004584:	f7ff fbc0 	bl	8003d08 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e15b      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x200>
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a4:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x2b4>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7ff fbad 	bl	8003d08 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b2:	f7ff fba9 	bl	8003d08 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e144      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a0 	beq.w	800471e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b13      	ldr	r3, [pc, #76]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d121      	bne.n	800465e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <HAL_RCC_OscConfig+0x2b8>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7ff fb6f 	bl	8003d08 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e011      	b.n	8004652 <HAL_RCC_OscConfig+0x2ce>
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	42470000 	.word	0x42470000
 8004638:	42470e80 	.word	0x42470e80
 800463c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7ff fb62 	bl	8003d08 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0fd      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004652:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x4d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d106      	bne.n	8004674 <HAL_RCC_OscConfig+0x2f0>
 8004666:	4b7d      	ldr	r3, [pc, #500]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a7c      	ldr	r2, [pc, #496]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	e01c      	b.n	80046ae <HAL_RCC_OscConfig+0x32a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d10c      	bne.n	8004696 <HAL_RCC_OscConfig+0x312>
 800467c:	4b77      	ldr	r3, [pc, #476]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a76      	ldr	r2, [pc, #472]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004682:	f043 0304 	orr.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	4b74      	ldr	r3, [pc, #464]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4a73      	ldr	r2, [pc, #460]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6713      	str	r3, [r2, #112]	; 0x70
 8004694:	e00b      	b.n	80046ae <HAL_RCC_OscConfig+0x32a>
 8004696:	4b71      	ldr	r3, [pc, #452]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	4b6e      	ldr	r3, [pc, #440]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a6d      	ldr	r2, [pc, #436]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d015      	beq.n	80046e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7ff fb27 	bl	8003d08 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7ff fb23 	bl	8003d08 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0bc      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	4b61      	ldr	r3, [pc, #388]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCC_OscConfig+0x33a>
 80046e0:	e014      	b.n	800470c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e2:	f7ff fb11 	bl	8003d08 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7ff fb0d 	bl	8003d08 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0a6      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004700:	4b56      	ldr	r3, [pc, #344]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ee      	bne.n	80046ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470c:	7dfb      	ldrb	r3, [r7, #23]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004712:	4b52      	ldr	r3, [pc, #328]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a51      	ldr	r2, [pc, #324]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8092 	beq.w	800484c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004728:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d05c      	beq.n	80047ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	2b02      	cmp	r3, #2
 800473a:	d141      	bne.n	80047c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473c:	4b48      	ldr	r3, [pc, #288]	; (8004860 <HAL_RCC_OscConfig+0x4dc>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7ff fae1 	bl	8003d08 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474a:	f7ff fadd 	bl	8003d08 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e078      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	019b      	lsls	r3, r3, #6
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	061b      	lsls	r3, r3, #24
 800478c:	4933      	ldr	r1, [pc, #204]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004792:	4b33      	ldr	r3, [pc, #204]	; (8004860 <HAL_RCC_OscConfig+0x4dc>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7ff fab6 	bl	8003d08 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7ff fab2 	bl	8003d08 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e04d      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x41c>
 80047be:	e045      	b.n	800484c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_OscConfig+0x4dc>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c6:	f7ff fa9f 	bl	8003d08 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ce:	f7ff fa9b 	bl	8003d08 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e036      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x44a>
 80047ec:	e02e      	b.n	800484c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e029      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_RCC_OscConfig+0x4d8>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	429a      	cmp	r2, r3
 800480c:	d11c      	bne.n	8004848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d115      	bne.n	8004848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004822:	4013      	ands	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004828:	4293      	cmp	r3, r2
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d106      	bne.n	8004848 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40007000 	.word	0x40007000
 800485c:	40023800 	.word	0x40023800
 8004860:	42470060 	.word	0x42470060

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0cc      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d90c      	bls.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0b8      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d020      	beq.n	80048ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b8:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d0:	4b53      	ldr	r3, [pc, #332]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a52      	ldr	r2, [pc, #328]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048dc:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	494d      	ldr	r1, [pc, #308]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d044      	beq.n	8004984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d119      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d003      	beq.n	8004922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491e:	2b03      	cmp	r3, #3
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004932:	4b3b      	ldr	r3, [pc, #236]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e067      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004942:	4b37      	ldr	r3, [pc, #220]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f023 0203 	bic.w	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4934      	ldr	r1, [pc, #208]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004954:	f7ff f9d8 	bl	8003d08 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	e00a      	b.n	8004972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7ff f9d4 	bl	8003d08 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04f      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 020c 	and.w	r2, r3, #12
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	429a      	cmp	r2, r3
 8004982:	d1eb      	bne.n	800495c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d20c      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e032      	b.n	8004a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4916      	ldr	r1, [pc, #88]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d6:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	490e      	ldr	r1, [pc, #56]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ea:	f000 f821 	bl	8004a30 <HAL_RCC_GetSysClockFreq>
 80049ee:	4601      	mov	r1, r0
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	5cd3      	ldrb	r3, [r2, r3]
 80049fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f938 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023c00 	.word	0x40023c00
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08008c28 	.word	0x08008c28
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	20000008 	.word	0x20000008

08004a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a46:	4b63      	ldr	r3, [pc, #396]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d007      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x32>
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d008      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x38>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f040 80b4 	bne.w	8004bc4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b5e      	ldr	r3, [pc, #376]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a5e:	60bb      	str	r3, [r7, #8]
       break;
 8004a60:	e0b3      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a62:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a64:	60bb      	str	r3, [r7, #8]
      break;
 8004a66:	e0b0      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a68:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a72:	4b58      	ldr	r3, [pc, #352]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d04a      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	f04f 0400 	mov.w	r4, #0
 8004a88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	ea03 0501 	and.w	r5, r3, r1
 8004a94:	ea04 0602 	and.w	r6, r4, r2
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	f04f 0400 	mov.w	r4, #0
 8004aa4:	0154      	lsls	r4, r2, #5
 8004aa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aaa:	014b      	lsls	r3, r1, #5
 8004aac:	4619      	mov	r1, r3
 8004aae:	4622      	mov	r2, r4
 8004ab0:	1b49      	subs	r1, r1, r5
 8004ab2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	0194      	lsls	r4, r2, #6
 8004ac0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ac4:	018b      	lsls	r3, r1, #6
 8004ac6:	1a5b      	subs	r3, r3, r1
 8004ac8:	eb64 0402 	sbc.w	r4, r4, r2
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	00e2      	lsls	r2, r4, #3
 8004ad6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ada:	00d9      	lsls	r1, r3, #3
 8004adc:	460b      	mov	r3, r1
 8004ade:	4614      	mov	r4, r2
 8004ae0:	195b      	adds	r3, r3, r5
 8004ae2:	eb44 0406 	adc.w	r4, r4, r6
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	0262      	lsls	r2, r4, #9
 8004af0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004af4:	0259      	lsls	r1, r3, #9
 8004af6:	460b      	mov	r3, r1
 8004af8:	4614      	mov	r4, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	4621      	mov	r1, r4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4623      	mov	r3, r4
 8004b08:	f7fc f84e 	bl	8000ba8 <__aeabi_uldivmod>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e049      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b14:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	f04f 0400 	mov.w	r4, #0
 8004b1e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	ea03 0501 	and.w	r5, r3, r1
 8004b2a:	ea04 0602 	and.w	r6, r4, r2
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4632      	mov	r2, r6
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	0154      	lsls	r4, r2, #5
 8004b3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b40:	014b      	lsls	r3, r1, #5
 8004b42:	4619      	mov	r1, r3
 8004b44:	4622      	mov	r2, r4
 8004b46:	1b49      	subs	r1, r1, r5
 8004b48:	eb62 0206 	sbc.w	r2, r2, r6
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	0194      	lsls	r4, r2, #6
 8004b56:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b5a:	018b      	lsls	r3, r1, #6
 8004b5c:	1a5b      	subs	r3, r3, r1
 8004b5e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b62:	f04f 0100 	mov.w	r1, #0
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b70:	00d9      	lsls	r1, r3, #3
 8004b72:	460b      	mov	r3, r1
 8004b74:	4614      	mov	r4, r2
 8004b76:	195b      	adds	r3, r3, r5
 8004b78:	eb44 0406 	adc.w	r4, r4, r6
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	02a2      	lsls	r2, r4, #10
 8004b86:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b8a:	0299      	lsls	r1, r3, #10
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4614      	mov	r4, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	4621      	mov	r1, r4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f04f 0400 	mov.w	r4, #0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f7fc f803 	bl	8000ba8 <__aeabi_uldivmod>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	460c      	mov	r4, r1
 8004ba6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	60bb      	str	r3, [r7, #8]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bc6:	60bb      	str	r3, [r7, #8]
      break;
 8004bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bca:	68bb      	ldr	r3, [r7, #8]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	007a1200 	.word	0x007a1200

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d035      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c08:	4b62      	ldr	r3, [pc, #392]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c0e:	f7ff f87b 	bl	8003d08 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c16:	f7ff f877 	bl	8003d08 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0b0      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c28:	4b5b      	ldr	r3, [pc, #364]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	019a      	lsls	r2, r3, #6
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	071b      	lsls	r3, r3, #28
 8004c40:	4955      	ldr	r1, [pc, #340]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c48:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7ff f85b 	bl	8003d08 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c56:	f7ff f857 	bl	8003d08 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e090      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c68:	4b4b      	ldr	r3, [pc, #300]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8083 	beq.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b44      	ldr	r3, [pc, #272]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4a43      	ldr	r2, [pc, #268]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	; 0x40
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3e      	ldr	r2, [pc, #248]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004caa:	f7ff f82d 	bl	8003d08 <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cb2:	f7ff f829 	bl	8003d08 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e062      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cd0:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02f      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d028      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d0a:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d114      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d16:	f7fe fff7 	bl	8003d08 <HAL_GetTick>
 8004d1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f7fe fff3 	bl	8003d08 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e02a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ee      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4c:	d10d      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d62:	490d      	ldr	r1, [pc, #52]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]
 8004d68:	e005      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d74:	6093      	str	r3, [r2, #8]
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	4905      	ldr	r1, [pc, #20]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	42470068 	.word	0x42470068
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	42470e40 	.word	0x42470e40

08004da4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e083      	b.n	8004ebe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7f5b      	ldrb	r3, [r3, #29]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fe fd90 	bl	80038ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	22ca      	movs	r2, #202	; 0xca
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2253      	movs	r2, #83	; 0x53
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 faa8 	bl	8005338 <RTC_EnterInitMode>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	22ff      	movs	r2, #255	; 0xff
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e05e      	b.n	8004ebe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6919      	ldr	r1, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	041a      	lsls	r2, r3, #16
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10e      	bne.n	8004e8c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa3a 	bl	80052e8 <HAL_RTC_WaitForSynchro>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2204      	movs	r2, #4
 8004e86:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e018      	b.n	8004ebe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ec6:	b590      	push	{r4, r7, lr}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	7f1b      	ldrb	r3, [r3, #28]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_RTC_SetTime+0x1c>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e0aa      	b.n	8005038 <HAL_RTC_SetTime+0x172>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2202      	movs	r2, #2
 8004eec:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d126      	bne.n	8004f42 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2200      	movs	r2, #0
 8004f06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fa3f 	bl	8005390 <RTC_ByteToBcd2>
 8004f12:	4603      	mov	r3, r0
 8004f14:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa38 	bl	8005390 <RTC_ByteToBcd2>
 8004f20:	4603      	mov	r3, r0
 8004f22:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f24:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	789b      	ldrb	r3, [r3, #2]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa30 	bl	8005390 <RTC_ByteToBcd2>
 8004f30:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f32:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	78db      	ldrb	r3, [r3, #3]
 8004f3a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e018      	b.n	8004f74 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2200      	movs	r2, #0
 8004f54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f62:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	78db      	ldrb	r3, [r3, #3]
 8004f6e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ca      	movs	r2, #202	; 0xca
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2253      	movs	r2, #83	; 0x53
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f9d7 	bl	8005338 <RTC_EnterInitMode>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e047      	b.n	8005038 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d111      	bne.n	8005022 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f972 	bl	80052e8 <HAL_RTC_WaitForSynchro>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	22ff      	movs	r2, #255	; 0xff
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2204      	movs	r2, #4
 8005016:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e00a      	b.n	8005038 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005036:	2300      	movs	r3, #0
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}

08005040 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005072:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005076:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11a      	bne.n	80050f2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 f983 	bl	80053cc <RTC_Bcd2ToByte>
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f97a 	bl	80053cc <RTC_Bcd2ToByte>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	789b      	ldrb	r3, [r3, #2]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f971 	bl	80053cc <RTC_Bcd2ToByte>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	7f1b      	ldrb	r3, [r3, #28]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_RTC_SetDate+0x1c>
 8005114:	2302      	movs	r3, #2
 8005116:	e094      	b.n	8005242 <HAL_RTC_SetDate+0x146>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2202      	movs	r2, #2
 8005122:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10e      	bne.n	8005148 <HAL_RTC_SetDate+0x4c>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	785b      	ldrb	r3, [r3, #1]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	b2db      	uxtb	r3, r3
 8005140:	330a      	adds	r3, #10
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11c      	bne.n	8005188 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f91c 	bl	8005390 <RTC_ByteToBcd2>
 8005158:	4603      	mov	r3, r0
 800515a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f915 	bl	8005390 <RTC_ByteToBcd2>
 8005166:	4603      	mov	r3, r0
 8005168:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800516a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	789b      	ldrb	r3, [r3, #2]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 f90d 	bl	8005390 <RTC_ByteToBcd2>
 8005176:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005178:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e00e      	b.n	80051a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	78db      	ldrb	r3, [r3, #3]
 800518c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005194:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800519a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	22ca      	movs	r2, #202	; 0xca
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2253      	movs	r2, #83	; 0x53
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f8be 	bl	8005338 <RTC_EnterInitMode>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	22ff      	movs	r2, #255	; 0xff
 80051c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2204      	movs	r2, #4
 80051ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e033      	b.n	8005242 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d111      	bne.n	800522c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f86d 	bl	80052e8 <HAL_RTC_WaitForSynchro>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2204      	movs	r2, #4
 8005220:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e00a      	b.n	8005242 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	22ff      	movs	r2, #255	; 0xff
 8005232:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bd90      	pop	{r4, r7, pc}

0800524a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005264:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005268:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	0b5b      	lsrs	r3, r3, #13
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11a      	bne.n	80052de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f88d 	bl	80053cc <RTC_Bcd2ToByte>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f884 	bl	80053cc <RTC_Bcd2ToByte>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 f87b 	bl	80053cc <RTC_Bcd2ToByte>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005302:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005304:	f7fe fd00 	bl	8003d08 <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800530a:	e009      	b.n	8005320 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800530c:	f7fe fcfc 	bl	8003d08 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531a:	d901      	bls.n	8005320 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e007      	b.n	8005330 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0ee      	beq.n	800530c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d119      	bne.n	8005386 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f04f 32ff 	mov.w	r2, #4294967295
 800535a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800535c:	f7fe fcd4 	bl	8003d08 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005362:	e009      	b.n	8005378 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005364:	f7fe fcd0 	bl	8003d08 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005372:	d901      	bls.n	8005378 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e007      	b.n	8005388 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0ee      	beq.n	8005364 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800539e:	e005      	b.n	80053ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	3b0a      	subs	r3, #10
 80053aa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b09      	cmp	r3, #9
 80053b0:	d8f6      	bhi.n	80053a0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4313      	orrs	r3, r2
 80053be:	b2db      	uxtb	r3, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	b2db      	uxtb	r3, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e056      	b.n	80054c8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fe fa6f 	bl	8003918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2202      	movs	r2, #2
 800543e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005450:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	ea42 0103 	orr.w	r1, r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	0c1b      	lsrs	r3, r3, #16
 8005498:	f003 0104 	and.w	r1, r3, #4
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Transmit+0x22>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e11e      	b.n	8005730 <HAL_SPI_Transmit+0x260>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054fa:	f7fe fc05 	bl	8003d08 <HAL_GetTick>
 80054fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d002      	beq.n	8005516 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005510:	2302      	movs	r3, #2
 8005512:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005514:	e103      	b.n	800571e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_SPI_Transmit+0x52>
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005526:	e0fa      	b.n	800571e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2203      	movs	r2, #3
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556e:	d107      	bne.n	8005580 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d007      	beq.n	800559e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d14b      	bne.n	8005640 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_SPI_Transmit+0xe6>
 80055b0:	8afb      	ldrh	r3, [r7, #22]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d13e      	bne.n	8005634 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055da:	e02b      	b.n	8005634 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d112      	bne.n	8005610 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	881a      	ldrh	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	86da      	strh	r2, [r3, #54]	; 0x36
 800560e:	e011      	b.n	8005634 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005610:	f7fe fb7a 	bl	8003d08 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d803      	bhi.n	8005628 <HAL_SPI_Transmit+0x158>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d102      	bne.n	800562e <HAL_SPI_Transmit+0x15e>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d102      	bne.n	8005634 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005632:	e074      	b.n	800571e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ce      	bne.n	80055dc <HAL_SPI_Transmit+0x10c>
 800563e:	e04c      	b.n	80056da <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_SPI_Transmit+0x17e>
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d140      	bne.n	80056d0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005674:	e02c      	b.n	80056d0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d113      	bne.n	80056ac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80056aa:	e011      	b.n	80056d0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ac:	f7fe fb2c 	bl	8003d08 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d803      	bhi.n	80056c4 <HAL_SPI_Transmit+0x1f4>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_Transmit+0x1fa>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ce:	e026      	b.n	800571e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1cd      	bne.n	8005676 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fa44 	bl	8005b6c <SPI_EndRxTxTransaction>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	77fb      	strb	r3, [r7, #31]
 800571a:	e000      	b.n	800571e <HAL_SPI_Transmit+0x24e>
  }

error:
 800571c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800572e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	; 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005746:	2301      	movs	r3, #1
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_SPI_TransmitReceive+0x26>
 800575a:	2302      	movs	r3, #2
 800575c:	e18a      	b.n	8005a74 <HAL_SPI_TransmitReceive+0x33c>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005766:	f7fe facf 	bl	8003d08 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800577c:	887b      	ldrh	r3, [r7, #2]
 800577e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005784:	2b01      	cmp	r3, #1
 8005786:	d00f      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x70>
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578e:	d107      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x68>
 8005798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800579c:	2b04      	cmp	r3, #4
 800579e:	d003      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057a6:	e15b      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x82>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x82>
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057c0:	e14e      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d003      	beq.n	80057d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2205      	movs	r2, #5
 80057d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	887a      	ldrh	r2, [r7, #2]
 80057e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	887a      	ldrh	r2, [r7, #2]
 80057f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	887a      	ldrh	r2, [r7, #2]
 80057fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d007      	beq.n	800582a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005832:	d178      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_SPI_TransmitReceive+0x10a>
 800583c:	8b7b      	ldrh	r3, [r7, #26]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d166      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	881a      	ldrh	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005866:	e053      	b.n	8005910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	d11b      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x176>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <HAL_SPI_TransmitReceive+0x176>
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d113      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d119      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x1b8>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d014      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	b292      	uxth	r2, r2
 80058d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ec:	2301      	movs	r3, #1
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f0:	f7fe fa0a 	bl	8003d08 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d807      	bhi.n	8005910 <HAL_SPI_TransmitReceive+0x1d8>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d003      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800590e:	e0a7      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1a6      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x130>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1a1      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x130>
 8005924:	e07c      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x1fc>
 800592e:	8b7b      	ldrh	r3, [r7, #26]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d16b      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595a:	e057      	b.n	8005a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d11c      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x26c>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d017      	beq.n	80059a4 <HAL_SPI_TransmitReceive+0x26c>
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	2b01      	cmp	r3, #1
 8005978:	d114      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d119      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x2ae>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d014      	beq.n	80059e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e2:	2301      	movs	r3, #1
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059e6:	f7fe f98f 	bl	8003d08 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d803      	bhi.n	80059fe <HAL_SPI_TransmitReceive+0x2c6>
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d102      	bne.n	8005a04 <HAL_SPI_TransmitReceive+0x2cc>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a0a:	e029      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1a2      	bne.n	800595c <HAL_SPI_TransmitReceive+0x224>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d19d      	bne.n	800595c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f8a1 	bl	8005b6c <SPI_EndRxTxTransaction>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a3c:	e010      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	e000      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	; 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8a:	b2db      	uxtb	r3, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa8:	e04c      	b.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d048      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ab2:	f7fe f929 	bl	8003d08 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d902      	bls.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d13d      	bne.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ad6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae0:	d111      	bne.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aea:	d004      	beq.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d107      	bne.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0e:	d10f      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e00f      	b.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	bf0c      	ite	eq
 8005b54:	2301      	moveq	r3, #1
 8005b56:	2300      	movne	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d1a3      	bne.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b78:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <SPI_EndRxTxTransaction+0x7c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <SPI_EndRxTxTransaction+0x80>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	0d5b      	lsrs	r3, r3, #21
 8005b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b88:	fb02 f303 	mul.w	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b96:	d112      	bne.n	8005bbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2180      	movs	r1, #128	; 0x80
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff ff78 	bl	8005a98 <SPI_WaitFlagStateUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d016      	beq.n	8005bdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f043 0220 	orr.w	r2, r3, #32
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e00f      	b.n	8005bde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d0f2      	beq.n	8005bbe <SPI_EndRxTxTransaction+0x52>
 8005bd8:	e000      	b.n	8005bdc <SPI_EndRxTxTransaction+0x70>
        break;
 8005bda:	bf00      	nop
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000004 	.word	0x20000004
 8005bec:	165e9f81 	.word	0x165e9f81

08005bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e01d      	b.n	8005c3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fd fec6 	bl	80039a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fb72 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	d007      	beq.n	8005cc8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01d      	b.n	8005d24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f815 	bl	8005d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f000 faff 	bl	8006318 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fdca 	bl	80068ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_TIM_PWM_Start+0x74>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIM_PWM_Start+0x2c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_TIM_PWM_Start+0x78>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_PWM_Start+0x30>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_TIM_PWM_Start+0x32>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d007      	beq.n	8005da8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40010400 	.word	0x40010400

08005dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d122      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d11b      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0202 	mvn.w	r2, #2
 8005de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa6b 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa5d 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa6e 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0204 	mvn.w	r2, #4
 8005e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa41 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa33 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa44 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0208 	mvn.w	r2, #8
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2204      	movs	r2, #4
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa17 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa09 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa1a 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0310 	and.w	r3, r3, #16
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0210 	mvn.w	r2, #16
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f9ed 	bl	80062da <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9df 	bl	80062c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f9f0 	bl	80062ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10e      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d107      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0201 	mvn.w	r2, #1
 8005f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fd fc62 	bl	8003804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d10e      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f58:	2b80      	cmp	r3, #128	; 0x80
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fd6c 	bl	8006a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d10e      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d107      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9b5 	bl	8006302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0220 	mvn.w	r2, #32
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fd36 	bl	8006a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e0b4      	b.n	8006150 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	f200 809f 	bhi.w	800613c <HAL_TIM_PWM_ConfigChannel+0x170>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006039 	.word	0x08006039
 8006008:	0800613d 	.word	0x0800613d
 800600c:	0800613d 	.word	0x0800613d
 8006010:	0800613d 	.word	0x0800613d
 8006014:	08006079 	.word	0x08006079
 8006018:	0800613d 	.word	0x0800613d
 800601c:	0800613d 	.word	0x0800613d
 8006020:	0800613d 	.word	0x0800613d
 8006024:	080060bb 	.word	0x080060bb
 8006028:	0800613d 	.word	0x0800613d
 800602c:	0800613d 	.word	0x0800613d
 8006030:	0800613d 	.word	0x0800613d
 8006034:	080060fb 	.word	0x080060fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa0a 	bl	8006458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0208 	orr.w	r2, r2, #8
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0204 	bic.w	r2, r2, #4
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	619a      	str	r2, [r3, #24]
      break;
 8006076:	e062      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fa5a 	bl	8006538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6999      	ldr	r1, [r3, #24]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	619a      	str	r2, [r3, #24]
      break;
 80060b8:	e041      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 faaf 	bl	8006624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0208 	orr.w	r2, r2, #8
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0204 	bic.w	r2, r2, #4
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	61da      	str	r2, [r3, #28]
      break;
 80060f8:	e021      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fb03 	bl	800670c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69d9      	ldr	r1, [r3, #28]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	021a      	lsls	r2, r3, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	61da      	str	r2, [r3, #28]
      break;
 800613a:	e000      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800613c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_TIM_ConfigClockSource+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e0a6      	b.n	80062be <HAL_TIM_ConfigClockSource+0x166>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800618e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d067      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0x120>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d80b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x6c>
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d073      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d802      	bhi.n	80061ba <HAL_TIM_ConfigClockSource+0x62>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d06f      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061b8:	e078      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d06c      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
 80061be:	2b30      	cmp	r3, #48	; 0x30
 80061c0:	d06a      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061c2:	e073      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061c4:	2b70      	cmp	r3, #112	; 0x70
 80061c6:	d00d      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x8c>
 80061c8:	2b70      	cmp	r3, #112	; 0x70
 80061ca:	d804      	bhi.n	80061d6 <HAL_TIM_ConfigClockSource+0x7e>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d033      	beq.n	8006238 <HAL_TIM_ConfigClockSource+0xe0>
 80061d0:	2b60      	cmp	r3, #96	; 0x60
 80061d2:	d041      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061d4:	e06a      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d066      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x152>
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e0:	d017      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80061e2:	e063      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f000 fb5a 	bl	80068ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006206:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e04c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f000 fb43 	bl	80068ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006234:	609a      	str	r2, [r3, #8]
      break;
 8006236:	e039      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	461a      	mov	r2, r3
 8006246:	f000 fab7 	bl	80067b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2150      	movs	r1, #80	; 0x50
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fb10 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006256:	e029      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	f000 fad6 	bl	8006816 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2160      	movs	r1, #96	; 0x60
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fb00 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006276:	e019      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	f000 fa97 	bl	80067b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2140      	movs	r1, #64	; 0x40
 8006290:	4618      	mov	r0, r3
 8006292:	f000 faf0 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006296:	e009      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fae7 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e000      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a40      	ldr	r2, [pc, #256]	; (800642c <TIM_Base_SetConfig+0x114>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3a      	ldr	r2, [pc, #232]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <TIM_Base_SetConfig+0x114>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006378:	d027      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <TIM_Base_SetConfig+0x118>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d023      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2b      	ldr	r2, [pc, #172]	; (8006434 <TIM_Base_SetConfig+0x11c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <TIM_Base_SetConfig+0x120>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a29      	ldr	r2, [pc, #164]	; (800643c <TIM_Base_SetConfig+0x124>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d017      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a28      	ldr	r2, [pc, #160]	; (8006440 <TIM_Base_SetConfig+0x128>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <TIM_Base_SetConfig+0x12c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00f      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a26      	ldr	r2, [pc, #152]	; (8006448 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00b      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a25      	ldr	r2, [pc, #148]	; (800644c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d007      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d003      	beq.n	80063ca <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a23      	ldr	r2, [pc, #140]	; (8006454 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a0a      	ldr	r2, [pc, #40]	; (800642c <TIM_Base_SetConfig+0x114>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0xf8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0c      	ldr	r2, [pc, #48]	; (800643c <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d103      	bne.n	8006418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40000400 	.word	0x40000400
 8006434:	40000800 	.word	0x40000800
 8006438:	40000c00 	.word	0x40000c00
 800643c:	40010400 	.word	0x40010400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40001800 	.word	0x40001800
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40002000 	.word	0x40002000

08006458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0302 	bic.w	r3, r3, #2
 80064a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a20      	ldr	r2, [pc, #128]	; (8006530 <TIM_OC1_SetConfig+0xd8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC1_SetConfig+0x64>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <TIM_OC1_SetConfig+0xdc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0308 	bic.w	r3, r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <TIM_OC1_SetConfig+0xd8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC1_SetConfig+0x8e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC1_SetConfig+0xdc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d111      	bne.n	800650a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40010000 	.word	0x40010000
 8006534:	40010400 	.word	0x40010400

08006538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f023 0210 	bic.w	r2, r3, #16
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0320 	bic.w	r3, r3, #32
 8006582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a22      	ldr	r2, [pc, #136]	; (800661c <TIM_OC2_SetConfig+0xe4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC2_SetConfig+0x68>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a21      	ldr	r2, [pc, #132]	; (8006620 <TIM_OC2_SetConfig+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10d      	bne.n	80065bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a17      	ldr	r2, [pc, #92]	; (800661c <TIM_OC2_SetConfig+0xe4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC2_SetConfig+0x94>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <TIM_OC2_SetConfig+0xe8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d113      	bne.n	80065f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800666c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a21      	ldr	r2, [pc, #132]	; (8006704 <TIM_OC3_SetConfig+0xe0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0x66>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a20      	ldr	r2, [pc, #128]	; (8006708 <TIM_OC3_SetConfig+0xe4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d10d      	bne.n	80066a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a16      	ldr	r2, [pc, #88]	; (8006704 <TIM_OC3_SetConfig+0xe0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC3_SetConfig+0x92>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <TIM_OC3_SetConfig+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d113      	bne.n	80066de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	621a      	str	r2, [r3, #32]
}
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	40010000 	.word	0x40010000
 8006708:	40010400 	.word	0x40010400

0800670c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	021b      	lsls	r3, r3, #8
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a12      	ldr	r2, [pc, #72]	; (80067b0 <TIM_OC4_SetConfig+0xa4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC4_SetConfig+0x68>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a11      	ldr	r2, [pc, #68]	; (80067b4 <TIM_OC4_SetConfig+0xa8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d109      	bne.n	8006788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	019b      	lsls	r3, r3, #6
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010400 	.word	0x40010400

080067b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0201 	bic.w	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 030a 	bic.w	r3, r3, #10
 80067f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006816:	b480      	push	{r7}
 8006818:	b087      	sub	sp, #28
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0210 	bic.w	r2, r3, #16
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006852:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	f043 0307 	orr.w	r3, r3, #7
 8006898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2201      	movs	r2, #1
 8006900:	fa02 f303 	lsl.w	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e05a      	b.n	8006a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d022      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699c:	d01d      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1a      	ldr	r2, [pc, #104]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a17      	ldr	r2, [pc, #92]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10c      	bne.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40000800 	.word	0x40000800
 8006a20:	40000c00 	.word	0x40000c00
 8006a24:	40010400 	.word	0x40010400
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40001800 	.word	0x40001800

08006a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <__errno>:
 8006a58:	4b01      	ldr	r3, [pc, #4]	; (8006a60 <__errno+0x8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	20000010 	.word	0x20000010

08006a64 <__libc_init_array>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	4e0d      	ldr	r6, [pc, #52]	; (8006a9c <__libc_init_array+0x38>)
 8006a68:	4c0d      	ldr	r4, [pc, #52]	; (8006aa0 <__libc_init_array+0x3c>)
 8006a6a:	1ba4      	subs	r4, r4, r6
 8006a6c:	10a4      	asrs	r4, r4, #2
 8006a6e:	2500      	movs	r5, #0
 8006a70:	42a5      	cmp	r5, r4
 8006a72:	d109      	bne.n	8006a88 <__libc_init_array+0x24>
 8006a74:	4e0b      	ldr	r6, [pc, #44]	; (8006aa4 <__libc_init_array+0x40>)
 8006a76:	4c0c      	ldr	r4, [pc, #48]	; (8006aa8 <__libc_init_array+0x44>)
 8006a78:	f002 f85e 	bl	8008b38 <_init>
 8006a7c:	1ba4      	subs	r4, r4, r6
 8006a7e:	10a4      	asrs	r4, r4, #2
 8006a80:	2500      	movs	r5, #0
 8006a82:	42a5      	cmp	r5, r4
 8006a84:	d105      	bne.n	8006a92 <__libc_init_array+0x2e>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a8c:	4798      	blx	r3
 8006a8e:	3501      	adds	r5, #1
 8006a90:	e7ee      	b.n	8006a70 <__libc_init_array+0xc>
 8006a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a96:	4798      	blx	r3
 8006a98:	3501      	adds	r5, #1
 8006a9a:	e7f2      	b.n	8006a82 <__libc_init_array+0x1e>
 8006a9c:	08008ea0 	.word	0x08008ea0
 8006aa0:	08008ea0 	.word	0x08008ea0
 8006aa4:	08008ea0 	.word	0x08008ea0
 8006aa8:	08008ea4 	.word	0x08008ea4

08006aac <malloc>:
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <malloc+0xc>)
 8006aae:	4601      	mov	r1, r0
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	f000 b859 	b.w	8006b68 <_malloc_r>
 8006ab6:	bf00      	nop
 8006ab8:	20000010 	.word	0x20000010

08006abc <memset>:
 8006abc:	4402      	add	r2, r0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d100      	bne.n	8006ac6 <memset+0xa>
 8006ac4:	4770      	bx	lr
 8006ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aca:	e7f9      	b.n	8006ac0 <memset+0x4>

08006acc <_free_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d045      	beq.n	8006b60 <_free_r+0x94>
 8006ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad8:	1f0c      	subs	r4, r1, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bfb8      	it	lt
 8006ade:	18e4      	addlt	r4, r4, r3
 8006ae0:	f001 fb87 	bl	80081f2 <__malloc_lock>
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <_free_r+0x98>)
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	4610      	mov	r0, r2
 8006aea:	b933      	cbnz	r3, 8006afa <_free_r+0x2e>
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	6014      	str	r4, [r2, #0]
 8006af0:	4628      	mov	r0, r5
 8006af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006af6:	f001 bb7d 	b.w	80081f4 <__malloc_unlock>
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	d90c      	bls.n	8006b18 <_free_r+0x4c>
 8006afe:	6821      	ldr	r1, [r4, #0]
 8006b00:	1862      	adds	r2, r4, r1
 8006b02:	4293      	cmp	r3, r2
 8006b04:	bf04      	itt	eq
 8006b06:	681a      	ldreq	r2, [r3, #0]
 8006b08:	685b      	ldreq	r3, [r3, #4]
 8006b0a:	6063      	str	r3, [r4, #4]
 8006b0c:	bf04      	itt	eq
 8006b0e:	1852      	addeq	r2, r2, r1
 8006b10:	6022      	streq	r2, [r4, #0]
 8006b12:	6004      	str	r4, [r0, #0]
 8006b14:	e7ec      	b.n	8006af0 <_free_r+0x24>
 8006b16:	4613      	mov	r3, r2
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	b10a      	cbz	r2, 8006b20 <_free_r+0x54>
 8006b1c:	42a2      	cmp	r2, r4
 8006b1e:	d9fa      	bls.n	8006b16 <_free_r+0x4a>
 8006b20:	6819      	ldr	r1, [r3, #0]
 8006b22:	1858      	adds	r0, r3, r1
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d10b      	bne.n	8006b40 <_free_r+0x74>
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	4401      	add	r1, r0
 8006b2c:	1858      	adds	r0, r3, r1
 8006b2e:	4282      	cmp	r2, r0
 8006b30:	6019      	str	r1, [r3, #0]
 8006b32:	d1dd      	bne.n	8006af0 <_free_r+0x24>
 8006b34:	6810      	ldr	r0, [r2, #0]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	4401      	add	r1, r0
 8006b3c:	6019      	str	r1, [r3, #0]
 8006b3e:	e7d7      	b.n	8006af0 <_free_r+0x24>
 8006b40:	d902      	bls.n	8006b48 <_free_r+0x7c>
 8006b42:	230c      	movs	r3, #12
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	e7d3      	b.n	8006af0 <_free_r+0x24>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	1821      	adds	r1, r4, r0
 8006b4c:	428a      	cmp	r2, r1
 8006b4e:	bf04      	itt	eq
 8006b50:	6811      	ldreq	r1, [r2, #0]
 8006b52:	6852      	ldreq	r2, [r2, #4]
 8006b54:	6062      	str	r2, [r4, #4]
 8006b56:	bf04      	itt	eq
 8006b58:	1809      	addeq	r1, r1, r0
 8006b5a:	6021      	streq	r1, [r4, #0]
 8006b5c:	605c      	str	r4, [r3, #4]
 8006b5e:	e7c7      	b.n	8006af0 <_free_r+0x24>
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	2000043c 	.word	0x2000043c

08006b68 <_malloc_r>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	1ccd      	adds	r5, r1, #3
 8006b6c:	f025 0503 	bic.w	r5, r5, #3
 8006b70:	3508      	adds	r5, #8
 8006b72:	2d0c      	cmp	r5, #12
 8006b74:	bf38      	it	cc
 8006b76:	250c      	movcc	r5, #12
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	db01      	blt.n	8006b82 <_malloc_r+0x1a>
 8006b7e:	42a9      	cmp	r1, r5
 8006b80:	d903      	bls.n	8006b8a <_malloc_r+0x22>
 8006b82:	230c      	movs	r3, #12
 8006b84:	6033      	str	r3, [r6, #0]
 8006b86:	2000      	movs	r0, #0
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	f001 fb32 	bl	80081f2 <__malloc_lock>
 8006b8e:	4a21      	ldr	r2, [pc, #132]	; (8006c14 <_malloc_r+0xac>)
 8006b90:	6814      	ldr	r4, [r2, #0]
 8006b92:	4621      	mov	r1, r4
 8006b94:	b991      	cbnz	r1, 8006bbc <_malloc_r+0x54>
 8006b96:	4c20      	ldr	r4, [pc, #128]	; (8006c18 <_malloc_r+0xb0>)
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	b91b      	cbnz	r3, 8006ba4 <_malloc_r+0x3c>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 fc99 	bl	80074d4 <_sbrk_r>
 8006ba2:	6020      	str	r0, [r4, #0]
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f000 fc94 	bl	80074d4 <_sbrk_r>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d124      	bne.n	8006bfa <_malloc_r+0x92>
 8006bb0:	230c      	movs	r3, #12
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f001 fb1d 	bl	80081f4 <__malloc_unlock>
 8006bba:	e7e4      	b.n	8006b86 <_malloc_r+0x1e>
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	1b5b      	subs	r3, r3, r5
 8006bc0:	d418      	bmi.n	8006bf4 <_malloc_r+0x8c>
 8006bc2:	2b0b      	cmp	r3, #11
 8006bc4:	d90f      	bls.n	8006be6 <_malloc_r+0x7e>
 8006bc6:	600b      	str	r3, [r1, #0]
 8006bc8:	50cd      	str	r5, [r1, r3]
 8006bca:	18cc      	adds	r4, r1, r3
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f001 fb11 	bl	80081f4 <__malloc_unlock>
 8006bd2:	f104 000b 	add.w	r0, r4, #11
 8006bd6:	1d23      	adds	r3, r4, #4
 8006bd8:	f020 0007 	bic.w	r0, r0, #7
 8006bdc:	1ac3      	subs	r3, r0, r3
 8006bde:	d0d3      	beq.n	8006b88 <_malloc_r+0x20>
 8006be0:	425a      	negs	r2, r3
 8006be2:	50e2      	str	r2, [r4, r3]
 8006be4:	e7d0      	b.n	8006b88 <_malloc_r+0x20>
 8006be6:	428c      	cmp	r4, r1
 8006be8:	684b      	ldr	r3, [r1, #4]
 8006bea:	bf16      	itet	ne
 8006bec:	6063      	strne	r3, [r4, #4]
 8006bee:	6013      	streq	r3, [r2, #0]
 8006bf0:	460c      	movne	r4, r1
 8006bf2:	e7eb      	b.n	8006bcc <_malloc_r+0x64>
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	6849      	ldr	r1, [r1, #4]
 8006bf8:	e7cc      	b.n	8006b94 <_malloc_r+0x2c>
 8006bfa:	1cc4      	adds	r4, r0, #3
 8006bfc:	f024 0403 	bic.w	r4, r4, #3
 8006c00:	42a0      	cmp	r0, r4
 8006c02:	d005      	beq.n	8006c10 <_malloc_r+0xa8>
 8006c04:	1a21      	subs	r1, r4, r0
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 fc64 	bl	80074d4 <_sbrk_r>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d0cf      	beq.n	8006bb0 <_malloc_r+0x48>
 8006c10:	6025      	str	r5, [r4, #0]
 8006c12:	e7db      	b.n	8006bcc <_malloc_r+0x64>
 8006c14:	2000043c 	.word	0x2000043c
 8006c18:	20000440 	.word	0x20000440

08006c1c <__cvt>:
 8006c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	ec55 4b10 	vmov	r4, r5, d0
 8006c24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006c26:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	460e      	mov	r6, r1
 8006c2e:	4691      	mov	r9, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	bfb8      	it	lt
 8006c34:	4622      	movlt	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	f027 0720 	bic.w	r7, r7, #32
 8006c3c:	bfbb      	ittet	lt
 8006c3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c42:	461d      	movlt	r5, r3
 8006c44:	2300      	movge	r3, #0
 8006c46:	232d      	movlt	r3, #45	; 0x2d
 8006c48:	bfb8      	it	lt
 8006c4a:	4614      	movlt	r4, r2
 8006c4c:	2f46      	cmp	r7, #70	; 0x46
 8006c4e:	700b      	strb	r3, [r1, #0]
 8006c50:	d004      	beq.n	8006c5c <__cvt+0x40>
 8006c52:	2f45      	cmp	r7, #69	; 0x45
 8006c54:	d100      	bne.n	8006c58 <__cvt+0x3c>
 8006c56:	3601      	adds	r6, #1
 8006c58:	2102      	movs	r1, #2
 8006c5a:	e000      	b.n	8006c5e <__cvt+0x42>
 8006c5c:	2103      	movs	r1, #3
 8006c5e:	ab03      	add	r3, sp, #12
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	ab02      	add	r3, sp, #8
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	4632      	mov	r2, r6
 8006c68:	4653      	mov	r3, sl
 8006c6a:	ec45 4b10 	vmov	d0, r4, r5
 8006c6e:	f000 fcef 	bl	8007650 <_dtoa_r>
 8006c72:	2f47      	cmp	r7, #71	; 0x47
 8006c74:	4680      	mov	r8, r0
 8006c76:	d102      	bne.n	8006c7e <__cvt+0x62>
 8006c78:	f019 0f01 	tst.w	r9, #1
 8006c7c:	d026      	beq.n	8006ccc <__cvt+0xb0>
 8006c7e:	2f46      	cmp	r7, #70	; 0x46
 8006c80:	eb08 0906 	add.w	r9, r8, r6
 8006c84:	d111      	bne.n	8006caa <__cvt+0x8e>
 8006c86:	f898 3000 	ldrb.w	r3, [r8]
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d10a      	bne.n	8006ca4 <__cvt+0x88>
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2300      	movs	r3, #0
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c9a:	b918      	cbnz	r0, 8006ca4 <__cvt+0x88>
 8006c9c:	f1c6 0601 	rsb	r6, r6, #1
 8006ca0:	f8ca 6000 	str.w	r6, [sl]
 8006ca4:	f8da 3000 	ldr.w	r3, [sl]
 8006ca8:	4499      	add	r9, r3
 8006caa:	2200      	movs	r2, #0
 8006cac:	2300      	movs	r3, #0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f7f9 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cb6:	b938      	cbnz	r0, 8006cc8 <__cvt+0xac>
 8006cb8:	2230      	movs	r2, #48	; 0x30
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	454b      	cmp	r3, r9
 8006cbe:	d205      	bcs.n	8006ccc <__cvt+0xb0>
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	9103      	str	r1, [sp, #12]
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e7f8      	b.n	8006cba <__cvt+0x9e>
 8006cc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd0:	eba3 0308 	sub.w	r3, r3, r8
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	b004      	add	sp, #16
 8006cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006cde <__exponent>:
 8006cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	bfba      	itte	lt
 8006ce6:	4249      	neglt	r1, r1
 8006ce8:	232d      	movlt	r3, #45	; 0x2d
 8006cea:	232b      	movge	r3, #43	; 0x2b
 8006cec:	2909      	cmp	r1, #9
 8006cee:	f804 2b02 	strb.w	r2, [r4], #2
 8006cf2:	7043      	strb	r3, [r0, #1]
 8006cf4:	dd20      	ble.n	8006d38 <__exponent+0x5a>
 8006cf6:	f10d 0307 	add.w	r3, sp, #7
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	260a      	movs	r6, #10
 8006cfe:	fb91 f5f6 	sdiv	r5, r1, r6
 8006d02:	fb06 1115 	mls	r1, r6, r5, r1
 8006d06:	3130      	adds	r1, #48	; 0x30
 8006d08:	2d09      	cmp	r5, #9
 8006d0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d0e:	f103 32ff 	add.w	r2, r3, #4294967295
 8006d12:	4629      	mov	r1, r5
 8006d14:	dc09      	bgt.n	8006d2a <__exponent+0x4c>
 8006d16:	3130      	adds	r1, #48	; 0x30
 8006d18:	3b02      	subs	r3, #2
 8006d1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d1e:	42bb      	cmp	r3, r7
 8006d20:	4622      	mov	r2, r4
 8006d22:	d304      	bcc.n	8006d2e <__exponent+0x50>
 8006d24:	1a10      	subs	r0, r2, r0
 8006d26:	b003      	add	sp, #12
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	e7e7      	b.n	8006cfe <__exponent+0x20>
 8006d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d32:	f804 2b01 	strb.w	r2, [r4], #1
 8006d36:	e7f2      	b.n	8006d1e <__exponent+0x40>
 8006d38:	2330      	movs	r3, #48	; 0x30
 8006d3a:	4419      	add	r1, r3
 8006d3c:	7083      	strb	r3, [r0, #2]
 8006d3e:	1d02      	adds	r2, r0, #4
 8006d40:	70c1      	strb	r1, [r0, #3]
 8006d42:	e7ef      	b.n	8006d24 <__exponent+0x46>

08006d44 <_printf_float>:
 8006d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d48:	b08d      	sub	sp, #52	; 0x34
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006d50:	4616      	mov	r6, r2
 8006d52:	461f      	mov	r7, r3
 8006d54:	4605      	mov	r5, r0
 8006d56:	f001 fa33 	bl	80081c0 <_localeconv_r>
 8006d5a:	6803      	ldr	r3, [r0, #0]
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7f9 fa36 	bl	80001d0 <strlen>
 8006d64:	2300      	movs	r3, #0
 8006d66:	930a      	str	r3, [sp, #40]	; 0x28
 8006d68:	f8d8 3000 	ldr.w	r3, [r8]
 8006d6c:	9005      	str	r0, [sp, #20]
 8006d6e:	3307      	adds	r3, #7
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	f103 0208 	add.w	r2, r3, #8
 8006d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8006d80:	f8c8 2000 	str.w	r2, [r8]
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d8c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d94:	9307      	str	r3, [sp, #28]
 8006d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	4ba7      	ldr	r3, [pc, #668]	; (800703c <_printf_float+0x2f8>)
 8006da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da4:	f7f9 fec2 	bl	8000b2c <__aeabi_dcmpun>
 8006da8:	bb70      	cbnz	r0, 8006e08 <_printf_float+0xc4>
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dae:	4ba3      	ldr	r3, [pc, #652]	; (800703c <_printf_float+0x2f8>)
 8006db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006db4:	f7f9 fe9c 	bl	8000af0 <__aeabi_dcmple>
 8006db8:	bb30      	cbnz	r0, 8006e08 <_printf_float+0xc4>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	f7f9 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8006dc6:	b110      	cbz	r0, 8006dce <_printf_float+0x8a>
 8006dc8:	232d      	movs	r3, #45	; 0x2d
 8006dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dce:	4a9c      	ldr	r2, [pc, #624]	; (8007040 <_printf_float+0x2fc>)
 8006dd0:	4b9c      	ldr	r3, [pc, #624]	; (8007044 <_printf_float+0x300>)
 8006dd2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006dd6:	bf8c      	ite	hi
 8006dd8:	4690      	movhi	r8, r2
 8006dda:	4698      	movls	r8, r3
 8006ddc:	2303      	movs	r3, #3
 8006dde:	f02b 0204 	bic.w	r2, fp, #4
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	f04f 0900 	mov.w	r9, #0
 8006dea:	9700      	str	r7, [sp, #0]
 8006dec:	4633      	mov	r3, r6
 8006dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8006df0:	4621      	mov	r1, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f9e6 	bl	80071c4 <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f040 808d 	bne.w	8006f18 <_printf_float+0x1d4>
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006e02:	b00d      	add	sp, #52	; 0x34
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	4649      	mov	r1, r9
 8006e10:	f7f9 fe8c 	bl	8000b2c <__aeabi_dcmpun>
 8006e14:	b110      	cbz	r0, 8006e1c <_printf_float+0xd8>
 8006e16:	4a8c      	ldr	r2, [pc, #560]	; (8007048 <_printf_float+0x304>)
 8006e18:	4b8c      	ldr	r3, [pc, #560]	; (800704c <_printf_float+0x308>)
 8006e1a:	e7da      	b.n	8006dd2 <_printf_float+0x8e>
 8006e1c:	6861      	ldr	r1, [r4, #4]
 8006e1e:	1c4b      	adds	r3, r1, #1
 8006e20:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006e24:	a80a      	add	r0, sp, #40	; 0x28
 8006e26:	d13e      	bne.n	8006ea6 <_printf_float+0x162>
 8006e28:	2306      	movs	r3, #6
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006e32:	ab09      	add	r3, sp, #36	; 0x24
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	ec49 8b10 	vmov	d0, r8, r9
 8006e3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e3e:	6022      	str	r2, [r4, #0]
 8006e40:	f8cd a004 	str.w	sl, [sp, #4]
 8006e44:	6861      	ldr	r1, [r4, #4]
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff fee8 	bl	8006c1c <__cvt>
 8006e4c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006e50:	2b47      	cmp	r3, #71	; 0x47
 8006e52:	4680      	mov	r8, r0
 8006e54:	d109      	bne.n	8006e6a <_printf_float+0x126>
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	1cd8      	adds	r0, r3, #3
 8006e5a:	db02      	blt.n	8006e62 <_printf_float+0x11e>
 8006e5c:	6862      	ldr	r2, [r4, #4]
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	dd47      	ble.n	8006ef2 <_printf_float+0x1ae>
 8006e62:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e66:	fa5f fa8a 	uxtb.w	sl, sl
 8006e6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006e6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e70:	d824      	bhi.n	8006ebc <_printf_float+0x178>
 8006e72:	3901      	subs	r1, #1
 8006e74:	4652      	mov	r2, sl
 8006e76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e7a:	9109      	str	r1, [sp, #36]	; 0x24
 8006e7c:	f7ff ff2f 	bl	8006cde <__exponent>
 8006e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e82:	1813      	adds	r3, r2, r0
 8006e84:	2a01      	cmp	r2, #1
 8006e86:	4681      	mov	r9, r0
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	dc02      	bgt.n	8006e92 <_printf_float+0x14e>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d1      	lsls	r1, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x152>
 8006e92:	3301      	adds	r3, #1
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0a5      	beq.n	8006dea <_printf_float+0xa6>
 8006e9e:	232d      	movs	r3, #45	; 0x2d
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea4:	e7a1      	b.n	8006dea <_printf_float+0xa6>
 8006ea6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006eaa:	f000 8177 	beq.w	800719c <_printf_float+0x458>
 8006eae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006eb2:	d1bb      	bne.n	8006e2c <_printf_float+0xe8>
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	d1b9      	bne.n	8006e2c <_printf_float+0xe8>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e7b6      	b.n	8006e2a <_printf_float+0xe6>
 8006ebc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006ec0:	d119      	bne.n	8006ef6 <_printf_float+0x1b2>
 8006ec2:	2900      	cmp	r1, #0
 8006ec4:	6863      	ldr	r3, [r4, #4]
 8006ec6:	dd0c      	ble.n	8006ee2 <_printf_float+0x19e>
 8006ec8:	6121      	str	r1, [r4, #16]
 8006eca:	b913      	cbnz	r3, 8006ed2 <_printf_float+0x18e>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	07d2      	lsls	r2, r2, #31
 8006ed0:	d502      	bpl.n	8006ed8 <_printf_float+0x194>
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	440b      	add	r3, r1
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	65a3      	str	r3, [r4, #88]	; 0x58
 8006edc:	f04f 0900 	mov.w	r9, #0
 8006ee0:	e7d9      	b.n	8006e96 <_printf_float+0x152>
 8006ee2:	b913      	cbnz	r3, 8006eea <_printf_float+0x1a6>
 8006ee4:	6822      	ldr	r2, [r4, #0]
 8006ee6:	07d0      	lsls	r0, r2, #31
 8006ee8:	d501      	bpl.n	8006eee <_printf_float+0x1aa>
 8006eea:	3302      	adds	r3, #2
 8006eec:	e7f3      	b.n	8006ed6 <_printf_float+0x192>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7f1      	b.n	8006ed6 <_printf_float+0x192>
 8006ef2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006efa:	4293      	cmp	r3, r2
 8006efc:	db05      	blt.n	8006f0a <_printf_float+0x1c6>
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	6123      	str	r3, [r4, #16]
 8006f02:	07d1      	lsls	r1, r2, #31
 8006f04:	d5e8      	bpl.n	8006ed8 <_printf_float+0x194>
 8006f06:	3301      	adds	r3, #1
 8006f08:	e7e5      	b.n	8006ed6 <_printf_float+0x192>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bfd4      	ite	le
 8006f0e:	f1c3 0302 	rsble	r3, r3, #2
 8006f12:	2301      	movgt	r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	e7de      	b.n	8006ed6 <_printf_float+0x192>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	055a      	lsls	r2, r3, #21
 8006f1c:	d407      	bmi.n	8006f2e <_printf_float+0x1ea>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	4642      	mov	r2, r8
 8006f22:	4631      	mov	r1, r6
 8006f24:	4628      	mov	r0, r5
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d12b      	bne.n	8006f84 <_printf_float+0x240>
 8006f2c:	e767      	b.n	8006dfe <_printf_float+0xba>
 8006f2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006f32:	f240 80dc 	bls.w	80070ee <_printf_float+0x3aa>
 8006f36:	2200      	movs	r2, #0
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f3e:	f7f9 fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d033      	beq.n	8006fae <_printf_float+0x26a>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4a41      	ldr	r2, [pc, #260]	; (8007050 <_printf_float+0x30c>)
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f af54 	beq.w	8006dfe <_printf_float+0xba>
 8006f56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	db02      	blt.n	8006f64 <_printf_float+0x220>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	07d8      	lsls	r0, r3, #31
 8006f62:	d50f      	bpl.n	8006f84 <_printf_float+0x240>
 8006f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f af45 	beq.w	8006dfe <_printf_float+0xba>
 8006f74:	f04f 0800 	mov.w	r8, #0
 8006f78:	f104 091a 	add.w	r9, r4, #26
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4543      	cmp	r3, r8
 8006f82:	dc09      	bgt.n	8006f98 <_printf_float+0x254>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	079b      	lsls	r3, r3, #30
 8006f88:	f100 8103 	bmi.w	8007192 <_printf_float+0x44e>
 8006f8c:	68e0      	ldr	r0, [r4, #12]
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f90:	4298      	cmp	r0, r3
 8006f92:	bfb8      	it	lt
 8006f94:	4618      	movlt	r0, r3
 8006f96:	e734      	b.n	8006e02 <_printf_float+0xbe>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	464a      	mov	r2, r9
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	f43f af2b 	beq.w	8006dfe <_printf_float+0xba>
 8006fa8:	f108 0801 	add.w	r8, r8, #1
 8006fac:	e7e6      	b.n	8006f7c <_printf_float+0x238>
 8006fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	dc2b      	bgt.n	800700c <_printf_float+0x2c8>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4a26      	ldr	r2, [pc, #152]	; (8007050 <_printf_float+0x30c>)
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f43f af1d 	beq.w	8006dfe <_printf_float+0xba>
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	b923      	cbnz	r3, 8006fd2 <_printf_float+0x28e>
 8006fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fca:	b913      	cbnz	r3, 8006fd2 <_printf_float+0x28e>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d5d8      	bpl.n	8006f84 <_printf_float+0x240>
 8006fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f af0e 	beq.w	8006dfe <_printf_float+0xba>
 8006fe2:	f04f 0900 	mov.w	r9, #0
 8006fe6:	f104 0a1a 	add.w	sl, r4, #26
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	425b      	negs	r3, r3
 8006fee:	454b      	cmp	r3, r9
 8006ff0:	dc01      	bgt.n	8006ff6 <_printf_float+0x2b2>
 8006ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff4:	e794      	b.n	8006f20 <_printf_float+0x1dc>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4652      	mov	r2, sl
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b8      	blx	r7
 8007000:	3001      	adds	r0, #1
 8007002:	f43f aefc 	beq.w	8006dfe <_printf_float+0xba>
 8007006:	f109 0901 	add.w	r9, r9, #1
 800700a:	e7ee      	b.n	8006fea <_printf_float+0x2a6>
 800700c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800700e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007010:	429a      	cmp	r2, r3
 8007012:	bfa8      	it	ge
 8007014:	461a      	movge	r2, r3
 8007016:	2a00      	cmp	r2, #0
 8007018:	4691      	mov	r9, r2
 800701a:	dd07      	ble.n	800702c <_printf_float+0x2e8>
 800701c:	4613      	mov	r3, r2
 800701e:	4631      	mov	r1, r6
 8007020:	4642      	mov	r2, r8
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f aee9 	beq.w	8006dfe <_printf_float+0xba>
 800702c:	f104 031a 	add.w	r3, r4, #26
 8007030:	f04f 0b00 	mov.w	fp, #0
 8007034:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007038:	9306      	str	r3, [sp, #24]
 800703a:	e015      	b.n	8007068 <_printf_float+0x324>
 800703c:	7fefffff 	.word	0x7fefffff
 8007040:	08008c3c 	.word	0x08008c3c
 8007044:	08008c38 	.word	0x08008c38
 8007048:	08008c44 	.word	0x08008c44
 800704c:	08008c40 	.word	0x08008c40
 8007050:	08008c48 	.word	0x08008c48
 8007054:	2301      	movs	r3, #1
 8007056:	9a06      	ldr	r2, [sp, #24]
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f aecd 	beq.w	8006dfe <_printf_float+0xba>
 8007064:	f10b 0b01 	add.w	fp, fp, #1
 8007068:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800706c:	ebaa 0309 	sub.w	r3, sl, r9
 8007070:	455b      	cmp	r3, fp
 8007072:	dcef      	bgt.n	8007054 <_printf_float+0x310>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	429a      	cmp	r2, r3
 800707a:	44d0      	add	r8, sl
 800707c:	db15      	blt.n	80070aa <_printf_float+0x366>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	07da      	lsls	r2, r3, #31
 8007082:	d412      	bmi.n	80070aa <_printf_float+0x366>
 8007084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007086:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007088:	eba3 020a 	sub.w	r2, r3, sl
 800708c:	eba3 0a01 	sub.w	sl, r3, r1
 8007090:	4592      	cmp	sl, r2
 8007092:	bfa8      	it	ge
 8007094:	4692      	movge	sl, r2
 8007096:	f1ba 0f00 	cmp.w	sl, #0
 800709a:	dc0e      	bgt.n	80070ba <_printf_float+0x376>
 800709c:	f04f 0800 	mov.w	r8, #0
 80070a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070a4:	f104 091a 	add.w	r9, r4, #26
 80070a8:	e019      	b.n	80070de <_printf_float+0x39a>
 80070aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ae:	4631      	mov	r1, r6
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b8      	blx	r7
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1e5      	bne.n	8007084 <_printf_float+0x340>
 80070b8:	e6a1      	b.n	8006dfe <_printf_float+0xba>
 80070ba:	4653      	mov	r3, sl
 80070bc:	4642      	mov	r2, r8
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b8      	blx	r7
 80070c4:	3001      	adds	r0, #1
 80070c6:	d1e9      	bne.n	800709c <_printf_float+0x358>
 80070c8:	e699      	b.n	8006dfe <_printf_float+0xba>
 80070ca:	2301      	movs	r3, #1
 80070cc:	464a      	mov	r2, r9
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f ae92 	beq.w	8006dfe <_printf_float+0xba>
 80070da:	f108 0801 	add.w	r8, r8, #1
 80070de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	eba3 030a 	sub.w	r3, r3, sl
 80070e8:	4543      	cmp	r3, r8
 80070ea:	dcee      	bgt.n	80070ca <_printf_float+0x386>
 80070ec:	e74a      	b.n	8006f84 <_printf_float+0x240>
 80070ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f0:	2a01      	cmp	r2, #1
 80070f2:	dc01      	bgt.n	80070f8 <_printf_float+0x3b4>
 80070f4:	07db      	lsls	r3, r3, #31
 80070f6:	d53a      	bpl.n	800716e <_printf_float+0x42a>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4642      	mov	r2, r8
 80070fc:	4631      	mov	r1, r6
 80070fe:	4628      	mov	r0, r5
 8007100:	47b8      	blx	r7
 8007102:	3001      	adds	r0, #1
 8007104:	f43f ae7b 	beq.w	8006dfe <_printf_float+0xba>
 8007108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	f43f ae71 	beq.w	8006dfe <_printf_float+0xba>
 800711c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800711e:	2200      	movs	r2, #0
 8007120:	f103 3aff 	add.w	sl, r3, #4294967295
 8007124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007128:	2300      	movs	r3, #0
 800712a:	f7f9 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800712e:	b9c8      	cbnz	r0, 8007164 <_printf_float+0x420>
 8007130:	4653      	mov	r3, sl
 8007132:	4642      	mov	r2, r8
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	d10e      	bne.n	800715c <_printf_float+0x418>
 800713e:	e65e      	b.n	8006dfe <_printf_float+0xba>
 8007140:	2301      	movs	r3, #1
 8007142:	4652      	mov	r2, sl
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f ae57 	beq.w	8006dfe <_printf_float+0xba>
 8007150:	f108 0801 	add.w	r8, r8, #1
 8007154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007156:	3b01      	subs	r3, #1
 8007158:	4543      	cmp	r3, r8
 800715a:	dcf1      	bgt.n	8007140 <_printf_float+0x3fc>
 800715c:	464b      	mov	r3, r9
 800715e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007162:	e6de      	b.n	8006f22 <_printf_float+0x1de>
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	f104 0a1a 	add.w	sl, r4, #26
 800716c:	e7f2      	b.n	8007154 <_printf_float+0x410>
 800716e:	2301      	movs	r3, #1
 8007170:	e7df      	b.n	8007132 <_printf_float+0x3ee>
 8007172:	2301      	movs	r3, #1
 8007174:	464a      	mov	r2, r9
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae3e 	beq.w	8006dfe <_printf_float+0xba>
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	4543      	cmp	r3, r8
 800718e:	dcf0      	bgt.n	8007172 <_printf_float+0x42e>
 8007190:	e6fc      	b.n	8006f8c <_printf_float+0x248>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	f104 0919 	add.w	r9, r4, #25
 800719a:	e7f4      	b.n	8007186 <_printf_float+0x442>
 800719c:	2900      	cmp	r1, #0
 800719e:	f43f ae8b 	beq.w	8006eb8 <_printf_float+0x174>
 80071a2:	2300      	movs	r3, #0
 80071a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80071a8:	ab09      	add	r3, sp, #36	; 0x24
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	ec49 8b10 	vmov	d0, r8, r9
 80071b0:	6022      	str	r2, [r4, #0]
 80071b2:	f8cd a004 	str.w	sl, [sp, #4]
 80071b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7ff fd2e 	bl	8006c1c <__cvt>
 80071c0:	4680      	mov	r8, r0
 80071c2:	e648      	b.n	8006e56 <_printf_float+0x112>

080071c4 <_printf_common>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	4691      	mov	r9, r2
 80071ca:	461f      	mov	r7, r3
 80071cc:	688a      	ldr	r2, [r1, #8]
 80071ce:	690b      	ldr	r3, [r1, #16]
 80071d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	bfb8      	it	lt
 80071d8:	4613      	movlt	r3, r2
 80071da:	f8c9 3000 	str.w	r3, [r9]
 80071de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071e2:	4606      	mov	r6, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	b112      	cbz	r2, 80071ee <_printf_common+0x2a>
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c9 3000 	str.w	r3, [r9]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	0699      	lsls	r1, r3, #26
 80071f2:	bf42      	ittt	mi
 80071f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80071f8:	3302      	addmi	r3, #2
 80071fa:	f8c9 3000 	strmi.w	r3, [r9]
 80071fe:	6825      	ldr	r5, [r4, #0]
 8007200:	f015 0506 	ands.w	r5, r5, #6
 8007204:	d107      	bne.n	8007216 <_printf_common+0x52>
 8007206:	f104 0a19 	add.w	sl, r4, #25
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	f8d9 2000 	ldr.w	r2, [r9]
 8007210:	1a9b      	subs	r3, r3, r2
 8007212:	42ab      	cmp	r3, r5
 8007214:	dc28      	bgt.n	8007268 <_printf_common+0xa4>
 8007216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	3300      	adds	r3, #0
 800721e:	bf18      	it	ne
 8007220:	2301      	movne	r3, #1
 8007222:	0692      	lsls	r2, r2, #26
 8007224:	d42d      	bmi.n	8007282 <_printf_common+0xbe>
 8007226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800722a:	4639      	mov	r1, r7
 800722c:	4630      	mov	r0, r6
 800722e:	47c0      	blx	r8
 8007230:	3001      	adds	r0, #1
 8007232:	d020      	beq.n	8007276 <_printf_common+0xb2>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	68e5      	ldr	r5, [r4, #12]
 8007238:	f8d9 2000 	ldr.w	r2, [r9]
 800723c:	f003 0306 	and.w	r3, r3, #6
 8007240:	2b04      	cmp	r3, #4
 8007242:	bf08      	it	eq
 8007244:	1aad      	subeq	r5, r5, r2
 8007246:	68a3      	ldr	r3, [r4, #8]
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	bf0c      	ite	eq
 800724c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007250:	2500      	movne	r5, #0
 8007252:	4293      	cmp	r3, r2
 8007254:	bfc4      	itt	gt
 8007256:	1a9b      	subgt	r3, r3, r2
 8007258:	18ed      	addgt	r5, r5, r3
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	341a      	adds	r4, #26
 8007260:	454d      	cmp	r5, r9
 8007262:	d11a      	bne.n	800729a <_printf_common+0xd6>
 8007264:	2000      	movs	r0, #0
 8007266:	e008      	b.n	800727a <_printf_common+0xb6>
 8007268:	2301      	movs	r3, #1
 800726a:	4652      	mov	r2, sl
 800726c:	4639      	mov	r1, r7
 800726e:	4630      	mov	r0, r6
 8007270:	47c0      	blx	r8
 8007272:	3001      	adds	r0, #1
 8007274:	d103      	bne.n	800727e <_printf_common+0xba>
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727e:	3501      	adds	r5, #1
 8007280:	e7c3      	b.n	800720a <_printf_common+0x46>
 8007282:	18e1      	adds	r1, r4, r3
 8007284:	1c5a      	adds	r2, r3, #1
 8007286:	2030      	movs	r0, #48	; 0x30
 8007288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800728c:	4422      	add	r2, r4
 800728e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007296:	3302      	adds	r3, #2
 8007298:	e7c5      	b.n	8007226 <_printf_common+0x62>
 800729a:	2301      	movs	r3, #1
 800729c:	4622      	mov	r2, r4
 800729e:	4639      	mov	r1, r7
 80072a0:	4630      	mov	r0, r6
 80072a2:	47c0      	blx	r8
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0e6      	beq.n	8007276 <_printf_common+0xb2>
 80072a8:	f109 0901 	add.w	r9, r9, #1
 80072ac:	e7d8      	b.n	8007260 <_printf_common+0x9c>
	...

080072b0 <_printf_i>:
 80072b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80072b8:	460c      	mov	r4, r1
 80072ba:	7e09      	ldrb	r1, [r1, #24]
 80072bc:	b085      	sub	sp, #20
 80072be:	296e      	cmp	r1, #110	; 0x6e
 80072c0:	4617      	mov	r7, r2
 80072c2:	4606      	mov	r6, r0
 80072c4:	4698      	mov	r8, r3
 80072c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c8:	f000 80b3 	beq.w	8007432 <_printf_i+0x182>
 80072cc:	d822      	bhi.n	8007314 <_printf_i+0x64>
 80072ce:	2963      	cmp	r1, #99	; 0x63
 80072d0:	d036      	beq.n	8007340 <_printf_i+0x90>
 80072d2:	d80a      	bhi.n	80072ea <_printf_i+0x3a>
 80072d4:	2900      	cmp	r1, #0
 80072d6:	f000 80b9 	beq.w	800744c <_printf_i+0x19c>
 80072da:	2958      	cmp	r1, #88	; 0x58
 80072dc:	f000 8083 	beq.w	80073e6 <_printf_i+0x136>
 80072e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80072e8:	e032      	b.n	8007350 <_printf_i+0xa0>
 80072ea:	2964      	cmp	r1, #100	; 0x64
 80072ec:	d001      	beq.n	80072f2 <_printf_i+0x42>
 80072ee:	2969      	cmp	r1, #105	; 0x69
 80072f0:	d1f6      	bne.n	80072e0 <_printf_i+0x30>
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	6813      	ldr	r3, [r2, #0]
 80072f6:	0605      	lsls	r5, r0, #24
 80072f8:	f103 0104 	add.w	r1, r3, #4
 80072fc:	d52a      	bpl.n	8007354 <_printf_i+0xa4>
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6011      	str	r1, [r2, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	da03      	bge.n	800730e <_printf_i+0x5e>
 8007306:	222d      	movs	r2, #45	; 0x2d
 8007308:	425b      	negs	r3, r3
 800730a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800730e:	486f      	ldr	r0, [pc, #444]	; (80074cc <_printf_i+0x21c>)
 8007310:	220a      	movs	r2, #10
 8007312:	e039      	b.n	8007388 <_printf_i+0xd8>
 8007314:	2973      	cmp	r1, #115	; 0x73
 8007316:	f000 809d 	beq.w	8007454 <_printf_i+0x1a4>
 800731a:	d808      	bhi.n	800732e <_printf_i+0x7e>
 800731c:	296f      	cmp	r1, #111	; 0x6f
 800731e:	d020      	beq.n	8007362 <_printf_i+0xb2>
 8007320:	2970      	cmp	r1, #112	; 0x70
 8007322:	d1dd      	bne.n	80072e0 <_printf_i+0x30>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	f043 0320 	orr.w	r3, r3, #32
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	e003      	b.n	8007336 <_printf_i+0x86>
 800732e:	2975      	cmp	r1, #117	; 0x75
 8007330:	d017      	beq.n	8007362 <_printf_i+0xb2>
 8007332:	2978      	cmp	r1, #120	; 0x78
 8007334:	d1d4      	bne.n	80072e0 <_printf_i+0x30>
 8007336:	2378      	movs	r3, #120	; 0x78
 8007338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800733c:	4864      	ldr	r0, [pc, #400]	; (80074d0 <_printf_i+0x220>)
 800733e:	e055      	b.n	80073ec <_printf_i+0x13c>
 8007340:	6813      	ldr	r3, [r2, #0]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6011      	str	r1, [r2, #0]
 8007348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800734c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007350:	2301      	movs	r3, #1
 8007352:	e08c      	b.n	800746e <_printf_i+0x1be>
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6011      	str	r1, [r2, #0]
 8007358:	f010 0f40 	tst.w	r0, #64	; 0x40
 800735c:	bf18      	it	ne
 800735e:	b21b      	sxthne	r3, r3
 8007360:	e7cf      	b.n	8007302 <_printf_i+0x52>
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	6825      	ldr	r5, [r4, #0]
 8007366:	1d18      	adds	r0, r3, #4
 8007368:	6010      	str	r0, [r2, #0]
 800736a:	0628      	lsls	r0, r5, #24
 800736c:	d501      	bpl.n	8007372 <_printf_i+0xc2>
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	e002      	b.n	8007378 <_printf_i+0xc8>
 8007372:	0668      	lsls	r0, r5, #25
 8007374:	d5fb      	bpl.n	800736e <_printf_i+0xbe>
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	4854      	ldr	r0, [pc, #336]	; (80074cc <_printf_i+0x21c>)
 800737a:	296f      	cmp	r1, #111	; 0x6f
 800737c:	bf14      	ite	ne
 800737e:	220a      	movne	r2, #10
 8007380:	2208      	moveq	r2, #8
 8007382:	2100      	movs	r1, #0
 8007384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007388:	6865      	ldr	r5, [r4, #4]
 800738a:	60a5      	str	r5, [r4, #8]
 800738c:	2d00      	cmp	r5, #0
 800738e:	f2c0 8095 	blt.w	80074bc <_printf_i+0x20c>
 8007392:	6821      	ldr	r1, [r4, #0]
 8007394:	f021 0104 	bic.w	r1, r1, #4
 8007398:	6021      	str	r1, [r4, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d13d      	bne.n	800741a <_printf_i+0x16a>
 800739e:	2d00      	cmp	r5, #0
 80073a0:	f040 808e 	bne.w	80074c0 <_printf_i+0x210>
 80073a4:	4665      	mov	r5, ip
 80073a6:	2a08      	cmp	r2, #8
 80073a8:	d10b      	bne.n	80073c2 <_printf_i+0x112>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	07db      	lsls	r3, r3, #31
 80073ae:	d508      	bpl.n	80073c2 <_printf_i+0x112>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	6862      	ldr	r2, [r4, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bfde      	ittt	le
 80073b8:	2330      	movle	r3, #48	; 0x30
 80073ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073c2:	ebac 0305 	sub.w	r3, ip, r5
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	f8cd 8000 	str.w	r8, [sp]
 80073cc:	463b      	mov	r3, r7
 80073ce:	aa03      	add	r2, sp, #12
 80073d0:	4621      	mov	r1, r4
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7ff fef6 	bl	80071c4 <_printf_common>
 80073d8:	3001      	adds	r0, #1
 80073da:	d14d      	bne.n	8007478 <_printf_i+0x1c8>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	b005      	add	sp, #20
 80073e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073e6:	4839      	ldr	r0, [pc, #228]	; (80074cc <_printf_i+0x21c>)
 80073e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80073ec:	6813      	ldr	r3, [r2, #0]
 80073ee:	6821      	ldr	r1, [r4, #0]
 80073f0:	1d1d      	adds	r5, r3, #4
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6015      	str	r5, [r2, #0]
 80073f6:	060a      	lsls	r2, r1, #24
 80073f8:	d50b      	bpl.n	8007412 <_printf_i+0x162>
 80073fa:	07ca      	lsls	r2, r1, #31
 80073fc:	bf44      	itt	mi
 80073fe:	f041 0120 	orrmi.w	r1, r1, #32
 8007402:	6021      	strmi	r1, [r4, #0]
 8007404:	b91b      	cbnz	r3, 800740e <_printf_i+0x15e>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	f022 0220 	bic.w	r2, r2, #32
 800740c:	6022      	str	r2, [r4, #0]
 800740e:	2210      	movs	r2, #16
 8007410:	e7b7      	b.n	8007382 <_printf_i+0xd2>
 8007412:	064d      	lsls	r5, r1, #25
 8007414:	bf48      	it	mi
 8007416:	b29b      	uxthmi	r3, r3
 8007418:	e7ef      	b.n	80073fa <_printf_i+0x14a>
 800741a:	4665      	mov	r5, ip
 800741c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007420:	fb02 3311 	mls	r3, r2, r1, r3
 8007424:	5cc3      	ldrb	r3, [r0, r3]
 8007426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800742a:	460b      	mov	r3, r1
 800742c:	2900      	cmp	r1, #0
 800742e:	d1f5      	bne.n	800741c <_printf_i+0x16c>
 8007430:	e7b9      	b.n	80073a6 <_printf_i+0xf6>
 8007432:	6813      	ldr	r3, [r2, #0]
 8007434:	6825      	ldr	r5, [r4, #0]
 8007436:	6961      	ldr	r1, [r4, #20]
 8007438:	1d18      	adds	r0, r3, #4
 800743a:	6010      	str	r0, [r2, #0]
 800743c:	0628      	lsls	r0, r5, #24
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	d501      	bpl.n	8007446 <_printf_i+0x196>
 8007442:	6019      	str	r1, [r3, #0]
 8007444:	e002      	b.n	800744c <_printf_i+0x19c>
 8007446:	066a      	lsls	r2, r5, #25
 8007448:	d5fb      	bpl.n	8007442 <_printf_i+0x192>
 800744a:	8019      	strh	r1, [r3, #0]
 800744c:	2300      	movs	r3, #0
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	4665      	mov	r5, ip
 8007452:	e7b9      	b.n	80073c8 <_printf_i+0x118>
 8007454:	6813      	ldr	r3, [r2, #0]
 8007456:	1d19      	adds	r1, r3, #4
 8007458:	6011      	str	r1, [r2, #0]
 800745a:	681d      	ldr	r5, [r3, #0]
 800745c:	6862      	ldr	r2, [r4, #4]
 800745e:	2100      	movs	r1, #0
 8007460:	4628      	mov	r0, r5
 8007462:	f7f8 febd 	bl	80001e0 <memchr>
 8007466:	b108      	cbz	r0, 800746c <_printf_i+0x1bc>
 8007468:	1b40      	subs	r0, r0, r5
 800746a:	6060      	str	r0, [r4, #4]
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	2300      	movs	r3, #0
 8007472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007476:	e7a7      	b.n	80073c8 <_printf_i+0x118>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	462a      	mov	r2, r5
 800747c:	4639      	mov	r1, r7
 800747e:	4630      	mov	r0, r6
 8007480:	47c0      	blx	r8
 8007482:	3001      	adds	r0, #1
 8007484:	d0aa      	beq.n	80073dc <_printf_i+0x12c>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	079b      	lsls	r3, r3, #30
 800748a:	d413      	bmi.n	80074b4 <_printf_i+0x204>
 800748c:	68e0      	ldr	r0, [r4, #12]
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	4298      	cmp	r0, r3
 8007492:	bfb8      	it	lt
 8007494:	4618      	movlt	r0, r3
 8007496:	e7a3      	b.n	80073e0 <_printf_i+0x130>
 8007498:	2301      	movs	r3, #1
 800749a:	464a      	mov	r2, r9
 800749c:	4639      	mov	r1, r7
 800749e:	4630      	mov	r0, r6
 80074a0:	47c0      	blx	r8
 80074a2:	3001      	adds	r0, #1
 80074a4:	d09a      	beq.n	80073dc <_printf_i+0x12c>
 80074a6:	3501      	adds	r5, #1
 80074a8:	68e3      	ldr	r3, [r4, #12]
 80074aa:	9a03      	ldr	r2, [sp, #12]
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	42ab      	cmp	r3, r5
 80074b0:	dcf2      	bgt.n	8007498 <_printf_i+0x1e8>
 80074b2:	e7eb      	b.n	800748c <_printf_i+0x1dc>
 80074b4:	2500      	movs	r5, #0
 80074b6:	f104 0919 	add.w	r9, r4, #25
 80074ba:	e7f5      	b.n	80074a8 <_printf_i+0x1f8>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ac      	bne.n	800741a <_printf_i+0x16a>
 80074c0:	7803      	ldrb	r3, [r0, #0]
 80074c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ca:	e76c      	b.n	80073a6 <_printf_i+0xf6>
 80074cc:	08008c4a 	.word	0x08008c4a
 80074d0:	08008c5b 	.word	0x08008c5b

080074d4 <_sbrk_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4c06      	ldr	r4, [pc, #24]	; (80074f0 <_sbrk_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4605      	mov	r5, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	f7fc fb40 	bl	8003b64 <_sbrk>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_sbrk_r+0x1a>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_sbrk_r+0x1a>
 80074ec:	602b      	str	r3, [r5, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000918 	.word	0x20000918

080074f4 <siprintf>:
 80074f4:	b40e      	push	{r1, r2, r3}
 80074f6:	b500      	push	{lr}
 80074f8:	b09c      	sub	sp, #112	; 0x70
 80074fa:	ab1d      	add	r3, sp, #116	; 0x74
 80074fc:	9002      	str	r0, [sp, #8]
 80074fe:	9006      	str	r0, [sp, #24]
 8007500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007504:	4809      	ldr	r0, [pc, #36]	; (800752c <siprintf+0x38>)
 8007506:	9107      	str	r1, [sp, #28]
 8007508:	9104      	str	r1, [sp, #16]
 800750a:	4909      	ldr	r1, [pc, #36]	; (8007530 <siprintf+0x3c>)
 800750c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	a902      	add	r1, sp, #8
 8007518:	f001 f9b0 	bl	800887c <_svfiprintf_r>
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	b01c      	add	sp, #112	; 0x70
 8007524:	f85d eb04 	ldr.w	lr, [sp], #4
 8007528:	b003      	add	sp, #12
 800752a:	4770      	bx	lr
 800752c:	20000010 	.word	0x20000010
 8007530:	ffff0208 	.word	0xffff0208

08007534 <quorem>:
 8007534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	6903      	ldr	r3, [r0, #16]
 800753a:	690c      	ldr	r4, [r1, #16]
 800753c:	42a3      	cmp	r3, r4
 800753e:	4680      	mov	r8, r0
 8007540:	f2c0 8082 	blt.w	8007648 <quorem+0x114>
 8007544:	3c01      	subs	r4, #1
 8007546:	f101 0714 	add.w	r7, r1, #20
 800754a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800754e:	f100 0614 	add.w	r6, r0, #20
 8007552:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007556:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800755a:	eb06 030c 	add.w	r3, r6, ip
 800755e:	3501      	adds	r5, #1
 8007560:	eb07 090c 	add.w	r9, r7, ip
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	fbb0 f5f5 	udiv	r5, r0, r5
 800756a:	b395      	cbz	r5, 80075d2 <quorem+0x9e>
 800756c:	f04f 0a00 	mov.w	sl, #0
 8007570:	4638      	mov	r0, r7
 8007572:	46b6      	mov	lr, r6
 8007574:	46d3      	mov	fp, sl
 8007576:	f850 2b04 	ldr.w	r2, [r0], #4
 800757a:	b293      	uxth	r3, r2
 800757c:	fb05 a303 	mla	r3, r5, r3, sl
 8007580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007584:	b29b      	uxth	r3, r3
 8007586:	ebab 0303 	sub.w	r3, fp, r3
 800758a:	0c12      	lsrs	r2, r2, #16
 800758c:	f8de b000 	ldr.w	fp, [lr]
 8007590:	fb05 a202 	mla	r2, r5, r2, sl
 8007594:	fa13 f38b 	uxtah	r3, r3, fp
 8007598:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800759c:	fa1f fb82 	uxth.w	fp, r2
 80075a0:	f8de 2000 	ldr.w	r2, [lr]
 80075a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80075a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b2:	4581      	cmp	r9, r0
 80075b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80075b8:	f84e 3b04 	str.w	r3, [lr], #4
 80075bc:	d2db      	bcs.n	8007576 <quorem+0x42>
 80075be:	f856 300c 	ldr.w	r3, [r6, ip]
 80075c2:	b933      	cbnz	r3, 80075d2 <quorem+0x9e>
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	3b04      	subs	r3, #4
 80075c8:	429e      	cmp	r6, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	d330      	bcc.n	8007630 <quorem+0xfc>
 80075ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80075d2:	4640      	mov	r0, r8
 80075d4:	f001 f824 	bl	8008620 <__mcmp>
 80075d8:	2800      	cmp	r0, #0
 80075da:	db25      	blt.n	8007628 <quorem+0xf4>
 80075dc:	3501      	adds	r5, #1
 80075de:	4630      	mov	r0, r6
 80075e0:	f04f 0c00 	mov.w	ip, #0
 80075e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80075e8:	f8d0 e000 	ldr.w	lr, [r0]
 80075ec:	b293      	uxth	r3, r2
 80075ee:	ebac 0303 	sub.w	r3, ip, r3
 80075f2:	0c12      	lsrs	r2, r2, #16
 80075f4:	fa13 f38e 	uxtah	r3, r3, lr
 80075f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007600:	b29b      	uxth	r3, r3
 8007602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007606:	45b9      	cmp	r9, r7
 8007608:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800760c:	f840 3b04 	str.w	r3, [r0], #4
 8007610:	d2e8      	bcs.n	80075e4 <quorem+0xb0>
 8007612:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007616:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800761a:	b92a      	cbnz	r2, 8007628 <quorem+0xf4>
 800761c:	3b04      	subs	r3, #4
 800761e:	429e      	cmp	r6, r3
 8007620:	461a      	mov	r2, r3
 8007622:	d30b      	bcc.n	800763c <quorem+0x108>
 8007624:	f8c8 4010 	str.w	r4, [r8, #16]
 8007628:	4628      	mov	r0, r5
 800762a:	b003      	add	sp, #12
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	3b04      	subs	r3, #4
 8007634:	2a00      	cmp	r2, #0
 8007636:	d1ca      	bne.n	80075ce <quorem+0x9a>
 8007638:	3c01      	subs	r4, #1
 800763a:	e7c5      	b.n	80075c8 <quorem+0x94>
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	3b04      	subs	r3, #4
 8007640:	2a00      	cmp	r2, #0
 8007642:	d1ef      	bne.n	8007624 <quorem+0xf0>
 8007644:	3c01      	subs	r4, #1
 8007646:	e7ea      	b.n	800761e <quorem+0xea>
 8007648:	2000      	movs	r0, #0
 800764a:	e7ee      	b.n	800762a <quorem+0xf6>
 800764c:	0000      	movs	r0, r0
	...

08007650 <_dtoa_r>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	ec57 6b10 	vmov	r6, r7, d0
 8007658:	b097      	sub	sp, #92	; 0x5c
 800765a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800765c:	9106      	str	r1, [sp, #24]
 800765e:	4604      	mov	r4, r0
 8007660:	920b      	str	r2, [sp, #44]	; 0x2c
 8007662:	9312      	str	r3, [sp, #72]	; 0x48
 8007664:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007668:	e9cd 6700 	strd	r6, r7, [sp]
 800766c:	b93d      	cbnz	r5, 800767e <_dtoa_r+0x2e>
 800766e:	2010      	movs	r0, #16
 8007670:	f7ff fa1c 	bl	8006aac <malloc>
 8007674:	6260      	str	r0, [r4, #36]	; 0x24
 8007676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800767a:	6005      	str	r5, [r0, #0]
 800767c:	60c5      	str	r5, [r0, #12]
 800767e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	b151      	cbz	r1, 800769a <_dtoa_r+0x4a>
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	604a      	str	r2, [r1, #4]
 8007688:	2301      	movs	r3, #1
 800768a:	4093      	lsls	r3, r2
 800768c:	608b      	str	r3, [r1, #8]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 fde5 	bl	800825e <_Bfree>
 8007694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	1e3b      	subs	r3, r7, #0
 800769c:	bfbb      	ittet	lt
 800769e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076a2:	9301      	strlt	r3, [sp, #4]
 80076a4:	2300      	movge	r3, #0
 80076a6:	2201      	movlt	r2, #1
 80076a8:	bfac      	ite	ge
 80076aa:	f8c8 3000 	strge.w	r3, [r8]
 80076ae:	f8c8 2000 	strlt.w	r2, [r8]
 80076b2:	4baf      	ldr	r3, [pc, #700]	; (8007970 <_dtoa_r+0x320>)
 80076b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80076b8:	ea33 0308 	bics.w	r3, r3, r8
 80076bc:	d114      	bne.n	80076e8 <_dtoa_r+0x98>
 80076be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	9b00      	ldr	r3, [sp, #0]
 80076c8:	b923      	cbnz	r3, 80076d4 <_dtoa_r+0x84>
 80076ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f000 8542 	beq.w	8008158 <_dtoa_r+0xb08>
 80076d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007984 <_dtoa_r+0x334>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8544 	beq.w	8008168 <_dtoa_r+0xb18>
 80076e0:	f10b 0303 	add.w	r3, fp, #3
 80076e4:	f000 bd3e 	b.w	8008164 <_dtoa_r+0xb14>
 80076e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	4630      	mov	r0, r6
 80076f2:	4639      	mov	r1, r7
 80076f4:	f7f9 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f8:	4681      	mov	r9, r0
 80076fa:	b168      	cbz	r0, 8007718 <_dtoa_r+0xc8>
 80076fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076fe:	2301      	movs	r3, #1
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8524 	beq.w	8008152 <_dtoa_r+0xb02>
 800770a:	4b9a      	ldr	r3, [pc, #616]	; (8007974 <_dtoa_r+0x324>)
 800770c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800770e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	f000 bd28 	b.w	8008168 <_dtoa_r+0xb18>
 8007718:	aa14      	add	r2, sp, #80	; 0x50
 800771a:	a915      	add	r1, sp, #84	; 0x54
 800771c:	ec47 6b10 	vmov	d0, r6, r7
 8007720:	4620      	mov	r0, r4
 8007722:	f000 fff4 	bl	800870e <__d2b>
 8007726:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800772a:	9004      	str	r0, [sp, #16]
 800772c:	2d00      	cmp	r5, #0
 800772e:	d07c      	beq.n	800782a <_dtoa_r+0x1da>
 8007730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007734:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007738:	46b2      	mov	sl, r6
 800773a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800773e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007742:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007746:	2200      	movs	r2, #0
 8007748:	4b8b      	ldr	r3, [pc, #556]	; (8007978 <_dtoa_r+0x328>)
 800774a:	4650      	mov	r0, sl
 800774c:	4659      	mov	r1, fp
 800774e:	f7f8 fd9b 	bl	8000288 <__aeabi_dsub>
 8007752:	a381      	add	r3, pc, #516	; (adr r3, 8007958 <_dtoa_r+0x308>)
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f7f8 ff4e 	bl	80005f8 <__aeabi_dmul>
 800775c:	a380      	add	r3, pc, #512	; (adr r3, 8007960 <_dtoa_r+0x310>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 fd93 	bl	800028c <__adddf3>
 8007766:	4606      	mov	r6, r0
 8007768:	4628      	mov	r0, r5
 800776a:	460f      	mov	r7, r1
 800776c:	f7f8 feda 	bl	8000524 <__aeabi_i2d>
 8007770:	a37d      	add	r3, pc, #500	; (adr r3, 8007968 <_dtoa_r+0x318>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 ff3f 	bl	80005f8 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f8 fd83 	bl	800028c <__adddf3>
 8007786:	4606      	mov	r6, r0
 8007788:	460f      	mov	r7, r1
 800778a:	f7f9 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800778e:	2200      	movs	r2, #0
 8007790:	4682      	mov	sl, r0
 8007792:	2300      	movs	r3, #0
 8007794:	4630      	mov	r0, r6
 8007796:	4639      	mov	r1, r7
 8007798:	f7f9 f9a0 	bl	8000adc <__aeabi_dcmplt>
 800779c:	b148      	cbz	r0, 80077b2 <_dtoa_r+0x162>
 800779e:	4650      	mov	r0, sl
 80077a0:	f7f8 fec0 	bl	8000524 <__aeabi_i2d>
 80077a4:	4632      	mov	r2, r6
 80077a6:	463b      	mov	r3, r7
 80077a8:	f7f9 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ac:	b908      	cbnz	r0, 80077b2 <_dtoa_r+0x162>
 80077ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077b2:	f1ba 0f16 	cmp.w	sl, #22
 80077b6:	d859      	bhi.n	800786c <_dtoa_r+0x21c>
 80077b8:	4970      	ldr	r1, [pc, #448]	; (800797c <_dtoa_r+0x32c>)
 80077ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80077be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c6:	f7f9 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d050      	beq.n	8007870 <_dtoa_r+0x220>
 80077ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077d2:	2300      	movs	r3, #0
 80077d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d8:	1b5d      	subs	r5, r3, r5
 80077da:	f1b5 0801 	subs.w	r8, r5, #1
 80077de:	bf49      	itett	mi
 80077e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80077e4:	2300      	movpl	r3, #0
 80077e6:	9305      	strmi	r3, [sp, #20]
 80077e8:	f04f 0800 	movmi.w	r8, #0
 80077ec:	bf58      	it	pl
 80077ee:	9305      	strpl	r3, [sp, #20]
 80077f0:	f1ba 0f00 	cmp.w	sl, #0
 80077f4:	db3e      	blt.n	8007874 <_dtoa_r+0x224>
 80077f6:	2300      	movs	r3, #0
 80077f8:	44d0      	add	r8, sl
 80077fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	2b09      	cmp	r3, #9
 8007804:	f200 8090 	bhi.w	8007928 <_dtoa_r+0x2d8>
 8007808:	2b05      	cmp	r3, #5
 800780a:	bfc4      	itt	gt
 800780c:	3b04      	subgt	r3, #4
 800780e:	9306      	strgt	r3, [sp, #24]
 8007810:	9b06      	ldr	r3, [sp, #24]
 8007812:	f1a3 0302 	sub.w	r3, r3, #2
 8007816:	bfcc      	ite	gt
 8007818:	2500      	movgt	r5, #0
 800781a:	2501      	movle	r5, #1
 800781c:	2b03      	cmp	r3, #3
 800781e:	f200 808f 	bhi.w	8007940 <_dtoa_r+0x2f0>
 8007822:	e8df f003 	tbb	[pc, r3]
 8007826:	7f7d      	.short	0x7f7d
 8007828:	7131      	.short	0x7131
 800782a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800782e:	441d      	add	r5, r3
 8007830:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007834:	2820      	cmp	r0, #32
 8007836:	dd13      	ble.n	8007860 <_dtoa_r+0x210>
 8007838:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800783c:	9b00      	ldr	r3, [sp, #0]
 800783e:	fa08 f800 	lsl.w	r8, r8, r0
 8007842:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007846:	fa23 f000 	lsr.w	r0, r3, r0
 800784a:	ea48 0000 	orr.w	r0, r8, r0
 800784e:	f7f8 fe59 	bl	8000504 <__aeabi_ui2d>
 8007852:	2301      	movs	r3, #1
 8007854:	4682      	mov	sl, r0
 8007856:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800785a:	3d01      	subs	r5, #1
 800785c:	9313      	str	r3, [sp, #76]	; 0x4c
 800785e:	e772      	b.n	8007746 <_dtoa_r+0xf6>
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	f1c0 0020 	rsb	r0, r0, #32
 8007866:	fa03 f000 	lsl.w	r0, r3, r0
 800786a:	e7f0      	b.n	800784e <_dtoa_r+0x1fe>
 800786c:	2301      	movs	r3, #1
 800786e:	e7b1      	b.n	80077d4 <_dtoa_r+0x184>
 8007870:	900f      	str	r0, [sp, #60]	; 0x3c
 8007872:	e7b0      	b.n	80077d6 <_dtoa_r+0x186>
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	eba3 030a 	sub.w	r3, r3, sl
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	f1ca 0300 	rsb	r3, sl, #0
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	2300      	movs	r3, #0
 8007884:	930e      	str	r3, [sp, #56]	; 0x38
 8007886:	e7bb      	b.n	8007800 <_dtoa_r+0x1b0>
 8007888:	2301      	movs	r3, #1
 800788a:	930a      	str	r3, [sp, #40]	; 0x28
 800788c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd59      	ble.n	8007946 <_dtoa_r+0x2f6>
 8007892:	9302      	str	r3, [sp, #8]
 8007894:	4699      	mov	r9, r3
 8007896:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007898:	2200      	movs	r2, #0
 800789a:	6072      	str	r2, [r6, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	f102 0014 	add.w	r0, r2, #20
 80078a2:	4298      	cmp	r0, r3
 80078a4:	6871      	ldr	r1, [r6, #4]
 80078a6:	d953      	bls.n	8007950 <_dtoa_r+0x300>
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fca4 	bl	80081f6 <_Balloc>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	6030      	str	r0, [r6, #0]
 80078b2:	f1b9 0f0e 	cmp.w	r9, #14
 80078b6:	f8d3 b000 	ldr.w	fp, [r3]
 80078ba:	f200 80e6 	bhi.w	8007a8a <_dtoa_r+0x43a>
 80078be:	2d00      	cmp	r5, #0
 80078c0:	f000 80e3 	beq.w	8007a8a <_dtoa_r+0x43a>
 80078c4:	ed9d 7b00 	vldr	d7, [sp]
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80078d0:	dd74      	ble.n	80079bc <_dtoa_r+0x36c>
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <_dtoa_r+0x32c>)
 80078d4:	f00a 030f 	and.w	r3, sl, #15
 80078d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80078dc:	ed93 7b00 	vldr	d7, [r3]
 80078e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80078e4:	06f0      	lsls	r0, r6, #27
 80078e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80078ea:	d565      	bpl.n	80079b8 <_dtoa_r+0x368>
 80078ec:	4b24      	ldr	r3, [pc, #144]	; (8007980 <_dtoa_r+0x330>)
 80078ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078f6:	f7f8 ffa9 	bl	800084c <__aeabi_ddiv>
 80078fa:	e9cd 0100 	strd	r0, r1, [sp]
 80078fe:	f006 060f 	and.w	r6, r6, #15
 8007902:	2503      	movs	r5, #3
 8007904:	4f1e      	ldr	r7, [pc, #120]	; (8007980 <_dtoa_r+0x330>)
 8007906:	e04c      	b.n	80079a2 <_dtoa_r+0x352>
 8007908:	2301      	movs	r3, #1
 800790a:	930a      	str	r3, [sp, #40]	; 0x28
 800790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800790e:	4453      	add	r3, sl
 8007910:	f103 0901 	add.w	r9, r3, #1
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	464b      	mov	r3, r9
 8007918:	2b01      	cmp	r3, #1
 800791a:	bfb8      	it	lt
 800791c:	2301      	movlt	r3, #1
 800791e:	e7ba      	b.n	8007896 <_dtoa_r+0x246>
 8007920:	2300      	movs	r3, #0
 8007922:	e7b2      	b.n	800788a <_dtoa_r+0x23a>
 8007924:	2300      	movs	r3, #0
 8007926:	e7f0      	b.n	800790a <_dtoa_r+0x2ba>
 8007928:	2501      	movs	r5, #1
 800792a:	2300      	movs	r3, #0
 800792c:	9306      	str	r3, [sp, #24]
 800792e:	950a      	str	r5, [sp, #40]	; 0x28
 8007930:	f04f 33ff 	mov.w	r3, #4294967295
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	4699      	mov	r9, r3
 8007938:	2200      	movs	r2, #0
 800793a:	2312      	movs	r3, #18
 800793c:	920b      	str	r2, [sp, #44]	; 0x2c
 800793e:	e7aa      	b.n	8007896 <_dtoa_r+0x246>
 8007940:	2301      	movs	r3, #1
 8007942:	930a      	str	r3, [sp, #40]	; 0x28
 8007944:	e7f4      	b.n	8007930 <_dtoa_r+0x2e0>
 8007946:	2301      	movs	r3, #1
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	4699      	mov	r9, r3
 800794c:	461a      	mov	r2, r3
 800794e:	e7f5      	b.n	800793c <_dtoa_r+0x2ec>
 8007950:	3101      	adds	r1, #1
 8007952:	6071      	str	r1, [r6, #4]
 8007954:	0052      	lsls	r2, r2, #1
 8007956:	e7a2      	b.n	800789e <_dtoa_r+0x24e>
 8007958:	636f4361 	.word	0x636f4361
 800795c:	3fd287a7 	.word	0x3fd287a7
 8007960:	8b60c8b3 	.word	0x8b60c8b3
 8007964:	3fc68a28 	.word	0x3fc68a28
 8007968:	509f79fb 	.word	0x509f79fb
 800796c:	3fd34413 	.word	0x3fd34413
 8007970:	7ff00000 	.word	0x7ff00000
 8007974:	08008c49 	.word	0x08008c49
 8007978:	3ff80000 	.word	0x3ff80000
 800797c:	08008ca8 	.word	0x08008ca8
 8007980:	08008c80 	.word	0x08008c80
 8007984:	08008c75 	.word	0x08008c75
 8007988:	07f1      	lsls	r1, r6, #31
 800798a:	d508      	bpl.n	800799e <_dtoa_r+0x34e>
 800798c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	f7f8 fe30 	bl	80005f8 <__aeabi_dmul>
 8007998:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800799c:	3501      	adds	r5, #1
 800799e:	1076      	asrs	r6, r6, #1
 80079a0:	3708      	adds	r7, #8
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	d1f0      	bne.n	8007988 <_dtoa_r+0x338>
 80079a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ae:	f7f8 ff4d 	bl	800084c <__aeabi_ddiv>
 80079b2:	e9cd 0100 	strd	r0, r1, [sp]
 80079b6:	e01a      	b.n	80079ee <_dtoa_r+0x39e>
 80079b8:	2502      	movs	r5, #2
 80079ba:	e7a3      	b.n	8007904 <_dtoa_r+0x2b4>
 80079bc:	f000 80a0 	beq.w	8007b00 <_dtoa_r+0x4b0>
 80079c0:	f1ca 0600 	rsb	r6, sl, #0
 80079c4:	4b9f      	ldr	r3, [pc, #636]	; (8007c44 <_dtoa_r+0x5f4>)
 80079c6:	4fa0      	ldr	r7, [pc, #640]	; (8007c48 <_dtoa_r+0x5f8>)
 80079c8:	f006 020f 	and.w	r2, r6, #15
 80079cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079d8:	f7f8 fe0e 	bl	80005f8 <__aeabi_dmul>
 80079dc:	e9cd 0100 	strd	r0, r1, [sp]
 80079e0:	1136      	asrs	r6, r6, #4
 80079e2:	2300      	movs	r3, #0
 80079e4:	2502      	movs	r5, #2
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	d17f      	bne.n	8007aea <_dtoa_r+0x49a>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e1      	bne.n	80079b2 <_dtoa_r+0x362>
 80079ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8087 	beq.w	8007b04 <_dtoa_r+0x4b4>
 80079f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079fa:	2200      	movs	r2, #0
 80079fc:	4b93      	ldr	r3, [pc, #588]	; (8007c4c <_dtoa_r+0x5fc>)
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f9 f86b 	bl	8000adc <__aeabi_dcmplt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d07c      	beq.n	8007b04 <_dtoa_r+0x4b4>
 8007a0a:	f1b9 0f00 	cmp.w	r9, #0
 8007a0e:	d079      	beq.n	8007b04 <_dtoa_r+0x4b4>
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dd35      	ble.n	8007a82 <_dtoa_r+0x432>
 8007a16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a1a:	9308      	str	r3, [sp, #32]
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b8b      	ldr	r3, [pc, #556]	; (8007c50 <_dtoa_r+0x600>)
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7f8 fde8 	bl	80005f8 <__aeabi_dmul>
 8007a28:	e9cd 0100 	strd	r0, r1, [sp]
 8007a2c:	9f02      	ldr	r7, [sp, #8]
 8007a2e:	3501      	adds	r5, #1
 8007a30:	4628      	mov	r0, r5
 8007a32:	f7f8 fd77 	bl	8000524 <__aeabi_i2d>
 8007a36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4b84      	ldr	r3, [pc, #528]	; (8007c54 <_dtoa_r+0x604>)
 8007a42:	f7f8 fc23 	bl	800028c <__adddf3>
 8007a46:	4605      	mov	r5, r0
 8007a48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a4c:	2f00      	cmp	r7, #0
 8007a4e:	d15d      	bne.n	8007b0c <_dtoa_r+0x4bc>
 8007a50:	2200      	movs	r2, #0
 8007a52:	4b81      	ldr	r3, [pc, #516]	; (8007c58 <_dtoa_r+0x608>)
 8007a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a58:	f7f8 fc16 	bl	8000288 <__aeabi_dsub>
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4633      	mov	r3, r6
 8007a60:	e9cd 0100 	strd	r0, r1, [sp]
 8007a64:	f7f9 f858 	bl	8000b18 <__aeabi_dcmpgt>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	f040 8288 	bne.w	8007f7e <_dtoa_r+0x92e>
 8007a6e:	462a      	mov	r2, r5
 8007a70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a78:	f7f9 f830 	bl	8000adc <__aeabi_dcmplt>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f040 827c 	bne.w	8007f7a <_dtoa_r+0x92a>
 8007a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a86:	e9cd 2300 	strd	r2, r3, [sp]
 8007a8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f2c0 8150 	blt.w	8007d32 <_dtoa_r+0x6e2>
 8007a92:	f1ba 0f0e 	cmp.w	sl, #14
 8007a96:	f300 814c 	bgt.w	8007d32 <_dtoa_r+0x6e2>
 8007a9a:	4b6a      	ldr	r3, [pc, #424]	; (8007c44 <_dtoa_r+0x5f4>)
 8007a9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aa0:	ed93 7b00 	vldr	d7, [r3]
 8007aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007aac:	f280 80d8 	bge.w	8007c60 <_dtoa_r+0x610>
 8007ab0:	f1b9 0f00 	cmp.w	r9, #0
 8007ab4:	f300 80d4 	bgt.w	8007c60 <_dtoa_r+0x610>
 8007ab8:	f040 825e 	bne.w	8007f78 <_dtoa_r+0x928>
 8007abc:	2200      	movs	r2, #0
 8007abe:	4b66      	ldr	r3, [pc, #408]	; (8007c58 <_dtoa_r+0x608>)
 8007ac0:	ec51 0b17 	vmov	r0, r1, d7
 8007ac4:	f7f8 fd98 	bl	80005f8 <__aeabi_dmul>
 8007ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007acc:	f7f9 f81a 	bl	8000b04 <__aeabi_dcmpge>
 8007ad0:	464f      	mov	r7, r9
 8007ad2:	464e      	mov	r6, r9
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f040 8234 	bne.w	8007f42 <_dtoa_r+0x8f2>
 8007ada:	2331      	movs	r3, #49	; 0x31
 8007adc:	f10b 0501 	add.w	r5, fp, #1
 8007ae0:	f88b 3000 	strb.w	r3, [fp]
 8007ae4:	f10a 0a01 	add.w	sl, sl, #1
 8007ae8:	e22f      	b.n	8007f4a <_dtoa_r+0x8fa>
 8007aea:	07f2      	lsls	r2, r6, #31
 8007aec:	d505      	bpl.n	8007afa <_dtoa_r+0x4aa>
 8007aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	3501      	adds	r5, #1
 8007af8:	2301      	movs	r3, #1
 8007afa:	1076      	asrs	r6, r6, #1
 8007afc:	3708      	adds	r7, #8
 8007afe:	e772      	b.n	80079e6 <_dtoa_r+0x396>
 8007b00:	2502      	movs	r5, #2
 8007b02:	e774      	b.n	80079ee <_dtoa_r+0x39e>
 8007b04:	f8cd a020 	str.w	sl, [sp, #32]
 8007b08:	464f      	mov	r7, r9
 8007b0a:	e791      	b.n	8007a30 <_dtoa_r+0x3e0>
 8007b0c:	4b4d      	ldr	r3, [pc, #308]	; (8007c44 <_dtoa_r+0x5f4>)
 8007b0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d047      	beq.n	8007bac <_dtoa_r+0x55c>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	2000      	movs	r0, #0
 8007b22:	494e      	ldr	r1, [pc, #312]	; (8007c5c <_dtoa_r+0x60c>)
 8007b24:	f7f8 fe92 	bl	800084c <__aeabi_ddiv>
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4633      	mov	r3, r6
 8007b2c:	f7f8 fbac 	bl	8000288 <__aeabi_dsub>
 8007b30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b34:	465d      	mov	r5, fp
 8007b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b3a:	f7f9 f80d 	bl	8000b58 <__aeabi_d2iz>
 8007b3e:	4606      	mov	r6, r0
 8007b40:	f7f8 fcf0 	bl	8000524 <__aeabi_i2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b4c:	f7f8 fb9c 	bl	8000288 <__aeabi_dsub>
 8007b50:	3630      	adds	r6, #48	; 0x30
 8007b52:	f805 6b01 	strb.w	r6, [r5], #1
 8007b56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b5a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b5e:	f7f8 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d163      	bne.n	8007c2e <_dtoa_r+0x5de>
 8007b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	4937      	ldr	r1, [pc, #220]	; (8007c4c <_dtoa_r+0x5fc>)
 8007b6e:	f7f8 fb8b 	bl	8000288 <__aeabi_dsub>
 8007b72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b76:	f7f8 ffb1 	bl	8000adc <__aeabi_dcmplt>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f040 80b7 	bne.w	8007cee <_dtoa_r+0x69e>
 8007b80:	eba5 030b 	sub.w	r3, r5, fp
 8007b84:	429f      	cmp	r7, r3
 8007b86:	f77f af7c 	ble.w	8007a82 <_dtoa_r+0x432>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4b30      	ldr	r3, [pc, #192]	; (8007c50 <_dtoa_r+0x600>)
 8007b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b92:	f7f8 fd31 	bl	80005f8 <__aeabi_dmul>
 8007b96:	2200      	movs	r2, #0
 8007b98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b9c:	4b2c      	ldr	r3, [pc, #176]	; (8007c50 <_dtoa_r+0x600>)
 8007b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ba2:	f7f8 fd29 	bl	80005f8 <__aeabi_dmul>
 8007ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8007baa:	e7c4      	b.n	8007b36 <_dtoa_r+0x4e6>
 8007bac:	462a      	mov	r2, r5
 8007bae:	4633      	mov	r3, r6
 8007bb0:	f7f8 fd22 	bl	80005f8 <__aeabi_dmul>
 8007bb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007bb8:	eb0b 0507 	add.w	r5, fp, r7
 8007bbc:	465e      	mov	r6, fp
 8007bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bc2:	f7f8 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	f7f8 fcac 	bl	8000524 <__aeabi_i2d>
 8007bcc:	3730      	adds	r7, #48	; 0x30
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd6:	f7f8 fb57 	bl	8000288 <__aeabi_dsub>
 8007bda:	f806 7b01 	strb.w	r7, [r6], #1
 8007bde:	42ae      	cmp	r6, r5
 8007be0:	e9cd 0100 	strd	r0, r1, [sp]
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	d126      	bne.n	8007c38 <_dtoa_r+0x5e8>
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <_dtoa_r+0x60c>)
 8007bec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bf0:	f7f8 fb4c 	bl	800028c <__adddf3>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bfc:	f7f8 ff8c 	bl	8000b18 <__aeabi_dcmpgt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d174      	bne.n	8007cee <_dtoa_r+0x69e>
 8007c04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c08:	2000      	movs	r0, #0
 8007c0a:	4914      	ldr	r1, [pc, #80]	; (8007c5c <_dtoa_r+0x60c>)
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c18:	f7f8 ff60 	bl	8000adc <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f43f af30 	beq.w	8007a82 <_dtoa_r+0x432>
 8007c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c26:	2b30      	cmp	r3, #48	; 0x30
 8007c28:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c2c:	d002      	beq.n	8007c34 <_dtoa_r+0x5e4>
 8007c2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c32:	e04a      	b.n	8007cca <_dtoa_r+0x67a>
 8007c34:	4615      	mov	r5, r2
 8007c36:	e7f4      	b.n	8007c22 <_dtoa_r+0x5d2>
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <_dtoa_r+0x600>)
 8007c3a:	f7f8 fcdd 	bl	80005f8 <__aeabi_dmul>
 8007c3e:	e9cd 0100 	strd	r0, r1, [sp]
 8007c42:	e7bc      	b.n	8007bbe <_dtoa_r+0x56e>
 8007c44:	08008ca8 	.word	0x08008ca8
 8007c48:	08008c80 	.word	0x08008c80
 8007c4c:	3ff00000 	.word	0x3ff00000
 8007c50:	40240000 	.word	0x40240000
 8007c54:	401c0000 	.word	0x401c0000
 8007c58:	40140000 	.word	0x40140000
 8007c5c:	3fe00000 	.word	0x3fe00000
 8007c60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c64:	465d      	mov	r5, fp
 8007c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fded 	bl	800084c <__aeabi_ddiv>
 8007c72:	f7f8 ff71 	bl	8000b58 <__aeabi_d2iz>
 8007c76:	4680      	mov	r8, r0
 8007c78:	f7f8 fc54 	bl	8000524 <__aeabi_i2d>
 8007c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c80:	f7f8 fcba 	bl	80005f8 <__aeabi_dmul>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4630      	mov	r0, r6
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c90:	f7f8 fafa 	bl	8000288 <__aeabi_dsub>
 8007c94:	f805 6b01 	strb.w	r6, [r5], #1
 8007c98:	eba5 060b 	sub.w	r6, r5, fp
 8007c9c:	45b1      	cmp	r9, r6
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	d139      	bne.n	8007d18 <_dtoa_r+0x6c8>
 8007ca4:	f7f8 faf2 	bl	800028c <__adddf3>
 8007ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	f7f8 ff32 	bl	8000b18 <__aeabi_dcmpgt>
 8007cb4:	b9c8      	cbnz	r0, 8007cea <_dtoa_r+0x69a>
 8007cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 ff03 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc2:	b110      	cbz	r0, 8007cca <_dtoa_r+0x67a>
 8007cc4:	f018 0f01 	tst.w	r8, #1
 8007cc8:	d10f      	bne.n	8007cea <_dtoa_r+0x69a>
 8007cca:	9904      	ldr	r1, [sp, #16]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 fac6 	bl	800825e <_Bfree>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cd6:	702b      	strb	r3, [r5, #0]
 8007cd8:	f10a 0301 	add.w	r3, sl, #1
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8241 	beq.w	8008168 <_dtoa_r+0xb18>
 8007ce6:	601d      	str	r5, [r3, #0]
 8007ce8:	e23e      	b.n	8008168 <_dtoa_r+0xb18>
 8007cea:	f8cd a020 	str.w	sl, [sp, #32]
 8007cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cf2:	2a39      	cmp	r2, #57	; 0x39
 8007cf4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007cf8:	d108      	bne.n	8007d0c <_dtoa_r+0x6bc>
 8007cfa:	459b      	cmp	fp, r3
 8007cfc:	d10a      	bne.n	8007d14 <_dtoa_r+0x6c4>
 8007cfe:	9b08      	ldr	r3, [sp, #32]
 8007d00:	3301      	adds	r3, #1
 8007d02:	9308      	str	r3, [sp, #32]
 8007d04:	2330      	movs	r3, #48	; 0x30
 8007d06:	f88b 3000 	strb.w	r3, [fp]
 8007d0a:	465b      	mov	r3, fp
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	3201      	adds	r2, #1
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	e78c      	b.n	8007c2e <_dtoa_r+0x5de>
 8007d14:	461d      	mov	r5, r3
 8007d16:	e7ea      	b.n	8007cee <_dtoa_r+0x69e>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4b9b      	ldr	r3, [pc, #620]	; (8007f88 <_dtoa_r+0x938>)
 8007d1c:	f7f8 fc6c 	bl	80005f8 <__aeabi_dmul>
 8007d20:	2200      	movs	r2, #0
 8007d22:	2300      	movs	r3, #0
 8007d24:	4606      	mov	r6, r0
 8007d26:	460f      	mov	r7, r1
 8007d28:	f7f8 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d09a      	beq.n	8007c66 <_dtoa_r+0x616>
 8007d30:	e7cb      	b.n	8007cca <_dtoa_r+0x67a>
 8007d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	f000 808b 	beq.w	8007e50 <_dtoa_r+0x800>
 8007d3a:	9a06      	ldr	r2, [sp, #24]
 8007d3c:	2a01      	cmp	r2, #1
 8007d3e:	dc6e      	bgt.n	8007e1e <_dtoa_r+0x7ce>
 8007d40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	d067      	beq.n	8007e16 <_dtoa_r+0x7c6>
 8007d46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d4a:	9f07      	ldr	r7, [sp, #28]
 8007d4c:	9d05      	ldr	r5, [sp, #20]
 8007d4e:	9a05      	ldr	r2, [sp, #20]
 8007d50:	2101      	movs	r1, #1
 8007d52:	441a      	add	r2, r3
 8007d54:	4620      	mov	r0, r4
 8007d56:	9205      	str	r2, [sp, #20]
 8007d58:	4498      	add	r8, r3
 8007d5a:	f000 fb20 	bl	800839e <__i2b>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	dd0c      	ble.n	8007d7e <_dtoa_r+0x72e>
 8007d64:	f1b8 0f00 	cmp.w	r8, #0
 8007d68:	dd09      	ble.n	8007d7e <_dtoa_r+0x72e>
 8007d6a:	4545      	cmp	r5, r8
 8007d6c:	9a05      	ldr	r2, [sp, #20]
 8007d6e:	462b      	mov	r3, r5
 8007d70:	bfa8      	it	ge
 8007d72:	4643      	movge	r3, r8
 8007d74:	1ad2      	subs	r2, r2, r3
 8007d76:	9205      	str	r2, [sp, #20]
 8007d78:	1aed      	subs	r5, r5, r3
 8007d7a:	eba8 0803 	sub.w	r8, r8, r3
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	b1eb      	cbz	r3, 8007dbe <_dtoa_r+0x76e>
 8007d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d067      	beq.n	8007e58 <_dtoa_r+0x808>
 8007d88:	b18f      	cbz	r7, 8007dae <_dtoa_r+0x75e>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	463a      	mov	r2, r7
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fba4 	bl	80084dc <__pow5mult>
 8007d94:	9a04      	ldr	r2, [sp, #16]
 8007d96:	4601      	mov	r1, r0
 8007d98:	4606      	mov	r6, r0
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f000 fb08 	bl	80083b0 <__multiply>
 8007da0:	9904      	ldr	r1, [sp, #16]
 8007da2:	9008      	str	r0, [sp, #32]
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fa5a 	bl	800825e <_Bfree>
 8007daa:	9b08      	ldr	r3, [sp, #32]
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	9b07      	ldr	r3, [sp, #28]
 8007db0:	1bda      	subs	r2, r3, r7
 8007db2:	d004      	beq.n	8007dbe <_dtoa_r+0x76e>
 8007db4:	9904      	ldr	r1, [sp, #16]
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fb90 	bl	80084dc <__pow5mult>
 8007dbc:	9004      	str	r0, [sp, #16]
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 faec 	bl	800839e <__i2b>
 8007dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc8:	4607      	mov	r7, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 81d0 	beq.w	8008170 <_dtoa_r+0xb20>
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f000 fb81 	bl	80084dc <__pow5mult>
 8007dda:	9b06      	ldr	r3, [sp, #24]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	4607      	mov	r7, r0
 8007de0:	dc40      	bgt.n	8007e64 <_dtoa_r+0x814>
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d139      	bne.n	8007e5c <_dtoa_r+0x80c>
 8007de8:	9b01      	ldr	r3, [sp, #4]
 8007dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d136      	bne.n	8007e60 <_dtoa_r+0x810>
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007df8:	0d1b      	lsrs	r3, r3, #20
 8007dfa:	051b      	lsls	r3, r3, #20
 8007dfc:	b12b      	cbz	r3, 8007e0a <_dtoa_r+0x7ba>
 8007dfe:	9b05      	ldr	r3, [sp, #20]
 8007e00:	3301      	adds	r3, #1
 8007e02:	9305      	str	r3, [sp, #20]
 8007e04:	f108 0801 	add.w	r8, r8, #1
 8007e08:	2301      	movs	r3, #1
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d12a      	bne.n	8007e68 <_dtoa_r+0x818>
 8007e12:	2001      	movs	r0, #1
 8007e14:	e030      	b.n	8007e78 <_dtoa_r+0x828>
 8007e16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e1c:	e795      	b.n	8007d4a <_dtoa_r+0x6fa>
 8007e1e:	9b07      	ldr	r3, [sp, #28]
 8007e20:	f109 37ff 	add.w	r7, r9, #4294967295
 8007e24:	42bb      	cmp	r3, r7
 8007e26:	bfbf      	itttt	lt
 8007e28:	9b07      	ldrlt	r3, [sp, #28]
 8007e2a:	9707      	strlt	r7, [sp, #28]
 8007e2c:	1afa      	sublt	r2, r7, r3
 8007e2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e30:	bfbb      	ittet	lt
 8007e32:	189b      	addlt	r3, r3, r2
 8007e34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007e36:	1bdf      	subge	r7, r3, r7
 8007e38:	2700      	movlt	r7, #0
 8007e3a:	f1b9 0f00 	cmp.w	r9, #0
 8007e3e:	bfb5      	itete	lt
 8007e40:	9b05      	ldrlt	r3, [sp, #20]
 8007e42:	9d05      	ldrge	r5, [sp, #20]
 8007e44:	eba3 0509 	sublt.w	r5, r3, r9
 8007e48:	464b      	movge	r3, r9
 8007e4a:	bfb8      	it	lt
 8007e4c:	2300      	movlt	r3, #0
 8007e4e:	e77e      	b.n	8007d4e <_dtoa_r+0x6fe>
 8007e50:	9f07      	ldr	r7, [sp, #28]
 8007e52:	9d05      	ldr	r5, [sp, #20]
 8007e54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e56:	e783      	b.n	8007d60 <_dtoa_r+0x710>
 8007e58:	9a07      	ldr	r2, [sp, #28]
 8007e5a:	e7ab      	b.n	8007db4 <_dtoa_r+0x764>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7d4      	b.n	8007e0a <_dtoa_r+0x7ba>
 8007e60:	9b00      	ldr	r3, [sp, #0]
 8007e62:	e7d2      	b.n	8007e0a <_dtoa_r+0x7ba>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9307      	str	r3, [sp, #28]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007e6e:	6918      	ldr	r0, [r3, #16]
 8007e70:	f000 fa47 	bl	8008302 <__hi0bits>
 8007e74:	f1c0 0020 	rsb	r0, r0, #32
 8007e78:	4440      	add	r0, r8
 8007e7a:	f010 001f 	ands.w	r0, r0, #31
 8007e7e:	d047      	beq.n	8007f10 <_dtoa_r+0x8c0>
 8007e80:	f1c0 0320 	rsb	r3, r0, #32
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	dd3b      	ble.n	8007f00 <_dtoa_r+0x8b0>
 8007e88:	9b05      	ldr	r3, [sp, #20]
 8007e8a:	f1c0 001c 	rsb	r0, r0, #28
 8007e8e:	4403      	add	r3, r0
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	4405      	add	r5, r0
 8007e94:	4480      	add	r8, r0
 8007e96:	9b05      	ldr	r3, [sp, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	dd05      	ble.n	8007ea8 <_dtoa_r+0x858>
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	9904      	ldr	r1, [sp, #16]
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fb69 	bl	8008578 <__lshift>
 8007ea6:	9004      	str	r0, [sp, #16]
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	dd05      	ble.n	8007eba <_dtoa_r+0x86a>
 8007eae:	4639      	mov	r1, r7
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fb60 	bl	8008578 <__lshift>
 8007eb8:	4607      	mov	r7, r0
 8007eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ebc:	b353      	cbz	r3, 8007f14 <_dtoa_r+0x8c4>
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	9804      	ldr	r0, [sp, #16]
 8007ec2:	f000 fbad 	bl	8008620 <__mcmp>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	da24      	bge.n	8007f14 <_dtoa_r+0x8c4>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	220a      	movs	r2, #10
 8007ece:	9904      	ldr	r1, [sp, #16]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 f9db 	bl	800828c <__multadd>
 8007ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed8:	9004      	str	r0, [sp, #16]
 8007eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 814d 	beq.w	800817e <_dtoa_r+0xb2e>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	220a      	movs	r2, #10
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 f9ce 	bl	800828c <__multadd>
 8007ef0:	9b02      	ldr	r3, [sp, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	dc4f      	bgt.n	8007f98 <_dtoa_r+0x948>
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	dd4c      	ble.n	8007f98 <_dtoa_r+0x948>
 8007efe:	e011      	b.n	8007f24 <_dtoa_r+0x8d4>
 8007f00:	d0c9      	beq.n	8007e96 <_dtoa_r+0x846>
 8007f02:	9a05      	ldr	r2, [sp, #20]
 8007f04:	331c      	adds	r3, #28
 8007f06:	441a      	add	r2, r3
 8007f08:	9205      	str	r2, [sp, #20]
 8007f0a:	441d      	add	r5, r3
 8007f0c:	4498      	add	r8, r3
 8007f0e:	e7c2      	b.n	8007e96 <_dtoa_r+0x846>
 8007f10:	4603      	mov	r3, r0
 8007f12:	e7f6      	b.n	8007f02 <_dtoa_r+0x8b2>
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	dc38      	bgt.n	8007f8c <_dtoa_r+0x93c>
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	dd35      	ble.n	8007f8c <_dtoa_r+0x93c>
 8007f20:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	b963      	cbnz	r3, 8007f42 <_dtoa_r+0x8f2>
 8007f28:	4639      	mov	r1, r7
 8007f2a:	2205      	movs	r2, #5
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f9ad 	bl	800828c <__multadd>
 8007f32:	4601      	mov	r1, r0
 8007f34:	4607      	mov	r7, r0
 8007f36:	9804      	ldr	r0, [sp, #16]
 8007f38:	f000 fb72 	bl	8008620 <__mcmp>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f73f adcc 	bgt.w	8007ada <_dtoa_r+0x48a>
 8007f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f44:	465d      	mov	r5, fp
 8007f46:	ea6f 0a03 	mvn.w	sl, r3
 8007f4a:	f04f 0900 	mov.w	r9, #0
 8007f4e:	4639      	mov	r1, r7
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 f984 	bl	800825e <_Bfree>
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	f43f aeb7 	beq.w	8007cca <_dtoa_r+0x67a>
 8007f5c:	f1b9 0f00 	cmp.w	r9, #0
 8007f60:	d005      	beq.n	8007f6e <_dtoa_r+0x91e>
 8007f62:	45b1      	cmp	r9, r6
 8007f64:	d003      	beq.n	8007f6e <_dtoa_r+0x91e>
 8007f66:	4649      	mov	r1, r9
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 f978 	bl	800825e <_Bfree>
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 f974 	bl	800825e <_Bfree>
 8007f76:	e6a8      	b.n	8007cca <_dtoa_r+0x67a>
 8007f78:	2700      	movs	r7, #0
 8007f7a:	463e      	mov	r6, r7
 8007f7c:	e7e1      	b.n	8007f42 <_dtoa_r+0x8f2>
 8007f7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f82:	463e      	mov	r6, r7
 8007f84:	e5a9      	b.n	8007ada <_dtoa_r+0x48a>
 8007f86:	bf00      	nop
 8007f88:	40240000 	.word	0x40240000
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80fa 	beq.w	800818c <_dtoa_r+0xb3c>
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	dd05      	ble.n	8007fa8 <_dtoa_r+0x958>
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fae9 	bl	8008578 <__lshift>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	9b07      	ldr	r3, [sp, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d04c      	beq.n	8008048 <_dtoa_r+0x9f8>
 8007fae:	6871      	ldr	r1, [r6, #4]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 f920 	bl	80081f6 <_Balloc>
 8007fb6:	6932      	ldr	r2, [r6, #16]
 8007fb8:	3202      	adds	r2, #2
 8007fba:	4605      	mov	r5, r0
 8007fbc:	0092      	lsls	r2, r2, #2
 8007fbe:	f106 010c 	add.w	r1, r6, #12
 8007fc2:	300c      	adds	r0, #12
 8007fc4:	f000 f90a 	bl	80081dc <memcpy>
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4629      	mov	r1, r5
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fad3 	bl	8008578 <__lshift>
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	f8cd b014 	str.w	fp, [sp, #20]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	46b1      	mov	r9, r6
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	9804      	ldr	r0, [sp, #16]
 8007fe6:	f7ff faa5 	bl	8007534 <quorem>
 8007fea:	4649      	mov	r1, r9
 8007fec:	4605      	mov	r5, r0
 8007fee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ff2:	9804      	ldr	r0, [sp, #16]
 8007ff4:	f000 fb14 	bl	8008620 <__mcmp>
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	9000      	str	r0, [sp, #0]
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 fb28 	bl	8008654 <__mdiff>
 8008004:	68c3      	ldr	r3, [r0, #12]
 8008006:	4602      	mov	r2, r0
 8008008:	bb03      	cbnz	r3, 800804c <_dtoa_r+0x9fc>
 800800a:	4601      	mov	r1, r0
 800800c:	9008      	str	r0, [sp, #32]
 800800e:	9804      	ldr	r0, [sp, #16]
 8008010:	f000 fb06 	bl	8008620 <__mcmp>
 8008014:	9a08      	ldr	r2, [sp, #32]
 8008016:	4603      	mov	r3, r0
 8008018:	4611      	mov	r1, r2
 800801a:	4620      	mov	r0, r4
 800801c:	9308      	str	r3, [sp, #32]
 800801e:	f000 f91e 	bl	800825e <_Bfree>
 8008022:	9b08      	ldr	r3, [sp, #32]
 8008024:	b9a3      	cbnz	r3, 8008050 <_dtoa_r+0xa00>
 8008026:	9a06      	ldr	r2, [sp, #24]
 8008028:	b992      	cbnz	r2, 8008050 <_dtoa_r+0xa00>
 800802a:	9a07      	ldr	r2, [sp, #28]
 800802c:	b982      	cbnz	r2, 8008050 <_dtoa_r+0xa00>
 800802e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008032:	d029      	beq.n	8008088 <_dtoa_r+0xa38>
 8008034:	9b00      	ldr	r3, [sp, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	dd01      	ble.n	800803e <_dtoa_r+0x9ee>
 800803a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800803e:	9b05      	ldr	r3, [sp, #20]
 8008040:	1c5d      	adds	r5, r3, #1
 8008042:	f883 8000 	strb.w	r8, [r3]
 8008046:	e782      	b.n	8007f4e <_dtoa_r+0x8fe>
 8008048:	4630      	mov	r0, r6
 800804a:	e7c2      	b.n	8007fd2 <_dtoa_r+0x982>
 800804c:	2301      	movs	r3, #1
 800804e:	e7e3      	b.n	8008018 <_dtoa_r+0x9c8>
 8008050:	9a00      	ldr	r2, [sp, #0]
 8008052:	2a00      	cmp	r2, #0
 8008054:	db04      	blt.n	8008060 <_dtoa_r+0xa10>
 8008056:	d125      	bne.n	80080a4 <_dtoa_r+0xa54>
 8008058:	9a06      	ldr	r2, [sp, #24]
 800805a:	bb1a      	cbnz	r2, 80080a4 <_dtoa_r+0xa54>
 800805c:	9a07      	ldr	r2, [sp, #28]
 800805e:	bb0a      	cbnz	r2, 80080a4 <_dtoa_r+0xa54>
 8008060:	2b00      	cmp	r3, #0
 8008062:	ddec      	ble.n	800803e <_dtoa_r+0x9ee>
 8008064:	2201      	movs	r2, #1
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fa85 	bl	8008578 <__lshift>
 800806e:	4639      	mov	r1, r7
 8008070:	9004      	str	r0, [sp, #16]
 8008072:	f000 fad5 	bl	8008620 <__mcmp>
 8008076:	2800      	cmp	r0, #0
 8008078:	dc03      	bgt.n	8008082 <_dtoa_r+0xa32>
 800807a:	d1e0      	bne.n	800803e <_dtoa_r+0x9ee>
 800807c:	f018 0f01 	tst.w	r8, #1
 8008080:	d0dd      	beq.n	800803e <_dtoa_r+0x9ee>
 8008082:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008086:	d1d8      	bne.n	800803a <_dtoa_r+0x9ea>
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	9a05      	ldr	r2, [sp, #20]
 800808c:	1c5d      	adds	r5, r3, #1
 800808e:	2339      	movs	r3, #57	; 0x39
 8008090:	7013      	strb	r3, [r2, #0]
 8008092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008096:	2b39      	cmp	r3, #57	; 0x39
 8008098:	f105 32ff 	add.w	r2, r5, #4294967295
 800809c:	d04f      	beq.n	800813e <_dtoa_r+0xaee>
 800809e:	3301      	adds	r3, #1
 80080a0:	7013      	strb	r3, [r2, #0]
 80080a2:	e754      	b.n	8007f4e <_dtoa_r+0x8fe>
 80080a4:	9a05      	ldr	r2, [sp, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f102 0501 	add.w	r5, r2, #1
 80080ac:	dd06      	ble.n	80080bc <_dtoa_r+0xa6c>
 80080ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080b2:	d0e9      	beq.n	8008088 <_dtoa_r+0xa38>
 80080b4:	f108 0801 	add.w	r8, r8, #1
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	e7c2      	b.n	8008042 <_dtoa_r+0x9f2>
 80080bc:	9a02      	ldr	r2, [sp, #8]
 80080be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80080c2:	eba5 030b 	sub.w	r3, r5, fp
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d021      	beq.n	800810e <_dtoa_r+0xabe>
 80080ca:	2300      	movs	r3, #0
 80080cc:	220a      	movs	r2, #10
 80080ce:	9904      	ldr	r1, [sp, #16]
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f8db 	bl	800828c <__multadd>
 80080d6:	45b1      	cmp	r9, r6
 80080d8:	9004      	str	r0, [sp, #16]
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	f04f 020a 	mov.w	r2, #10
 80080e2:	4649      	mov	r1, r9
 80080e4:	4620      	mov	r0, r4
 80080e6:	d105      	bne.n	80080f4 <_dtoa_r+0xaa4>
 80080e8:	f000 f8d0 	bl	800828c <__multadd>
 80080ec:	4681      	mov	r9, r0
 80080ee:	4606      	mov	r6, r0
 80080f0:	9505      	str	r5, [sp, #20]
 80080f2:	e776      	b.n	8007fe2 <_dtoa_r+0x992>
 80080f4:	f000 f8ca 	bl	800828c <__multadd>
 80080f8:	4631      	mov	r1, r6
 80080fa:	4681      	mov	r9, r0
 80080fc:	2300      	movs	r3, #0
 80080fe:	220a      	movs	r2, #10
 8008100:	4620      	mov	r0, r4
 8008102:	f000 f8c3 	bl	800828c <__multadd>
 8008106:	4606      	mov	r6, r0
 8008108:	e7f2      	b.n	80080f0 <_dtoa_r+0xaa0>
 800810a:	f04f 0900 	mov.w	r9, #0
 800810e:	2201      	movs	r2, #1
 8008110:	9904      	ldr	r1, [sp, #16]
 8008112:	4620      	mov	r0, r4
 8008114:	f000 fa30 	bl	8008578 <__lshift>
 8008118:	4639      	mov	r1, r7
 800811a:	9004      	str	r0, [sp, #16]
 800811c:	f000 fa80 	bl	8008620 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	dcb6      	bgt.n	8008092 <_dtoa_r+0xa42>
 8008124:	d102      	bne.n	800812c <_dtoa_r+0xadc>
 8008126:	f018 0f01 	tst.w	r8, #1
 800812a:	d1b2      	bne.n	8008092 <_dtoa_r+0xa42>
 800812c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008130:	2b30      	cmp	r3, #48	; 0x30
 8008132:	f105 32ff 	add.w	r2, r5, #4294967295
 8008136:	f47f af0a 	bne.w	8007f4e <_dtoa_r+0x8fe>
 800813a:	4615      	mov	r5, r2
 800813c:	e7f6      	b.n	800812c <_dtoa_r+0xadc>
 800813e:	4593      	cmp	fp, r2
 8008140:	d105      	bne.n	800814e <_dtoa_r+0xafe>
 8008142:	2331      	movs	r3, #49	; 0x31
 8008144:	f10a 0a01 	add.w	sl, sl, #1
 8008148:	f88b 3000 	strb.w	r3, [fp]
 800814c:	e6ff      	b.n	8007f4e <_dtoa_r+0x8fe>
 800814e:	4615      	mov	r5, r2
 8008150:	e79f      	b.n	8008092 <_dtoa_r+0xa42>
 8008152:	f8df b064 	ldr.w	fp, [pc, #100]	; 80081b8 <_dtoa_r+0xb68>
 8008156:	e007      	b.n	8008168 <_dtoa_r+0xb18>
 8008158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800815a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80081bc <_dtoa_r+0xb6c>
 800815e:	b11b      	cbz	r3, 8008168 <_dtoa_r+0xb18>
 8008160:	f10b 0308 	add.w	r3, fp, #8
 8008164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	4658      	mov	r0, fp
 800816a:	b017      	add	sp, #92	; 0x5c
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	2b01      	cmp	r3, #1
 8008174:	f77f ae35 	ble.w	8007de2 <_dtoa_r+0x792>
 8008178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	e649      	b.n	8007e12 <_dtoa_r+0x7c2>
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	dc03      	bgt.n	800818c <_dtoa_r+0xb3c>
 8008184:	9b06      	ldr	r3, [sp, #24]
 8008186:	2b02      	cmp	r3, #2
 8008188:	f73f aecc 	bgt.w	8007f24 <_dtoa_r+0x8d4>
 800818c:	465d      	mov	r5, fp
 800818e:	4639      	mov	r1, r7
 8008190:	9804      	ldr	r0, [sp, #16]
 8008192:	f7ff f9cf 	bl	8007534 <quorem>
 8008196:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800819a:	f805 8b01 	strb.w	r8, [r5], #1
 800819e:	9a02      	ldr	r2, [sp, #8]
 80081a0:	eba5 030b 	sub.w	r3, r5, fp
 80081a4:	429a      	cmp	r2, r3
 80081a6:	ddb0      	ble.n	800810a <_dtoa_r+0xaba>
 80081a8:	2300      	movs	r3, #0
 80081aa:	220a      	movs	r2, #10
 80081ac:	9904      	ldr	r1, [sp, #16]
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f86c 	bl	800828c <__multadd>
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	e7ea      	b.n	800818e <_dtoa_r+0xb3e>
 80081b8:	08008c48 	.word	0x08008c48
 80081bc:	08008c6c 	.word	0x08008c6c

080081c0 <_localeconv_r>:
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <_localeconv_r+0x14>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6a18      	ldr	r0, [r3, #32]
 80081c6:	4b04      	ldr	r3, [pc, #16]	; (80081d8 <_localeconv_r+0x18>)
 80081c8:	2800      	cmp	r0, #0
 80081ca:	bf08      	it	eq
 80081cc:	4618      	moveq	r0, r3
 80081ce:	30f0      	adds	r0, #240	; 0xf0
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000010 	.word	0x20000010
 80081d8:	20000074 	.word	0x20000074

080081dc <memcpy>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	1e43      	subs	r3, r0, #1
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	d100      	bne.n	80081e8 <memcpy+0xc>
 80081e6:	bd10      	pop	{r4, pc}
 80081e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f0:	e7f7      	b.n	80081e2 <memcpy+0x6>

080081f2 <__malloc_lock>:
 80081f2:	4770      	bx	lr

080081f4 <__malloc_unlock>:
 80081f4:	4770      	bx	lr

080081f6 <_Balloc>:
 80081f6:	b570      	push	{r4, r5, r6, lr}
 80081f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081fa:	4604      	mov	r4, r0
 80081fc:	460e      	mov	r6, r1
 80081fe:	b93d      	cbnz	r5, 8008210 <_Balloc+0x1a>
 8008200:	2010      	movs	r0, #16
 8008202:	f7fe fc53 	bl	8006aac <malloc>
 8008206:	6260      	str	r0, [r4, #36]	; 0x24
 8008208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800820c:	6005      	str	r5, [r0, #0]
 800820e:	60c5      	str	r5, [r0, #12]
 8008210:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008212:	68eb      	ldr	r3, [r5, #12]
 8008214:	b183      	cbz	r3, 8008238 <_Balloc+0x42>
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800821e:	b9b8      	cbnz	r0, 8008250 <_Balloc+0x5a>
 8008220:	2101      	movs	r1, #1
 8008222:	fa01 f506 	lsl.w	r5, r1, r6
 8008226:	1d6a      	adds	r2, r5, #5
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	4620      	mov	r0, r4
 800822c:	f000 fabe 	bl	80087ac <_calloc_r>
 8008230:	b160      	cbz	r0, 800824c <_Balloc+0x56>
 8008232:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008236:	e00e      	b.n	8008256 <_Balloc+0x60>
 8008238:	2221      	movs	r2, #33	; 0x21
 800823a:	2104      	movs	r1, #4
 800823c:	4620      	mov	r0, r4
 800823e:	f000 fab5 	bl	80087ac <_calloc_r>
 8008242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008244:	60e8      	str	r0, [r5, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e4      	bne.n	8008216 <_Balloc+0x20>
 800824c:	2000      	movs	r0, #0
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	6802      	ldr	r2, [r0, #0]
 8008252:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008256:	2300      	movs	r3, #0
 8008258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800825c:	e7f7      	b.n	800824e <_Balloc+0x58>

0800825e <_Bfree>:
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008262:	4606      	mov	r6, r0
 8008264:	460d      	mov	r5, r1
 8008266:	b93c      	cbnz	r4, 8008278 <_Bfree+0x1a>
 8008268:	2010      	movs	r0, #16
 800826a:	f7fe fc1f 	bl	8006aac <malloc>
 800826e:	6270      	str	r0, [r6, #36]	; 0x24
 8008270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008274:	6004      	str	r4, [r0, #0]
 8008276:	60c4      	str	r4, [r0, #12]
 8008278:	b13d      	cbz	r5, 800828a <_Bfree+0x2c>
 800827a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800827c:	686a      	ldr	r2, [r5, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008284:	6029      	str	r1, [r5, #0]
 8008286:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800828a:	bd70      	pop	{r4, r5, r6, pc}

0800828c <__multadd>:
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	690d      	ldr	r5, [r1, #16]
 8008292:	461f      	mov	r7, r3
 8008294:	4606      	mov	r6, r0
 8008296:	460c      	mov	r4, r1
 8008298:	f101 0c14 	add.w	ip, r1, #20
 800829c:	2300      	movs	r3, #0
 800829e:	f8dc 0000 	ldr.w	r0, [ip]
 80082a2:	b281      	uxth	r1, r0
 80082a4:	fb02 7101 	mla	r1, r2, r1, r7
 80082a8:	0c0f      	lsrs	r7, r1, #16
 80082aa:	0c00      	lsrs	r0, r0, #16
 80082ac:	fb02 7000 	mla	r0, r2, r0, r7
 80082b0:	b289      	uxth	r1, r1
 80082b2:	3301      	adds	r3, #1
 80082b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80082b8:	429d      	cmp	r5, r3
 80082ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80082be:	f84c 1b04 	str.w	r1, [ip], #4
 80082c2:	dcec      	bgt.n	800829e <__multadd+0x12>
 80082c4:	b1d7      	cbz	r7, 80082fc <__multadd+0x70>
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc12      	bgt.n	80082f2 <__multadd+0x66>
 80082cc:	6861      	ldr	r1, [r4, #4]
 80082ce:	4630      	mov	r0, r6
 80082d0:	3101      	adds	r1, #1
 80082d2:	f7ff ff90 	bl	80081f6 <_Balloc>
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	3202      	adds	r2, #2
 80082da:	f104 010c 	add.w	r1, r4, #12
 80082de:	4680      	mov	r8, r0
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	300c      	adds	r0, #12
 80082e4:	f7ff ff7a 	bl	80081dc <memcpy>
 80082e8:	4621      	mov	r1, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff ffb7 	bl	800825e <_Bfree>
 80082f0:	4644      	mov	r4, r8
 80082f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082f6:	3501      	adds	r5, #1
 80082f8:	615f      	str	r7, [r3, #20]
 80082fa:	6125      	str	r5, [r4, #16]
 80082fc:	4620      	mov	r0, r4
 80082fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008302 <__hi0bits>:
 8008302:	0c02      	lsrs	r2, r0, #16
 8008304:	0412      	lsls	r2, r2, #16
 8008306:	4603      	mov	r3, r0
 8008308:	b9b2      	cbnz	r2, 8008338 <__hi0bits+0x36>
 800830a:	0403      	lsls	r3, r0, #16
 800830c:	2010      	movs	r0, #16
 800830e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008312:	bf04      	itt	eq
 8008314:	021b      	lsleq	r3, r3, #8
 8008316:	3008      	addeq	r0, #8
 8008318:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800831c:	bf04      	itt	eq
 800831e:	011b      	lsleq	r3, r3, #4
 8008320:	3004      	addeq	r0, #4
 8008322:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008326:	bf04      	itt	eq
 8008328:	009b      	lsleq	r3, r3, #2
 800832a:	3002      	addeq	r0, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	db06      	blt.n	800833e <__hi0bits+0x3c>
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	d503      	bpl.n	800833c <__hi0bits+0x3a>
 8008334:	3001      	adds	r0, #1
 8008336:	4770      	bx	lr
 8008338:	2000      	movs	r0, #0
 800833a:	e7e8      	b.n	800830e <__hi0bits+0xc>
 800833c:	2020      	movs	r0, #32
 800833e:	4770      	bx	lr

08008340 <__lo0bits>:
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	f013 0207 	ands.w	r2, r3, #7
 8008346:	4601      	mov	r1, r0
 8008348:	d00b      	beq.n	8008362 <__lo0bits+0x22>
 800834a:	07da      	lsls	r2, r3, #31
 800834c:	d423      	bmi.n	8008396 <__lo0bits+0x56>
 800834e:	0798      	lsls	r0, r3, #30
 8008350:	bf49      	itett	mi
 8008352:	085b      	lsrmi	r3, r3, #1
 8008354:	089b      	lsrpl	r3, r3, #2
 8008356:	2001      	movmi	r0, #1
 8008358:	600b      	strmi	r3, [r1, #0]
 800835a:	bf5c      	itt	pl
 800835c:	600b      	strpl	r3, [r1, #0]
 800835e:	2002      	movpl	r0, #2
 8008360:	4770      	bx	lr
 8008362:	b298      	uxth	r0, r3
 8008364:	b9a8      	cbnz	r0, 8008392 <__lo0bits+0x52>
 8008366:	0c1b      	lsrs	r3, r3, #16
 8008368:	2010      	movs	r0, #16
 800836a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800836e:	bf04      	itt	eq
 8008370:	0a1b      	lsreq	r3, r3, #8
 8008372:	3008      	addeq	r0, #8
 8008374:	071a      	lsls	r2, r3, #28
 8008376:	bf04      	itt	eq
 8008378:	091b      	lsreq	r3, r3, #4
 800837a:	3004      	addeq	r0, #4
 800837c:	079a      	lsls	r2, r3, #30
 800837e:	bf04      	itt	eq
 8008380:	089b      	lsreq	r3, r3, #2
 8008382:	3002      	addeq	r0, #2
 8008384:	07da      	lsls	r2, r3, #31
 8008386:	d402      	bmi.n	800838e <__lo0bits+0x4e>
 8008388:	085b      	lsrs	r3, r3, #1
 800838a:	d006      	beq.n	800839a <__lo0bits+0x5a>
 800838c:	3001      	adds	r0, #1
 800838e:	600b      	str	r3, [r1, #0]
 8008390:	4770      	bx	lr
 8008392:	4610      	mov	r0, r2
 8008394:	e7e9      	b.n	800836a <__lo0bits+0x2a>
 8008396:	2000      	movs	r0, #0
 8008398:	4770      	bx	lr
 800839a:	2020      	movs	r0, #32
 800839c:	4770      	bx	lr

0800839e <__i2b>:
 800839e:	b510      	push	{r4, lr}
 80083a0:	460c      	mov	r4, r1
 80083a2:	2101      	movs	r1, #1
 80083a4:	f7ff ff27 	bl	80081f6 <_Balloc>
 80083a8:	2201      	movs	r2, #1
 80083aa:	6144      	str	r4, [r0, #20]
 80083ac:	6102      	str	r2, [r0, #16]
 80083ae:	bd10      	pop	{r4, pc}

080083b0 <__multiply>:
 80083b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	4614      	mov	r4, r2
 80083b6:	690a      	ldr	r2, [r1, #16]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bfb8      	it	lt
 80083be:	460b      	movlt	r3, r1
 80083c0:	4688      	mov	r8, r1
 80083c2:	bfbc      	itt	lt
 80083c4:	46a0      	movlt	r8, r4
 80083c6:	461c      	movlt	r4, r3
 80083c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083d8:	eb07 0609 	add.w	r6, r7, r9
 80083dc:	42b3      	cmp	r3, r6
 80083de:	bfb8      	it	lt
 80083e0:	3101      	addlt	r1, #1
 80083e2:	f7ff ff08 	bl	80081f6 <_Balloc>
 80083e6:	f100 0514 	add.w	r5, r0, #20
 80083ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80083ee:	462b      	mov	r3, r5
 80083f0:	2200      	movs	r2, #0
 80083f2:	4573      	cmp	r3, lr
 80083f4:	d316      	bcc.n	8008424 <__multiply+0x74>
 80083f6:	f104 0214 	add.w	r2, r4, #20
 80083fa:	f108 0114 	add.w	r1, r8, #20
 80083fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008402:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	4293      	cmp	r3, r2
 800840e:	d80c      	bhi.n	800842a <__multiply+0x7a>
 8008410:	2e00      	cmp	r6, #0
 8008412:	dd03      	ble.n	800841c <__multiply+0x6c>
 8008414:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05d      	beq.n	80084d8 <__multiply+0x128>
 800841c:	6106      	str	r6, [r0, #16]
 800841e:	b003      	add	sp, #12
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	f843 2b04 	str.w	r2, [r3], #4
 8008428:	e7e3      	b.n	80083f2 <__multiply+0x42>
 800842a:	f8b2 b000 	ldrh.w	fp, [r2]
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	d023      	beq.n	800847c <__multiply+0xcc>
 8008434:	4689      	mov	r9, r1
 8008436:	46ac      	mov	ip, r5
 8008438:	f04f 0800 	mov.w	r8, #0
 800843c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008440:	f8dc a000 	ldr.w	sl, [ip]
 8008444:	b2a3      	uxth	r3, r4
 8008446:	fa1f fa8a 	uxth.w	sl, sl
 800844a:	fb0b a303 	mla	r3, fp, r3, sl
 800844e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008452:	f8dc 4000 	ldr.w	r4, [ip]
 8008456:	4443      	add	r3, r8
 8008458:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800845c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008460:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008464:	46e2      	mov	sl, ip
 8008466:	b29b      	uxth	r3, r3
 8008468:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800846c:	454f      	cmp	r7, r9
 800846e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008472:	f84a 3b04 	str.w	r3, [sl], #4
 8008476:	d82b      	bhi.n	80084d0 <__multiply+0x120>
 8008478:	f8cc 8004 	str.w	r8, [ip, #4]
 800847c:	9b01      	ldr	r3, [sp, #4]
 800847e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008482:	3204      	adds	r2, #4
 8008484:	f1ba 0f00 	cmp.w	sl, #0
 8008488:	d020      	beq.n	80084cc <__multiply+0x11c>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	4689      	mov	r9, r1
 800848e:	46a8      	mov	r8, r5
 8008490:	f04f 0b00 	mov.w	fp, #0
 8008494:	f8b9 c000 	ldrh.w	ip, [r9]
 8008498:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800849c:	fb0a 440c 	mla	r4, sl, ip, r4
 80084a0:	445c      	add	r4, fp
 80084a2:	46c4      	mov	ip, r8
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084aa:	f84c 3b04 	str.w	r3, [ip], #4
 80084ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80084b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	fb0a b303 	mla	r3, sl, r3, fp
 80084bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80084c0:	454f      	cmp	r7, r9
 80084c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80084c6:	d805      	bhi.n	80084d4 <__multiply+0x124>
 80084c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80084cc:	3504      	adds	r5, #4
 80084ce:	e79b      	b.n	8008408 <__multiply+0x58>
 80084d0:	46d4      	mov	ip, sl
 80084d2:	e7b3      	b.n	800843c <__multiply+0x8c>
 80084d4:	46e0      	mov	r8, ip
 80084d6:	e7dd      	b.n	8008494 <__multiply+0xe4>
 80084d8:	3e01      	subs	r6, #1
 80084da:	e799      	b.n	8008410 <__multiply+0x60>

080084dc <__pow5mult>:
 80084dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e0:	4615      	mov	r5, r2
 80084e2:	f012 0203 	ands.w	r2, r2, #3
 80084e6:	4606      	mov	r6, r0
 80084e8:	460f      	mov	r7, r1
 80084ea:	d007      	beq.n	80084fc <__pow5mult+0x20>
 80084ec:	3a01      	subs	r2, #1
 80084ee:	4c21      	ldr	r4, [pc, #132]	; (8008574 <__pow5mult+0x98>)
 80084f0:	2300      	movs	r3, #0
 80084f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084f6:	f7ff fec9 	bl	800828c <__multadd>
 80084fa:	4607      	mov	r7, r0
 80084fc:	10ad      	asrs	r5, r5, #2
 80084fe:	d035      	beq.n	800856c <__pow5mult+0x90>
 8008500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008502:	b93c      	cbnz	r4, 8008514 <__pow5mult+0x38>
 8008504:	2010      	movs	r0, #16
 8008506:	f7fe fad1 	bl	8006aac <malloc>
 800850a:	6270      	str	r0, [r6, #36]	; 0x24
 800850c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008510:	6004      	str	r4, [r0, #0]
 8008512:	60c4      	str	r4, [r0, #12]
 8008514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800851c:	b94c      	cbnz	r4, 8008532 <__pow5mult+0x56>
 800851e:	f240 2171 	movw	r1, #625	; 0x271
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ff3b 	bl	800839e <__i2b>
 8008528:	2300      	movs	r3, #0
 800852a:	f8c8 0008 	str.w	r0, [r8, #8]
 800852e:	4604      	mov	r4, r0
 8008530:	6003      	str	r3, [r0, #0]
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	07eb      	lsls	r3, r5, #31
 8008538:	d50a      	bpl.n	8008550 <__pow5mult+0x74>
 800853a:	4639      	mov	r1, r7
 800853c:	4622      	mov	r2, r4
 800853e:	4630      	mov	r0, r6
 8008540:	f7ff ff36 	bl	80083b0 <__multiply>
 8008544:	4639      	mov	r1, r7
 8008546:	4681      	mov	r9, r0
 8008548:	4630      	mov	r0, r6
 800854a:	f7ff fe88 	bl	800825e <_Bfree>
 800854e:	464f      	mov	r7, r9
 8008550:	106d      	asrs	r5, r5, #1
 8008552:	d00b      	beq.n	800856c <__pow5mult+0x90>
 8008554:	6820      	ldr	r0, [r4, #0]
 8008556:	b938      	cbnz	r0, 8008568 <__pow5mult+0x8c>
 8008558:	4622      	mov	r2, r4
 800855a:	4621      	mov	r1, r4
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ff27 	bl	80083b0 <__multiply>
 8008562:	6020      	str	r0, [r4, #0]
 8008564:	f8c0 8000 	str.w	r8, [r0]
 8008568:	4604      	mov	r4, r0
 800856a:	e7e4      	b.n	8008536 <__pow5mult+0x5a>
 800856c:	4638      	mov	r0, r7
 800856e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008572:	bf00      	nop
 8008574:	08008d70 	.word	0x08008d70

08008578 <__lshift>:
 8008578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857c:	460c      	mov	r4, r1
 800857e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	6849      	ldr	r1, [r1, #4]
 8008586:	eb0a 0903 	add.w	r9, sl, r3
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	4607      	mov	r7, r0
 800858e:	4616      	mov	r6, r2
 8008590:	f109 0501 	add.w	r5, r9, #1
 8008594:	42ab      	cmp	r3, r5
 8008596:	db32      	blt.n	80085fe <__lshift+0x86>
 8008598:	4638      	mov	r0, r7
 800859a:	f7ff fe2c 	bl	80081f6 <_Balloc>
 800859e:	2300      	movs	r3, #0
 80085a0:	4680      	mov	r8, r0
 80085a2:	f100 0114 	add.w	r1, r0, #20
 80085a6:	461a      	mov	r2, r3
 80085a8:	4553      	cmp	r3, sl
 80085aa:	db2b      	blt.n	8008604 <__lshift+0x8c>
 80085ac:	6920      	ldr	r0, [r4, #16]
 80085ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085b2:	f104 0314 	add.w	r3, r4, #20
 80085b6:	f016 021f 	ands.w	r2, r6, #31
 80085ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085c2:	d025      	beq.n	8008610 <__lshift+0x98>
 80085c4:	f1c2 0e20 	rsb	lr, r2, #32
 80085c8:	2000      	movs	r0, #0
 80085ca:	681e      	ldr	r6, [r3, #0]
 80085cc:	468a      	mov	sl, r1
 80085ce:	4096      	lsls	r6, r2
 80085d0:	4330      	orrs	r0, r6
 80085d2:	f84a 0b04 	str.w	r0, [sl], #4
 80085d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80085da:	459c      	cmp	ip, r3
 80085dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80085e0:	d814      	bhi.n	800860c <__lshift+0x94>
 80085e2:	6048      	str	r0, [r1, #4]
 80085e4:	b108      	cbz	r0, 80085ea <__lshift+0x72>
 80085e6:	f109 0502 	add.w	r5, r9, #2
 80085ea:	3d01      	subs	r5, #1
 80085ec:	4638      	mov	r0, r7
 80085ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7ff fe33 	bl	800825e <_Bfree>
 80085f8:	4640      	mov	r0, r8
 80085fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fe:	3101      	adds	r1, #1
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	e7c7      	b.n	8008594 <__lshift+0x1c>
 8008604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008608:	3301      	adds	r3, #1
 800860a:	e7cd      	b.n	80085a8 <__lshift+0x30>
 800860c:	4651      	mov	r1, sl
 800860e:	e7dc      	b.n	80085ca <__lshift+0x52>
 8008610:	3904      	subs	r1, #4
 8008612:	f853 2b04 	ldr.w	r2, [r3], #4
 8008616:	f841 2f04 	str.w	r2, [r1, #4]!
 800861a:	459c      	cmp	ip, r3
 800861c:	d8f9      	bhi.n	8008612 <__lshift+0x9a>
 800861e:	e7e4      	b.n	80085ea <__lshift+0x72>

08008620 <__mcmp>:
 8008620:	6903      	ldr	r3, [r0, #16]
 8008622:	690a      	ldr	r2, [r1, #16]
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	b530      	push	{r4, r5, lr}
 8008628:	d10c      	bne.n	8008644 <__mcmp+0x24>
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	3014      	adds	r0, #20
 800862e:	3114      	adds	r1, #20
 8008630:	1884      	adds	r4, r0, r2
 8008632:	4411      	add	r1, r2
 8008634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800863c:	4295      	cmp	r5, r2
 800863e:	d003      	beq.n	8008648 <__mcmp+0x28>
 8008640:	d305      	bcc.n	800864e <__mcmp+0x2e>
 8008642:	2301      	movs	r3, #1
 8008644:	4618      	mov	r0, r3
 8008646:	bd30      	pop	{r4, r5, pc}
 8008648:	42a0      	cmp	r0, r4
 800864a:	d3f3      	bcc.n	8008634 <__mcmp+0x14>
 800864c:	e7fa      	b.n	8008644 <__mcmp+0x24>
 800864e:	f04f 33ff 	mov.w	r3, #4294967295
 8008652:	e7f7      	b.n	8008644 <__mcmp+0x24>

08008654 <__mdiff>:
 8008654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	460d      	mov	r5, r1
 800865a:	4607      	mov	r7, r0
 800865c:	4611      	mov	r1, r2
 800865e:	4628      	mov	r0, r5
 8008660:	4614      	mov	r4, r2
 8008662:	f7ff ffdd 	bl	8008620 <__mcmp>
 8008666:	1e06      	subs	r6, r0, #0
 8008668:	d108      	bne.n	800867c <__mdiff+0x28>
 800866a:	4631      	mov	r1, r6
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff fdc2 	bl	80081f6 <_Balloc>
 8008672:	2301      	movs	r3, #1
 8008674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867c:	bfa4      	itt	ge
 800867e:	4623      	movge	r3, r4
 8008680:	462c      	movge	r4, r5
 8008682:	4638      	mov	r0, r7
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	bfa6      	itte	ge
 8008688:	461d      	movge	r5, r3
 800868a:	2600      	movge	r6, #0
 800868c:	2601      	movlt	r6, #1
 800868e:	f7ff fdb2 	bl	80081f6 <_Balloc>
 8008692:	692b      	ldr	r3, [r5, #16]
 8008694:	60c6      	str	r6, [r0, #12]
 8008696:	6926      	ldr	r6, [r4, #16]
 8008698:	f105 0914 	add.w	r9, r5, #20
 800869c:	f104 0214 	add.w	r2, r4, #20
 80086a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80086a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80086a8:	f100 0514 	add.w	r5, r0, #20
 80086ac:	f04f 0e00 	mov.w	lr, #0
 80086b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80086b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80086b8:	fa1e f18a 	uxtah	r1, lr, sl
 80086bc:	b2a3      	uxth	r3, r4
 80086be:	1ac9      	subs	r1, r1, r3
 80086c0:	0c23      	lsrs	r3, r4, #16
 80086c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80086c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086ca:	b289      	uxth	r1, r1
 80086cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80086d0:	45c8      	cmp	r8, r9
 80086d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80086d6:	4694      	mov	ip, r2
 80086d8:	f845 3b04 	str.w	r3, [r5], #4
 80086dc:	d8e8      	bhi.n	80086b0 <__mdiff+0x5c>
 80086de:	45bc      	cmp	ip, r7
 80086e0:	d304      	bcc.n	80086ec <__mdiff+0x98>
 80086e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80086e6:	b183      	cbz	r3, 800870a <__mdiff+0xb6>
 80086e8:	6106      	str	r6, [r0, #16]
 80086ea:	e7c5      	b.n	8008678 <__mdiff+0x24>
 80086ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80086f0:	fa1e f381 	uxtah	r3, lr, r1
 80086f4:	141a      	asrs	r2, r3, #16
 80086f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008700:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008704:	f845 3b04 	str.w	r3, [r5], #4
 8008708:	e7e9      	b.n	80086de <__mdiff+0x8a>
 800870a:	3e01      	subs	r6, #1
 800870c:	e7e9      	b.n	80086e2 <__mdiff+0x8e>

0800870e <__d2b>:
 800870e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008712:	460e      	mov	r6, r1
 8008714:	2101      	movs	r1, #1
 8008716:	ec59 8b10 	vmov	r8, r9, d0
 800871a:	4615      	mov	r5, r2
 800871c:	f7ff fd6b 	bl	80081f6 <_Balloc>
 8008720:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008724:	4607      	mov	r7, r0
 8008726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800872a:	bb34      	cbnz	r4, 800877a <__d2b+0x6c>
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	f1b8 0300 	subs.w	r3, r8, #0
 8008732:	d027      	beq.n	8008784 <__d2b+0x76>
 8008734:	a802      	add	r0, sp, #8
 8008736:	f840 3d08 	str.w	r3, [r0, #-8]!
 800873a:	f7ff fe01 	bl	8008340 <__lo0bits>
 800873e:	9900      	ldr	r1, [sp, #0]
 8008740:	b1f0      	cbz	r0, 8008780 <__d2b+0x72>
 8008742:	9a01      	ldr	r2, [sp, #4]
 8008744:	f1c0 0320 	rsb	r3, r0, #32
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	430b      	orrs	r3, r1
 800874e:	40c2      	lsrs	r2, r0
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	9b01      	ldr	r3, [sp, #4]
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	bf14      	ite	ne
 800875c:	2102      	movne	r1, #2
 800875e:	2101      	moveq	r1, #1
 8008760:	6139      	str	r1, [r7, #16]
 8008762:	b1c4      	cbz	r4, 8008796 <__d2b+0x88>
 8008764:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008768:	4404      	add	r4, r0
 800876a:	6034      	str	r4, [r6, #0]
 800876c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008770:	6028      	str	r0, [r5, #0]
 8008772:	4638      	mov	r0, r7
 8008774:	b003      	add	sp, #12
 8008776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800877e:	e7d5      	b.n	800872c <__d2b+0x1e>
 8008780:	6179      	str	r1, [r7, #20]
 8008782:	e7e7      	b.n	8008754 <__d2b+0x46>
 8008784:	a801      	add	r0, sp, #4
 8008786:	f7ff fddb 	bl	8008340 <__lo0bits>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	2101      	movs	r1, #1
 8008790:	6139      	str	r1, [r7, #16]
 8008792:	3020      	adds	r0, #32
 8008794:	e7e5      	b.n	8008762 <__d2b+0x54>
 8008796:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800879a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800879e:	6030      	str	r0, [r6, #0]
 80087a0:	6918      	ldr	r0, [r3, #16]
 80087a2:	f7ff fdae 	bl	8008302 <__hi0bits>
 80087a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80087aa:	e7e1      	b.n	8008770 <__d2b+0x62>

080087ac <_calloc_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	fb02 f401 	mul.w	r4, r2, r1
 80087b2:	4621      	mov	r1, r4
 80087b4:	f7fe f9d8 	bl	8006b68 <_malloc_r>
 80087b8:	4605      	mov	r5, r0
 80087ba:	b118      	cbz	r0, 80087c4 <_calloc_r+0x18>
 80087bc:	4622      	mov	r2, r4
 80087be:	2100      	movs	r1, #0
 80087c0:	f7fe f97c 	bl	8006abc <memset>
 80087c4:	4628      	mov	r0, r5
 80087c6:	bd38      	pop	{r3, r4, r5, pc}

080087c8 <__ssputs_r>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	688e      	ldr	r6, [r1, #8]
 80087ce:	429e      	cmp	r6, r3
 80087d0:	4682      	mov	sl, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4690      	mov	r8, r2
 80087d6:	4699      	mov	r9, r3
 80087d8:	d837      	bhi.n	800884a <__ssputs_r+0x82>
 80087da:	898a      	ldrh	r2, [r1, #12]
 80087dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087e0:	d031      	beq.n	8008846 <__ssputs_r+0x7e>
 80087e2:	6825      	ldr	r5, [r4, #0]
 80087e4:	6909      	ldr	r1, [r1, #16]
 80087e6:	1a6f      	subs	r7, r5, r1
 80087e8:	6965      	ldr	r5, [r4, #20]
 80087ea:	2302      	movs	r3, #2
 80087ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80087f4:	f109 0301 	add.w	r3, r9, #1
 80087f8:	443b      	add	r3, r7
 80087fa:	429d      	cmp	r5, r3
 80087fc:	bf38      	it	cc
 80087fe:	461d      	movcc	r5, r3
 8008800:	0553      	lsls	r3, r2, #21
 8008802:	d530      	bpl.n	8008866 <__ssputs_r+0x9e>
 8008804:	4629      	mov	r1, r5
 8008806:	f7fe f9af 	bl	8006b68 <_malloc_r>
 800880a:	4606      	mov	r6, r0
 800880c:	b950      	cbnz	r0, 8008824 <__ssputs_r+0x5c>
 800880e:	230c      	movs	r3, #12
 8008810:	f8ca 3000 	str.w	r3, [sl]
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	463a      	mov	r2, r7
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	f7ff fcd8 	bl	80081dc <memcpy>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	6126      	str	r6, [r4, #16]
 800883a:	6165      	str	r5, [r4, #20]
 800883c:	443e      	add	r6, r7
 800883e:	1bed      	subs	r5, r5, r7
 8008840:	6026      	str	r6, [r4, #0]
 8008842:	60a5      	str	r5, [r4, #8]
 8008844:	464e      	mov	r6, r9
 8008846:	454e      	cmp	r6, r9
 8008848:	d900      	bls.n	800884c <__ssputs_r+0x84>
 800884a:	464e      	mov	r6, r9
 800884c:	4632      	mov	r2, r6
 800884e:	4641      	mov	r1, r8
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	f000 f91d 	bl	8008a90 <memmove>
 8008856:	68a3      	ldr	r3, [r4, #8]
 8008858:	1b9b      	subs	r3, r3, r6
 800885a:	60a3      	str	r3, [r4, #8]
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	441e      	add	r6, r3
 8008860:	6026      	str	r6, [r4, #0]
 8008862:	2000      	movs	r0, #0
 8008864:	e7dc      	b.n	8008820 <__ssputs_r+0x58>
 8008866:	462a      	mov	r2, r5
 8008868:	f000 f92b 	bl	8008ac2 <_realloc_r>
 800886c:	4606      	mov	r6, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	d1e2      	bne.n	8008838 <__ssputs_r+0x70>
 8008872:	6921      	ldr	r1, [r4, #16]
 8008874:	4650      	mov	r0, sl
 8008876:	f7fe f929 	bl	8006acc <_free_r>
 800887a:	e7c8      	b.n	800880e <__ssputs_r+0x46>

0800887c <_svfiprintf_r>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	461d      	mov	r5, r3
 8008882:	898b      	ldrh	r3, [r1, #12]
 8008884:	061f      	lsls	r7, r3, #24
 8008886:	b09d      	sub	sp, #116	; 0x74
 8008888:	4680      	mov	r8, r0
 800888a:	460c      	mov	r4, r1
 800888c:	4616      	mov	r6, r2
 800888e:	d50f      	bpl.n	80088b0 <_svfiprintf_r+0x34>
 8008890:	690b      	ldr	r3, [r1, #16]
 8008892:	b96b      	cbnz	r3, 80088b0 <_svfiprintf_r+0x34>
 8008894:	2140      	movs	r1, #64	; 0x40
 8008896:	f7fe f967 	bl	8006b68 <_malloc_r>
 800889a:	6020      	str	r0, [r4, #0]
 800889c:	6120      	str	r0, [r4, #16]
 800889e:	b928      	cbnz	r0, 80088ac <_svfiprintf_r+0x30>
 80088a0:	230c      	movs	r3, #12
 80088a2:	f8c8 3000 	str.w	r3, [r8]
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	e0c8      	b.n	8008a3e <_svfiprintf_r+0x1c2>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	6163      	str	r3, [r4, #20]
 80088b0:	2300      	movs	r3, #0
 80088b2:	9309      	str	r3, [sp, #36]	; 0x24
 80088b4:	2320      	movs	r3, #32
 80088b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ba:	2330      	movs	r3, #48	; 0x30
 80088bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c0:	9503      	str	r5, [sp, #12]
 80088c2:	f04f 0b01 	mov.w	fp, #1
 80088c6:	4637      	mov	r7, r6
 80088c8:	463d      	mov	r5, r7
 80088ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088ce:	b10b      	cbz	r3, 80088d4 <_svfiprintf_r+0x58>
 80088d0:	2b25      	cmp	r3, #37	; 0x25
 80088d2:	d13e      	bne.n	8008952 <_svfiprintf_r+0xd6>
 80088d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80088d8:	d00b      	beq.n	80088f2 <_svfiprintf_r+0x76>
 80088da:	4653      	mov	r3, sl
 80088dc:	4632      	mov	r2, r6
 80088de:	4621      	mov	r1, r4
 80088e0:	4640      	mov	r0, r8
 80088e2:	f7ff ff71 	bl	80087c8 <__ssputs_r>
 80088e6:	3001      	adds	r0, #1
 80088e8:	f000 80a4 	beq.w	8008a34 <_svfiprintf_r+0x1b8>
 80088ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ee:	4453      	add	r3, sl
 80088f0:	9309      	str	r3, [sp, #36]	; 0x24
 80088f2:	783b      	ldrb	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 809d 	beq.w	8008a34 <_svfiprintf_r+0x1b8>
 80088fa:	2300      	movs	r3, #0
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890c:	931a      	str	r3, [sp, #104]	; 0x68
 800890e:	462f      	mov	r7, r5
 8008910:	2205      	movs	r2, #5
 8008912:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008916:	4850      	ldr	r0, [pc, #320]	; (8008a58 <_svfiprintf_r+0x1dc>)
 8008918:	f7f7 fc62 	bl	80001e0 <memchr>
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	b9d0      	cbnz	r0, 8008956 <_svfiprintf_r+0xda>
 8008920:	06d9      	lsls	r1, r3, #27
 8008922:	bf44      	itt	mi
 8008924:	2220      	movmi	r2, #32
 8008926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800892a:	071a      	lsls	r2, r3, #28
 800892c:	bf44      	itt	mi
 800892e:	222b      	movmi	r2, #43	; 0x2b
 8008930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008934:	782a      	ldrb	r2, [r5, #0]
 8008936:	2a2a      	cmp	r2, #42	; 0x2a
 8008938:	d015      	beq.n	8008966 <_svfiprintf_r+0xea>
 800893a:	9a07      	ldr	r2, [sp, #28]
 800893c:	462f      	mov	r7, r5
 800893e:	2000      	movs	r0, #0
 8008940:	250a      	movs	r5, #10
 8008942:	4639      	mov	r1, r7
 8008944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008948:	3b30      	subs	r3, #48	; 0x30
 800894a:	2b09      	cmp	r3, #9
 800894c:	d94d      	bls.n	80089ea <_svfiprintf_r+0x16e>
 800894e:	b1b8      	cbz	r0, 8008980 <_svfiprintf_r+0x104>
 8008950:	e00f      	b.n	8008972 <_svfiprintf_r+0xf6>
 8008952:	462f      	mov	r7, r5
 8008954:	e7b8      	b.n	80088c8 <_svfiprintf_r+0x4c>
 8008956:	4a40      	ldr	r2, [pc, #256]	; (8008a58 <_svfiprintf_r+0x1dc>)
 8008958:	1a80      	subs	r0, r0, r2
 800895a:	fa0b f000 	lsl.w	r0, fp, r0
 800895e:	4318      	orrs	r0, r3
 8008960:	9004      	str	r0, [sp, #16]
 8008962:	463d      	mov	r5, r7
 8008964:	e7d3      	b.n	800890e <_svfiprintf_r+0x92>
 8008966:	9a03      	ldr	r2, [sp, #12]
 8008968:	1d11      	adds	r1, r2, #4
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	9103      	str	r1, [sp, #12]
 800896e:	2a00      	cmp	r2, #0
 8008970:	db01      	blt.n	8008976 <_svfiprintf_r+0xfa>
 8008972:	9207      	str	r2, [sp, #28]
 8008974:	e004      	b.n	8008980 <_svfiprintf_r+0x104>
 8008976:	4252      	negs	r2, r2
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	9207      	str	r2, [sp, #28]
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	783b      	ldrb	r3, [r7, #0]
 8008982:	2b2e      	cmp	r3, #46	; 0x2e
 8008984:	d10c      	bne.n	80089a0 <_svfiprintf_r+0x124>
 8008986:	787b      	ldrb	r3, [r7, #1]
 8008988:	2b2a      	cmp	r3, #42	; 0x2a
 800898a:	d133      	bne.n	80089f4 <_svfiprintf_r+0x178>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1d1a      	adds	r2, r3, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	9203      	str	r2, [sp, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfb8      	it	lt
 8008998:	f04f 33ff 	movlt.w	r3, #4294967295
 800899c:	3702      	adds	r7, #2
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	4d2e      	ldr	r5, [pc, #184]	; (8008a5c <_svfiprintf_r+0x1e0>)
 80089a2:	7839      	ldrb	r1, [r7, #0]
 80089a4:	2203      	movs	r2, #3
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7f7 fc1a 	bl	80001e0 <memchr>
 80089ac:	b138      	cbz	r0, 80089be <_svfiprintf_r+0x142>
 80089ae:	2340      	movs	r3, #64	; 0x40
 80089b0:	1b40      	subs	r0, r0, r5
 80089b2:	fa03 f000 	lsl.w	r0, r3, r0
 80089b6:	9b04      	ldr	r3, [sp, #16]
 80089b8:	4303      	orrs	r3, r0
 80089ba:	3701      	adds	r7, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	7839      	ldrb	r1, [r7, #0]
 80089c0:	4827      	ldr	r0, [pc, #156]	; (8008a60 <_svfiprintf_r+0x1e4>)
 80089c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c6:	2206      	movs	r2, #6
 80089c8:	1c7e      	adds	r6, r7, #1
 80089ca:	f7f7 fc09 	bl	80001e0 <memchr>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d038      	beq.n	8008a44 <_svfiprintf_r+0x1c8>
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <_svfiprintf_r+0x1e8>)
 80089d4:	bb13      	cbnz	r3, 8008a1c <_svfiprintf_r+0x1a0>
 80089d6:	9b03      	ldr	r3, [sp, #12]
 80089d8:	3307      	adds	r3, #7
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	3308      	adds	r3, #8
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e4:	444b      	add	r3, r9
 80089e6:	9309      	str	r3, [sp, #36]	; 0x24
 80089e8:	e76d      	b.n	80088c6 <_svfiprintf_r+0x4a>
 80089ea:	fb05 3202 	mla	r2, r5, r2, r3
 80089ee:	2001      	movs	r0, #1
 80089f0:	460f      	mov	r7, r1
 80089f2:	e7a6      	b.n	8008942 <_svfiprintf_r+0xc6>
 80089f4:	2300      	movs	r3, #0
 80089f6:	3701      	adds	r7, #1
 80089f8:	9305      	str	r3, [sp, #20]
 80089fa:	4619      	mov	r1, r3
 80089fc:	250a      	movs	r5, #10
 80089fe:	4638      	mov	r0, r7
 8008a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a04:	3a30      	subs	r2, #48	; 0x30
 8008a06:	2a09      	cmp	r2, #9
 8008a08:	d903      	bls.n	8008a12 <_svfiprintf_r+0x196>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0c8      	beq.n	80089a0 <_svfiprintf_r+0x124>
 8008a0e:	9105      	str	r1, [sp, #20]
 8008a10:	e7c6      	b.n	80089a0 <_svfiprintf_r+0x124>
 8008a12:	fb05 2101 	mla	r1, r5, r1, r2
 8008a16:	2301      	movs	r3, #1
 8008a18:	4607      	mov	r7, r0
 8008a1a:	e7f0      	b.n	80089fe <_svfiprintf_r+0x182>
 8008a1c:	ab03      	add	r3, sp, #12
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	4622      	mov	r2, r4
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <_svfiprintf_r+0x1ec>)
 8008a24:	a904      	add	r1, sp, #16
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7fe f98c 	bl	8006d44 <_printf_float>
 8008a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a30:	4681      	mov	r9, r0
 8008a32:	d1d6      	bne.n	80089e2 <_svfiprintf_r+0x166>
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	065b      	lsls	r3, r3, #25
 8008a38:	f53f af35 	bmi.w	80088a6 <_svfiprintf_r+0x2a>
 8008a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a3e:	b01d      	add	sp, #116	; 0x74
 8008a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a44:	ab03      	add	r3, sp, #12
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4b07      	ldr	r3, [pc, #28]	; (8008a68 <_svfiprintf_r+0x1ec>)
 8008a4c:	a904      	add	r1, sp, #16
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7fe fc2e 	bl	80072b0 <_printf_i>
 8008a54:	e7ea      	b.n	8008a2c <_svfiprintf_r+0x1b0>
 8008a56:	bf00      	nop
 8008a58:	08008d7c 	.word	0x08008d7c
 8008a5c:	08008d82 	.word	0x08008d82
 8008a60:	08008d86 	.word	0x08008d86
 8008a64:	08006d45 	.word	0x08006d45
 8008a68:	080087c9 	.word	0x080087c9

08008a6c <__ascii_mbtowc>:
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	b901      	cbnz	r1, 8008a72 <__ascii_mbtowc+0x6>
 8008a70:	a901      	add	r1, sp, #4
 8008a72:	b142      	cbz	r2, 8008a86 <__ascii_mbtowc+0x1a>
 8008a74:	b14b      	cbz	r3, 8008a8a <__ascii_mbtowc+0x1e>
 8008a76:	7813      	ldrb	r3, [r2, #0]
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	7812      	ldrb	r2, [r2, #0]
 8008a7c:	1c10      	adds	r0, r2, #0
 8008a7e:	bf18      	it	ne
 8008a80:	2001      	movne	r0, #1
 8008a82:	b002      	add	sp, #8
 8008a84:	4770      	bx	lr
 8008a86:	4610      	mov	r0, r2
 8008a88:	e7fb      	b.n	8008a82 <__ascii_mbtowc+0x16>
 8008a8a:	f06f 0001 	mvn.w	r0, #1
 8008a8e:	e7f8      	b.n	8008a82 <__ascii_mbtowc+0x16>

08008a90 <memmove>:
 8008a90:	4288      	cmp	r0, r1
 8008a92:	b510      	push	{r4, lr}
 8008a94:	eb01 0302 	add.w	r3, r1, r2
 8008a98:	d807      	bhi.n	8008aaa <memmove+0x1a>
 8008a9a:	1e42      	subs	r2, r0, #1
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d00a      	beq.n	8008ab6 <memmove+0x26>
 8008aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aa4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008aa8:	e7f8      	b.n	8008a9c <memmove+0xc>
 8008aaa:	4283      	cmp	r3, r0
 8008aac:	d9f5      	bls.n	8008a9a <memmove+0xa>
 8008aae:	1881      	adds	r1, r0, r2
 8008ab0:	1ad2      	subs	r2, r2, r3
 8008ab2:	42d3      	cmn	r3, r2
 8008ab4:	d100      	bne.n	8008ab8 <memmove+0x28>
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008abc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ac0:	e7f7      	b.n	8008ab2 <memmove+0x22>

08008ac2 <_realloc_r>:
 8008ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	460e      	mov	r6, r1
 8008aca:	b921      	cbnz	r1, 8008ad6 <_realloc_r+0x14>
 8008acc:	4611      	mov	r1, r2
 8008ace:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ad2:	f7fe b849 	b.w	8006b68 <_malloc_r>
 8008ad6:	b922      	cbnz	r2, 8008ae2 <_realloc_r+0x20>
 8008ad8:	f7fd fff8 	bl	8006acc <_free_r>
 8008adc:	4625      	mov	r5, r4
 8008ade:	4628      	mov	r0, r5
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae2:	f000 f821 	bl	8008b28 <_malloc_usable_size_r>
 8008ae6:	42a0      	cmp	r0, r4
 8008ae8:	d20f      	bcs.n	8008b0a <_realloc_r+0x48>
 8008aea:	4621      	mov	r1, r4
 8008aec:	4638      	mov	r0, r7
 8008aee:	f7fe f83b 	bl	8006b68 <_malloc_r>
 8008af2:	4605      	mov	r5, r0
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d0f2      	beq.n	8008ade <_realloc_r+0x1c>
 8008af8:	4631      	mov	r1, r6
 8008afa:	4622      	mov	r2, r4
 8008afc:	f7ff fb6e 	bl	80081dc <memcpy>
 8008b00:	4631      	mov	r1, r6
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7fd ffe2 	bl	8006acc <_free_r>
 8008b08:	e7e9      	b.n	8008ade <_realloc_r+0x1c>
 8008b0a:	4635      	mov	r5, r6
 8008b0c:	e7e7      	b.n	8008ade <_realloc_r+0x1c>

08008b0e <__ascii_wctomb>:
 8008b0e:	b149      	cbz	r1, 8008b24 <__ascii_wctomb+0x16>
 8008b10:	2aff      	cmp	r2, #255	; 0xff
 8008b12:	bf85      	ittet	hi
 8008b14:	238a      	movhi	r3, #138	; 0x8a
 8008b16:	6003      	strhi	r3, [r0, #0]
 8008b18:	700a      	strbls	r2, [r1, #0]
 8008b1a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b1e:	bf98      	it	ls
 8008b20:	2001      	movls	r0, #1
 8008b22:	4770      	bx	lr
 8008b24:	4608      	mov	r0, r1
 8008b26:	4770      	bx	lr

08008b28 <_malloc_usable_size_r>:
 8008b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b2c:	1f18      	subs	r0, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbc      	itt	lt
 8008b32:	580b      	ldrlt	r3, [r1, r0]
 8008b34:	18c0      	addlt	r0, r0, r3
 8008b36:	4770      	bx	lr

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
