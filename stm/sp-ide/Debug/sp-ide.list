
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  0800bf50  0800bf50  0001bf50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c710  0800c710  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800c710  0800c710  0001c710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c718  0800c718  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c718  0800c718  0001c718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c71c  0800c71c  0001c71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800c720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc4  20000238  0800c958  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000efc  0800c958  00020efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018450  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035fc  00000000  00000000  000386b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  0003bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  0003d350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024664  00000000  00000000  0003e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ee4  00000000  00000000  00062f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d78d3  00000000  00000000  00076de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e6bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006848  00000000  00000000  0014e738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf38 	.word	0x0800bf38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800bf38 	.word	0x0800bf38

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <HTTP_Init>:

#define MAX_PAGE_SIZE	500

char WEBPAGE[MAX_PAGE_SIZE] = { 0 };

void HTTP_Init(void) {
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	strcpy(WEBPAGE, "HTTP/1.1 200 OK\r\n");
 8000ecc:	4ab3      	ldr	r2, [pc, #716]	; (800119c <HTTP_Init+0x2d4>)
 8000ece:	4bb4      	ldr	r3, [pc, #720]	; (80011a0 <HTTP_Init+0x2d8>)
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	682b      	ldr	r3, [r5, #0]
 8000eda:	8023      	strh	r3, [r4, #0]
	strcat(WEBPAGE, "Content-Type: text/html\r\n");
 8000edc:	48af      	ldr	r0, [pc, #700]	; (800119c <HTTP_Init+0x2d4>)
 8000ede:	f7ff f981 	bl	80001e4 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4bad      	ldr	r3, [pc, #692]	; (800119c <HTTP_Init+0x2d4>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	4aae      	ldr	r2, [pc, #696]	; (80011a4 <HTTP_Init+0x2dc>)
 8000eec:	461d      	mov	r5, r3
 8000eee:	4614      	mov	r4, r2
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	6028      	str	r0, [r5, #0]
 8000ef4:	6069      	str	r1, [r5, #4]
 8000ef6:	60aa      	str	r2, [r5, #8]
 8000ef8:	60eb      	str	r3, [r5, #12]
 8000efa:	cc03      	ldmia	r4!, {r0, r1}
 8000efc:	6128      	str	r0, [r5, #16]
 8000efe:	6169      	str	r1, [r5, #20]
 8000f00:	8823      	ldrh	r3, [r4, #0]
 8000f02:	832b      	strh	r3, [r5, #24]
	strcat(WEBPAGE, "Content-Lenght: 398\r\n");
 8000f04:	48a5      	ldr	r0, [pc, #660]	; (800119c <HTTP_Init+0x2d4>)
 8000f06:	f7ff f96d 	bl	80001e4 <strlen>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4ba3      	ldr	r3, [pc, #652]	; (800119c <HTTP_Init+0x2d4>)
 8000f10:	4413      	add	r3, r2
 8000f12:	4aa5      	ldr	r2, [pc, #660]	; (80011a8 <HTTP_Init+0x2e0>)
 8000f14:	461d      	mov	r5, r3
 8000f16:	4614      	mov	r4, r2
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	6028      	str	r0, [r5, #0]
 8000f1c:	6069      	str	r1, [r5, #4]
 8000f1e:	60aa      	str	r2, [r5, #8]
 8000f20:	60eb      	str	r3, [r5, #12]
 8000f22:	6820      	ldr	r0, [r4, #0]
 8000f24:	6128      	str	r0, [r5, #16]
 8000f26:	88a3      	ldrh	r3, [r4, #4]
 8000f28:	82ab      	strh	r3, [r5, #20]
	strcat(WEBPAGE, "Connection: close\r\n\r\n");
 8000f2a:	489c      	ldr	r0, [pc, #624]	; (800119c <HTTP_Init+0x2d4>)
 8000f2c:	f7ff f95a 	bl	80001e4 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b99      	ldr	r3, [pc, #612]	; (800119c <HTTP_Init+0x2d4>)
 8000f36:	4413      	add	r3, r2
 8000f38:	4a9c      	ldr	r2, [pc, #624]	; (80011ac <HTTP_Init+0x2e4>)
 8000f3a:	461d      	mov	r5, r3
 8000f3c:	4614      	mov	r4, r2
 8000f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f40:	6028      	str	r0, [r5, #0]
 8000f42:	6069      	str	r1, [r5, #4]
 8000f44:	60aa      	str	r2, [r5, #8]
 8000f46:	60eb      	str	r3, [r5, #12]
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	6128      	str	r0, [r5, #16]
 8000f4c:	88a3      	ldrh	r3, [r4, #4]
 8000f4e:	82ab      	strh	r3, [r5, #20]
	strcat(WEBPAGE, "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n");
 8000f50:	4892      	ldr	r0, [pc, #584]	; (800119c <HTTP_Init+0x2d4>)
 8000f52:	f7ff f947 	bl	80001e4 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b90      	ldr	r3, [pc, #576]	; (800119c <HTTP_Init+0x2d4>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <HTTP_Init+0x2e8>)
 8000f60:	4614      	mov	r4, r2
 8000f62:	469c      	mov	ip, r3
 8000f64:	f104 0e20 	add.w	lr, r4, #32
 8000f68:	4665      	mov	r5, ip
 8000f6a:	4626      	mov	r6, r4
 8000f6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f6e:	6028      	str	r0, [r5, #0]
 8000f70:	6069      	str	r1, [r5, #4]
 8000f72:	60aa      	str	r2, [r5, #8]
 8000f74:	60eb      	str	r3, [r5, #12]
 8000f76:	3410      	adds	r4, #16
 8000f78:	f10c 0c10 	add.w	ip, ip, #16
 8000f7c:	4574      	cmp	r4, lr
 8000f7e:	d1f3      	bne.n	8000f68 <HTTP_Init+0xa0>
 8000f80:	4662      	mov	r2, ip
 8000f82:	4623      	mov	r3, r4
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	8013      	strh	r3, [r2, #0]
	strcat(WEBPAGE, "<title>Dioda RGB</title>\r\n</head>\r\n");
 8000f88:	4884      	ldr	r0, [pc, #528]	; (800119c <HTTP_Init+0x2d4>)
 8000f8a:	f7ff f92b 	bl	80001e4 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b82      	ldr	r3, [pc, #520]	; (800119c <HTTP_Init+0x2d4>)
 8000f94:	4413      	add	r3, r2
 8000f96:	4a87      	ldr	r2, [pc, #540]	; (80011b4 <HTTP_Init+0x2ec>)
 8000f98:	4614      	mov	r4, r2
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	f104 0e20 	add.w	lr, r4, #32
 8000fa0:	4665      	mov	r5, ip
 8000fa2:	4626      	mov	r6, r4
 8000fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fa6:	6028      	str	r0, [r5, #0]
 8000fa8:	6069      	str	r1, [r5, #4]
 8000faa:	60aa      	str	r2, [r5, #8]
 8000fac:	60eb      	str	r3, [r5, #12]
 8000fae:	3410      	adds	r4, #16
 8000fb0:	f10c 0c10 	add.w	ip, ip, #16
 8000fb4:	4574      	cmp	r4, lr
 8000fb6:	d1f3      	bne.n	8000fa0 <HTTP_Init+0xd8>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	4622      	mov	r2, r4
 8000fbc:	6810      	ldr	r0, [r2, #0]
 8000fbe:	6018      	str	r0, [r3, #0]
	strcat(WEBPAGE, "<body>\r\n<form method=\"get\">\r\n");
 8000fc0:	4876      	ldr	r0, [pc, #472]	; (800119c <HTTP_Init+0x2d4>)
 8000fc2:	f7ff f90f 	bl	80001e4 <strlen>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b74      	ldr	r3, [pc, #464]	; (800119c <HTTP_Init+0x2d4>)
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a7a      	ldr	r2, [pc, #488]	; (80011b8 <HTTP_Init+0x2f0>)
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	4614      	mov	r4, r2
 8000fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd6:	6028      	str	r0, [r5, #0]
 8000fd8:	6069      	str	r1, [r5, #4]
 8000fda:	60aa      	str	r2, [r5, #8]
 8000fdc:	60eb      	str	r3, [r5, #12]
 8000fde:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000fe0:	6128      	str	r0, [r5, #16]
 8000fe2:	6169      	str	r1, [r5, #20]
 8000fe4:	61aa      	str	r2, [r5, #24]
 8000fe6:	8823      	ldrh	r3, [r4, #0]
 8000fe8:	83ab      	strh	r3, [r5, #28]
	strcat(WEBPAGE, "<p><b>Czerwony (0-255):</b> <input type=\"text\"");
 8000fea:	486c      	ldr	r0, [pc, #432]	; (800119c <HTTP_Init+0x2d4>)
 8000fec:	f7ff f8fa 	bl	80001e4 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b69      	ldr	r3, [pc, #420]	; (800119c <HTTP_Init+0x2d4>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a70      	ldr	r2, [pc, #448]	; (80011bc <HTTP_Init+0x2f4>)
 8000ffa:	4615      	mov	r5, r2
 8000ffc:	469c      	mov	ip, r3
 8000ffe:	f105 0e20 	add.w	lr, r5, #32
 8001002:	4664      	mov	r4, ip
 8001004:	462e      	mov	r6, r5
 8001006:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001008:	6020      	str	r0, [r4, #0]
 800100a:	6061      	str	r1, [r4, #4]
 800100c:	60a2      	str	r2, [r4, #8]
 800100e:	60e3      	str	r3, [r4, #12]
 8001010:	3510      	adds	r5, #16
 8001012:	f10c 0c10 	add.w	ip, ip, #16
 8001016:	4575      	cmp	r5, lr
 8001018:	d1f3      	bne.n	8001002 <HTTP_Init+0x13a>
 800101a:	4664      	mov	r4, ip
 800101c:	462b      	mov	r3, r5
 800101e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001020:	6020      	str	r0, [r4, #0]
 8001022:	6061      	str	r1, [r4, #4]
 8001024:	60a2      	str	r2, [r4, #8]
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	81a2      	strh	r2, [r4, #12]
 800102c:	73a3      	strb	r3, [r4, #14]
	strcat(WEBPAGE, " name=\"red\" value=\"0\" /></p>\r\n");
 800102e:	485b      	ldr	r0, [pc, #364]	; (800119c <HTTP_Init+0x2d4>)
 8001030:	f7ff f8d8 	bl	80001e4 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <HTTP_Init+0x2d4>)
 800103a:	4413      	add	r3, r2
 800103c:	4a60      	ldr	r2, [pc, #384]	; (80011c0 <HTTP_Init+0x2f8>)
 800103e:	461d      	mov	r5, r3
 8001040:	4614      	mov	r4, r2
 8001042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001044:	6028      	str	r0, [r5, #0]
 8001046:	6069      	str	r1, [r5, #4]
 8001048:	60aa      	str	r2, [r5, #8]
 800104a:	60eb      	str	r3, [r5, #12]
 800104c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800104e:	6128      	str	r0, [r5, #16]
 8001050:	6169      	str	r1, [r5, #20]
 8001052:	61aa      	str	r2, [r5, #24]
 8001054:	8823      	ldrh	r3, [r4, #0]
 8001056:	78a2      	ldrb	r2, [r4, #2]
 8001058:	83ab      	strh	r3, [r5, #28]
 800105a:	4613      	mov	r3, r2
 800105c:	77ab      	strb	r3, [r5, #30]
	strcat(WEBPAGE, "<p><b>Zielony (0-255):</b> <input type=\"text\"");
 800105e:	484f      	ldr	r0, [pc, #316]	; (800119c <HTTP_Init+0x2d4>)
 8001060:	f7ff f8c0 	bl	80001e4 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HTTP_Init+0x2d4>)
 800106a:	4413      	add	r3, r2
 800106c:	4a55      	ldr	r2, [pc, #340]	; (80011c4 <HTTP_Init+0x2fc>)
 800106e:	4614      	mov	r4, r2
 8001070:	469c      	mov	ip, r3
 8001072:	f104 0e20 	add.w	lr, r4, #32
 8001076:	4665      	mov	r5, ip
 8001078:	4626      	mov	r6, r4
 800107a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800107c:	6028      	str	r0, [r5, #0]
 800107e:	6069      	str	r1, [r5, #4]
 8001080:	60aa      	str	r2, [r5, #8]
 8001082:	60eb      	str	r3, [r5, #12]
 8001084:	3410      	adds	r4, #16
 8001086:	f10c 0c10 	add.w	ip, ip, #16
 800108a:	4574      	cmp	r4, lr
 800108c:	d1f3      	bne.n	8001076 <HTTP_Init+0x1ae>
 800108e:	4665      	mov	r5, ip
 8001090:	4623      	mov	r3, r4
 8001092:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001094:	6028      	str	r0, [r5, #0]
 8001096:	6069      	str	r1, [r5, #4]
 8001098:	60aa      	str	r2, [r5, #8]
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	81ab      	strh	r3, [r5, #12]
	strcat(WEBPAGE, " name=\"green\" value=\"0\" /></p>\r\n");
 800109e:	483f      	ldr	r0, [pc, #252]	; (800119c <HTTP_Init+0x2d4>)
 80010a0:	f7ff f8a0 	bl	80001e4 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b3c      	ldr	r3, [pc, #240]	; (800119c <HTTP_Init+0x2d4>)
 80010aa:	4413      	add	r3, r2
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HTTP_Init+0x300>)
 80010ae:	4614      	mov	r4, r2
 80010b0:	469c      	mov	ip, r3
 80010b2:	f104 0e20 	add.w	lr, r4, #32
 80010b6:	4665      	mov	r5, ip
 80010b8:	4626      	mov	r6, r4
 80010ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010bc:	6028      	str	r0, [r5, #0]
 80010be:	6069      	str	r1, [r5, #4]
 80010c0:	60aa      	str	r2, [r5, #8]
 80010c2:	60eb      	str	r3, [r5, #12]
 80010c4:	3410      	adds	r4, #16
 80010c6:	f10c 0c10 	add.w	ip, ip, #16
 80010ca:	4574      	cmp	r4, lr
 80010cc:	d1f3      	bne.n	80010b6 <HTTP_Init+0x1ee>
 80010ce:	4663      	mov	r3, ip
 80010d0:	4622      	mov	r2, r4
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	701a      	strb	r2, [r3, #0]
	strcat(WEBPAGE, "<p><b>Niebieski (0-255):</b> <input type=\"text\"");
 80010d6:	4831      	ldr	r0, [pc, #196]	; (800119c <HTTP_Init+0x2d4>)
 80010d8:	f7ff f884 	bl	80001e4 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HTTP_Init+0x2d4>)
 80010e2:	4413      	add	r3, r2
 80010e4:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HTTP_Init+0x304>)
 80010e6:	4614      	mov	r4, r2
 80010e8:	469c      	mov	ip, r3
 80010ea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010ee:	4665      	mov	r5, ip
 80010f0:	4626      	mov	r6, r4
 80010f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010f4:	6028      	str	r0, [r5, #0]
 80010f6:	6069      	str	r1, [r5, #4]
 80010f8:	60aa      	str	r2, [r5, #8]
 80010fa:	60eb      	str	r3, [r5, #12]
 80010fc:	3410      	adds	r4, #16
 80010fe:	f10c 0c10 	add.w	ip, ip, #16
 8001102:	4574      	cmp	r4, lr
 8001104:	d1f3      	bne.n	80010ee <HTTP_Init+0x226>
	strcat(WEBPAGE, " name=\"blue\" value=\"0\" /></p>\r\n");
 8001106:	4825      	ldr	r0, [pc, #148]	; (800119c <HTTP_Init+0x2d4>)
 8001108:	f7ff f86c 	bl	80001e4 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <HTTP_Init+0x2d4>)
 8001112:	4413      	add	r3, r2
 8001114:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <HTTP_Init+0x308>)
 8001116:	461c      	mov	r4, r3
 8001118:	4615      	mov	r5, r2
 800111a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800111c:	6020      	str	r0, [r4, #0]
 800111e:	6061      	str	r1, [r4, #4]
 8001120:	60a2      	str	r2, [r4, #8]
 8001122:	60e3      	str	r3, [r4, #12]
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	6120      	str	r0, [r4, #16]
 8001128:	6161      	str	r1, [r4, #20]
 800112a:	61a2      	str	r2, [r4, #24]
 800112c:	61e3      	str	r3, [r4, #28]
	strcat(WEBPAGE, "<input type=\"submit\" value=\"Ustaw kolor\" />\r\n");
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <HTTP_Init+0x2d4>)
 8001130:	f7ff f858 	bl	80001e4 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HTTP_Init+0x2d4>)
 800113a:	4413      	add	r3, r2
 800113c:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <HTTP_Init+0x30c>)
 800113e:	4614      	mov	r4, r2
 8001140:	469c      	mov	ip, r3
 8001142:	f104 0e20 	add.w	lr, r4, #32
 8001146:	4665      	mov	r5, ip
 8001148:	4626      	mov	r6, r4
 800114a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800114c:	6028      	str	r0, [r5, #0]
 800114e:	6069      	str	r1, [r5, #4]
 8001150:	60aa      	str	r2, [r5, #8]
 8001152:	60eb      	str	r3, [r5, #12]
 8001154:	3410      	adds	r4, #16
 8001156:	f10c 0c10 	add.w	ip, ip, #16
 800115a:	4574      	cmp	r4, lr
 800115c:	d1f3      	bne.n	8001146 <HTTP_Init+0x27e>
 800115e:	4665      	mov	r5, ip
 8001160:	4623      	mov	r3, r4
 8001162:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001164:	6028      	str	r0, [r5, #0]
 8001166:	6069      	str	r1, [r5, #4]
 8001168:	60aa      	str	r2, [r5, #8]
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	81ab      	strh	r3, [r5, #12]
	strcat(WEBPAGE, "</form>\r\n</body>\r\n</html>");
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <HTTP_Init+0x2d4>)
 8001170:	f7ff f838 	bl	80001e4 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HTTP_Init+0x2d4>)
 800117a:	4413      	add	r3, r2
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HTTP_Init+0x310>)
 800117e:	461d      	mov	r5, r3
 8001180:	4614      	mov	r4, r2
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	6028      	str	r0, [r5, #0]
 8001186:	6069      	str	r1, [r5, #4]
 8001188:	60aa      	str	r2, [r5, #8]
 800118a:	60eb      	str	r3, [r5, #12]
 800118c:	cc03      	ldmia	r4!, {r0, r1}
 800118e:	6128      	str	r0, [r5, #16]
 8001190:	6169      	str	r1, [r5, #20]
 8001192:	8823      	ldrh	r3, [r4, #0]
 8001194:	832b      	strh	r3, [r5, #24]
}
 8001196:	bf00      	nop
 8001198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	20000254 	.word	0x20000254
 80011a0:	0800bf50 	.word	0x0800bf50
 80011a4:	0800bf64 	.word	0x0800bf64
 80011a8:	0800bf80 	.word	0x0800bf80
 80011ac:	0800bf98 	.word	0x0800bf98
 80011b0:	0800bfb0 	.word	0x0800bfb0
 80011b4:	0800bfd4 	.word	0x0800bfd4
 80011b8:	0800bff8 	.word	0x0800bff8
 80011bc:	0800c018 	.word	0x0800c018
 80011c0:	0800c048 	.word	0x0800c048
 80011c4:	0800c068 	.word	0x0800c068
 80011c8:	0800c098 	.word	0x0800c098
 80011cc:	0800c0bc 	.word	0x0800c0bc
 80011d0:	0800c0ec 	.word	0x0800c0ec
 80011d4:	0800c10c 	.word	0x0800c10c
 80011d8:	0800c13c 	.word	0x0800c13c

080011dc <HTTP_HandleRequest>:

char* HTTP_HandleRequest(char* request) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	return (char*) WEBPAGE;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HTTP_HandleRequest+0x18>)
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000254 	.word	0x20000254

080011f8 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <_LCD_SetRowOffsets+0x3c>)
 800120c:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_LCD_SetRowOffsets+0x3c>)
 8001214:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <_LCD_SetRowOffsets+0x3c>)
 800121c:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <_LCD_SetRowOffsets+0x3c>)
 8001224:	70da      	strb	r2, [r3, #3]
}
 8001226:	bf00      	nop
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000474 	.word	0x20000474

08001238 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <_LCD_EnableSignal+0x38>)
 8001242:	f005 f8e3 	bl	800640c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f004 fdd8 	bl	8005dfc <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2140      	movs	r1, #64	; 0x40
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <_LCD_EnableSignal+0x38>)
 8001252:	f005 f8db 	bl	800640c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f004 fdd0 	bl	8005dfc <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2140      	movs	r1, #64	; 0x40
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <_LCD_EnableSignal+0x38>)
 8001262:	f005 f8d3 	bl	800640c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f004 fdc8 	bl	8005dfc <HAL_Delay>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e012      	b.n	80012aa <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _readyData[i],
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <_LCD_WriteData+0x48>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	fa42 f303 	asr.w	r3, r2, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _readyData[i],
 800129c:	461a      	mov	r2, r3
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <_LCD_WriteData+0x4c>)
 80012a0:	f005 f8b4 	bl	800640c <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	dde9      	ble.n	8001284 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 80012b0:	f7ff ffc2 	bl	8001238 <_LCD_EnableSignal>
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000468 	.word	0x20000468
 80012c0:	40021000 	.word	0x40021000

080012c4 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	461a      	mov	r2, r3
 80012d8:	2110      	movs	r1, #16
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <_LCD_SendByteWithState+0x44>)
 80012dc:	f005 f896 	bl	800640c <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2120      	movs	r1, #32
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <_LCD_SendByteWithState+0x44>)
 80012e6:	f005 f891 	bl	800640c <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ffbf 	bl	8001274 <_LCD_WriteData>
	_LCD_WriteData(value);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffbb 	bl	8001274 <_LCD_WriteData>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffd2 	bl	80012c4 <_LCD_SendByteWithState>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2101      	movs	r1, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffc1 	bl	80012c4 <_LCD_SendByteWithState>

	if (moveCursor) {
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d021      	beq.n	800138c <_LCD_SendData+0x64>
		++_currentCol;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <_LCD_SendData+0x6c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_LCD_SendData+0x6c>)
 8001352:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <_LCD_SendData+0x6c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b13      	cmp	r3, #19
 800135a:	d917      	bls.n	800138c <_LCD_SendData+0x64>
			_currentCol = 0;
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <_LCD_SendData+0x6c>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <_LCD_SendData+0x70>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <_LCD_SendData+0x70>)
 800136c:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <_LCD_SendData+0x70>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d902      	bls.n	800137c <_LCD_SendData+0x54>
				_currentRow = 0;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_LCD_SendData+0x70>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <_LCD_SendData+0x6c>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <_LCD_SendData+0x70>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f000 f900 	bl	800158c <LCD_SetCursor>
		}
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000479 	.word	0x20000479
 8001398:	20000464 	.word	0x20000464

0800139c <LCD_Init>:

void LCD_Init(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
	/* Piny danych */
	_readyData[0] = D4_PIN;
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <LCD_Init+0x150>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	801a      	strh	r2, [r3, #0]
	_readyData[1] = D5_PIN;
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <LCD_Init+0x150>)
 80013aa:	2202      	movs	r2, #2
 80013ac:	805a      	strh	r2, [r3, #2]
	_readyData[2] = D6_PIN;
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <LCD_Init+0x150>)
 80013b0:	2204      	movs	r2, #4
 80013b2:	809a      	strh	r2, [r3, #4]
	_readyData[3] = D7_PIN;
 80013b4:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <LCD_Init+0x150>)
 80013b6:	2208      	movs	r2, #8
 80013b8:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <LCD_Init+0x154>)
 80013bc:	2208      	movs	r2, #8
 80013be:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 80013c0:	f000 f8ba 	bl	8001538 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 80013c4:	2354      	movs	r3, #84	; 0x54
 80013c6:	2214      	movs	r2, #20
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff14 	bl	80011f8 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 80013d0:	2032      	movs	r0, #50	; 0x32
 80013d2:	f004 fd13 	bl	8005dfc <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2110      	movs	r1, #16
 80013da:	4846      	ldr	r0, [pc, #280]	; (80014f4 <LCD_Init+0x158>)
 80013dc:	f005 f816 	bl	800640c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	4843      	ldr	r0, [pc, #268]	; (80014f4 <LCD_Init+0x158>)
 80013e6:	f005 f811 	bl	800640c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	4841      	ldr	r0, [pc, #260]	; (80014f4 <LCD_Init+0x158>)
 80013f0:	f005 f80c 	bl	800640c <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f7ff ff3d 	bl	8001274 <_LCD_WriteData>
	HAL_Delay(5);
 80013fa:	2005      	movs	r0, #5
 80013fc:	f004 fcfe 	bl	8005dfc <HAL_Delay>

	_LCD_WriteData(0x03);
 8001400:	2003      	movs	r0, #3
 8001402:	f7ff ff37 	bl	8001274 <_LCD_WriteData>
	HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f004 fcf8 	bl	8005dfc <HAL_Delay>

	_LCD_WriteData(0x03);
 800140c:	2003      	movs	r0, #3
 800140e:	f7ff ff31 	bl	8001274 <_LCD_WriteData>
	HAL_Delay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f004 fcf2 	bl	8005dfc <HAL_Delay>

	_LCD_WriteData(0x02);
 8001418:	2002      	movs	r0, #2
 800141a:	f7ff ff2b 	bl	8001274 <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <LCD_Init+0x154>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff6f 	bl	800130c <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 800142e:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <LCD_Init+0x15c>)
 8001430:	2204      	movs	r2, #4
 8001432:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8001434:	f000 f8da 	bl	80015ec <LCD_DisplayOn>
	LCD_ClearScreen();
 8001438:	f000 f896 	bl	8001568 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <LCD_Init+0x160>)
 800143e:	2202      	movs	r2, #2
 8001440:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <LCD_Init+0x160>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <_LCD_SendCommand>

	_currentRow = 0;
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <LCD_Init+0x164>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <LCD_Init+0x168>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 800145e:	482a      	ldr	r0, [pc, #168]	; (8001508 <LCD_Init+0x16c>)
 8001460:	f000 f956 	bl	8001710 <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <LCD_Init+0x170>)
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800146e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4619      	mov	r1, r3
 8001478:	2007      	movs	r0, #7
 800147a:	f000 fb59 	bl	8001b30 <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <LCD_Init+0x174>)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001488:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4619      	mov	r1, r3
 8001492:	2006      	movs	r0, #6
 8001494:	f000 fb4c 	bl	8001b30 <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8001498:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <LCD_Init+0x178>)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 fb3f 	bl	8001b30 <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <LCD_Init+0x17c>)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014bc:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4619      	mov	r1, r3
 80014c6:	2004      	movs	r0, #4
 80014c8:	f000 fb32 	bl	8001b30 <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <LCD_Init+0x180>)
 80014ce:	463b      	mov	r3, r7
 80014d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fb27 	bl	8001b30 <LCD_DefineCustomChar>
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000468 	.word	0x20000468
 80014f0:	20000470 	.word	0x20000470
 80014f4:	40021000 	.word	0x40021000
 80014f8:	20000478 	.word	0x20000478
 80014fc:	2000047a 	.word	0x2000047a
 8001500:	20000464 	.word	0x20000464
 8001504:	20000479 	.word	0x20000479
 8001508:	0800c158 	.word	0x0800c158
 800150c:	0800c164 	.word	0x0800c164
 8001510:	0800c16c 	.word	0x0800c16c
 8001514:	0800c174 	.word	0x0800c174
 8001518:	0800c17c 	.word	0x0800c17c
 800151c:	0800c184 	.word	0x0800c184

08001520 <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 8001524:	f000 f808 	bl	8001538 <LCD_BackgroundOn>
	ResetTIM(3);
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <LCD_WakeScreen+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000df8 	.word	0x20000df8

08001538 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001542:	4802      	ldr	r0, [pc, #8]	; (800154c <LCD_BackgroundOn+0x14>)
 8001544:	f004 ff62 	bl	800640c <HAL_GPIO_WritePin>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020800 	.word	0x40020800

08001550 <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155a:	4802      	ldr	r0, [pc, #8]	; (8001564 <LCD_BackgroundOff+0x14>)
 800155c:	f004 ff56 	bl	800640c <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020800 	.word	0x40020800

08001568 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 800156c:	2001      	movs	r0, #1
 800156e:	f7ff fecd 	bl	800130c <_LCD_SendCommand>
	LCD_ResetCursor();
 8001572:	f000 f802 	bl	800157a <LCD_ResetCursor>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
	LCD_SetCursor(0, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f000 f803 	bl	800158c <LCD_SetCursor>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d901      	bls.n	80015a6 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 80015a2:	2303      	movs	r3, #3
 80015a4:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b13      	cmp	r3, #19
 80015aa:	d901      	bls.n	80015b0 <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 80015ac:	2313      	movs	r3, #19
 80015ae:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LCD_SetCursor+0x54>)
 80015b4:	5cd2      	ldrb	r2, [r2, r3]
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4413      	add	r3, r2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fea0 	bl	800130c <_LCD_SendCommand>
	_currentRow = row;
 80015cc:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <LCD_SetCursor+0x58>)
 80015ce:	79bb      	ldrb	r3, [r7, #6]
 80015d0:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <LCD_SetCursor+0x5c>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	7013      	strb	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000474 	.word	0x20000474
 80015e4:	20000464 	.word	0x20000464
 80015e8:	20000479 	.word	0x20000479

080015ec <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LCD_DisplayOn+0x28>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <LCD_DisplayOn+0x28>)
 80015fc:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <LCD_DisplayOn+0x28>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fe7f 	bl	800130c <_LCD_SendCommand>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000478 	.word	0x20000478

08001618 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <LCD_DisableCursor+0x28>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f023 0302 	bic.w	r3, r3, #2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <LCD_DisableCursor+0x28>)
 8001628:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <LCD_DisableCursor+0x28>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fe69 	bl	800130c <_LCD_SendCommand>
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000478 	.word	0x20000478

08001644 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <LCD_EnableCursor+0x28>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <LCD_EnableCursor+0x28>)
 8001654:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <LCD_EnableCursor+0x28>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe53 	bl	800130c <_LCD_SendCommand>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000478 	.word	0x20000478

08001670 <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LCD_DisableBlink+0x28>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <LCD_DisableBlink+0x28>)
 8001680:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <LCD_DisableBlink+0x28>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe3d 	bl	800130c <_LCD_SendCommand>
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000478 	.word	0x20000478

0800169c <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <LCD_EnableBlink+0x28>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <LCD_EnableBlink+0x28>)
 80016ac:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LCD_EnableBlink+0x28>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fe27 	bl	800130c <_LCD_SendCommand>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000478 	.word	0x20000478

080016c8 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d018      	beq.n	8001708 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7fe fd82 	bl	80001e4 <strlen>
 80016e0:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e00a      	b.n	80016fe <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fe18 	bl	8001328 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	d8f0      	bhi.n	80016e8 <LCD_Print+0x20>
 8001706:	e000      	b.n	800170a <LCD_Print+0x42>
		return;
 8001708:	bf00      	nop
	}
}
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe fd63 	bl	80001e4 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b14      	cmp	r3, #20
 8001726:	dc14      	bgt.n	8001752 <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f1c3 0314 	rsb	r3, r3, #20
 800172e:	0fda      	lsrs	r2, r3, #31
 8001730:	4413      	add	r3, r2
 8001732:	105b      	asrs	r3, r3, #1
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <LCD_PrintCentered+0x4c>)
 8001738:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <LCD_PrintCentered+0x4c>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <LCD_PrintCentered+0x50>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f7ff ff21 	bl	800158c <LCD_SetCursor>
	LCD_Print(str);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffbc 	bl	80016c8 <LCD_Print>
 8001750:	e000      	b.n	8001754 <LCD_PrintCentered+0x44>
		return;
 8001752:	bf00      	nop
}
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000479 	.word	0x20000479
 8001760:	20000464 	.word	0x20000464

08001764 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8104 	beq.w	800197e <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d50e      	bpl.n	80017a8 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feea 	bl	8000568 <__aeabi_f2d>
 8001794:	4603      	mov	r3, r0
 8001796:	460c      	mov	r4, r1
 8001798:	f107 0014 	add.w	r0, r7, #20
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	4979      	ldr	r1, [pc, #484]	; (8001988 <LCD_PrintTempInfo+0x224>)
 80017a2:	f008 ff45 	bl	800a630 <siprintf>
 80017a6:	e00d      	b.n	80017c4 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fedb 	bl	8000568 <__aeabi_f2d>
 80017b2:	4603      	mov	r3, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	f107 0014 	add.w	r0, r7, #20
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	4973      	ldr	r1, [pc, #460]	; (800198c <LCD_PrintTempInfo+0x228>)
 80017c0:	f008 ff36 	bl	800a630 <siprintf>

	if (data1[1] < 10.f)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	d50f      	bpl.n	80017fa <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3304      	adds	r3, #4
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fec1 	bl	8000568 <__aeabi_f2d>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	f107 0008 	add.w	r0, r7, #8
 80017ee:	461a      	mov	r2, r3
 80017f0:	4623      	mov	r3, r4
 80017f2:	4967      	ldr	r1, [pc, #412]	; (8001990 <LCD_PrintTempInfo+0x22c>)
 80017f4:	f008 ff1c 	bl	800a630 <siprintf>
 80017f8:	e020      	b.n	800183c <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001994 <LCD_PrintTempInfo+0x230>
 8001806:	eef4 7a47 	vcmp.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d106      	bne.n	800181e <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4960      	ldr	r1, [pc, #384]	; (8001998 <LCD_PrintTempInfo+0x234>)
 8001816:	4618      	mov	r0, r3
 8001818:	f008 ff0a 	bl	800a630 <siprintf>
 800181c:	e00e      	b.n	800183c <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe9f 	bl	8000568 <__aeabi_f2d>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	f107 0008 	add.w	r0, r7, #8
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	4959      	ldr	r1, [pc, #356]	; (800199c <LCD_PrintTempInfo+0x238>)
 8001838:	f008 fefa 	bl	800a630 <siprintf>

	if (data2 != NULL) {
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8088 	beq.w	8001954 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001844:	2101      	movs	r1, #1
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff fea0 	bl	800158c <LCD_SetCursor>
		LCD_Print(temp);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff39 	bl	80016c8 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001856:	2102      	movs	r1, #2
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fe97 	bl	800158c <LCD_SetCursor>
		LCD_Print(rh);
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff30 	bl	80016c8 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d50e      	bpl.n	800189a <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe71 	bl	8000568 <__aeabi_f2d>
 8001886:	4603      	mov	r3, r0
 8001888:	460c      	mov	r4, r1
 800188a:	f107 0014 	add.w	r0, r7, #20
 800188e:	461a      	mov	r2, r3
 8001890:	4623      	mov	r3, r4
 8001892:	4943      	ldr	r1, [pc, #268]	; (80019a0 <LCD_PrintTempInfo+0x23c>)
 8001894:	f008 fecc 	bl	800a630 <siprintf>
 8001898:	e00d      	b.n	80018b6 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe62 	bl	8000568 <__aeabi_f2d>
 80018a4:	4603      	mov	r3, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	f107 0014 	add.w	r0, r7, #20
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	493c      	ldr	r1, [pc, #240]	; (80019a4 <LCD_PrintTempInfo+0x240>)
 80018b2:	f008 febd 	bl	800a630 <siprintf>

		if (data2[1] < 10.f)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3304      	adds	r3, #4
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d50f      	bpl.n	80018ec <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	3304      	adds	r3, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe48 	bl	8000568 <__aeabi_f2d>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	f107 0008 	add.w	r0, r7, #8
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	4930      	ldr	r1, [pc, #192]	; (80019a8 <LCD_PrintTempInfo+0x244>)
 80018e6:	f008 fea3 	bl	800a630 <siprintf>
 80018ea:	e020      	b.n	800192e <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3304      	adds	r3, #4
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001994 <LCD_PrintTempInfo+0x230>
 80018f8:	eef4 7a47 	vcmp.f32	s15, s14
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	d106      	bne.n	8001910 <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	4929      	ldr	r1, [pc, #164]	; (80019ac <LCD_PrintTempInfo+0x248>)
 8001908:	4618      	mov	r0, r3
 800190a:	f008 fe91 	bl	800a630 <siprintf>
 800190e:	e00e      	b.n	800192e <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3304      	adds	r3, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe26 	bl	8000568 <__aeabi_f2d>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	f107 0008 	add.w	r0, r7, #8
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	4921      	ldr	r1, [pc, #132]	; (80019b0 <LCD_PrintTempInfo+0x24c>)
 800192a:	f008 fe81 	bl	800a630 <siprintf>

		LCD_SetCursor(16, 1);
 800192e:	2101      	movs	r1, #1
 8001930:	2010      	movs	r0, #16
 8001932:	f7ff fe2b 	bl	800158c <LCD_SetCursor>
		LCD_Print(temp);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fec4 	bl	80016c8 <LCD_Print>
		LCD_SetCursor(16, 2);
 8001940:	2102      	movs	r1, #2
 8001942:	2010      	movs	r0, #16
 8001944:	f7ff fe22 	bl	800158c <LCD_SetCursor>
		LCD_Print(rh);
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff febb 	bl	80016c8 <LCD_Print>
 8001952:	e010      	b.n	8001976 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001954:	2101      	movs	r1, #1
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff fe18 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered(temp);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fed5 	bl	8001710 <LCD_PrintCentered>
		LCD_NextLine("");
 8001966:	4813      	ldr	r0, [pc, #76]	; (80019b4 <LCD_PrintTempInfo+0x250>)
 8001968:	f000 f826 	bl	80019b8 <LCD_NextLine>
		LCD_PrintCentered(rh);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fecd 	bl	8001710 <LCD_PrintCentered>
	}
	LCD_NextLine("");
 8001976:	480f      	ldr	r0, [pc, #60]	; (80019b4 <LCD_PrintTempInfo+0x250>)
 8001978:	f000 f81e 	bl	80019b8 <LCD_NextLine>
 800197c:	e000      	b.n	8001980 <LCD_PrintTempInfo+0x21c>
		return;
 800197e:	bf00      	nop
}
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
 8001986:	bf00      	nop
 8001988:	0800c18c 	.word	0x0800c18c
 800198c:	0800c194 	.word	0x0800c194
 8001990:	0800c19c 	.word	0x0800c19c
 8001994:	42c80000 	.word	0x42c80000
 8001998:	0800c1a8 	.word	0x0800c1a8
 800199c:	0800c1b0 	.word	0x0800c1b0
 80019a0:	0800c1b8 	.word	0x0800c1b8
 80019a4:	0800c1c0 	.word	0x0800c1c0
 80019a8:	0800c1c8 	.word	0x0800c1c8
 80019ac:	0800c1d4 	.word	0x0800c1d4
 80019b0:	0800c1dc 	.word	0x0800c1dc
 80019b4:	0800c1e4 	.word	0x0800c1e4

080019b8 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fe81 	bl	80016c8 <LCD_Print>

	_currentCol = 0;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <LCD_NextLine+0x48>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <LCD_NextLine+0x4c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <LCD_NextLine+0x4c>)
 80019d6:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <LCD_NextLine+0x4c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d902      	bls.n	80019e6 <LCD_NextLine+0x2e>
		_currentRow = 0;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LCD_NextLine+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <LCD_NextLine+0x48>)
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <LCD_NextLine+0x4c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff fdcb 	bl	800158c <LCD_SetCursor>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000479 	.word	0x20000479
 8001a04:	20000464 	.word	0x20000464

08001a08 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <LCD_CursorUp+0x30>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <LCD_CursorUp+0x18>
		--_currentRow;
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <LCD_CursorUp+0x30>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <LCD_CursorUp+0x30>)
 8001a1e:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <LCD_CursorUp+0x34>)
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <LCD_CursorUp+0x30>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff fdae 	bl	800158c <LCD_SetCursor>
	return _currentRow;
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <LCD_CursorUp+0x30>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000464 	.word	0x20000464
 8001a3c:	20000479 	.word	0x20000479

08001a40 <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <LCD_CursorDown+0x30>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d805      	bhi.n	8001a58 <LCD_CursorDown+0x18>
		++_currentRow;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <LCD_CursorDown+0x30>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <LCD_CursorDown+0x30>)
 8001a56:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <LCD_CursorDown+0x34>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <LCD_CursorDown+0x30>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7ff fd92 	bl	800158c <LCD_SetCursor>
	return _currentRow;
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <LCD_CursorDown+0x30>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000464 	.word	0x20000464
 8001a74:	20000479 	.word	0x20000479

08001a78 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <LCD_CursorLeft+0x54>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <LCD_CursorLeft+0x1a>
		--_currentCol;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <LCD_CursorLeft+0x54>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <LCD_CursorLeft+0x54>)
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e010      	b.n	8001ab4 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <LCD_CursorLeft+0x54>)
 8001a94:	2213      	movs	r2, #19
 8001a96:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <LCD_CursorLeft+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <LCD_CursorLeft+0x58>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e005      	b.n	8001ab4 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <LCD_CursorLeft+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <LCD_CursorLeft+0x58>)
 8001ab2:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <LCD_CursorLeft+0x54>)
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <LCD_CursorLeft+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff fd64 	bl	800158c <LCD_SetCursor>
	return _currentCol;
 8001ac4:	4b01      	ldr	r3, [pc, #4]	; (8001acc <LCD_CursorLeft+0x54>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000479 	.word	0x20000479
 8001ad0:	20000464 	.word	0x20000464

08001ad4 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <LCD_CursorRight+0x54>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b12      	cmp	r3, #18
 8001ade:	d806      	bhi.n	8001aee <LCD_CursorRight+0x1a>
		++_currentCol;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <LCD_CursorRight+0x54>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <LCD_CursorRight+0x54>)
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e010      	b.n	8001b10 <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <LCD_CursorRight+0x54>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <LCD_CursorRight+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d103      	bne.n	8001b04 <LCD_CursorRight+0x30>
			_currentRow = 0;
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <LCD_CursorRight+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e005      	b.n	8001b10 <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <LCD_CursorRight+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <LCD_CursorRight+0x58>)
 8001b0e:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <LCD_CursorRight+0x54>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LCD_CursorRight+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f7ff fd36 	bl	800158c <LCD_SetCursor>
	return _currentCol;
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <LCD_CursorRight+0x54>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000479 	.word	0x20000479
 8001b2c:	20000464 	.word	0x20000464

08001b30 <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fbda 	bl	800130c <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e00a      	b.n	8001b74 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fbdd 	bl	8001328 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	ddf1      	ble.n	8001b5e <LCD_DefineCustomChar+0x2e>
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fcfb 	bl	800158c <LCD_SetCursor>
	LCD_Print(date);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fd96 	bl	80016c8 <LCD_Print>
	LCD_SetCursor(12, 0);
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	200c      	movs	r0, #12
 8001ba0:	f7ff fcf4 	bl	800158c <LCD_SetCursor>
	LCD_Print(time);
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	f7ff fd8f 	bl	80016c8 <LCD_Print>
	LCD_NextLine("");
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <LCD_PrintDateTime+0x34>)
 8001bac:	f7ff ff04 	bl	80019b8 <LCD_NextLine>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	0800c1e4 	.word	0x0800c1e4

08001bbc <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fbac 	bl	8001328 <_LCD_SendData>
	LCD_CursorLeft();
 8001bd0:	f7ff ff52 	bl	8001a78 <LCD_CursorLeft>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
	int column = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3330      	adds	r3, #48	; 0x30
 8001bf4:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e00c      	b.n	8001c16 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 8001bfc:	bf00      	nop
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	61fa      	str	r2, [r7, #28]
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b3b      	cmp	r3, #59	; 0x3b
 8001c0e:	d1f6      	bne.n	8001bfe <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3301      	adds	r3, #1
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbed      	blt.n	8001bfc <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 8001c20:	f7ff fca2 	bl	8001568 <LCD_ClearScreen>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 8001c24:	2301      	movs	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e037      	b.n	8001c9a <LCD_PrintNetworks+0xbe>
		LCD_WriteChar(number++);
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	75fa      	strb	r2, [r7, #23]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ffc3 	bl	8001bbc <LCD_WriteChar>
		column = LCD_CursorRight();
 8001c36:	f7ff ff4d 	bl	8001ad4 <LCD_CursorRight>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 8001c3e:	481b      	ldr	r0, [pc, #108]	; (8001cac <LCD_PrintNetworks+0xd0>)
 8001c40:	f7ff fd42 	bl	80016c8 <LCD_Print>

		while (data[index] != ';') {
 8001c44:	e010      	b.n	8001c68 <LCD_PrintNetworks+0x8c>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	dd0a      	ble.n	8001c62 <LCD_PrintNetworks+0x86>
				LCD_WriteChar(data[index]);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffb1 	bl	8001bbc <LCD_WriteChar>
				column = LCD_CursorRight();
 8001c5a:	f7ff ff3b 	bl	8001ad4 <LCD_CursorRight>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	61bb      	str	r3, [r7, #24]
			}
			index++;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b3b      	cmp	r3, #59	; 0x3b
 8001c72:	d1e8      	bne.n	8001c46 <LCD_PrintNetworks+0x6a>
		}

		if (data[index + 1] == 0) {
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00f      	beq.n	8001ca2 <LCD_PrintNetworks+0xc6>
			break;
		} else {
			if (column != 0)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <LCD_PrintNetworks+0xb2>
				LCD_NextLine("");
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <LCD_PrintNetworks+0xd4>)
 8001c8a:	f7ff fe95 	bl	80019b8 <LCD_NextLine>
			index++;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3301      	adds	r3, #1
 8001c92:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	ddc4      	ble.n	8001c2a <LCD_PrintNetworks+0x4e>
		}
	}
}
 8001ca0:	e000      	b.n	8001ca4 <LCD_PrintNetworks+0xc8>
			break;
 8001ca2:	bf00      	nop
}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0800c1e8 	.word	0x0800c1e8
 8001cb0:	0800c1e4 	.word	0x0800c1e4

08001cb4 <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e00c      	b.n	8001ce2 <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 8001cc8:	bf00      	nop
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	617a      	str	r2, [r7, #20]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b3b      	cmp	r3, #59	; 0x3b
 8001cda:	d1f6      	bne.n	8001cca <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbed      	blt.n	8001cc8 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 8001cec:	f7ff fc3c 	bl	8001568 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 8001cf0:	4815      	ldr	r0, [pc, #84]	; (8001d48 <LCD_PrintOptionsScreen+0x94>)
 8001cf2:	f7ff fd0d 	bl	8001710 <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e01e      	b.n	8001d3a <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fc42 	bl	800158c <LCD_SetCursor>

		while (string[index] != ';') {
 8001d08:	e00b      	b.n	8001d22 <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	617a      	str	r2, [r7, #20]
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff4f 	bl	8001bbc <LCD_WriteChar>
			LCD_CursorRight();
 8001d1e:	f7ff fed9 	bl	8001ad4 <LCD_CursorRight>
		while (string[index] != ';') {
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001d2c:	d1ed      	bne.n	8001d0a <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	dddd      	ble.n	8001cfc <LCD_PrintOptionsScreen+0x48>
	}
}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	0800c1ec 	.word	0x0800c1ec

08001d4c <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 8001d58:	2103      	movs	r1, #3
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fc16 	bl	800158c <LCD_SetCursor>
	LCD_Print("                    ");
 8001d60:	4825      	ldr	r0, [pc, #148]	; (8001df8 <LCD_PrintNetworkStatus+0xac>)
 8001d62:	f7ff fcb1 	bl	80016c8 <LCD_Print>
	LCD_SetCursor(0, 3);
 8001d66:	2103      	movs	r1, #3
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff fc0f 	bl	800158c <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d103      	bne.n	8001d7c <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <LCD_PrintNetworkStatus+0xb0>)
 8001d76:	f7ff fccb 	bl	8001710 <LCD_PrintCentered>
 8001d7a:	e03a      	b.n	8001df2 <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d12c      	bne.n	8001ddc <LCD_PrintNetworkStatus+0x90>
		if (data == NULL) return;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d033      	beq.n	8001df0 <LCD_PrintNetworkStatus+0xa4>

		int size = strlen(data);
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7fe fa2b 	bl	80001e4 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f1c3 0314 	rsb	r3, r3, #20
 8001d98:	0fda      	lsrs	r2, r3, #31
 8001d9a:	4413      	add	r3, r2
 8001d9c:	105b      	asrs	r3, r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <LCD_PrintNetworkStatus+0xb4>)
 8001da2:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <LCD_PrintNetworkStatus+0xb4>)
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <LCD_PrintNetworkStatus+0xb8>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7ff fbec 	bl	800158c <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e00b      	b.n	8001dd2 <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fefa 	bl	8001bbc <LCD_WriteChar>
			LCD_CursorRight();
 8001dc8:	f7ff fe84 	bl	8001ad4 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbef      	blt.n	8001dba <LCD_PrintNetworkStatus+0x6e>
 8001dda:	e00a      	b.n	8001df2 <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d007      	beq.n	8001df2 <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d104      	bne.n	8001df2 <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <LCD_PrintNetworkStatus+0xbc>)
 8001dea:	f7ff fc91 	bl	8001710 <LCD_PrintCentered>
 8001dee:	e000      	b.n	8001df2 <LCD_PrintNetworkStatus+0xa6>
		if (data == NULL) return;
 8001df0:	bf00      	nop
	}
}
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800c1f8 	.word	0x0800c1f8
 8001dfc:	0800c210 	.word	0x0800c210
 8001e00:	20000479 	.word	0x20000479
 8001e04:	20000464 	.word	0x20000464
 8001e08:	0800c224 	.word	0x0800c224

08001e0c <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	State = ST_Clock;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <MENU_Init+0x14>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000e39 	.word	0x20000e39

08001e24 <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	e007      	b.n	8001e40 <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <_PWD_ResetPasswd+0x3c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b27      	cmp	r3, #39	; 0x27
 8001e44:	ddf4      	ble.n	8001e30 <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_PWD_ResetPasswd+0x40>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <_PWD_ResetPasswd+0x44>)
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	701a      	strb	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000484 	.word	0x20000484
 8001e64:	200004c3 	.word	0x200004c3
 8001e68:	2000047f 	.word	0x2000047f

08001e6c <_PWD_NextChar>:

char _PWD_NextChar(void) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <_PWD_NextChar+0x2c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <_PWD_NextChar+0x2c>)
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <_PWD_NextChar+0x2c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b7e      	cmp	r3, #126	; 0x7e
 8001e82:	d902      	bls.n	8001e8a <_PWD_NextChar+0x1e>
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <_PWD_NextChar+0x2c>)
 8001e86:	2220      	movs	r2, #32
 8001e88:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <_PWD_NextChar+0x2c>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	2000047f 	.word	0x2000047f

08001e9c <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d001      	beq.n	8001eb0 <_PWD_SaveAndWrite+0x14>
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	e000      	b.n	8001eb2 <_PWD_SaveAndWrite+0x16>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <_PWD_SaveAndWrite+0x30>)
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_PWD_SaveAndWrite+0x34>)
 8001eba:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe7c 	bl	8001bbc <LCD_WriteChar>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200004c3 	.word	0x200004c3
 8001ed0:	20000484 	.word	0x20000484

08001ed4 <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001ed8:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <_CLK_HandleDateTimeInput+0x27c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2b11      	cmp	r3, #17
 8001ee0:	f200 8141 	bhi.w	8002166 <_CLK_HandleDateTimeInput+0x292>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <_CLK_HandleDateTimeInput+0x18>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001f35 	.word	0x08001f35
 8001ef0:	08001f63 	.word	0x08001f63
 8001ef4:	08002167 	.word	0x08002167
 8001ef8:	08001f91 	.word	0x08001f91
 8001efc:	08001fbf 	.word	0x08001fbf
 8001f00:	08002167 	.word	0x08002167
 8001f04:	08001fed 	.word	0x08001fed
 8001f08:	0800201b 	.word	0x0800201b
 8001f0c:	08002167 	.word	0x08002167
 8001f10:	08002167 	.word	0x08002167
 8001f14:	08002049 	.word	0x08002049
 8001f18:	08002077 	.word	0x08002077
 8001f1c:	08002167 	.word	0x08002167
 8001f20:	080020a5 	.word	0x080020a5
 8001f24:	080020d3 	.word	0x080020d3
 8001f28:	08002167 	.word	0x08002167
 8001f2c:	08002101 	.word	0x08002101
 8001f30:	0800212f 	.word	0x0800212f
		ColIs(1)
			SetBetween('0', '3');
 8001f34:	4b87      	ldr	r3, [pc, #540]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b32      	cmp	r3, #50	; 0x32
 8001f3a:	d903      	bls.n	8001f44 <_CLK_HandleDateTimeInput+0x70>
 8001f3c:	4b85      	ldr	r3, [pc, #532]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f3e:	2230      	movs	r2, #48	; 0x30
 8001f40:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f42:	e110      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001f44:	4b83      	ldr	r3, [pc, #524]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b2f      	cmp	r3, #47	; 0x2f
 8001f4a:	d803      	bhi.n	8001f54 <_CLK_HandleDateTimeInput+0x80>
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f4e:	2230      	movs	r2, #48	; 0x30
 8001f50:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f52:	e108      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b7d      	ldr	r3, [pc, #500]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f5e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f60:	e101      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b38      	cmp	r3, #56	; 0x38
 8001f68:	d903      	bls.n	8001f72 <_CLK_HandleDateTimeInput+0x9e>
 8001f6a:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f6c:	2230      	movs	r2, #48	; 0x30
 8001f6e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f70:	e0f9      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f72:	4b78      	ldr	r3, [pc, #480]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b2f      	cmp	r3, #47	; 0x2f
 8001f78:	d803      	bhi.n	8001f82 <_CLK_HandleDateTimeInput+0xae>
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f7c:	2230      	movs	r2, #48	; 0x30
 8001f7e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f80:	e0f1      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f82:	4b74      	ldr	r3, [pc, #464]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b72      	ldr	r3, [pc, #456]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f8c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f8e:	e0ea      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b30      	cmp	r3, #48	; 0x30
 8001f96:	d903      	bls.n	8001fa0 <_CLK_HandleDateTimeInput+0xcc>
 8001f98:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001f9a:	2230      	movs	r2, #48	; 0x30
 8001f9c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f9e:	e0e2      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001fa0:	4b6c      	ldr	r3, [pc, #432]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b2f      	cmp	r3, #47	; 0x2f
 8001fa6:	d803      	bhi.n	8001fb0 <_CLK_HandleDateTimeInput+0xdc>
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001faa:	2230      	movs	r2, #48	; 0x30
 8001fac:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fae:	e0da      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fba:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fbc:	e0d3      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b38      	cmp	r3, #56	; 0x38
 8001fc4:	d903      	bls.n	8001fce <_CLK_HandleDateTimeInput+0xfa>
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fc8:	2230      	movs	r2, #48	; 0x30
 8001fca:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fcc:	e0cb      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fd4:	d803      	bhi.n	8001fde <_CLK_HandleDateTimeInput+0x10a>
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fd8:	2230      	movs	r2, #48	; 0x30
 8001fda:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fdc:	e0c3      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fe8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fea:	e0bc      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b38      	cmp	r3, #56	; 0x38
 8001ff2:	d903      	bls.n	8001ffc <_CLK_HandleDateTimeInput+0x128>
 8001ff4:	4b57      	ldr	r3, [pc, #348]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001ff6:	2232      	movs	r2, #50	; 0x32
 8001ff8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ffa:	e0b4      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b31      	cmp	r3, #49	; 0x31
 8002002:	d803      	bhi.n	800200c <_CLK_HandleDateTimeInput+0x138>
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	701a      	strb	r2, [r3, #0]
		ColEnd
 800200a:	e0ac      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002016:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002018:	e0a5      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b38      	cmp	r3, #56	; 0x38
 8002020:	d903      	bls.n	800202a <_CLK_HandleDateTimeInput+0x156>
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002024:	2230      	movs	r2, #48	; 0x30
 8002026:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002028:	e09d      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b2f      	cmp	r3, #47	; 0x2f
 8002030:	d803      	bhi.n	800203a <_CLK_HandleDateTimeInput+0x166>
 8002032:	4b48      	ldr	r3, [pc, #288]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002034:	2230      	movs	r2, #48	; 0x30
 8002036:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002038:	e095      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800203a:	4b46      	ldr	r3, [pc, #280]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b44      	ldr	r3, [pc, #272]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002044:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002046:	e08e      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 8002048:	4b42      	ldr	r3, [pc, #264]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b31      	cmp	r3, #49	; 0x31
 800204e:	d903      	bls.n	8002058 <_CLK_HandleDateTimeInput+0x184>
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002052:	2230      	movs	r2, #48	; 0x30
 8002054:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002056:	e086      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8002058:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	; 0x2f
 800205e:	d803      	bhi.n	8002068 <_CLK_HandleDateTimeInput+0x194>
 8002060:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002062:	2230      	movs	r2, #48	; 0x30
 8002064:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002066:	e07e      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002072:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002074:	e077      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b38      	cmp	r3, #56	; 0x38
 800207c:	d903      	bls.n	8002086 <_CLK_HandleDateTimeInput+0x1b2>
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002080:	2230      	movs	r2, #48	; 0x30
 8002082:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002084:	e06f      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b2f      	cmp	r3, #47	; 0x2f
 800208c:	d803      	bhi.n	8002096 <_CLK_HandleDateTimeInput+0x1c2>
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002090:	2230      	movs	r2, #48	; 0x30
 8002092:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002094:	e067      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020a0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020a2:	e060      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 80020a4:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b34      	cmp	r3, #52	; 0x34
 80020aa:	d903      	bls.n	80020b4 <_CLK_HandleDateTimeInput+0x1e0>
 80020ac:	4b29      	ldr	r3, [pc, #164]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020ae:	2230      	movs	r2, #48	; 0x30
 80020b0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020b2:	e058      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b2f      	cmp	r3, #47	; 0x2f
 80020ba:	d803      	bhi.n	80020c4 <_CLK_HandleDateTimeInput+0x1f0>
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020be:	2230      	movs	r2, #48	; 0x30
 80020c0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020c2:	e050      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b21      	ldr	r3, [pc, #132]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020ce:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020d0:	e049      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b38      	cmp	r3, #56	; 0x38
 80020d8:	d903      	bls.n	80020e2 <_CLK_HandleDateTimeInput+0x20e>
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020dc:	2230      	movs	r2, #48	; 0x30
 80020de:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020e0:	e041      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b2f      	cmp	r3, #47	; 0x2f
 80020e8:	d803      	bhi.n	80020f2 <_CLK_HandleDateTimeInput+0x21e>
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020ec:	2230      	movs	r2, #48	; 0x30
 80020ee:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020f0:	e039      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 80020fc:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020fe:	e032      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b34      	cmp	r3, #52	; 0x34
 8002106:	d903      	bls.n	8002110 <_CLK_HandleDateTimeInput+0x23c>
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800210a:	2230      	movs	r2, #48	; 0x30
 800210c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800210e:	e02a      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b2f      	cmp	r3, #47	; 0x2f
 8002116:	d803      	bhi.n	8002120 <_CLK_HandleDateTimeInput+0x24c>
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800211a:	2230      	movs	r2, #48	; 0x30
 800211c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800211e:	e022      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 800212a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800212c:	e01b      	b.n	8002166 <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b38      	cmp	r3, #56	; 0x38
 8002134:	d903      	bls.n	800213e <_CLK_HandleDateTimeInput+0x26a>
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002138:	2230      	movs	r2, #48	; 0x30
 800213a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800213c:	e012      	b.n	8002164 <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b2f      	cmp	r3, #47	; 0x2f
 8002144:	d808      	bhi.n	8002158 <_CLK_HandleDateTimeInput+0x284>
 8002146:	4b03      	ldr	r3, [pc, #12]	; (8002154 <_CLK_HandleDateTimeInput+0x280>)
 8002148:	2230      	movs	r2, #48	; 0x30
 800214a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800214c:	e00a      	b.n	8002164 <_CLK_HandleDateTimeInput+0x290>
 800214e:	bf00      	nop
 8002150:	2000047e 	.word	0x2000047e
 8002154:	2000047f 	.word	0x2000047f
			SetBetween('0', '9');
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <_CLK_HandleDateTimeInput+0x2b0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_CLK_HandleDateTimeInput+0x2b0>)
 8002162:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002164:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_CLK_HandleDateTimeInput+0x2b0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fd26 	bl	8001bbc <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <_CLK_HandleDateTimeInput+0x2b4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <_CLK_HandleDateTimeInput+0x2b0>)
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <_CLK_HandleDateTimeInput+0x2b8>)
 800217c:	5499      	strb	r1, [r3, r2]
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000047f 	.word	0x2000047f
 8002188:	2000047e 	.word	0x2000047e
 800218c:	200004b0 	.word	0x200004b0

08002190 <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	3b02      	subs	r3, #2
 800219a:	2b10      	cmp	r3, #16
 800219c:	d84c      	bhi.n	8002238 <_CLK_MoveInputRight+0xa8>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <_CLK_MoveInputRight+0x14>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	08002229 	.word	0x08002229
 80021a8:	08002239 	.word	0x08002239
 80021ac:	08002239 	.word	0x08002239
 80021b0:	08002219 	.word	0x08002219
 80021b4:	08002239 	.word	0x08002239
 80021b8:	08002239 	.word	0x08002239
 80021bc:	08002209 	.word	0x08002209
 80021c0:	08002239 	.word	0x08002239
 80021c4:	08002239 	.word	0x08002239
 80021c8:	08002239 	.word	0x08002239
 80021cc:	080021f9 	.word	0x080021f9
 80021d0:	08002239 	.word	0x08002239
 80021d4:	08002239 	.word	0x08002239
 80021d8:	080021e9 	.word	0x080021e9
 80021dc:	08002239 	.word	0x08002239
 80021e0:	08002239 	.word	0x08002239
 80021e4:	08002247 	.word	0x08002247
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 80021e8:	2101      	movs	r1, #1
 80021ea:	2011      	movs	r0, #17
 80021ec:	f7ff f9ce 	bl	800158c <LCD_SetCursor>
			_optionsCol = 17;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <_CLK_MoveInputRight+0xbc>)
 80021f2:	2211      	movs	r2, #17
 80021f4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021f6:	e027      	b.n	8002248 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 80021f8:	2101      	movs	r1, #1
 80021fa:	200e      	movs	r0, #14
 80021fc:	f7ff f9c6 	bl	800158c <LCD_SetCursor>
			_optionsCol = 14;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002202:	220e      	movs	r2, #14
 8002204:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002206:	e01f      	b.n	8002248 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 8002208:	2101      	movs	r1, #1
 800220a:	200b      	movs	r0, #11
 800220c:	f7ff f9be 	bl	800158c <LCD_SetCursor>
			_optionsCol = 11;
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002212:	220b      	movs	r2, #11
 8002214:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002216:	e017      	b.n	8002248 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 8002218:	2101      	movs	r1, #1
 800221a:	2007      	movs	r0, #7
 800221c:	f7ff f9b6 	bl	800158c <LCD_SetCursor>
			_optionsCol = 7;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002222:	2207      	movs	r2, #7
 8002224:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002226:	e00f      	b.n	8002248 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 8002228:	2101      	movs	r1, #1
 800222a:	2004      	movs	r0, #4
 800222c:	f7ff f9ae 	bl	800158c <LCD_SetCursor>
			_optionsCol = 4;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002232:	2204      	movs	r2, #4
 8002234:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002236:	e007      	b.n	8002248 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 8002238:	f7ff fc4c 	bl	8001ad4 <LCD_CursorRight>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <_CLK_MoveInputRight+0xbc>)
 8002242:	701a      	strb	r2, [r3, #0]
	}
}
 8002244:	e000      	b.n	8002248 <_CLK_MoveInputRight+0xb8>
		ColEnd
 8002246:	bf00      	nop
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000047e 	.word	0x2000047e

08002250 <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	2b10      	cmp	r3, #16
 800225c:	d84c      	bhi.n	80022f8 <_CLK_MoveInputLeft+0xa8>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <_CLK_MoveInputLeft+0x14>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002307 	.word	0x08002307
 8002268:	080022f9 	.word	0x080022f9
 800226c:	080022f9 	.word	0x080022f9
 8002270:	080022a9 	.word	0x080022a9
 8002274:	080022f9 	.word	0x080022f9
 8002278:	080022f9 	.word	0x080022f9
 800227c:	080022b9 	.word	0x080022b9
 8002280:	080022f9 	.word	0x080022f9
 8002284:	080022f9 	.word	0x080022f9
 8002288:	080022f9 	.word	0x080022f9
 800228c:	080022c9 	.word	0x080022c9
 8002290:	080022f9 	.word	0x080022f9
 8002294:	080022f9 	.word	0x080022f9
 8002298:	080022d9 	.word	0x080022d9
 800229c:	080022f9 	.word	0x080022f9
 80022a0:	080022f9 	.word	0x080022f9
 80022a4:	080022e9 	.word	0x080022e9
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 80022a8:	2101      	movs	r1, #1
 80022aa:	2002      	movs	r0, #2
 80022ac:	f7ff f96e 	bl	800158c <LCD_SetCursor>
			_optionsCol = 2;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80022b6:	e027      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 80022b8:	2101      	movs	r1, #1
 80022ba:	2005      	movs	r0, #5
 80022bc:	f7ff f966 	bl	800158c <LCD_SetCursor>
			_optionsCol = 5;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 80022c2:	2205      	movs	r2, #5
 80022c4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80022c6:	e01f      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 80022c8:	2101      	movs	r1, #1
 80022ca:	2008      	movs	r0, #8
 80022cc:	f7ff f95e 	bl	800158c <LCD_SetCursor>
			_optionsCol = 8;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 80022d2:	2208      	movs	r2, #8
 80022d4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80022d6:	e017      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 80022d8:	2101      	movs	r1, #1
 80022da:	200c      	movs	r0, #12
 80022dc:	f7ff f956 	bl	800158c <LCD_SetCursor>
			_optionsCol = 12;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 80022e2:	220c      	movs	r2, #12
 80022e4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80022e6:	e00f      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 80022e8:	2101      	movs	r1, #1
 80022ea:	200f      	movs	r0, #15
 80022ec:	f7ff f94e 	bl	800158c <LCD_SetCursor>
			_optionsCol = 15;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 80022f2:	220f      	movs	r2, #15
 80022f4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80022f6:	e007      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 80022f8:	f7ff fbbe 	bl	8001a78 <LCD_CursorLeft>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <_CLK_MoveInputLeft+0xbc>)
 8002302:	701a      	strb	r2, [r3, #0]
	}
}
 8002304:	e000      	b.n	8002308 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 8002306:	bf00      	nop
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000047e 	.word	0x2000047e

08002310 <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	3b30      	subs	r3, #48	; 0x30
 8002320:	b2db      	uxtb	r3, r3
 8002322:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002326:	789b      	ldrb	r3, [r3, #2]
 8002328:	3b30      	subs	r3, #48	; 0x30
 800232a:	b2db      	uxtb	r3, r3
 800232c:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002330:	791b      	ldrb	r3, [r3, #4]
 8002332:	3b30      	subs	r3, #48	; 0x30
 8002334:	b2db      	uxtb	r3, r3
 8002336:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 800233a:	795b      	ldrb	r3, [r3, #5]
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	b2db      	uxtb	r3, r3
 8002340:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 8002342:	4b68      	ldr	r3, [pc, #416]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002344:	79db      	ldrb	r3, [r3, #7]
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	b2db      	uxtb	r3, r3
 800234a:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 800234c:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 800234e:	7a1b      	ldrb	r3, [r3, #8]
 8002350:	3b30      	subs	r3, #48	; 0x30
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002358:	7adb      	ldrb	r3, [r3, #11]
 800235a:	3b30      	subs	r3, #48	; 0x30
 800235c:	b2db      	uxtb	r3, r3
 800235e:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 8002360:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002362:	7b1b      	ldrb	r3, [r3, #12]
 8002364:	3b30      	subs	r3, #48	; 0x30
 8002366:	b2db      	uxtb	r3, r3
 8002368:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 800236a:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 800236c:	7b9b      	ldrb	r3, [r3, #14]
 800236e:	3b30      	subs	r3, #48	; 0x30
 8002370:	b2db      	uxtb	r3, r3
 8002372:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 8002374:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002376:	7bdb      	ldrb	r3, [r3, #15]
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	b2db      	uxtb	r3, r3
 800237c:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 800237e:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002380:	7c5b      	ldrb	r3, [r3, #17]
 8002382:	3b30      	subs	r3, #48	; 0x30
 8002384:	b2db      	uxtb	r3, r3
 8002386:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 8002388:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <_CLK_ParseAndSetDateTime+0x1d4>)
 800238a:	7c9b      	ldrb	r3, [r3, #18]
 800238c:	3b30      	subs	r3, #48	; 0x30
 800238e:	b2db      	uxtb	r3, r3
 8002390:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 8002392:	7abb      	ldrb	r3, [r7, #10]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d104      	bne.n	80023a2 <_CLK_ParseAndSetDateTime+0x92>
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 80023a2:	7abb      	ldrb	r3, [r7, #10]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d104      	bne.n	80023b2 <_CLK_ParseAndSetDateTime+0xa2>
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 80023b2:	783b      	ldrb	r3, [r7, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d104      	bne.n	80023c2 <_CLK_ParseAndSetDateTime+0xb2>
 80023b8:	787b      	ldrb	r3, [r7, #1]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d901      	bls.n	80023c2 <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80023c2:	7abb      	ldrb	r3, [r7, #10]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_CLK_ParseAndSetDateTime+0xbe>
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d023      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
 80023ce:	7abb      	ldrb	r3, [r7, #10]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_CLK_ParseAndSetDateTime+0xca>
 80023d4:	7afb      	ldrb	r3, [r7, #11]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d01d      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
 80023da:	7abb      	ldrb	r3, [r7, #10]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_CLK_ParseAndSetDateTime+0xd6>
 80023e0:	7afb      	ldrb	r3, [r7, #11]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d017      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80023e6:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	2b07      	cmp	r3, #7
 80023f0:	d011      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
 80023f2:	7abb      	ldrb	r3, [r7, #10]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_CLK_ParseAndSetDateTime+0xee>
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d00b      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
 80023fe:	7abb      	ldrb	r3, [r7, #10]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <_CLK_ParseAndSetDateTime+0xfa>
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 800240a:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 800240c:	2b01      	cmp	r3, #1
 800240e:	d10a      	bne.n	8002426 <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 8002416:	7a3b      	ldrb	r3, [r7, #8]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d104      	bne.n	8002426 <_CLK_ParseAndSetDateTime+0x116>
 800241c:	7a7b      	ldrb	r3, [r7, #9]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d901      	bls.n	8002426 <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002426:	7abb      	ldrb	r3, [r7, #10]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <_CLK_ParseAndSetDateTime+0x122>
 800242c:	7afb      	ldrb	r3, [r7, #11]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d011      	beq.n	8002456 <_CLK_ParseAndSetDateTime+0x146>
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_CLK_ParseAndSetDateTime+0x12e>
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00b      	beq.n	8002456 <_CLK_ParseAndSetDateTime+0x146>
 800243e:	7abb      	ldrb	r3, [r7, #10]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_CLK_ParseAndSetDateTime+0x13a>
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d005      	beq.n	8002456 <_CLK_ParseAndSetDateTime+0x146>
		Month(0,4)) {
 800244a:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <_CLK_ParseAndSetDateTime+0x156>
		Month(0,4)) {
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d107      	bne.n	8002466 <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 8002456:	7a3b      	ldrb	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d104      	bne.n	8002466 <_CLK_ParseAndSetDateTime+0x156>
 800245c:	7a7b      	ldrb	r3, [r7, #9]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 8002466:	7abb      	ldrb	r3, [r7, #10]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d115      	bne.n	8002498 <_CLK_ParseAndSetDateTime+0x188>
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d112      	bne.n	8002498 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 800247c:	7b7b      	ldrb	r3, [r7, #13]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 8002488:	7a3b      	ldrb	r3, [r7, #8]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d104      	bne.n	8002498 <_CLK_ParseAndSetDateTime+0x188>
 800248e:	7a7b      	ldrb	r3, [r7, #9]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d101      	bne.n	8002498 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 8002498:	f7ff f8be 	bl	8001618 <LCD_DisableCursor>

	if (error) {
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d014      	beq.n	80024cc <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 80024a2:	f7ff f861 	bl	8001568 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 80024a6:	2101      	movs	r1, #1
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff f86f 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 80024ae:	480e      	ldr	r0, [pc, #56]	; (80024e8 <_CLK_ParseAndSetDateTime+0x1d8>)
 80024b0:	f7ff f92e 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 80024b4:	2102      	movs	r1, #2
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7ff f868 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <_CLK_ParseAndSetDateTime+0x1dc>)
 80024be:	f7ff f927 	bl	8001710 <LCD_PrintCentered>

		HAL_Delay(1000);
 80024c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c6:	f003 fc99 	bl	8005dfc <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 80024ca:	e006      	b.n	80024da <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 80024cc:	463a      	mov	r2, r7
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f001 fbcb 	bl	8003c70 <SD_SetDateTime>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200004b0 	.word	0x200004b0
 80024e8:	0800c23c 	.word	0x0800c23c
 80024ec:	0800c24c 	.word	0x0800c24c

080024f0 <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MENU_PasswdInput+0x44>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d018      	beq.n	800252e <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <MENU_PasswdInput+0x44>)
 80024fe:	2203      	movs	r2, #3
 8002500:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002502:	f7ff f831 	bl	8001568 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 8002506:	480c      	ldr	r0, [pc, #48]	; (8002538 <MENU_PasswdInput+0x48>)
 8002508:	f7ff f902 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 800250c:	2103      	movs	r1, #3
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff f83c 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 8002514:	4809      	ldr	r0, [pc, #36]	; (800253c <MENU_PasswdInput+0x4c>)
 8002516:	f7ff f8fb 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 800251a:	2101      	movs	r1, #1
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff f835 	bl	800158c <LCD_SetCursor>

		_PWD_ResetPasswd();
 8002522:	f7ff fc7f 	bl	8001e24 <_PWD_ResetPasswd>

		LCD_DisableBlink();
 8002526:	f7ff f8a3 	bl	8001670 <LCD_DisableBlink>
		LCD_EnableCursor();
 800252a:	f7ff f88b 	bl	8001644 <LCD_EnableCursor>
	}
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000e39 	.word	0x20000e39
 8002538:	0800c260 	.word	0x0800c260
 800253c:	0800c278 	.word	0x0800c278

08002540 <MENU_Options>:

void MENU_Options(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MENU_Options+0x40>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d016      	beq.n	800257a <MENU_Options+0x3a>
		State = ST_Options;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MENU_Options+0x40>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002552:	f7ff f809 	bl	8001568 <LCD_ClearScreen>

		_currentOption = 1;
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MENU_Options+0x44>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <MENU_Options+0x44>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	4809      	ldr	r0, [pc, #36]	; (8002588 <MENU_Options+0x48>)
 8002564:	f7ff fba6 	bl	8001cb4 <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 8002568:	2101      	movs	r1, #1
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff f80e 	bl	800158c <LCD_SetCursor>
		_optionsRow = 1;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <MENU_Options+0x4c>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 8002576:	f7ff f891 	bl	800169c <LCD_EnableBlink>
	}
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000e39 	.word	0x20000e39
 8002584:	2000047d 	.word	0x2000047d
 8002588:	20000000 	.word	0x20000000
 800258c:	2000047c 	.word	0x2000047c

08002590 <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MENU_OptionsSetDateTime+0x88>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d038      	beq.n	8002610 <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <MENU_OptionsSetDateTime+0x88>)
 80025a0:	2204      	movs	r2, #4
 80025a2:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80025a4:	f7fe ffe0 	bl	8001568 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <MENU_OptionsSetDateTime+0x8c>)
 80025aa:	f7ff f88d 	bl	80016c8 <LCD_Print>
		LCD_SetCursor(0, 1);
 80025ae:	2101      	movs	r1, #1
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe ffeb 	bl	800158c <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 80025b6:	481a      	ldr	r0, [pc, #104]	; (8002620 <MENU_OptionsSetDateTime+0x90>)
 80025b8:	f7ff f886 	bl	80016c8 <LCD_Print>
		LCD_SetCursor(0, 2);
 80025bc:	2102      	movs	r1, #2
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe ffe4 	bl	800158c <LCD_SetCursor>
		LCD_Print("--------------------");
 80025c4:	4817      	ldr	r0, [pc, #92]	; (8002624 <MENU_OptionsSetDateTime+0x94>)
 80025c6:	f7ff f87f 	bl	80016c8 <LCD_Print>
		LCD_SetCursor(0, 3);
 80025ca:	2103      	movs	r1, #3
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe ffdd 	bl	800158c <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 80025d2:	4815      	ldr	r0, [pc, #84]	; (8002628 <MENU_OptionsSetDateTime+0x98>)
 80025d4:	f7ff f878 	bl	80016c8 <LCD_Print>

		LCD_SetCursor(1, 1);
 80025d8:	2101      	movs	r1, #1
 80025da:	2001      	movs	r0, #1
 80025dc:	f7fe ffd6 	bl	800158c <LCD_SetCursor>
		_optionsCol = 1;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <MENU_OptionsSetDateTime+0x9c>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 80025e6:	f7ff f843 	bl	8001670 <LCD_DisableBlink>
		LCD_EnableCursor();
 80025ea:	f7ff f82b 	bl	8001644 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	e007      	b.n	8002604 <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <MENU_OptionsSetDateTime+0xa0>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	2230      	movs	r2, #48	; 0x30
 80025fc:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3301      	adds	r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b12      	cmp	r3, #18
 8002608:	ddf4      	ble.n	80025f4 <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <MENU_OptionsSetDateTime+0xa4>)
 800260c:	2230      	movs	r2, #48	; 0x30
 800260e:	701a      	strb	r2, [r3, #0]
	}
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000e39 	.word	0x20000e39
 800261c:	0800c290 	.word	0x0800c290
 8002620:	0800c2a8 	.word	0x0800c2a8
 8002624:	0800c2c0 	.word	0x0800c2c0
 8002628:	0800c278 	.word	0x0800c278
 800262c:	2000047e 	.word	0x2000047e
 8002630:	200004b0 	.word	0x200004b0
 8002634:	2000047f 	.word	0x2000047f

08002638 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	int amount = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_WiFi_NofNetworks+0x22>
			return amount;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e00c      	b.n	8002674 <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b3b      	cmp	r3, #59	; 0x3b
 8002664:	d102      	bne.n	800266c <_WiFi_NofNetworks+0x34>
			amount++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3301      	adds	r3, #1
 800266a:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	3301      	adds	r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002672:	e7e9      	b.n	8002648 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
	int clearRest = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	e015      	b.n	80026bc <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <_WiFi_RequestConn+0x26>
 8002696:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <_WiFi_RequestConn+0xc4>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <_WiFi_RequestConn+0x26>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <_WiFi_RequestConn+0x36>
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <_WiFi_RequestConn+0xc4>)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b27      	cmp	r3, #39	; 0x27
 80026c0:	dde6      	ble.n	8002690 <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 80026c2:	f7fe ff51 	bl	8001568 <LCD_ClearScreen>
	LCD_DisableCursor();
 80026c6:	f7fe ffa7 	bl	8001618 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 80026ca:	2101      	movs	r1, #1
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe ff5d 	bl	800158c <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 80026d2:	481d      	ldr	r0, [pc, #116]	; (8002748 <_WiFi_RequestConn+0xc8>)
 80026d4:	f7ff f81c 	bl	8001710 <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 80026d8:	2103      	movs	r1, #3
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe ff56 	bl	800158c <LCD_SetCursor>
	LCD_PrintCentered("please wait xD");
 80026e0:	481a      	ldr	r0, [pc, #104]	; (800274c <_WiFi_RequestConn+0xcc>)
 80026e2:	f7ff f815 	bl	8001710 <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <_WiFi_RequestConn+0xd0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4815      	ldr	r0, [pc, #84]	; (8002744 <_WiFi_RequestConn+0xc4>)
 80026ee:	f000 fcfb 	bl	80030e8 <NET_ConnectToWiFi>
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 80026f6:	f7fe ff37 	bl	8001568 <LCD_ClearScreen>

	if (result == 0) {
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 8002700:	2101      	movs	r1, #1
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe ff42 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 8002708:	4812      	ldr	r0, [pc, #72]	; (8002754 <_WiFi_RequestConn+0xd4>)
 800270a:	f7ff f801 	bl	8001710 <LCD_PrintCentered>

		HAL_Delay(1000);
 800270e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002712:	f003 fb73 	bl	8005dfc <HAL_Delay>
 8002716:	e00d      	b.n	8002734 <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 8002718:	2101      	movs	r1, #1
 800271a:	2000      	movs	r0, #0
 800271c:	f7fe ff36 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <_WiFi_RequestConn+0xd8>)
 8002722:	f7fe fff5 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 8002726:	2102      	movs	r1, #2
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe ff2f 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <_WiFi_RequestConn+0xdc>)
 8002730:	f7fe ffee 	bl	8001710 <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 8002734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002738:	f003 fb60 	bl	8005dfc <HAL_Delay>
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000484 	.word	0x20000484
 8002748:	0800c2d8 	.word	0x0800c2d8
 800274c:	0800c2e4 	.word	0x0800c2e4
 8002750:	2000047d 	.word	0x2000047d
 8002754:	0800c2f4 	.word	0x0800c2f4
 8002758:	0800c300 	.word	0x0800c300
 800275c:	0800c314 	.word	0x0800c314

08002760 <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <MENU_OptionsWifiList+0xac>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d049      	beq.n	8002802 <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <MENU_OptionsWifiList+0xac>)
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002774:	f7fe fef8 	bl	8001568 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002778:	f7fe ff7a 	bl	8001670 <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 800277c:	4824      	ldr	r0, [pc, #144]	; (8002810 <MENU_OptionsWifiList+0xb0>)
 800277e:	f7fe ffc7 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 8002782:	2102      	movs	r1, #2
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe ff01 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 800278a:	4822      	ldr	r0, [pc, #136]	; (8002814 <MENU_OptionsWifiList+0xb4>)
 800278c:	f7fe ffc0 	bl	8001710 <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 8002790:	2103      	movs	r1, #3
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fefa 	bl	800158c <LCD_SetCursor>
		LCD_PrintCentered("please wait :)");
 8002798:	481f      	ldr	r0, [pc, #124]	; (8002818 <MENU_OptionsWifiList+0xb8>)
 800279a:	f7fe ffb9 	bl	8001710 <LCD_PrintCentered>

		_optionsRow = 0;
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MENU_OptionsWifiList+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 80027a4:	f000 fb6c 	bl	8002e80 <NET_RequestNetworkList>
 80027a8:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d019      	beq.n	80027e4 <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff41 	bl	8002638 <_WiFi_NofNetworks>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <MENU_OptionsWifiList+0xc0>)
 80027bc:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MENU_OptionsWifiList+0xc4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <MENU_OptionsWifiList+0xc8>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MENU_OptionsWifiList+0xc4>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fa03 	bl	8001bdc <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 80027d6:	f7fe ff61 	bl	800169c <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 80027da:	2100      	movs	r1, #0
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fed5 	bl	800158c <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 80027e2:	e00e      	b.n	8002802 <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 80027e4:	f7fe fec0 	bl	8001568 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 80027e8:	2101      	movs	r1, #1
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe fece 	bl	800158c <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 80027f0:	480e      	ldr	r0, [pc, #56]	; (800282c <MENU_OptionsWifiList+0xcc>)
 80027f2:	f7fe ff8d 	bl	8001710 <LCD_PrintCentered>
			HAL_Delay(1000);
 80027f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fa:	f003 faff 	bl	8005dfc <HAL_Delay>
			MENU_Options();
 80027fe:	f7ff fe9f 	bl	8002540 <MENU_Options>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000e39 	.word	0x20000e39
 8002810:	0800c328 	.word	0x0800c328
 8002814:	0800c33c 	.word	0x0800c33c
 8002818:	0800c34c 	.word	0x0800c34c
 800281c:	2000047c 	.word	0x2000047c
 8002820:	200004ac 	.word	0x200004ac
 8002824:	2000047d 	.word	0x2000047d
 8002828:	20000480 	.word	0x20000480
 800282c:	0800c35c 	.word	0x0800c35c

08002830 <MENU_Clock>:

void MENU_Clock(void) {
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MENU_Clock+0x74>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <MENU_Clock+0x1c>
		State = ST_Clock;
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MENU_Clock+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 8002844:	f7fe fe90 	bl	8001568 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002848:	f7fe ff12 	bl	8001670 <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 800284c:	f001 f94c 	bl	8003ae8 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 8002850:	f107 0208 	add.w	r2, r7, #8
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f001 f9c2 	bl	8003be4 <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 8002860:	f107 0208 	add.w	r2, r7, #8
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f98a 	bl	8001b84 <LCD_PrintDateTime>

	if (THS_ReadData(THS_In, data)) {
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	2000      	movs	r0, #0
 8002876:	f001 fb7b 	bl	8003f70 <THS_ReadData>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d004      	beq.n	800288a <MENU_Clock+0x5a>
		LCD_PrintTempInfo(data, NULL);
 8002880:	463b      	mov	r3, r7
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe ff6d 	bl	8001764 <LCD_PrintTempInfo>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MENU_Clock+0x78>)
 800288c:	781c      	ldrb	r4, [r3, #0]
 800288e:	f000 fcbb 	bl	8003208 <NET_GetConnInfo>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fa58 	bl	8001d4c <LCD_PrintNetworkStatus>
}
 800289c:	bf00      	nop
 800289e:	3724      	adds	r7, #36	; 0x24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	20000e39 	.word	0x20000e39
 80028a8:	20000e38 	.word	0x20000e38

080028ac <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	48b0      	ldr	r0, [pc, #704]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 80028b4:	f003 fd92 	bl	80063dc <HAL_GPIO_ReadPin>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 808e 	beq.w	80029dc <MENU_HandleKeys+0x130>
 80028c0:	200a      	movs	r0, #10
 80028c2:	f003 fa9b 	bl	8005dfc <HAL_Delay>
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	48aa      	ldr	r0, [pc, #680]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 80028ca:	f003 fd87 	bl	80063dc <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 81e5 	beq.w	8002ca0 <MENU_HandleKeys+0x3f4>
 80028d6:	bf00      	nop
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	48a6      	ldr	r0, [pc, #664]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 80028dc:	f003 fd7e 	bl	80063dc <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f8      	bne.n	80028d8 <MENU_HandleKeys+0x2c>
		LCD_WakeScreen();
 80028e6:	f7fe fe1b 	bl	8001520 <LCD_WakeScreen>

		if (State == ST_Clock) {
 80028ea:	4ba3      	ldr	r3, [pc, #652]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <MENU_HandleKeys+0x4c>
			/* Przejdz w ekran opcji */
			MENU_Options();
 80028f2:	f7ff fe25 	bl	8002540 <MENU_Options>
 80028f6:	e06a      	b.n	80029ce <MENU_HandleKeys+0x122>
		} else if (State == ST_Options) {
 80028f8:	4b9f      	ldr	r3, [pc, #636]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d125      	bne.n	800294c <MENU_HandleKeys+0xa0>
			if (_optionsRow > 1) {
 8002900:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d90c      	bls.n	8002922 <MENU_HandleKeys+0x76>
				_optionsRow = LCD_CursorUp();
 8002908:	f7ff f87e 	bl	8001a08 <LCD_CursorUp>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	4b9a      	ldr	r3, [pc, #616]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002912:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002914:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e055      	b.n	80029ce <MENU_HandleKeys+0x122>
			} else if (_currentOption != 1) {
 8002922:	4b97      	ldr	r3, [pc, #604]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d051      	beq.n	80029ce <MENU_HandleKeys+0x122>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 800292a:	4b95      	ldr	r3, [pc, #596]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	4b92      	ldr	r3, [pc, #584]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	4891      	ldr	r0, [pc, #580]	; (8002b84 <MENU_HandleKeys+0x2d8>)
 800293e:	f7ff f9b9 	bl	8001cb4 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 8002942:	2101      	movs	r1, #1
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe fe21 	bl	800158c <LCD_SetCursor>
 800294a:	e040      	b.n	80029ce <MENU_HandleKeys+0x122>
			}
		} else if (State == ST_PassInput) {
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d106      	bne.n	8002962 <MENU_HandleKeys+0xb6>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 8002954:	f7ff fa8a 	bl	8001e6c <_PWD_NextChar>
 8002958:	4603      	mov	r3, r0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fa9e 	bl	8001e9c <_PWD_SaveAndWrite>
 8002960:	e035      	b.n	80029ce <MENU_HandleKeys+0x122>
		} else if (State == ST_SetDateTime) {
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d102      	bne.n	8002970 <MENU_HandleKeys+0xc4>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 800296a:	f7ff fab3 	bl	8001ed4 <_CLK_HandleDateTimeInput>
 800296e:	e02e      	b.n	80029ce <MENU_HandleKeys+0x122>
		} else if (State == ST_WiFi) {
 8002970:	4b81      	ldr	r3, [pc, #516]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d12a      	bne.n	80029ce <MENU_HandleKeys+0x122>
			if (_optionsRow > 0) {
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00c      	beq.n	800299a <MENU_HandleKeys+0xee>
				_optionsRow = LCD_CursorUp();
 8002980:	f7ff f842 	bl	8001a08 <LCD_CursorUp>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 800298a:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 800298c:	4b7c      	ldr	r3, [pc, #496]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e019      	b.n	80029ce <MENU_HandleKeys+0x122>
			} else if (_networksIn > 4 && _currentOption != 1) {
 800299a:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <MENU_HandleKeys+0x2dc>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d915      	bls.n	80029ce <MENU_HandleKeys+0x122>
 80029a2:	4b77      	ldr	r3, [pc, #476]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d011      	beq.n	80029ce <MENU_HandleKeys+0x122>
				LCD_PrintNetworks(_networksList, --_currentOption);
 80029aa:	4b78      	ldr	r3, [pc, #480]	; (8002b8c <MENU_HandleKeys+0x2e0>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b74      	ldr	r3, [pc, #464]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b2d9      	uxtb	r1, r3
 80029b6:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 80029b8:	7019      	strb	r1, [r3, #0]
 80029ba:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7ff f90b 	bl	8001bdc <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 80029c6:	2100      	movs	r1, #0
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fddf 	bl	800158c <LCD_SetCursor>
			}
		}

		LED_T(Red);
 80029ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029d2:	486f      	ldr	r0, [pc, #444]	; (8002b90 <MENU_HandleKeys+0x2e4>)
 80029d4:	f003 fd33 	bl	800643e <HAL_GPIO_TogglePin>
		return 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	e162      	b.n	8002ca2 <MENU_HandleKeys+0x3f6>

	} Or (DOWN) {
 80029dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e0:	4864      	ldr	r0, [pc, #400]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 80029e2:	f003 fcfb 	bl	80063dc <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8093 	beq.w	8002b14 <MENU_HandleKeys+0x268>
 80029ee:	200a      	movs	r0, #10
 80029f0:	f003 fa04 	bl	8005dfc <HAL_Delay>
 80029f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029f8:	485e      	ldr	r0, [pc, #376]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 80029fa:	f003 fcef 	bl	80063dc <HAL_GPIO_ReadPin>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 814d 	beq.w	8002ca0 <MENU_HandleKeys+0x3f4>
 8002a06:	bf00      	nop
 8002a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a0c:	4859      	ldr	r0, [pc, #356]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 8002a0e:	f003 fce5 	bl	80063dc <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f7      	bne.n	8002a08 <MENU_HandleKeys+0x15c>
		LCD_WakeScreen();
 8002a18:	f7fe fd82 	bl	8001520 <LCD_WakeScreen>

		if (State == ST_Options) {
 8002a1c:	4b56      	ldr	r3, [pc, #344]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d126      	bne.n	8002a72 <MENU_HandleKeys+0x1c6>
			if (_optionsRow < 3) {
 8002a24:	4b55      	ldr	r3, [pc, #340]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d80c      	bhi.n	8002a46 <MENU_HandleKeys+0x19a>
				_optionsRow = LCD_CursorDown();
 8002a2c:	f7ff f808 	bl	8001a40 <LCD_CursorDown>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002a36:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002a38:	4b51      	ldr	r3, [pc, #324]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e05f      	b.n	8002b06 <MENU_HandleKeys+0x25a>
			} else if (_currentOption != NOF_OPTIONS) {
 8002a46:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	d05b      	beq.n	8002b06 <MENU_HandleKeys+0x25a>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	3b02      	subs	r3, #2
 8002a60:	4619      	mov	r1, r3
 8002a62:	4848      	ldr	r0, [pc, #288]	; (8002b84 <MENU_HandleKeys+0x2d8>)
 8002a64:	f7ff f926 	bl	8001cb4 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 8002a68:	2103      	movs	r1, #3
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fd8e 	bl	800158c <LCD_SetCursor>
 8002a70:	e049      	b.n	8002b06 <MENU_HandleKeys+0x25a>
			}
		} else if (State == ST_PassInput) {
 8002a72:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d104      	bne.n	8002a84 <MENU_HandleKeys+0x1d8>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 8002a7a:	f7ff fe01 	bl	8002680 <_WiFi_RequestConn>
			MENU_Clock();
 8002a7e:	f7ff fed7 	bl	8002830 <MENU_Clock>
 8002a82:	e040      	b.n	8002b06 <MENU_HandleKeys+0x25a>
		} else if (State == ST_SetDateTime) {
 8002a84:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d104      	bne.n	8002a96 <MENU_HandleKeys+0x1ea>
			_CLK_ParseAndSetDateTime();
 8002a8c:	f7ff fc40 	bl	8002310 <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 8002a90:	f7ff fece 	bl	8002830 <MENU_Clock>
 8002a94:	e037      	b.n	8002b06 <MENU_HandleKeys+0x25a>
		} else if (State == ST_WiFi) {
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d133      	bne.n	8002b06 <MENU_HandleKeys+0x25a>
			//TODO DEBUG n TESTING
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d814      	bhi.n	8002ad0 <MENU_HandleKeys+0x224>
 8002aa6:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <MENU_HandleKeys+0x2dc>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	da0c      	bge.n	8002ad0 <MENU_HandleKeys+0x224>
				_optionsRow = LCD_CursorDown();
 8002ab6:	f7fe ffc3 	bl	8001a40 <LCD_CursorDown>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <MENU_HandleKeys+0x2d0>)
 8002ac0:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002ac2:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e01a      	b.n	8002b06 <MENU_HandleKeys+0x25a>
			} else if (_networksIn > 4 && _currentOption != 4) {
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <MENU_HandleKeys+0x2dc>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d916      	bls.n	8002b06 <MENU_HandleKeys+0x25a>
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d012      	beq.n	8002b06 <MENU_HandleKeys+0x25a>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <MENU_HandleKeys+0x2e0>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2d9      	uxtb	r1, r3
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002aee:	7019      	strb	r1, [r3, #0]
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <MENU_HandleKeys+0x2d4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3b04      	subs	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff f86f 	bl	8001bdc <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 8002afe:	2103      	movs	r1, #3
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe fd43 	bl	800158c <LCD_SetCursor>
			}
		}

		LED_T(Green);
 8002b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b0a:	4821      	ldr	r0, [pc, #132]	; (8002b90 <MENU_HandleKeys+0x2e4>)
 8002b0c:	f003 fc97 	bl	800643e <HAL_GPIO_TogglePin>
		return 1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0c6      	b.n	8002ca2 <MENU_HandleKeys+0x3f6>

	} Or (LEFT) {
 8002b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b18:	4816      	ldr	r0, [pc, #88]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 8002b1a:	f003 fc5f 	bl	80063dc <HAL_GPIO_ReadPin>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d054      	beq.n	8002bce <MENU_HandleKeys+0x322>
 8002b24:	200a      	movs	r0, #10
 8002b26:	f003 f969 	bl	8005dfc <HAL_Delay>
 8002b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b2e:	4811      	ldr	r0, [pc, #68]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 8002b30:	f003 fc54 	bl	80063dc <HAL_GPIO_ReadPin>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80b2 	beq.w	8002ca0 <MENU_HandleKeys+0x3f4>
 8002b3c:	bf00      	nop
 8002b3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b42:	480c      	ldr	r0, [pc, #48]	; (8002b74 <MENU_HandleKeys+0x2c8>)
 8002b44:	f003 fc4a 	bl	80063dc <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f7      	bne.n	8002b3e <MENU_HandleKeys+0x292>
		LCD_WakeScreen();
 8002b4e:	f7fe fce7 	bl	8001520 <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <MENU_HandleKeys+0x2cc>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d11e      	bne.n	8002b98 <MENU_HandleKeys+0x2ec>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MENU_HandleKeys+0x2e8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02e      	beq.n	8002bc0 <MENU_HandleKeys+0x314>
				--_PWD_index;
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MENU_HandleKeys+0x2e8>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <MENU_HandleKeys+0x2e8>)
 8002b6c:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 8002b6e:	f7fe ff83 	bl	8001a78 <LCD_CursorLeft>
 8002b72:	e025      	b.n	8002bc0 <MENU_HandleKeys+0x314>
 8002b74:	40021000 	.word	0x40021000
 8002b78:	20000e39 	.word	0x20000e39
 8002b7c:	2000047c 	.word	0x2000047c
 8002b80:	2000047d 	.word	0x2000047d
 8002b84:	20000000 	.word	0x20000000
 8002b88:	200004ac 	.word	0x200004ac
 8002b8c:	20000480 	.word	0x20000480
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	200004c3 	.word	0x200004c3
			}
		} else if (State == ST_Options) {
 8002b98:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <MENU_HandleKeys+0x2fa>
			MENU_Clock();
 8002ba0:	f7ff fe46 	bl	8002830 <MENU_Clock>
 8002ba4:	e00c      	b.n	8002bc0 <MENU_HandleKeys+0x314>
		} else if (State == ST_SetDateTime) {
 8002ba6:	4b40      	ldr	r3, [pc, #256]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d102      	bne.n	8002bb4 <MENU_HandleKeys+0x308>
			_CLK_MoveInputLeft();
 8002bae:	f7ff fb4f 	bl	8002250 <_CLK_MoveInputLeft>
 8002bb2:	e005      	b.n	8002bc0 <MENU_HandleKeys+0x314>
		} else if (State == ST_WiFi) {
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d101      	bne.n	8002bc0 <MENU_HandleKeys+0x314>
			MENU_Options();
 8002bbc:	f7ff fcc0 	bl	8002540 <MENU_Options>
		}

		LED_T(Blue);
 8002bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc4:	4839      	ldr	r0, [pc, #228]	; (8002cac <MENU_HandleKeys+0x400>)
 8002bc6:	f003 fc3a 	bl	800643e <HAL_GPIO_TogglePin>
		return 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e069      	b.n	8002ca2 <MENU_HandleKeys+0x3f6>

	} Or (RIGHT) {
 8002bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bd2:	4837      	ldr	r0, [pc, #220]	; (8002cb0 <MENU_HandleKeys+0x404>)
 8002bd4:	f003 fc02 	bl	80063dc <HAL_GPIO_ReadPin>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d060      	beq.n	8002ca0 <MENU_HandleKeys+0x3f4>
 8002bde:	200a      	movs	r0, #10
 8002be0:	f003 f90c 	bl	8005dfc <HAL_Delay>
 8002be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be8:	4831      	ldr	r0, [pc, #196]	; (8002cb0 <MENU_HandleKeys+0x404>)
 8002bea:	f003 fbf7 	bl	80063dc <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d055      	beq.n	8002ca0 <MENU_HandleKeys+0x3f4>
 8002bf4:	bf00      	nop
 8002bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bfa:	482d      	ldr	r0, [pc, #180]	; (8002cb0 <MENU_HandleKeys+0x404>)
 8002bfc:	f003 fbee 	bl	80063dc <HAL_GPIO_ReadPin>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f7      	bne.n	8002bf6 <MENU_HandleKeys+0x34a>
		LCD_WakeScreen();
 8002c06:	f7fe fc8b 	bl	8001520 <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002c0a:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d113      	bne.n	8002c3a <MENU_HandleKeys+0x38e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <MENU_HandleKeys+0x408>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <MENU_HandleKeys+0x40c>)
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d038      	beq.n	8002c92 <MENU_HandleKeys+0x3e6>
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <MENU_HandleKeys+0x408>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b26      	cmp	r3, #38	; 0x26
 8002c26:	d834      	bhi.n	8002c92 <MENU_HandleKeys+0x3e6>
				++_PWD_index;
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <MENU_HandleKeys+0x408>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <MENU_HandleKeys+0x408>)
 8002c32:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 8002c34:	f7fe ff4e 	bl	8001ad4 <LCD_CursorRight>
 8002c38:	e02b      	b.n	8002c92 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_Options) {
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d11a      	bne.n	8002c78 <MENU_HandleKeys+0x3cc>
			if (_currentOption == 1) {
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <MENU_HandleKeys+0x410>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <MENU_HandleKeys+0x3a4>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 8002c4a:	f7ff fd89 	bl	8002760 <MENU_OptionsWifiList>
 8002c4e:	e020      	b.n	8002c92 <MENU_HandleKeys+0x3e6>
			} else if (_currentOption == 2) {
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <MENU_HandleKeys+0x410>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d104      	bne.n	8002c62 <MENU_HandleKeys+0x3b6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 8002c58:	f000 fb32 	bl	80032c0 <NET_WiFiDisconnect>
				MENU_Clock();
 8002c5c:	f7ff fde8 	bl	8002830 <MENU_Clock>
 8002c60:	e017      	b.n	8002c92 <MENU_HandleKeys+0x3e6>

			} else if (_currentOption == 3) {
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MENU_HandleKeys+0x410>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d013      	beq.n	8002c92 <MENU_HandleKeys+0x3e6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <MENU_HandleKeys+0x410>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d10f      	bne.n	8002c92 <MENU_HandleKeys+0x3e6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 8002c72:	f7ff fc8d 	bl	8002590 <MENU_OptionsSetDateTime>
 8002c76:	e00c      	b.n	8002c92 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_SetDateTime) {
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d102      	bne.n	8002c86 <MENU_HandleKeys+0x3da>
			_CLK_MoveInputRight();
 8002c80:	f7ff fa86 	bl	8002190 <_CLK_MoveInputRight>
 8002c84:	e005      	b.n	8002c92 <MENU_HandleKeys+0x3e6>
		} else if (State == ST_WiFi) {
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MENU_HandleKeys+0x3fc>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d101      	bne.n	8002c92 <MENU_HandleKeys+0x3e6>
			MENU_PasswdInput();
 8002c8e:	f7ff fc2f 	bl	80024f0 <MENU_PasswdInput>
		}

		LED_T(Orange);
 8002c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <MENU_HandleKeys+0x400>)
 8002c98:	f003 fbd1 	bl	800643e <HAL_GPIO_TogglePin>
		return 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <MENU_HandleKeys+0x3f6>

	} IfEnd;
	return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000e39 	.word	0x20000e39
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	200004c3 	.word	0x200004c3
 8002cb8:	20000484 	.word	0x20000484
 8002cbc:	2000047d 	.word	0x2000047d

08002cc0 <_NET_ResetBuffer>:
char _connID;

uint8_t _uartByte;
uint8_t _requestIndex = 0;

void _NET_ResetBuffer(void) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e007      	b.n	8002cdc <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 8002ccc:	4a08      	ldr	r2, [pc, #32]	; (8002cf0 <_NET_ResetBuffer+0x30>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ce2:	dbf3      	blt.n	8002ccc <_NET_ResetBuffer+0xc>
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	200004d8 	.word	0x200004d8

08002cf4 <_NET_ResetIP>:

void _NET_ResetIP(void) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
	for (int i = 0; i < IP_SIZE; i++) {
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	e007      	b.n	8002d10 <_NET_ResetIP+0x1c>
		_currentIP[i] = 0;
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <_NET_ResetIP+0x30>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IP_SIZE; i++) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b0e      	cmp	r3, #14
 8002d14:	ddf4      	ble.n	8002d00 <_NET_ResetIP+0xc>
	}
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200004c8 	.word	0x200004c8

08002d28 <_NET_GetIndexForPattern>:

int _NET_GetIndexForPattern(char pattern[]) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	int find = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
	int patternLen = strlen(pattern);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd fa55 	bl	80001e4 <strlen>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	60fb      	str	r3, [r7, #12]

	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	e018      	b.n	8002d76 <_NET_GetIndexForPattern+0x4e>
		if (find == patternLen) {
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d101      	bne.n	8002d50 <_NET_GetIndexForPattern+0x28>
			return cursor;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	e018      	b.n	8002d82 <_NET_GetIndexForPattern+0x5a>
		}

		if (_receive[cursor] == pattern[find]) {
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <_NET_GetIndexForPattern+0x64>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	440b      	add	r3, r1
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d103      	bne.n	8002d6c <_NET_GetIndexForPattern+0x44>
			find++;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e001      	b.n	8002d70 <_NET_GetIndexForPattern+0x48>
		} else {
			find = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3301      	adds	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d7c:	dbe2      	blt.n	8002d44 <_NET_GetIndexForPattern+0x1c>
		}
	}
	return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200004d8 	.word	0x200004d8

08002d90 <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 8002d9c:	f7ff ff90 	bl	8002cc0 <_NET_ResetBuffer>
	size_t len = strlen(command);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7fd fa1f 	bl	80001e4 <strlen>
 8002da6:	6178      	str	r0, [r7, #20]

	HAL_UART_AbortReceive_IT(&huart3);
 8002da8:	4814      	ldr	r0, [pc, #80]	; (8002dfc <_NET_SendCommand+0x6c>)
 8002daa:	f006 f93d 	bl	8009028 <HAL_UART_AbortReceive_IT>

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	4811      	ldr	r0, [pc, #68]	; (8002dfc <_NET_SendCommand+0x6c>)
 8002db8:	f005 ffa1 	bl	8008cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	490f      	ldr	r1, [pc, #60]	; (8002e00 <_NET_SendCommand+0x70>)
 8002dc2:	480e      	ldr	r0, [pc, #56]	; (8002dfc <_NET_SendCommand+0x6c>)
 8002dc4:	f005 ff9b 	bl	8008cfe <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dce:	490d      	ldr	r1, [pc, #52]	; (8002e04 <_NET_SendCommand+0x74>)
 8002dd0:	480a      	ldr	r0, [pc, #40]	; (8002dfc <_NET_SendCommand+0x6c>)
 8002dd2:	f006 f82d 	bl	8008e30 <HAL_UART_Receive>
			rTimeout);

	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <_NET_SendCommand+0x78>)
 8002dda:	4808      	ldr	r0, [pc, #32]	; (8002dfc <_NET_SendCommand+0x6c>)
 8002ddc:	f006 f8ce 	bl	8008f7c <HAL_UART_Receive_IT>

	/* szukaj odpowiedzi 'OK\r\n' */
	if (_NET_GetIndexForPattern(OK_PATTERN) != -1) {
 8002de0:	480a      	ldr	r0, [pc, #40]	; (8002e0c <_NET_SendCommand+0x7c>)
 8002de2:	f7ff ffa1 	bl	8002d28 <_NET_GetIndexForPattern>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d001      	beq.n	8002df2 <_NET_SendCommand+0x62>
		return 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <_NET_SendCommand+0x64>
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000db8 	.word	0x20000db8
 8002e00:	0800c370 	.word	0x0800c370
 8002e04:	200004d8 	.word	0x200004d8
 8002e08:	200004c4 	.word	0x200004c4
 8002e0c:	0800c374 	.word	0x0800c374

08002e10 <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002e14:	e002      	b.n	8002e1c <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f002 fff0 	bl	8005dfc <HAL_Delay>
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002e1c:	2232      	movs	r2, #50	; 0x32
 8002e1e:	2101      	movs	r1, #1
 8002e20:	480a      	ldr	r0, [pc, #40]	; (8002e4c <_NET_SetClientDConnMode+0x3c>)
 8002e22:	f7ff ffb5 	bl	8002d90 <_NET_SendCommand>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f4      	bne.n	8002e16 <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002e2c:	e002      	b.n	8002e34 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f002 ffe4 	bl	8005dfc <HAL_Delay>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002e34:	2264      	movs	r2, #100	; 0x64
 8002e36:	2105      	movs	r1, #5
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <_NET_SetClientDConnMode+0x40>)
 8002e3a:	f7ff ffa9 	bl	8002d90 <_NET_SendCommand>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f4      	bne.n	8002e2e <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8002e44:	f000 fa3c 	bl	80032c0 <NET_WiFiDisconnect>
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	0800c37c 	.word	0x0800c37c
 8002e50:	0800c384 	.word	0x0800c384

08002e54 <NET_Init>:

void NET_Init(void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8002e58:	f7ff ffda 	bl	8002e10 <_NET_SetClientDConnMode>

	_connID = 0;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <NET_Init+0x20>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
	_uartByte = 0;
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <NET_Init+0x24>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
	_requestIndex = 0;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <NET_Init+0x28>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200004c5 	.word	0x200004c5
 8002e78:	200004c4 	.word	0x200004c4
 8002e7c:	20000448 	.word	0x20000448

08002e80 <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8002e86:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4894      	ldr	r0, [pc, #592]	; (80030e0 <NET_RequestNetworkList+0x260>)
 8002e8e:	f7ff ff7f 	bl	8002d90 <_NET_SendCommand>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 811e 	bne.w	80030d6 <NET_RequestNetworkList+0x256>
		int index = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	e0f8      	b.n	8003096 <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8002ea4:	4a8f      	ldr	r2, [pc, #572]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b28      	cmp	r3, #40	; 0x28
 8002eae:	f040 80e4 	bne.w	800307a <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	60ba      	str	r2, [r7, #8]
 8002eb8:	4a8a      	ldr	r2, [pc, #552]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 8002ebe:	4a89      	ldr	r2, [pc, #548]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	3b30      	subs	r3, #48	; 0x30
 8002ec8:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	f000 80e8 	beq.w	80030a2 <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 8002ed2:	e005      	b.n	8002ee0 <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	4a82      	ldr	r2, [pc, #520]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002ee0:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b22      	cmp	r3, #34	; 0x22
 8002eea:	d1f3      	bne.n	8002ed4 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	60ba      	str	r2, [r7, #8]
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 8002ef8:	e00e      	b.n	8002f18 <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	60fa      	str	r2, [r7, #12]
 8002f00:	4978      	ldr	r1, [pc, #480]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	440a      	add	r2, r1
 8002f06:	7811      	ldrb	r1, [r2, #0]
 8002f08:	4a76      	ldr	r2, [pc, #472]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f0a:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60ba      	str	r2, [r7, #8]
 8002f12:	4a74      	ldr	r2, [pc, #464]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002f18:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b22      	cmp	r3, #34	; 0x22
 8002f22:	d1ea      	bne.n	8002efa <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 8002f24:	e005      	b.n	8002f32 <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	60ba      	str	r2, [r7, #8]
 8002f2c:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 8002f32:	4a6c      	ldr	r2, [pc, #432]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b29      	cmp	r3, #41	; 0x29
 8002f3c:	d1f3      	bne.n	8002f26 <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = '-';
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	60fa      	str	r2, [r7, #12]
 8002f44:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f46:	212d      	movs	r1, #45	; 0x2d
 8002f48:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	60ba      	str	r2, [r7, #8]
 8002f50:	4a64      	ldr	r2, [pc, #400]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d118      	bne.n	8002f8e <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60fa      	str	r2, [r7, #12]
 8002f62:	4a60      	ldr	r2, [pc, #384]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f64:	214f      	movs	r1, #79	; 0x4f
 8002f66:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60fa      	str	r2, [r7, #12]
 8002f6e:	4a5d      	ldr	r2, [pc, #372]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60fa      	str	r2, [r7, #12]
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f7c:	2145      	movs	r1, #69	; 0x45
 8002f7e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	60fa      	str	r2, [r7, #12]
 8002f86:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f88:	214e      	movs	r1, #78	; 0x4e
 8002f8a:	54d1      	strb	r1, [r2, r3]
 8002f8c:	e06e      	b.n	800306c <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d118      	bne.n	8002fc6 <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	60fa      	str	r2, [r7, #12]
 8002f9a:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002f9c:	2157      	movs	r1, #87	; 0x57
 8002f9e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	60fa      	str	r2, [r7, #12]
 8002fa6:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fa8:	2145      	movs	r1, #69	; 0x45
 8002faa:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	60fa      	str	r2, [r7, #12]
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fb4:	2150      	movs	r1, #80	; 0x50
 8002fb6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60fa      	str	r2, [r7, #12]
 8002fbe:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	54d1      	strb	r1, [r2, r3]
 8002fc4:	e052      	b.n	800306c <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d118      	bne.n	8002ffe <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	60fa      	str	r2, [r7, #12]
 8002fd2:	4a44      	ldr	r2, [pc, #272]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fd4:	2157      	movs	r1, #87	; 0x57
 8002fd6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	60fa      	str	r2, [r7, #12]
 8002fde:	4a41      	ldr	r2, [pc, #260]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fe0:	2150      	movs	r1, #80	; 0x50
 8002fe2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	60fa      	str	r2, [r7, #12]
 8002fea:	4a3e      	ldr	r2, [pc, #248]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002fec:	2141      	movs	r1, #65	; 0x41
 8002fee:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	60fa      	str	r2, [r7, #12]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	54d1      	strb	r1, [r2, r3]
 8002ffc:	e036      	b.n	800306c <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d118      	bne.n	8003036 <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60fa      	str	r2, [r7, #12]
 800300a:	4a36      	ldr	r2, [pc, #216]	; (80030e4 <NET_RequestNetworkList+0x264>)
 800300c:	2157      	movs	r1, #87	; 0x57
 800300e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	60fa      	str	r2, [r7, #12]
 8003016:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003018:	2150      	movs	r1, #80	; 0x50
 800301a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	60fa      	str	r2, [r7, #12]
 8003022:	4a30      	ldr	r2, [pc, #192]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003024:	2141      	movs	r1, #65	; 0x41
 8003026:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60fa      	str	r2, [r7, #12]
 800302e:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003030:	2132      	movs	r1, #50	; 0x32
 8003032:	54d1      	strb	r1, [r2, r3]
 8003034:	e01a      	b.n	800306c <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d117      	bne.n	800306c <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	60fa      	str	r2, [r7, #12]
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003044:	214d      	movs	r1, #77	; 0x4d
 8003046:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	60fa      	str	r2, [r7, #12]
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003050:	2149      	movs	r1, #73	; 0x49
 8003052:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	60fa      	str	r2, [r7, #12]
 800305a:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <NET_RequestNetworkList+0x264>)
 800305c:	2158      	movs	r1, #88	; 0x58
 800305e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	60fa      	str	r2, [r7, #12]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003068:	2144      	movs	r1, #68	; 0x44
 800306a:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	60fa      	str	r2, [r7, #12]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003074:	213b      	movs	r1, #59	; 0x3b
 8003076:	54d1      	strb	r1, [r2, r3]
				continue;
 8003078:	e00a      	b.n	8003090 <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <NET_RequestNetworkList+0x264>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00f      	beq.n	80030a6 <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <NET_RequestNetworkList+0x264>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4413      	add	r3, r2
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3301      	adds	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800309c:	f6ff af02 	blt.w	8002ea4 <NET_RequestNetworkList+0x24>
 80030a0:	e002      	b.n	80030a8 <NET_RequestNetworkList+0x228>
					break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <NET_RequestNetworkList+0x228>
				break;
 80030a6:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 80030a8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	e007      	b.n	80030c0 <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 80030b0:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <NET_RequestNetworkList+0x264>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3b01      	subs	r3, #1
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	daf3      	bge.n	80030b0 <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <NET_RequestNetworkList+0x252>
			return NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e002      	b.n	80030d8 <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <NET_RequestNetworkList+0x264>)
 80030d4:	e000      	b.n	80030d8 <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0800c390 	.word	0x0800c390
 80030e4:	200004d8 	.word	0x200004d8

080030e8 <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0a0      	sub	sp, #128	; 0x80
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	int ssidIndex = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	67fb      	str	r3, [r7, #124]	; 0x7c
	int cmdIndex = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	67bb      	str	r3, [r7, #120]	; 0x78
	char cmd[100] = { 0 };
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	2264      	movs	r2, #100	; 0x64
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f006 fe30 	bl	8009d68 <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 8003108:	2300      	movs	r3, #0
 800310a:	677b      	str	r3, [r7, #116]	; 0x74
 800310c:	e00a      	b.n	8003124 <NET_ConnectToWiFi+0x3c>
		while (_receive[ssidIndex++] != ';')
 800310e:	bf00      	nop
 8003110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003116:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <NET_ConnectToWiFi+0x10c>)
 8003118:	5cd3      	ldrb	r3, [r2, r3]
 800311a:	2b3b      	cmp	r3, #59	; 0x3b
 800311c:	d1f8      	bne.n	8003110 <NET_ConnectToWiFi+0x28>
	for (int i = 0; i < network - 1; i++) {
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	3301      	adds	r3, #1
 8003122:	677b      	str	r3, [r7, #116]	; 0x74
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	3b01      	subs	r3, #1
 8003128:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800312a:	429a      	cmp	r2, r3
 800312c:	dbef      	blt.n	800310e <NET_ConnectToWiFi+0x26>
			;
	}

	strcpy(cmd, CONN_TO_NETWORK);
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <NET_ConnectToWiFi+0x110>)
 8003134:	ca07      	ldmia	r2, {r0, r1, r2}
 8003136:	c303      	stmia	r3!, {r0, r1}
 8003138:	801a      	strh	r2, [r3, #0]
 800313a:	3302      	adds	r3, #2
 800313c:	0c12      	lsrs	r2, r2, #16
 800313e:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(CONN_TO_NETWORK);
 8003140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003142:	330a      	adds	r3, #10
 8003144:	67bb      	str	r3, [r7, #120]	; 0x78

	for (int i = 0;; i++) {
 8003146:	2300      	movs	r3, #0
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 800314a:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <NET_ConnectToWiFi+0x10c>)
 800314c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b2d      	cmp	r3, #45	; 0x2d
 8003154:	d010      	beq.n	8003178 <NET_ConnectToWiFi+0x90>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 8003156:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003158:	1c53      	adds	r3, r2, #1
 800315a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800315c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	67b9      	str	r1, [r7, #120]	; 0x78
 8003162:	4924      	ldr	r1, [pc, #144]	; (80031f4 <NET_ConnectToWiFi+0x10c>)
 8003164:	5c8a      	ldrb	r2, [r1, r2]
 8003166:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800316a:	440b      	add	r3, r1
 800316c:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0;; i++) {
 8003170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003172:	3301      	adds	r3, #1
 8003174:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 8003176:	e7e8      	b.n	800314a <NET_ConnectToWiFi+0x62>
			break;
 8003178:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f830 	bl	80001e4 <strlen>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	4413      	add	r3, r2
 800318e:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <NET_ConnectToWiFi+0x114>)
 8003190:	6810      	ldr	r0, [r2, #0]
 8003192:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	f007 fa68 	bl	800a670 <strcat>
	strcat(cmd, "\"");
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f81d 	bl	80001e4 <strlen>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	f107 030c 	add.w	r3, r7, #12
 80031b2:	4413      	add	r3, r2
 80031b4:	4912      	ldr	r1, [pc, #72]	; (8003200 <NET_ConnectToWiFi+0x118>)
 80031b6:	461a      	mov	r2, r3
 80031b8:	460b      	mov	r3, r1
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80031c6:	210a      	movs	r1, #10
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fde1 	bl	8002d90 <_NET_SendCommand>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <NET_ConnectToWiFi+0xfa>
		Mode = MD_ClientConn;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <NET_ConnectToWiFi+0x11c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
		NET_HTTPSetup();
 80031da:	f000 f889 	bl	80032f0 <NET_HTTPSetup>

		return 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	e003      	b.n	80031ea <NET_ConnectToWiFi+0x102>
	}
	Mode = MD_LostHost;
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <NET_ConnectToWiFi+0x11c>)
 80031e4:	2203      	movs	r2, #3
 80031e6:	701a      	strb	r2, [r3, #0]
	return 1;
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3780      	adds	r7, #128	; 0x80
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200004d8 	.word	0x200004d8
 80031f8:	0800c39c 	.word	0x0800c39c
 80031fc:	0800c3a8 	.word	0x0800c3a8
 8003200:	0800c3ac 	.word	0x0800c3ac
 8003204:	20000e38 	.word	0x20000e38

08003208 <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost)
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <NET_GetConnInfo+0xa0>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <NET_GetConnInfo+0x16>
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <NET_GetConnInfo+0xa0>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d13e      	bne.n	800329c <NET_GetConnInfo+0x94>
			&& _NET_SendCommand(SHOW_IP, 5, 100) == 0) {
 800321e:	2264      	movs	r2, #100	; 0x64
 8003220:	2105      	movs	r1, #5
 8003222:	4822      	ldr	r0, [pc, #136]	; (80032ac <NET_GetConnInfo+0xa4>)
 8003224:	f7ff fdb4 	bl	8002d90 <_NET_SendCommand>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d136      	bne.n	800329c <NET_GetConnInfo+0x94>
		int cursor = _NET_GetIndexForPattern(CLIENT_IP_PATTERN);
 800322e:	4820      	ldr	r0, [pc, #128]	; (80032b0 <NET_GetConnInfo+0xa8>)
 8003230:	f7ff fd7a 	bl	8002d28 <_NET_GetIndexForPattern>
 8003234:	6078      	str	r0, [r7, #4]
		int index = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]

		_NET_ResetIP();
 800323a:	f7ff fd5b 	bl	8002cf4 <_NET_ResetIP>
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 800323e:	e012      	b.n	8003266 <NET_GetConnInfo+0x5e>
			_currentIP[index++] = _receive[cursor++];
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	1c53      	adds	r3, r2, #1
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	6039      	str	r1, [r7, #0]
 800324c:	4919      	ldr	r1, [pc, #100]	; (80032b4 <NET_GetConnInfo+0xac>)
 800324e:	5c89      	ldrb	r1, [r1, r2]
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <NET_GetConnInfo+0xb0>)
 8003252:	54d1      	strb	r1, [r2, r3]

			if (index - 1 > 15) {
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	3b01      	subs	r3, #1
 8003258:	2b0f      	cmp	r3, #15
 800325a:	dd04      	ble.n	8003266 <NET_GetConnInfo+0x5e>
				Mode = MD_LostHost;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <NET_GetConnInfo+0xa0>)
 800325e:	2203      	movs	r2, #3
 8003260:	701a      	strb	r2, [r3, #0]
				return NULL; /* to nie jest adres ip */
 8003262:	2300      	movs	r3, #0
 8003264:	e01b      	b.n	800329e <NET_GetConnInfo+0x96>
		while (_receive[cursor] != '"') {
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <NET_GetConnInfo+0xac>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b22      	cmp	r3, #34	; 0x22
 8003270:	d1e6      	bne.n	8003240 <NET_GetConnInfo+0x38>
			}
		}

		if (strcmp("0.0.0.0", _receive) == 0) {
 8003272:	4910      	ldr	r1, [pc, #64]	; (80032b4 <NET_GetConnInfo+0xac>)
 8003274:	4811      	ldr	r0, [pc, #68]	; (80032bc <NET_GetConnInfo+0xb4>)
 8003276:	f7fc ffab 	bl	80001d0 <strcmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <NET_GetConnInfo+0x82>
			Mode = MD_LostHost;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <NET_GetConnInfo+0xa0>)
 8003282:	2203      	movs	r2, #3
 8003284:	701a      	strb	r2, [r3, #0]
			return NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	e009      	b.n	800329e <NET_GetConnInfo+0x96>
		}
		/* jesli uda sie nawiazac polaczenie pozniej, ustaw serwer */
		if (Mode == MD_LostHost) {
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <NET_GetConnInfo+0xa0>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d104      	bne.n	800329c <NET_GetConnInfo+0x94>
			NET_HTTPSetup();
 8003292:	f000 f82d 	bl	80032f0 <NET_HTTPSetup>
			Mode = MD_ClientConn;
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <NET_GetConnInfo+0xa0>)
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
		}
	}

	return (char*) _currentIP;
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <NET_GetConnInfo+0xb0>)
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000e38 	.word	0x20000e38
 80032ac:	0800c3b0 	.word	0x0800c3b0
 80032b0:	0800c3bc 	.word	0x0800c3bc
 80032b4:	200004d8 	.word	0x200004d8
 80032b8:	200004c8 	.word	0x200004c8
 80032bc:	0800c3c4 	.word	0x0800c3c4

080032c0 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 80032c4:	e002      	b.n	80032cc <NET_WiFiDisconnect+0xc>
		HAL_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f002 fd98 	bl	8005dfc <HAL_Delay>
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 80032cc:	2264      	movs	r2, #100	; 0x64
 80032ce:	2105      	movs	r1, #5
 80032d0:	4805      	ldr	r0, [pc, #20]	; (80032e8 <NET_WiFiDisconnect+0x28>)
 80032d2:	f7ff fd5d 	bl	8002d90 <_NET_SendCommand>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f4      	bne.n	80032c6 <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <NET_WiFiDisconnect+0x2c>)
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
	return 0;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	0800c3cc 	.word	0x0800c3cc
 80032ec:	20000e38 	.word	0x20000e38

080032f0 <NET_HTTPSetup>:

uint8_t NET_HTTPSetup(void) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80032f4:	e002      	b.n	80032fc <NET_HTTPSetup+0xc>
		HAL_Delay(1);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f002 fd80 	bl	8005dfc <HAL_Delay>
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80032fc:	2264      	movs	r2, #100	; 0x64
 80032fe:	2105      	movs	r1, #5
 8003300:	480c      	ldr	r0, [pc, #48]	; (8003334 <NET_HTTPSetup+0x44>)
 8003302:	f7ff fd45 	bl	8002d90 <_NET_SendCommand>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f4      	bne.n	80032f6 <NET_HTTPSetup+0x6>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 800330c:	e002      	b.n	8003314 <NET_HTTPSetup+0x24>
		HAL_Delay(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f002 fd74 	bl	8005dfc <HAL_Delay>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 8003314:	2264      	movs	r2, #100	; 0x64
 8003316:	2105      	movs	r1, #5
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <NET_HTTPSetup+0x48>)
 800331a:	f7ff fd39 	bl	8002d90 <_NET_SendCommand>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f4      	bne.n	800330e <NET_HTTPSetup+0x1e>

	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 8003324:	2201      	movs	r2, #1
 8003326:	4905      	ldr	r1, [pc, #20]	; (800333c <NET_HTTPSetup+0x4c>)
 8003328:	4805      	ldr	r0, [pc, #20]	; (8003340 <NET_HTTPSetup+0x50>)
 800332a:	f005 fe27 	bl	8008f7c <HAL_UART_Receive_IT>
	/* gniazdo tcp juz nasluchuje na porcie 80 */
	return 0;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	0800c3d8 	.word	0x0800c3d8
 8003338:	0800c3e4 	.word	0x0800c3e4
 800333c:	200004c4 	.word	0x200004c4
 8003340:	20000db8 	.word	0x20000db8

08003344 <NET_SendDataAndCloseConn>:

void NET_SendDataAndCloseConn(char connID, char *data) {
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b09d      	sub	sp, #116	; 0x74
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
	char cmd[100] = { 0 };
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	2264      	movs	r2, #100	; 0x64
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f006 fd05 	bl	8009d68 <memset>

	sprintf(cmd, SEND_DATA_TO_CONN("%c", "%d"), connID, strlen(data));
 800335e:	79fc      	ldrb	r4, [r7, #7]
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f7fc ff3f 	bl	80001e4 <strlen>
 8003366:	4603      	mov	r3, r0
 8003368:	f107 0008 	add.w	r0, r7, #8
 800336c:	4622      	mov	r2, r4
 800336e:	491f      	ldr	r1, [pc, #124]	; (80033ec <NET_SendDataAndCloseConn+0xa8>)
 8003370:	f007 f95e 	bl	800a630 <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 8003374:	f107 0308 	add.w	r3, r7, #8
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	2105      	movs	r1, #5
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fd07 	bl	8002d90 <_NET_SendCommand>

	HAL_Delay(10);
 8003382:	200a      	movs	r0, #10
 8003384:	f002 fd3a 	bl	8005dfc <HAL_Delay>

	HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), 5000);
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	f7fc ff2b 	bl	80001e4 <strlen>
 800338e:	4603      	mov	r3, r0
 8003390:	b29a      	uxth	r2, r3
 8003392:	f241 3388 	movw	r3, #5000	; 0x1388
 8003396:	6839      	ldr	r1, [r7, #0]
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <NET_SendDataAndCloseConn+0xac>)
 800339a:	f005 fcb0 	bl	8008cfe <HAL_UART_Transmit>

	for (int i = 0; i < 100; i++)
 800339e:	2300      	movs	r3, #0
 80033a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033a2:	e008      	b.n	80033b6 <NET_SendDataAndCloseConn+0x72>
		cmd[i] = 0;
 80033a4:	f107 0208 	add.w	r2, r7, #8
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	4413      	add	r3, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 80033b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b2:	3301      	adds	r3, #1
 80033b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	2b63      	cmp	r3, #99	; 0x63
 80033ba:	ddf3      	ble.n	80033a4 <NET_SendDataAndCloseConn+0x60>

	HAL_Delay(50);
 80033bc:	2032      	movs	r0, #50	; 0x32
 80033be:	f002 fd1d 	bl	8005dfc <HAL_Delay>

	sprintf(cmd, CLOSE_CONN("%c"), _connID);
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <NET_SendDataAndCloseConn+0xb0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f107 0308 	add.w	r3, r7, #8
 80033cc:	490a      	ldr	r1, [pc, #40]	; (80033f8 <NET_SendDataAndCloseConn+0xb4>)
 80033ce:	4618      	mov	r0, r3
 80033d0:	f007 f92e 	bl	800a630 <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 80033d4:	f107 0308 	add.w	r3, r7, #8
 80033d8:	2264      	movs	r2, #100	; 0x64
 80033da:	2105      	movs	r1, #5
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fcd7 	bl	8002d90 <_NET_SendCommand>
}
 80033e2:	bf00      	nop
 80033e4:	3774      	adds	r7, #116	; 0x74
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	0800c3f8 	.word	0x0800c3f8
 80033f0:	20000db8 	.word	0x20000db8
 80033f4:	200004c5 	.word	0x200004c5
 80033f8:	0800c40c 	.word	0x0800c40c

080033fc <NET_HandleUART_IT>:

void NET_HandleUART_IT(void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
	if (_uartByte == REQUEST_RECIEVED_PATTERN[_requestIndex++]) {
 8003402:	4b36      	ldr	r3, [pc, #216]	; (80034dc <NET_HandleUART_IT+0xe0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	b2d1      	uxtb	r1, r2
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <NET_HandleUART_IT+0xe0>)
 800340c:	7011      	strb	r1, [r2, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <NET_HandleUART_IT+0xe4>)
 8003412:	5c9a      	ldrb	r2, [r3, r2]
 8003414:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <NET_HandleUART_IT+0xe8>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d152      	bne.n	80034c2 <NET_HandleUART_IT+0xc6>
		if (_requestIndex == strlen(REQUEST_RECIEVED_PATTERN)) {
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <NET_HandleUART_IT+0xe0>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b05      	cmp	r3, #5
 8003422:	d151      	bne.n	80034c8 <NET_HandleUART_IT+0xcc>
			/* odczyt id polaczenia */
			HAL_UART_Receive(&huart3, (uint8_t*) &_connID, 1,
 8003424:	231e      	movs	r3, #30
 8003426:	2201      	movs	r2, #1
 8003428:	492f      	ldr	r1, [pc, #188]	; (80034e8 <NET_HandleUART_IT+0xec>)
 800342a:	4830      	ldr	r0, [pc, #192]	; (80034ec <NET_HandleUART_IT+0xf0>)
 800342c:	f005 fd00 	bl	8008e30 <HAL_UART_Receive>
			BYTE_RECEIVE_TIMEOUT);
			/* odczyt ilosci danych do odebrania */
			char lenString[5] = { 0 }, tempChar = 0;
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	711a      	strb	r2, [r3, #4]
 8003438:	2300      	movs	r3, #0
 800343a:	70fb      	strb	r3, [r7, #3]
			int lenIndex = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

			while (tempChar != ':') {
 8003440:	e012      	b.n	8003468 <NET_HandleUART_IT+0x6c>
				HAL_UART_Receive(&huart3, (uint8_t*) &tempChar, 1,
 8003442:	1cf9      	adds	r1, r7, #3
 8003444:	231e      	movs	r3, #30
 8003446:	2201      	movs	r2, #1
 8003448:	4828      	ldr	r0, [pc, #160]	; (80034ec <NET_HandleUART_IT+0xf0>)
 800344a:	f005 fcf1 	bl	8008e30 <HAL_UART_Receive>
				BYTE_RECEIVE_TIMEOUT);
				/* jebaniutki nie chce w nulla */
				if (tempChar == ',')
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	2b2c      	cmp	r3, #44	; 0x2c
 8003452:	d100      	bne.n	8003456 <NET_HandleUART_IT+0x5a>
					continue;
 8003454:	e008      	b.n	8003468 <NET_HandleUART_IT+0x6c>

				lenString[lenIndex++] = tempChar;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	617a      	str	r2, [r7, #20]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	f107 0118 	add.w	r1, r7, #24
 8003462:	440b      	add	r3, r1
 8003464:	f803 2c14 	strb.w	r2, [r3, #-20]
			while (tempChar != ':') {
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	2b3a      	cmp	r3, #58	; 0x3a
 800346c:	d1e9      	bne.n	8003442 <NET_HandleUART_IT+0x46>
			}
			/* bez dwukropka */
			lenString[--lenIndex] = 0;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3b01      	subs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	1d3a      	adds	r2, r7, #4
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4413      	add	r3, r2
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]

			uint16_t requestLen = atoi(lenString);
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f006 fc43 	bl	8009d0c <atoi>
 8003486:	4603      	mov	r3, r0
 8003488:	827b      	strh	r3, [r7, #18]
			requestLen = (requestLen > RECEIVE_BUFFER_SIZE) ?
 800348a:	8a7b      	ldrh	r3, [r7, #18]
 800348c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003490:	bf28      	it	cs
 8003492:	f44f 73fa 	movcs.w	r3, #500	; 0x1f4
 8003496:	827b      	strh	r3, [r7, #18]
			RECEIVE_BUFFER_SIZE : requestLen;
			/* odbierz zadanie */
			HAL_UART_Receive(&huart3, (uint8_t*) _receive, requestLen,
 8003498:	8a7a      	ldrh	r2, [r7, #18]
 800349a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800349e:	4914      	ldr	r1, [pc, #80]	; (80034f0 <NET_HandleUART_IT+0xf4>)
 80034a0:	4812      	ldr	r0, [pc, #72]	; (80034ec <NET_HandleUART_IT+0xf0>)
 80034a2:	f005 fcc5 	bl	8008e30 <HAL_UART_Receive>
			REQUEST_RECEIVE_TIMEOUT);

			char* response = HTTP_HandleRequest((char*) _receive);
 80034a6:	4812      	ldr	r0, [pc, #72]	; (80034f0 <NET_HandleUART_IT+0xf4>)
 80034a8:	f7fd fe98 	bl	80011dc <HTTP_HandleRequest>
 80034ac:	60f8      	str	r0, [r7, #12]
			if (response != NULL) {
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <NET_HandleUART_IT+0xcc>
				NET_SendDataAndCloseConn(_connID, response);
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <NET_HandleUART_IT+0xec>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ff42 	bl	8003344 <NET_SendDataAndCloseConn>
 80034c0:	e002      	b.n	80034c8 <NET_HandleUART_IT+0xcc>
			}
		}
	} else {
		/* nieistotne dane */
		_requestIndex = 0;
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <NET_HandleUART_IT+0xe0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart3, &_uartByte, 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	4906      	ldr	r1, [pc, #24]	; (80034e4 <NET_HandleUART_IT+0xe8>)
 80034cc:	4807      	ldr	r0, [pc, #28]	; (80034ec <NET_HandleUART_IT+0xf0>)
 80034ce:	f005 fd55 	bl	8008f7c <HAL_UART_Receive_IT>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000448 	.word	0x20000448
 80034e0:	0800c41c 	.word	0x0800c41c
 80034e4:	200004c4 	.word	0x200004c4
 80034e8:	200004c5 	.word	0x200004c5
 80034ec:	20000db8 	.word	0x20000db8
 80034f0:	200004d8 	.word	0x200004d8

080034f4 <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <RGB_Init+0x2c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <RGB_Init+0x30>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <RGB_Init+0x34>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
	_state = 0;
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <RGB_Init+0x38>)
 800350c:	2200      	movs	r2, #0
 800350e:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RGB_Init+0x3c>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	200006d4 	.word	0x200006d4
 8003524:	200006cc 	.word	0x200006cc
 8003528:	200006d8 	.word	0x200006d8
 800352c:	200006d0 	.word	0x200006d0
 8003530:	200006dc 	.word	0x200006dc

08003534 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <_RGB_UpdateRegisters+0x80>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d303      	bcc.n	800354a <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <_RGB_UpdateRegisters+0x80>)
 8003544:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003548:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <_RGB_UpdateRegisters+0x84>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003552:	d303      	bcc.n	800355c <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <_RGB_UpdateRegisters+0x84>)
 8003556:	f240 32e7 	movw	r2, #999	; 0x3e7
 800355a:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <_RGB_UpdateRegisters+0x88>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003564:	d303      	bcc.n	800356e <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <_RGB_UpdateRegisters+0x88>)
 8003568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800356c:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 800356e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <_RGB_UpdateRegisters+0x80>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8003578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <_RGB_UpdateRegisters+0x84>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8003582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <_RGB_UpdateRegisters+0x88>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <_RGB_UpdateRegisters+0x8c>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <_RGB_UpdateRegisters+0x8c>)
 8003596:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <_RGB_UpdateRegisters+0x8c>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 80035a0:	d902      	bls.n	80035a8 <_RGB_UpdateRegisters+0x74>
		_state = 0;
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <_RGB_UpdateRegisters+0x8c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	200006d4 	.word	0x200006d4
 80035b8:	200006cc 	.word	0x200006cc
 80035bc:	200006d8 	.word	0x200006d8
 80035c0:	200006d0 	.word	0x200006d0

080035c4 <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <_RGB_SetWhite+0x2c>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <_RGB_SetWhite+0x30>)
 80035d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d4:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <_RGB_SetWhite+0x34>)
 80035d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035dc:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 80035de:	4b07      	ldr	r3, [pc, #28]	; (80035fc <_RGB_SetWhite+0x38>)
 80035e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035e4:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80035e6:	f7ff ffa5 	bl	8003534 <_RGB_UpdateRegisters>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200006dc 	.word	0x200006dc
 80035f4:	200006d4 	.word	0x200006d4
 80035f8:	200006cc 	.word	0x200006cc
 80035fc:	200006d8 	.word	0x200006d8

08003600 <_RGB_SetRed>:

void _RGB_SetRed(void) {
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <_RGB_SetRed+0x28>)
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <_RGB_SetRed+0x2c>)
 800360c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003610:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003612:	4b07      	ldr	r3, [pc, #28]	; (8003630 <_RGB_SetRed+0x30>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <_RGB_SetRed+0x34>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800361e:	f7ff ff89 	bl	8003534 <_RGB_UpdateRegisters>
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200006dc 	.word	0x200006dc
 800362c:	200006d4 	.word	0x200006d4
 8003630:	200006cc 	.word	0x200006cc
 8003634:	200006d8 	.word	0x200006d8

08003638 <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <_RGB_SetGreen+0x28>)
 800363e:	2203      	movs	r2, #3
 8003640:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <_RGB_SetGreen+0x2c>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <_RGB_SetGreen+0x30>)
 800364a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800364e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <_RGB_SetGreen+0x34>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003656:	f7ff ff6d 	bl	8003534 <_RGB_UpdateRegisters>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200006dc 	.word	0x200006dc
 8003664:	200006d4 	.word	0x200006d4
 8003668:	200006cc 	.word	0x200006cc
 800366c:	200006d8 	.word	0x200006d8

08003670 <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <_RGB_SetBlue+0x28>)
 8003676:	2204      	movs	r2, #4
 8003678:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <_RGB_SetBlue+0x2c>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <_RGB_SetBlue+0x30>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <_RGB_SetBlue+0x34>)
 8003688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800368c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800368e:	f7ff ff51 	bl	8003534 <_RGB_UpdateRegisters>
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	200006dc 	.word	0x200006dc
 800369c:	200006d4 	.word	0x200006d4
 80036a0:	200006cc 	.word	0x200006cc
 80036a4:	200006d8 	.word	0x200006d8

080036a8 <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <_RGB_SetBlack+0x24>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <_RGB_SetBlack+0x28>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <_RGB_SetBlack+0x2c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <_RGB_SetBlack+0x30>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80036c4:	f7ff ff36 	bl	8003534 <_RGB_UpdateRegisters>
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200006dc 	.word	0x200006dc
 80036d0:	200006d4 	.word	0x200006d4
 80036d4:	200006cc 	.word	0x200006cc
 80036d8:	200006d8 	.word	0x200006d8

080036dc <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 80036e0:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <_RGB_Rainbow+0x10c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d002      	beq.n	80036ee <_RGB_Rainbow+0x12>
		_state = 0;
 80036e8:	4b40      	ldr	r3, [pc, #256]	; (80037ec <_RGB_Rainbow+0x110>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <_RGB_Rainbow+0x10c>)
 80036f0:	2209      	movs	r2, #9
 80036f2:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 80036f4:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <_RGB_Rainbow+0x110>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f240 124d 	movw	r2, #333	; 0x14d
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d010      	beq.n	8003722 <_RGB_Rainbow+0x46>
 8003700:	f240 229a 	movw	r2, #666	; 0x29a
 8003704:	4293      	cmp	r3, r2
 8003706:	d017      	beq.n	8003738 <_RGB_Rainbow+0x5c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d120      	bne.n	800374e <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 800370c:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <_RGB_Rainbow+0x114>)
 800370e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003712:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003714:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <_RGB_Rainbow+0x118>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 800371a:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <_RGB_Rainbow+0x11c>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
		break;
 8003720:	e05e      	b.n	80037e0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 8003722:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <_RGB_Rainbow+0x114>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <_RGB_Rainbow+0x118>)
 800372a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800372e:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <_RGB_Rainbow+0x11c>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
		break;
 8003736:	e053      	b.n	80037e0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <_RGB_Rainbow+0x114>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <_RGB_Rainbow+0x118>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <_RGB_Rainbow+0x11c>)
 8003746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800374a:	601a      	str	r2, [r3, #0]
		break;
 800374c:	e048      	b.n	80037e0 <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <_RGB_Rainbow+0x110>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <_RGB_Rainbow+0xa0>
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <_RGB_Rainbow+0x110>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800375e:	d80d      	bhi.n	800377c <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 8003760:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <_RGB_Rainbow+0x114>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3b03      	subs	r3, #3
 8003766:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <_RGB_Rainbow+0x114>)
 8003768:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <_RGB_Rainbow+0x118>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3303      	adds	r3, #3
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <_RGB_Rainbow+0x118>)
 8003772:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 8003774:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <_RGB_Rainbow+0x11c>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e031      	b.n	80037e0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <_RGB_Rainbow+0x110>)
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8003784:	d313      	bcc.n	80037ae <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <_RGB_Rainbow+0x110>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	f240 2299 	movw	r2, #665	; 0x299
 800378e:	4293      	cmp	r3, r2
 8003790:	d80d      	bhi.n	80037ae <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <_RGB_Rainbow+0x114>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <_RGB_Rainbow+0x118>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3b03      	subs	r3, #3
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <_RGB_Rainbow+0x118>)
 80037a0:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <_RGB_Rainbow+0x11c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3303      	adds	r3, #3
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <_RGB_Rainbow+0x11c>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	e018      	b.n	80037e0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <_RGB_Rainbow+0x110>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	f240 229a 	movw	r2, #666	; 0x29a
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d912      	bls.n	80037e0 <_RGB_Rainbow+0x104>
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <_RGB_Rainbow+0x110>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	f240 32e6 	movw	r2, #998	; 0x3e6
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d80c      	bhi.n	80037e0 <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <_RGB_Rainbow+0x114>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3303      	adds	r3, #3
 80037cc:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <_RGB_Rainbow+0x114>)
 80037ce:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <_RGB_Rainbow+0x118>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <_RGB_Rainbow+0x11c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3b03      	subs	r3, #3
 80037dc:	4a06      	ldr	r2, [pc, #24]	; (80037f8 <_RGB_Rainbow+0x11c>)
 80037de:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 80037e0:	f7ff fea8 	bl	8003534 <_RGB_UpdateRegisters>
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200006dc 	.word	0x200006dc
 80037ec:	200006d0 	.word	0x200006d0
 80037f0:	200006d4 	.word	0x200006d4
 80037f4:	200006cc 	.word	0x200006cc
 80037f8:	200006d8 	.word	0x200006d8

080037fc <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <_RGB_BlinkRed+0x5c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b06      	cmp	r3, #6
 8003806:	d002      	beq.n	800380e <_RGB_BlinkRed+0x12>
		_state = 0;
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <_RGB_BlinkRed+0x60>)
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <_RGB_BlinkRed+0x5c>)
 8003810:	2206      	movs	r2, #6
 8003812:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <_RGB_BlinkRed+0x64>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <_RGB_BlinkRed+0x68>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <_RGB_BlinkRed+0x60>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d103      	bne.n	8003830 <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_RGB_BlinkRed+0x6c>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	e00f      	b.n	8003850 <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <_RGB_BlinkRed+0x60>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003838:	d805      	bhi.n	8003846 <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <_RGB_BlinkRed+0x6c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3302      	adds	r3, #2
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <_RGB_BlinkRed+0x6c>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e004      	b.n	8003850 <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_RGB_BlinkRed+0x6c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3b02      	subs	r3, #2
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <_RGB_BlinkRed+0x6c>)
 800384e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003850:	f7ff fe70 	bl	8003534 <_RGB_UpdateRegisters>
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200006dc 	.word	0x200006dc
 800385c:	200006d0 	.word	0x200006d0
 8003860:	200006cc 	.word	0x200006cc
 8003864:	200006d8 	.word	0x200006d8
 8003868:	200006d4 	.word	0x200006d4

0800386c <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <_RGB_BlinkGreen+0x5c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b07      	cmp	r3, #7
 8003876:	d002      	beq.n	800387e <_RGB_BlinkGreen+0x12>
		_state = 0;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <_RGB_BlinkGreen+0x60>)
 800387a:	2200      	movs	r2, #0
 800387c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <_RGB_BlinkGreen+0x5c>)
 8003880:	2207      	movs	r2, #7
 8003882:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003884:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <_RGB_BlinkGreen+0x64>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <_RGB_BlinkGreen+0x68>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <_RGB_BlinkGreen+0x60>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <_RGB_BlinkGreen+0x6c>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e00f      	b.n	80038c0 <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <_RGB_BlinkGreen+0x60>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80038a8:	d805      	bhi.n	80038b6 <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <_RGB_BlinkGreen+0x6c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3302      	adds	r3, #2
 80038b0:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <_RGB_BlinkGreen+0x6c>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e004      	b.n	80038c0 <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <_RGB_BlinkGreen+0x6c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3b02      	subs	r3, #2
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <_RGB_BlinkGreen+0x6c>)
 80038be:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80038c0:	f7ff fe38 	bl	8003534 <_RGB_UpdateRegisters>
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200006dc 	.word	0x200006dc
 80038cc:	200006d0 	.word	0x200006d0
 80038d0:	200006d4 	.word	0x200006d4
 80038d4:	200006d8 	.word	0x200006d8
 80038d8:	200006cc 	.word	0x200006cc

080038dc <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <_RGB_BlinkBlue+0x5c>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d002      	beq.n	80038ee <_RGB_BlinkBlue+0x12>
		_state = 0;
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <_RGB_BlinkBlue+0x60>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <_RGB_BlinkBlue+0x5c>)
 80038f0:	2208      	movs	r2, #8
 80038f2:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <_RGB_BlinkBlue+0x64>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <_RGB_BlinkBlue+0x68>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <_RGB_BlinkBlue+0x60>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <_RGB_BlinkBlue+0x6c>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00f      	b.n	8003930 <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <_RGB_BlinkBlue+0x60>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003918:	d805      	bhi.n	8003926 <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <_RGB_BlinkBlue+0x6c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3302      	adds	r3, #2
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <_RGB_BlinkBlue+0x6c>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e004      	b.n	8003930 <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <_RGB_BlinkBlue+0x6c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b02      	subs	r3, #2
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <_RGB_BlinkBlue+0x6c>)
 800392e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003930:	f7ff fe00 	bl	8003534 <_RGB_UpdateRegisters>
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200006dc 	.word	0x200006dc
 800393c:	200006d0 	.word	0x200006d0
 8003940:	200006d4 	.word	0x200006d4
 8003944:	200006cc 	.word	0x200006cc
 8003948:	200006d8 	.word	0x200006d8

0800394c <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <_RGB_BlinkWhite+0x84>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d002      	beq.n	800395e <_RGB_BlinkWhite+0x12>
		_state = 0;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <_RGB_BlinkWhite+0x88>)
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <_RGB_BlinkWhite+0x84>)
 8003960:	2205      	movs	r2, #5
 8003962:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <_RGB_BlinkWhite+0x88>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <_RGB_BlinkWhite+0x8c>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003972:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <_RGB_BlinkWhite+0x90>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <_RGB_BlinkWhite+0x94>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e023      	b.n	80039c8 <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <_RGB_BlinkWhite+0x88>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003988:	d80f      	bhi.n	80039aa <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <_RGB_BlinkWhite+0x8c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3302      	adds	r3, #2
 8003990:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <_RGB_BlinkWhite+0x8c>)
 8003992:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8003994:	4b11      	ldr	r3, [pc, #68]	; (80039dc <_RGB_BlinkWhite+0x90>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3302      	adds	r3, #2
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <_RGB_BlinkWhite+0x90>)
 800399c:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <_RGB_BlinkWhite+0x94>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3302      	adds	r3, #2
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <_RGB_BlinkWhite+0x94>)
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e00e      	b.n	80039c8 <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <_RGB_BlinkWhite+0x8c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b02      	subs	r3, #2
 80039b0:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <_RGB_BlinkWhite+0x8c>)
 80039b2:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <_RGB_BlinkWhite+0x90>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3b02      	subs	r3, #2
 80039ba:	4a08      	ldr	r2, [pc, #32]	; (80039dc <_RGB_BlinkWhite+0x90>)
 80039bc:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <_RGB_BlinkWhite+0x94>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b02      	subs	r3, #2
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <_RGB_BlinkWhite+0x94>)
 80039c6:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80039c8:	f7ff fdb4 	bl	8003534 <_RGB_UpdateRegisters>
}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200006dc 	.word	0x200006dc
 80039d4:	200006d0 	.word	0x200006d0
 80039d8:	200006d4 	.word	0x200006d4
 80039dc:	200006cc 	.word	0x200006cc
 80039e0:	200006d8 	.word	0x200006d8

080039e4 <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b09      	cmp	r3, #9
 80039f2:	d835      	bhi.n	8003a60 <RGB_SetMode+0x7c>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <RGB_SetMode+0x18>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2b 	.word	0x08003a2b
 8003a04:	08003a31 	.word	0x08003a31
 8003a08:	08003a37 	.word	0x08003a37
 8003a0c:	08003a3d 	.word	0x08003a3d
 8003a10:	08003a55 	.word	0x08003a55
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a49 	.word	0x08003a49
 8003a1c:	08003a4f 	.word	0x08003a4f
 8003a20:	08003a5b 	.word	0x08003a5b
	case RGB_Disabled:
		_RGB_SetBlack();
 8003a24:	f7ff fe40 	bl	80036a8 <_RGB_SetBlack>
		break;
 8003a28:	e01a      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 8003a2a:	f7ff fdcb 	bl	80035c4 <_RGB_SetWhite>
		break;
 8003a2e:	e017      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 8003a30:	f7ff fde6 	bl	8003600 <_RGB_SetRed>
		break;
 8003a34:	e014      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 8003a36:	f7ff fdff 	bl	8003638 <_RGB_SetGreen>
		break;
 8003a3a:	e011      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 8003a3c:	f7ff fe18 	bl	8003670 <_RGB_SetBlue>
		break;
 8003a40:	e00e      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 8003a42:	f7ff fedb 	bl	80037fc <_RGB_BlinkRed>
		break;
 8003a46:	e00b      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 8003a48:	f7ff ff10 	bl	800386c <_RGB_BlinkGreen>
		break;
 8003a4c:	e008      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 8003a4e:	f7ff ff45 	bl	80038dc <_RGB_BlinkBlue>
		break;
 8003a52:	e005      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 8003a54:	f7ff ff7a 	bl	800394c <_RGB_BlinkWhite>
		break;
 8003a58:	e002      	b.n	8003a60 <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 8003a5a:	f7ff fe3f 	bl	80036dc <_RGB_Rainbow>
		break;
 8003a5e:	bf00      	nop
	}
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <SD_Init>:
	/* fat32 */
	while (f_mkfs("", FM_FAT32, (DWORD)0, _work, sizeof(_work)) != FR_OK) HAL_Delay(1);
	_SD_GetDiskSpace();
}

void SD_Init(void) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	if (f_mount(&_ff, "", 1) == FR_NO_FILESYSTEM) {
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4904      	ldr	r1, [pc, #16]	; (8003a80 <SD_Init+0x18>)
 8003a70:	4804      	ldr	r0, [pc, #16]	; (8003a84 <SD_Init+0x1c>)
 8003a72:	f001 fadd 	bl	8005030 <f_mount>
		//TODO Fatal
	}

	SD_RefreshDateTime();
 8003a76:	f000 f837 	bl	8003ae8 <SD_RefreshDateTime>
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	0800c424 	.word	0x0800c424
 8003a84:	200006e4 	.word	0x200006e4

08003a88 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <_SD_ClearDateTimeRegisters+0x58>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <_SD_ClearDateTimeRegisters+0x5c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <_SD_ClearDateTimeRegisters+0x5c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <_SD_ClearDateTimeRegisters+0x5c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <_SD_ClearDateTimeRegisters+0x5c>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	70da      	strb	r2, [r3, #3]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000b28 	.word	0x20000b28
 8003ae4:	20000924 	.word	0x20000924

08003ae8 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8003aec:	f7ff ffcc 	bl	8003a88 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003af0:	2201      	movs	r2, #1
 8003af2:	4938      	ldr	r1, [pc, #224]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003af4:	4838      	ldr	r0, [pc, #224]	; (8003bd8 <SD_RefreshDateTime+0xf0>)
 8003af6:	f003 fb67 	bl	80071c8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003afa:	2201      	movs	r2, #1
 8003afc:	4937      	ldr	r1, [pc, #220]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003afe:	4836      	ldr	r0, [pc, #216]	; (8003bd8 <SD_RefreshDateTime+0xf0>)
 8003b00:	f003 fc67 	bl	80073d2 <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	3330      	adds	r3, #48	; 0x30
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b12:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 8003b14:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3330      	adds	r3, #48	; 0x30
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b24:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 8003b26:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	3330      	adds	r3, #48	; 0x30
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b34:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 8003b36:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3330      	adds	r3, #48	; 0x30
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b46:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b4a:	789b      	ldrb	r3, [r3, #2]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	3330      	adds	r3, #48	; 0x30
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b56:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 8003b58:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <SD_RefreshDateTime+0xec>)
 8003b5a:	789b      	ldrb	r3, [r3, #2]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	3330      	adds	r3, #48	; 0x30
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b68:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003b6c:	789b      	ldrb	r3, [r3, #2]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	3330      	adds	r3, #48	; 0x30
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b78:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 8003b7a:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3330      	adds	r3, #48	; 0x30
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b8a:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3330      	adds	r3, #48	; 0x30
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003b9a:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003b9e:	785b      	ldrb	r3, [r3, #1]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	3330      	adds	r3, #48	; 0x30
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003bac:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003bb0:	78db      	ldrb	r3, [r3, #3]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3330      	adds	r3, #48	; 0x30
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003bbc:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <SD_RefreshDateTime+0xf4>)
 8003bc0:	78db      	ldrb	r3, [r3, #3]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3330      	adds	r3, #48	; 0x30
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <SD_RefreshDateTime+0xf8>)
 8003bce:	715a      	strb	r2, [r3, #5]
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000b28 	.word	0x20000b28
 8003bd8:	20000e3c 	.word	0x20000e3c
 8003bdc:	20000924 	.word	0x20000924
 8003be0:	20000918 	.word	0x20000918

08003be4 <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af04      	add	r7, sp, #16
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <SD_GetDateTime+0x80>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <SD_GetDateTime+0x80>)
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <SD_GetDateTime+0x80>)
 8003bfc:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003bfe:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c02:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003c04:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c08:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003c0a:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c0e:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003c10:	9303      	str	r3, [sp, #12]
 8003c12:	9002      	str	r0, [sp, #8]
 8003c14:	9101      	str	r1, [sp, #4]
 8003c16:	9200      	str	r2, [sp, #0]
 8003c18:	462b      	mov	r3, r5
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	4912      	ldr	r1, [pc, #72]	; (8003c68 <SD_GetDateTime+0x84>)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f006 fd06 	bl	800a630 <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c26:	799b      	ldrb	r3, [r3, #6]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c2c:	79db      	ldrb	r3, [r3, #7]
 8003c2e:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c32:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c34:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c38:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c3a:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c3e:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c40:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c42:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <SD_GetDateTime+0x80>)
 8003c44:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c46:	9303      	str	r3, [sp, #12]
 8003c48:	9002      	str	r0, [sp, #8]
 8003c4a:	9101      	str	r1, [sp, #4]
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	462b      	mov	r3, r5
 8003c50:	4622      	mov	r2, r4
 8003c52:	4906      	ldr	r1, [pc, #24]	; (8003c6c <SD_GetDateTime+0x88>)
 8003c54:	6838      	ldr	r0, [r7, #0]
 8003c56:	f006 fceb 	bl	800a630 <siprintf>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bdb0      	pop	{r4, r5, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000918 	.word	0x20000918
 8003c68:	0800c428 	.word	0x0800c428
 8003c6c:	0800c438 	.word	0x0800c438

08003c70 <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 8003c7a:	f7ff ff05 	bl	8003a88 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <SD_SetDateTime+0xb8>)
 8003c92:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3302      	adds	r3, #2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b1f      	ldr	r3, [pc, #124]	; (8003d28 <SD_SetDateTime+0xb8>)
 8003caa:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3305      	adds	r3, #5
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <SD_SetDateTime+0xb8>)
 8003cc2:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <SD_SetDateTime+0xbc>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	3303      	adds	r3, #3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <SD_SetDateTime+0xbc>)
 8003cf0:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	3305      	adds	r3, #5
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <SD_SetDateTime+0xbc>)
 8003d08:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	4907      	ldr	r1, [pc, #28]	; (8003d2c <SD_SetDateTime+0xbc>)
 8003d0e:	4808      	ldr	r0, [pc, #32]	; (8003d30 <SD_SetDateTime+0xc0>)
 8003d10:	f003 f99d 	bl	800704e <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003d14:	2201      	movs	r2, #1
 8003d16:	4904      	ldr	r1, [pc, #16]	; (8003d28 <SD_SetDateTime+0xb8>)
 8003d18:	4805      	ldr	r0, [pc, #20]	; (8003d30 <SD_SetDateTime+0xc0>)
 8003d1a:	f003 fab3 	bl	8007284 <HAL_RTC_SetDate>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000924 	.word	0x20000924
 8003d2c:	20000b28 	.word	0x20000b28
 8003d30:	20000e3c 	.word	0x20000e3c

08003d34 <THS_Init>:

bool _ready;
uint8_t _readyData[5];
uint32_t _clockCounter;

void THS_Init() {
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <THS_Init+0x1c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

	_ready = true;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <THS_Init+0x20>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000d70 	.word	0x20000d70
 8003d54:	20000d6c 	.word	0x20000d6c

08003d58 <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <THS_Delay+0x2c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8003d6a:	bf00      	nop
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <THS_Delay+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d3f9      	bcc.n	8003d6c <THS_Delay+0x14>
		;
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	20000d78 	.word	0x20000d78

08003d88 <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003da6:	2301      	movs	r3, #1
 8003da8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	4619      	mov	r1, r3
 8003db4:	4803      	ldr	r0, [pc, #12]	; (8003dc4 <_THS_SetPinOutput+0x3c>)
 8003db6:	f002 f977 	bl	80060a8 <HAL_GPIO_Init>
}
 8003dba:	bf00      	nop
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40020800 	.word	0x40020800

08003dc8 <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
 8003de0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	4619      	mov	r1, r3
 8003df4:	4803      	ldr	r0, [pc, #12]	; (8003e04 <_THS_SetPinInput+0x3c>)
 8003df6:	f002 f957 	bl	80060a8 <HAL_GPIO_Init>
}
 8003dfa:	bf00      	nop
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40020800 	.word	0x40020800

08003e08 <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <_THS_InitConn+0x9c>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <_THS_InitConn+0x1c>
		return 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e03b      	b.n	8003e9c <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8003e24:	88fb      	ldrh	r3, [r7, #6]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffae 	bl	8003d88 <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4619      	mov	r1, r3
 8003e32:	481d      	ldr	r0, [pc, #116]	; (8003ea8 <_THS_InitConn+0xa0>)
 8003e34:	f002 faea 	bl	800640c <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8003e38:	2012      	movs	r0, #18
 8003e3a:	f001 ffdf 	bl	8005dfc <HAL_Delay>
	Write(1);
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	2201      	movs	r2, #1
 8003e42:	4619      	mov	r1, r3
 8003e44:	4818      	ldr	r0, [pc, #96]	; (8003ea8 <_THS_InitConn+0xa0>)
 8003e46:	f002 fae1 	bl	800640c <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 8003e4a:	2014      	movs	r0, #20
 8003e4c:	f7ff ff84 	bl	8003d58 <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ffb8 	bl	8003dc8 <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 8003e58:	2028      	movs	r0, #40	; 0x28
 8003e5a:	f7ff ff7d 	bl	8003d58 <THS_Delay>

	if (!Read()) {
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	4619      	mov	r1, r3
 8003e62:	4811      	ldr	r0, [pc, #68]	; (8003ea8 <_THS_InitConn+0xa0>)
 8003e64:	f002 faba 	bl	80063dc <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 8003e6e:	2050      	movs	r0, #80	; 0x50
 8003e70:	f7ff ff72 	bl	8003d58 <THS_Delay>
		if (!Read()) {
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	4619      	mov	r1, r3
 8003e78:	480b      	ldr	r0, [pc, #44]	; (8003ea8 <_THS_InitConn+0xa0>)
 8003e7a:	f002 faaf 	bl	80063dc <HAL_GPIO_ReadPin>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e009      	b.n	8003e9c <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 8003e88:	bf00      	nop
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <_THS_InitConn+0xa0>)
 8003e90:	f002 faa4 	bl	80063dc <HAL_GPIO_ReadPin>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d0f7      	beq.n	8003e8a <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 8003e9a:	2301      	movs	r3, #1
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000d6c 	.word	0x20000d6c
 8003ea8:	40020800 	.word	0x40020800

08003eac <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73bb      	strb	r3, [r7, #14]
 8003ebe:	e02f      	b.n	8003f20 <_THS_ReadByte+0x74>
		_clockCounter = 0;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <_THS_ReadByte+0x84>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8003ec6:	e005      	b.n	8003ed4 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <_THS_ReadByte+0x84>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2bc8      	cmp	r3, #200	; 0xc8
 8003ece:	d901      	bls.n	8003ed4 <_THS_ReadByte+0x28>
				return 255;
 8003ed0:	23ff      	movs	r3, #255	; 0xff
 8003ed2:	e029      	b.n	8003f28 <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4816      	ldr	r0, [pc, #88]	; (8003f34 <_THS_ReadByte+0x88>)
 8003eda:	f002 fa7f 	bl	80063dc <HAL_GPIO_ReadPin>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f1      	beq.n	8003ec8 <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8003ee4:	203c      	movs	r0, #60	; 0x3c
 8003ee6:	f7ff ff37 	bl	8003d58 <THS_Delay>

		byte <<= 1;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	480f      	ldr	r0, [pc, #60]	; (8003f34 <_THS_ReadByte+0x88>)
 8003ef6:	f002 fa71 	bl	80063dc <HAL_GPIO_ReadPin>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8003f08:	bf00      	nop
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4809      	ldr	r0, [pc, #36]	; (8003f34 <_THS_ReadByte+0x88>)
 8003f10:	f002 fa64 	bl	80063dc <HAL_GPIO_ReadPin>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d0f7      	beq.n	8003f0a <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8003f1a:	7bbb      	ldrb	r3, [r7, #14]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	73bb      	strb	r3, [r7, #14]
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	2b07      	cmp	r3, #7
 8003f24:	d9cc      	bls.n	8003ec0 <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000d70 	.word	0x20000d70
 8003f34:	40020800 	.word	0x40020800

08003f38 <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	460a      	mov	r2, r1
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 8003f48:	79bb      	ldrb	r3, [r7, #6]
 8003f4a:	f1a3 020a 	sub.w	r2, r3, #10
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	dc06      	bgt.n	8003f62 <_THS_CCR_Acceptable+0x2a>
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	79bb      	ldrb	r3, [r7, #6]
 8003f58:	330a      	adds	r3, #10
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	dc01      	bgt.n	8003f62 <_THS_CCR_Acceptable+0x2a>
		return 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <_THS_CCR_Acceptable+0x2c>
	return 0;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	6039      	str	r1, [r7, #0]
 8003f7a:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <THS_ReadData+0x16>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <THS_ReadData+0x18>
 8003f86:	2302      	movs	r3, #2
 8003f88:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 8003f8a:	8bfb      	ldrh	r3, [r7, #30]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff3b 	bl	8003e08 <_THS_InitConn>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <THS_ReadData+0x2c>
		return 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e091      	b.n	80040c0 <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff ff84 	bl	8003eac <_THS_ReadByte>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 8003fa8:	8bfb      	ldrh	r3, [r7, #30]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ff7e 	bl	8003eac <_THS_ReadByte>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff ff78 	bl	8003eac <_THS_ReadByte>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 8003fc0:	8bfb      	ldrh	r3, [r7, #30]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff72 	bl	8003eac <_THS_ReadByte>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 8003fcc:	8bfb      	ldrh	r3, [r7, #30]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff6c 	bl	8003eac <_THS_ReadByte>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <THS_ReadData+0x158>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 8003fde:	8bbb      	ldrh	r3, [r7, #28]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	7efb      	ldrb	r3, [r7, #27]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	b25a      	sxtb	r2, r3
 8003fea:	8b3b      	ldrh	r3, [r7, #24]
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	b25a      	sxtb	r2, r3
 8003ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	b25b      	sxtb	r3, r3
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	7dbb      	ldrb	r3, [r7, #22]
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff99 	bl	8003f38 <_THS_CCR_Acceptable>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d04f      	beq.n	80040ac <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 800400c:	8b3b      	ldrh	r3, [r7, #24]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	4313      	orrs	r3, r2
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800401c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80040cc <THS_ReadData+0x15c>
 8004020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004024:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8004028:	8bbb      	ldrh	r3, [r7, #28]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	7efb      	ldrb	r3, [r7, #27]
 800402e:	4313      	orrs	r3, r2
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004038:	eddf 6a24 	vldr	s13, [pc, #144]	; 80040cc <THS_ReadData+0x15c>
 800403c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004040:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8004044:	edd7 7a04 	vldr	s15, [r7, #16]
 8004048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d418      	bmi.n	8004084 <THS_ReadData+0x114>
 8004052:	edd7 7a04 	vldr	s15, [r7, #16]
 8004056:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80040d0 <THS_ReadData+0x160>
 800405a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800405e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004062:	dc0f      	bgt.n	8004084 <THS_ReadData+0x114>
 8004064:	edd7 7a03 	vldr	s15, [r7, #12]
 8004068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004070:	d408      	bmi.n	8004084 <THS_ReadData+0x114>
 8004072:	edd7 7a03 	vldr	s15, [r7, #12]
 8004076:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80040d4 <THS_ReadData+0x164>
 800407a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004082:	dd0a      	ble.n	800409a <THS_ReadData+0x12a>
			data[0] = 0.f;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	3304      	adds	r3, #4
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
			return 0;
 8004096:	2300      	movs	r3, #0
 8004098:	e012      	b.n	80040c0 <THS_ReadData+0x150>
		}
		data[0] = t;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	601a      	str	r2, [r3, #0]
		data[1] = r;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	3304      	adds	r3, #4
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]
		return 1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e009      	b.n	80040c0 <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	3304      	adds	r3, #4
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
	return 0;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3720      	adds	r7, #32
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000d6c 	.word	0x20000d6c
 80040cc:	43800000 	.word	0x43800000
 80040d0:	42480000 	.word	0x42480000
 80040d4:	42c80000 	.word	0x42c80000

080040d8 <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <THS_ErrorClock+0x30>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e4:	d905      	bls.n	80040f2 <THS_ErrorClock+0x1a>
		_ready = true;
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <THS_ErrorClock+0x34>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <THS_ErrorClock+0x30>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <THS_ErrorClock+0x30>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a03      	ldr	r2, [pc, #12]	; (8004108 <THS_ErrorClock+0x30>)
 80040fa:	6013      	str	r3, [r2, #0]
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000d70 	.word	0x20000d70
 800410c:	20000d6c 	.word	0x20000d6c

08004110 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0

}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <DESELECT>:

static
inline void DESELECT(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0

}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004136:	bf00      	nop
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <xmit_spi+0x30>)
 800413a:	f003 fda5 	bl	8007c88 <HAL_SPI_GetState>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d1f9      	bne.n	8004138 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8004144:	1df9      	adds	r1, r7, #7
 8004146:	f241 3388 	movw	r3, #5000	; 0x1388
 800414a:	2201      	movs	r2, #1
 800414c:	4803      	ldr	r0, [pc, #12]	; (800415c <xmit_spi+0x30>)
 800414e:	f003 fac5 	bl	80076dc <HAL_SPI_Transmit>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000e5c 	.word	0x20000e5c

08004160 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8004166:	23ff      	movs	r3, #255	; 0xff
 8004168:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800416e:	bf00      	nop
 8004170:	4809      	ldr	r0, [pc, #36]	; (8004198 <rcvr_spi+0x38>)
 8004172:	f003 fd89 	bl	8007c88 <HAL_SPI_GetState>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d1f9      	bne.n	8004170 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 800417c:	1dba      	adds	r2, r7, #6
 800417e:	1df9      	adds	r1, r7, #7
 8004180:	f241 3388 	movw	r3, #5000	; 0x1388
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2301      	movs	r3, #1
 8004188:	4803      	ldr	r0, [pc, #12]	; (8004198 <rcvr_spi+0x38>)
 800418a:	f003 fbdb 	bl	8007944 <HAL_SPI_TransmitReceive>

	return Data;
 800418e:	79bb      	ldrb	r3, [r7, #6]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000e5c 	.word	0x20000e5c

0800419c <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 80041a4:	f7ff ffdc 	bl	8004160 <rcvr_spi>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	701a      	strb	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <wait_ready+0x34>)
 80041c0:	2232      	movs	r2, #50	; 0x32
 80041c2:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 80041c4:	f7ff ffcc 	bl	8004160 <rcvr_spi>
	do
		res = rcvr_spi();
 80041c8:	f7ff ffca 	bl	8004160 <rcvr_spi>
 80041cc:	4603      	mov	r3, r0
 80041ce:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	2bff      	cmp	r3, #255	; 0xff
 80041d4:	d004      	beq.n	80041e0 <wait_ready+0x28>
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <wait_ready+0x34>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f3      	bne.n	80041c8 <wait_ready+0x10>

	return res;
 80041e0:	79fb      	ldrb	r3, [r7, #7]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	2000044a 	.word	0x2000044a

080041f0 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80041f6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80041fa:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80041fc:	f7ff ff8f 	bl	800411e <DESELECT>

	for (i = 0; i < 10; i++)
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	e005      	b.n	8004212 <power_on+0x22>
		xmit_spi(0xFF);
 8004206:	20ff      	movs	r0, #255	; 0xff
 8004208:	f7ff ff90 	bl	800412c <xmit_spi>
	for (i = 0; i < 10; i++)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	3301      	adds	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b09      	cmp	r3, #9
 8004216:	d9f6      	bls.n	8004206 <power_on+0x16>

	SELECT();
 8004218:	f7ff ff7a 	bl	8004110 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 800421c:	2340      	movs	r3, #64	; 0x40
 800421e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8004230:	2395      	movs	r3, #149	; 0x95
 8004232:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e00b      	b.n	8004252 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	f107 0210 	add.w	r2, r7, #16
 8004240:	4413      	add	r3, r2
 8004242:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ff70 	bl	800412c <xmit_spi>
	for (i = 0; i < 6; i++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b05      	cmp	r3, #5
 8004256:	d9f0      	bls.n	800423a <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8004258:	e002      	b.n	8004260 <power_on+0x70>
		Count--;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3b01      	subs	r3, #1
 800425e:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8004260:	f7ff ff7e 	bl	8004160 <rcvr_spi>
 8004264:	4603      	mov	r3, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	d002      	beq.n	8004270 <power_on+0x80>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1f4      	bne.n	800425a <power_on+0x6a>

	DESELECT();
 8004270:	f7ff ff55 	bl	800411e <DESELECT>
	xmit_spi(0XFF);
 8004274:	20ff      	movs	r0, #255	; 0xff
 8004276:	f7ff ff59 	bl	800412c <xmit_spi>

	PowerFlag = 1;
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <power_on+0x98>)
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000044c 	.word	0x2000044c

0800428c <power_off>:

static
void power_off(void) {
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <power_off+0x14>)
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2000044c 	.word	0x2000044c

080042a4 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <rcvr_datablock+0x68>)
 80042b0:	220a      	movs	r2, #10
 80042b2:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 80042b4:	f7ff ff54 	bl	8004160 <rcvr_spi>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2bff      	cmp	r3, #255	; 0xff
 80042c0:	d104      	bne.n	80042cc <rcvr_datablock+0x28>
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <rcvr_datablock+0x68>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f3      	bne.n	80042b4 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2bfe      	cmp	r3, #254	; 0xfe
 80042d0:	d001      	beq.n	80042d6 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80042d2:	2300      	movs	r3, #0
 80042d4:	e016      	b.n	8004304 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff5d 	bl	800419c <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff57 	bl	800419c <rcvr_spi_m>
	} while (btr -= 2);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	3b02      	subs	r3, #2
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ed      	bne.n	80042d6 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80042fa:	f7ff ff31 	bl	8004160 <rcvr_spi>
	rcvr_spi();
 80042fe:	f7ff ff2f 	bl	8004160 <rcvr_spi>

	return TRUE; /* Return with success */
 8004302:	2301      	movs	r3, #1
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000449 	.word	0x20000449

08004310 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8004320:	f7ff ff4a 	bl	80041b8 <wait_ready>
 8004324:	4603      	mov	r3, r0
 8004326:	2bff      	cmp	r3, #255	; 0xff
 8004328:	d001      	beq.n	800432e <xmit_datablock+0x1e>
		return FALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	e040      	b.n	80043b0 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fefb 	bl	800412c <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	2bfd      	cmp	r3, #253	; 0xfd
 800433a:	d031      	beq.n	80043a0 <xmit_datablock+0x90>
		wc = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff feef 	bl	800412c <xmit_spi>
			xmit_spi(*buff++);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fee8 	bl	800412c <xmit_spi>
		} while (--wc);
 800435c:	7bbb      	ldrb	r3, [r7, #14]
 800435e:	3b01      	subs	r3, #1
 8004360:	73bb      	strb	r3, [r7, #14]
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1eb      	bne.n	8004340 <xmit_datablock+0x30>

		rcvr_spi();
 8004368:	f7ff fefa 	bl	8004160 <rcvr_spi>
		rcvr_spi();
 800436c:	f7ff fef8 	bl	8004160 <rcvr_spi>

		while (i <= 64) {
 8004370:	e00b      	b.n	800438a <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8004372:	f7ff fef5 	bl	8004160 <rcvr_spi>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	2b05      	cmp	r3, #5
 8004382:	d006      	beq.n	8004392 <xmit_datablock+0x82>
				break;
			i++;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	3301      	adds	r3, #1
 8004388:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d9f0      	bls.n	8004372 <xmit_datablock+0x62>
 8004390:	e000      	b.n	8004394 <xmit_datablock+0x84>
				break;
 8004392:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8004394:	bf00      	nop
 8004396:	f7ff fee3 	bl	8004160 <rcvr_spi>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0fa      	beq.n	8004396 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d101      	bne.n	80043ae <xmit_datablock+0x9e>
		return TRUE;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <xmit_datablock+0xa0>
	else
		return FALSE;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80043c4:	f7ff fef8 	bl	80041b8 <wait_ready>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d001      	beq.n	80043d2 <send_cmd+0x1a>
		return 0xFF;
 80043ce:	23ff      	movs	r3, #255	; 0xff
 80043d0:	e040      	b.n	8004454 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fea9 	bl	800412c <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fea3 	bl	800412c <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fe9d 	bl	800412c <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fe97 	bl	800412c <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fe92 	bl	800412c <xmit_spi>
	n = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d101      	bne.n	8004416 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8004412:	2395      	movs	r3, #149	; 0x95
 8004414:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b48      	cmp	r3, #72	; 0x48
 800441a:	d101      	bne.n	8004420 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 800441c:	2387      	movs	r3, #135	; 0x87
 800441e:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fe82 	bl	800412c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	2b4c      	cmp	r3, #76	; 0x4c
 800442c:	d101      	bne.n	8004432 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800442e:	f7ff fe97 	bl	8004160 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8004432:	230a      	movs	r3, #10
 8004434:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8004436:	f7ff fe93 	bl	8004160 <rcvr_spi>
 800443a:	4603      	mov	r3, r0
 800443c:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800443e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004442:	2b00      	cmp	r3, #0
 8004444:	da05      	bge.n	8004452 <send_cmd+0x9a>
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3b01      	subs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f1      	bne.n	8004436 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8004452:	7bbb      	ldrb	r3, [r7, #14]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800446c:	2301      	movs	r3, #1
 800446e:	e0d5      	b.n	800461c <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <disk_initialize+0x1c8>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 800447e:	4b69      	ldr	r3, [pc, #420]	; (8004624 <disk_initialize+0x1c8>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e0ca      	b.n	800461c <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8004486:	f7ff feb3 	bl	80041f0 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800448a:	f7ff fe41 	bl	8004110 <SELECT>
	ty = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8004492:	2100      	movs	r1, #0
 8004494:	2040      	movs	r0, #64	; 0x40
 8004496:	f7ff ff8f 	bl	80043b8 <send_cmd>
 800449a:	4603      	mov	r3, r0
 800449c:	2b01      	cmp	r3, #1
 800449e:	f040 80a5 	bne.w	80045ec <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80044a2:	4b61      	ldr	r3, [pc, #388]	; (8004628 <disk_initialize+0x1cc>)
 80044a4:	2264      	movs	r2, #100	; 0x64
 80044a6:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 80044a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044ac:	2048      	movs	r0, #72	; 0x48
 80044ae:	f7ff ff83 	bl	80043b8 <send_cmd>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d158      	bne.n	800456a <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e00c      	b.n	80044d8 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 80044be:	7bfc      	ldrb	r4, [r7, #15]
 80044c0:	f7ff fe4e 	bl	8004160 <rcvr_spi>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	4423      	add	r3, r4
 80044ce:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	3301      	adds	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d9ef      	bls.n	80044be <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80044de:	7abb      	ldrb	r3, [r7, #10]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 8083 	bne.w	80045ec <disk_initialize+0x190>
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	2baa      	cmp	r3, #170	; 0xaa
 80044ea:	d17f      	bne.n	80045ec <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80044ec:	2100      	movs	r1, #0
 80044ee:	2077      	movs	r0, #119	; 0x77
 80044f0:	f7ff ff62 	bl	80043b8 <send_cmd>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d807      	bhi.n	800450a <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80044fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044fe:	2069      	movs	r0, #105	; 0x69
 8004500:	f7ff ff5a 	bl	80043b8 <send_cmd>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 800450a:	4b47      	ldr	r3, [pc, #284]	; (8004628 <disk_initialize+0x1cc>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1eb      	bne.n	80044ec <disk_initialize+0x90>
 8004514:	e000      	b.n	8004518 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8004516:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <disk_initialize+0x1cc>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d064      	beq.n	80045ec <disk_initialize+0x190>
 8004522:	2100      	movs	r1, #0
 8004524:	207a      	movs	r0, #122	; 0x7a
 8004526:	f7ff ff47 	bl	80043b8 <send_cmd>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d15d      	bne.n	80045ec <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e00c      	b.n	8004550 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8004536:	7bfc      	ldrb	r4, [r7, #15]
 8004538:	f7ff fe12 	bl	8004160 <rcvr_spi>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	4423      	add	r3, r4
 8004546:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	3301      	adds	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d9ef      	bls.n	8004536 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8004556:	7a3b      	ldrb	r3, [r7, #8]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <disk_initialize+0x108>
 8004560:	2306      	movs	r3, #6
 8004562:	e000      	b.n	8004566 <disk_initialize+0x10a>
 8004564:	2302      	movs	r3, #2
 8004566:	73bb      	strb	r3, [r7, #14]
 8004568:	e040      	b.n	80045ec <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800456a:	2100      	movs	r1, #0
 800456c:	2077      	movs	r0, #119	; 0x77
 800456e:	f7ff ff23 	bl	80043b8 <send_cmd>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d808      	bhi.n	800458a <disk_initialize+0x12e>
 8004578:	2100      	movs	r1, #0
 800457a:	2069      	movs	r0, #105	; 0x69
 800457c:	f7ff ff1c 	bl	80043b8 <send_cmd>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d801      	bhi.n	800458a <disk_initialize+0x12e>
 8004586:	2302      	movs	r3, #2
 8004588:	e000      	b.n	800458c <disk_initialize+0x130>
 800458a:	2301      	movs	r3, #1
 800458c:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 800458e:	7bbb      	ldrb	r3, [r7, #14]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d10e      	bne.n	80045b2 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8004594:	2100      	movs	r1, #0
 8004596:	2077      	movs	r0, #119	; 0x77
 8004598:	f7ff ff0e 	bl	80043b8 <send_cmd>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d80e      	bhi.n	80045c0 <disk_initialize+0x164>
 80045a2:	2100      	movs	r1, #0
 80045a4:	2069      	movs	r0, #105	; 0x69
 80045a6:	f7ff ff07 	bl	80043b8 <send_cmd>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d107      	bne.n	80045c0 <disk_initialize+0x164>
						break; /* ACMD41 */
 80045b0:	e00d      	b.n	80045ce <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 80045b2:	2100      	movs	r1, #0
 80045b4:	2041      	movs	r0, #65	; 0x41
 80045b6:	f7ff feff 	bl	80043b8 <send_cmd>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <disk_initialize+0x1cc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e1      	bne.n	800458e <disk_initialize+0x132>
 80045ca:	e000      	b.n	80045ce <disk_initialize+0x172>
						break; /* CMD1 */
 80045cc:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80045ce:	4b16      	ldr	r3, [pc, #88]	; (8004628 <disk_initialize+0x1cc>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <disk_initialize+0x18c>
 80045d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045dc:	2050      	movs	r0, #80	; 0x50
 80045de:	f7ff feeb 	bl	80043b8 <send_cmd>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <disk_initialize+0x190>
				ty = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80045ec:	4a0f      	ldr	r2, [pc, #60]	; (800462c <disk_initialize+0x1d0>)
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80045f2:	f7ff fd94 	bl	800411e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80045f6:	f7ff fdb3 	bl	8004160 <rcvr_spi>

	if (ty) /* Initialization succeded */
 80045fa:	7bbb      	ldrb	r3, [r7, #14]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8004600:	4b08      	ldr	r3, [pc, #32]	; (8004624 <disk_initialize+0x1c8>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <disk_initialize+0x1c8>)
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e001      	b.n	8004616 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8004612:	f7ff fe3b 	bl	800428c <power_off>

	return Stat;
 8004616:	4b03      	ldr	r3, [pc, #12]	; (8004624 <disk_initialize+0x1c8>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	b2db      	uxtb	r3, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}
 8004624:	20000058 	.word	0x20000058
 8004628:	20000449 	.word	0x20000449
 800462c:	2000044b 	.word	0x2000044b

08004630 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004640:	2301      	movs	r3, #1
 8004642:	e002      	b.n	800464a <disk_status+0x1a>
	return Stat;
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <disk_status+0x28>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000058 	.word	0x20000058

0800465c <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <disk_read+0x1c>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <disk_read+0x20>
		return RES_PARERR;
 8004678:	2304      	movs	r3, #4
 800467a:	e051      	b.n	8004720 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <disk_read+0xcc>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <disk_read+0x32>
		return RES_NOTRDY;
 800468a:	2303      	movs	r3, #3
 800468c:	e048      	b.n	8004720 <disk_read+0xc4>

	if (!(CardType & 4))
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <disk_read+0xd0>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	025b      	lsls	r3, r3, #9
 800469e:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80046a0:	f7ff fd36 	bl	8004110 <SELECT>

	if (count == 1) { /* Single block read */
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d111      	bne.n	80046ce <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	2051      	movs	r0, #81	; 0x51
 80046ae:	f7ff fe83 	bl	80043b8 <send_cmd>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d129      	bne.n	800470c <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 80046b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046bc:	68b8      	ldr	r0, [r7, #8]
 80046be:	f7ff fdf1 	bl	80042a4 <rcvr_datablock>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d021      	beq.n	800470c <disk_read+0xb0>
			count = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	e01e      	b.n	800470c <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	2052      	movs	r0, #82	; 0x52
 80046d2:	f7ff fe71 	bl	80043b8 <send_cmd>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d117      	bne.n	800470c <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 80046dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f7ff fddf 	bl	80042a4 <rcvr_datablock>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <disk_read+0xa6>
					break;
				buff += 512;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80046f2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ed      	bne.n	80046dc <disk_read+0x80>
 8004700:	e000      	b.n	8004704 <disk_read+0xa8>
					break;
 8004702:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8004704:	2100      	movs	r1, #0
 8004706:	204c      	movs	r0, #76	; 0x4c
 8004708:	f7ff fe56 	bl	80043b8 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 800470c:	f7ff fd07 	bl	800411e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004710:	f7ff fd26 	bl	8004160 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20000058 	.word	0x20000058
 800472c:	2000044b 	.word	0x2000044b

08004730 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <disk_write+0x1c>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <disk_write+0x20>
		return RES_PARERR;
 800474c:	2304      	movs	r3, #4
 800474e:	e06b      	b.n	8004828 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8004750:	4b37      	ldr	r3, [pc, #220]	; (8004830 <disk_write+0x100>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <disk_write+0x32>
		return RES_NOTRDY;
 800475e:	2303      	movs	r3, #3
 8004760:	e062      	b.n	8004828 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8004762:	4b33      	ldr	r3, [pc, #204]	; (8004830 <disk_write+0x100>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <disk_write+0x44>
		return RES_WRPRT;
 8004770:	2302      	movs	r3, #2
 8004772:	e059      	b.n	8004828 <disk_write+0xf8>

	if (!(CardType & 4))
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <disk_write+0x104>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8004786:	f7ff fcc3 	bl	8004110 <SELECT>

	if (count == 1) { /* Single block write */
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d110      	bne.n	80047b2 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	2058      	movs	r0, #88	; 0x58
 8004794:	f7ff fe10 	bl	80043b8 <send_cmd>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d13a      	bne.n	8004814 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800479e:	21fe      	movs	r1, #254	; 0xfe
 80047a0:	68b8      	ldr	r0, [r7, #8]
 80047a2:	f7ff fdb5 	bl	8004310 <xmit_datablock>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d033      	beq.n	8004814 <disk_write+0xe4>
			count = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	e030      	b.n	8004814 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <disk_write+0x104>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <disk_write+0x9e>
			send_cmd(CMD55, 0);
 80047be:	2100      	movs	r1, #0
 80047c0:	2077      	movs	r0, #119	; 0x77
 80047c2:	f7ff fdf9 	bl	80043b8 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	2057      	movs	r0, #87	; 0x57
 80047ca:	f7ff fdf5 	bl	80043b8 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	2059      	movs	r0, #89	; 0x59
 80047d2:	f7ff fdf1 	bl	80043b8 <send_cmd>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11b      	bne.n	8004814 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80047dc:	21fc      	movs	r1, #252	; 0xfc
 80047de:	68b8      	ldr	r0, [r7, #8]
 80047e0:	f7ff fd96 	bl	8004310 <xmit_datablock>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <disk_write+0xd0>
					break;
				buff += 512;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047f0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ee      	bne.n	80047dc <disk_write+0xac>
 80047fe:	e000      	b.n	8004802 <disk_write+0xd2>
					break;
 8004800:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8004802:	21fd      	movs	r1, #253	; 0xfd
 8004804:	2000      	movs	r0, #0
 8004806:	f7ff fd83 	bl	8004310 <xmit_datablock>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <disk_write+0xe4>
				count = 1;
 8004810:	2301      	movs	r3, #1
 8004812:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8004814:	f7ff fc83 	bl	800411e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004818:	f7ff fca2 	bl	8004160 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000058 	.word	0x20000058
 8004834:	2000044b 	.word	0x2000044b

08004838 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <disk_timerproc+0x44>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <disk_timerproc+0x1e>
		Timer1 = --n;
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	3b01      	subs	r3, #1
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <disk_timerproc+0x44>)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <disk_timerproc+0x48>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
	if (n)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <disk_timerproc+0x36>
		Timer2 = --n;
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	3b01      	subs	r3, #1
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	4a05      	ldr	r2, [pc, #20]	; (8004880 <disk_timerproc+0x48>)
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	7013      	strb	r3, [r2, #0]

}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000449 	.word	0x20000449
 8004880:	2000044a 	.word	0x2000044a

08004884 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <sdcard_systick_timerproc+0x2c>)
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	3301      	adds	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <sdcard_systick_timerproc+0x2c>)
 8004894:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <sdcard_systick_timerproc+0x2c>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b09      	cmp	r3, #9
 800489e:	d904      	bls.n	80048aa <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <sdcard_systick_timerproc+0x2c>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 80048a6:	f7ff ffc7 	bl	8004838 <disk_timerproc>
	}
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000d74 	.word	0x20000d74

080048b4 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80048c4:	89fb      	ldrh	r3, [r7, #14]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	b21a      	sxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b21b      	sxth	r3, r3
 80048d0:	4313      	orrs	r3, r2
 80048d2:	b21b      	sxth	r3, r3
 80048d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048d6:	89fb      	ldrh	r3, [r7, #14]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3303      	adds	r3, #3
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	3202      	adds	r2, #2
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	3201      	adds	r2, #1
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
	return rv;
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 800492a:	b480      	push	{r7}
 800492c:	b089      	sub	sp, #36	; 0x24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	61fa      	str	r2, [r7, #28]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	61ba      	str	r2, [r7, #24]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	1acb      	subs	r3, r1, r3
 8004956:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <mem_cmp+0x40>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0eb      	beq.n	8004942 <mem_cmp+0x18>

	return r;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3724      	adds	r7, #36	; 0x24
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	78db      	ldrb	r3, [r3, #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02c      	beq.n	80049e6 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7858      	ldrb	r0, [r3, #1]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	2301      	movs	r3, #1
 800499c:	f7ff fec8 	bl	8004730 <disk_write>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d213      	bcs.n	80049e6 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	789b      	ldrb	r3, [r3, #2]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d10f      	bne.n	80049e6 <sync_window+0x6e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	7858      	ldrb	r0, [r3, #1]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	441a      	add	r2, r3
 80049da:	2301      	movs	r3, #1
 80049dc:	f7ff fea8 	bl	8004730 <disk_write>
 80049e0:	e001      	b.n	80049e6 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d01b      	beq.n	8004a40 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff ffb5 	bl	8004978 <sync_window>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7858      	ldrb	r0, [r3, #1]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a22:	2301      	movs	r3, #1
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	f7ff fe19 	bl	800465c <disk_read>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b089      	sub	sp, #36	; 0x24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <get_ldnumber+0x22>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e02d      	b.n	8004ac8 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	61fa      	str	r2, [r7, #28]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d902      	bls.n	8004a82 <get_ldnumber+0x38>
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b3a      	cmp	r3, #58	; 0x3a
 8004a80:	d1f4      	bne.n	8004a6c <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b3a      	cmp	r3, #58	; 0x3a
 8004a86:	d11c      	bne.n	8004ac2 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b2f      	cmp	r3, #47	; 0x2f
 8004a92:	d90c      	bls.n	8004aae <get_ldnumber+0x64>
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b39      	cmp	r3, #57	; 0x39
 8004a9a:	d808      	bhi.n	8004aae <get_ldnumber+0x64>
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d103      	bne.n	8004aae <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	3b30      	subs	r3, #48	; 0x30
 8004aac:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	dc04      	bgt.n	8004abe <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	e002      	b.n	8004ac8 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3724      	adds	r7, #36	; 0x24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	70da      	strb	r2, [r3, #3]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff ff7e 	bl	80049f0 <move_window>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <check_fs+0x2a>
 8004afa:	2304      	movs	r3, #4
 8004afc:	e038      	b.n	8004b70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3330      	adds	r3, #48	; 0x30
 8004b02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fed4 	bl	80048b4 <ld_word>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <check_fs+0x48>
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e029      	b.n	8004b70 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b22:	2be9      	cmp	r3, #233	; 0xe9
 8004b24:	d009      	beq.n	8004b3a <check_fs+0x66>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b2c:	2beb      	cmp	r3, #235	; 0xeb
 8004b2e:	d004      	beq.n	8004b3a <check_fs+0x66>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b36:	2be8      	cmp	r3, #232	; 0xe8
 8004b38:	d119      	bne.n	8004b6e <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3330      	adds	r3, #48	; 0x30
 8004b3e:	3336      	adds	r3, #54	; 0x36
 8004b40:	2203      	movs	r2, #3
 8004b42:	490d      	ldr	r1, [pc, #52]	; (8004b78 <check_fs+0xa4>)
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fef0 	bl	800492a <mem_cmp>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <check_fs+0x80>
 8004b50:	2300      	movs	r3, #0
 8004b52:	e00d      	b.n	8004b70 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3330      	adds	r3, #48	; 0x30
 8004b58:	3352      	adds	r3, #82	; 0x52
 8004b5a:	2205      	movs	r2, #5
 8004b5c:	4907      	ldr	r1, [pc, #28]	; (8004b7c <check_fs+0xa8>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fee3 	bl	800492a <mem_cmp>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <check_fs+0x9a>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8004b6e:	2302      	movs	r3, #2
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	0800c458 	.word	0x0800c458
 8004b7c:	0800c45c 	.word	0x0800c45c

08004b80 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b096      	sub	sp, #88	; 0x58
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff ff58 	bl	8004a4a <get_ldnumber>
 8004b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da01      	bge.n	8004ba6 <find_volume+0x26>
 8004ba2:	230b      	movs	r3, #11
 8004ba4:	e238      	b.n	8005018 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8004ba6:	4aa8      	ldr	r2, [pc, #672]	; (8004e48 <find_volume+0x2c8>)
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <find_volume+0x3a>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	e22e      	b.n	8005018 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fd2b 	bl	8004630 <disk_status>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004be0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10c      	bne.n	8004c06 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <find_volume+0x82>
 8004bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004bfe:	230a      	movs	r3, #10
 8004c00:	e20a      	b.n	8005018 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8004c02:	2300      	movs	r3, #0
 8004c04:	e208      	b.n	8005018 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fc1f 	bl	800445c <disk_initialize>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1f1      	b.n	8005018 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <find_volume+0xca>
 8004c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004c46:	230a      	movs	r3, #10
 8004c48:	e1e6      	b.n	8005018 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004c4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c52:	f7ff ff3f 	bl	8004ad4 <check_fs>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d14b      	bne.n	8004cfc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c64:	2300      	movs	r3, #0
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40
 8004c68:	e01f      	b.n	8004caa <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004c78:	4413      	add	r3, r2
 8004c7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	3304      	adds	r3, #4
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <find_volume+0x114>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	3308      	adds	r3, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fe2a 	bl	80048e4 <ld_dword>
 8004c90:	4602      	mov	r2, r0
 8004c92:	e000      	b.n	8004c96 <find_volume+0x116>
 8004c94:	2200      	movs	r2, #0
 8004c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004c9e:	440b      	add	r3, r1
 8004ca0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8004caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d9dc      	bls.n	8004c6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <find_volume+0x140>
 8004cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004cc8:	4413      	add	r3, r2
 8004cca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004cce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <find_volume+0x162>
 8004cd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cda:	f7ff fefb 	bl	8004ad4 <check_fs>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e000      	b.n	8004ce4 <find_volume+0x164>
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d905      	bls.n	8004cfc <find_volume+0x17c>
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d9e1      	bls.n	8004cc0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d101      	bne.n	8004d08 <find_volume+0x188>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e187      	b.n	8005018 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d901      	bls.n	8004d14 <find_volume+0x194>
 8004d10:	230d      	movs	r3, #13
 8004d12:	e181      	b.n	8005018 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	3330      	adds	r3, #48	; 0x30
 8004d18:	330b      	adds	r3, #11
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fdca 	bl	80048b4 <ld_word>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d26:	d001      	beq.n	8004d2c <find_volume+0x1ac>
 8004d28:	230d      	movs	r3, #13
 8004d2a:	e175      	b.n	8005018 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	3330      	adds	r3, #48	; 0x30
 8004d30:	3316      	adds	r3, #22
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fdbe 	bl	80048b4 <ld_word>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <find_volume+0x1d0>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	3330      	adds	r3, #48	; 0x30
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fdcb 	bl	80048e4 <ld_dword>
 8004d4e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d54:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	789b      	ldrb	r3, [r3, #2]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d005      	beq.n	8004d74 <find_volume+0x1f4>
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	789b      	ldrb	r3, [r3, #2]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d001      	beq.n	8004d74 <find_volume+0x1f4>
 8004d70:	230d      	movs	r3, #13
 8004d72:	e151      	b.n	8005018 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	789b      	ldrb	r3, [r3, #2]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	895b      	ldrh	r3, [r3, #10]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <find_volume+0x228>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	895b      	ldrh	r3, [r3, #10]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <find_volume+0x22c>
 8004da8:	230d      	movs	r3, #13
 8004daa:	e135      	b.n	8005018 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	3330      	adds	r3, #48	; 0x30
 8004db0:	3311      	adds	r3, #17
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd7e 	bl	80048b4 <ld_word>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	891b      	ldrh	r3, [r3, #8]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <find_volume+0x252>
 8004dce:	230d      	movs	r3, #13
 8004dd0:	e122      	b.n	8005018 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	3330      	adds	r3, #48	; 0x30
 8004dd6:	3313      	adds	r3, #19
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fd6b 	bl	80048b4 <ld_word>
 8004dde:	4603      	mov	r3, r0
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <find_volume+0x276>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	3330      	adds	r3, #48	; 0x30
 8004dec:	3320      	adds	r3, #32
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fd78 	bl	80048e4 <ld_dword>
 8004df4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	3330      	adds	r3, #48	; 0x30
 8004dfa:	330e      	adds	r3, #14
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff fd59 	bl	80048b4 <ld_word>
 8004e02:	4603      	mov	r3, r0
 8004e04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004e06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <find_volume+0x290>
 8004e0c:	230d      	movs	r3, #13
 8004e0e:	e103      	b.n	8005018 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004e10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e14:	4413      	add	r3, r2
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	8912      	ldrh	r2, [r2, #8]
 8004e1a:	0912      	lsrs	r2, r2, #4
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	4413      	add	r3, r2
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d201      	bcs.n	8004e2e <find_volume+0x2ae>
 8004e2a:	230d      	movs	r3, #13
 8004e2c:	e0f4      	b.n	8005018 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e36:	8952      	ldrh	r2, [r2, #10]
 8004e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d103      	bne.n	8004e4c <find_volume+0x2cc>
 8004e44:	230d      	movs	r3, #13
 8004e46:	e0e7      	b.n	8005018 <find_volume+0x498>
 8004e48:	20000450 	.word	0x20000450
		fmt = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	4a72      	ldr	r2, [pc, #456]	; (8005020 <find_volume+0x4a0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d802      	bhi.n	8004e60 <find_volume+0x2e0>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d802      	bhi.n	8004e70 <find_volume+0x2f0>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d802      	bhi.n	8004e80 <find_volume+0x300>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8004e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <find_volume+0x30c>
 8004e88:	230d      	movs	r3, #13
 8004e8a:	e0c5      	b.n	8005018 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e98:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004e9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9e:	441a      	add	r2, r3
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	441a      	add	r2, r3
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004eae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d11e      	bne.n	8004ef4 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	3330      	adds	r3, #48	; 0x30
 8004eba:	332a      	adds	r3, #42	; 0x2a
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff fcf9 	bl	80048b4 <ld_word>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <find_volume+0x34c>
 8004ec8:	230d      	movs	r3, #13
 8004eca:	e0a5      	b.n	8005018 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	891b      	ldrh	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <find_volume+0x358>
 8004ed4:	230d      	movs	r3, #13
 8004ed6:	e09f      	b.n	8005018 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	3330      	adds	r3, #48	; 0x30
 8004edc:	332c      	adds	r3, #44	; 0x2c
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fd00 	bl	80048e4 <ld_dword>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef2:	e01f      	b.n	8004f34 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	891b      	ldrh	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <find_volume+0x380>
 8004efc:	230d      	movs	r3, #13
 8004efe:	e08b      	b.n	8005018 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f06:	441a      	add	r2, r3
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d103      	bne.n	8004f1c <find_volume+0x39c>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	e00a      	b.n	8004f32 <find_volume+0x3b2>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	085a      	lsrs	r2, r3, #1
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004f32:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f3e:	0a5b      	lsrs	r3, r3, #9
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d201      	bcs.n	8004f48 <find_volume+0x3c8>
 8004f44:	230d      	movs	r3, #13
 8004f46:	e067      	b.n	8005018 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	611a      	str	r2, [r3, #16]
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8004f5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d149      	bne.n	8004ffa <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	3330      	adds	r3, #48	; 0x30
 8004f6a:	3330      	adds	r3, #48	; 0x30
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fca1 	bl	80048b4 <ld_word>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d140      	bne.n	8004ffa <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f80:	f7ff fd36 	bl	80049f0 <move_window>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d137      	bne.n	8004ffa <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	3330      	adds	r3, #48	; 0x30
 8004f94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fc8b 	bl	80048b4 <ld_word>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d127      	bne.n	8004ffa <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	3330      	adds	r3, #48	; 0x30
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fc98 	bl	80048e4 <ld_dword>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <find_volume+0x4a4>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d11e      	bne.n	8004ffa <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	3330      	adds	r3, #48	; 0x30
 8004fc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fc8d 	bl	80048e4 <ld_dword>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <find_volume+0x4a8>)
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d113      	bne.n	8004ffa <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	3330      	adds	r3, #48	; 0x30
 8004fd6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fc82 	bl	80048e4 <ld_dword>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	3330      	adds	r3, #48	; 0x30
 8004fea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fc78 	bl	80048e4 <ld_dword>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005000:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <find_volume+0x4ac>)
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	3301      	adds	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <find_volume+0x4ac>)
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	4b07      	ldr	r3, [pc, #28]	; (800502c <find_volume+0x4ac>)
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3758      	adds	r7, #88	; 0x58
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	0ffffff5 	.word	0x0ffffff5
 8005024:	41615252 	.word	0x41615252
 8005028:	61417272 	.word	0x61417272
 800502c:	20000454 	.word	0x20000454

08005030 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005042:	f107 0310 	add.w	r3, r7, #16
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fcff 	bl	8004a4a <get_ldnumber>
 800504c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da01      	bge.n	8005058 <f_mount+0x28>
 8005054:	230b      	movs	r3, #11
 8005056:	e025      	b.n	80050a4 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <f_mount+0x7c>)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005060:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	490b      	ldr	r1, [pc, #44]	; (80050ac <f_mount+0x7c>)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <f_mount+0x5e>
 800508a:	2300      	movs	r3, #0
 800508c:	e00a      	b.n	80050a4 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800508e:	f107 010c 	add.w	r1, r7, #12
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	2200      	movs	r2, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fd71 	bl	8004b80 <find_volume>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3720      	adds	r7, #32
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000450 	.word	0x20000450

080050b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80050b6:	f000 fe2f 	bl	8005d18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80050ba:	f000 f853 	bl	8005164 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80050be:	f000 fabd 	bl	800563c <MX_GPIO_Init>
	MX_RTC_Init();
 80050c2:	f000 f8cf 	bl	8005264 <MX_RTC_Init>
	MX_SPI1_Init();
 80050c6:	f000 f931 	bl	800532c <MX_SPI1_Init>
	MX_TIM2_Init();
 80050ca:	f000 f965 	bl	8005398 <MX_TIM2_Init>
	MX_TIM3_Init();
 80050ce:	f000 f9ef 	bl	80054b0 <MX_TIM3_Init>
	MX_TIM4_Init();
 80050d2:	f000 fa3b 	bl	800554c <MX_TIM4_Init>
	MX_USART3_UART_Init();
 80050d6:	f000 fa87 	bl	80055e8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 80050da:	481c      	ldr	r0, [pc, #112]	; (800514c <main+0x9c>)
 80050dc:	f002 fedd 	bl	8007e9a <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80050e0:	2100      	movs	r1, #0
 80050e2:	481a      	ldr	r0, [pc, #104]	; (800514c <main+0x9c>)
 80050e4:	f002 ff32 	bl	8007f4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80050e8:	2104      	movs	r1, #4
 80050ea:	4818      	ldr	r0, [pc, #96]	; (800514c <main+0x9c>)
 80050ec:	f002 ff2e 	bl	8007f4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80050f0:	2108      	movs	r1, #8
 80050f2:	4816      	ldr	r0, [pc, #88]	; (800514c <main+0x9c>)
 80050f4:	f002 ff2a 	bl	8007f4c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 80050f8:	4815      	ldr	r0, [pc, #84]	; (8005150 <main+0xa0>)
 80050fa:	f002 fece 	bl	8007e9a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 80050fe:	4815      	ldr	r0, [pc, #84]	; (8005154 <main+0xa4>)
 8005100:	f002 fea7 	bl	8007e52 <HAL_TIM_Base_Start>

	RGB_Init();
 8005104:	f7fe f9f6 	bl	80034f4 <RGB_Init>
	LCD_Init();
 8005108:	f7fc f948 	bl	800139c <LCD_Init>
	THS_Init();
 800510c:	f7fe fe12 	bl	8003d34 <THS_Init>
	SD_Init();
 8005110:	f7fe fcaa 	bl	8003a68 <SD_Init>
	HTTP_Init();
 8005114:	f7fb fed8 	bl	8000ec8 <HTTP_Init>
	NET_Init();
 8005118:	f7fd fe9c 	bl	8002e54 <NET_Init>
	MENU_Init();
 800511c:	f7fc fe76 	bl	8001e0c <MENU_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8005120:	f7fc fa22 	bl	8001568 <LCD_ClearScreen>
	int check = 1000001;
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <main+0xa8>)
 8005126:	607b      	str	r3, [r7, #4]

	while (1) {

		MENU_HandleKeys();
 8005128:	f7fd fbc0 	bl	80028ac <MENU_HandleKeys>

		if (check++ > 720000 && State == ST_Clock) {
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <main+0xac>)
 8005134:	4293      	cmp	r3, r2
 8005136:	ddf7      	ble.n	8005128 <main+0x78>
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <main+0xb0>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1f3      	bne.n	8005128 <main+0x78>
			MENU_Clock();
 8005140:	f7fd fb76 	bl	8002830 <MENU_Clock>
			check = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	607b      	str	r3, [r7, #4]
		MENU_HandleKeys();
 8005148:	e7ee      	b.n	8005128 <main+0x78>
 800514a:	bf00      	nop
 800514c:	20000eb4 	.word	0x20000eb4
 8005150:	20000df8 	.word	0x20000df8
 8005154:	20000d78 	.word	0x20000d78
 8005158:	000f4241 	.word	0x000f4241
 800515c:	000afc80 	.word	0x000afc80
 8005160:	20000e39 	.word	0x20000e39

08005164 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b098      	sub	sp, #96	; 0x60
 8005168:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800516a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800516e:	2230      	movs	r2, #48	; 0x30
 8005170:	2100      	movs	r1, #0
 8005172:	4618      	mov	r0, r3
 8005174:	f004 fdf8 	bl	8009d68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005178:	f107 031c 	add.w	r3, r7, #28
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <SystemClock_Config+0xf4>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <SystemClock_Config+0xf4>)
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <SystemClock_Config+0xf4>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	4b29      	ldr	r3, [pc, #164]	; (800525c <SystemClock_Config+0xf8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a28      	ldr	r2, [pc, #160]	; (800525c <SystemClock_Config+0xf8>)
 80051bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <SystemClock_Config+0xf8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051d8:	2302      	movs	r3, #2
 80051da:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80051e2:	2304      	movs	r3, #4
 80051e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 80051e6:	2348      	movs	r3, #72	; 0x48
 80051e8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051ea:	2302      	movs	r3, #2
 80051ec:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80051ee:	2303      	movs	r3, #3
 80051f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80051f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 f954 	bl	80064a4 <HAL_RCC_OscConfig>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <SystemClock_Config+0xa2>
		Error_Handler();
 8005202:	f000 fb57 	bl	80058b4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005206:	230f      	movs	r3, #15
 8005208:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800520a:	2302      	movs	r3, #2
 800520c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005218:	2300      	movs	r3, #0
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	2102      	movs	r1, #2
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fbae 	bl	8006984 <HAL_RCC_ClockConfig>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <SystemClock_Config+0xce>
		Error_Handler();
 800522e:	f000 fb41 	bl	80058b4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005232:	2302      	movs	r3, #2
 8005234:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <SystemClock_Config+0xfc>)
 8005238:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fd92 	bl	8006d68 <HAL_RCCEx_PeriphCLKConfig>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <SystemClock_Config+0xea>
		Error_Handler();
 800524a:	f000 fb33 	bl	80058b4 <Error_Handler>
	}
}
 800524e:	bf00      	nop
 8005250:	3760      	adds	r7, #96	; 0x60
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	40007000 	.word	0x40007000
 8005260:	00100300 	.word	0x00100300

08005264 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	609a      	str	r2, [r3, #8]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8005278:	2300      	movs	r3, #0
 800527a:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800527c:	4b29      	ldr	r3, [pc, #164]	; (8005324 <MX_RTC_Init+0xc0>)
 800527e:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <MX_RTC_Init+0xc4>)
 8005280:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005282:	4b28      	ldr	r3, [pc, #160]	; (8005324 <MX_RTC_Init+0xc0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 8005288:	4b26      	ldr	r3, [pc, #152]	; (8005324 <MX_RTC_Init+0xc0>)
 800528a:	227d      	movs	r2, #125	; 0x7d
 800528c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 4000;
 800528e:	4b25      	ldr	r3, [pc, #148]	; (8005324 <MX_RTC_Init+0xc0>)
 8005290:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005294:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <MX_RTC_Init+0xc0>)
 8005298:	2200      	movs	r2, #0
 800529a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800529c:	4b21      	ldr	r3, [pc, #132]	; (8005324 <MX_RTC_Init+0xc0>)
 800529e:	2200      	movs	r2, #0
 80052a0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <MX_RTC_Init+0xc0>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80052a8:	481e      	ldr	r0, [pc, #120]	; (8005324 <MX_RTC_Init+0xc0>)
 80052aa:	f001 fe3f 	bl	8006f2c <HAL_RTC_Init>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <MX_RTC_Init+0x54>
		Error_Handler();
 80052b4:	f000 fafe 	bl	80058b4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80052bc:	2300      	movs	r3, #0
 80052be:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	2201      	movs	r2, #1
 80052d0:	4619      	mov	r1, r3
 80052d2:	4814      	ldr	r0, [pc, #80]	; (8005324 <MX_RTC_Init+0xc0>)
 80052d4:	f001 febb 	bl	800704e <HAL_RTC_SetTime>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <MX_RTC_Init+0x7e>
		Error_Handler();
 80052de:	f000 fae9 	bl	80058b4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80052e2:	2303      	movs	r3, #3
 80052e4:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 80052e6:	2304      	movs	r3, #4
 80052e8:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x8;
 80052ea:	2308      	movs	r3, #8
 80052ec:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 80052ee:	2320      	movs	r3, #32
 80052f0:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80052f2:	463b      	mov	r3, r7
 80052f4:	2201      	movs	r2, #1
 80052f6:	4619      	mov	r1, r3
 80052f8:	480a      	ldr	r0, [pc, #40]	; (8005324 <MX_RTC_Init+0xc0>)
 80052fa:	f001 ffc3 	bl	8007284 <HAL_RTC_SetDate>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_RTC_Init+0xa4>
		Error_Handler();
 8005304:	f000 fad6 	bl	80058b4 <Error_Handler>
	}
	/** Enable Calibrartion
	 */
	if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK) {
 8005308:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800530c:	4805      	ldr	r0, [pc, #20]	; (8005324 <MX_RTC_Init+0xc0>)
 800530e:	f002 f93f 	bl	8007590 <HAL_RTCEx_SetCalibrationOutPut>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <MX_RTC_Init+0xb8>
		Error_Handler();
 8005318:	f000 facc 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800531c:	bf00      	nop
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000e3c 	.word	0x20000e3c
 8005328:	40002800 	.word	0x40002800

0800532c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005330:	4b17      	ldr	r3, [pc, #92]	; (8005390 <MX_SPI1_Init+0x64>)
 8005332:	4a18      	ldr	r2, [pc, #96]	; (8005394 <MX_SPI1_Init+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <MX_SPI1_Init+0x64>)
 8005338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800533c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <MX_SPI1_Init+0x64>)
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <MX_SPI1_Init+0x64>)
 8005346:	2200      	movs	r2, #0
 8005348:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <MX_SPI1_Init+0x64>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <MX_SPI1_Init+0x64>)
 8005352:	2200      	movs	r2, #0
 8005354:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <MX_SPI1_Init+0x64>)
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <MX_SPI1_Init+0x64>)
 8005360:	2218      	movs	r2, #24
 8005362:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <MX_SPI1_Init+0x64>)
 8005366:	2200      	movs	r2, #0
 8005368:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <MX_SPI1_Init+0x64>)
 800536c:	2200      	movs	r2, #0
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <MX_SPI1_Init+0x64>)
 8005372:	2200      	movs	r2, #0
 8005374:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <MX_SPI1_Init+0x64>)
 8005378:	220a      	movs	r2, #10
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800537c:	4804      	ldr	r0, [pc, #16]	; (8005390 <MX_SPI1_Init+0x64>)
 800537e:	f002 f949 	bl	8007614 <HAL_SPI_Init>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <MX_SPI1_Init+0x60>
		Error_Handler();
 8005388:	f000 fa94 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20000e5c 	.word	0x20000e5c
 8005394:	40013000 	.word	0x40013000

08005398 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b08e      	sub	sp, #56	; 0x38
 800539c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800539e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80053ac:	f107 0320 	add.w	r3, r7, #32
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
 80053c4:	615a      	str	r2, [r3, #20]
 80053c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80053c8:	4b38      	ldr	r3, [pc, #224]	; (80054ac <MX_TIM2_Init+0x114>)
 80053ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <MX_TIM2_Init+0x114>)
 80053d2:	2247      	movs	r2, #71	; 0x47
 80053d4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053d6:	4b35      	ldr	r3, [pc, #212]	; (80054ac <MX_TIM2_Init+0x114>)
 80053d8:	2200      	movs	r2, #0
 80053da:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 80053dc:	4b33      	ldr	r3, [pc, #204]	; (80054ac <MX_TIM2_Init+0x114>)
 80053de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053e2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <MX_TIM2_Init+0x114>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <MX_TIM2_Init+0x114>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80053f0:	482e      	ldr	r0, [pc, #184]	; (80054ac <MX_TIM2_Init+0x114>)
 80053f2:	f002 fd03 	bl	8007dfc <HAL_TIM_Base_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <MX_TIM2_Init+0x68>
		Error_Handler();
 80053fc:	f000 fa5a 	bl	80058b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800540a:	4619      	mov	r1, r3
 800540c:	4827      	ldr	r0, [pc, #156]	; (80054ac <MX_TIM2_Init+0x114>)
 800540e:	f002 ffa9 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_TIM2_Init+0x84>
		Error_Handler();
 8005418:	f000 fa4c 	bl	80058b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800541c:	4823      	ldr	r0, [pc, #140]	; (80054ac <MX_TIM2_Init+0x114>)
 800541e:	f002 fd60 	bl	8007ee2 <HAL_TIM_PWM_Init>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <MX_TIM2_Init+0x94>
		Error_Handler();
 8005428:	f000 fa44 	bl	80058b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800542c:	2300      	movs	r3, #0
 800542e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005434:	f107 0320 	add.w	r3, r7, #32
 8005438:	4619      	mov	r1, r3
 800543a:	481c      	ldr	r0, [pc, #112]	; (80054ac <MX_TIM2_Init+0x114>)
 800543c:	f003 fb82 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8005446:	f000 fa35 	bl	80058b4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800544a:	2360      	movs	r3, #96	; 0x60
 800544c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	2200      	movs	r2, #0
 800545e:	4619      	mov	r1, r3
 8005460:	4812      	ldr	r0, [pc, #72]	; (80054ac <MX_TIM2_Init+0x114>)
 8005462:	f002 feb9 	bl	80081d8 <HAL_TIM_PWM_ConfigChannel>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 800546c:	f000 fa22 	bl	80058b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	2204      	movs	r2, #4
 8005474:	4619      	mov	r1, r3
 8005476:	480d      	ldr	r0, [pc, #52]	; (80054ac <MX_TIM2_Init+0x114>)
 8005478:	f002 feae 	bl	80081d8 <HAL_TIM_PWM_ConfigChannel>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8005482:	f000 fa17 	bl	80058b4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	2208      	movs	r2, #8
 800548a:	4619      	mov	r1, r3
 800548c:	4807      	ldr	r0, [pc, #28]	; (80054ac <MX_TIM2_Init+0x114>)
 800548e:	f002 fea3 	bl	80081d8 <HAL_TIM_PWM_ConfigChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8005498:	f000 fa0c 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800549c:	4803      	ldr	r0, [pc, #12]	; (80054ac <MX_TIM2_Init+0x114>)
 800549e:	f000 faf1 	bl	8005a84 <HAL_TIM_MspPostInit>

}
 80054a2:	bf00      	nop
 80054a4:	3738      	adds	r7, #56	; 0x38
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000eb4 	.word	0x20000eb4

080054b0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80054b6:	f107 0308 	add.w	r3, r7, #8
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80054c4:	463b      	mov	r3, r7
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <MX_TIM3_Init+0x94>)
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <MX_TIM3_Init+0x98>)
 80054d0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <MX_TIM3_Init+0x94>)
 80054d4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80054d8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <MX_TIM3_Init+0x94>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <MX_TIM3_Init+0x94>)
 80054e2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80054e6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054e8:	4b16      	ldr	r3, [pc, #88]	; (8005544 <MX_TIM3_Init+0x94>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <MX_TIM3_Init+0x94>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80054f4:	4813      	ldr	r0, [pc, #76]	; (8005544 <MX_TIM3_Init+0x94>)
 80054f6:	f002 fc81 	bl	8007dfc <HAL_TIM_Base_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <MX_TIM3_Init+0x54>
		Error_Handler();
 8005500:	f000 f9d8 	bl	80058b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005508:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	4619      	mov	r1, r3
 8005510:	480c      	ldr	r0, [pc, #48]	; (8005544 <MX_TIM3_Init+0x94>)
 8005512:	f002 ff27 	bl	8008364 <HAL_TIM_ConfigClockSource>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <MX_TIM3_Init+0x70>
		Error_Handler();
 800551c:	f000 f9ca 	bl	80058b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005524:	2300      	movs	r3, #0
 8005526:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8005528:	463b      	mov	r3, r7
 800552a:	4619      	mov	r1, r3
 800552c:	4805      	ldr	r0, [pc, #20]	; (8005544 <MX_TIM3_Init+0x94>)
 800552e:	f003 fb09 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8005538:	f000 f9bc 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000df8 	.word	0x20000df8
 8005548:	40000400 	.word	0x40000400

0800554c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005560:	463b      	mov	r3, r7
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <MX_TIM4_Init+0x94>)
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <MX_TIM4_Init+0x98>)
 800556c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <MX_TIM4_Init+0x94>)
 8005570:	2247      	movs	r2, #71	; 0x47
 8005572:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <MX_TIM4_Init+0x94>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <MX_TIM4_Init+0x94>)
 800557c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005580:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005582:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <MX_TIM4_Init+0x94>)
 8005584:	2200      	movs	r2, #0
 8005586:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <MX_TIM4_Init+0x94>)
 800558a:	2200      	movs	r2, #0
 800558c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800558e:	4814      	ldr	r0, [pc, #80]	; (80055e0 <MX_TIM4_Init+0x94>)
 8005590:	f002 fc34 	bl	8007dfc <HAL_TIM_Base_Init>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <MX_TIM4_Init+0x52>
		Error_Handler();
 800559a:	f000 f98b 	bl	80058b4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800559e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80055a4:	f107 0308 	add.w	r3, r7, #8
 80055a8:	4619      	mov	r1, r3
 80055aa:	480d      	ldr	r0, [pc, #52]	; (80055e0 <MX_TIM4_Init+0x94>)
 80055ac:	f002 feda 	bl	8008364 <HAL_TIM_ConfigClockSource>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <MX_TIM4_Init+0x6e>
		Error_Handler();
 80055b6:	f000 f97d 	bl	80058b4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80055c2:	463b      	mov	r3, r7
 80055c4:	4619      	mov	r1, r3
 80055c6:	4806      	ldr	r0, [pc, #24]	; (80055e0 <MX_TIM4_Init+0x94>)
 80055c8:	f003 fabc 	bl	8008b44 <HAL_TIMEx_MasterConfigSynchronization>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80055d2:	f000 f96f 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000d78 	.word	0x20000d78
 80055e4:	40000800 	.word	0x40000800

080055e8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80055ec:	4b11      	ldr	r3, [pc, #68]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 80055ee:	4a12      	ldr	r2, [pc, #72]	; (8005638 <MX_USART3_UART_Init+0x50>)
 80055f0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 80055f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055f8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 8005602:	2200      	movs	r2, #0
 8005604:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 800560e:	220c      	movs	r2, #12
 8005610:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 8005614:	2200      	movs	r2, #0
 8005616:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 800561a:	2200      	movs	r2, #0
 800561c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800561e:	4805      	ldr	r0, [pc, #20]	; (8005634 <MX_USART3_UART_Init+0x4c>)
 8005620:	f003 fb20 	bl	8008c64 <HAL_UART_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800562a:	f000 f943 	bl	80058b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000db8 	.word	0x20000db8
 8005638:	40004800 	.word	0x40004800

0800563c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005642:	f107 031c 	add.w	r3, r7, #28
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	60da      	str	r2, [r3, #12]
 8005650:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	4a66      	ldr	r2, [pc, #408]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 800565c:	f043 0310 	orr.w	r3, r3, #16
 8005660:	6313      	str	r3, [r2, #48]	; 0x30
 8005662:	4b64      	ldr	r3, [pc, #400]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	4b60      	ldr	r3, [pc, #384]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	4a5f      	ldr	r2, [pc, #380]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6313      	str	r3, [r2, #48]	; 0x30
 800567e:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	4b59      	ldr	r3, [pc, #356]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	4a58      	ldr	r2, [pc, #352]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	6313      	str	r3, [r2, #48]	; 0x30
 800569a:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	4a51      	ldr	r2, [pc, #324]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6313      	str	r3, [r2, #48]	; 0x30
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	4a4a      	ldr	r2, [pc, #296]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	4b44      	ldr	r3, [pc, #272]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	4a43      	ldr	r2, [pc, #268]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <MX_GPIO_Init+0x1b8>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80056fa:	2200      	movs	r2, #0
 80056fc:	217f      	movs	r1, #127	; 0x7f
 80056fe:	483e      	ldr	r0, [pc, #248]	; (80057f8 <MX_GPIO_Init+0x1bc>)
 8005700:	f000 fe84 	bl	800640c <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 8005704:	2200      	movs	r2, #0
 8005706:	f248 0103 	movw	r1, #32771	; 0x8003
 800570a:	483c      	ldr	r0, [pc, #240]	; (80057fc <MX_GPIO_Init+0x1c0>)
 800570c:	f000 fe7e 	bl	800640c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8005710:	2200      	movs	r2, #0
 8005712:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005716:	483a      	ldr	r0, [pc, #232]	; (8005800 <MX_GPIO_Init+0x1c4>)
 8005718:	f000 fe78 	bl	800640c <HAL_GPIO_WritePin>
			STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 800571c:	237f      	movs	r3, #127	; 0x7f
 800571e:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005720:	2301      	movs	r3, #1
 8005722:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005724:	2302      	movs	r3, #2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	2300      	movs	r3, #0
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	4619      	mov	r1, r3
 8005732:	4831      	ldr	r0, [pc, #196]	; (80057f8 <MX_GPIO_Init+0x1bc>)
 8005734:	f000 fcb8 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8005738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800573e:	2301      	movs	r3, #1
 8005740:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005742:	2302      	movs	r3, #2
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005746:	2300      	movs	r3, #0
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 800574a:	f107 031c 	add.w	r3, r7, #28
 800574e:	4619      	mov	r1, r3
 8005750:	482a      	ldr	r0, [pc, #168]	; (80057fc <MX_GPIO_Init+0x1c0>)
 8005752:	f000 fca9 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 8005756:	2303      	movs	r3, #3
 8005758:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800575a:	2301      	movs	r3, #1
 800575c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800575e:	2301      	movs	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	2300      	movs	r3, #0
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005766:	f107 031c 	add.w	r3, r7, #28
 800576a:	4619      	mov	r1, r3
 800576c:	4823      	ldr	r0, [pc, #140]	; (80057fc <MX_GPIO_Init+0x1c0>)
 800576e:	f000 fc9b 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 8005772:	2301      	movs	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <MX_GPIO_Init+0x1c8>)
 8005778:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800577a:	2302      	movs	r3, #2
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 800577e:	f107 031c 	add.w	r3, r7, #28
 8005782:	4619      	mov	r1, r3
 8005784:	4820      	ldr	r0, [pc, #128]	; (8005808 <MX_GPIO_Init+0x1cc>)
 8005786:	f000 fc8f 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MENU_Btn1_Pin */
	GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005792:	2301      	movs	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 8005796:	f107 031c 	add.w	r3, r7, #28
 800579a:	4619      	mov	r1, r3
 800579c:	4816      	ldr	r0, [pc, #88]	; (80057f8 <MX_GPIO_Init+0x1bc>)
 800579e:	f000 fc83 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
	GPIO_InitStruct.Pin = MENU_Btn2_Pin | MENU_Btn3_Pin | MENU_Btn4_Pin;
 80057a2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80057a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80057ac:	2302      	movs	r3, #2
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057b0:	f107 031c 	add.w	r3, r7, #28
 80057b4:	4619      	mov	r1, r3
 80057b6:	4810      	ldr	r0, [pc, #64]	; (80057f8 <MX_GPIO_Init+0x1bc>)
 80057b8:	f000 fc76 	bl	80060a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 80057bc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80057c0:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057c2:	2301      	movs	r3, #1
 80057c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ca:	2300      	movs	r3, #0
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057ce:	f107 031c 	add.w	r3, r7, #28
 80057d2:	4619      	mov	r1, r3
 80057d4:	480a      	ldr	r0, [pc, #40]	; (8005800 <MX_GPIO_Init+0x1c4>)
 80057d6:	f000 fc67 	bl	80060a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80057da:	2200      	movs	r2, #0
 80057dc:	2101      	movs	r1, #1
 80057de:	2006      	movs	r0, #6
 80057e0:	f000 fc09 	bl	8005ff6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80057e4:	2006      	movs	r0, #6
 80057e6:	f000 fc22 	bl	800602e <HAL_NVIC_EnableIRQ>

}
 80057ea:	bf00      	nop
 80057ec:	3730      	adds	r7, #48	; 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40020800 	.word	0x40020800
 8005800:	40020c00 	.word	0x40020c00
 8005804:	10110000 	.word	0x10110000
 8005808:	40020000 	.word	0x40020000

0800580c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581c:	d107      	bne.n	800582e <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe f8de 	bl	80039e4 <RGB_SetMode>
		THS_ErrorClock();
 8005828:	f7fe fc56 	bl	80040d8 <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
	}
}
 800582c:	e00a      	b.n	8005844 <HAL_TIM_PeriodElapsedCallback+0x38>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a07      	ldr	r2, [pc, #28]	; (8005850 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d105      	bne.n	8005844 <HAL_TIM_PeriodElapsedCallback+0x38>
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_TIM_PeriodElapsedCallback+0x38>
		LCD_BackgroundOff();
 8005840:	f7fb fe86 	bl	8001550 <LCD_BackgroundOff>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000456 	.word	0x20000456
 8005850:	40000400 	.word	0x40000400
 8005854:	20000e39 	.word	0x20000e39

08005858 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d113      	bne.n	8005890 <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 8005868:	2101      	movs	r1, #1
 800586a:	480b      	ldr	r0, [pc, #44]	; (8005898 <HAL_GPIO_EXTI_Callback+0x40>)
 800586c:	f000 fdb6 	bl	80063dc <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10c      	bne.n	8005890 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9)
 8005876:	4b09      	ldr	r3, [pc, #36]	; (800589c <HAL_GPIO_EXTI_Callback+0x44>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	b2da      	uxtb	r2, r3
 800587e:	4b07      	ldr	r3, [pc, #28]	; (800589c <HAL_GPIO_EXTI_Callback+0x44>)
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_GPIO_EXTI_Callback+0x44>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b09      	cmp	r3, #9
 8005888:	d902      	bls.n	8005890 <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_GPIO_EXTI_Callback+0x44>)
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40020000 	.word	0x40020000
 800589c:	20000456 	.word	0x20000456

080058a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	NET_HandleUART_IT();
 80058a8:	f7fd fda8 	bl	80033fc <NET_HandleUART_IT>
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <HAL_MspInit+0x4c>)
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <HAL_MspInit+0x4c>)
 80058d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d8:	6453      	str	r3, [r2, #68]	; 0x44
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_MspInit+0x4c>)
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <HAL_MspInit+0x4c>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	4a08      	ldr	r2, [pc, #32]	; (8005910 <HAL_MspInit+0x4c>)
 80058f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f4:	6413      	str	r3, [r2, #64]	; 0x40
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_MspInit+0x4c>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a05      	ldr	r2, [pc, #20]	; (8005938 <HAL_RTC_MspInit+0x24>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d102      	bne.n	800592c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RTC_MspInit+0x28>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40002800 	.word	0x40002800
 800593c:	42470e3c 	.word	0x42470e3c

08005940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_SPI_MspInit+0x84>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d12b      	bne.n	80059ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 800596c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005970:	6453      	str	r3, [r2, #68]	; 0x44
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	4b11      	ldr	r3, [pc, #68]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	6313      	str	r3, [r2, #48]	; 0x30
 800598e:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <HAL_SPI_MspInit+0x88>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800599a:	2338      	movs	r3, #56	; 0x38
 800599c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599e:	2302      	movs	r3, #2
 80059a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a6:	2303      	movs	r3, #3
 80059a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059aa:	2305      	movs	r3, #5
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	4619      	mov	r1, r3
 80059b4:	4805      	ldr	r0, [pc, #20]	; (80059cc <HAL_SPI_MspInit+0x8c>)
 80059b6:	f000 fb77 	bl	80060a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80059ba:	bf00      	nop
 80059bc:	3728      	adds	r7, #40	; 0x28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40013000 	.word	0x40013000
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40020400 	.word	0x40020400

080059d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d116      	bne.n	8005a10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a23      	ldr	r2, [pc, #140]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6413      	str	r3, [r2, #64]	; 0x40
 80059f2:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80059fe:	2200      	movs	r2, #0
 8005a00:	2102      	movs	r1, #2
 8005a02:	201c      	movs	r0, #28
 8005a04:	f000 faf7 	bl	8005ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005a08:	201c      	movs	r0, #28
 8005a0a:	f000 fb10 	bl	800602e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005a0e:	e02e      	b.n	8005a6e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_TIM_Base_MspInit+0xac>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d116      	bne.n	8005a48 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a24:	f043 0302 	orr.w	r3, r3, #2
 8005a28:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2103      	movs	r1, #3
 8005a3a:	201d      	movs	r0, #29
 8005a3c:	f000 fadb 	bl	8005ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a40:	201d      	movs	r0, #29
 8005a42:	f000 faf4 	bl	800602e <HAL_NVIC_EnableIRQ>
}
 8005a46:	e012      	b.n	8005a6e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <HAL_TIM_Base_MspInit+0xb0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10d      	bne.n	8005a6e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a5c:	f043 0304 	orr.w	r3, r3, #4
 8005a60:	6413      	str	r3, [r2, #64]	; 0x40
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_TIM_Base_MspInit+0xa8>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	bf00      	nop
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800

08005a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8c:	f107 030c 	add.w	r3, r7, #12
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa4:	d11d      	bne.n	8005ae2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	4b10      	ldr	r3, [pc, #64]	; (8005aec <HAL_TIM_MspPostInit+0x68>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <HAL_TIM_MspPostInit+0x68>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <HAL_TIM_MspPostInit+0x68>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 8005ac2:	2326      	movs	r3, #38	; 0x26
 8005ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	4619      	mov	r1, r3
 8005adc:	4804      	ldr	r0, [pc, #16]	; (8005af0 <HAL_TIM_MspPostInit+0x6c>)
 8005ade:	f000 fae3 	bl	80060a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005ae2:	bf00      	nop
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	40020000 	.word	0x40020000

08005af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_UART_MspInit+0x94>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d134      	bne.n	8005b80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b3c:	f043 0304 	orr.w	r3, r3, #4
 8005b40:	6313      	str	r3, [r2, #48]	; 0x30
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <HAL_UART_MspInit+0x98>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 8005b4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b54:	2302      	movs	r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b60:	2307      	movs	r3, #7
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b64:	f107 0314 	add.w	r3, r7, #20
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4809      	ldr	r0, [pc, #36]	; (8005b90 <HAL_UART_MspInit+0x9c>)
 8005b6c:	f000 fa9c 	bl	80060a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2101      	movs	r1, #1
 8005b74:	2027      	movs	r0, #39	; 0x27
 8005b76:	f000 fa3e 	bl	8005ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005b7a:	2027      	movs	r0, #39	; 0x27
 8005b7c:	f000 fa57 	bl	800602e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005b80:	bf00      	nop
 8005b82:	3728      	adds	r7, #40	; 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40004800 	.word	0x40004800
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40020800 	.word	0x40020800

08005b94 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8005ba2:	b480      	push	{r7}
 8005ba4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8005ba6:	e7fe      	b.n	8005ba6 <HardFault_Handler+0x4>

08005ba8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8005bac:	e7fe      	b.n	8005bac <MemManage_Handler+0x4>

08005bae <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8005bb2:	e7fe      	b.n	8005bb2 <BusFault_Handler+0x4>

08005bb4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8005bb8:	e7fe      	b.n	8005bb8 <UsageFault_Handler+0x4>

08005bba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bcc:	bf00      	nop
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8005be8:	f7fe fe4c 	bl	8004884 <sdcard_systick_timerproc>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8005bec:	f000 f8e6 	bl	8005dbc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	f000 fc3b 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8005bfe:	bf00      	nop
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <TIM2_IRQHandler+0x10>)
 8005c0a:	f002 f9dd 	bl	8007fc8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000eb4 	.word	0x20000eb4

08005c18 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <TIM3_IRQHandler+0x10>)
 8005c1e:	f002 f9d3 	bl	8007fc8 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000df8 	.word	0x20000df8

08005c2c <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <USART3_IRQHandler+0x10>)
 8005c32:	f003 fa51 	bl	80090d8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000db8 	.word	0x20000db8

08005c40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <_sbrk+0x50>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <_sbrk+0x16>
		heap_end = &end;
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <_sbrk+0x50>)
 8005c52:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <_sbrk+0x54>)
 8005c54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <_sbrk+0x50>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <_sbrk+0x50>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	466a      	mov	r2, sp
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d907      	bls.n	8005c7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005c6a:	f004 f853 	bl	8009d14 <__errno>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	230c      	movs	r3, #12
 8005c72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
 8005c78:	e006      	b.n	8005c88 <_sbrk+0x48>
	}

	heap_end += incr;
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <_sbrk+0x50>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	4a03      	ldr	r2, [pc, #12]	; (8005c90 <_sbrk+0x50>)
 8005c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000458 	.word	0x20000458
 8005c94:	20000f00 	.word	0x20000f00

08005c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <SystemInit+0x28>)
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <SystemInit+0x28>)
 8005ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <SystemInit+0x28>)
 8005cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cca:	e003      	b.n	8005cd4 <LoopCopyDataInit>

08005ccc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005cd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cd2:	3104      	adds	r1, #4

08005cd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005cd4:	480b      	ldr	r0, [pc, #44]	; (8005d04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cdc:	d3f6      	bcc.n	8005ccc <CopyDataInit>
  ldr  r2, =_sbss
 8005cde:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ce0:	e002      	b.n	8005ce8 <LoopFillZerobss>

08005ce2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ce2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005ce4:	f842 3b04 	str.w	r3, [r2], #4

08005ce8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005cea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005cec:	d3f9      	bcc.n	8005ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005cee:	f7ff ffd3 	bl	8005c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cf2:	f004 f815 	bl	8009d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cf6:	f7ff f9db 	bl	80050b0 <main>
  bx  lr    
 8005cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005cfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005d00:	0800c720 	.word	0x0800c720
  ldr  r0, =_sdata
 8005d04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d08:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8005d0c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8005d10:	20000efc 	.word	0x20000efc

08005d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d14:	e7fe      	b.n	8005d14 <ADC_IRQHandler>
	...

08005d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <HAL_Init+0x40>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <HAL_Init+0x40>)
 8005d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <HAL_Init+0x40>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <HAL_Init+0x40>)
 8005d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d34:	4b08      	ldr	r3, [pc, #32]	; (8005d58 <HAL_Init+0x40>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <HAL_Init+0x40>)
 8005d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d40:	2003      	movs	r0, #3
 8005d42:	f000 f94d 	bl	8005fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d46:	2000      	movs	r0, #0
 8005d48:	f000 f808 	bl	8005d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d4c:	f7ff fdba 	bl	80058c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023c00 	.word	0x40023c00

08005d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d64:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <HAL_InitTick+0x54>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <HAL_InitTick+0x58>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f965 	bl	800604a <HAL_SYSTICK_Config>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e00e      	b.n	8005da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d80a      	bhi.n	8005da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d90:	2200      	movs	r2, #0
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	f000 f92d 	bl	8005ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d9c:	4a06      	ldr	r2, [pc, #24]	; (8005db8 <HAL_InitTick+0x5c>)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e000      	b.n	8005da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	2000005c 	.word	0x2000005c
 8005db4:	20000064 	.word	0x20000064
 8005db8:	20000060 	.word	0x20000060

08005dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_IncTick+0x20>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_IncTick+0x24>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4413      	add	r3, r2
 8005dcc:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <HAL_IncTick+0x24>)
 8005dce:	6013      	str	r3, [r2, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000064 	.word	0x20000064
 8005de0:	20000ef4 	.word	0x20000ef4

08005de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return uwTick;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <HAL_GetTick+0x14>)
 8005dea:	681b      	ldr	r3, [r3, #0]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000ef4 	.word	0x20000ef4

08005dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e04:	f7ff ffee 	bl	8005de4 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d005      	beq.n	8005e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e16:	4b09      	ldr	r3, [pc, #36]	; (8005e3c <HAL_Delay+0x40>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e22:	bf00      	nop
 8005e24:	f7ff ffde 	bl	8005de4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d8f7      	bhi.n	8005e24 <HAL_Delay+0x28>
  {
  }
}
 8005e34:	bf00      	nop
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000064 	.word	0x20000064

08005e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e72:	4a04      	ldr	r2, [pc, #16]	; (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	60d3      	str	r3, [r2, #12]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000ed00 	.word	0xe000ed00

08005e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 0307 	and.w	r3, r3, #7
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	db0b      	blt.n	8005ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	4907      	ldr	r1, [pc, #28]	; (8005edc <__NVIC_EnableIRQ+0x38>)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db0a      	blt.n	8005f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	490c      	ldr	r1, [pc, #48]	; (8005f2c <__NVIC_SetPriority+0x4c>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f08:	e00a      	b.n	8005f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4908      	ldr	r1, [pc, #32]	; (8005f30 <__NVIC_SetPriority+0x50>)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	3b04      	subs	r3, #4
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	761a      	strb	r2, [r3, #24]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b089      	sub	sp, #36	; 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f1c3 0307 	rsb	r3, r3, #7
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	bf28      	it	cs
 8005f52:	2304      	movcs	r3, #4
 8005f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d902      	bls.n	8005f64 <NVIC_EncodePriority+0x30>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3b03      	subs	r3, #3
 8005f62:	e000      	b.n	8005f66 <NVIC_EncodePriority+0x32>
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	401a      	ands	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	43d9      	mvns	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f8c:	4313      	orrs	r3, r2
         );
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	; 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fac:	d301      	bcc.n	8005fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e00f      	b.n	8005fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <SysTick_Config+0x40>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fba:	210f      	movs	r1, #15
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	f7ff ff8e 	bl	8005ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <SysTick_Config+0x40>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fca:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <SysTick_Config+0x40>)
 8005fcc:	2207      	movs	r2, #7
 8005fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	e000e010 	.word	0xe000e010

08005fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ff29 	bl	8005e40 <__NVIC_SetPriorityGrouping>
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006008:	f7ff ff3e 	bl	8005e88 <__NVIC_GetPriorityGrouping>
 800600c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	6978      	ldr	r0, [r7, #20]
 8006014:	f7ff ff8e 	bl	8005f34 <NVIC_EncodePriority>
 8006018:	4602      	mov	r2, r0
 800601a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ff5d 	bl	8005ee0 <__NVIC_SetPriority>
}
 8006026:	bf00      	nop
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	4603      	mov	r3, r0
 8006036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff ff31 	bl	8005ea4 <__NVIC_EnableIRQ>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ffa2 	bl	8005f9c <SysTick_Config>
 8006058:	4603      	mov	r3, r0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d004      	beq.n	8006080 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e00c      	b.n	800609a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2205      	movs	r2, #5
 8006084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b089      	sub	sp, #36	; 0x24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	e16b      	b.n	800639c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060c4:	2201      	movs	r2, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4013      	ands	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	429a      	cmp	r2, r3
 80060de:	f040 815a 	bne.w	8006396 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d00b      	beq.n	8006102 <HAL_GPIO_Init+0x5a>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d007      	beq.n	8006102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060f6:	2b11      	cmp	r3, #17
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b12      	cmp	r3, #18
 8006100:	d130      	bne.n	8006164 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	2203      	movs	r2, #3
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006138:	2201      	movs	r2, #1
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 0201 	and.w	r2, r3, #1
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4313      	orrs	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	2203      	movs	r2, #3
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4313      	orrs	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d003      	beq.n	80061a4 <HAL_GPIO_Init+0xfc>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b12      	cmp	r3, #18
 80061a2:	d123      	bne.n	80061ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	08da      	lsrs	r2, r3, #3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3208      	adds	r2, #8
 80061ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	220f      	movs	r2, #15
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	08da      	lsrs	r2, r3, #3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3208      	adds	r2, #8
 80061e6:	69b9      	ldr	r1, [r7, #24]
 80061e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	2203      	movs	r2, #3
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0203 	and.w	r2, r3, #3
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80b4 	beq.w	8006396 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	4b5f      	ldr	r3, [pc, #380]	; (80063b0 <HAL_GPIO_Init+0x308>)
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	4a5e      	ldr	r2, [pc, #376]	; (80063b0 <HAL_GPIO_Init+0x308>)
 8006238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800623c:	6453      	str	r3, [r2, #68]	; 0x44
 800623e:	4b5c      	ldr	r3, [pc, #368]	; (80063b0 <HAL_GPIO_Init+0x308>)
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800624a:	4a5a      	ldr	r2, [pc, #360]	; (80063b4 <HAL_GPIO_Init+0x30c>)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	089b      	lsrs	r3, r3, #2
 8006250:	3302      	adds	r3, #2
 8006252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	220f      	movs	r2, #15
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a51      	ldr	r2, [pc, #324]	; (80063b8 <HAL_GPIO_Init+0x310>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <HAL_GPIO_Init+0x226>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a50      	ldr	r2, [pc, #320]	; (80063bc <HAL_GPIO_Init+0x314>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d025      	beq.n	80062ca <HAL_GPIO_Init+0x222>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a4f      	ldr	r2, [pc, #316]	; (80063c0 <HAL_GPIO_Init+0x318>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01f      	beq.n	80062c6 <HAL_GPIO_Init+0x21e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a4e      	ldr	r2, [pc, #312]	; (80063c4 <HAL_GPIO_Init+0x31c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d019      	beq.n	80062c2 <HAL_GPIO_Init+0x21a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a4d      	ldr	r2, [pc, #308]	; (80063c8 <HAL_GPIO_Init+0x320>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_GPIO_Init+0x216>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a4c      	ldr	r2, [pc, #304]	; (80063cc <HAL_GPIO_Init+0x324>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00d      	beq.n	80062ba <HAL_GPIO_Init+0x212>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a4b      	ldr	r2, [pc, #300]	; (80063d0 <HAL_GPIO_Init+0x328>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <HAL_GPIO_Init+0x20e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a4a      	ldr	r2, [pc, #296]	; (80063d4 <HAL_GPIO_Init+0x32c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_GPIO_Init+0x20a>
 80062ae:	2307      	movs	r3, #7
 80062b0:	e00e      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062b2:	2308      	movs	r3, #8
 80062b4:	e00c      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062b6:	2306      	movs	r3, #6
 80062b8:	e00a      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062ba:	2305      	movs	r3, #5
 80062bc:	e008      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062be:	2304      	movs	r3, #4
 80062c0:	e006      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062c2:	2303      	movs	r3, #3
 80062c4:	e004      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e002      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <HAL_GPIO_Init+0x228>
 80062ce:	2300      	movs	r3, #0
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	f002 0203 	and.w	r2, r2, #3
 80062d6:	0092      	lsls	r2, r2, #2
 80062d8:	4093      	lsls	r3, r2
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062e0:	4934      	ldr	r1, [pc, #208]	; (80063b4 <HAL_GPIO_Init+0x30c>)
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	3302      	adds	r3, #2
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062ee:	4b3a      	ldr	r3, [pc, #232]	; (80063d8 <HAL_GPIO_Init+0x330>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006312:	4a31      	ldr	r2, [pc, #196]	; (80063d8 <HAL_GPIO_Init+0x330>)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006318:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <HAL_GPIO_Init+0x330>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800633c:	4a26      	ldr	r2, [pc, #152]	; (80063d8 <HAL_GPIO_Init+0x330>)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006342:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <HAL_GPIO_Init+0x330>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	43db      	mvns	r3, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4013      	ands	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006366:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <HAL_GPIO_Init+0x330>)
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_GPIO_Init+0x330>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <HAL_GPIO_Init+0x330>)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	3301      	adds	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b0f      	cmp	r3, #15
 80063a0:	f67f ae90 	bls.w	80060c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063a4:	bf00      	nop
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40013800 	.word	0x40013800
 80063b8:	40020000 	.word	0x40020000
 80063bc:	40020400 	.word	0x40020400
 80063c0:	40020800 	.word	0x40020800
 80063c4:	40020c00 	.word	0x40020c00
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40021400 	.word	0x40021400
 80063d0:	40021800 	.word	0x40021800
 80063d4:	40021c00 	.word	0x40021c00
 80063d8:	40013c00 	.word	0x40013c00

080063dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	887b      	ldrh	r3, [r7, #2]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	e001      	b.n	80063fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
 8006418:	4613      	mov	r3, r2
 800641a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800641c:	787b      	ldrb	r3, [r7, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006428:	e003      	b.n	8006432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	401a      	ands	r2, r3
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	429a      	cmp	r2, r3
 8006456:	d104      	bne.n	8006462 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	041a      	lsls	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006460:	e002      	b.n	8006468 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800648a:	4a05      	ldr	r2, [pc, #20]	; (80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f9e0 	bl	8005858 <HAL_GPIO_EXTI_Callback>
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40013c00 	.word	0x40013c00

080064a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e25b      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d075      	beq.n	80065ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064c2:	4ba3      	ldr	r3, [pc, #652]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d00c      	beq.n	80064e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ce:	4ba0      	ldr	r3, [pc, #640]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d112      	bne.n	8006500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064da:	4b9d      	ldr	r3, [pc, #628]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e6:	d10b      	bne.n	8006500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e8:	4b99      	ldr	r3, [pc, #612]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05b      	beq.n	80065ac <HAL_RCC_OscConfig+0x108>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d157      	bne.n	80065ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e236      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d106      	bne.n	8006518 <HAL_RCC_OscConfig+0x74>
 800650a:	4b91      	ldr	r3, [pc, #580]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a90      	ldr	r2, [pc, #576]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e01d      	b.n	8006554 <HAL_RCC_OscConfig+0xb0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0x98>
 8006522:	4b8b      	ldr	r3, [pc, #556]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a8a      	ldr	r2, [pc, #552]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b88      	ldr	r3, [pc, #544]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a87      	ldr	r2, [pc, #540]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e00b      	b.n	8006554 <HAL_RCC_OscConfig+0xb0>
 800653c:	4b84      	ldr	r3, [pc, #528]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a83      	ldr	r2, [pc, #524]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4b81      	ldr	r3, [pc, #516]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a80      	ldr	r2, [pc, #512]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 800654e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d013      	beq.n	8006584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655c:	f7ff fc42 	bl	8005de4 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006564:	f7ff fc3e 	bl	8005de4 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b64      	cmp	r3, #100	; 0x64
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e1fb      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b76      	ldr	r3, [pc, #472]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f0      	beq.n	8006564 <HAL_RCC_OscConfig+0xc0>
 8006582:	e014      	b.n	80065ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7ff fc2e 	bl	8005de4 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800658c:	f7ff fc2a 	bl	8005de4 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1e7      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659e:	4b6c      	ldr	r3, [pc, #432]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0xe8>
 80065aa:	e000      	b.n	80065ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d063      	beq.n	8006682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ba:	4b65      	ldr	r3, [pc, #404]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065c6:	4b62      	ldr	r3, [pc, #392]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d11c      	bne.n	800660c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065d2:	4b5f      	ldr	r3, [pc, #380]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d116      	bne.n	800660c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065de:	4b5c      	ldr	r3, [pc, #368]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_RCC_OscConfig+0x152>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d001      	beq.n	80065f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e1bb      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f6:	4b56      	ldr	r3, [pc, #344]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4952      	ldr	r1, [pc, #328]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006606:	4313      	orrs	r3, r2
 8006608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660a:	e03a      	b.n	8006682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d020      	beq.n	8006656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006614:	4b4f      	ldr	r3, [pc, #316]	; (8006754 <HAL_RCC_OscConfig+0x2b0>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661a:	f7ff fbe3 	bl	8005de4 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006622:	f7ff fbdf 	bl	8005de4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e19c      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006634:	4b46      	ldr	r3, [pc, #280]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006640:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4940      	ldr	r1, [pc, #256]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]
 8006654:	e015      	b.n	8006682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006656:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <HAL_RCC_OscConfig+0x2b0>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7ff fbc2 	bl	8005de4 <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006664:	f7ff fbbe 	bl	8005de4 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e17b      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006676:	4b36      	ldr	r3, [pc, #216]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f0      	bne.n	8006664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d030      	beq.n	80066f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d016      	beq.n	80066c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <HAL_RCC_OscConfig+0x2b4>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669c:	f7ff fba2 	bl	8005de4 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066a4:	f7ff fb9e 	bl	8005de4 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e15b      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b6:	4b26      	ldr	r3, [pc, #152]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0x200>
 80066c2:	e015      	b.n	80066f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066c4:	4b24      	ldr	r3, [pc, #144]	; (8006758 <HAL_RCC_OscConfig+0x2b4>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ca:	f7ff fb8b 	bl	8005de4 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066d2:	f7ff fb87 	bl	8005de4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e144      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e4:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 80066e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f0      	bne.n	80066d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80a0 	beq.w	800683e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006702:	4b13      	ldr	r3, [pc, #76]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10f      	bne.n	800672e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	4a0e      	ldr	r2, [pc, #56]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671c:	6413      	str	r3, [r2, #64]	; 0x40
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006726:	60bb      	str	r3, [r7, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672e:	4b0b      	ldr	r3, [pc, #44]	; (800675c <HAL_RCC_OscConfig+0x2b8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d121      	bne.n	800677e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <HAL_RCC_OscConfig+0x2b8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a07      	ldr	r2, [pc, #28]	; (800675c <HAL_RCC_OscConfig+0x2b8>)
 8006740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006746:	f7ff fb4d 	bl	8005de4 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	e011      	b.n	8006772 <HAL_RCC_OscConfig+0x2ce>
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	42470000 	.word	0x42470000
 8006758:	42470e80 	.word	0x42470e80
 800675c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006760:	f7ff fb40 	bl	8005de4 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e0fd      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006772:	4b81      	ldr	r3, [pc, #516]	; (8006978 <HAL_RCC_OscConfig+0x4d4>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d106      	bne.n	8006794 <HAL_RCC_OscConfig+0x2f0>
 8006786:	4b7d      	ldr	r3, [pc, #500]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a7c      	ldr	r2, [pc, #496]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	6713      	str	r3, [r2, #112]	; 0x70
 8006792:	e01c      	b.n	80067ce <HAL_RCC_OscConfig+0x32a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b05      	cmp	r3, #5
 800679a:	d10c      	bne.n	80067b6 <HAL_RCC_OscConfig+0x312>
 800679c:	4b77      	ldr	r3, [pc, #476]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 800679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a0:	4a76      	ldr	r2, [pc, #472]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067a2:	f043 0304 	orr.w	r3, r3, #4
 80067a6:	6713      	str	r3, [r2, #112]	; 0x70
 80067a8:	4b74      	ldr	r3, [pc, #464]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	4a73      	ldr	r2, [pc, #460]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	6713      	str	r3, [r2, #112]	; 0x70
 80067b4:	e00b      	b.n	80067ce <HAL_RCC_OscConfig+0x32a>
 80067b6:	4b71      	ldr	r3, [pc, #452]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	4a70      	ldr	r2, [pc, #448]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	6713      	str	r3, [r2, #112]	; 0x70
 80067c2:	4b6e      	ldr	r3, [pc, #440]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	4a6d      	ldr	r2, [pc, #436]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067c8:	f023 0304 	bic.w	r3, r3, #4
 80067cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d015      	beq.n	8006802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7ff fb05 	bl	8005de4 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067dc:	e00a      	b.n	80067f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067de:	f7ff fb01 	bl	8005de4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e0bc      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f4:	4b61      	ldr	r3, [pc, #388]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0ee      	beq.n	80067de <HAL_RCC_OscConfig+0x33a>
 8006800:	e014      	b.n	800682c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006802:	f7ff faef 	bl	8005de4 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006808:	e00a      	b.n	8006820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800680a:	f7ff faeb 	bl	8005de4 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f241 3288 	movw	r2, #5000	; 0x1388
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e0a6      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006820:	4b56      	ldr	r3, [pc, #344]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1ee      	bne.n	800680a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d105      	bne.n	800683e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006832:	4b52      	ldr	r3, [pc, #328]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	4a51      	ldr	r2, [pc, #324]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 8006838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800683c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8092 	beq.w	800696c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006848:	4b4c      	ldr	r3, [pc, #304]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b08      	cmp	r3, #8
 8006852:	d05c      	beq.n	800690e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d141      	bne.n	80068e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800685c:	4b48      	ldr	r3, [pc, #288]	; (8006980 <HAL_RCC_OscConfig+0x4dc>)
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006862:	f7ff fabf 	bl	8005de4 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800686a:	f7ff fabb 	bl	8005de4 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e078      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687c:	4b3f      	ldr	r3, [pc, #252]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1f0      	bne.n	800686a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	019b      	lsls	r3, r3, #6
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	061b      	lsls	r3, r3, #24
 80068ac:	4933      	ldr	r1, [pc, #204]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b2:	4b33      	ldr	r3, [pc, #204]	; (8006980 <HAL_RCC_OscConfig+0x4dc>)
 80068b4:	2201      	movs	r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7ff fa94 	bl	8005de4 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c0:	f7ff fa90 	bl	8005de4 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e04d      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d2:	4b2a      	ldr	r3, [pc, #168]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x41c>
 80068de:	e045      	b.n	800696c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <HAL_RCC_OscConfig+0x4dc>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e6:	f7ff fa7d 	bl	8005de4 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ee:	f7ff fa79 	bl	8005de4 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e036      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006900:	4b1e      	ldr	r3, [pc, #120]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f0      	bne.n	80068ee <HAL_RCC_OscConfig+0x44a>
 800690c:	e02e      	b.n	800696c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e029      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800691a:	4b18      	ldr	r3, [pc, #96]	; (800697c <HAL_RCC_OscConfig+0x4d8>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	429a      	cmp	r2, r3
 800692c:	d11c      	bne.n	8006968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006938:	429a      	cmp	r2, r3
 800693a:	d115      	bne.n	8006968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006942:	4013      	ands	r3, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006948:	4293      	cmp	r3, r2
 800694a:	d10d      	bne.n	8006968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006956:	429a      	cmp	r2, r3
 8006958:	d106      	bne.n	8006968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40007000 	.word	0x40007000
 800697c:	40023800 	.word	0x40023800
 8006980:	42470060 	.word	0x42470060

08006984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0cc      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006998:	4b68      	ldr	r3, [pc, #416]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d90c      	bls.n	80069c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b65      	ldr	r3, [pc, #404]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b63      	ldr	r3, [pc, #396]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e0b8      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d020      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069d8:	4b59      	ldr	r3, [pc, #356]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a58      	ldr	r2, [pc, #352]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 80069de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f0:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a52      	ldr	r2, [pc, #328]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fc:	4b50      	ldr	r3, [pc, #320]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	494d      	ldr	r1, [pc, #308]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d044      	beq.n	8006aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d107      	bne.n	8006a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a22:	4b47      	ldr	r3, [pc, #284]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d119      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e07f      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d003      	beq.n	8006a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d107      	bne.n	8006a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a42:	4b3f      	ldr	r3, [pc, #252]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e06f      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a52:	4b3b      	ldr	r3, [pc, #236]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e067      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a62:	4b37      	ldr	r3, [pc, #220]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f023 0203 	bic.w	r2, r3, #3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4934      	ldr	r1, [pc, #208]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a74:	f7ff f9b6 	bl	8005de4 <HAL_GetTick>
 8006a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7a:	e00a      	b.n	8006a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a7c:	f7ff f9b2 	bl	8005de4 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e04f      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	4b2b      	ldr	r3, [pc, #172]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 020c 	and.w	r2, r3, #12
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d1eb      	bne.n	8006a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa4:	4b25      	ldr	r3, [pc, #148]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d20c      	bcs.n	8006acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab2:	4b22      	ldr	r3, [pc, #136]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aba:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <HAL_RCC_ClockConfig+0x1b8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d001      	beq.n	8006acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e032      	b.n	8006b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad8:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4916      	ldr	r1, [pc, #88]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	490e      	ldr	r1, [pc, #56]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b0a:	f000 f821 	bl	8006b50 <HAL_RCC_GetSysClockFreq>
 8006b0e:	4601      	mov	r1, r0
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	4a0a      	ldr	r2, [pc, #40]	; (8006b44 <HAL_RCC_ClockConfig+0x1c0>)
 8006b1c:	5cd3      	ldrb	r3, [r2, r3]
 8006b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <HAL_RCC_ClockConfig+0x1c4>)
 8006b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <HAL_RCC_ClockConfig+0x1c8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f916 	bl	8005d5c <HAL_InitTick>

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023c00 	.word	0x40023c00
 8006b40:	40023800 	.word	0x40023800
 8006b44:	0800c498 	.word	0x0800c498
 8006b48:	2000005c 	.word	0x2000005c
 8006b4c:	20000060 	.word	0x20000060

08006b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b66:	4b63      	ldr	r3, [pc, #396]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d007      	beq.n	8006b82 <HAL_RCC_GetSysClockFreq+0x32>
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d008      	beq.n	8006b88 <HAL_RCC_GetSysClockFreq+0x38>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80b4 	bne.w	8006ce4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b7c:	4b5e      	ldr	r3, [pc, #376]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b7e:	60bb      	str	r3, [r7, #8]
       break;
 8006b80:	e0b3      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b82:	4b5e      	ldr	r3, [pc, #376]	; (8006cfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006b84:	60bb      	str	r3, [r7, #8]
      break;
 8006b86:	e0b0      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b88:	4b5a      	ldr	r3, [pc, #360]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b92:	4b58      	ldr	r3, [pc, #352]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d04a      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b9e:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	099b      	lsrs	r3, r3, #6
 8006ba4:	f04f 0400 	mov.w	r4, #0
 8006ba8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	ea03 0501 	and.w	r5, r3, r1
 8006bb4:	ea04 0602 	and.w	r6, r4, r2
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4632      	mov	r2, r6
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	f04f 0400 	mov.w	r4, #0
 8006bc4:	0154      	lsls	r4, r2, #5
 8006bc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bca:	014b      	lsls	r3, r1, #5
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4622      	mov	r2, r4
 8006bd0:	1b49      	subs	r1, r1, r5
 8006bd2:	eb62 0206 	sbc.w	r2, r2, r6
 8006bd6:	f04f 0300 	mov.w	r3, #0
 8006bda:	f04f 0400 	mov.w	r4, #0
 8006bde:	0194      	lsls	r4, r2, #6
 8006be0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006be4:	018b      	lsls	r3, r1, #6
 8006be6:	1a5b      	subs	r3, r3, r1
 8006be8:	eb64 0402 	sbc.w	r4, r4, r2
 8006bec:	f04f 0100 	mov.w	r1, #0
 8006bf0:	f04f 0200 	mov.w	r2, #0
 8006bf4:	00e2      	lsls	r2, r4, #3
 8006bf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006bfa:	00d9      	lsls	r1, r3, #3
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4614      	mov	r4, r2
 8006c00:	195b      	adds	r3, r3, r5
 8006c02:	eb44 0406 	adc.w	r4, r4, r6
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	0262      	lsls	r2, r4, #9
 8006c10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006c14:	0259      	lsls	r1, r3, #9
 8006c16:	460b      	mov	r3, r1
 8006c18:	4614      	mov	r4, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f04f 0400 	mov.w	r4, #0
 8006c24:	461a      	mov	r2, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	f7f9 ffce 	bl	8000bc8 <__aeabi_uldivmod>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e049      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c34:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	099b      	lsrs	r3, r3, #6
 8006c3a:	f04f 0400 	mov.w	r4, #0
 8006c3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	ea03 0501 	and.w	r5, r3, r1
 8006c4a:	ea04 0602 	and.w	r6, r4, r2
 8006c4e:	4629      	mov	r1, r5
 8006c50:	4632      	mov	r2, r6
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	f04f 0400 	mov.w	r4, #0
 8006c5a:	0154      	lsls	r4, r2, #5
 8006c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c60:	014b      	lsls	r3, r1, #5
 8006c62:	4619      	mov	r1, r3
 8006c64:	4622      	mov	r2, r4
 8006c66:	1b49      	subs	r1, r1, r5
 8006c68:	eb62 0206 	sbc.w	r2, r2, r6
 8006c6c:	f04f 0300 	mov.w	r3, #0
 8006c70:	f04f 0400 	mov.w	r4, #0
 8006c74:	0194      	lsls	r4, r2, #6
 8006c76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c7a:	018b      	lsls	r3, r1, #6
 8006c7c:	1a5b      	subs	r3, r3, r1
 8006c7e:	eb64 0402 	sbc.w	r4, r4, r2
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	00e2      	lsls	r2, r4, #3
 8006c8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c90:	00d9      	lsls	r1, r3, #3
 8006c92:	460b      	mov	r3, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	195b      	adds	r3, r3, r5
 8006c98:	eb44 0406 	adc.w	r4, r4, r6
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	02a2      	lsls	r2, r4, #10
 8006ca6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006caa:	0299      	lsls	r1, r3, #10
 8006cac:	460b      	mov	r3, r1
 8006cae:	4614      	mov	r4, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f04f 0400 	mov.w	r4, #0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	f7f9 ff83 	bl	8000bc8 <__aeabi_uldivmod>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cc8:	4b0a      	ldr	r3, [pc, #40]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
      break;
 8006ce2:	e002      	b.n	8006cea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ce4:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006ce6:	60bb      	str	r3, [r7, #8]
      break;
 8006ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cea:	68bb      	ldr	r3, [r7, #8]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	00f42400 	.word	0x00f42400
 8006cfc:	007a1200 	.word	0x007a1200

08006d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d00:	b480      	push	{r7}
 8006d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d04:	4b03      	ldr	r3, [pc, #12]	; (8006d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d06:	681b      	ldr	r3, [r3, #0]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2000005c 	.word	0x2000005c

08006d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d1c:	f7ff fff0 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8006d20:	4601      	mov	r1, r0
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	0a9b      	lsrs	r3, r3, #10
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	4a03      	ldr	r2, [pc, #12]	; (8006d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d2e:	5cd3      	ldrb	r3, [r2, r3]
 8006d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40023800 	.word	0x40023800
 8006d3c:	0800c4a8 	.word	0x0800c4a8

08006d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d44:	f7ff ffdc 	bl	8006d00 <HAL_RCC_GetHCLKFreq>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	0b5b      	lsrs	r3, r3, #13
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	4a03      	ldr	r2, [pc, #12]	; (8006d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	40023800 	.word	0x40023800
 8006d64:	0800c4a8 	.word	0x0800c4a8

08006d68 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d105      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d035      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d90:	4b62      	ldr	r3, [pc, #392]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d96:	f7ff f825 	bl	8005de4 <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d9c:	e008      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d9e:	f7ff f821 	bl	8005de4 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0b0      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006db0:	4b5b      	ldr	r3, [pc, #364]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f0      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	019a      	lsls	r2, r3, #6
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	071b      	lsls	r3, r3, #28
 8006dc8:	4955      	ldr	r1, [pc, #340]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dd0:	4b52      	ldr	r3, [pc, #328]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd6:	f7ff f805 	bl	8005de4 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dde:	f7ff f801 	bl	8005de4 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e090      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006df0:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8083 	beq.w	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	4b44      	ldr	r3, [pc, #272]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4a43      	ldr	r2, [pc, #268]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e18:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1a:	4b41      	ldr	r3, [pc, #260]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e26:	4b3f      	ldr	r3, [pc, #252]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a3e      	ldr	r2, [pc, #248]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e32:	f7fe ffd7 	bl	8005de4 <HAL_GetTick>
 8006e36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e3a:	f7fe ffd3 	bl	8005de4 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e062      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e4c:	4b35      	ldr	r3, [pc, #212]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0f0      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e58:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02f      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d028      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e76:	4b2a      	ldr	r3, [pc, #168]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e80:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e82:	2201      	movs	r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e86:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e8c:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e92:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d114      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e9e:	f7fe ffa1 	bl	8005de4 <HAL_GetTick>
 8006ea2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea4:	e00a      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ea6:	f7fe ff9d 	bl	8005de4 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e02a      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ebc:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0ee      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed4:	d10d      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eea:	490d      	ldr	r1, [pc, #52]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	608b      	str	r3, [r1, #8]
 8006ef0:	e005      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ef8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006efc:	6093      	str	r3, [r2, #8]
 8006efe:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f0a:	4905      	ldr	r1, [pc, #20]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	42470068 	.word	0x42470068
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40007000 	.word	0x40007000
 8006f28:	42470e40 	.word	0x42470e40

08006f2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e083      	b.n	8007046 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	7f5b      	ldrb	r3, [r3, #29]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d105      	bne.n	8006f54 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fe fce0 	bl	8005914 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	22ca      	movs	r2, #202	; 0xca
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2253      	movs	r2, #83	; 0x53
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 faa8 	bl	80074c0 <RTC_EnterInitMode>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d008      	beq.n	8006f88 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	22ff      	movs	r2, #255	; 0xff
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2204      	movs	r2, #4
 8006f82:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e05e      	b.n	8007046 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68d2      	ldr	r2, [r2, #12]
 8006fc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6919      	ldr	r1, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	041a      	lsls	r2, r3, #16
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10e      	bne.n	8007014 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa3a 	bl	8007470 <HAL_RTC_WaitForSynchro>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d008      	beq.n	8007014 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2204      	movs	r2, #4
 800700e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e018      	b.n	8007046 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007022:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699a      	ldr	r2, [r3, #24]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	22ff      	movs	r2, #255	; 0xff
 800703c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
  }
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800704e:	b590      	push	{r4, r7, lr}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7f1b      	ldrb	r3, [r3, #28]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_RTC_SetTime+0x1c>
 8007066:	2302      	movs	r3, #2
 8007068:	e0aa      	b.n	80071c0 <HAL_RTC_SetTime+0x172>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2202      	movs	r2, #2
 8007074:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d126      	bne.n	80070ca <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fa3f 	bl	8007518 <RTC_ByteToBcd2>
 800709a:	4603      	mov	r3, r0
 800709c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa38 	bl	8007518 <RTC_ByteToBcd2>
 80070a8:	4603      	mov	r3, r0
 80070aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80070ac:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	789b      	ldrb	r3, [r3, #2]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fa30 	bl	8007518 <RTC_ByteToBcd2>
 80070b8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80070ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	78db      	ldrb	r3, [r3, #3]
 80070c2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e018      	b.n	80070fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d102      	bne.n	80070de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070ea:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	78db      	ldrb	r3, [r3, #3]
 80070f6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	22ca      	movs	r2, #202	; 0xca
 8007102:	625a      	str	r2, [r3, #36]	; 0x24
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2253      	movs	r2, #83	; 0x53
 800710a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f9d7 	bl	80074c0 <RTC_EnterInitMode>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	22ff      	movs	r2, #255	; 0xff
 800711e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2204      	movs	r2, #4
 8007124:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e047      	b.n	80071c0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800713a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800713e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800714e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6899      	ldr	r1, [r3, #8]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	431a      	orrs	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007176:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d111      	bne.n	80071aa <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f972 	bl	8007470 <HAL_RTC_WaitForSynchro>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2204      	movs	r2, #4
 800719e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e00a      	b.n	80071c0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	22ff      	movs	r2, #255	; 0xff
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80071be:	2300      	movs	r3, #0
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd90      	pop	{r4, r7, pc}

080071c8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	0c1b      	lsrs	r3, r3, #16
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	0a1b      	lsrs	r3, r3, #8
 8007214:	b2db      	uxtb	r3, r3
 8007216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	0c1b      	lsrs	r3, r3, #16
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11a      	bne.n	800727a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f983 	bl	8007554 <RTC_Bcd2ToByte>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f97a 	bl	8007554 <RTC_Bcd2ToByte>
 8007260:	4603      	mov	r3, r0
 8007262:	461a      	mov	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	789b      	ldrb	r3, [r3, #2]
 800726c:	4618      	mov	r0, r3
 800726e:	f000 f971 	bl	8007554 <RTC_Bcd2ToByte>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	7f1b      	ldrb	r3, [r3, #28]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_RTC_SetDate+0x1c>
 800729c:	2302      	movs	r3, #2
 800729e:	e094      	b.n	80073ca <HAL_RTC_SetDate+0x146>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2201      	movs	r2, #1
 80072a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <HAL_RTC_SetDate+0x4c>
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	330a      	adds	r3, #10
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d11c      	bne.n	8007310 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f91c 	bl	8007518 <RTC_ByteToBcd2>
 80072e0:	4603      	mov	r3, r0
 80072e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f915 	bl	8007518 <RTC_ByteToBcd2>
 80072ee:	4603      	mov	r3, r0
 80072f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f90d 	bl	8007518 <RTC_ByteToBcd2>
 80072fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007300:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e00e      	b.n	800732e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	78db      	ldrb	r3, [r3, #3]
 8007314:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800731c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007322:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	22ca      	movs	r2, #202	; 0xca
 8007334:	625a      	str	r2, [r3, #36]	; 0x24
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2253      	movs	r2, #83	; 0x53
 800733c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f8be 	bl	80074c0 <RTC_EnterInitMode>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	22ff      	movs	r2, #255	; 0xff
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2204      	movs	r2, #4
 8007356:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e033      	b.n	80073ca <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800736c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007370:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007380:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d111      	bne.n	80073b4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f86d 	bl	8007470 <HAL_RTC_WaitForSynchro>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	22ff      	movs	r2, #255	; 0xff
 80073a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2204      	movs	r2, #4
 80073a8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e00a      	b.n	80073ca <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	22ff      	movs	r2, #255	; 0xff
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80073c8:	2300      	movs	r3, #0
  }
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd90      	pop	{r4, r7, pc}

080073d2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	0c1b      	lsrs	r3, r3, #16
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	b2db      	uxtb	r3, r3
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	b2da      	uxtb	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007414:	b2da      	uxtb	r2, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	0b5b      	lsrs	r3, r3, #13
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	b2da      	uxtb	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11a      	bne.n	8007466 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	78db      	ldrb	r3, [r3, #3]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f88d 	bl	8007554 <RTC_Bcd2ToByte>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f884 	bl	8007554 <RTC_Bcd2ToByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	789b      	ldrb	r3, [r3, #2]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f87b 	bl	8007554 <RTC_Bcd2ToByte>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800748a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800748c:	f7fe fcaa 	bl	8005de4 <HAL_GetTick>
 8007490:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007492:	e009      	b.n	80074a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007494:	f7fe fca6 	bl	8005de4 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a2:	d901      	bls.n	80074a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e007      	b.n	80074b8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0ee      	beq.n	8007494 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d119      	bne.n	800750e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f04f 32ff 	mov.w	r2, #4294967295
 80074e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074e4:	f7fe fc7e 	bl	8005de4 <HAL_GetTick>
 80074e8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074ea:	e009      	b.n	8007500 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074ec:	f7fe fc7a 	bl	8005de4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074fa:	d901      	bls.n	8007500 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e007      	b.n	8007510 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0ee      	beq.n	80074ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007526:	e005      	b.n	8007534 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	3b0a      	subs	r3, #10
 8007532:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b09      	cmp	r3, #9
 8007538:	d8f6      	bhi.n	8007528 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	b2da      	uxtb	r2, r3
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	4313      	orrs	r3, r2
 8007546:	b2db      	uxtb	r3, r3
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4413      	add	r3, r2
 8007582:	b2db      	uxtb	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	7f1b      	ldrb	r3, [r3, #28]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d101      	bne.n	80075a6 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 80075a2:	2302      	movs	r3, #2
 80075a4:	e030      	b.n	8007608 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	22ca      	movs	r2, #202	; 0xca
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2253      	movs	r2, #83	; 0x53
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80075d0:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6899      	ldr	r1, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80075f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	22ff      	movs	r2, #255	; 0xff
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e056      	b.n	80076d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d106      	bne.n	8007646 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fe f97d 	bl	8005940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	ea42 0103 	orr.w	r1, r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	f003 0104 	and.w	r1, r3, #4
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69da      	ldr	r2, [r3, #28]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Transmit+0x22>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e11e      	b.n	800793c <HAL_SPI_Transmit+0x260>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007706:	f7fe fb6d 	bl	8005de4 <HAL_GetTick>
 800770a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d002      	beq.n	8007722 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800771c:	2302      	movs	r3, #2
 800771e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007720:	e103      	b.n	800792a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_SPI_Transmit+0x52>
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007732:	e0fa      	b.n	800792a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2203      	movs	r2, #3
 8007738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777a:	d107      	bne.n	800778c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800778a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d007      	beq.n	80077aa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b2:	d14b      	bne.n	800784c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_Transmit+0xe6>
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d13e      	bne.n	8007840 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	881a      	ldrh	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	1c9a      	adds	r2, r3, #2
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077e6:	e02b      	b.n	8007840 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d112      	bne.n	800781c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	1c9a      	adds	r2, r3, #2
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	86da      	strh	r2, [r3, #54]	; 0x36
 800781a:	e011      	b.n	8007840 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800781c:	f7fe fae2 	bl	8005de4 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d803      	bhi.n	8007834 <HAL_SPI_Transmit+0x158>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d102      	bne.n	800783a <HAL_SPI_Transmit+0x15e>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800783e:	e074      	b.n	800792a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1ce      	bne.n	80077e8 <HAL_SPI_Transmit+0x10c>
 800784a:	e04c      	b.n	80078e6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_SPI_Transmit+0x17e>
 8007854:	8afb      	ldrh	r3, [r7, #22]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d140      	bne.n	80078dc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007880:	e02c      	b.n	80078dc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b02      	cmp	r3, #2
 800788e:	d113      	bne.n	80078b8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	7812      	ldrb	r2, [r2, #0]
 800789c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80078b6:	e011      	b.n	80078dc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b8:	f7fe fa94 	bl	8005de4 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d803      	bhi.n	80078d0 <HAL_SPI_Transmit+0x1f4>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_Transmit+0x1fa>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80078da:	e026      	b.n	800792a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1cd      	bne.n	8007882 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fa44 	bl	8007d78 <SPI_EndRxTxTransaction>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	613b      	str	r3, [r7, #16]
 8007918:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	77fb      	strb	r3, [r7, #31]
 8007926:	e000      	b.n	800792a <HAL_SPI_Transmit+0x24e>
  }

error:
 8007928:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800793a:	7ffb      	ldrb	r3, [r7, #31]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08c      	sub	sp, #48	; 0x30
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007952:	2301      	movs	r3, #1
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_SPI_TransmitReceive+0x26>
 8007966:	2302      	movs	r3, #2
 8007968:	e18a      	b.n	8007c80 <HAL_SPI_TransmitReceive+0x33c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007972:	f7fe fa37 	bl	8005de4 <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007988:	887b      	ldrh	r3, [r7, #2]
 800798a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800798c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007990:	2b01      	cmp	r3, #1
 8007992:	d00f      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x70>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799a:	d107      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x68>
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d003      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079b2:	e15b      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x82>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SPI_TransmitReceive+0x82>
 80079c0:	887b      	ldrh	r3, [r7, #2]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079cc:	e14e      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2205      	movs	r2, #5
 80079de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	887a      	ldrh	r2, [r7, #2]
 80079f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	887a      	ldrh	r2, [r7, #2]
 80079f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	887a      	ldrh	r2, [r7, #2]
 8007a04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	887a      	ldrh	r2, [r7, #2]
 8007a0a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d007      	beq.n	8007a36 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a3e:	d178      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_SPI_TransmitReceive+0x10a>
 8007a48:	8b7b      	ldrh	r3, [r7, #26]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d166      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	881a      	ldrh	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	1c9a      	adds	r2, r3, #2
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a72:	e053      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d11b      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x176>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d016      	beq.n	8007aba <HAL_SPI_TransmitReceive+0x176>
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d113      	bne.n	8007aba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	881a      	ldrh	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	1c9a      	adds	r2, r3, #2
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d119      	bne.n	8007afc <HAL_SPI_TransmitReceive+0x1b8>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d014      	beq.n	8007afc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	b292      	uxth	r2, r2
 8007ade:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	1c9a      	adds	r2, r3, #2
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007af8:	2301      	movs	r3, #1
 8007afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007afc:	f7fe f972 	bl	8005de4 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d807      	bhi.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d003      	beq.n	8007b1c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b1a:	e0a7      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1a6      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x130>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1a1      	bne.n	8007a74 <HAL_SPI_TransmitReceive+0x130>
 8007b30:	e07c      	b.n	8007c2c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x1fc>
 8007b3a:	8b7b      	ldrh	r3, [r7, #26]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d16b      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b66:	e057      	b.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d11c      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d017      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
 8007b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d114      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	330c      	adds	r3, #12
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d119      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x2ae>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d014      	beq.n	8007bf2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	b2d2      	uxtb	r2, r2
 8007bd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bf2:	f7fe f8f7 	bl	8005de4 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d803      	bhi.n	8007c0a <HAL_SPI_TransmitReceive+0x2c6>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d102      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x2cc>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c16:	e029      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1a2      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x224>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d19d      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f8a1 	bl	8007d78 <SPI_EndRxTxTransaction>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c48:	e010      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	e000      	b.n	8007c6c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3730      	adds	r7, #48	; 0x30
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c96:	b2db      	uxtb	r3, r3
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb4:	e04c      	b.n	8007d50 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d048      	beq.n	8007d50 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007cbe:	f7fe f891 	bl	8005de4 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d902      	bls.n	8007cd4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d13d      	bne.n	8007d50 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cec:	d111      	bne.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d004      	beq.n	8007d02 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d00:	d107      	bne.n	8007d12 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	d10f      	bne.n	8007d3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e00f      	b.n	8007d70 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	461a      	mov	r2, r3
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1a3      	bne.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d84:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <SPI_EndRxTxTransaction+0x7c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <SPI_EndRxTxTransaction+0x80>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	0d5b      	lsrs	r3, r3, #21
 8007d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d94:	fb02 f303 	mul.w	r3, r2, r3
 8007d98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da2:	d112      	bne.n	8007dca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	2180      	movs	r1, #128	; 0x80
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff ff78 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f043 0220 	orr.w	r2, r3, #32
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e00f      	b.n	8007dea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d0f2      	beq.n	8007dca <SPI_EndRxTxTransaction+0x52>
 8007de4:	e000      	b.n	8007de8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007de6:	bf00      	nop
  }

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	2000005c 	.word	0x2000005c
 8007df8:	165e9f81 	.word	0x165e9f81

08007dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e01d      	b.n	8007e4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fd fdd4 	bl	80059d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f000 fb72 	bl	8008524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b06      	cmp	r3, #6
 8007e72:	d007      	beq.n	8007e84 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0201 	orr.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b06      	cmp	r3, #6
 8007ec2:	d007      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e01d      	b.n	8007f30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f815 	bl	8007f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f000 faff 	bl	8008524 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fdca 	bl	8008af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a15      	ldr	r2, [pc, #84]	; (8007fc0 <HAL_TIM_PWM_Start+0x74>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d004      	beq.n	8007f78 <HAL_TIM_PWM_Start+0x2c>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a14      	ldr	r2, [pc, #80]	; (8007fc4 <HAL_TIM_PWM_Start+0x78>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d101      	bne.n	8007f7c <HAL_TIM_PWM_Start+0x30>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_TIM_PWM_Start+0x32>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b06      	cmp	r3, #6
 8007fa2:	d007      	beq.n	8007fb4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40010400 	.word	0x40010400

08007fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa6b 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa5d 	bl	80084d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fa6e 	bl	80084fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b04      	cmp	r3, #4
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0204 	mvn.w	r2, #4
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa41 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa33 	bl	80084d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fa44 	bl	80084fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	2b08      	cmp	r3, #8
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa17 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa09 	bl	80084d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fa1a 	bl	80084fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d122      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d11b      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2208      	movs	r2, #8
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9ed 	bl	80084e6 <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9df 	bl	80084d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f9f0 	bl	80084fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0201 	mvn.w	r2, #1
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fd fb60 	bl	800580c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd6c 	bl	8008c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d10e      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f9b5 	bl	800850e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d10e      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d107      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0220 	mvn.w	r2, #32
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd36 	bl	8008c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e0b4      	b.n	800835c <HAL_TIM_PWM_ConfigChannel+0x184>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b0c      	cmp	r3, #12
 8008206:	f200 809f 	bhi.w	8008348 <HAL_TIM_PWM_ConfigChannel+0x170>
 800820a:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800820c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008210:	08008245 	.word	0x08008245
 8008214:	08008349 	.word	0x08008349
 8008218:	08008349 	.word	0x08008349
 800821c:	08008349 	.word	0x08008349
 8008220:	08008285 	.word	0x08008285
 8008224:	08008349 	.word	0x08008349
 8008228:	08008349 	.word	0x08008349
 800822c:	08008349 	.word	0x08008349
 8008230:	080082c7 	.word	0x080082c7
 8008234:	08008349 	.word	0x08008349
 8008238:	08008349 	.word	0x08008349
 800823c:	08008349 	.word	0x08008349
 8008240:	08008307 	.word	0x08008307
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 fa0a 	bl	8008664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0208 	orr.w	r2, r2, #8
 800825e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0204 	bic.w	r2, r2, #4
 800826e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6999      	ldr	r1, [r3, #24]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691a      	ldr	r2, [r3, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	619a      	str	r2, [r3, #24]
      break;
 8008282:	e062      	b.n	800834a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fa5a 	bl	8008744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800829e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6999      	ldr	r1, [r3, #24]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	619a      	str	r2, [r3, #24]
      break;
 80082c4:	e041      	b.n	800834a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 faaf 	bl	8008830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f042 0208 	orr.w	r2, r2, #8
 80082e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69da      	ldr	r2, [r3, #28]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0204 	bic.w	r2, r2, #4
 80082f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69d9      	ldr	r1, [r3, #28]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	61da      	str	r2, [r3, #28]
      break;
 8008304:	e021      	b.n	800834a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fb03 	bl	8008918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69d9      	ldr	r1, [r3, #28]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	021a      	lsls	r2, r3, #8
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	61da      	str	r2, [r3, #28]
      break;
 8008346:	e000      	b.n	800834a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008348:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIM_ConfigClockSource+0x18>
 8008378:	2302      	movs	r3, #2
 800837a:	e0a6      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x166>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800839a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d067      	beq.n	8008484 <HAL_TIM_ConfigClockSource+0x120>
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	d80b      	bhi.n	80083d0 <HAL_TIM_ConfigClockSource+0x6c>
 80083b8:	2b10      	cmp	r3, #16
 80083ba:	d073      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x140>
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d802      	bhi.n	80083c6 <HAL_TIM_ConfigClockSource+0x62>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d06f      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083c4:	e078      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083c6:	2b20      	cmp	r3, #32
 80083c8:	d06c      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x140>
 80083ca:	2b30      	cmp	r3, #48	; 0x30
 80083cc:	d06a      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80083ce:	e073      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083d0:	2b70      	cmp	r3, #112	; 0x70
 80083d2:	d00d      	beq.n	80083f0 <HAL_TIM_ConfigClockSource+0x8c>
 80083d4:	2b70      	cmp	r3, #112	; 0x70
 80083d6:	d804      	bhi.n	80083e2 <HAL_TIM_ConfigClockSource+0x7e>
 80083d8:	2b50      	cmp	r3, #80	; 0x50
 80083da:	d033      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xe0>
 80083dc:	2b60      	cmp	r3, #96	; 0x60
 80083de:	d041      	beq.n	8008464 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80083e0:	e06a      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e6:	d066      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0x152>
 80083e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ec:	d017      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80083ee:	e063      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6899      	ldr	r1, [r3, #8]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f000 fb5a 	bl	8008ab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008412:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	609a      	str	r2, [r3, #8]
      break;
 800841c:	e04c      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6899      	ldr	r1, [r3, #8]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f000 fb43 	bl	8008ab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008440:	609a      	str	r2, [r3, #8]
      break;
 8008442:	e039      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	461a      	mov	r2, r3
 8008452:	f000 fab7 	bl	80089c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2150      	movs	r1, #80	; 0x50
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fb10 	bl	8008a82 <TIM_ITRx_SetConfig>
      break;
 8008462:	e029      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	6859      	ldr	r1, [r3, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	461a      	mov	r2, r3
 8008472:	f000 fad6 	bl	8008a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2160      	movs	r1, #96	; 0x60
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fb00 	bl	8008a82 <TIM_ITRx_SetConfig>
      break;
 8008482:	e019      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	461a      	mov	r2, r3
 8008492:	f000 fa97 	bl	80089c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2140      	movs	r1, #64	; 0x40
 800849c:	4618      	mov	r0, r3
 800849e:	f000 faf0 	bl	8008a82 <TIM_ITRx_SetConfig>
      break;
 80084a2:	e009      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f000 fae7 	bl	8008a82 <TIM_ITRx_SetConfig>
      break;
 80084b4:	e000      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80084b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a40      	ldr	r2, [pc, #256]	; (8008638 <TIM_Base_SetConfig+0x114>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d013      	beq.n	8008564 <TIM_Base_SetConfig+0x40>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008542:	d00f      	beq.n	8008564 <TIM_Base_SetConfig+0x40>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a3d      	ldr	r2, [pc, #244]	; (800863c <TIM_Base_SetConfig+0x118>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00b      	beq.n	8008564 <TIM_Base_SetConfig+0x40>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a3c      	ldr	r2, [pc, #240]	; (8008640 <TIM_Base_SetConfig+0x11c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d007      	beq.n	8008564 <TIM_Base_SetConfig+0x40>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a3b      	ldr	r2, [pc, #236]	; (8008644 <TIM_Base_SetConfig+0x120>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d003      	beq.n	8008564 <TIM_Base_SetConfig+0x40>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a3a      	ldr	r2, [pc, #232]	; (8008648 <TIM_Base_SetConfig+0x124>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d108      	bne.n	8008576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4313      	orrs	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a2f      	ldr	r2, [pc, #188]	; (8008638 <TIM_Base_SetConfig+0x114>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02b      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008584:	d027      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a2c      	ldr	r2, [pc, #176]	; (800863c <TIM_Base_SetConfig+0x118>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d023      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a2b      	ldr	r2, [pc, #172]	; (8008640 <TIM_Base_SetConfig+0x11c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d01f      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a2a      	ldr	r2, [pc, #168]	; (8008644 <TIM_Base_SetConfig+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d01b      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a29      	ldr	r2, [pc, #164]	; (8008648 <TIM_Base_SetConfig+0x124>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d017      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a28      	ldr	r2, [pc, #160]	; (800864c <TIM_Base_SetConfig+0x128>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a27      	ldr	r2, [pc, #156]	; (8008650 <TIM_Base_SetConfig+0x12c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00f      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a26      	ldr	r2, [pc, #152]	; (8008654 <TIM_Base_SetConfig+0x130>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00b      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a25      	ldr	r2, [pc, #148]	; (8008658 <TIM_Base_SetConfig+0x134>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d007      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a24      	ldr	r2, [pc, #144]	; (800865c <TIM_Base_SetConfig+0x138>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d003      	beq.n	80085d6 <TIM_Base_SetConfig+0xb2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a23      	ldr	r2, [pc, #140]	; (8008660 <TIM_Base_SetConfig+0x13c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d108      	bne.n	80085e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <TIM_Base_SetConfig+0x114>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_Base_SetConfig+0xf8>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a0c      	ldr	r2, [pc, #48]	; (8008648 <TIM_Base_SetConfig+0x124>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d103      	bne.n	8008624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	615a      	str	r2, [r3, #20]
}
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40010000 	.word	0x40010000
 800863c:	40000400 	.word	0x40000400
 8008640:	40000800 	.word	0x40000800
 8008644:	40000c00 	.word	0x40000c00
 8008648:	40010400 	.word	0x40010400
 800864c:	40014000 	.word	0x40014000
 8008650:	40014400 	.word	0x40014400
 8008654:	40014800 	.word	0x40014800
 8008658:	40001800 	.word	0x40001800
 800865c:	40001c00 	.word	0x40001c00
 8008660:	40002000 	.word	0x40002000

08008664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0303 	bic.w	r3, r3, #3
 800869a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f023 0302 	bic.w	r3, r3, #2
 80086ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a20      	ldr	r2, [pc, #128]	; (800873c <TIM_OC1_SetConfig+0xd8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_OC1_SetConfig+0x64>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <TIM_OC1_SetConfig+0xdc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d10c      	bne.n	80086e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 0308 	bic.w	r3, r3, #8
 80086ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 0304 	bic.w	r3, r3, #4
 80086e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a15      	ldr	r2, [pc, #84]	; (800873c <TIM_OC1_SetConfig+0xd8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d003      	beq.n	80086f2 <TIM_OC1_SetConfig+0x8e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a14      	ldr	r2, [pc, #80]	; (8008740 <TIM_OC1_SetConfig+0xdc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d111      	bne.n	8008716 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	621a      	str	r2, [r3, #32]
}
 8008730:	bf00      	nop
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	40010000 	.word	0x40010000
 8008740:	40010400 	.word	0x40010400

08008744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0210 	bic.w	r2, r3, #16
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f023 0320 	bic.w	r3, r3, #32
 800878e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a22      	ldr	r2, [pc, #136]	; (8008828 <TIM_OC2_SetConfig+0xe4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_OC2_SetConfig+0x68>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a21      	ldr	r2, [pc, #132]	; (800882c <TIM_OC2_SetConfig+0xe8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d10d      	bne.n	80087c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4313      	orrs	r3, r2
 80087be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a17      	ldr	r2, [pc, #92]	; (8008828 <TIM_OC2_SetConfig+0xe4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC2_SetConfig+0x94>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a16      	ldr	r2, [pc, #88]	; (800882c <TIM_OC2_SetConfig+0xe8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d113      	bne.n	8008800 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	40010000 	.word	0x40010000
 800882c:	40010400 	.word	0x40010400

08008830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <TIM_OC3_SetConfig+0xe0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_OC3_SetConfig+0x66>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a20      	ldr	r2, [pc, #128]	; (8008914 <TIM_OC3_SetConfig+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d10d      	bne.n	80088b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <TIM_OC3_SetConfig+0xe0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d003      	beq.n	80088c2 <TIM_OC3_SetConfig+0x92>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <TIM_OC3_SetConfig+0xe4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d113      	bne.n	80088ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	621a      	str	r2, [r3, #32]
}
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40010000 	.word	0x40010000
 8008914:	40010400 	.word	0x40010400

08008918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	031b      	lsls	r3, r3, #12
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a12      	ldr	r2, [pc, #72]	; (80089bc <TIM_OC4_SetConfig+0xa4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC4_SetConfig+0x68>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a11      	ldr	r2, [pc, #68]	; (80089c0 <TIM_OC4_SetConfig+0xa8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d109      	bne.n	8008994 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	019b      	lsls	r3, r3, #6
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40010000 	.word	0x40010000
 80089c0:	40010400 	.word	0x40010400

080089c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b087      	sub	sp, #28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
 80089d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f023 0201 	bic.w	r2, r3, #1
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f023 030a 	bic.w	r3, r3, #10
 8008a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	621a      	str	r2, [r3, #32]
}
 8008a16:	bf00      	nop
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b087      	sub	sp, #28
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	f023 0210 	bic.w	r2, r3, #16
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	031b      	lsls	r3, r3, #12
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f043 0307 	orr.w	r3, r3, #7
 8008aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	021a      	lsls	r2, r3, #8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	609a      	str	r2, [r3, #8]
}
 8008aec:	bf00      	nop
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6a1a      	ldr	r2, [r3, #32]
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	401a      	ands	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 031f 	and.w	r3, r3, #31
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b30:	431a      	orrs	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	621a      	str	r2, [r3, #32]
}
 8008b36:	bf00      	nop
 8008b38:	371c      	adds	r7, #28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e05a      	b.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2202      	movs	r2, #2
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a21      	ldr	r2, [pc, #132]	; (8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d022      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba8:	d01d      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d018      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00e      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a18      	ldr	r2, [pc, #96]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d009      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d004      	beq.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a15      	ldr	r2, [pc, #84]	; (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d10c      	bne.n	8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40010000 	.word	0x40010000
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40010400 	.word	0x40010400
 8008c34:	40014000 	.word	0x40014000
 8008c38:	40001800 	.word	0x40001800

08008c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e03f      	b.n	8008cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7fc ff32 	bl	8005af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2224      	movs	r2, #36	; 0x24
 8008c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fcb3 	bl	8009614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691a      	ldr	r2, [r3, #16]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695a      	ldr	r2, [r3, #20]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68da      	ldr	r2, [r3, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3708      	adds	r7, #8
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b088      	sub	sp, #32
 8008d02:	af02      	add	r7, sp, #8
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	f040 8083 	bne.w	8008e26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <HAL_UART_Transmit+0x2e>
 8008d26:	88fb      	ldrh	r3, [r7, #6]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e07b      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <HAL_UART_Transmit+0x40>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e074      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2221      	movs	r2, #33	; 0x21
 8008d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008d54:	f7fd f846 	bl	8005de4 <HAL_GetTick>
 8008d58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	88fa      	ldrh	r2, [r7, #6]
 8008d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008d6e:	e042      	b.n	8008df6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d86:	d122      	bne.n	8008dce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fabe 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e042      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008db4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d103      	bne.n	8008dc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	e017      	b.n	8008df6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	e013      	b.n	8008df6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2180      	movs	r1, #128	; 0x80
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 fa9b 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e01f      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	60ba      	str	r2, [r7, #8]
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1b7      	bne.n	8008d70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2200      	movs	r2, #0
 8008e08:	2140      	movs	r1, #64	; 0x40
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fa82 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e006      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e000      	b.n	8008e28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008e26:	2302      	movs	r3, #2
  }
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	f040 8090 	bne.w	8008f72 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <HAL_UART_Receive+0x2e>
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e088      	b.n	8008f74 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_UART_Receive+0x40>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e081      	b.n	8008f74 <HAL_UART_Receive+0x144>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2222      	movs	r2, #34	; 0x22
 8008e82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008e86:	f7fc ffad 	bl	8005de4 <HAL_GetTick>
 8008e8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008ea0:	e05c      	b.n	8008f5c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eb8:	d12b      	bne.n	8008f12 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2120      	movs	r1, #32
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 fa25 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e04f      	b.n	8008f74 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10c      	bne.n	8008efa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	60bb      	str	r3, [r7, #8]
 8008ef8:	e030      	b.n	8008f5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	e024      	b.n	8008f5c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2120      	movs	r1, #32
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f9f9 	bl	8009314 <UART_WaitOnFlagUntilTimeout>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e023      	b.n	8008f74 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d108      	bne.n	8008f46 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6859      	ldr	r1, [r3, #4]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	60ba      	str	r2, [r7, #8]
 8008f40:	b2ca      	uxtb	r2, r1
 8008f42:	701a      	strb	r2, [r3, #0]
 8008f44:	e00a      	b.n	8008f5c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d19d      	bne.n	8008ea2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e000      	b.n	8008f74 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008f72:	2302      	movs	r3, #2
  }
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d140      	bne.n	8009018 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_UART_Receive_IT+0x26>
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e039      	b.n	800901a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d101      	bne.n	8008fb4 <HAL_UART_Receive_IT+0x38>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e032      	b.n	800901a <HAL_UART_Receive_IT+0x9e>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	88fa      	ldrh	r2, [r7, #6]
 8008fc6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2222      	movs	r2, #34	; 0x22
 8008fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ff2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	695a      	ldr	r2, [r3, #20]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0201 	orr.w	r2, r2, #1
 8009002:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f042 0220 	orr.w	r2, r2, #32
 8009012:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	e000      	b.n	800901a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009018:	2302      	movs	r3, #2
  }
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800903e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0201 	bic.w	r2, r2, #1
 800904e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d12a      	bne.n	80090b4 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800906c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009072:	2b00      	cmp	r3, #0
 8009074:	d013      	beq.n	800909e <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	4a16      	ldr	r2, [pc, #88]	; (80090d4 <HAL_UART_AbortReceive_IT+0xac>)
 800907c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009082:	4618      	mov	r0, r3
 8009084:	f7fc ffed 	bl	8006062 <HAL_DMA_Abort_IT>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01c      	beq.n	80090c8 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
 800909c:	e014      	b.n	80090c8 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2220      	movs	r2, #32
 80090a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f927 	bl	8009300 <HAL_UART_AbortReceiveCpltCallback>
 80090b2:	e009      	b.n	80090c8 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f91c 	bl	8009300 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	0800940d 	.word	0x0800940d

080090d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10d      	bne.n	800912a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f003 0320 	and.w	r3, r3, #32
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <HAL_UART_IRQHandler+0x52>
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9f5 	bl	8009512 <UART_Receive_IT>
      return;
 8009128:	e0d1      	b.n	80092ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80b0 	beq.w	8009292 <HAL_UART_IRQHandler+0x1ba>
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <HAL_UART_IRQHandler+0x70>
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80a5 	beq.w	8009292 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <HAL_UART_IRQHandler+0x90>
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009160:	f043 0201 	orr.w	r2, r3, #1
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <HAL_UART_IRQHandler+0xb0>
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009180:	f043 0202 	orr.w	r2, r3, #2
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00a      	beq.n	80091a8 <HAL_UART_IRQHandler+0xd0>
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d005      	beq.n	80091a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	f043 0204 	orr.w	r2, r3, #4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00f      	beq.n	80091d2 <HAL_UART_IRQHandler+0xfa>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <HAL_UART_IRQHandler+0xee>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	f043 0208 	orr.w	r2, r3, #8
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d078      	beq.n	80092cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d007      	beq.n	80091f4 <HAL_UART_IRQHandler+0x11c>
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	f003 0320 	and.w	r3, r3, #32
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f98f 	bl	8009512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fe:	2b40      	cmp	r3, #64	; 0x40
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <HAL_UART_IRQHandler+0x144>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d031      	beq.n	8009280 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8c3 	bl	80093a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	d123      	bne.n	8009278 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	695a      	ldr	r2, [r3, #20]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800923e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	2b00      	cmp	r3, #0
 8009246:	d013      	beq.n	8009270 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <HAL_UART_IRQHandler+0x1fc>)
 800924e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	4618      	mov	r0, r3
 8009256:	f7fc ff04 	bl	8006062 <HAL_DMA_Abort_IT>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d016      	beq.n	800928e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800926a:	4610      	mov	r0, r2
 800926c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926e:	e00e      	b.n	800928e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f83b 	bl	80092ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009276:	e00a      	b.n	800928e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f837 	bl	80092ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927e:	e006      	b.n	800928e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f833 	bl	80092ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800928c:	e01e      	b.n	80092cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928e:	bf00      	nop
    return;
 8009290:	e01c      	b.n	80092cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009298:	2b00      	cmp	r3, #0
 800929a:	d008      	beq.n	80092ae <HAL_UART_IRQHandler+0x1d6>
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8c5 	bl	8009436 <UART_Transmit_IT>
    return;
 80092ac:	e00f      	b.n	80092ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <HAL_UART_IRQHandler+0x1f6>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f90d 	bl	80094e2 <UART_EndTransmit_IT>
    return;
 80092c8:	bf00      	nop
 80092ca:	e000      	b.n	80092ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80092cc:	bf00      	nop
  }
}
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	080093e5 	.word	0x080093e5

080092d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009324:	e02c      	b.n	8009380 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932c:	d028      	beq.n	8009380 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <UART_WaitOnFlagUntilTimeout+0x30>
 8009334:	f7fc fd56 	bl	8005de4 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	429a      	cmp	r2, r3
 8009342:	d21d      	bcs.n	8009380 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009352:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695a      	ldr	r2, [r3, #20]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0201 	bic.w	r2, r2, #1
 8009362:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2220      	movs	r2, #32
 8009370:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e00f      	b.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4013      	ands	r3, r2
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	429a      	cmp	r2, r3
 800938e:	bf0c      	ite	eq
 8009390:	2301      	moveq	r3, #1
 8009392:	2300      	movne	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	461a      	mov	r2, r3
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	429a      	cmp	r2, r3
 800939c:	d0c3      	beq.n	8009326 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	695a      	ldr	r2, [r3, #20]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0201 	bic.w	r2, r2, #1
 80093ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f7ff ff74 	bl	80092ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff ff69 	bl	8009300 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b21      	cmp	r3, #33	; 0x21
 8009448:	d144      	bne.n	80094d4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009452:	d11a      	bne.n	800948a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009468:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	1c9a      	adds	r2, r3, #2
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	621a      	str	r2, [r3, #32]
 800947c:	e00e      	b.n	800949c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	621a      	str	r2, [r3, #32]
 8009488:	e008      	b.n	800949c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	1c59      	adds	r1, r3, #1
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6211      	str	r1, [r2, #32]
 8009494:	781a      	ldrb	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	4619      	mov	r1, r3
 80094aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10f      	bne.n	80094d0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68da      	ldr	r2, [r3, #12]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e000      	b.n	80094d6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80094d4:	2302      	movs	r3, #2
  }
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fee8 	bl	80092d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b22      	cmp	r3, #34	; 0x22
 8009524:	d171      	bne.n	800960a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952e:	d123      	bne.n	8009578 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10e      	bne.n	800955c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	b29b      	uxth	r3, r3
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	b29a      	uxth	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	629a      	str	r2, [r3, #40]	; 0x28
 800955a:	e029      	b.n	80095b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b29b      	uxth	r3, r3
 8009564:	b2db      	uxtb	r3, r3
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	629a      	str	r2, [r3, #40]	; 0x28
 8009576:	e01b      	b.n	80095b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6858      	ldr	r0, [r3, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958a:	1c59      	adds	r1, r3, #1
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	6291      	str	r1, [r2, #40]	; 0x28
 8009590:	b2c2      	uxtb	r2, r0
 8009592:	701a      	strb	r2, [r3, #0]
 8009594:	e00c      	b.n	80095b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a2:	1c58      	adds	r0, r3, #1
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	6288      	str	r0, [r1, #40]	; 0x28
 80095a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095ac:	b2d2      	uxtb	r2, r2
 80095ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4619      	mov	r1, r3
 80095be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d120      	bne.n	8009606 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f022 0220 	bic.w	r2, r2, #32
 80095d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695a      	ldr	r2, [r3, #20]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0201 	bic.w	r2, r2, #1
 80095f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fc f94f 	bl	80058a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	e002      	b.n	800960c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	e000      	b.n	800960c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800960a:	2302      	movs	r3, #2
  }
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	430a      	orrs	r2, r1
 8009632:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	4313      	orrs	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009656:	f023 030c 	bic.w	r3, r3, #12
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	430b      	orrs	r3, r1
 8009662:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009682:	f040 818b 	bne.w	800999c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4ac1      	ldr	r2, [pc, #772]	; (8009990 <UART_SetConfig+0x37c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d005      	beq.n	800969c <UART_SetConfig+0x88>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4abf      	ldr	r2, [pc, #764]	; (8009994 <UART_SetConfig+0x380>)
 8009696:	4293      	cmp	r3, r2
 8009698:	f040 80bd 	bne.w	8009816 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800969c:	f7fd fb50 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 80096a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	461d      	mov	r5, r3
 80096a6:	f04f 0600 	mov.w	r6, #0
 80096aa:	46a8      	mov	r8, r5
 80096ac:	46b1      	mov	r9, r6
 80096ae:	eb18 0308 	adds.w	r3, r8, r8
 80096b2:	eb49 0409 	adc.w	r4, r9, r9
 80096b6:	4698      	mov	r8, r3
 80096b8:	46a1      	mov	r9, r4
 80096ba:	eb18 0805 	adds.w	r8, r8, r5
 80096be:	eb49 0906 	adc.w	r9, r9, r6
 80096c2:	f04f 0100 	mov.w	r1, #0
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096d6:	4688      	mov	r8, r1
 80096d8:	4691      	mov	r9, r2
 80096da:	eb18 0005 	adds.w	r0, r8, r5
 80096de:	eb49 0106 	adc.w	r1, r9, r6
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	461d      	mov	r5, r3
 80096e8:	f04f 0600 	mov.w	r6, #0
 80096ec:	196b      	adds	r3, r5, r5
 80096ee:	eb46 0406 	adc.w	r4, r6, r6
 80096f2:	461a      	mov	r2, r3
 80096f4:	4623      	mov	r3, r4
 80096f6:	f7f7 fa67 	bl	8000bc8 <__aeabi_uldivmod>
 80096fa:	4603      	mov	r3, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	461a      	mov	r2, r3
 8009700:	4ba5      	ldr	r3, [pc, #660]	; (8009998 <UART_SetConfig+0x384>)
 8009702:	fba3 2302 	umull	r2, r3, r3, r2
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	461d      	mov	r5, r3
 8009710:	f04f 0600 	mov.w	r6, #0
 8009714:	46a9      	mov	r9, r5
 8009716:	46b2      	mov	sl, r6
 8009718:	eb19 0309 	adds.w	r3, r9, r9
 800971c:	eb4a 040a 	adc.w	r4, sl, sl
 8009720:	4699      	mov	r9, r3
 8009722:	46a2      	mov	sl, r4
 8009724:	eb19 0905 	adds.w	r9, r9, r5
 8009728:	eb4a 0a06 	adc.w	sl, sl, r6
 800972c:	f04f 0100 	mov.w	r1, #0
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009738:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800973c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009740:	4689      	mov	r9, r1
 8009742:	4692      	mov	sl, r2
 8009744:	eb19 0005 	adds.w	r0, r9, r5
 8009748:	eb4a 0106 	adc.w	r1, sl, r6
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	461d      	mov	r5, r3
 8009752:	f04f 0600 	mov.w	r6, #0
 8009756:	196b      	adds	r3, r5, r5
 8009758:	eb46 0406 	adc.w	r4, r6, r6
 800975c:	461a      	mov	r2, r3
 800975e:	4623      	mov	r3, r4
 8009760:	f7f7 fa32 	bl	8000bc8 <__aeabi_uldivmod>
 8009764:	4603      	mov	r3, r0
 8009766:	460c      	mov	r4, r1
 8009768:	461a      	mov	r2, r3
 800976a:	4b8b      	ldr	r3, [pc, #556]	; (8009998 <UART_SetConfig+0x384>)
 800976c:	fba3 1302 	umull	r1, r3, r3, r2
 8009770:	095b      	lsrs	r3, r3, #5
 8009772:	2164      	movs	r1, #100	; 0x64
 8009774:	fb01 f303 	mul.w	r3, r1, r3
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	3332      	adds	r3, #50	; 0x32
 800977e:	4a86      	ldr	r2, [pc, #536]	; (8009998 <UART_SetConfig+0x384>)
 8009780:	fba2 2303 	umull	r2, r3, r2, r3
 8009784:	095b      	lsrs	r3, r3, #5
 8009786:	005b      	lsls	r3, r3, #1
 8009788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800978c:	4498      	add	r8, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	461d      	mov	r5, r3
 8009792:	f04f 0600 	mov.w	r6, #0
 8009796:	46a9      	mov	r9, r5
 8009798:	46b2      	mov	sl, r6
 800979a:	eb19 0309 	adds.w	r3, r9, r9
 800979e:	eb4a 040a 	adc.w	r4, sl, sl
 80097a2:	4699      	mov	r9, r3
 80097a4:	46a2      	mov	sl, r4
 80097a6:	eb19 0905 	adds.w	r9, r9, r5
 80097aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80097ae:	f04f 0100 	mov.w	r1, #0
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097c2:	4689      	mov	r9, r1
 80097c4:	4692      	mov	sl, r2
 80097c6:	eb19 0005 	adds.w	r0, r9, r5
 80097ca:	eb4a 0106 	adc.w	r1, sl, r6
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	461d      	mov	r5, r3
 80097d4:	f04f 0600 	mov.w	r6, #0
 80097d8:	196b      	adds	r3, r5, r5
 80097da:	eb46 0406 	adc.w	r4, r6, r6
 80097de:	461a      	mov	r2, r3
 80097e0:	4623      	mov	r3, r4
 80097e2:	f7f7 f9f1 	bl	8000bc8 <__aeabi_uldivmod>
 80097e6:	4603      	mov	r3, r0
 80097e8:	460c      	mov	r4, r1
 80097ea:	461a      	mov	r2, r3
 80097ec:	4b6a      	ldr	r3, [pc, #424]	; (8009998 <UART_SetConfig+0x384>)
 80097ee:	fba3 1302 	umull	r1, r3, r3, r2
 80097f2:	095b      	lsrs	r3, r3, #5
 80097f4:	2164      	movs	r1, #100	; 0x64
 80097f6:	fb01 f303 	mul.w	r3, r1, r3
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	3332      	adds	r3, #50	; 0x32
 8009800:	4a65      	ldr	r2, [pc, #404]	; (8009998 <UART_SetConfig+0x384>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	095b      	lsrs	r3, r3, #5
 8009808:	f003 0207 	and.w	r2, r3, #7
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4442      	add	r2, r8
 8009812:	609a      	str	r2, [r3, #8]
 8009814:	e26f      	b.n	8009cf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009816:	f7fd fa7f 	bl	8006d18 <HAL_RCC_GetPCLK1Freq>
 800981a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	461d      	mov	r5, r3
 8009820:	f04f 0600 	mov.w	r6, #0
 8009824:	46a8      	mov	r8, r5
 8009826:	46b1      	mov	r9, r6
 8009828:	eb18 0308 	adds.w	r3, r8, r8
 800982c:	eb49 0409 	adc.w	r4, r9, r9
 8009830:	4698      	mov	r8, r3
 8009832:	46a1      	mov	r9, r4
 8009834:	eb18 0805 	adds.w	r8, r8, r5
 8009838:	eb49 0906 	adc.w	r9, r9, r6
 800983c:	f04f 0100 	mov.w	r1, #0
 8009840:	f04f 0200 	mov.w	r2, #0
 8009844:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009848:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800984c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009850:	4688      	mov	r8, r1
 8009852:	4691      	mov	r9, r2
 8009854:	eb18 0005 	adds.w	r0, r8, r5
 8009858:	eb49 0106 	adc.w	r1, r9, r6
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	461d      	mov	r5, r3
 8009862:	f04f 0600 	mov.w	r6, #0
 8009866:	196b      	adds	r3, r5, r5
 8009868:	eb46 0406 	adc.w	r4, r6, r6
 800986c:	461a      	mov	r2, r3
 800986e:	4623      	mov	r3, r4
 8009870:	f7f7 f9aa 	bl	8000bc8 <__aeabi_uldivmod>
 8009874:	4603      	mov	r3, r0
 8009876:	460c      	mov	r4, r1
 8009878:	461a      	mov	r2, r3
 800987a:	4b47      	ldr	r3, [pc, #284]	; (8009998 <UART_SetConfig+0x384>)
 800987c:	fba3 2302 	umull	r2, r3, r3, r2
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	461d      	mov	r5, r3
 800988a:	f04f 0600 	mov.w	r6, #0
 800988e:	46a9      	mov	r9, r5
 8009890:	46b2      	mov	sl, r6
 8009892:	eb19 0309 	adds.w	r3, r9, r9
 8009896:	eb4a 040a 	adc.w	r4, sl, sl
 800989a:	4699      	mov	r9, r3
 800989c:	46a2      	mov	sl, r4
 800989e:	eb19 0905 	adds.w	r9, r9, r5
 80098a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80098a6:	f04f 0100 	mov.w	r1, #0
 80098aa:	f04f 0200 	mov.w	r2, #0
 80098ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098ba:	4689      	mov	r9, r1
 80098bc:	4692      	mov	sl, r2
 80098be:	eb19 0005 	adds.w	r0, r9, r5
 80098c2:	eb4a 0106 	adc.w	r1, sl, r6
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	461d      	mov	r5, r3
 80098cc:	f04f 0600 	mov.w	r6, #0
 80098d0:	196b      	adds	r3, r5, r5
 80098d2:	eb46 0406 	adc.w	r4, r6, r6
 80098d6:	461a      	mov	r2, r3
 80098d8:	4623      	mov	r3, r4
 80098da:	f7f7 f975 	bl	8000bc8 <__aeabi_uldivmod>
 80098de:	4603      	mov	r3, r0
 80098e0:	460c      	mov	r4, r1
 80098e2:	461a      	mov	r2, r3
 80098e4:	4b2c      	ldr	r3, [pc, #176]	; (8009998 <UART_SetConfig+0x384>)
 80098e6:	fba3 1302 	umull	r1, r3, r3, r2
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	2164      	movs	r1, #100	; 0x64
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	3332      	adds	r3, #50	; 0x32
 80098f8:	4a27      	ldr	r2, [pc, #156]	; (8009998 <UART_SetConfig+0x384>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009906:	4498      	add	r8, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	461d      	mov	r5, r3
 800990c:	f04f 0600 	mov.w	r6, #0
 8009910:	46a9      	mov	r9, r5
 8009912:	46b2      	mov	sl, r6
 8009914:	eb19 0309 	adds.w	r3, r9, r9
 8009918:	eb4a 040a 	adc.w	r4, sl, sl
 800991c:	4699      	mov	r9, r3
 800991e:	46a2      	mov	sl, r4
 8009920:	eb19 0905 	adds.w	r9, r9, r5
 8009924:	eb4a 0a06 	adc.w	sl, sl, r6
 8009928:	f04f 0100 	mov.w	r1, #0
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009934:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009938:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800993c:	4689      	mov	r9, r1
 800993e:	4692      	mov	sl, r2
 8009940:	eb19 0005 	adds.w	r0, r9, r5
 8009944:	eb4a 0106 	adc.w	r1, sl, r6
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	461d      	mov	r5, r3
 800994e:	f04f 0600 	mov.w	r6, #0
 8009952:	196b      	adds	r3, r5, r5
 8009954:	eb46 0406 	adc.w	r4, r6, r6
 8009958:	461a      	mov	r2, r3
 800995a:	4623      	mov	r3, r4
 800995c:	f7f7 f934 	bl	8000bc8 <__aeabi_uldivmod>
 8009960:	4603      	mov	r3, r0
 8009962:	460c      	mov	r4, r1
 8009964:	461a      	mov	r2, r3
 8009966:	4b0c      	ldr	r3, [pc, #48]	; (8009998 <UART_SetConfig+0x384>)
 8009968:	fba3 1302 	umull	r1, r3, r3, r2
 800996c:	095b      	lsrs	r3, r3, #5
 800996e:	2164      	movs	r1, #100	; 0x64
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	3332      	adds	r3, #50	; 0x32
 800997a:	4a07      	ldr	r2, [pc, #28]	; (8009998 <UART_SetConfig+0x384>)
 800997c:	fba2 2303 	umull	r2, r3, r2, r3
 8009980:	095b      	lsrs	r3, r3, #5
 8009982:	f003 0207 	and.w	r2, r3, #7
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4442      	add	r2, r8
 800998c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800998e:	e1b2      	b.n	8009cf6 <UART_SetConfig+0x6e2>
 8009990:	40011000 	.word	0x40011000
 8009994:	40011400 	.word	0x40011400
 8009998:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4ad7      	ldr	r2, [pc, #860]	; (8009d00 <UART_SetConfig+0x6ec>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d005      	beq.n	80099b2 <UART_SetConfig+0x39e>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4ad6      	ldr	r2, [pc, #856]	; (8009d04 <UART_SetConfig+0x6f0>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	f040 80d1 	bne.w	8009b54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80099b2:	f7fd f9c5 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 80099b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	469a      	mov	sl, r3
 80099bc:	f04f 0b00 	mov.w	fp, #0
 80099c0:	46d0      	mov	r8, sl
 80099c2:	46d9      	mov	r9, fp
 80099c4:	eb18 0308 	adds.w	r3, r8, r8
 80099c8:	eb49 0409 	adc.w	r4, r9, r9
 80099cc:	4698      	mov	r8, r3
 80099ce:	46a1      	mov	r9, r4
 80099d0:	eb18 080a 	adds.w	r8, r8, sl
 80099d4:	eb49 090b 	adc.w	r9, r9, fp
 80099d8:	f04f 0100 	mov.w	r1, #0
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80099e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80099e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80099ec:	4688      	mov	r8, r1
 80099ee:	4691      	mov	r9, r2
 80099f0:	eb1a 0508 	adds.w	r5, sl, r8
 80099f4:	eb4b 0609 	adc.w	r6, fp, r9
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	4619      	mov	r1, r3
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	f04f 0300 	mov.w	r3, #0
 8009a06:	f04f 0400 	mov.w	r4, #0
 8009a0a:	0094      	lsls	r4, r2, #2
 8009a0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a10:	008b      	lsls	r3, r1, #2
 8009a12:	461a      	mov	r2, r3
 8009a14:	4623      	mov	r3, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	4631      	mov	r1, r6
 8009a1a:	f7f7 f8d5 	bl	8000bc8 <__aeabi_uldivmod>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	460c      	mov	r4, r1
 8009a22:	461a      	mov	r2, r3
 8009a24:	4bb8      	ldr	r3, [pc, #736]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009a26:	fba3 2302 	umull	r2, r3, r3, r2
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	469b      	mov	fp, r3
 8009a34:	f04f 0c00 	mov.w	ip, #0
 8009a38:	46d9      	mov	r9, fp
 8009a3a:	46e2      	mov	sl, ip
 8009a3c:	eb19 0309 	adds.w	r3, r9, r9
 8009a40:	eb4a 040a 	adc.w	r4, sl, sl
 8009a44:	4699      	mov	r9, r3
 8009a46:	46a2      	mov	sl, r4
 8009a48:	eb19 090b 	adds.w	r9, r9, fp
 8009a4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a50:	f04f 0100 	mov.w	r1, #0
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a64:	4689      	mov	r9, r1
 8009a66:	4692      	mov	sl, r2
 8009a68:	eb1b 0509 	adds.w	r5, fp, r9
 8009a6c:	eb4c 060a 	adc.w	r6, ip, sl
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4619      	mov	r1, r3
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	f04f 0300 	mov.w	r3, #0
 8009a7e:	f04f 0400 	mov.w	r4, #0
 8009a82:	0094      	lsls	r4, r2, #2
 8009a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a88:	008b      	lsls	r3, r1, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	4631      	mov	r1, r6
 8009a92:	f7f7 f899 	bl	8000bc8 <__aeabi_uldivmod>
 8009a96:	4603      	mov	r3, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4b9a      	ldr	r3, [pc, #616]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	2164      	movs	r1, #100	; 0x64
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	3332      	adds	r3, #50	; 0x32
 8009ab0:	4a95      	ldr	r2, [pc, #596]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009abc:	4498      	add	r8, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	469b      	mov	fp, r3
 8009ac2:	f04f 0c00 	mov.w	ip, #0
 8009ac6:	46d9      	mov	r9, fp
 8009ac8:	46e2      	mov	sl, ip
 8009aca:	eb19 0309 	adds.w	r3, r9, r9
 8009ace:	eb4a 040a 	adc.w	r4, sl, sl
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	46a2      	mov	sl, r4
 8009ad6:	eb19 090b 	adds.w	r9, r9, fp
 8009ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ade:	f04f 0100 	mov.w	r1, #0
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009af2:	4689      	mov	r9, r1
 8009af4:	4692      	mov	sl, r2
 8009af6:	eb1b 0509 	adds.w	r5, fp, r9
 8009afa:	eb4c 060a 	adc.w	r6, ip, sl
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	4619      	mov	r1, r3
 8009b04:	f04f 0200 	mov.w	r2, #0
 8009b08:	f04f 0300 	mov.w	r3, #0
 8009b0c:	f04f 0400 	mov.w	r4, #0
 8009b10:	0094      	lsls	r4, r2, #2
 8009b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b16:	008b      	lsls	r3, r1, #2
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4623      	mov	r3, r4
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	4631      	mov	r1, r6
 8009b20:	f7f7 f852 	bl	8000bc8 <__aeabi_uldivmod>
 8009b24:	4603      	mov	r3, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4b77      	ldr	r3, [pc, #476]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009b30:	095b      	lsrs	r3, r3, #5
 8009b32:	2164      	movs	r1, #100	; 0x64
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	011b      	lsls	r3, r3, #4
 8009b3c:	3332      	adds	r3, #50	; 0x32
 8009b3e:	4a72      	ldr	r2, [pc, #456]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009b40:	fba2 2303 	umull	r2, r3, r2, r3
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	f003 020f 	and.w	r2, r3, #15
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4442      	add	r2, r8
 8009b50:	609a      	str	r2, [r3, #8]
 8009b52:	e0d0      	b.n	8009cf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b54:	f7fd f8e0 	bl	8006d18 <HAL_RCC_GetPCLK1Freq>
 8009b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f04f 0b00 	mov.w	fp, #0
 8009b62:	46d0      	mov	r8, sl
 8009b64:	46d9      	mov	r9, fp
 8009b66:	eb18 0308 	adds.w	r3, r8, r8
 8009b6a:	eb49 0409 	adc.w	r4, r9, r9
 8009b6e:	4698      	mov	r8, r3
 8009b70:	46a1      	mov	r9, r4
 8009b72:	eb18 080a 	adds.w	r8, r8, sl
 8009b76:	eb49 090b 	adc.w	r9, r9, fp
 8009b7a:	f04f 0100 	mov.w	r1, #0
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009b8e:	4688      	mov	r8, r1
 8009b90:	4691      	mov	r9, r2
 8009b92:	eb1a 0508 	adds.w	r5, sl, r8
 8009b96:	eb4b 0609 	adc.w	r6, fp, r9
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	f04f 0400 	mov.w	r4, #0
 8009bac:	0094      	lsls	r4, r2, #2
 8009bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009bb2:	008b      	lsls	r3, r1, #2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	4631      	mov	r1, r6
 8009bbc:	f7f7 f804 	bl	8000bc8 <__aeabi_uldivmod>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4b50      	ldr	r3, [pc, #320]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	469b      	mov	fp, r3
 8009bd6:	f04f 0c00 	mov.w	ip, #0
 8009bda:	46d9      	mov	r9, fp
 8009bdc:	46e2      	mov	sl, ip
 8009bde:	eb19 0309 	adds.w	r3, r9, r9
 8009be2:	eb4a 040a 	adc.w	r4, sl, sl
 8009be6:	4699      	mov	r9, r3
 8009be8:	46a2      	mov	sl, r4
 8009bea:	eb19 090b 	adds.w	r9, r9, fp
 8009bee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c06:	4689      	mov	r9, r1
 8009c08:	4692      	mov	sl, r2
 8009c0a:	eb1b 0509 	adds.w	r5, fp, r9
 8009c0e:	eb4c 060a 	adc.w	r6, ip, sl
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	4619      	mov	r1, r3
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	f04f 0400 	mov.w	r4, #0
 8009c24:	0094      	lsls	r4, r2, #2
 8009c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c2a:	008b      	lsls	r3, r1, #2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4623      	mov	r3, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	4631      	mov	r1, r6
 8009c34:	f7f6 ffc8 	bl	8000bc8 <__aeabi_uldivmod>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	4b32      	ldr	r3, [pc, #200]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009c40:	fba3 1302 	umull	r1, r3, r3, r2
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	2164      	movs	r1, #100	; 0x64
 8009c48:	fb01 f303 	mul.w	r3, r1, r3
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	3332      	adds	r3, #50	; 0x32
 8009c52:	4a2d      	ldr	r2, [pc, #180]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009c54:	fba2 2303 	umull	r2, r3, r2, r3
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c5e:	4498      	add	r8, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	469b      	mov	fp, r3
 8009c64:	f04f 0c00 	mov.w	ip, #0
 8009c68:	46d9      	mov	r9, fp
 8009c6a:	46e2      	mov	sl, ip
 8009c6c:	eb19 0309 	adds.w	r3, r9, r9
 8009c70:	eb4a 040a 	adc.w	r4, sl, sl
 8009c74:	4699      	mov	r9, r3
 8009c76:	46a2      	mov	sl, r4
 8009c78:	eb19 090b 	adds.w	r9, r9, fp
 8009c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c80:	f04f 0100 	mov.w	r1, #0
 8009c84:	f04f 0200 	mov.w	r2, #0
 8009c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c94:	4689      	mov	r9, r1
 8009c96:	4692      	mov	sl, r2
 8009c98:	eb1b 0509 	adds.w	r5, fp, r9
 8009c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	f04f 0400 	mov.w	r4, #0
 8009cb2:	0094      	lsls	r4, r2, #2
 8009cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009cb8:	008b      	lsls	r3, r1, #2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	f7f6 ff81 	bl	8000bc8 <__aeabi_uldivmod>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	461a      	mov	r2, r3
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009cce:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd2:	095b      	lsrs	r3, r3, #5
 8009cd4:	2164      	movs	r1, #100	; 0x64
 8009cd6:	fb01 f303 	mul.w	r3, r1, r3
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	3332      	adds	r3, #50	; 0x32
 8009ce0:	4a09      	ldr	r2, [pc, #36]	; (8009d08 <UART_SetConfig+0x6f4>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	f003 020f 	and.w	r2, r3, #15
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4442      	add	r2, r8
 8009cf2:	609a      	str	r2, [r3, #8]
}
 8009cf4:	e7ff      	b.n	8009cf6 <UART_SetConfig+0x6e2>
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	40011000 	.word	0x40011000
 8009d04:	40011400 	.word	0x40011400
 8009d08:	51eb851f 	.word	0x51eb851f

08009d0c <atoi>:
 8009d0c:	220a      	movs	r2, #10
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f000 bd38 	b.w	800a784 <strtol>

08009d14 <__errno>:
 8009d14:	4b01      	ldr	r3, [pc, #4]	; (8009d1c <__errno+0x8>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20000068 	.word	0x20000068

08009d20 <__libc_init_array>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	4e0d      	ldr	r6, [pc, #52]	; (8009d58 <__libc_init_array+0x38>)
 8009d24:	4c0d      	ldr	r4, [pc, #52]	; (8009d5c <__libc_init_array+0x3c>)
 8009d26:	1ba4      	subs	r4, r4, r6
 8009d28:	10a4      	asrs	r4, r4, #2
 8009d2a:	2500      	movs	r5, #0
 8009d2c:	42a5      	cmp	r5, r4
 8009d2e:	d109      	bne.n	8009d44 <__libc_init_array+0x24>
 8009d30:	4e0b      	ldr	r6, [pc, #44]	; (8009d60 <__libc_init_array+0x40>)
 8009d32:	4c0c      	ldr	r4, [pc, #48]	; (8009d64 <__libc_init_array+0x44>)
 8009d34:	f002 f900 	bl	800bf38 <_init>
 8009d38:	1ba4      	subs	r4, r4, r6
 8009d3a:	10a4      	asrs	r4, r4, #2
 8009d3c:	2500      	movs	r5, #0
 8009d3e:	42a5      	cmp	r5, r4
 8009d40:	d105      	bne.n	8009d4e <__libc_init_array+0x2e>
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d48:	4798      	blx	r3
 8009d4a:	3501      	adds	r5, #1
 8009d4c:	e7ee      	b.n	8009d2c <__libc_init_array+0xc>
 8009d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009d52:	4798      	blx	r3
 8009d54:	3501      	adds	r5, #1
 8009d56:	e7f2      	b.n	8009d3e <__libc_init_array+0x1e>
 8009d58:	0800c718 	.word	0x0800c718
 8009d5c:	0800c718 	.word	0x0800c718
 8009d60:	0800c718 	.word	0x0800c718
 8009d64:	0800c71c 	.word	0x0800c71c

08009d68 <memset>:
 8009d68:	4402      	add	r2, r0
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d100      	bne.n	8009d72 <memset+0xa>
 8009d70:	4770      	bx	lr
 8009d72:	f803 1b01 	strb.w	r1, [r3], #1
 8009d76:	e7f9      	b.n	8009d6c <memset+0x4>

08009d78 <__cvt>:
 8009d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7c:	ec55 4b10 	vmov	r4, r5, d0
 8009d80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009d82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	460e      	mov	r6, r1
 8009d8a:	4691      	mov	r9, r2
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	bfb8      	it	lt
 8009d90:	4622      	movlt	r2, r4
 8009d92:	462b      	mov	r3, r5
 8009d94:	f027 0720 	bic.w	r7, r7, #32
 8009d98:	bfbb      	ittet	lt
 8009d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d9e:	461d      	movlt	r5, r3
 8009da0:	2300      	movge	r3, #0
 8009da2:	232d      	movlt	r3, #45	; 0x2d
 8009da4:	bfb8      	it	lt
 8009da6:	4614      	movlt	r4, r2
 8009da8:	2f46      	cmp	r7, #70	; 0x46
 8009daa:	700b      	strb	r3, [r1, #0]
 8009dac:	d004      	beq.n	8009db8 <__cvt+0x40>
 8009dae:	2f45      	cmp	r7, #69	; 0x45
 8009db0:	d100      	bne.n	8009db4 <__cvt+0x3c>
 8009db2:	3601      	adds	r6, #1
 8009db4:	2102      	movs	r1, #2
 8009db6:	e000      	b.n	8009dba <__cvt+0x42>
 8009db8:	2103      	movs	r1, #3
 8009dba:	ab03      	add	r3, sp, #12
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	ab02      	add	r3, sp, #8
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	4653      	mov	r3, sl
 8009dc6:	ec45 4b10 	vmov	d0, r4, r5
 8009dca:	f000 fd7d 	bl	800a8c8 <_dtoa_r>
 8009dce:	2f47      	cmp	r7, #71	; 0x47
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	d102      	bne.n	8009dda <__cvt+0x62>
 8009dd4:	f019 0f01 	tst.w	r9, #1
 8009dd8:	d026      	beq.n	8009e28 <__cvt+0xb0>
 8009dda:	2f46      	cmp	r7, #70	; 0x46
 8009ddc:	eb08 0906 	add.w	r9, r8, r6
 8009de0:	d111      	bne.n	8009e06 <__cvt+0x8e>
 8009de2:	f898 3000 	ldrb.w	r3, [r8]
 8009de6:	2b30      	cmp	r3, #48	; 0x30
 8009de8:	d10a      	bne.n	8009e00 <__cvt+0x88>
 8009dea:	2200      	movs	r2, #0
 8009dec:	2300      	movs	r3, #0
 8009dee:	4620      	mov	r0, r4
 8009df0:	4629      	mov	r1, r5
 8009df2:	f7f6 fe79 	bl	8000ae8 <__aeabi_dcmpeq>
 8009df6:	b918      	cbnz	r0, 8009e00 <__cvt+0x88>
 8009df8:	f1c6 0601 	rsb	r6, r6, #1
 8009dfc:	f8ca 6000 	str.w	r6, [sl]
 8009e00:	f8da 3000 	ldr.w	r3, [sl]
 8009e04:	4499      	add	r9, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e12:	b938      	cbnz	r0, 8009e24 <__cvt+0xac>
 8009e14:	2230      	movs	r2, #48	; 0x30
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	454b      	cmp	r3, r9
 8009e1a:	d205      	bcs.n	8009e28 <__cvt+0xb0>
 8009e1c:	1c59      	adds	r1, r3, #1
 8009e1e:	9103      	str	r1, [sp, #12]
 8009e20:	701a      	strb	r2, [r3, #0]
 8009e22:	e7f8      	b.n	8009e16 <__cvt+0x9e>
 8009e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e28:	9b03      	ldr	r3, [sp, #12]
 8009e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e2c:	eba3 0308 	sub.w	r3, r3, r8
 8009e30:	4640      	mov	r0, r8
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	b004      	add	sp, #16
 8009e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e3a <__exponent>:
 8009e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	bfba      	itte	lt
 8009e42:	4249      	neglt	r1, r1
 8009e44:	232d      	movlt	r3, #45	; 0x2d
 8009e46:	232b      	movge	r3, #43	; 0x2b
 8009e48:	2909      	cmp	r1, #9
 8009e4a:	f804 2b02 	strb.w	r2, [r4], #2
 8009e4e:	7043      	strb	r3, [r0, #1]
 8009e50:	dd20      	ble.n	8009e94 <__exponent+0x5a>
 8009e52:	f10d 0307 	add.w	r3, sp, #7
 8009e56:	461f      	mov	r7, r3
 8009e58:	260a      	movs	r6, #10
 8009e5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e5e:	fb06 1115 	mls	r1, r6, r5, r1
 8009e62:	3130      	adds	r1, #48	; 0x30
 8009e64:	2d09      	cmp	r5, #9
 8009e66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e6e:	4629      	mov	r1, r5
 8009e70:	dc09      	bgt.n	8009e86 <__exponent+0x4c>
 8009e72:	3130      	adds	r1, #48	; 0x30
 8009e74:	3b02      	subs	r3, #2
 8009e76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e7a:	42bb      	cmp	r3, r7
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	d304      	bcc.n	8009e8a <__exponent+0x50>
 8009e80:	1a10      	subs	r0, r2, r0
 8009e82:	b003      	add	sp, #12
 8009e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e86:	4613      	mov	r3, r2
 8009e88:	e7e7      	b.n	8009e5a <__exponent+0x20>
 8009e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e8e:	f804 2b01 	strb.w	r2, [r4], #1
 8009e92:	e7f2      	b.n	8009e7a <__exponent+0x40>
 8009e94:	2330      	movs	r3, #48	; 0x30
 8009e96:	4419      	add	r1, r3
 8009e98:	7083      	strb	r3, [r0, #2]
 8009e9a:	1d02      	adds	r2, r0, #4
 8009e9c:	70c1      	strb	r1, [r0, #3]
 8009e9e:	e7ef      	b.n	8009e80 <__exponent+0x46>

08009ea0 <_printf_float>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	b08d      	sub	sp, #52	; 0x34
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009eac:	4616      	mov	r6, r2
 8009eae:	461f      	mov	r7, r3
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	f001 fac5 	bl	800b440 <_localeconv_r>
 8009eb6:	6803      	ldr	r3, [r0, #0]
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f6 f992 	bl	80001e4 <strlen>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec8:	9005      	str	r0, [sp, #20]
 8009eca:	3307      	adds	r3, #7
 8009ecc:	f023 0307 	bic.w	r3, r3, #7
 8009ed0:	f103 0208 	add.w	r2, r3, #8
 8009ed4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8009edc:	f8c8 2000 	str.w	r2, [r8]
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ee8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009eec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ef0:	9307      	str	r3, [sp, #28]
 8009ef2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	4ba7      	ldr	r3, [pc, #668]	; (800a198 <_printf_float+0x2f8>)
 8009efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f00:	f7f6 fe24 	bl	8000b4c <__aeabi_dcmpun>
 8009f04:	bb70      	cbnz	r0, 8009f64 <_printf_float+0xc4>
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0a:	4ba3      	ldr	r3, [pc, #652]	; (800a198 <_printf_float+0x2f8>)
 8009f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f10:	f7f6 fdfe 	bl	8000b10 <__aeabi_dcmple>
 8009f14:	bb30      	cbnz	r0, 8009f64 <_printf_float+0xc4>
 8009f16:	2200      	movs	r2, #0
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	f7f6 fded 	bl	8000afc <__aeabi_dcmplt>
 8009f22:	b110      	cbz	r0, 8009f2a <_printf_float+0x8a>
 8009f24:	232d      	movs	r3, #45	; 0x2d
 8009f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f2a:	4a9c      	ldr	r2, [pc, #624]	; (800a19c <_printf_float+0x2fc>)
 8009f2c:	4b9c      	ldr	r3, [pc, #624]	; (800a1a0 <_printf_float+0x300>)
 8009f2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f32:	bf8c      	ite	hi
 8009f34:	4690      	movhi	r8, r2
 8009f36:	4698      	movls	r8, r3
 8009f38:	2303      	movs	r3, #3
 8009f3a:	f02b 0204 	bic.w	r2, fp, #4
 8009f3e:	6123      	str	r3, [r4, #16]
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	f04f 0900 	mov.w	r9, #0
 8009f46:	9700      	str	r7, [sp, #0]
 8009f48:	4633      	mov	r3, r6
 8009f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 f9e6 	bl	800a320 <_printf_common>
 8009f54:	3001      	adds	r0, #1
 8009f56:	f040 808d 	bne.w	800a074 <_printf_float+0x1d4>
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	b00d      	add	sp, #52	; 0x34
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	4640      	mov	r0, r8
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	f7f6 fdee 	bl	8000b4c <__aeabi_dcmpun>
 8009f70:	b110      	cbz	r0, 8009f78 <_printf_float+0xd8>
 8009f72:	4a8c      	ldr	r2, [pc, #560]	; (800a1a4 <_printf_float+0x304>)
 8009f74:	4b8c      	ldr	r3, [pc, #560]	; (800a1a8 <_printf_float+0x308>)
 8009f76:	e7da      	b.n	8009f2e <_printf_float+0x8e>
 8009f78:	6861      	ldr	r1, [r4, #4]
 8009f7a:	1c4b      	adds	r3, r1, #1
 8009f7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009f80:	a80a      	add	r0, sp, #40	; 0x28
 8009f82:	d13e      	bne.n	800a002 <_printf_float+0x162>
 8009f84:	2306      	movs	r3, #6
 8009f86:	6063      	str	r3, [r4, #4]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f8e:	ab09      	add	r3, sp, #36	; 0x24
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	ec49 8b10 	vmov	d0, r8, r9
 8009f96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f9a:	6022      	str	r2, [r4, #0]
 8009f9c:	f8cd a004 	str.w	sl, [sp, #4]
 8009fa0:	6861      	ldr	r1, [r4, #4]
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f7ff fee8 	bl	8009d78 <__cvt>
 8009fa8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009fac:	2b47      	cmp	r3, #71	; 0x47
 8009fae:	4680      	mov	r8, r0
 8009fb0:	d109      	bne.n	8009fc6 <_printf_float+0x126>
 8009fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb4:	1cd8      	adds	r0, r3, #3
 8009fb6:	db02      	blt.n	8009fbe <_printf_float+0x11e>
 8009fb8:	6862      	ldr	r2, [r4, #4]
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	dd47      	ble.n	800a04e <_printf_float+0x1ae>
 8009fbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8009fc2:	fa5f fa8a 	uxtb.w	sl, sl
 8009fc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fcc:	d824      	bhi.n	800a018 <_printf_float+0x178>
 8009fce:	3901      	subs	r1, #1
 8009fd0:	4652      	mov	r2, sl
 8009fd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fd6:	9109      	str	r1, [sp, #36]	; 0x24
 8009fd8:	f7ff ff2f 	bl	8009e3a <__exponent>
 8009fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fde:	1813      	adds	r3, r2, r0
 8009fe0:	2a01      	cmp	r2, #1
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	dc02      	bgt.n	8009fee <_printf_float+0x14e>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	07d1      	lsls	r1, r2, #31
 8009fec:	d501      	bpl.n	8009ff2 <_printf_float+0x152>
 8009fee:	3301      	adds	r3, #1
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0a5      	beq.n	8009f46 <_printf_float+0xa6>
 8009ffa:	232d      	movs	r3, #45	; 0x2d
 8009ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a000:	e7a1      	b.n	8009f46 <_printf_float+0xa6>
 800a002:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a006:	f000 8177 	beq.w	800a2f8 <_printf_float+0x458>
 800a00a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a00e:	d1bb      	bne.n	8009f88 <_printf_float+0xe8>
 800a010:	2900      	cmp	r1, #0
 800a012:	d1b9      	bne.n	8009f88 <_printf_float+0xe8>
 800a014:	2301      	movs	r3, #1
 800a016:	e7b6      	b.n	8009f86 <_printf_float+0xe6>
 800a018:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a01c:	d119      	bne.n	800a052 <_printf_float+0x1b2>
 800a01e:	2900      	cmp	r1, #0
 800a020:	6863      	ldr	r3, [r4, #4]
 800a022:	dd0c      	ble.n	800a03e <_printf_float+0x19e>
 800a024:	6121      	str	r1, [r4, #16]
 800a026:	b913      	cbnz	r3, 800a02e <_printf_float+0x18e>
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	07d2      	lsls	r2, r2, #31
 800a02c:	d502      	bpl.n	800a034 <_printf_float+0x194>
 800a02e:	3301      	adds	r3, #1
 800a030:	440b      	add	r3, r1
 800a032:	6123      	str	r3, [r4, #16]
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	65a3      	str	r3, [r4, #88]	; 0x58
 800a038:	f04f 0900 	mov.w	r9, #0
 800a03c:	e7d9      	b.n	8009ff2 <_printf_float+0x152>
 800a03e:	b913      	cbnz	r3, 800a046 <_printf_float+0x1a6>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	07d0      	lsls	r0, r2, #31
 800a044:	d501      	bpl.n	800a04a <_printf_float+0x1aa>
 800a046:	3302      	adds	r3, #2
 800a048:	e7f3      	b.n	800a032 <_printf_float+0x192>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e7f1      	b.n	800a032 <_printf_float+0x192>
 800a04e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a052:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a056:	4293      	cmp	r3, r2
 800a058:	db05      	blt.n	800a066 <_printf_float+0x1c6>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	6123      	str	r3, [r4, #16]
 800a05e:	07d1      	lsls	r1, r2, #31
 800a060:	d5e8      	bpl.n	800a034 <_printf_float+0x194>
 800a062:	3301      	adds	r3, #1
 800a064:	e7e5      	b.n	800a032 <_printf_float+0x192>
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfd4      	ite	le
 800a06a:	f1c3 0302 	rsble	r3, r3, #2
 800a06e:	2301      	movgt	r3, #1
 800a070:	4413      	add	r3, r2
 800a072:	e7de      	b.n	800a032 <_printf_float+0x192>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	055a      	lsls	r2, r3, #21
 800a078:	d407      	bmi.n	800a08a <_printf_float+0x1ea>
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	4642      	mov	r2, r8
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	d12b      	bne.n	800a0e0 <_printf_float+0x240>
 800a088:	e767      	b.n	8009f5a <_printf_float+0xba>
 800a08a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a08e:	f240 80dc 	bls.w	800a24a <_printf_float+0x3aa>
 800a092:	2200      	movs	r2, #0
 800a094:	2300      	movs	r3, #0
 800a096:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a09a:	f7f6 fd25 	bl	8000ae8 <__aeabi_dcmpeq>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d033      	beq.n	800a10a <_printf_float+0x26a>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4a41      	ldr	r2, [pc, #260]	; (800a1ac <_printf_float+0x30c>)
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f af54 	beq.w	8009f5a <_printf_float+0xba>
 800a0b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	db02      	blt.n	800a0c0 <_printf_float+0x220>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	07d8      	lsls	r0, r3, #31
 800a0be:	d50f      	bpl.n	800a0e0 <_printf_float+0x240>
 800a0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f43f af45 	beq.w	8009f5a <_printf_float+0xba>
 800a0d0:	f04f 0800 	mov.w	r8, #0
 800a0d4:	f104 091a 	add.w	r9, r4, #26
 800a0d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	4543      	cmp	r3, r8
 800a0de:	dc09      	bgt.n	800a0f4 <_printf_float+0x254>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	079b      	lsls	r3, r3, #30
 800a0e4:	f100 8103 	bmi.w	800a2ee <_printf_float+0x44e>
 800a0e8:	68e0      	ldr	r0, [r4, #12]
 800a0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ec:	4298      	cmp	r0, r3
 800a0ee:	bfb8      	it	lt
 800a0f0:	4618      	movlt	r0, r3
 800a0f2:	e734      	b.n	8009f5e <_printf_float+0xbe>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	464a      	mov	r2, r9
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	47b8      	blx	r7
 800a0fe:	3001      	adds	r0, #1
 800a100:	f43f af2b 	beq.w	8009f5a <_printf_float+0xba>
 800a104:	f108 0801 	add.w	r8, r8, #1
 800a108:	e7e6      	b.n	800a0d8 <_printf_float+0x238>
 800a10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dc2b      	bgt.n	800a168 <_printf_float+0x2c8>
 800a110:	2301      	movs	r3, #1
 800a112:	4a26      	ldr	r2, [pc, #152]	; (800a1ac <_printf_float+0x30c>)
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	47b8      	blx	r7
 800a11a:	3001      	adds	r0, #1
 800a11c:	f43f af1d 	beq.w	8009f5a <_printf_float+0xba>
 800a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a122:	b923      	cbnz	r3, 800a12e <_printf_float+0x28e>
 800a124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a126:	b913      	cbnz	r3, 800a12e <_printf_float+0x28e>
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	07d9      	lsls	r1, r3, #31
 800a12c:	d5d8      	bpl.n	800a0e0 <_printf_float+0x240>
 800a12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f af0e 	beq.w	8009f5a <_printf_float+0xba>
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	f104 0a1a 	add.w	sl, r4, #26
 800a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a148:	425b      	negs	r3, r3
 800a14a:	454b      	cmp	r3, r9
 800a14c:	dc01      	bgt.n	800a152 <_printf_float+0x2b2>
 800a14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a150:	e794      	b.n	800a07c <_printf_float+0x1dc>
 800a152:	2301      	movs	r3, #1
 800a154:	4652      	mov	r2, sl
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f aefc 	beq.w	8009f5a <_printf_float+0xba>
 800a162:	f109 0901 	add.w	r9, r9, #1
 800a166:	e7ee      	b.n	800a146 <_printf_float+0x2a6>
 800a168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a16a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a16c:	429a      	cmp	r2, r3
 800a16e:	bfa8      	it	ge
 800a170:	461a      	movge	r2, r3
 800a172:	2a00      	cmp	r2, #0
 800a174:	4691      	mov	r9, r2
 800a176:	dd07      	ble.n	800a188 <_printf_float+0x2e8>
 800a178:	4613      	mov	r3, r2
 800a17a:	4631      	mov	r1, r6
 800a17c:	4642      	mov	r2, r8
 800a17e:	4628      	mov	r0, r5
 800a180:	47b8      	blx	r7
 800a182:	3001      	adds	r0, #1
 800a184:	f43f aee9 	beq.w	8009f5a <_printf_float+0xba>
 800a188:	f104 031a 	add.w	r3, r4, #26
 800a18c:	f04f 0b00 	mov.w	fp, #0
 800a190:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a194:	9306      	str	r3, [sp, #24]
 800a196:	e015      	b.n	800a1c4 <_printf_float+0x324>
 800a198:	7fefffff 	.word	0x7fefffff
 800a19c:	0800c4b4 	.word	0x0800c4b4
 800a1a0:	0800c4b0 	.word	0x0800c4b0
 800a1a4:	0800c4bc 	.word	0x0800c4bc
 800a1a8:	0800c4b8 	.word	0x0800c4b8
 800a1ac:	0800c4c0 	.word	0x0800c4c0
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f43f aecd 	beq.w	8009f5a <_printf_float+0xba>
 800a1c0:	f10b 0b01 	add.w	fp, fp, #1
 800a1c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a1c8:	ebaa 0309 	sub.w	r3, sl, r9
 800a1cc:	455b      	cmp	r3, fp
 800a1ce:	dcef      	bgt.n	800a1b0 <_printf_float+0x310>
 800a1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	44d0      	add	r8, sl
 800a1d8:	db15      	blt.n	800a206 <_printf_float+0x366>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	07da      	lsls	r2, r3, #31
 800a1de:	d412      	bmi.n	800a206 <_printf_float+0x366>
 800a1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e4:	eba3 020a 	sub.w	r2, r3, sl
 800a1e8:	eba3 0a01 	sub.w	sl, r3, r1
 800a1ec:	4592      	cmp	sl, r2
 800a1ee:	bfa8      	it	ge
 800a1f0:	4692      	movge	sl, r2
 800a1f2:	f1ba 0f00 	cmp.w	sl, #0
 800a1f6:	dc0e      	bgt.n	800a216 <_printf_float+0x376>
 800a1f8:	f04f 0800 	mov.w	r8, #0
 800a1fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a200:	f104 091a 	add.w	r9, r4, #26
 800a204:	e019      	b.n	800a23a <_printf_float+0x39a>
 800a206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a20a:	4631      	mov	r1, r6
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b8      	blx	r7
 800a210:	3001      	adds	r0, #1
 800a212:	d1e5      	bne.n	800a1e0 <_printf_float+0x340>
 800a214:	e6a1      	b.n	8009f5a <_printf_float+0xba>
 800a216:	4653      	mov	r3, sl
 800a218:	4642      	mov	r2, r8
 800a21a:	4631      	mov	r1, r6
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b8      	blx	r7
 800a220:	3001      	adds	r0, #1
 800a222:	d1e9      	bne.n	800a1f8 <_printf_float+0x358>
 800a224:	e699      	b.n	8009f5a <_printf_float+0xba>
 800a226:	2301      	movs	r3, #1
 800a228:	464a      	mov	r2, r9
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f ae92 	beq.w	8009f5a <_printf_float+0xba>
 800a236:	f108 0801 	add.w	r8, r8, #1
 800a23a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	eba3 030a 	sub.w	r3, r3, sl
 800a244:	4543      	cmp	r3, r8
 800a246:	dcee      	bgt.n	800a226 <_printf_float+0x386>
 800a248:	e74a      	b.n	800a0e0 <_printf_float+0x240>
 800a24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a24c:	2a01      	cmp	r2, #1
 800a24e:	dc01      	bgt.n	800a254 <_printf_float+0x3b4>
 800a250:	07db      	lsls	r3, r3, #31
 800a252:	d53a      	bpl.n	800a2ca <_printf_float+0x42a>
 800a254:	2301      	movs	r3, #1
 800a256:	4642      	mov	r2, r8
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f ae7b 	beq.w	8009f5a <_printf_float+0xba>
 800a264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	f108 0801 	add.w	r8, r8, #1
 800a274:	f43f ae71 	beq.w	8009f5a <_printf_float+0xba>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	2200      	movs	r2, #0
 800a27c:	f103 3aff 	add.w	sl, r3, #4294967295
 800a280:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a284:	2300      	movs	r3, #0
 800a286:	f7f6 fc2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a28a:	b9c8      	cbnz	r0, 800a2c0 <_printf_float+0x420>
 800a28c:	4653      	mov	r3, sl
 800a28e:	4642      	mov	r2, r8
 800a290:	4631      	mov	r1, r6
 800a292:	4628      	mov	r0, r5
 800a294:	47b8      	blx	r7
 800a296:	3001      	adds	r0, #1
 800a298:	d10e      	bne.n	800a2b8 <_printf_float+0x418>
 800a29a:	e65e      	b.n	8009f5a <_printf_float+0xba>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4652      	mov	r2, sl
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f43f ae57 	beq.w	8009f5a <_printf_float+0xba>
 800a2ac:	f108 0801 	add.w	r8, r8, #1
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	4543      	cmp	r3, r8
 800a2b6:	dcf1      	bgt.n	800a29c <_printf_float+0x3fc>
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2be:	e6de      	b.n	800a07e <_printf_float+0x1de>
 800a2c0:	f04f 0800 	mov.w	r8, #0
 800a2c4:	f104 0a1a 	add.w	sl, r4, #26
 800a2c8:	e7f2      	b.n	800a2b0 <_printf_float+0x410>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e7df      	b.n	800a28e <_printf_float+0x3ee>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	464a      	mov	r2, r9
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b8      	blx	r7
 800a2d8:	3001      	adds	r0, #1
 800a2da:	f43f ae3e 	beq.w	8009f5a <_printf_float+0xba>
 800a2de:	f108 0801 	add.w	r8, r8, #1
 800a2e2:	68e3      	ldr	r3, [r4, #12]
 800a2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	4543      	cmp	r3, r8
 800a2ea:	dcf0      	bgt.n	800a2ce <_printf_float+0x42e>
 800a2ec:	e6fc      	b.n	800a0e8 <_printf_float+0x248>
 800a2ee:	f04f 0800 	mov.w	r8, #0
 800a2f2:	f104 0919 	add.w	r9, r4, #25
 800a2f6:	e7f4      	b.n	800a2e2 <_printf_float+0x442>
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	f43f ae8b 	beq.w	800a014 <_printf_float+0x174>
 800a2fe:	2300      	movs	r3, #0
 800a300:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a304:	ab09      	add	r3, sp, #36	; 0x24
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	ec49 8b10 	vmov	d0, r8, r9
 800a30c:	6022      	str	r2, [r4, #0]
 800a30e:	f8cd a004 	str.w	sl, [sp, #4]
 800a312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a316:	4628      	mov	r0, r5
 800a318:	f7ff fd2e 	bl	8009d78 <__cvt>
 800a31c:	4680      	mov	r8, r0
 800a31e:	e648      	b.n	8009fb2 <_printf_float+0x112>

0800a320 <_printf_common>:
 800a320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	4691      	mov	r9, r2
 800a326:	461f      	mov	r7, r3
 800a328:	688a      	ldr	r2, [r1, #8]
 800a32a:	690b      	ldr	r3, [r1, #16]
 800a32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a330:	4293      	cmp	r3, r2
 800a332:	bfb8      	it	lt
 800a334:	4613      	movlt	r3, r2
 800a336:	f8c9 3000 	str.w	r3, [r9]
 800a33a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a33e:	4606      	mov	r6, r0
 800a340:	460c      	mov	r4, r1
 800a342:	b112      	cbz	r2, 800a34a <_printf_common+0x2a>
 800a344:	3301      	adds	r3, #1
 800a346:	f8c9 3000 	str.w	r3, [r9]
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	0699      	lsls	r1, r3, #26
 800a34e:	bf42      	ittt	mi
 800a350:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a354:	3302      	addmi	r3, #2
 800a356:	f8c9 3000 	strmi.w	r3, [r9]
 800a35a:	6825      	ldr	r5, [r4, #0]
 800a35c:	f015 0506 	ands.w	r5, r5, #6
 800a360:	d107      	bne.n	800a372 <_printf_common+0x52>
 800a362:	f104 0a19 	add.w	sl, r4, #25
 800a366:	68e3      	ldr	r3, [r4, #12]
 800a368:	f8d9 2000 	ldr.w	r2, [r9]
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	42ab      	cmp	r3, r5
 800a370:	dc28      	bgt.n	800a3c4 <_printf_common+0xa4>
 800a372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	3300      	adds	r3, #0
 800a37a:	bf18      	it	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	0692      	lsls	r2, r2, #26
 800a380:	d42d      	bmi.n	800a3de <_printf_common+0xbe>
 800a382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a386:	4639      	mov	r1, r7
 800a388:	4630      	mov	r0, r6
 800a38a:	47c0      	blx	r8
 800a38c:	3001      	adds	r0, #1
 800a38e:	d020      	beq.n	800a3d2 <_printf_common+0xb2>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	68e5      	ldr	r5, [r4, #12]
 800a394:	f8d9 2000 	ldr.w	r2, [r9]
 800a398:	f003 0306 	and.w	r3, r3, #6
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	bf08      	it	eq
 800a3a0:	1aad      	subeq	r5, r5, r2
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	6922      	ldr	r2, [r4, #16]
 800a3a6:	bf0c      	ite	eq
 800a3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3ac:	2500      	movne	r5, #0
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	bfc4      	itt	gt
 800a3b2:	1a9b      	subgt	r3, r3, r2
 800a3b4:	18ed      	addgt	r5, r5, r3
 800a3b6:	f04f 0900 	mov.w	r9, #0
 800a3ba:	341a      	adds	r4, #26
 800a3bc:	454d      	cmp	r5, r9
 800a3be:	d11a      	bne.n	800a3f6 <_printf_common+0xd6>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e008      	b.n	800a3d6 <_printf_common+0xb6>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	4652      	mov	r2, sl
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d103      	bne.n	800a3da <_printf_common+0xba>
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3da:	3501      	adds	r5, #1
 800a3dc:	e7c3      	b.n	800a366 <_printf_common+0x46>
 800a3de:	18e1      	adds	r1, r4, r3
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	2030      	movs	r0, #48	; 0x30
 800a3e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3e8:	4422      	add	r2, r4
 800a3ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	e7c5      	b.n	800a382 <_printf_common+0x62>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	47c0      	blx	r8
 800a400:	3001      	adds	r0, #1
 800a402:	d0e6      	beq.n	800a3d2 <_printf_common+0xb2>
 800a404:	f109 0901 	add.w	r9, r9, #1
 800a408:	e7d8      	b.n	800a3bc <_printf_common+0x9c>
	...

0800a40c <_printf_i>:
 800a40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a414:	460c      	mov	r4, r1
 800a416:	7e09      	ldrb	r1, [r1, #24]
 800a418:	b085      	sub	sp, #20
 800a41a:	296e      	cmp	r1, #110	; 0x6e
 800a41c:	4617      	mov	r7, r2
 800a41e:	4606      	mov	r6, r0
 800a420:	4698      	mov	r8, r3
 800a422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a424:	f000 80b3 	beq.w	800a58e <_printf_i+0x182>
 800a428:	d822      	bhi.n	800a470 <_printf_i+0x64>
 800a42a:	2963      	cmp	r1, #99	; 0x63
 800a42c:	d036      	beq.n	800a49c <_printf_i+0x90>
 800a42e:	d80a      	bhi.n	800a446 <_printf_i+0x3a>
 800a430:	2900      	cmp	r1, #0
 800a432:	f000 80b9 	beq.w	800a5a8 <_printf_i+0x19c>
 800a436:	2958      	cmp	r1, #88	; 0x58
 800a438:	f000 8083 	beq.w	800a542 <_printf_i+0x136>
 800a43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a444:	e032      	b.n	800a4ac <_printf_i+0xa0>
 800a446:	2964      	cmp	r1, #100	; 0x64
 800a448:	d001      	beq.n	800a44e <_printf_i+0x42>
 800a44a:	2969      	cmp	r1, #105	; 0x69
 800a44c:	d1f6      	bne.n	800a43c <_printf_i+0x30>
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	6813      	ldr	r3, [r2, #0]
 800a452:	0605      	lsls	r5, r0, #24
 800a454:	f103 0104 	add.w	r1, r3, #4
 800a458:	d52a      	bpl.n	800a4b0 <_printf_i+0xa4>
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6011      	str	r1, [r2, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	da03      	bge.n	800a46a <_printf_i+0x5e>
 800a462:	222d      	movs	r2, #45	; 0x2d
 800a464:	425b      	negs	r3, r3
 800a466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a46a:	486f      	ldr	r0, [pc, #444]	; (800a628 <_printf_i+0x21c>)
 800a46c:	220a      	movs	r2, #10
 800a46e:	e039      	b.n	800a4e4 <_printf_i+0xd8>
 800a470:	2973      	cmp	r1, #115	; 0x73
 800a472:	f000 809d 	beq.w	800a5b0 <_printf_i+0x1a4>
 800a476:	d808      	bhi.n	800a48a <_printf_i+0x7e>
 800a478:	296f      	cmp	r1, #111	; 0x6f
 800a47a:	d020      	beq.n	800a4be <_printf_i+0xb2>
 800a47c:	2970      	cmp	r1, #112	; 0x70
 800a47e:	d1dd      	bne.n	800a43c <_printf_i+0x30>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f043 0320 	orr.w	r3, r3, #32
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	e003      	b.n	800a492 <_printf_i+0x86>
 800a48a:	2975      	cmp	r1, #117	; 0x75
 800a48c:	d017      	beq.n	800a4be <_printf_i+0xb2>
 800a48e:	2978      	cmp	r1, #120	; 0x78
 800a490:	d1d4      	bne.n	800a43c <_printf_i+0x30>
 800a492:	2378      	movs	r3, #120	; 0x78
 800a494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a498:	4864      	ldr	r0, [pc, #400]	; (800a62c <_printf_i+0x220>)
 800a49a:	e055      	b.n	800a548 <_printf_i+0x13c>
 800a49c:	6813      	ldr	r3, [r2, #0]
 800a49e:	1d19      	adds	r1, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6011      	str	r1, [r2, #0]
 800a4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e08c      	b.n	800a5ca <_printf_i+0x1be>
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6011      	str	r1, [r2, #0]
 800a4b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4b8:	bf18      	it	ne
 800a4ba:	b21b      	sxthne	r3, r3
 800a4bc:	e7cf      	b.n	800a45e <_printf_i+0x52>
 800a4be:	6813      	ldr	r3, [r2, #0]
 800a4c0:	6825      	ldr	r5, [r4, #0]
 800a4c2:	1d18      	adds	r0, r3, #4
 800a4c4:	6010      	str	r0, [r2, #0]
 800a4c6:	0628      	lsls	r0, r5, #24
 800a4c8:	d501      	bpl.n	800a4ce <_printf_i+0xc2>
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	e002      	b.n	800a4d4 <_printf_i+0xc8>
 800a4ce:	0668      	lsls	r0, r5, #25
 800a4d0:	d5fb      	bpl.n	800a4ca <_printf_i+0xbe>
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	4854      	ldr	r0, [pc, #336]	; (800a628 <_printf_i+0x21c>)
 800a4d6:	296f      	cmp	r1, #111	; 0x6f
 800a4d8:	bf14      	ite	ne
 800a4da:	220a      	movne	r2, #10
 800a4dc:	2208      	moveq	r2, #8
 800a4de:	2100      	movs	r1, #0
 800a4e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4e4:	6865      	ldr	r5, [r4, #4]
 800a4e6:	60a5      	str	r5, [r4, #8]
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	f2c0 8095 	blt.w	800a618 <_printf_i+0x20c>
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	f021 0104 	bic.w	r1, r1, #4
 800a4f4:	6021      	str	r1, [r4, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d13d      	bne.n	800a576 <_printf_i+0x16a>
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	f040 808e 	bne.w	800a61c <_printf_i+0x210>
 800a500:	4665      	mov	r5, ip
 800a502:	2a08      	cmp	r2, #8
 800a504:	d10b      	bne.n	800a51e <_printf_i+0x112>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	07db      	lsls	r3, r3, #31
 800a50a:	d508      	bpl.n	800a51e <_printf_i+0x112>
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	6862      	ldr	r2, [r4, #4]
 800a510:	429a      	cmp	r2, r3
 800a512:	bfde      	ittt	le
 800a514:	2330      	movle	r3, #48	; 0x30
 800a516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a51a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a51e:	ebac 0305 	sub.w	r3, ip, r5
 800a522:	6123      	str	r3, [r4, #16]
 800a524:	f8cd 8000 	str.w	r8, [sp]
 800a528:	463b      	mov	r3, r7
 800a52a:	aa03      	add	r2, sp, #12
 800a52c:	4621      	mov	r1, r4
 800a52e:	4630      	mov	r0, r6
 800a530:	f7ff fef6 	bl	800a320 <_printf_common>
 800a534:	3001      	adds	r0, #1
 800a536:	d14d      	bne.n	800a5d4 <_printf_i+0x1c8>
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	b005      	add	sp, #20
 800a53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a542:	4839      	ldr	r0, [pc, #228]	; (800a628 <_printf_i+0x21c>)
 800a544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a548:	6813      	ldr	r3, [r2, #0]
 800a54a:	6821      	ldr	r1, [r4, #0]
 800a54c:	1d1d      	adds	r5, r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6015      	str	r5, [r2, #0]
 800a552:	060a      	lsls	r2, r1, #24
 800a554:	d50b      	bpl.n	800a56e <_printf_i+0x162>
 800a556:	07ca      	lsls	r2, r1, #31
 800a558:	bf44      	itt	mi
 800a55a:	f041 0120 	orrmi.w	r1, r1, #32
 800a55e:	6021      	strmi	r1, [r4, #0]
 800a560:	b91b      	cbnz	r3, 800a56a <_printf_i+0x15e>
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	f022 0220 	bic.w	r2, r2, #32
 800a568:	6022      	str	r2, [r4, #0]
 800a56a:	2210      	movs	r2, #16
 800a56c:	e7b7      	b.n	800a4de <_printf_i+0xd2>
 800a56e:	064d      	lsls	r5, r1, #25
 800a570:	bf48      	it	mi
 800a572:	b29b      	uxthmi	r3, r3
 800a574:	e7ef      	b.n	800a556 <_printf_i+0x14a>
 800a576:	4665      	mov	r5, ip
 800a578:	fbb3 f1f2 	udiv	r1, r3, r2
 800a57c:	fb02 3311 	mls	r3, r2, r1, r3
 800a580:	5cc3      	ldrb	r3, [r0, r3]
 800a582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a586:	460b      	mov	r3, r1
 800a588:	2900      	cmp	r1, #0
 800a58a:	d1f5      	bne.n	800a578 <_printf_i+0x16c>
 800a58c:	e7b9      	b.n	800a502 <_printf_i+0xf6>
 800a58e:	6813      	ldr	r3, [r2, #0]
 800a590:	6825      	ldr	r5, [r4, #0]
 800a592:	6961      	ldr	r1, [r4, #20]
 800a594:	1d18      	adds	r0, r3, #4
 800a596:	6010      	str	r0, [r2, #0]
 800a598:	0628      	lsls	r0, r5, #24
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	d501      	bpl.n	800a5a2 <_printf_i+0x196>
 800a59e:	6019      	str	r1, [r3, #0]
 800a5a0:	e002      	b.n	800a5a8 <_printf_i+0x19c>
 800a5a2:	066a      	lsls	r2, r5, #25
 800a5a4:	d5fb      	bpl.n	800a59e <_printf_i+0x192>
 800a5a6:	8019      	strh	r1, [r3, #0]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6123      	str	r3, [r4, #16]
 800a5ac:	4665      	mov	r5, ip
 800a5ae:	e7b9      	b.n	800a524 <_printf_i+0x118>
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	1d19      	adds	r1, r3, #4
 800a5b4:	6011      	str	r1, [r2, #0]
 800a5b6:	681d      	ldr	r5, [r3, #0]
 800a5b8:	6862      	ldr	r2, [r4, #4]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7f5 fe1f 	bl	8000200 <memchr>
 800a5c2:	b108      	cbz	r0, 800a5c8 <_printf_i+0x1bc>
 800a5c4:	1b40      	subs	r0, r0, r5
 800a5c6:	6060      	str	r0, [r4, #4]
 800a5c8:	6863      	ldr	r3, [r4, #4]
 800a5ca:	6123      	str	r3, [r4, #16]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d2:	e7a7      	b.n	800a524 <_printf_i+0x118>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d0aa      	beq.n	800a538 <_printf_i+0x12c>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	079b      	lsls	r3, r3, #30
 800a5e6:	d413      	bmi.n	800a610 <_printf_i+0x204>
 800a5e8:	68e0      	ldr	r0, [r4, #12]
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	4298      	cmp	r0, r3
 800a5ee:	bfb8      	it	lt
 800a5f0:	4618      	movlt	r0, r3
 800a5f2:	e7a3      	b.n	800a53c <_printf_i+0x130>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	464a      	mov	r2, r9
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	47c0      	blx	r8
 800a5fe:	3001      	adds	r0, #1
 800a600:	d09a      	beq.n	800a538 <_printf_i+0x12c>
 800a602:	3501      	adds	r5, #1
 800a604:	68e3      	ldr	r3, [r4, #12]
 800a606:	9a03      	ldr	r2, [sp, #12]
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	42ab      	cmp	r3, r5
 800a60c:	dcf2      	bgt.n	800a5f4 <_printf_i+0x1e8>
 800a60e:	e7eb      	b.n	800a5e8 <_printf_i+0x1dc>
 800a610:	2500      	movs	r5, #0
 800a612:	f104 0919 	add.w	r9, r4, #25
 800a616:	e7f5      	b.n	800a604 <_printf_i+0x1f8>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1ac      	bne.n	800a576 <_printf_i+0x16a>
 800a61c:	7803      	ldrb	r3, [r0, #0]
 800a61e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a626:	e76c      	b.n	800a502 <_printf_i+0xf6>
 800a628:	0800c4c2 	.word	0x0800c4c2
 800a62c:	0800c4d3 	.word	0x0800c4d3

0800a630 <siprintf>:
 800a630:	b40e      	push	{r1, r2, r3}
 800a632:	b500      	push	{lr}
 800a634:	b09c      	sub	sp, #112	; 0x70
 800a636:	ab1d      	add	r3, sp, #116	; 0x74
 800a638:	9002      	str	r0, [sp, #8]
 800a63a:	9006      	str	r0, [sp, #24]
 800a63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a640:	4809      	ldr	r0, [pc, #36]	; (800a668 <siprintf+0x38>)
 800a642:	9107      	str	r1, [sp, #28]
 800a644:	9104      	str	r1, [sp, #16]
 800a646:	4909      	ldr	r1, [pc, #36]	; (800a66c <siprintf+0x3c>)
 800a648:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64c:	9105      	str	r1, [sp, #20]
 800a64e:	6800      	ldr	r0, [r0, #0]
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	a902      	add	r1, sp, #8
 800a654:	f001 fb12 	bl	800bc7c <_svfiprintf_r>
 800a658:	9b02      	ldr	r3, [sp, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	701a      	strb	r2, [r3, #0]
 800a65e:	b01c      	add	sp, #112	; 0x70
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	b003      	add	sp, #12
 800a666:	4770      	bx	lr
 800a668:	20000068 	.word	0x20000068
 800a66c:	ffff0208 	.word	0xffff0208

0800a670 <strcat>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4603      	mov	r3, r0
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	1c5c      	adds	r4, r3, #1
 800a678:	b93a      	cbnz	r2, 800a68a <strcat+0x1a>
 800a67a:	3b01      	subs	r3, #1
 800a67c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a680:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a684:	2a00      	cmp	r2, #0
 800a686:	d1f9      	bne.n	800a67c <strcat+0xc>
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	4623      	mov	r3, r4
 800a68c:	e7f2      	b.n	800a674 <strcat+0x4>

0800a68e <_strtol_l.isra.0>:
 800a68e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a692:	4680      	mov	r8, r0
 800a694:	4689      	mov	r9, r1
 800a696:	4692      	mov	sl, r2
 800a698:	461e      	mov	r6, r3
 800a69a:	460f      	mov	r7, r1
 800a69c:	463d      	mov	r5, r7
 800a69e:	9808      	ldr	r0, [sp, #32]
 800a6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6a4:	f000 fec8 	bl	800b438 <__locale_ctype_ptr_l>
 800a6a8:	4420      	add	r0, r4
 800a6aa:	7843      	ldrb	r3, [r0, #1]
 800a6ac:	f013 0308 	ands.w	r3, r3, #8
 800a6b0:	d132      	bne.n	800a718 <_strtol_l.isra.0+0x8a>
 800a6b2:	2c2d      	cmp	r4, #45	; 0x2d
 800a6b4:	d132      	bne.n	800a71c <_strtol_l.isra.0+0x8e>
 800a6b6:	787c      	ldrb	r4, [r7, #1]
 800a6b8:	1cbd      	adds	r5, r7, #2
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	d05d      	beq.n	800a77c <_strtol_l.isra.0+0xee>
 800a6c0:	2e10      	cmp	r6, #16
 800a6c2:	d109      	bne.n	800a6d8 <_strtol_l.isra.0+0x4a>
 800a6c4:	2c30      	cmp	r4, #48	; 0x30
 800a6c6:	d107      	bne.n	800a6d8 <_strtol_l.isra.0+0x4a>
 800a6c8:	782b      	ldrb	r3, [r5, #0]
 800a6ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6ce:	2b58      	cmp	r3, #88	; 0x58
 800a6d0:	d14f      	bne.n	800a772 <_strtol_l.isra.0+0xe4>
 800a6d2:	786c      	ldrb	r4, [r5, #1]
 800a6d4:	2610      	movs	r6, #16
 800a6d6:	3502      	adds	r5, #2
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	bf14      	ite	ne
 800a6dc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a6e0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a6e4:	2700      	movs	r7, #0
 800a6e6:	fbb1 fcf6 	udiv	ip, r1, r6
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a6f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	d817      	bhi.n	800a728 <_strtol_l.isra.0+0x9a>
 800a6f8:	461c      	mov	r4, r3
 800a6fa:	42a6      	cmp	r6, r4
 800a6fc:	dd23      	ble.n	800a746 <_strtol_l.isra.0+0xb8>
 800a6fe:	1c7b      	adds	r3, r7, #1
 800a700:	d007      	beq.n	800a712 <_strtol_l.isra.0+0x84>
 800a702:	4584      	cmp	ip, r0
 800a704:	d31c      	bcc.n	800a740 <_strtol_l.isra.0+0xb2>
 800a706:	d101      	bne.n	800a70c <_strtol_l.isra.0+0x7e>
 800a708:	45a6      	cmp	lr, r4
 800a70a:	db19      	blt.n	800a740 <_strtol_l.isra.0+0xb2>
 800a70c:	fb00 4006 	mla	r0, r0, r6, r4
 800a710:	2701      	movs	r7, #1
 800a712:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a716:	e7eb      	b.n	800a6f0 <_strtol_l.isra.0+0x62>
 800a718:	462f      	mov	r7, r5
 800a71a:	e7bf      	b.n	800a69c <_strtol_l.isra.0+0xe>
 800a71c:	2c2b      	cmp	r4, #43	; 0x2b
 800a71e:	bf04      	itt	eq
 800a720:	1cbd      	addeq	r5, r7, #2
 800a722:	787c      	ldrbeq	r4, [r7, #1]
 800a724:	461a      	mov	r2, r3
 800a726:	e7c9      	b.n	800a6bc <_strtol_l.isra.0+0x2e>
 800a728:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a72c:	2b19      	cmp	r3, #25
 800a72e:	d801      	bhi.n	800a734 <_strtol_l.isra.0+0xa6>
 800a730:	3c37      	subs	r4, #55	; 0x37
 800a732:	e7e2      	b.n	800a6fa <_strtol_l.isra.0+0x6c>
 800a734:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a738:	2b19      	cmp	r3, #25
 800a73a:	d804      	bhi.n	800a746 <_strtol_l.isra.0+0xb8>
 800a73c:	3c57      	subs	r4, #87	; 0x57
 800a73e:	e7dc      	b.n	800a6fa <_strtol_l.isra.0+0x6c>
 800a740:	f04f 37ff 	mov.w	r7, #4294967295
 800a744:	e7e5      	b.n	800a712 <_strtol_l.isra.0+0x84>
 800a746:	1c7b      	adds	r3, r7, #1
 800a748:	d108      	bne.n	800a75c <_strtol_l.isra.0+0xce>
 800a74a:	2322      	movs	r3, #34	; 0x22
 800a74c:	f8c8 3000 	str.w	r3, [r8]
 800a750:	4608      	mov	r0, r1
 800a752:	f1ba 0f00 	cmp.w	sl, #0
 800a756:	d107      	bne.n	800a768 <_strtol_l.isra.0+0xda>
 800a758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75c:	b102      	cbz	r2, 800a760 <_strtol_l.isra.0+0xd2>
 800a75e:	4240      	negs	r0, r0
 800a760:	f1ba 0f00 	cmp.w	sl, #0
 800a764:	d0f8      	beq.n	800a758 <_strtol_l.isra.0+0xca>
 800a766:	b10f      	cbz	r7, 800a76c <_strtol_l.isra.0+0xde>
 800a768:	f105 39ff 	add.w	r9, r5, #4294967295
 800a76c:	f8ca 9000 	str.w	r9, [sl]
 800a770:	e7f2      	b.n	800a758 <_strtol_l.isra.0+0xca>
 800a772:	2430      	movs	r4, #48	; 0x30
 800a774:	2e00      	cmp	r6, #0
 800a776:	d1af      	bne.n	800a6d8 <_strtol_l.isra.0+0x4a>
 800a778:	2608      	movs	r6, #8
 800a77a:	e7ad      	b.n	800a6d8 <_strtol_l.isra.0+0x4a>
 800a77c:	2c30      	cmp	r4, #48	; 0x30
 800a77e:	d0a3      	beq.n	800a6c8 <_strtol_l.isra.0+0x3a>
 800a780:	260a      	movs	r6, #10
 800a782:	e7a9      	b.n	800a6d8 <_strtol_l.isra.0+0x4a>

0800a784 <strtol>:
 800a784:	4b08      	ldr	r3, [pc, #32]	; (800a7a8 <strtol+0x24>)
 800a786:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a788:	681c      	ldr	r4, [r3, #0]
 800a78a:	4d08      	ldr	r5, [pc, #32]	; (800a7ac <strtol+0x28>)
 800a78c:	6a23      	ldr	r3, [r4, #32]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bf08      	it	eq
 800a792:	462b      	moveq	r3, r5
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	4613      	mov	r3, r2
 800a798:	460a      	mov	r2, r1
 800a79a:	4601      	mov	r1, r0
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7ff ff76 	bl	800a68e <_strtol_l.isra.0>
 800a7a2:	b003      	add	sp, #12
 800a7a4:	bd30      	pop	{r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000068 	.word	0x20000068
 800a7ac:	200000cc 	.word	0x200000cc

0800a7b0 <quorem>:
 800a7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	6903      	ldr	r3, [r0, #16]
 800a7b6:	690c      	ldr	r4, [r1, #16]
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	f2c0 8082 	blt.w	800a8c4 <quorem+0x114>
 800a7c0:	3c01      	subs	r4, #1
 800a7c2:	f101 0714 	add.w	r7, r1, #20
 800a7c6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a7ca:	f100 0614 	add.w	r6, r0, #20
 800a7ce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a7d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a7d6:	eb06 030c 	add.w	r3, r6, ip
 800a7da:	3501      	adds	r5, #1
 800a7dc:	eb07 090c 	add.w	r9, r7, ip
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	fbb0 f5f5 	udiv	r5, r0, r5
 800a7e6:	b395      	cbz	r5, 800a84e <quorem+0x9e>
 800a7e8:	f04f 0a00 	mov.w	sl, #0
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	46b6      	mov	lr, r6
 800a7f0:	46d3      	mov	fp, sl
 800a7f2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7f6:	b293      	uxth	r3, r2
 800a7f8:	fb05 a303 	mla	r3, r5, r3, sl
 800a7fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a800:	b29b      	uxth	r3, r3
 800a802:	ebab 0303 	sub.w	r3, fp, r3
 800a806:	0c12      	lsrs	r2, r2, #16
 800a808:	f8de b000 	ldr.w	fp, [lr]
 800a80c:	fb05 a202 	mla	r2, r5, r2, sl
 800a810:	fa13 f38b 	uxtah	r3, r3, fp
 800a814:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a818:	fa1f fb82 	uxth.w	fp, r2
 800a81c:	f8de 2000 	ldr.w	r2, [lr]
 800a820:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a828:	b29b      	uxth	r3, r3
 800a82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a82e:	4581      	cmp	r9, r0
 800a830:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a834:	f84e 3b04 	str.w	r3, [lr], #4
 800a838:	d2db      	bcs.n	800a7f2 <quorem+0x42>
 800a83a:	f856 300c 	ldr.w	r3, [r6, ip]
 800a83e:	b933      	cbnz	r3, 800a84e <quorem+0x9e>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	3b04      	subs	r3, #4
 800a844:	429e      	cmp	r6, r3
 800a846:	461a      	mov	r2, r3
 800a848:	d330      	bcc.n	800a8ac <quorem+0xfc>
 800a84a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a84e:	4640      	mov	r0, r8
 800a850:	f001 f83e 	bl	800b8d0 <__mcmp>
 800a854:	2800      	cmp	r0, #0
 800a856:	db25      	blt.n	800a8a4 <quorem+0xf4>
 800a858:	3501      	adds	r5, #1
 800a85a:	4630      	mov	r0, r6
 800a85c:	f04f 0c00 	mov.w	ip, #0
 800a860:	f857 2b04 	ldr.w	r2, [r7], #4
 800a864:	f8d0 e000 	ldr.w	lr, [r0]
 800a868:	b293      	uxth	r3, r2
 800a86a:	ebac 0303 	sub.w	r3, ip, r3
 800a86e:	0c12      	lsrs	r2, r2, #16
 800a870:	fa13 f38e 	uxtah	r3, r3, lr
 800a874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a882:	45b9      	cmp	r9, r7
 800a884:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a888:	f840 3b04 	str.w	r3, [r0], #4
 800a88c:	d2e8      	bcs.n	800a860 <quorem+0xb0>
 800a88e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a892:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a896:	b92a      	cbnz	r2, 800a8a4 <quorem+0xf4>
 800a898:	3b04      	subs	r3, #4
 800a89a:	429e      	cmp	r6, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	d30b      	bcc.n	800a8b8 <quorem+0x108>
 800a8a0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	3b04      	subs	r3, #4
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	d1ca      	bne.n	800a84a <quorem+0x9a>
 800a8b4:	3c01      	subs	r4, #1
 800a8b6:	e7c5      	b.n	800a844 <quorem+0x94>
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	3b04      	subs	r3, #4
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d1ef      	bne.n	800a8a0 <quorem+0xf0>
 800a8c0:	3c01      	subs	r4, #1
 800a8c2:	e7ea      	b.n	800a89a <quorem+0xea>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7ee      	b.n	800a8a6 <quorem+0xf6>

0800a8c8 <_dtoa_r>:
 800a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	ec57 6b10 	vmov	r6, r7, d0
 800a8d0:	b097      	sub	sp, #92	; 0x5c
 800a8d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8d4:	9106      	str	r1, [sp, #24]
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8da:	9312      	str	r3, [sp, #72]	; 0x48
 800a8dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8e0:	e9cd 6700 	strd	r6, r7, [sp]
 800a8e4:	b93d      	cbnz	r5, 800a8f6 <_dtoa_r+0x2e>
 800a8e6:	2010      	movs	r0, #16
 800a8e8:	f000 fdb8 	bl	800b45c <malloc>
 800a8ec:	6260      	str	r0, [r4, #36]	; 0x24
 800a8ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8f2:	6005      	str	r5, [r0, #0]
 800a8f4:	60c5      	str	r5, [r0, #12]
 800a8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f8:	6819      	ldr	r1, [r3, #0]
 800a8fa:	b151      	cbz	r1, 800a912 <_dtoa_r+0x4a>
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	604a      	str	r2, [r1, #4]
 800a900:	2301      	movs	r3, #1
 800a902:	4093      	lsls	r3, r2
 800a904:	608b      	str	r3, [r1, #8]
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fe01 	bl	800b50e <_Bfree>
 800a90c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	1e3b      	subs	r3, r7, #0
 800a914:	bfbb      	ittet	lt
 800a916:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a91a:	9301      	strlt	r3, [sp, #4]
 800a91c:	2300      	movge	r3, #0
 800a91e:	2201      	movlt	r2, #1
 800a920:	bfac      	ite	ge
 800a922:	f8c8 3000 	strge.w	r3, [r8]
 800a926:	f8c8 2000 	strlt.w	r2, [r8]
 800a92a:	4baf      	ldr	r3, [pc, #700]	; (800abe8 <_dtoa_r+0x320>)
 800a92c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a930:	ea33 0308 	bics.w	r3, r3, r8
 800a934:	d114      	bne.n	800a960 <_dtoa_r+0x98>
 800a936:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a938:	f242 730f 	movw	r3, #9999	; 0x270f
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	9b00      	ldr	r3, [sp, #0]
 800a940:	b923      	cbnz	r3, 800a94c <_dtoa_r+0x84>
 800a942:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a946:	2800      	cmp	r0, #0
 800a948:	f000 8542 	beq.w	800b3d0 <_dtoa_r+0xb08>
 800a94c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a94e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800abfc <_dtoa_r+0x334>
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 8544 	beq.w	800b3e0 <_dtoa_r+0xb18>
 800a958:	f10b 0303 	add.w	r3, fp, #3
 800a95c:	f000 bd3e 	b.w	800b3dc <_dtoa_r+0xb14>
 800a960:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a964:	2200      	movs	r2, #0
 800a966:	2300      	movs	r3, #0
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f6 f8bc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a970:	4681      	mov	r9, r0
 800a972:	b168      	cbz	r0, 800a990 <_dtoa_r+0xc8>
 800a974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a976:	2301      	movs	r3, #1
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8524 	beq.w	800b3ca <_dtoa_r+0xb02>
 800a982:	4b9a      	ldr	r3, [pc, #616]	; (800abec <_dtoa_r+0x324>)
 800a984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a986:	f103 3bff 	add.w	fp, r3, #4294967295
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	f000 bd28 	b.w	800b3e0 <_dtoa_r+0xb18>
 800a990:	aa14      	add	r2, sp, #80	; 0x50
 800a992:	a915      	add	r1, sp, #84	; 0x54
 800a994:	ec47 6b10 	vmov	d0, r6, r7
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 f810 	bl	800b9be <__d2b>
 800a99e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9a2:	9004      	str	r0, [sp, #16]
 800a9a4:	2d00      	cmp	r5, #0
 800a9a6:	d07c      	beq.n	800aaa2 <_dtoa_r+0x1da>
 800a9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a9b0:	46b2      	mov	sl, r6
 800a9b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a9b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a9be:	2200      	movs	r2, #0
 800a9c0:	4b8b      	ldr	r3, [pc, #556]	; (800abf0 <_dtoa_r+0x328>)
 800a9c2:	4650      	mov	r0, sl
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	f7f5 fc6f 	bl	80002a8 <__aeabi_dsub>
 800a9ca:	a381      	add	r3, pc, #516	; (adr r3, 800abd0 <_dtoa_r+0x308>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fe22 	bl	8000618 <__aeabi_dmul>
 800a9d4:	a380      	add	r3, pc, #512	; (adr r3, 800abd8 <_dtoa_r+0x310>)
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f7f5 fc67 	bl	80002ac <__adddf3>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	f7f5 fdae 	bl	8000544 <__aeabi_i2d>
 800a9e8:	a37d      	add	r3, pc, #500	; (adr r3, 800abe0 <_dtoa_r+0x318>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f5 fe13 	bl	8000618 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	f7f5 fc57 	bl	80002ac <__adddf3>
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	f7f6 f8b9 	bl	8000b78 <__aeabi_d2iz>
 800aa06:	2200      	movs	r2, #0
 800aa08:	4682      	mov	sl, r0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f6 f874 	bl	8000afc <__aeabi_dcmplt>
 800aa14:	b148      	cbz	r0, 800aa2a <_dtoa_r+0x162>
 800aa16:	4650      	mov	r0, sl
 800aa18:	f7f5 fd94 	bl	8000544 <__aeabi_i2d>
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	463b      	mov	r3, r7
 800aa20:	f7f6 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa24:	b908      	cbnz	r0, 800aa2a <_dtoa_r+0x162>
 800aa26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa2a:	f1ba 0f16 	cmp.w	sl, #22
 800aa2e:	d859      	bhi.n	800aae4 <_dtoa_r+0x21c>
 800aa30:	4970      	ldr	r1, [pc, #448]	; (800abf4 <_dtoa_r+0x32c>)
 800aa32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aa36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa3e:	f7f6 f87b 	bl	8000b38 <__aeabi_dcmpgt>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d050      	beq.n	800aae8 <_dtoa_r+0x220>
 800aa46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa50:	1b5d      	subs	r5, r3, r5
 800aa52:	f1b5 0801 	subs.w	r8, r5, #1
 800aa56:	bf49      	itett	mi
 800aa58:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa5c:	2300      	movpl	r3, #0
 800aa5e:	9305      	strmi	r3, [sp, #20]
 800aa60:	f04f 0800 	movmi.w	r8, #0
 800aa64:	bf58      	it	pl
 800aa66:	9305      	strpl	r3, [sp, #20]
 800aa68:	f1ba 0f00 	cmp.w	sl, #0
 800aa6c:	db3e      	blt.n	800aaec <_dtoa_r+0x224>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	44d0      	add	r8, sl
 800aa72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa76:	9307      	str	r3, [sp, #28]
 800aa78:	9b06      	ldr	r3, [sp, #24]
 800aa7a:	2b09      	cmp	r3, #9
 800aa7c:	f200 8090 	bhi.w	800aba0 <_dtoa_r+0x2d8>
 800aa80:	2b05      	cmp	r3, #5
 800aa82:	bfc4      	itt	gt
 800aa84:	3b04      	subgt	r3, #4
 800aa86:	9306      	strgt	r3, [sp, #24]
 800aa88:	9b06      	ldr	r3, [sp, #24]
 800aa8a:	f1a3 0302 	sub.w	r3, r3, #2
 800aa8e:	bfcc      	ite	gt
 800aa90:	2500      	movgt	r5, #0
 800aa92:	2501      	movle	r5, #1
 800aa94:	2b03      	cmp	r3, #3
 800aa96:	f200 808f 	bhi.w	800abb8 <_dtoa_r+0x2f0>
 800aa9a:	e8df f003 	tbb	[pc, r3]
 800aa9e:	7f7d      	.short	0x7f7d
 800aaa0:	7131      	.short	0x7131
 800aaa2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aaa6:	441d      	add	r5, r3
 800aaa8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aaac:	2820      	cmp	r0, #32
 800aaae:	dd13      	ble.n	800aad8 <_dtoa_r+0x210>
 800aab0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	fa08 f800 	lsl.w	r8, r8, r0
 800aaba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aabe:	fa23 f000 	lsr.w	r0, r3, r0
 800aac2:	ea48 0000 	orr.w	r0, r8, r0
 800aac6:	f7f5 fd2d 	bl	8000524 <__aeabi_ui2d>
 800aaca:	2301      	movs	r3, #1
 800aacc:	4682      	mov	sl, r0
 800aace:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aad2:	3d01      	subs	r5, #1
 800aad4:	9313      	str	r3, [sp, #76]	; 0x4c
 800aad6:	e772      	b.n	800a9be <_dtoa_r+0xf6>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	f1c0 0020 	rsb	r0, r0, #32
 800aade:	fa03 f000 	lsl.w	r0, r3, r0
 800aae2:	e7f0      	b.n	800aac6 <_dtoa_r+0x1fe>
 800aae4:	2301      	movs	r3, #1
 800aae6:	e7b1      	b.n	800aa4c <_dtoa_r+0x184>
 800aae8:	900f      	str	r0, [sp, #60]	; 0x3c
 800aaea:	e7b0      	b.n	800aa4e <_dtoa_r+0x186>
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	eba3 030a 	sub.w	r3, r3, sl
 800aaf2:	9305      	str	r3, [sp, #20]
 800aaf4:	f1ca 0300 	rsb	r3, sl, #0
 800aaf8:	9307      	str	r3, [sp, #28]
 800aafa:	2300      	movs	r3, #0
 800aafc:	930e      	str	r3, [sp, #56]	; 0x38
 800aafe:	e7bb      	b.n	800aa78 <_dtoa_r+0x1b0>
 800ab00:	2301      	movs	r3, #1
 800ab02:	930a      	str	r3, [sp, #40]	; 0x28
 800ab04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd59      	ble.n	800abbe <_dtoa_r+0x2f6>
 800ab0a:	9302      	str	r3, [sp, #8]
 800ab0c:	4699      	mov	r9, r3
 800ab0e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab10:	2200      	movs	r2, #0
 800ab12:	6072      	str	r2, [r6, #4]
 800ab14:	2204      	movs	r2, #4
 800ab16:	f102 0014 	add.w	r0, r2, #20
 800ab1a:	4298      	cmp	r0, r3
 800ab1c:	6871      	ldr	r1, [r6, #4]
 800ab1e:	d953      	bls.n	800abc8 <_dtoa_r+0x300>
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 fcc0 	bl	800b4a6 <_Balloc>
 800ab26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab28:	6030      	str	r0, [r6, #0]
 800ab2a:	f1b9 0f0e 	cmp.w	r9, #14
 800ab2e:	f8d3 b000 	ldr.w	fp, [r3]
 800ab32:	f200 80e6 	bhi.w	800ad02 <_dtoa_r+0x43a>
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	f000 80e3 	beq.w	800ad02 <_dtoa_r+0x43a>
 800ab3c:	ed9d 7b00 	vldr	d7, [sp]
 800ab40:	f1ba 0f00 	cmp.w	sl, #0
 800ab44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ab48:	dd74      	ble.n	800ac34 <_dtoa_r+0x36c>
 800ab4a:	4a2a      	ldr	r2, [pc, #168]	; (800abf4 <_dtoa_r+0x32c>)
 800ab4c:	f00a 030f 	and.w	r3, sl, #15
 800ab50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab54:	ed93 7b00 	vldr	d7, [r3]
 800ab58:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ab5c:	06f0      	lsls	r0, r6, #27
 800ab5e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab62:	d565      	bpl.n	800ac30 <_dtoa_r+0x368>
 800ab64:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <_dtoa_r+0x330>)
 800ab66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab6e:	f7f5 fe7d 	bl	800086c <__aeabi_ddiv>
 800ab72:	e9cd 0100 	strd	r0, r1, [sp]
 800ab76:	f006 060f 	and.w	r6, r6, #15
 800ab7a:	2503      	movs	r5, #3
 800ab7c:	4f1e      	ldr	r7, [pc, #120]	; (800abf8 <_dtoa_r+0x330>)
 800ab7e:	e04c      	b.n	800ac1a <_dtoa_r+0x352>
 800ab80:	2301      	movs	r3, #1
 800ab82:	930a      	str	r3, [sp, #40]	; 0x28
 800ab84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab86:	4453      	add	r3, sl
 800ab88:	f103 0901 	add.w	r9, r3, #1
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	464b      	mov	r3, r9
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	bfb8      	it	lt
 800ab94:	2301      	movlt	r3, #1
 800ab96:	e7ba      	b.n	800ab0e <_dtoa_r+0x246>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e7b2      	b.n	800ab02 <_dtoa_r+0x23a>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e7f0      	b.n	800ab82 <_dtoa_r+0x2ba>
 800aba0:	2501      	movs	r5, #1
 800aba2:	2300      	movs	r3, #0
 800aba4:	9306      	str	r3, [sp, #24]
 800aba6:	950a      	str	r5, [sp, #40]	; 0x28
 800aba8:	f04f 33ff 	mov.w	r3, #4294967295
 800abac:	9302      	str	r3, [sp, #8]
 800abae:	4699      	mov	r9, r3
 800abb0:	2200      	movs	r2, #0
 800abb2:	2312      	movs	r3, #18
 800abb4:	920b      	str	r2, [sp, #44]	; 0x2c
 800abb6:	e7aa      	b.n	800ab0e <_dtoa_r+0x246>
 800abb8:	2301      	movs	r3, #1
 800abba:	930a      	str	r3, [sp, #40]	; 0x28
 800abbc:	e7f4      	b.n	800aba8 <_dtoa_r+0x2e0>
 800abbe:	2301      	movs	r3, #1
 800abc0:	9302      	str	r3, [sp, #8]
 800abc2:	4699      	mov	r9, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	e7f5      	b.n	800abb4 <_dtoa_r+0x2ec>
 800abc8:	3101      	adds	r1, #1
 800abca:	6071      	str	r1, [r6, #4]
 800abcc:	0052      	lsls	r2, r2, #1
 800abce:	e7a2      	b.n	800ab16 <_dtoa_r+0x24e>
 800abd0:	636f4361 	.word	0x636f4361
 800abd4:	3fd287a7 	.word	0x3fd287a7
 800abd8:	8b60c8b3 	.word	0x8b60c8b3
 800abdc:	3fc68a28 	.word	0x3fc68a28
 800abe0:	509f79fb 	.word	0x509f79fb
 800abe4:	3fd34413 	.word	0x3fd34413
 800abe8:	7ff00000 	.word	0x7ff00000
 800abec:	0800c4c1 	.word	0x0800c4c1
 800abf0:	3ff80000 	.word	0x3ff80000
 800abf4:	0800c528 	.word	0x0800c528
 800abf8:	0800c500 	.word	0x0800c500
 800abfc:	0800c4ed 	.word	0x0800c4ed
 800ac00:	07f1      	lsls	r1, r6, #31
 800ac02:	d508      	bpl.n	800ac16 <_dtoa_r+0x34e>
 800ac04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac0c:	f7f5 fd04 	bl	8000618 <__aeabi_dmul>
 800ac10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac14:	3501      	adds	r5, #1
 800ac16:	1076      	asrs	r6, r6, #1
 800ac18:	3708      	adds	r7, #8
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d1f0      	bne.n	800ac00 <_dtoa_r+0x338>
 800ac1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac26:	f7f5 fe21 	bl	800086c <__aeabi_ddiv>
 800ac2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ac2e:	e01a      	b.n	800ac66 <_dtoa_r+0x39e>
 800ac30:	2502      	movs	r5, #2
 800ac32:	e7a3      	b.n	800ab7c <_dtoa_r+0x2b4>
 800ac34:	f000 80a0 	beq.w	800ad78 <_dtoa_r+0x4b0>
 800ac38:	f1ca 0600 	rsb	r6, sl, #0
 800ac3c:	4b9f      	ldr	r3, [pc, #636]	; (800aebc <_dtoa_r+0x5f4>)
 800ac3e:	4fa0      	ldr	r7, [pc, #640]	; (800aec0 <_dtoa_r+0x5f8>)
 800ac40:	f006 020f 	and.w	r2, r6, #15
 800ac44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac50:	f7f5 fce2 	bl	8000618 <__aeabi_dmul>
 800ac54:	e9cd 0100 	strd	r0, r1, [sp]
 800ac58:	1136      	asrs	r6, r6, #4
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2502      	movs	r5, #2
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	d17f      	bne.n	800ad62 <_dtoa_r+0x49a>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e1      	bne.n	800ac2a <_dtoa_r+0x362>
 800ac66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 8087 	beq.w	800ad7c <_dtoa_r+0x4b4>
 800ac6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac72:	2200      	movs	r2, #0
 800ac74:	4b93      	ldr	r3, [pc, #588]	; (800aec4 <_dtoa_r+0x5fc>)
 800ac76:	4630      	mov	r0, r6
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7f5 ff3f 	bl	8000afc <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d07c      	beq.n	800ad7c <_dtoa_r+0x4b4>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	d079      	beq.n	800ad7c <_dtoa_r+0x4b4>
 800ac88:	9b02      	ldr	r3, [sp, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dd35      	ble.n	800acfa <_dtoa_r+0x432>
 800ac8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac92:	9308      	str	r3, [sp, #32]
 800ac94:	4639      	mov	r1, r7
 800ac96:	2200      	movs	r2, #0
 800ac98:	4b8b      	ldr	r3, [pc, #556]	; (800aec8 <_dtoa_r+0x600>)
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f7f5 fcbc 	bl	8000618 <__aeabi_dmul>
 800aca0:	e9cd 0100 	strd	r0, r1, [sp]
 800aca4:	9f02      	ldr	r7, [sp, #8]
 800aca6:	3501      	adds	r5, #1
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7f5 fc4b 	bl	8000544 <__aeabi_i2d>
 800acae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acb2:	f7f5 fcb1 	bl	8000618 <__aeabi_dmul>
 800acb6:	2200      	movs	r2, #0
 800acb8:	4b84      	ldr	r3, [pc, #528]	; (800aecc <_dtoa_r+0x604>)
 800acba:	f7f5 faf7 	bl	80002ac <__adddf3>
 800acbe:	4605      	mov	r5, r0
 800acc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800acc4:	2f00      	cmp	r7, #0
 800acc6:	d15d      	bne.n	800ad84 <_dtoa_r+0x4bc>
 800acc8:	2200      	movs	r2, #0
 800acca:	4b81      	ldr	r3, [pc, #516]	; (800aed0 <_dtoa_r+0x608>)
 800accc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acd0:	f7f5 faea 	bl	80002a8 <__aeabi_dsub>
 800acd4:	462a      	mov	r2, r5
 800acd6:	4633      	mov	r3, r6
 800acd8:	e9cd 0100 	strd	r0, r1, [sp]
 800acdc:	f7f5 ff2c 	bl	8000b38 <__aeabi_dcmpgt>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	f040 8288 	bne.w	800b1f6 <_dtoa_r+0x92e>
 800ace6:	462a      	mov	r2, r5
 800ace8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800acec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acf0:	f7f5 ff04 	bl	8000afc <__aeabi_dcmplt>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f040 827c 	bne.w	800b1f2 <_dtoa_r+0x92a>
 800acfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acfe:	e9cd 2300 	strd	r2, r3, [sp]
 800ad02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f2c0 8150 	blt.w	800afaa <_dtoa_r+0x6e2>
 800ad0a:	f1ba 0f0e 	cmp.w	sl, #14
 800ad0e:	f300 814c 	bgt.w	800afaa <_dtoa_r+0x6e2>
 800ad12:	4b6a      	ldr	r3, [pc, #424]	; (800aebc <_dtoa_r+0x5f4>)
 800ad14:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad18:	ed93 7b00 	vldr	d7, [r3]
 800ad1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad24:	f280 80d8 	bge.w	800aed8 <_dtoa_r+0x610>
 800ad28:	f1b9 0f00 	cmp.w	r9, #0
 800ad2c:	f300 80d4 	bgt.w	800aed8 <_dtoa_r+0x610>
 800ad30:	f040 825e 	bne.w	800b1f0 <_dtoa_r+0x928>
 800ad34:	2200      	movs	r2, #0
 800ad36:	4b66      	ldr	r3, [pc, #408]	; (800aed0 <_dtoa_r+0x608>)
 800ad38:	ec51 0b17 	vmov	r0, r1, d7
 800ad3c:	f7f5 fc6c 	bl	8000618 <__aeabi_dmul>
 800ad40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad44:	f7f5 feee 	bl	8000b24 <__aeabi_dcmpge>
 800ad48:	464f      	mov	r7, r9
 800ad4a:	464e      	mov	r6, r9
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f040 8234 	bne.w	800b1ba <_dtoa_r+0x8f2>
 800ad52:	2331      	movs	r3, #49	; 0x31
 800ad54:	f10b 0501 	add.w	r5, fp, #1
 800ad58:	f88b 3000 	strb.w	r3, [fp]
 800ad5c:	f10a 0a01 	add.w	sl, sl, #1
 800ad60:	e22f      	b.n	800b1c2 <_dtoa_r+0x8fa>
 800ad62:	07f2      	lsls	r2, r6, #31
 800ad64:	d505      	bpl.n	800ad72 <_dtoa_r+0x4aa>
 800ad66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6a:	f7f5 fc55 	bl	8000618 <__aeabi_dmul>
 800ad6e:	3501      	adds	r5, #1
 800ad70:	2301      	movs	r3, #1
 800ad72:	1076      	asrs	r6, r6, #1
 800ad74:	3708      	adds	r7, #8
 800ad76:	e772      	b.n	800ac5e <_dtoa_r+0x396>
 800ad78:	2502      	movs	r5, #2
 800ad7a:	e774      	b.n	800ac66 <_dtoa_r+0x39e>
 800ad7c:	f8cd a020 	str.w	sl, [sp, #32]
 800ad80:	464f      	mov	r7, r9
 800ad82:	e791      	b.n	800aca8 <_dtoa_r+0x3e0>
 800ad84:	4b4d      	ldr	r3, [pc, #308]	; (800aebc <_dtoa_r+0x5f4>)
 800ad86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d047      	beq.n	800ae24 <_dtoa_r+0x55c>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	2000      	movs	r0, #0
 800ad9a:	494e      	ldr	r1, [pc, #312]	; (800aed4 <_dtoa_r+0x60c>)
 800ad9c:	f7f5 fd66 	bl	800086c <__aeabi_ddiv>
 800ada0:	462a      	mov	r2, r5
 800ada2:	4633      	mov	r3, r6
 800ada4:	f7f5 fa80 	bl	80002a8 <__aeabi_dsub>
 800ada8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800adac:	465d      	mov	r5, fp
 800adae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adb2:	f7f5 fee1 	bl	8000b78 <__aeabi_d2iz>
 800adb6:	4606      	mov	r6, r0
 800adb8:	f7f5 fbc4 	bl	8000544 <__aeabi_i2d>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adc4:	f7f5 fa70 	bl	80002a8 <__aeabi_dsub>
 800adc8:	3630      	adds	r6, #48	; 0x30
 800adca:	f805 6b01 	strb.w	r6, [r5], #1
 800adce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800add2:	e9cd 0100 	strd	r0, r1, [sp]
 800add6:	f7f5 fe91 	bl	8000afc <__aeabi_dcmplt>
 800adda:	2800      	cmp	r0, #0
 800addc:	d163      	bne.n	800aea6 <_dtoa_r+0x5de>
 800adde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ade2:	2000      	movs	r0, #0
 800ade4:	4937      	ldr	r1, [pc, #220]	; (800aec4 <_dtoa_r+0x5fc>)
 800ade6:	f7f5 fa5f 	bl	80002a8 <__aeabi_dsub>
 800adea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adee:	f7f5 fe85 	bl	8000afc <__aeabi_dcmplt>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	f040 80b7 	bne.w	800af66 <_dtoa_r+0x69e>
 800adf8:	eba5 030b 	sub.w	r3, r5, fp
 800adfc:	429f      	cmp	r7, r3
 800adfe:	f77f af7c 	ble.w	800acfa <_dtoa_r+0x432>
 800ae02:	2200      	movs	r2, #0
 800ae04:	4b30      	ldr	r3, [pc, #192]	; (800aec8 <_dtoa_r+0x600>)
 800ae06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae0a:	f7f5 fc05 	bl	8000618 <__aeabi_dmul>
 800ae0e:	2200      	movs	r2, #0
 800ae10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae14:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <_dtoa_r+0x600>)
 800ae16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae1a:	f7f5 fbfd 	bl	8000618 <__aeabi_dmul>
 800ae1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ae22:	e7c4      	b.n	800adae <_dtoa_r+0x4e6>
 800ae24:	462a      	mov	r2, r5
 800ae26:	4633      	mov	r3, r6
 800ae28:	f7f5 fbf6 	bl	8000618 <__aeabi_dmul>
 800ae2c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae30:	eb0b 0507 	add.w	r5, fp, r7
 800ae34:	465e      	mov	r6, fp
 800ae36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae3a:	f7f5 fe9d 	bl	8000b78 <__aeabi_d2iz>
 800ae3e:	4607      	mov	r7, r0
 800ae40:	f7f5 fb80 	bl	8000544 <__aeabi_i2d>
 800ae44:	3730      	adds	r7, #48	; 0x30
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae4e:	f7f5 fa2b 	bl	80002a8 <__aeabi_dsub>
 800ae52:	f806 7b01 	strb.w	r7, [r6], #1
 800ae56:	42ae      	cmp	r6, r5
 800ae58:	e9cd 0100 	strd	r0, r1, [sp]
 800ae5c:	f04f 0200 	mov.w	r2, #0
 800ae60:	d126      	bne.n	800aeb0 <_dtoa_r+0x5e8>
 800ae62:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <_dtoa_r+0x60c>)
 800ae64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae68:	f7f5 fa20 	bl	80002ac <__adddf3>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae74:	f7f5 fe60 	bl	8000b38 <__aeabi_dcmpgt>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d174      	bne.n	800af66 <_dtoa_r+0x69e>
 800ae7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae80:	2000      	movs	r0, #0
 800ae82:	4914      	ldr	r1, [pc, #80]	; (800aed4 <_dtoa_r+0x60c>)
 800ae84:	f7f5 fa10 	bl	80002a8 <__aeabi_dsub>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae90:	f7f5 fe34 	bl	8000afc <__aeabi_dcmplt>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	f43f af30 	beq.w	800acfa <_dtoa_r+0x432>
 800ae9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae9e:	2b30      	cmp	r3, #48	; 0x30
 800aea0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aea4:	d002      	beq.n	800aeac <_dtoa_r+0x5e4>
 800aea6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aeaa:	e04a      	b.n	800af42 <_dtoa_r+0x67a>
 800aeac:	4615      	mov	r5, r2
 800aeae:	e7f4      	b.n	800ae9a <_dtoa_r+0x5d2>
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <_dtoa_r+0x600>)
 800aeb2:	f7f5 fbb1 	bl	8000618 <__aeabi_dmul>
 800aeb6:	e9cd 0100 	strd	r0, r1, [sp]
 800aeba:	e7bc      	b.n	800ae36 <_dtoa_r+0x56e>
 800aebc:	0800c528 	.word	0x0800c528
 800aec0:	0800c500 	.word	0x0800c500
 800aec4:	3ff00000 	.word	0x3ff00000
 800aec8:	40240000 	.word	0x40240000
 800aecc:	401c0000 	.word	0x401c0000
 800aed0:	40140000 	.word	0x40140000
 800aed4:	3fe00000 	.word	0x3fe00000
 800aed8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aedc:	465d      	mov	r5, fp
 800aede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 fcc1 	bl	800086c <__aeabi_ddiv>
 800aeea:	f7f5 fe45 	bl	8000b78 <__aeabi_d2iz>
 800aeee:	4680      	mov	r8, r0
 800aef0:	f7f5 fb28 	bl	8000544 <__aeabi_i2d>
 800aef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aef8:	f7f5 fb8e 	bl	8000618 <__aeabi_dmul>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4630      	mov	r0, r6
 800af02:	4639      	mov	r1, r7
 800af04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800af08:	f7f5 f9ce 	bl	80002a8 <__aeabi_dsub>
 800af0c:	f805 6b01 	strb.w	r6, [r5], #1
 800af10:	eba5 060b 	sub.w	r6, r5, fp
 800af14:	45b1      	cmp	r9, r6
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	d139      	bne.n	800af90 <_dtoa_r+0x6c8>
 800af1c:	f7f5 f9c6 	bl	80002ac <__adddf3>
 800af20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af24:	4606      	mov	r6, r0
 800af26:	460f      	mov	r7, r1
 800af28:	f7f5 fe06 	bl	8000b38 <__aeabi_dcmpgt>
 800af2c:	b9c8      	cbnz	r0, 800af62 <_dtoa_r+0x69a>
 800af2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af32:	4630      	mov	r0, r6
 800af34:	4639      	mov	r1, r7
 800af36:	f7f5 fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800af3a:	b110      	cbz	r0, 800af42 <_dtoa_r+0x67a>
 800af3c:	f018 0f01 	tst.w	r8, #1
 800af40:	d10f      	bne.n	800af62 <_dtoa_r+0x69a>
 800af42:	9904      	ldr	r1, [sp, #16]
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fae2 	bl	800b50e <_Bfree>
 800af4a:	2300      	movs	r3, #0
 800af4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af4e:	702b      	strb	r3, [r5, #0]
 800af50:	f10a 0301 	add.w	r3, sl, #1
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 8241 	beq.w	800b3e0 <_dtoa_r+0xb18>
 800af5e:	601d      	str	r5, [r3, #0]
 800af60:	e23e      	b.n	800b3e0 <_dtoa_r+0xb18>
 800af62:	f8cd a020 	str.w	sl, [sp, #32]
 800af66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af6a:	2a39      	cmp	r2, #57	; 0x39
 800af6c:	f105 33ff 	add.w	r3, r5, #4294967295
 800af70:	d108      	bne.n	800af84 <_dtoa_r+0x6bc>
 800af72:	459b      	cmp	fp, r3
 800af74:	d10a      	bne.n	800af8c <_dtoa_r+0x6c4>
 800af76:	9b08      	ldr	r3, [sp, #32]
 800af78:	3301      	adds	r3, #1
 800af7a:	9308      	str	r3, [sp, #32]
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	f88b 3000 	strb.w	r3, [fp]
 800af82:	465b      	mov	r3, fp
 800af84:	781a      	ldrb	r2, [r3, #0]
 800af86:	3201      	adds	r2, #1
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	e78c      	b.n	800aea6 <_dtoa_r+0x5de>
 800af8c:	461d      	mov	r5, r3
 800af8e:	e7ea      	b.n	800af66 <_dtoa_r+0x69e>
 800af90:	2200      	movs	r2, #0
 800af92:	4b9b      	ldr	r3, [pc, #620]	; (800b200 <_dtoa_r+0x938>)
 800af94:	f7f5 fb40 	bl	8000618 <__aeabi_dmul>
 800af98:	2200      	movs	r2, #0
 800af9a:	2300      	movs	r3, #0
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	f7f5 fda2 	bl	8000ae8 <__aeabi_dcmpeq>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d09a      	beq.n	800aede <_dtoa_r+0x616>
 800afa8:	e7cb      	b.n	800af42 <_dtoa_r+0x67a>
 800afaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afac:	2a00      	cmp	r2, #0
 800afae:	f000 808b 	beq.w	800b0c8 <_dtoa_r+0x800>
 800afb2:	9a06      	ldr	r2, [sp, #24]
 800afb4:	2a01      	cmp	r2, #1
 800afb6:	dc6e      	bgt.n	800b096 <_dtoa_r+0x7ce>
 800afb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afba:	2a00      	cmp	r2, #0
 800afbc:	d067      	beq.n	800b08e <_dtoa_r+0x7c6>
 800afbe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afc2:	9f07      	ldr	r7, [sp, #28]
 800afc4:	9d05      	ldr	r5, [sp, #20]
 800afc6:	9a05      	ldr	r2, [sp, #20]
 800afc8:	2101      	movs	r1, #1
 800afca:	441a      	add	r2, r3
 800afcc:	4620      	mov	r0, r4
 800afce:	9205      	str	r2, [sp, #20]
 800afd0:	4498      	add	r8, r3
 800afd2:	f000 fb3c 	bl	800b64e <__i2b>
 800afd6:	4606      	mov	r6, r0
 800afd8:	2d00      	cmp	r5, #0
 800afda:	dd0c      	ble.n	800aff6 <_dtoa_r+0x72e>
 800afdc:	f1b8 0f00 	cmp.w	r8, #0
 800afe0:	dd09      	ble.n	800aff6 <_dtoa_r+0x72e>
 800afe2:	4545      	cmp	r5, r8
 800afe4:	9a05      	ldr	r2, [sp, #20]
 800afe6:	462b      	mov	r3, r5
 800afe8:	bfa8      	it	ge
 800afea:	4643      	movge	r3, r8
 800afec:	1ad2      	subs	r2, r2, r3
 800afee:	9205      	str	r2, [sp, #20]
 800aff0:	1aed      	subs	r5, r5, r3
 800aff2:	eba8 0803 	sub.w	r8, r8, r3
 800aff6:	9b07      	ldr	r3, [sp, #28]
 800aff8:	b1eb      	cbz	r3, 800b036 <_dtoa_r+0x76e>
 800affa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affc:	2b00      	cmp	r3, #0
 800affe:	d067      	beq.n	800b0d0 <_dtoa_r+0x808>
 800b000:	b18f      	cbz	r7, 800b026 <_dtoa_r+0x75e>
 800b002:	4631      	mov	r1, r6
 800b004:	463a      	mov	r2, r7
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fbc0 	bl	800b78c <__pow5mult>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	4601      	mov	r1, r0
 800b010:	4606      	mov	r6, r0
 800b012:	4620      	mov	r0, r4
 800b014:	f000 fb24 	bl	800b660 <__multiply>
 800b018:	9904      	ldr	r1, [sp, #16]
 800b01a:	9008      	str	r0, [sp, #32]
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 fa76 	bl	800b50e <_Bfree>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	9b07      	ldr	r3, [sp, #28]
 800b028:	1bda      	subs	r2, r3, r7
 800b02a:	d004      	beq.n	800b036 <_dtoa_r+0x76e>
 800b02c:	9904      	ldr	r1, [sp, #16]
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fbac 	bl	800b78c <__pow5mult>
 800b034:	9004      	str	r0, [sp, #16]
 800b036:	2101      	movs	r1, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 fb08 	bl	800b64e <__i2b>
 800b03e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b040:	4607      	mov	r7, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 81d0 	beq.w	800b3e8 <_dtoa_r+0xb20>
 800b048:	461a      	mov	r2, r3
 800b04a:	4601      	mov	r1, r0
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 fb9d 	bl	800b78c <__pow5mult>
 800b052:	9b06      	ldr	r3, [sp, #24]
 800b054:	2b01      	cmp	r3, #1
 800b056:	4607      	mov	r7, r0
 800b058:	dc40      	bgt.n	800b0dc <_dtoa_r+0x814>
 800b05a:	9b00      	ldr	r3, [sp, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d139      	bne.n	800b0d4 <_dtoa_r+0x80c>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b066:	2b00      	cmp	r3, #0
 800b068:	d136      	bne.n	800b0d8 <_dtoa_r+0x810>
 800b06a:	9b01      	ldr	r3, [sp, #4]
 800b06c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b070:	0d1b      	lsrs	r3, r3, #20
 800b072:	051b      	lsls	r3, r3, #20
 800b074:	b12b      	cbz	r3, 800b082 <_dtoa_r+0x7ba>
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	3301      	adds	r3, #1
 800b07a:	9305      	str	r3, [sp, #20]
 800b07c:	f108 0801 	add.w	r8, r8, #1
 800b080:	2301      	movs	r3, #1
 800b082:	9307      	str	r3, [sp, #28]
 800b084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d12a      	bne.n	800b0e0 <_dtoa_r+0x818>
 800b08a:	2001      	movs	r0, #1
 800b08c:	e030      	b.n	800b0f0 <_dtoa_r+0x828>
 800b08e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b090:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b094:	e795      	b.n	800afc2 <_dtoa_r+0x6fa>
 800b096:	9b07      	ldr	r3, [sp, #28]
 800b098:	f109 37ff 	add.w	r7, r9, #4294967295
 800b09c:	42bb      	cmp	r3, r7
 800b09e:	bfbf      	itttt	lt
 800b0a0:	9b07      	ldrlt	r3, [sp, #28]
 800b0a2:	9707      	strlt	r7, [sp, #28]
 800b0a4:	1afa      	sublt	r2, r7, r3
 800b0a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b0a8:	bfbb      	ittet	lt
 800b0aa:	189b      	addlt	r3, r3, r2
 800b0ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b0ae:	1bdf      	subge	r7, r3, r7
 800b0b0:	2700      	movlt	r7, #0
 800b0b2:	f1b9 0f00 	cmp.w	r9, #0
 800b0b6:	bfb5      	itete	lt
 800b0b8:	9b05      	ldrlt	r3, [sp, #20]
 800b0ba:	9d05      	ldrge	r5, [sp, #20]
 800b0bc:	eba3 0509 	sublt.w	r5, r3, r9
 800b0c0:	464b      	movge	r3, r9
 800b0c2:	bfb8      	it	lt
 800b0c4:	2300      	movlt	r3, #0
 800b0c6:	e77e      	b.n	800afc6 <_dtoa_r+0x6fe>
 800b0c8:	9f07      	ldr	r7, [sp, #28]
 800b0ca:	9d05      	ldr	r5, [sp, #20]
 800b0cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b0ce:	e783      	b.n	800afd8 <_dtoa_r+0x710>
 800b0d0:	9a07      	ldr	r2, [sp, #28]
 800b0d2:	e7ab      	b.n	800b02c <_dtoa_r+0x764>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e7d4      	b.n	800b082 <_dtoa_r+0x7ba>
 800b0d8:	9b00      	ldr	r3, [sp, #0]
 800b0da:	e7d2      	b.n	800b082 <_dtoa_r+0x7ba>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9307      	str	r3, [sp, #28]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b0e6:	6918      	ldr	r0, [r3, #16]
 800b0e8:	f000 fa63 	bl	800b5b2 <__hi0bits>
 800b0ec:	f1c0 0020 	rsb	r0, r0, #32
 800b0f0:	4440      	add	r0, r8
 800b0f2:	f010 001f 	ands.w	r0, r0, #31
 800b0f6:	d047      	beq.n	800b188 <_dtoa_r+0x8c0>
 800b0f8:	f1c0 0320 	rsb	r3, r0, #32
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	dd3b      	ble.n	800b178 <_dtoa_r+0x8b0>
 800b100:	9b05      	ldr	r3, [sp, #20]
 800b102:	f1c0 001c 	rsb	r0, r0, #28
 800b106:	4403      	add	r3, r0
 800b108:	9305      	str	r3, [sp, #20]
 800b10a:	4405      	add	r5, r0
 800b10c:	4480      	add	r8, r0
 800b10e:	9b05      	ldr	r3, [sp, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	dd05      	ble.n	800b120 <_dtoa_r+0x858>
 800b114:	461a      	mov	r2, r3
 800b116:	9904      	ldr	r1, [sp, #16]
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fb85 	bl	800b828 <__lshift>
 800b11e:	9004      	str	r0, [sp, #16]
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	dd05      	ble.n	800b132 <_dtoa_r+0x86a>
 800b126:	4639      	mov	r1, r7
 800b128:	4642      	mov	r2, r8
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fb7c 	bl	800b828 <__lshift>
 800b130:	4607      	mov	r7, r0
 800b132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b134:	b353      	cbz	r3, 800b18c <_dtoa_r+0x8c4>
 800b136:	4639      	mov	r1, r7
 800b138:	9804      	ldr	r0, [sp, #16]
 800b13a:	f000 fbc9 	bl	800b8d0 <__mcmp>
 800b13e:	2800      	cmp	r0, #0
 800b140:	da24      	bge.n	800b18c <_dtoa_r+0x8c4>
 800b142:	2300      	movs	r3, #0
 800b144:	220a      	movs	r2, #10
 800b146:	9904      	ldr	r1, [sp, #16]
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 f9f7 	bl	800b53c <__multadd>
 800b14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b150:	9004      	str	r0, [sp, #16]
 800b152:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 814d 	beq.w	800b3f6 <_dtoa_r+0xb2e>
 800b15c:	2300      	movs	r3, #0
 800b15e:	4631      	mov	r1, r6
 800b160:	220a      	movs	r2, #10
 800b162:	4620      	mov	r0, r4
 800b164:	f000 f9ea 	bl	800b53c <__multadd>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	4606      	mov	r6, r0
 800b16e:	dc4f      	bgt.n	800b210 <_dtoa_r+0x948>
 800b170:	9b06      	ldr	r3, [sp, #24]
 800b172:	2b02      	cmp	r3, #2
 800b174:	dd4c      	ble.n	800b210 <_dtoa_r+0x948>
 800b176:	e011      	b.n	800b19c <_dtoa_r+0x8d4>
 800b178:	d0c9      	beq.n	800b10e <_dtoa_r+0x846>
 800b17a:	9a05      	ldr	r2, [sp, #20]
 800b17c:	331c      	adds	r3, #28
 800b17e:	441a      	add	r2, r3
 800b180:	9205      	str	r2, [sp, #20]
 800b182:	441d      	add	r5, r3
 800b184:	4498      	add	r8, r3
 800b186:	e7c2      	b.n	800b10e <_dtoa_r+0x846>
 800b188:	4603      	mov	r3, r0
 800b18a:	e7f6      	b.n	800b17a <_dtoa_r+0x8b2>
 800b18c:	f1b9 0f00 	cmp.w	r9, #0
 800b190:	dc38      	bgt.n	800b204 <_dtoa_r+0x93c>
 800b192:	9b06      	ldr	r3, [sp, #24]
 800b194:	2b02      	cmp	r3, #2
 800b196:	dd35      	ble.n	800b204 <_dtoa_r+0x93c>
 800b198:	f8cd 9008 	str.w	r9, [sp, #8]
 800b19c:	9b02      	ldr	r3, [sp, #8]
 800b19e:	b963      	cbnz	r3, 800b1ba <_dtoa_r+0x8f2>
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	2205      	movs	r2, #5
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f000 f9c9 	bl	800b53c <__multadd>
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	9804      	ldr	r0, [sp, #16]
 800b1b0:	f000 fb8e 	bl	800b8d0 <__mcmp>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	f73f adcc 	bgt.w	800ad52 <_dtoa_r+0x48a>
 800b1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1bc:	465d      	mov	r5, fp
 800b1be:	ea6f 0a03 	mvn.w	sl, r3
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 f9a0 	bl	800b50e <_Bfree>
 800b1ce:	2e00      	cmp	r6, #0
 800b1d0:	f43f aeb7 	beq.w	800af42 <_dtoa_r+0x67a>
 800b1d4:	f1b9 0f00 	cmp.w	r9, #0
 800b1d8:	d005      	beq.n	800b1e6 <_dtoa_r+0x91e>
 800b1da:	45b1      	cmp	r9, r6
 800b1dc:	d003      	beq.n	800b1e6 <_dtoa_r+0x91e>
 800b1de:	4649      	mov	r1, r9
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 f994 	bl	800b50e <_Bfree>
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 f990 	bl	800b50e <_Bfree>
 800b1ee:	e6a8      	b.n	800af42 <_dtoa_r+0x67a>
 800b1f0:	2700      	movs	r7, #0
 800b1f2:	463e      	mov	r6, r7
 800b1f4:	e7e1      	b.n	800b1ba <_dtoa_r+0x8f2>
 800b1f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b1fa:	463e      	mov	r6, r7
 800b1fc:	e5a9      	b.n	800ad52 <_dtoa_r+0x48a>
 800b1fe:	bf00      	nop
 800b200:	40240000 	.word	0x40240000
 800b204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b206:	f8cd 9008 	str.w	r9, [sp, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 80fa 	beq.w	800b404 <_dtoa_r+0xb3c>
 800b210:	2d00      	cmp	r5, #0
 800b212:	dd05      	ble.n	800b220 <_dtoa_r+0x958>
 800b214:	4631      	mov	r1, r6
 800b216:	462a      	mov	r2, r5
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fb05 	bl	800b828 <__lshift>
 800b21e:	4606      	mov	r6, r0
 800b220:	9b07      	ldr	r3, [sp, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d04c      	beq.n	800b2c0 <_dtoa_r+0x9f8>
 800b226:	6871      	ldr	r1, [r6, #4]
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 f93c 	bl	800b4a6 <_Balloc>
 800b22e:	6932      	ldr	r2, [r6, #16]
 800b230:	3202      	adds	r2, #2
 800b232:	4605      	mov	r5, r0
 800b234:	0092      	lsls	r2, r2, #2
 800b236:	f106 010c 	add.w	r1, r6, #12
 800b23a:	300c      	adds	r0, #12
 800b23c:	f000 f928 	bl	800b490 <memcpy>
 800b240:	2201      	movs	r2, #1
 800b242:	4629      	mov	r1, r5
 800b244:	4620      	mov	r0, r4
 800b246:	f000 faef 	bl	800b828 <__lshift>
 800b24a:	9b00      	ldr	r3, [sp, #0]
 800b24c:	f8cd b014 	str.w	fp, [sp, #20]
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	46b1      	mov	r9, r6
 800b256:	9307      	str	r3, [sp, #28]
 800b258:	4606      	mov	r6, r0
 800b25a:	4639      	mov	r1, r7
 800b25c:	9804      	ldr	r0, [sp, #16]
 800b25e:	f7ff faa7 	bl	800a7b0 <quorem>
 800b262:	4649      	mov	r1, r9
 800b264:	4605      	mov	r5, r0
 800b266:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b26a:	9804      	ldr	r0, [sp, #16]
 800b26c:	f000 fb30 	bl	800b8d0 <__mcmp>
 800b270:	4632      	mov	r2, r6
 800b272:	9000      	str	r0, [sp, #0]
 800b274:	4639      	mov	r1, r7
 800b276:	4620      	mov	r0, r4
 800b278:	f000 fb44 	bl	800b904 <__mdiff>
 800b27c:	68c3      	ldr	r3, [r0, #12]
 800b27e:	4602      	mov	r2, r0
 800b280:	bb03      	cbnz	r3, 800b2c4 <_dtoa_r+0x9fc>
 800b282:	4601      	mov	r1, r0
 800b284:	9008      	str	r0, [sp, #32]
 800b286:	9804      	ldr	r0, [sp, #16]
 800b288:	f000 fb22 	bl	800b8d0 <__mcmp>
 800b28c:	9a08      	ldr	r2, [sp, #32]
 800b28e:	4603      	mov	r3, r0
 800b290:	4611      	mov	r1, r2
 800b292:	4620      	mov	r0, r4
 800b294:	9308      	str	r3, [sp, #32]
 800b296:	f000 f93a 	bl	800b50e <_Bfree>
 800b29a:	9b08      	ldr	r3, [sp, #32]
 800b29c:	b9a3      	cbnz	r3, 800b2c8 <_dtoa_r+0xa00>
 800b29e:	9a06      	ldr	r2, [sp, #24]
 800b2a0:	b992      	cbnz	r2, 800b2c8 <_dtoa_r+0xa00>
 800b2a2:	9a07      	ldr	r2, [sp, #28]
 800b2a4:	b982      	cbnz	r2, 800b2c8 <_dtoa_r+0xa00>
 800b2a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2aa:	d029      	beq.n	800b300 <_dtoa_r+0xa38>
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dd01      	ble.n	800b2b6 <_dtoa_r+0x9ee>
 800b2b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	1c5d      	adds	r5, r3, #1
 800b2ba:	f883 8000 	strb.w	r8, [r3]
 800b2be:	e782      	b.n	800b1c6 <_dtoa_r+0x8fe>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	e7c2      	b.n	800b24a <_dtoa_r+0x982>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e7e3      	b.n	800b290 <_dtoa_r+0x9c8>
 800b2c8:	9a00      	ldr	r2, [sp, #0]
 800b2ca:	2a00      	cmp	r2, #0
 800b2cc:	db04      	blt.n	800b2d8 <_dtoa_r+0xa10>
 800b2ce:	d125      	bne.n	800b31c <_dtoa_r+0xa54>
 800b2d0:	9a06      	ldr	r2, [sp, #24]
 800b2d2:	bb1a      	cbnz	r2, 800b31c <_dtoa_r+0xa54>
 800b2d4:	9a07      	ldr	r2, [sp, #28]
 800b2d6:	bb0a      	cbnz	r2, 800b31c <_dtoa_r+0xa54>
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	ddec      	ble.n	800b2b6 <_dtoa_r+0x9ee>
 800b2dc:	2201      	movs	r2, #1
 800b2de:	9904      	ldr	r1, [sp, #16]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 faa1 	bl	800b828 <__lshift>
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	9004      	str	r0, [sp, #16]
 800b2ea:	f000 faf1 	bl	800b8d0 <__mcmp>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	dc03      	bgt.n	800b2fa <_dtoa_r+0xa32>
 800b2f2:	d1e0      	bne.n	800b2b6 <_dtoa_r+0x9ee>
 800b2f4:	f018 0f01 	tst.w	r8, #1
 800b2f8:	d0dd      	beq.n	800b2b6 <_dtoa_r+0x9ee>
 800b2fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2fe:	d1d8      	bne.n	800b2b2 <_dtoa_r+0x9ea>
 800b300:	9b05      	ldr	r3, [sp, #20]
 800b302:	9a05      	ldr	r2, [sp, #20]
 800b304:	1c5d      	adds	r5, r3, #1
 800b306:	2339      	movs	r3, #57	; 0x39
 800b308:	7013      	strb	r3, [r2, #0]
 800b30a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b30e:	2b39      	cmp	r3, #57	; 0x39
 800b310:	f105 32ff 	add.w	r2, r5, #4294967295
 800b314:	d04f      	beq.n	800b3b6 <_dtoa_r+0xaee>
 800b316:	3301      	adds	r3, #1
 800b318:	7013      	strb	r3, [r2, #0]
 800b31a:	e754      	b.n	800b1c6 <_dtoa_r+0x8fe>
 800b31c:	9a05      	ldr	r2, [sp, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f102 0501 	add.w	r5, r2, #1
 800b324:	dd06      	ble.n	800b334 <_dtoa_r+0xa6c>
 800b326:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b32a:	d0e9      	beq.n	800b300 <_dtoa_r+0xa38>
 800b32c:	f108 0801 	add.w	r8, r8, #1
 800b330:	9b05      	ldr	r3, [sp, #20]
 800b332:	e7c2      	b.n	800b2ba <_dtoa_r+0x9f2>
 800b334:	9a02      	ldr	r2, [sp, #8]
 800b336:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b33a:	eba5 030b 	sub.w	r3, r5, fp
 800b33e:	4293      	cmp	r3, r2
 800b340:	d021      	beq.n	800b386 <_dtoa_r+0xabe>
 800b342:	2300      	movs	r3, #0
 800b344:	220a      	movs	r2, #10
 800b346:	9904      	ldr	r1, [sp, #16]
 800b348:	4620      	mov	r0, r4
 800b34a:	f000 f8f7 	bl	800b53c <__multadd>
 800b34e:	45b1      	cmp	r9, r6
 800b350:	9004      	str	r0, [sp, #16]
 800b352:	f04f 0300 	mov.w	r3, #0
 800b356:	f04f 020a 	mov.w	r2, #10
 800b35a:	4649      	mov	r1, r9
 800b35c:	4620      	mov	r0, r4
 800b35e:	d105      	bne.n	800b36c <_dtoa_r+0xaa4>
 800b360:	f000 f8ec 	bl	800b53c <__multadd>
 800b364:	4681      	mov	r9, r0
 800b366:	4606      	mov	r6, r0
 800b368:	9505      	str	r5, [sp, #20]
 800b36a:	e776      	b.n	800b25a <_dtoa_r+0x992>
 800b36c:	f000 f8e6 	bl	800b53c <__multadd>
 800b370:	4631      	mov	r1, r6
 800b372:	4681      	mov	r9, r0
 800b374:	2300      	movs	r3, #0
 800b376:	220a      	movs	r2, #10
 800b378:	4620      	mov	r0, r4
 800b37a:	f000 f8df 	bl	800b53c <__multadd>
 800b37e:	4606      	mov	r6, r0
 800b380:	e7f2      	b.n	800b368 <_dtoa_r+0xaa0>
 800b382:	f04f 0900 	mov.w	r9, #0
 800b386:	2201      	movs	r2, #1
 800b388:	9904      	ldr	r1, [sp, #16]
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 fa4c 	bl	800b828 <__lshift>
 800b390:	4639      	mov	r1, r7
 800b392:	9004      	str	r0, [sp, #16]
 800b394:	f000 fa9c 	bl	800b8d0 <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	dcb6      	bgt.n	800b30a <_dtoa_r+0xa42>
 800b39c:	d102      	bne.n	800b3a4 <_dtoa_r+0xadc>
 800b39e:	f018 0f01 	tst.w	r8, #1
 800b3a2:	d1b2      	bne.n	800b30a <_dtoa_r+0xa42>
 800b3a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3a8:	2b30      	cmp	r3, #48	; 0x30
 800b3aa:	f105 32ff 	add.w	r2, r5, #4294967295
 800b3ae:	f47f af0a 	bne.w	800b1c6 <_dtoa_r+0x8fe>
 800b3b2:	4615      	mov	r5, r2
 800b3b4:	e7f6      	b.n	800b3a4 <_dtoa_r+0xadc>
 800b3b6:	4593      	cmp	fp, r2
 800b3b8:	d105      	bne.n	800b3c6 <_dtoa_r+0xafe>
 800b3ba:	2331      	movs	r3, #49	; 0x31
 800b3bc:	f10a 0a01 	add.w	sl, sl, #1
 800b3c0:	f88b 3000 	strb.w	r3, [fp]
 800b3c4:	e6ff      	b.n	800b1c6 <_dtoa_r+0x8fe>
 800b3c6:	4615      	mov	r5, r2
 800b3c8:	e79f      	b.n	800b30a <_dtoa_r+0xa42>
 800b3ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b430 <_dtoa_r+0xb68>
 800b3ce:	e007      	b.n	800b3e0 <_dtoa_r+0xb18>
 800b3d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b434 <_dtoa_r+0xb6c>
 800b3d6:	b11b      	cbz	r3, 800b3e0 <_dtoa_r+0xb18>
 800b3d8:	f10b 0308 	add.w	r3, fp, #8
 800b3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	4658      	mov	r0, fp
 800b3e2:	b017      	add	sp, #92	; 0x5c
 800b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e8:	9b06      	ldr	r3, [sp, #24]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	f77f ae35 	ble.w	800b05a <_dtoa_r+0x792>
 800b3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f2:	9307      	str	r3, [sp, #28]
 800b3f4:	e649      	b.n	800b08a <_dtoa_r+0x7c2>
 800b3f6:	9b02      	ldr	r3, [sp, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dc03      	bgt.n	800b404 <_dtoa_r+0xb3c>
 800b3fc:	9b06      	ldr	r3, [sp, #24]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	f73f aecc 	bgt.w	800b19c <_dtoa_r+0x8d4>
 800b404:	465d      	mov	r5, fp
 800b406:	4639      	mov	r1, r7
 800b408:	9804      	ldr	r0, [sp, #16]
 800b40a:	f7ff f9d1 	bl	800a7b0 <quorem>
 800b40e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b412:	f805 8b01 	strb.w	r8, [r5], #1
 800b416:	9a02      	ldr	r2, [sp, #8]
 800b418:	eba5 030b 	sub.w	r3, r5, fp
 800b41c:	429a      	cmp	r2, r3
 800b41e:	ddb0      	ble.n	800b382 <_dtoa_r+0xaba>
 800b420:	2300      	movs	r3, #0
 800b422:	220a      	movs	r2, #10
 800b424:	9904      	ldr	r1, [sp, #16]
 800b426:	4620      	mov	r0, r4
 800b428:	f000 f888 	bl	800b53c <__multadd>
 800b42c:	9004      	str	r0, [sp, #16]
 800b42e:	e7ea      	b.n	800b406 <_dtoa_r+0xb3e>
 800b430:	0800c4c0 	.word	0x0800c4c0
 800b434:	0800c4e4 	.word	0x0800c4e4

0800b438 <__locale_ctype_ptr_l>:
 800b438:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b43c:	4770      	bx	lr
	...

0800b440 <_localeconv_r>:
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <_localeconv_r+0x14>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6a18      	ldr	r0, [r3, #32]
 800b446:	4b04      	ldr	r3, [pc, #16]	; (800b458 <_localeconv_r+0x18>)
 800b448:	2800      	cmp	r0, #0
 800b44a:	bf08      	it	eq
 800b44c:	4618      	moveq	r0, r3
 800b44e:	30f0      	adds	r0, #240	; 0xf0
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20000068 	.word	0x20000068
 800b458:	200000cc 	.word	0x200000cc

0800b45c <malloc>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <malloc+0xc>)
 800b45e:	4601      	mov	r1, r0
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	f000 bb57 	b.w	800bb14 <_malloc_r>
 800b466:	bf00      	nop
 800b468:	20000068 	.word	0x20000068

0800b46c <__ascii_mbtowc>:
 800b46c:	b082      	sub	sp, #8
 800b46e:	b901      	cbnz	r1, 800b472 <__ascii_mbtowc+0x6>
 800b470:	a901      	add	r1, sp, #4
 800b472:	b142      	cbz	r2, 800b486 <__ascii_mbtowc+0x1a>
 800b474:	b14b      	cbz	r3, 800b48a <__ascii_mbtowc+0x1e>
 800b476:	7813      	ldrb	r3, [r2, #0]
 800b478:	600b      	str	r3, [r1, #0]
 800b47a:	7812      	ldrb	r2, [r2, #0]
 800b47c:	1c10      	adds	r0, r2, #0
 800b47e:	bf18      	it	ne
 800b480:	2001      	movne	r0, #1
 800b482:	b002      	add	sp, #8
 800b484:	4770      	bx	lr
 800b486:	4610      	mov	r0, r2
 800b488:	e7fb      	b.n	800b482 <__ascii_mbtowc+0x16>
 800b48a:	f06f 0001 	mvn.w	r0, #1
 800b48e:	e7f8      	b.n	800b482 <__ascii_mbtowc+0x16>

0800b490 <memcpy>:
 800b490:	b510      	push	{r4, lr}
 800b492:	1e43      	subs	r3, r0, #1
 800b494:	440a      	add	r2, r1
 800b496:	4291      	cmp	r1, r2
 800b498:	d100      	bne.n	800b49c <memcpy+0xc>
 800b49a:	bd10      	pop	{r4, pc}
 800b49c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4a4:	e7f7      	b.n	800b496 <memcpy+0x6>

0800b4a6 <_Balloc>:
 800b4a6:	b570      	push	{r4, r5, r6, lr}
 800b4a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460e      	mov	r6, r1
 800b4ae:	b93d      	cbnz	r5, 800b4c0 <_Balloc+0x1a>
 800b4b0:	2010      	movs	r0, #16
 800b4b2:	f7ff ffd3 	bl	800b45c <malloc>
 800b4b6:	6260      	str	r0, [r4, #36]	; 0x24
 800b4b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4bc:	6005      	str	r5, [r0, #0]
 800b4be:	60c5      	str	r5, [r0, #12]
 800b4c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b4c2:	68eb      	ldr	r3, [r5, #12]
 800b4c4:	b183      	cbz	r3, 800b4e8 <_Balloc+0x42>
 800b4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4ce:	b9b8      	cbnz	r0, 800b500 <_Balloc+0x5a>
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	fa01 f506 	lsl.w	r5, r1, r6
 800b4d6:	1d6a      	adds	r2, r5, #5
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fabe 	bl	800ba5c <_calloc_r>
 800b4e0:	b160      	cbz	r0, 800b4fc <_Balloc+0x56>
 800b4e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b4e6:	e00e      	b.n	800b506 <_Balloc+0x60>
 800b4e8:	2221      	movs	r2, #33	; 0x21
 800b4ea:	2104      	movs	r1, #4
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fab5 	bl	800ba5c <_calloc_r>
 800b4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f4:	60e8      	str	r0, [r5, #12]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d1e4      	bne.n	800b4c6 <_Balloc+0x20>
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}
 800b500:	6802      	ldr	r2, [r0, #0]
 800b502:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b506:	2300      	movs	r3, #0
 800b508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b50c:	e7f7      	b.n	800b4fe <_Balloc+0x58>

0800b50e <_Bfree>:
 800b50e:	b570      	push	{r4, r5, r6, lr}
 800b510:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b512:	4606      	mov	r6, r0
 800b514:	460d      	mov	r5, r1
 800b516:	b93c      	cbnz	r4, 800b528 <_Bfree+0x1a>
 800b518:	2010      	movs	r0, #16
 800b51a:	f7ff ff9f 	bl	800b45c <malloc>
 800b51e:	6270      	str	r0, [r6, #36]	; 0x24
 800b520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b524:	6004      	str	r4, [r0, #0]
 800b526:	60c4      	str	r4, [r0, #12]
 800b528:	b13d      	cbz	r5, 800b53a <_Bfree+0x2c>
 800b52a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b52c:	686a      	ldr	r2, [r5, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b534:	6029      	str	r1, [r5, #0]
 800b536:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b53a:	bd70      	pop	{r4, r5, r6, pc}

0800b53c <__multadd>:
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	690d      	ldr	r5, [r1, #16]
 800b542:	461f      	mov	r7, r3
 800b544:	4606      	mov	r6, r0
 800b546:	460c      	mov	r4, r1
 800b548:	f101 0c14 	add.w	ip, r1, #20
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8dc 0000 	ldr.w	r0, [ip]
 800b552:	b281      	uxth	r1, r0
 800b554:	fb02 7101 	mla	r1, r2, r1, r7
 800b558:	0c0f      	lsrs	r7, r1, #16
 800b55a:	0c00      	lsrs	r0, r0, #16
 800b55c:	fb02 7000 	mla	r0, r2, r0, r7
 800b560:	b289      	uxth	r1, r1
 800b562:	3301      	adds	r3, #1
 800b564:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b568:	429d      	cmp	r5, r3
 800b56a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b56e:	f84c 1b04 	str.w	r1, [ip], #4
 800b572:	dcec      	bgt.n	800b54e <__multadd+0x12>
 800b574:	b1d7      	cbz	r7, 800b5ac <__multadd+0x70>
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	42ab      	cmp	r3, r5
 800b57a:	dc12      	bgt.n	800b5a2 <__multadd+0x66>
 800b57c:	6861      	ldr	r1, [r4, #4]
 800b57e:	4630      	mov	r0, r6
 800b580:	3101      	adds	r1, #1
 800b582:	f7ff ff90 	bl	800b4a6 <_Balloc>
 800b586:	6922      	ldr	r2, [r4, #16]
 800b588:	3202      	adds	r2, #2
 800b58a:	f104 010c 	add.w	r1, r4, #12
 800b58e:	4680      	mov	r8, r0
 800b590:	0092      	lsls	r2, r2, #2
 800b592:	300c      	adds	r0, #12
 800b594:	f7ff ff7c 	bl	800b490 <memcpy>
 800b598:	4621      	mov	r1, r4
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ffb7 	bl	800b50e <_Bfree>
 800b5a0:	4644      	mov	r4, r8
 800b5a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5a6:	3501      	adds	r5, #1
 800b5a8:	615f      	str	r7, [r3, #20]
 800b5aa:	6125      	str	r5, [r4, #16]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5b2 <__hi0bits>:
 800b5b2:	0c02      	lsrs	r2, r0, #16
 800b5b4:	0412      	lsls	r2, r2, #16
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	b9b2      	cbnz	r2, 800b5e8 <__hi0bits+0x36>
 800b5ba:	0403      	lsls	r3, r0, #16
 800b5bc:	2010      	movs	r0, #16
 800b5be:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b5c2:	bf04      	itt	eq
 800b5c4:	021b      	lsleq	r3, r3, #8
 800b5c6:	3008      	addeq	r0, #8
 800b5c8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b5cc:	bf04      	itt	eq
 800b5ce:	011b      	lsleq	r3, r3, #4
 800b5d0:	3004      	addeq	r0, #4
 800b5d2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b5d6:	bf04      	itt	eq
 800b5d8:	009b      	lsleq	r3, r3, #2
 800b5da:	3002      	addeq	r0, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	db06      	blt.n	800b5ee <__hi0bits+0x3c>
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	d503      	bpl.n	800b5ec <__hi0bits+0x3a>
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	4770      	bx	lr
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e7e8      	b.n	800b5be <__hi0bits+0xc>
 800b5ec:	2020      	movs	r0, #32
 800b5ee:	4770      	bx	lr

0800b5f0 <__lo0bits>:
 800b5f0:	6803      	ldr	r3, [r0, #0]
 800b5f2:	f013 0207 	ands.w	r2, r3, #7
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	d00b      	beq.n	800b612 <__lo0bits+0x22>
 800b5fa:	07da      	lsls	r2, r3, #31
 800b5fc:	d423      	bmi.n	800b646 <__lo0bits+0x56>
 800b5fe:	0798      	lsls	r0, r3, #30
 800b600:	bf49      	itett	mi
 800b602:	085b      	lsrmi	r3, r3, #1
 800b604:	089b      	lsrpl	r3, r3, #2
 800b606:	2001      	movmi	r0, #1
 800b608:	600b      	strmi	r3, [r1, #0]
 800b60a:	bf5c      	itt	pl
 800b60c:	600b      	strpl	r3, [r1, #0]
 800b60e:	2002      	movpl	r0, #2
 800b610:	4770      	bx	lr
 800b612:	b298      	uxth	r0, r3
 800b614:	b9a8      	cbnz	r0, 800b642 <__lo0bits+0x52>
 800b616:	0c1b      	lsrs	r3, r3, #16
 800b618:	2010      	movs	r0, #16
 800b61a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b61e:	bf04      	itt	eq
 800b620:	0a1b      	lsreq	r3, r3, #8
 800b622:	3008      	addeq	r0, #8
 800b624:	071a      	lsls	r2, r3, #28
 800b626:	bf04      	itt	eq
 800b628:	091b      	lsreq	r3, r3, #4
 800b62a:	3004      	addeq	r0, #4
 800b62c:	079a      	lsls	r2, r3, #30
 800b62e:	bf04      	itt	eq
 800b630:	089b      	lsreq	r3, r3, #2
 800b632:	3002      	addeq	r0, #2
 800b634:	07da      	lsls	r2, r3, #31
 800b636:	d402      	bmi.n	800b63e <__lo0bits+0x4e>
 800b638:	085b      	lsrs	r3, r3, #1
 800b63a:	d006      	beq.n	800b64a <__lo0bits+0x5a>
 800b63c:	3001      	adds	r0, #1
 800b63e:	600b      	str	r3, [r1, #0]
 800b640:	4770      	bx	lr
 800b642:	4610      	mov	r0, r2
 800b644:	e7e9      	b.n	800b61a <__lo0bits+0x2a>
 800b646:	2000      	movs	r0, #0
 800b648:	4770      	bx	lr
 800b64a:	2020      	movs	r0, #32
 800b64c:	4770      	bx	lr

0800b64e <__i2b>:
 800b64e:	b510      	push	{r4, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	2101      	movs	r1, #1
 800b654:	f7ff ff27 	bl	800b4a6 <_Balloc>
 800b658:	2201      	movs	r2, #1
 800b65a:	6144      	str	r4, [r0, #20]
 800b65c:	6102      	str	r2, [r0, #16]
 800b65e:	bd10      	pop	{r4, pc}

0800b660 <__multiply>:
 800b660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	4614      	mov	r4, r2
 800b666:	690a      	ldr	r2, [r1, #16]
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	bfb8      	it	lt
 800b66e:	460b      	movlt	r3, r1
 800b670:	4688      	mov	r8, r1
 800b672:	bfbc      	itt	lt
 800b674:	46a0      	movlt	r8, r4
 800b676:	461c      	movlt	r4, r3
 800b678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b67c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b680:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b688:	eb07 0609 	add.w	r6, r7, r9
 800b68c:	42b3      	cmp	r3, r6
 800b68e:	bfb8      	it	lt
 800b690:	3101      	addlt	r1, #1
 800b692:	f7ff ff08 	bl	800b4a6 <_Balloc>
 800b696:	f100 0514 	add.w	r5, r0, #20
 800b69a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b69e:	462b      	mov	r3, r5
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4573      	cmp	r3, lr
 800b6a4:	d316      	bcc.n	800b6d4 <__multiply+0x74>
 800b6a6:	f104 0214 	add.w	r2, r4, #20
 800b6aa:	f108 0114 	add.w	r1, r8, #20
 800b6ae:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b6b2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	9201      	str	r2, [sp, #4]
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d80c      	bhi.n	800b6da <__multiply+0x7a>
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	dd03      	ble.n	800b6cc <__multiply+0x6c>
 800b6c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d05d      	beq.n	800b788 <__multiply+0x128>
 800b6cc:	6106      	str	r6, [r0, #16]
 800b6ce:	b003      	add	sp, #12
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	f843 2b04 	str.w	r2, [r3], #4
 800b6d8:	e7e3      	b.n	800b6a2 <__multiply+0x42>
 800b6da:	f8b2 b000 	ldrh.w	fp, [r2]
 800b6de:	f1bb 0f00 	cmp.w	fp, #0
 800b6e2:	d023      	beq.n	800b72c <__multiply+0xcc>
 800b6e4:	4689      	mov	r9, r1
 800b6e6:	46ac      	mov	ip, r5
 800b6e8:	f04f 0800 	mov.w	r8, #0
 800b6ec:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6f0:	f8dc a000 	ldr.w	sl, [ip]
 800b6f4:	b2a3      	uxth	r3, r4
 800b6f6:	fa1f fa8a 	uxth.w	sl, sl
 800b6fa:	fb0b a303 	mla	r3, fp, r3, sl
 800b6fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b702:	f8dc 4000 	ldr.w	r4, [ip]
 800b706:	4443      	add	r3, r8
 800b708:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b70c:	fb0b 840a 	mla	r4, fp, sl, r8
 800b710:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b714:	46e2      	mov	sl, ip
 800b716:	b29b      	uxth	r3, r3
 800b718:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b71c:	454f      	cmp	r7, r9
 800b71e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b722:	f84a 3b04 	str.w	r3, [sl], #4
 800b726:	d82b      	bhi.n	800b780 <__multiply+0x120>
 800b728:	f8cc 8004 	str.w	r8, [ip, #4]
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b732:	3204      	adds	r2, #4
 800b734:	f1ba 0f00 	cmp.w	sl, #0
 800b738:	d020      	beq.n	800b77c <__multiply+0x11c>
 800b73a:	682b      	ldr	r3, [r5, #0]
 800b73c:	4689      	mov	r9, r1
 800b73e:	46a8      	mov	r8, r5
 800b740:	f04f 0b00 	mov.w	fp, #0
 800b744:	f8b9 c000 	ldrh.w	ip, [r9]
 800b748:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b74c:	fb0a 440c 	mla	r4, sl, ip, r4
 800b750:	445c      	add	r4, fp
 800b752:	46c4      	mov	ip, r8
 800b754:	b29b      	uxth	r3, r3
 800b756:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b75a:	f84c 3b04 	str.w	r3, [ip], #4
 800b75e:	f859 3b04 	ldr.w	r3, [r9], #4
 800b762:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b766:	0c1b      	lsrs	r3, r3, #16
 800b768:	fb0a b303 	mla	r3, sl, r3, fp
 800b76c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b770:	454f      	cmp	r7, r9
 800b772:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b776:	d805      	bhi.n	800b784 <__multiply+0x124>
 800b778:	f8c8 3004 	str.w	r3, [r8, #4]
 800b77c:	3504      	adds	r5, #4
 800b77e:	e79b      	b.n	800b6b8 <__multiply+0x58>
 800b780:	46d4      	mov	ip, sl
 800b782:	e7b3      	b.n	800b6ec <__multiply+0x8c>
 800b784:	46e0      	mov	r8, ip
 800b786:	e7dd      	b.n	800b744 <__multiply+0xe4>
 800b788:	3e01      	subs	r6, #1
 800b78a:	e799      	b.n	800b6c0 <__multiply+0x60>

0800b78c <__pow5mult>:
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4615      	mov	r5, r2
 800b792:	f012 0203 	ands.w	r2, r2, #3
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	d007      	beq.n	800b7ac <__pow5mult+0x20>
 800b79c:	3a01      	subs	r2, #1
 800b79e:	4c21      	ldr	r4, [pc, #132]	; (800b824 <__pow5mult+0x98>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7a6:	f7ff fec9 	bl	800b53c <__multadd>
 800b7aa:	4607      	mov	r7, r0
 800b7ac:	10ad      	asrs	r5, r5, #2
 800b7ae:	d035      	beq.n	800b81c <__pow5mult+0x90>
 800b7b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7b2:	b93c      	cbnz	r4, 800b7c4 <__pow5mult+0x38>
 800b7b4:	2010      	movs	r0, #16
 800b7b6:	f7ff fe51 	bl	800b45c <malloc>
 800b7ba:	6270      	str	r0, [r6, #36]	; 0x24
 800b7bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7c0:	6004      	str	r4, [r0, #0]
 800b7c2:	60c4      	str	r4, [r0, #12]
 800b7c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b7c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7cc:	b94c      	cbnz	r4, 800b7e2 <__pow5mult+0x56>
 800b7ce:	f240 2171 	movw	r1, #625	; 0x271
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7ff ff3b 	bl	800b64e <__i2b>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7de:	4604      	mov	r4, r0
 800b7e0:	6003      	str	r3, [r0, #0]
 800b7e2:	f04f 0800 	mov.w	r8, #0
 800b7e6:	07eb      	lsls	r3, r5, #31
 800b7e8:	d50a      	bpl.n	800b800 <__pow5mult+0x74>
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7ff ff36 	bl	800b660 <__multiply>
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	4681      	mov	r9, r0
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff fe88 	bl	800b50e <_Bfree>
 800b7fe:	464f      	mov	r7, r9
 800b800:	106d      	asrs	r5, r5, #1
 800b802:	d00b      	beq.n	800b81c <__pow5mult+0x90>
 800b804:	6820      	ldr	r0, [r4, #0]
 800b806:	b938      	cbnz	r0, 800b818 <__pow5mult+0x8c>
 800b808:	4622      	mov	r2, r4
 800b80a:	4621      	mov	r1, r4
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7ff ff27 	bl	800b660 <__multiply>
 800b812:	6020      	str	r0, [r4, #0]
 800b814:	f8c0 8000 	str.w	r8, [r0]
 800b818:	4604      	mov	r4, r0
 800b81a:	e7e4      	b.n	800b7e6 <__pow5mult+0x5a>
 800b81c:	4638      	mov	r0, r7
 800b81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b822:	bf00      	nop
 800b824:	0800c5f0 	.word	0x0800c5f0

0800b828 <__lshift>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	460c      	mov	r4, r1
 800b82e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b832:	6923      	ldr	r3, [r4, #16]
 800b834:	6849      	ldr	r1, [r1, #4]
 800b836:	eb0a 0903 	add.w	r9, sl, r3
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	4607      	mov	r7, r0
 800b83e:	4616      	mov	r6, r2
 800b840:	f109 0501 	add.w	r5, r9, #1
 800b844:	42ab      	cmp	r3, r5
 800b846:	db32      	blt.n	800b8ae <__lshift+0x86>
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff fe2c 	bl	800b4a6 <_Balloc>
 800b84e:	2300      	movs	r3, #0
 800b850:	4680      	mov	r8, r0
 800b852:	f100 0114 	add.w	r1, r0, #20
 800b856:	461a      	mov	r2, r3
 800b858:	4553      	cmp	r3, sl
 800b85a:	db2b      	blt.n	800b8b4 <__lshift+0x8c>
 800b85c:	6920      	ldr	r0, [r4, #16]
 800b85e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b862:	f104 0314 	add.w	r3, r4, #20
 800b866:	f016 021f 	ands.w	r2, r6, #31
 800b86a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b86e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b872:	d025      	beq.n	800b8c0 <__lshift+0x98>
 800b874:	f1c2 0e20 	rsb	lr, r2, #32
 800b878:	2000      	movs	r0, #0
 800b87a:	681e      	ldr	r6, [r3, #0]
 800b87c:	468a      	mov	sl, r1
 800b87e:	4096      	lsls	r6, r2
 800b880:	4330      	orrs	r0, r6
 800b882:	f84a 0b04 	str.w	r0, [sl], #4
 800b886:	f853 0b04 	ldr.w	r0, [r3], #4
 800b88a:	459c      	cmp	ip, r3
 800b88c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b890:	d814      	bhi.n	800b8bc <__lshift+0x94>
 800b892:	6048      	str	r0, [r1, #4]
 800b894:	b108      	cbz	r0, 800b89a <__lshift+0x72>
 800b896:	f109 0502 	add.w	r5, r9, #2
 800b89a:	3d01      	subs	r5, #1
 800b89c:	4638      	mov	r0, r7
 800b89e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	f7ff fe33 	bl	800b50e <_Bfree>
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ae:	3101      	adds	r1, #1
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	e7c7      	b.n	800b844 <__lshift+0x1c>
 800b8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	e7cd      	b.n	800b858 <__lshift+0x30>
 800b8bc:	4651      	mov	r1, sl
 800b8be:	e7dc      	b.n	800b87a <__lshift+0x52>
 800b8c0:	3904      	subs	r1, #4
 800b8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8c6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8ca:	459c      	cmp	ip, r3
 800b8cc:	d8f9      	bhi.n	800b8c2 <__lshift+0x9a>
 800b8ce:	e7e4      	b.n	800b89a <__lshift+0x72>

0800b8d0 <__mcmp>:
 800b8d0:	6903      	ldr	r3, [r0, #16]
 800b8d2:	690a      	ldr	r2, [r1, #16]
 800b8d4:	1a9b      	subs	r3, r3, r2
 800b8d6:	b530      	push	{r4, r5, lr}
 800b8d8:	d10c      	bne.n	800b8f4 <__mcmp+0x24>
 800b8da:	0092      	lsls	r2, r2, #2
 800b8dc:	3014      	adds	r0, #20
 800b8de:	3114      	adds	r1, #20
 800b8e0:	1884      	adds	r4, r0, r2
 800b8e2:	4411      	add	r1, r2
 800b8e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8ec:	4295      	cmp	r5, r2
 800b8ee:	d003      	beq.n	800b8f8 <__mcmp+0x28>
 800b8f0:	d305      	bcc.n	800b8fe <__mcmp+0x2e>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	42a0      	cmp	r0, r4
 800b8fa:	d3f3      	bcc.n	800b8e4 <__mcmp+0x14>
 800b8fc:	e7fa      	b.n	800b8f4 <__mcmp+0x24>
 800b8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b902:	e7f7      	b.n	800b8f4 <__mcmp+0x24>

0800b904 <__mdiff>:
 800b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b908:	460d      	mov	r5, r1
 800b90a:	4607      	mov	r7, r0
 800b90c:	4611      	mov	r1, r2
 800b90e:	4628      	mov	r0, r5
 800b910:	4614      	mov	r4, r2
 800b912:	f7ff ffdd 	bl	800b8d0 <__mcmp>
 800b916:	1e06      	subs	r6, r0, #0
 800b918:	d108      	bne.n	800b92c <__mdiff+0x28>
 800b91a:	4631      	mov	r1, r6
 800b91c:	4638      	mov	r0, r7
 800b91e:	f7ff fdc2 	bl	800b4a6 <_Balloc>
 800b922:	2301      	movs	r3, #1
 800b924:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92c:	bfa4      	itt	ge
 800b92e:	4623      	movge	r3, r4
 800b930:	462c      	movge	r4, r5
 800b932:	4638      	mov	r0, r7
 800b934:	6861      	ldr	r1, [r4, #4]
 800b936:	bfa6      	itte	ge
 800b938:	461d      	movge	r5, r3
 800b93a:	2600      	movge	r6, #0
 800b93c:	2601      	movlt	r6, #1
 800b93e:	f7ff fdb2 	bl	800b4a6 <_Balloc>
 800b942:	692b      	ldr	r3, [r5, #16]
 800b944:	60c6      	str	r6, [r0, #12]
 800b946:	6926      	ldr	r6, [r4, #16]
 800b948:	f105 0914 	add.w	r9, r5, #20
 800b94c:	f104 0214 	add.w	r2, r4, #20
 800b950:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b954:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b958:	f100 0514 	add.w	r5, r0, #20
 800b95c:	f04f 0e00 	mov.w	lr, #0
 800b960:	f852 ab04 	ldr.w	sl, [r2], #4
 800b964:	f859 4b04 	ldr.w	r4, [r9], #4
 800b968:	fa1e f18a 	uxtah	r1, lr, sl
 800b96c:	b2a3      	uxth	r3, r4
 800b96e:	1ac9      	subs	r1, r1, r3
 800b970:	0c23      	lsrs	r3, r4, #16
 800b972:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b976:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b97a:	b289      	uxth	r1, r1
 800b97c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b980:	45c8      	cmp	r8, r9
 800b982:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b986:	4694      	mov	ip, r2
 800b988:	f845 3b04 	str.w	r3, [r5], #4
 800b98c:	d8e8      	bhi.n	800b960 <__mdiff+0x5c>
 800b98e:	45bc      	cmp	ip, r7
 800b990:	d304      	bcc.n	800b99c <__mdiff+0x98>
 800b992:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b996:	b183      	cbz	r3, 800b9ba <__mdiff+0xb6>
 800b998:	6106      	str	r6, [r0, #16]
 800b99a:	e7c5      	b.n	800b928 <__mdiff+0x24>
 800b99c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9a0:	fa1e f381 	uxtah	r3, lr, r1
 800b9a4:	141a      	asrs	r2, r3, #16
 800b9a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b9b4:	f845 3b04 	str.w	r3, [r5], #4
 800b9b8:	e7e9      	b.n	800b98e <__mdiff+0x8a>
 800b9ba:	3e01      	subs	r6, #1
 800b9bc:	e7e9      	b.n	800b992 <__mdiff+0x8e>

0800b9be <__d2b>:
 800b9be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9c2:	460e      	mov	r6, r1
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	ec59 8b10 	vmov	r8, r9, d0
 800b9ca:	4615      	mov	r5, r2
 800b9cc:	f7ff fd6b 	bl	800b4a6 <_Balloc>
 800b9d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b9d4:	4607      	mov	r7, r0
 800b9d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9da:	bb34      	cbnz	r4, 800ba2a <__d2b+0x6c>
 800b9dc:	9301      	str	r3, [sp, #4]
 800b9de:	f1b8 0300 	subs.w	r3, r8, #0
 800b9e2:	d027      	beq.n	800ba34 <__d2b+0x76>
 800b9e4:	a802      	add	r0, sp, #8
 800b9e6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b9ea:	f7ff fe01 	bl	800b5f0 <__lo0bits>
 800b9ee:	9900      	ldr	r1, [sp, #0]
 800b9f0:	b1f0      	cbz	r0, 800ba30 <__d2b+0x72>
 800b9f2:	9a01      	ldr	r2, [sp, #4]
 800b9f4:	f1c0 0320 	rsb	r3, r0, #32
 800b9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fc:	430b      	orrs	r3, r1
 800b9fe:	40c2      	lsrs	r2, r0
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	9201      	str	r2, [sp, #4]
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	61bb      	str	r3, [r7, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bf14      	ite	ne
 800ba0c:	2102      	movne	r1, #2
 800ba0e:	2101      	moveq	r1, #1
 800ba10:	6139      	str	r1, [r7, #16]
 800ba12:	b1c4      	cbz	r4, 800ba46 <__d2b+0x88>
 800ba14:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ba18:	4404      	add	r4, r0
 800ba1a:	6034      	str	r4, [r6, #0]
 800ba1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba20:	6028      	str	r0, [r5, #0]
 800ba22:	4638      	mov	r0, r7
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba2e:	e7d5      	b.n	800b9dc <__d2b+0x1e>
 800ba30:	6179      	str	r1, [r7, #20]
 800ba32:	e7e7      	b.n	800ba04 <__d2b+0x46>
 800ba34:	a801      	add	r0, sp, #4
 800ba36:	f7ff fddb 	bl	800b5f0 <__lo0bits>
 800ba3a:	9b01      	ldr	r3, [sp, #4]
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	2101      	movs	r1, #1
 800ba40:	6139      	str	r1, [r7, #16]
 800ba42:	3020      	adds	r0, #32
 800ba44:	e7e5      	b.n	800ba12 <__d2b+0x54>
 800ba46:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba4e:	6030      	str	r0, [r6, #0]
 800ba50:	6918      	ldr	r0, [r3, #16]
 800ba52:	f7ff fdae 	bl	800b5b2 <__hi0bits>
 800ba56:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ba5a:	e7e1      	b.n	800ba20 <__d2b+0x62>

0800ba5c <_calloc_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	fb02 f401 	mul.w	r4, r2, r1
 800ba62:	4621      	mov	r1, r4
 800ba64:	f000 f856 	bl	800bb14 <_malloc_r>
 800ba68:	4605      	mov	r5, r0
 800ba6a:	b118      	cbz	r0, 800ba74 <_calloc_r+0x18>
 800ba6c:	4622      	mov	r2, r4
 800ba6e:	2100      	movs	r1, #0
 800ba70:	f7fe f97a 	bl	8009d68 <memset>
 800ba74:	4628      	mov	r0, r5
 800ba76:	bd38      	pop	{r3, r4, r5, pc}

0800ba78 <_free_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	d045      	beq.n	800bb0c <_free_r+0x94>
 800ba80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba84:	1f0c      	subs	r4, r1, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	18e4      	addlt	r4, r4, r3
 800ba8c:	f000 fa24 	bl	800bed8 <__malloc_lock>
 800ba90:	4a1f      	ldr	r2, [pc, #124]	; (800bb10 <_free_r+0x98>)
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	4610      	mov	r0, r2
 800ba96:	b933      	cbnz	r3, 800baa6 <_free_r+0x2e>
 800ba98:	6063      	str	r3, [r4, #4]
 800ba9a:	6014      	str	r4, [r2, #0]
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa2:	f000 ba1a 	b.w	800beda <__malloc_unlock>
 800baa6:	42a3      	cmp	r3, r4
 800baa8:	d90c      	bls.n	800bac4 <_free_r+0x4c>
 800baaa:	6821      	ldr	r1, [r4, #0]
 800baac:	1862      	adds	r2, r4, r1
 800baae:	4293      	cmp	r3, r2
 800bab0:	bf04      	itt	eq
 800bab2:	681a      	ldreq	r2, [r3, #0]
 800bab4:	685b      	ldreq	r3, [r3, #4]
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	bf04      	itt	eq
 800baba:	1852      	addeq	r2, r2, r1
 800babc:	6022      	streq	r2, [r4, #0]
 800babe:	6004      	str	r4, [r0, #0]
 800bac0:	e7ec      	b.n	800ba9c <_free_r+0x24>
 800bac2:	4613      	mov	r3, r2
 800bac4:	685a      	ldr	r2, [r3, #4]
 800bac6:	b10a      	cbz	r2, 800bacc <_free_r+0x54>
 800bac8:	42a2      	cmp	r2, r4
 800baca:	d9fa      	bls.n	800bac2 <_free_r+0x4a>
 800bacc:	6819      	ldr	r1, [r3, #0]
 800bace:	1858      	adds	r0, r3, r1
 800bad0:	42a0      	cmp	r0, r4
 800bad2:	d10b      	bne.n	800baec <_free_r+0x74>
 800bad4:	6820      	ldr	r0, [r4, #0]
 800bad6:	4401      	add	r1, r0
 800bad8:	1858      	adds	r0, r3, r1
 800bada:	4282      	cmp	r2, r0
 800badc:	6019      	str	r1, [r3, #0]
 800bade:	d1dd      	bne.n	800ba9c <_free_r+0x24>
 800bae0:	6810      	ldr	r0, [r2, #0]
 800bae2:	6852      	ldr	r2, [r2, #4]
 800bae4:	605a      	str	r2, [r3, #4]
 800bae6:	4401      	add	r1, r0
 800bae8:	6019      	str	r1, [r3, #0]
 800baea:	e7d7      	b.n	800ba9c <_free_r+0x24>
 800baec:	d902      	bls.n	800baf4 <_free_r+0x7c>
 800baee:	230c      	movs	r3, #12
 800baf0:	602b      	str	r3, [r5, #0]
 800baf2:	e7d3      	b.n	800ba9c <_free_r+0x24>
 800baf4:	6820      	ldr	r0, [r4, #0]
 800baf6:	1821      	adds	r1, r4, r0
 800baf8:	428a      	cmp	r2, r1
 800bafa:	bf04      	itt	eq
 800bafc:	6811      	ldreq	r1, [r2, #0]
 800bafe:	6852      	ldreq	r2, [r2, #4]
 800bb00:	6062      	str	r2, [r4, #4]
 800bb02:	bf04      	itt	eq
 800bb04:	1809      	addeq	r1, r1, r0
 800bb06:	6021      	streq	r1, [r4, #0]
 800bb08:	605c      	str	r4, [r3, #4]
 800bb0a:	e7c7      	b.n	800ba9c <_free_r+0x24>
 800bb0c:	bd38      	pop	{r3, r4, r5, pc}
 800bb0e:	bf00      	nop
 800bb10:	2000045c 	.word	0x2000045c

0800bb14 <_malloc_r>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	1ccd      	adds	r5, r1, #3
 800bb18:	f025 0503 	bic.w	r5, r5, #3
 800bb1c:	3508      	adds	r5, #8
 800bb1e:	2d0c      	cmp	r5, #12
 800bb20:	bf38      	it	cc
 800bb22:	250c      	movcc	r5, #12
 800bb24:	2d00      	cmp	r5, #0
 800bb26:	4606      	mov	r6, r0
 800bb28:	db01      	blt.n	800bb2e <_malloc_r+0x1a>
 800bb2a:	42a9      	cmp	r1, r5
 800bb2c:	d903      	bls.n	800bb36 <_malloc_r+0x22>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	6033      	str	r3, [r6, #0]
 800bb32:	2000      	movs	r0, #0
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	f000 f9cf 	bl	800bed8 <__malloc_lock>
 800bb3a:	4a21      	ldr	r2, [pc, #132]	; (800bbc0 <_malloc_r+0xac>)
 800bb3c:	6814      	ldr	r4, [r2, #0]
 800bb3e:	4621      	mov	r1, r4
 800bb40:	b991      	cbnz	r1, 800bb68 <_malloc_r+0x54>
 800bb42:	4c20      	ldr	r4, [pc, #128]	; (800bbc4 <_malloc_r+0xb0>)
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	b91b      	cbnz	r3, 800bb50 <_malloc_r+0x3c>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f000 f98f 	bl	800be6c <_sbrk_r>
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	4629      	mov	r1, r5
 800bb52:	4630      	mov	r0, r6
 800bb54:	f000 f98a 	bl	800be6c <_sbrk_r>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d124      	bne.n	800bba6 <_malloc_r+0x92>
 800bb5c:	230c      	movs	r3, #12
 800bb5e:	6033      	str	r3, [r6, #0]
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 f9ba 	bl	800beda <__malloc_unlock>
 800bb66:	e7e4      	b.n	800bb32 <_malloc_r+0x1e>
 800bb68:	680b      	ldr	r3, [r1, #0]
 800bb6a:	1b5b      	subs	r3, r3, r5
 800bb6c:	d418      	bmi.n	800bba0 <_malloc_r+0x8c>
 800bb6e:	2b0b      	cmp	r3, #11
 800bb70:	d90f      	bls.n	800bb92 <_malloc_r+0x7e>
 800bb72:	600b      	str	r3, [r1, #0]
 800bb74:	50cd      	str	r5, [r1, r3]
 800bb76:	18cc      	adds	r4, r1, r3
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f000 f9ae 	bl	800beda <__malloc_unlock>
 800bb7e:	f104 000b 	add.w	r0, r4, #11
 800bb82:	1d23      	adds	r3, r4, #4
 800bb84:	f020 0007 	bic.w	r0, r0, #7
 800bb88:	1ac3      	subs	r3, r0, r3
 800bb8a:	d0d3      	beq.n	800bb34 <_malloc_r+0x20>
 800bb8c:	425a      	negs	r2, r3
 800bb8e:	50e2      	str	r2, [r4, r3]
 800bb90:	e7d0      	b.n	800bb34 <_malloc_r+0x20>
 800bb92:	428c      	cmp	r4, r1
 800bb94:	684b      	ldr	r3, [r1, #4]
 800bb96:	bf16      	itet	ne
 800bb98:	6063      	strne	r3, [r4, #4]
 800bb9a:	6013      	streq	r3, [r2, #0]
 800bb9c:	460c      	movne	r4, r1
 800bb9e:	e7eb      	b.n	800bb78 <_malloc_r+0x64>
 800bba0:	460c      	mov	r4, r1
 800bba2:	6849      	ldr	r1, [r1, #4]
 800bba4:	e7cc      	b.n	800bb40 <_malloc_r+0x2c>
 800bba6:	1cc4      	adds	r4, r0, #3
 800bba8:	f024 0403 	bic.w	r4, r4, #3
 800bbac:	42a0      	cmp	r0, r4
 800bbae:	d005      	beq.n	800bbbc <_malloc_r+0xa8>
 800bbb0:	1a21      	subs	r1, r4, r0
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f95a 	bl	800be6c <_sbrk_r>
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d0cf      	beq.n	800bb5c <_malloc_r+0x48>
 800bbbc:	6025      	str	r5, [r4, #0]
 800bbbe:	e7db      	b.n	800bb78 <_malloc_r+0x64>
 800bbc0:	2000045c 	.word	0x2000045c
 800bbc4:	20000460 	.word	0x20000460

0800bbc8 <__ssputs_r>:
 800bbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbcc:	688e      	ldr	r6, [r1, #8]
 800bbce:	429e      	cmp	r6, r3
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	4690      	mov	r8, r2
 800bbd6:	4699      	mov	r9, r3
 800bbd8:	d837      	bhi.n	800bc4a <__ssputs_r+0x82>
 800bbda:	898a      	ldrh	r2, [r1, #12]
 800bbdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbe0:	d031      	beq.n	800bc46 <__ssputs_r+0x7e>
 800bbe2:	6825      	ldr	r5, [r4, #0]
 800bbe4:	6909      	ldr	r1, [r1, #16]
 800bbe6:	1a6f      	subs	r7, r5, r1
 800bbe8:	6965      	ldr	r5, [r4, #20]
 800bbea:	2302      	movs	r3, #2
 800bbec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf0:	fb95 f5f3 	sdiv	r5, r5, r3
 800bbf4:	f109 0301 	add.w	r3, r9, #1
 800bbf8:	443b      	add	r3, r7
 800bbfa:	429d      	cmp	r5, r3
 800bbfc:	bf38      	it	cc
 800bbfe:	461d      	movcc	r5, r3
 800bc00:	0553      	lsls	r3, r2, #21
 800bc02:	d530      	bpl.n	800bc66 <__ssputs_r+0x9e>
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7ff ff85 	bl	800bb14 <_malloc_r>
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	b950      	cbnz	r0, 800bc24 <__ssputs_r+0x5c>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	f8ca 3000 	str.w	r3, [sl]
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc24:	463a      	mov	r2, r7
 800bc26:	6921      	ldr	r1, [r4, #16]
 800bc28:	f7ff fc32 	bl	800b490 <memcpy>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc36:	81a3      	strh	r3, [r4, #12]
 800bc38:	6126      	str	r6, [r4, #16]
 800bc3a:	6165      	str	r5, [r4, #20]
 800bc3c:	443e      	add	r6, r7
 800bc3e:	1bed      	subs	r5, r5, r7
 800bc40:	6026      	str	r6, [r4, #0]
 800bc42:	60a5      	str	r5, [r4, #8]
 800bc44:	464e      	mov	r6, r9
 800bc46:	454e      	cmp	r6, r9
 800bc48:	d900      	bls.n	800bc4c <__ssputs_r+0x84>
 800bc4a:	464e      	mov	r6, r9
 800bc4c:	4632      	mov	r2, r6
 800bc4e:	4641      	mov	r1, r8
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	f000 f928 	bl	800bea6 <memmove>
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	1b9b      	subs	r3, r3, r6
 800bc5a:	60a3      	str	r3, [r4, #8]
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	441e      	add	r6, r3
 800bc60:	6026      	str	r6, [r4, #0]
 800bc62:	2000      	movs	r0, #0
 800bc64:	e7dc      	b.n	800bc20 <__ssputs_r+0x58>
 800bc66:	462a      	mov	r2, r5
 800bc68:	f000 f938 	bl	800bedc <_realloc_r>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d1e2      	bne.n	800bc38 <__ssputs_r+0x70>
 800bc72:	6921      	ldr	r1, [r4, #16]
 800bc74:	4650      	mov	r0, sl
 800bc76:	f7ff feff 	bl	800ba78 <_free_r>
 800bc7a:	e7c8      	b.n	800bc0e <__ssputs_r+0x46>

0800bc7c <_svfiprintf_r>:
 800bc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	461d      	mov	r5, r3
 800bc82:	898b      	ldrh	r3, [r1, #12]
 800bc84:	061f      	lsls	r7, r3, #24
 800bc86:	b09d      	sub	sp, #116	; 0x74
 800bc88:	4680      	mov	r8, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4616      	mov	r6, r2
 800bc8e:	d50f      	bpl.n	800bcb0 <_svfiprintf_r+0x34>
 800bc90:	690b      	ldr	r3, [r1, #16]
 800bc92:	b96b      	cbnz	r3, 800bcb0 <_svfiprintf_r+0x34>
 800bc94:	2140      	movs	r1, #64	; 0x40
 800bc96:	f7ff ff3d 	bl	800bb14 <_malloc_r>
 800bc9a:	6020      	str	r0, [r4, #0]
 800bc9c:	6120      	str	r0, [r4, #16]
 800bc9e:	b928      	cbnz	r0, 800bcac <_svfiprintf_r+0x30>
 800bca0:	230c      	movs	r3, #12
 800bca2:	f8c8 3000 	str.w	r3, [r8]
 800bca6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcaa:	e0c8      	b.n	800be3e <_svfiprintf_r+0x1c2>
 800bcac:	2340      	movs	r3, #64	; 0x40
 800bcae:	6163      	str	r3, [r4, #20]
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcba:	2330      	movs	r3, #48	; 0x30
 800bcbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc0:	9503      	str	r5, [sp, #12]
 800bcc2:	f04f 0b01 	mov.w	fp, #1
 800bcc6:	4637      	mov	r7, r6
 800bcc8:	463d      	mov	r5, r7
 800bcca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bcce:	b10b      	cbz	r3, 800bcd4 <_svfiprintf_r+0x58>
 800bcd0:	2b25      	cmp	r3, #37	; 0x25
 800bcd2:	d13e      	bne.n	800bd52 <_svfiprintf_r+0xd6>
 800bcd4:	ebb7 0a06 	subs.w	sl, r7, r6
 800bcd8:	d00b      	beq.n	800bcf2 <_svfiprintf_r+0x76>
 800bcda:	4653      	mov	r3, sl
 800bcdc:	4632      	mov	r2, r6
 800bcde:	4621      	mov	r1, r4
 800bce0:	4640      	mov	r0, r8
 800bce2:	f7ff ff71 	bl	800bbc8 <__ssputs_r>
 800bce6:	3001      	adds	r0, #1
 800bce8:	f000 80a4 	beq.w	800be34 <_svfiprintf_r+0x1b8>
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	4453      	add	r3, sl
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	783b      	ldrb	r3, [r7, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 809d 	beq.w	800be34 <_svfiprintf_r+0x1b8>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	9307      	str	r3, [sp, #28]
 800bd08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd0e:	462f      	mov	r7, r5
 800bd10:	2205      	movs	r2, #5
 800bd12:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bd16:	4850      	ldr	r0, [pc, #320]	; (800be58 <_svfiprintf_r+0x1dc>)
 800bd18:	f7f4 fa72 	bl	8000200 <memchr>
 800bd1c:	9b04      	ldr	r3, [sp, #16]
 800bd1e:	b9d0      	cbnz	r0, 800bd56 <_svfiprintf_r+0xda>
 800bd20:	06d9      	lsls	r1, r3, #27
 800bd22:	bf44      	itt	mi
 800bd24:	2220      	movmi	r2, #32
 800bd26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd2a:	071a      	lsls	r2, r3, #28
 800bd2c:	bf44      	itt	mi
 800bd2e:	222b      	movmi	r2, #43	; 0x2b
 800bd30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd34:	782a      	ldrb	r2, [r5, #0]
 800bd36:	2a2a      	cmp	r2, #42	; 0x2a
 800bd38:	d015      	beq.n	800bd66 <_svfiprintf_r+0xea>
 800bd3a:	9a07      	ldr	r2, [sp, #28]
 800bd3c:	462f      	mov	r7, r5
 800bd3e:	2000      	movs	r0, #0
 800bd40:	250a      	movs	r5, #10
 800bd42:	4639      	mov	r1, r7
 800bd44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd48:	3b30      	subs	r3, #48	; 0x30
 800bd4a:	2b09      	cmp	r3, #9
 800bd4c:	d94d      	bls.n	800bdea <_svfiprintf_r+0x16e>
 800bd4e:	b1b8      	cbz	r0, 800bd80 <_svfiprintf_r+0x104>
 800bd50:	e00f      	b.n	800bd72 <_svfiprintf_r+0xf6>
 800bd52:	462f      	mov	r7, r5
 800bd54:	e7b8      	b.n	800bcc8 <_svfiprintf_r+0x4c>
 800bd56:	4a40      	ldr	r2, [pc, #256]	; (800be58 <_svfiprintf_r+0x1dc>)
 800bd58:	1a80      	subs	r0, r0, r2
 800bd5a:	fa0b f000 	lsl.w	r0, fp, r0
 800bd5e:	4318      	orrs	r0, r3
 800bd60:	9004      	str	r0, [sp, #16]
 800bd62:	463d      	mov	r5, r7
 800bd64:	e7d3      	b.n	800bd0e <_svfiprintf_r+0x92>
 800bd66:	9a03      	ldr	r2, [sp, #12]
 800bd68:	1d11      	adds	r1, r2, #4
 800bd6a:	6812      	ldr	r2, [r2, #0]
 800bd6c:	9103      	str	r1, [sp, #12]
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	db01      	blt.n	800bd76 <_svfiprintf_r+0xfa>
 800bd72:	9207      	str	r2, [sp, #28]
 800bd74:	e004      	b.n	800bd80 <_svfiprintf_r+0x104>
 800bd76:	4252      	negs	r2, r2
 800bd78:	f043 0302 	orr.w	r3, r3, #2
 800bd7c:	9207      	str	r2, [sp, #28]
 800bd7e:	9304      	str	r3, [sp, #16]
 800bd80:	783b      	ldrb	r3, [r7, #0]
 800bd82:	2b2e      	cmp	r3, #46	; 0x2e
 800bd84:	d10c      	bne.n	800bda0 <_svfiprintf_r+0x124>
 800bd86:	787b      	ldrb	r3, [r7, #1]
 800bd88:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8a:	d133      	bne.n	800bdf4 <_svfiprintf_r+0x178>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1d1a      	adds	r2, r3, #4
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	9203      	str	r2, [sp, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfb8      	it	lt
 800bd98:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd9c:	3702      	adds	r7, #2
 800bd9e:	9305      	str	r3, [sp, #20]
 800bda0:	4d2e      	ldr	r5, [pc, #184]	; (800be5c <_svfiprintf_r+0x1e0>)
 800bda2:	7839      	ldrb	r1, [r7, #0]
 800bda4:	2203      	movs	r2, #3
 800bda6:	4628      	mov	r0, r5
 800bda8:	f7f4 fa2a 	bl	8000200 <memchr>
 800bdac:	b138      	cbz	r0, 800bdbe <_svfiprintf_r+0x142>
 800bdae:	2340      	movs	r3, #64	; 0x40
 800bdb0:	1b40      	subs	r0, r0, r5
 800bdb2:	fa03 f000 	lsl.w	r0, r3, r0
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	4303      	orrs	r3, r0
 800bdba:	3701      	adds	r7, #1
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	7839      	ldrb	r1, [r7, #0]
 800bdc0:	4827      	ldr	r0, [pc, #156]	; (800be60 <_svfiprintf_r+0x1e4>)
 800bdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdc6:	2206      	movs	r2, #6
 800bdc8:	1c7e      	adds	r6, r7, #1
 800bdca:	f7f4 fa19 	bl	8000200 <memchr>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d038      	beq.n	800be44 <_svfiprintf_r+0x1c8>
 800bdd2:	4b24      	ldr	r3, [pc, #144]	; (800be64 <_svfiprintf_r+0x1e8>)
 800bdd4:	bb13      	cbnz	r3, 800be1c <_svfiprintf_r+0x1a0>
 800bdd6:	9b03      	ldr	r3, [sp, #12]
 800bdd8:	3307      	adds	r3, #7
 800bdda:	f023 0307 	bic.w	r3, r3, #7
 800bdde:	3308      	adds	r3, #8
 800bde0:	9303      	str	r3, [sp, #12]
 800bde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde4:	444b      	add	r3, r9
 800bde6:	9309      	str	r3, [sp, #36]	; 0x24
 800bde8:	e76d      	b.n	800bcc6 <_svfiprintf_r+0x4a>
 800bdea:	fb05 3202 	mla	r2, r5, r2, r3
 800bdee:	2001      	movs	r0, #1
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	e7a6      	b.n	800bd42 <_svfiprintf_r+0xc6>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	3701      	adds	r7, #1
 800bdf8:	9305      	str	r3, [sp, #20]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	250a      	movs	r5, #10
 800bdfe:	4638      	mov	r0, r7
 800be00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be04:	3a30      	subs	r2, #48	; 0x30
 800be06:	2a09      	cmp	r2, #9
 800be08:	d903      	bls.n	800be12 <_svfiprintf_r+0x196>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0c8      	beq.n	800bda0 <_svfiprintf_r+0x124>
 800be0e:	9105      	str	r1, [sp, #20]
 800be10:	e7c6      	b.n	800bda0 <_svfiprintf_r+0x124>
 800be12:	fb05 2101 	mla	r1, r5, r1, r2
 800be16:	2301      	movs	r3, #1
 800be18:	4607      	mov	r7, r0
 800be1a:	e7f0      	b.n	800bdfe <_svfiprintf_r+0x182>
 800be1c:	ab03      	add	r3, sp, #12
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	4622      	mov	r2, r4
 800be22:	4b11      	ldr	r3, [pc, #68]	; (800be68 <_svfiprintf_r+0x1ec>)
 800be24:	a904      	add	r1, sp, #16
 800be26:	4640      	mov	r0, r8
 800be28:	f7fe f83a 	bl	8009ea0 <_printf_float>
 800be2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be30:	4681      	mov	r9, r0
 800be32:	d1d6      	bne.n	800bde2 <_svfiprintf_r+0x166>
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	065b      	lsls	r3, r3, #25
 800be38:	f53f af35 	bmi.w	800bca6 <_svfiprintf_r+0x2a>
 800be3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be3e:	b01d      	add	sp, #116	; 0x74
 800be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be44:	ab03      	add	r3, sp, #12
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	4622      	mov	r2, r4
 800be4a:	4b07      	ldr	r3, [pc, #28]	; (800be68 <_svfiprintf_r+0x1ec>)
 800be4c:	a904      	add	r1, sp, #16
 800be4e:	4640      	mov	r0, r8
 800be50:	f7fe fadc 	bl	800a40c <_printf_i>
 800be54:	e7ea      	b.n	800be2c <_svfiprintf_r+0x1b0>
 800be56:	bf00      	nop
 800be58:	0800c5fc 	.word	0x0800c5fc
 800be5c:	0800c602 	.word	0x0800c602
 800be60:	0800c606 	.word	0x0800c606
 800be64:	08009ea1 	.word	0x08009ea1
 800be68:	0800bbc9 	.word	0x0800bbc9

0800be6c <_sbrk_r>:
 800be6c:	b538      	push	{r3, r4, r5, lr}
 800be6e:	4c06      	ldr	r4, [pc, #24]	; (800be88 <_sbrk_r+0x1c>)
 800be70:	2300      	movs	r3, #0
 800be72:	4605      	mov	r5, r0
 800be74:	4608      	mov	r0, r1
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	f7f9 fee2 	bl	8005c40 <_sbrk>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_sbrk_r+0x1a>
 800be80:	6823      	ldr	r3, [r4, #0]
 800be82:	b103      	cbz	r3, 800be86 <_sbrk_r+0x1a>
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20000ef8 	.word	0x20000ef8

0800be8c <__ascii_wctomb>:
 800be8c:	b149      	cbz	r1, 800bea2 <__ascii_wctomb+0x16>
 800be8e:	2aff      	cmp	r2, #255	; 0xff
 800be90:	bf85      	ittet	hi
 800be92:	238a      	movhi	r3, #138	; 0x8a
 800be94:	6003      	strhi	r3, [r0, #0]
 800be96:	700a      	strbls	r2, [r1, #0]
 800be98:	f04f 30ff 	movhi.w	r0, #4294967295
 800be9c:	bf98      	it	ls
 800be9e:	2001      	movls	r0, #1
 800bea0:	4770      	bx	lr
 800bea2:	4608      	mov	r0, r1
 800bea4:	4770      	bx	lr

0800bea6 <memmove>:
 800bea6:	4288      	cmp	r0, r1
 800bea8:	b510      	push	{r4, lr}
 800beaa:	eb01 0302 	add.w	r3, r1, r2
 800beae:	d807      	bhi.n	800bec0 <memmove+0x1a>
 800beb0:	1e42      	subs	r2, r0, #1
 800beb2:	4299      	cmp	r1, r3
 800beb4:	d00a      	beq.n	800becc <memmove+0x26>
 800beb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beba:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bebe:	e7f8      	b.n	800beb2 <memmove+0xc>
 800bec0:	4283      	cmp	r3, r0
 800bec2:	d9f5      	bls.n	800beb0 <memmove+0xa>
 800bec4:	1881      	adds	r1, r0, r2
 800bec6:	1ad2      	subs	r2, r2, r3
 800bec8:	42d3      	cmn	r3, r2
 800beca:	d100      	bne.n	800bece <memmove+0x28>
 800becc:	bd10      	pop	{r4, pc}
 800bece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bed2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bed6:	e7f7      	b.n	800bec8 <memmove+0x22>

0800bed8 <__malloc_lock>:
 800bed8:	4770      	bx	lr

0800beda <__malloc_unlock>:
 800beda:	4770      	bx	lr

0800bedc <_realloc_r>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	4607      	mov	r7, r0
 800bee0:	4614      	mov	r4, r2
 800bee2:	460e      	mov	r6, r1
 800bee4:	b921      	cbnz	r1, 800bef0 <_realloc_r+0x14>
 800bee6:	4611      	mov	r1, r2
 800bee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800beec:	f7ff be12 	b.w	800bb14 <_malloc_r>
 800bef0:	b922      	cbnz	r2, 800befc <_realloc_r+0x20>
 800bef2:	f7ff fdc1 	bl	800ba78 <_free_r>
 800bef6:	4625      	mov	r5, r4
 800bef8:	4628      	mov	r0, r5
 800befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800befc:	f000 f814 	bl	800bf28 <_malloc_usable_size_r>
 800bf00:	42a0      	cmp	r0, r4
 800bf02:	d20f      	bcs.n	800bf24 <_realloc_r+0x48>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4638      	mov	r0, r7
 800bf08:	f7ff fe04 	bl	800bb14 <_malloc_r>
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d0f2      	beq.n	800bef8 <_realloc_r+0x1c>
 800bf12:	4631      	mov	r1, r6
 800bf14:	4622      	mov	r2, r4
 800bf16:	f7ff fabb 	bl	800b490 <memcpy>
 800bf1a:	4631      	mov	r1, r6
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f7ff fdab 	bl	800ba78 <_free_r>
 800bf22:	e7e9      	b.n	800bef8 <_realloc_r+0x1c>
 800bf24:	4635      	mov	r5, r6
 800bf26:	e7e7      	b.n	800bef8 <_realloc_r+0x1c>

0800bf28 <_malloc_usable_size_r>:
 800bf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2c:	1f18      	subs	r0, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfbc      	itt	lt
 800bf32:	580b      	ldrlt	r3, [r1, r0]
 800bf34:	18c0      	addlt	r0, r0, r3
 800bf36:	4770      	bx	lr

0800bf38 <_init>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	bf00      	nop
 800bf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3e:	bc08      	pop	{r3}
 800bf40:	469e      	mov	lr, r3
 800bf42:	4770      	bx	lr

0800bf44 <_fini>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr
