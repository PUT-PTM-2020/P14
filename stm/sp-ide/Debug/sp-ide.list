
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  0800f970  0800f970  0001f970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101d0  080101d0  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  080101d0  080101d0  000201d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101d8  080101d8  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101d8  080101d8  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101dc  080101dc  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080101e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bd0  20000238  08010418  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e08  08010418  00032e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018af8  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003688  00000000  00000000  00048d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  0004c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  0004dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000248a0  00000000  00000000  0004f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000142ea  00000000  00000000  00073940  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7e39  00000000  00000000  00087c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fa63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a0c  00000000  00000000  0015fae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f958 	.word	0x0800f958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800f958 	.word	0x0800f958

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_HTTP_ParseHeader>:
#define CHECK_CONNECTION(a1,a2) arg=(NET_GetIndexForPattern(a2)!=-1)?false:true
#define IF_ROUTE(arg) if(strcmp(req,arg)==0)
#define OR_ROUTE(arg) else if(strcmp(req,arg)==0)

char* _HTTP_ParseHeader(char *response, char *contentType, uint32_t length,
		char *connection) {
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	__resetResponse();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	e007      	b.n	8000eec <_HTTP_ParseHeader+0x24>
 8000edc:	4a47      	ldr	r2, [pc, #284]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ef2:	dbf3      	blt.n	8000edc <_HTTP_ParseHeader+0x14>
	__resetLine();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	e007      	b.n	8000f0a <_HTTP_ParseHeader+0x42>
 8000efa:	4a41      	ldr	r2, [pc, #260]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	3301      	adds	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2b63      	cmp	r3, #99	; 0x63
 8000f0e:	ddf4      	ble.n	8000efa <_HTTP_ParseHeader+0x32>

	sprintf(_line, "HTTP/1.1 %s\r\n", response);
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	493c      	ldr	r1, [pc, #240]	; (8001004 <_HTTP_ParseHeader+0x13c>)
 8000f14:	483a      	ldr	r0, [pc, #232]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f16:	f00d f891 	bl	800e03c <siprintf>
	strcpy(_response, _line);
 8000f1a:	4939      	ldr	r1, [pc, #228]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f1c:	4837      	ldr	r0, [pc, #220]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000f1e:	f00d f8bc 	bl	800e09a <strcpy>
	__resetLine();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e007      	b.n	8000f38 <_HTTP_ParseHeader+0x70>
 8000f28:	4a35      	ldr	r2, [pc, #212]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b63      	cmp	r3, #99	; 0x63
 8000f3c:	ddf4      	ble.n	8000f28 <_HTTP_ParseHeader+0x60>

	sprintf(_line, "Content-Type: %s\r\n", contentType);
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4931      	ldr	r1, [pc, #196]	; (8001008 <_HTTP_ParseHeader+0x140>)
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f44:	f00d f87a 	bl	800e03c <siprintf>
	strcat(_response, _line);
 8000f48:	492d      	ldr	r1, [pc, #180]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f4a:	482c      	ldr	r0, [pc, #176]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000f4c:	f00d f896 	bl	800e07c <strcat>
	__resetLine();
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	e007      	b.n	8000f66 <_HTTP_ParseHeader+0x9e>
 8000f56:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b63      	cmp	r3, #99	; 0x63
 8000f6a:	ddf4      	ble.n	8000f56 <_HTTP_ParseHeader+0x8e>

	if (strcmp(contentType, CT_JSON) == 0) {
 8000f6c:	4927      	ldr	r1, [pc, #156]	; (800100c <_HTTP_ParseHeader+0x144>)
 8000f6e:	68b8      	ldr	r0, [r7, #8]
 8000f70:	f7ff f92e 	bl	80001d0 <strcmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11b      	bne.n	8000fb2 <_HTTP_ParseHeader+0xea>
		strcat(_response, EX_CORS);
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000f7c:	f7ff f932 	bl	80001e4 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000f86:	4413      	add	r3, r2
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <_HTTP_ParseHeader+0x148>)
 8000f8a:	4614      	mov	r4, r2
 8000f8c:	469c      	mov	ip, r3
 8000f8e:	f104 0e20 	add.w	lr, r4, #32
 8000f92:	4665      	mov	r5, ip
 8000f94:	4626      	mov	r6, r4
 8000f96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f98:	6028      	str	r0, [r5, #0]
 8000f9a:	6069      	str	r1, [r5, #4]
 8000f9c:	60aa      	str	r2, [r5, #8]
 8000f9e:	60eb      	str	r3, [r5, #12]
 8000fa0:	3410      	adds	r4, #16
 8000fa2:	f10c 0c10 	add.w	ip, ip, #16
 8000fa6:	4574      	cmp	r4, lr
 8000fa8:	d1f3      	bne.n	8000f92 <_HTTP_ParseHeader+0xca>
 8000faa:	4663      	mov	r3, ip
 8000fac:	4622      	mov	r2, r4
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	701a      	strb	r2, [r3, #0]
	}

	sprintf(_line, "Content-Lenght: %ld\r\n", length);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4917      	ldr	r1, [pc, #92]	; (8001014 <_HTTP_ParseHeader+0x14c>)
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000fb8:	f00d f840 	bl	800e03c <siprintf>
	strcat(_response, _line);
 8000fbc:	4910      	ldr	r1, [pc, #64]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000fc0:	f00d f85c 	bl	800e07c <strcat>
	__resetLine();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e007      	b.n	8000fda <_HTTP_ParseHeader+0x112>
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b63      	cmp	r3, #99	; 0x63
 8000fde:	ddf4      	ble.n	8000fca <_HTTP_ParseHeader+0x102>

	sprintf(_line, "Connection: %s\r\n\r\n", connection);
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	490d      	ldr	r1, [pc, #52]	; (8001018 <_HTTP_ParseHeader+0x150>)
 8000fe4:	4806      	ldr	r0, [pc, #24]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000fe6:	f00d f829 	bl	800e03c <siprintf>
	strcat(_response, _line);
 8000fea:	4905      	ldr	r1, [pc, #20]	; (8001000 <_HTTP_ParseHeader+0x138>)
 8000fec:	4803      	ldr	r0, [pc, #12]	; (8000ffc <_HTTP_ParseHeader+0x134>)
 8000fee:	f00d f845 	bl	800e07c <strcat>

	return (char*) _response;
 8000ff2:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <_HTTP_ParseHeader+0x134>)
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	372c      	adds	r7, #44	; 0x2c
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffc:	200002fc 	.word	0x200002fc
 8001000:	20000284 	.word	0x20000284
 8001004:	0800f970 	.word	0x0800f970
 8001008:	0800f980 	.word	0x0800f980
 800100c:	0800f994 	.word	0x0800f994
 8001010:	0800f9a0 	.word	0x0800f9a0
 8001014:	0800f9c4 	.word	0x0800f9c4
 8001018:	0800f9dc 	.word	0x0800f9dc

0800101c <_HTTP_GetRequestUrl>:

char* _HTTP_GetRequestUrl(char *request) {
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	int index = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]

	__resetRequest();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	e007      	b.n	800103e <_HTTP_GetRequestUrl+0x22>
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <_HTTP_GetRequestUrl+0x6c>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4413      	add	r3, r2
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3301      	adds	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b13      	cmp	r3, #19
 8001042:	ddf4      	ble.n	800102e <_HTTP_GetRequestUrl+0x12>
	while (request[index] != 'H') {
 8001044:	e00b      	b.n	800105e <_HTTP_GetRequestUrl+0x42>
		_request[index] = request[index];
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	7819      	ldrb	r1, [r3, #0]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <_HTTP_GetRequestUrl+0x6c>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
		index++;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
	while (request[index] != 'H') {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b48      	cmp	r3, #72	; 0x48
 8001068:	d1ed      	bne.n	8001046 <_HTTP_GetRequestUrl+0x2a>
	}

	_request[--index] = 0;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3b01      	subs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <_HTTP_GetRequestUrl+0x6c>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	return (char*) _request;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <_HTTP_GetRequestUrl+0x6c>)
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200002e8 	.word	0x200002e8

0800108c <HTTP_HandleRequest>:

void HTTP_HandleRequest(char *request, char connID) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b4      	sub	sp, #208	; 0xd0
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
	char *req = _HTTP_GetRequestUrl(request);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffbf 	bl	800101c <_HTTP_GetRequestUrl>
 800109e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	char *header;
	uint32_t size;

	IF_ROUTE("GET /") {
 80010a2:	49cc      	ldr	r1, [pc, #816]	; (80013d4 <HTTP_HandleRequest+0x348>)
 80010a4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80010a8:	f7ff f892 	bl	80001d0 <strcmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d121      	bne.n	80010f6 <HTTP_HandleRequest+0x6a>
		char *file = SD_ReadFile("index.htm", &size);
 80010b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80010b6:	4619      	mov	r1, r3
 80010b8:	48c7      	ldr	r0, [pc, #796]	; (80013d8 <HTTP_HandleRequest+0x34c>)
 80010ba:	f003 f9cf 	bl	800445c <SD_ReadFile>
 80010be:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_CLOSE);
 80010c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80010c6:	4bc5      	ldr	r3, [pc, #788]	; (80013dc <HTTP_HandleRequest+0x350>)
 80010c8:	49c5      	ldr	r1, [pc, #788]	; (80013e0 <HTTP_HandleRequest+0x354>)
 80010ca:	48c6      	ldr	r0, [pc, #792]	; (80013e4 <HTTP_HandleRequest+0x358>)
 80010cc:	f7ff fefc 	bl	8000ec8 <_HTTP_ParseHeader>
 80010d0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		NET_SendTCPData(connID, header);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fbe2 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fbdc 	bl	80038a4 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fc38 	bl	8003964 <NET_CloseConnSignal>
 80010f4:	e27f      	b.n	80015f6 <HTTP_HandleRequest+0x56a>

	} OR_ROUTE("GET /about") {
 80010f6:	49bc      	ldr	r1, [pc, #752]	; (80013e8 <HTTP_HandleRequest+0x35c>)
 80010f8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80010fc:	f7ff f868 	bl	80001d0 <strcmp>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d121      	bne.n	800114a <HTTP_HandleRequest+0xbe>
		char *file = SD_ReadFile("about.htm", &size);
 8001106:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800110a:	4619      	mov	r1, r3
 800110c:	48b7      	ldr	r0, [pc, #732]	; (80013ec <HTTP_HandleRequest+0x360>)
 800110e:	f003 f9a5 	bl	800445c <SD_ReadFile>
 8001112:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_CLOSE);
 8001116:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800111a:	4bb0      	ldr	r3, [pc, #704]	; (80013dc <HTTP_HandleRequest+0x350>)
 800111c:	49b0      	ldr	r1, [pc, #704]	; (80013e0 <HTTP_HandleRequest+0x354>)
 800111e:	48b1      	ldr	r0, [pc, #708]	; (80013e4 <HTTP_HandleRequest+0x358>)
 8001120:	f7ff fed2 	bl	8000ec8 <_HTTP_ParseHeader>
 8001124:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		NET_SendTCPData(connID, header);
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800112e:	4618      	mov	r0, r3
 8001130:	f002 fbb8 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fbb2 	bl	80038a4 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fc0e 	bl	8003964 <NET_CloseConnSignal>
 8001148:	e255      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
	} OR_ROUTE("GET /data") {
 800114a:	49a9      	ldr	r1, [pc, #676]	; (80013f0 <HTTP_HandleRequest+0x364>)
 800114c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001150:	f7ff f83e 	bl	80001d0 <strcmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d121      	bne.n	800119e <HTTP_HandleRequest+0x112>
		char *file = SD_ReadFile("data.htm", &size);
 800115a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800115e:	4619      	mov	r1, r3
 8001160:	48a4      	ldr	r0, [pc, #656]	; (80013f4 <HTTP_HandleRequest+0x368>)
 8001162:	f003 f97b 	bl	800445c <SD_ReadFile>
 8001166:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_CLOSE);
 800116a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <HTTP_HandleRequest+0x350>)
 8001170:	499b      	ldr	r1, [pc, #620]	; (80013e0 <HTTP_HandleRequest+0x354>)
 8001172:	489c      	ldr	r0, [pc, #624]	; (80013e4 <HTTP_HandleRequest+0x358>)
 8001174:	f7ff fea8 	bl	8000ec8 <_HTTP_ParseHeader>
 8001178:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		NET_SendTCPData(connID, header);
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fb8e 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fb88 	bl	80038a4 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fbe4 	bl	8003964 <NET_CloseConnSignal>
 800119c:	e22b      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
	} OR_ROUTE("GET /now") {
 800119e:	4996      	ldr	r1, [pc, #600]	; (80013f8 <HTTP_HandleRequest+0x36c>)
 80011a0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80011a4:	f7ff f814 	bl	80001d0 <strcmp>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d120      	bne.n	80011f0 <HTTP_HandleRequest+0x164>
		char *file = SD_GetLastJson(&size);
 80011ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fa8c 	bl	80046d0 <SD_GetLastJson>
 80011b8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		header = _HTTP_ParseHeader(RSP_OK, CT_JSON, size, CN_CLOSE);
 80011bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011c0:	4b86      	ldr	r3, [pc, #536]	; (80013dc <HTTP_HandleRequest+0x350>)
 80011c2:	498e      	ldr	r1, [pc, #568]	; (80013fc <HTTP_HandleRequest+0x370>)
 80011c4:	4887      	ldr	r0, [pc, #540]	; (80013e4 <HTTP_HandleRequest+0x358>)
 80011c6:	f7ff fe7f 	bl	8000ec8 <_HTTP_ParseHeader>
 80011ca:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		NET_SendTCPData(connID, header);
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fb65 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fb5f 	bl	80038a4 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fbbb 	bl	8003964 <NET_CloseConnSignal>
 80011ee:	e202      	b.n	80015f6 <HTTP_HandleRequest+0x56a>

	} OR_ROUTE("GET /all") {
 80011f0:	4983      	ldr	r1, [pc, #524]	; (8001400 <HTTP_HandleRequest+0x374>)
 80011f2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80011f6:	f7fe ffeb 	bl	80001d0 <strcmp>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d130      	bne.n	8001262 <HTTP_HandleRequest+0x1d6>
		uint32_t len = SD_GetNofJsons();
 8001200:	f003 f9fa 	bl	80045f8 <SD_GetNofJsons>
 8001204:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		char file[100] = { 0 };
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2264      	movs	r2, #100	; 0x64
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00c faaf 	bl	800d774 <memset>
		size = sprintf(file, ALL_AMOUNT("%lu"), len);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800121e:	4979      	ldr	r1, [pc, #484]	; (8001404 <HTTP_HandleRequest+0x378>)
 8001220:	4618      	mov	r0, r3
 8001222:	f00c ff0b 	bl	800e03c <siprintf>
 8001226:	4603      	mov	r3, r0
 8001228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		header = _HTTP_ParseHeader(RSP_OK, CT_JSON, size, CN_CLOSE);
 800122c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HTTP_HandleRequest+0x350>)
 8001232:	4972      	ldr	r1, [pc, #456]	; (80013fc <HTTP_HandleRequest+0x370>)
 8001234:	486b      	ldr	r0, [pc, #428]	; (80013e4 <HTTP_HandleRequest+0x358>)
 8001236:	f7ff fe47 	bl	8000ec8 <_HTTP_ParseHeader>
 800123a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

		NET_SendTCPData(connID, header);
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fb2d 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 800124a:	f107 0208 	add.w	r2, r7, #8
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fb26 	bl	80038a4 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fb82 	bl	8003964 <NET_CloseConnSignal>
 8001260:	e1c9      	b.n	80015f6 <HTTP_HandleRequest+0x56a>

	} OR_ROUTE("POST /all/elem") {
 8001262:	4969      	ldr	r1, [pc, #420]	; (8001408 <HTTP_HandleRequest+0x37c>)
 8001264:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001268:	f7fe ffb2 	bl	80001d0 <strcmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	f040 80d0 	bne.w	8001414 <HTTP_HandleRequest+0x388>
		int offset, index;

		int ix = NET_GetIndexForPattern(ALL_OFFSET_PATTERN);
 8001274:	4865      	ldr	r0, [pc, #404]	; (800140c <HTTP_HandleRequest+0x380>)
 8001276:	f001 ffcb 	bl	8003210 <NET_GetIndexForPattern>
 800127a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		if (ix == -1) {
 800127e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	d104      	bne.n	8001292 <HTTP_HandleRequest+0x206>
			NET_CloseConnSignal(connID);
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fb6a 	bl	8003964 <NET_CloseConnSignal>
			return;
 8001290:	e1b1      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
		}

		int i = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		char tempStr[5] = { 0 };
 8001298:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	711a      	strb	r2, [r3, #4]
		while (request[ix] != ',') {
 80012a2:	e015      	b.n	80012d0 <HTTP_HandleRequest+0x244>
			tempStr[i] = request[ix];
 80012a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	7819      	ldrb	r1, [r3, #0]
 80012ae:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80012b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
			i++;
 80012bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012c0:	3301      	adds	r3, #1
 80012c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			ix++;
 80012c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012ca:	3301      	adds	r3, #1
 80012cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (request[ix] != ',') {
 80012d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b2c      	cmp	r3, #44	; 0x2c
 80012dc:	d1e2      	bne.n	80012a4 <HTTP_HandleRequest+0x218>
		}

		offset = atoi(tempStr);
 80012de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00c fa18 	bl	800d718 <atoi>
 80012e8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		ix = NET_GetIndexForPattern(ALL_INDEX_PATTERN);
 80012ec:	4848      	ldr	r0, [pc, #288]	; (8001410 <HTTP_HandleRequest+0x384>)
 80012ee:	f001 ff8f 	bl	8003210 <NET_GetIndexForPattern>
 80012f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		if (ix == -1) {
 80012f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fe:	d105      	bne.n	800130c <HTTP_HandleRequest+0x280>
			NET_CloseConnSignal(connID);
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fb2e 	bl	8003964 <NET_CloseConnSignal>
			return;
 8001308:	bf00      	nop
 800130a:	e174      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
		}

		i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		for (int i = 0; i < 5; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001318:	e00b      	b.n	8001332 <HTTP_HandleRequest+0x2a6>
			tempStr[i] = 0;
 800131a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800131e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i++)
 8001328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001336:	2b04      	cmp	r3, #4
 8001338:	ddef      	ble.n	800131a <HTTP_HandleRequest+0x28e>
		while (request[ix] != '}') {
 800133a:	e015      	b.n	8001368 <HTTP_HandleRequest+0x2dc>
			tempStr[i] = request[ix];
 800133c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800134a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	701a      	strb	r2, [r3, #0]
			i++;
 8001354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001358:	3301      	adds	r3, #1
 800135a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			ix++;
 800135e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001362:	3301      	adds	r3, #1
 8001364:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		while (request[ix] != '}') {
 8001368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b7d      	cmp	r3, #125	; 0x7d
 8001374:	d1e2      	bne.n	800133c <HTTP_HandleRequest+0x2b0>
		}
		index = atoi(tempStr);
 8001376:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800137a:	4618      	mov	r0, r3
 800137c:	f00c f9cc 	bl	800d718 <atoi>
 8001380:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

		char *file = SD_GetJsonFromEnd(offset + index, &size);
 8001384:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f003 f9aa 	bl	80046f0 <SD_GetJsonFromEnd>
 800139c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		header = _HTTP_ParseHeader(RSP_OK, CT_JSON, size, CN_CLOSE);
 80013a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HTTP_HandleRequest+0x350>)
 80013a6:	4915      	ldr	r1, [pc, #84]	; (80013fc <HTTP_HandleRequest+0x370>)
 80013a8:	480e      	ldr	r0, [pc, #56]	; (80013e4 <HTTP_HandleRequest+0x358>)
 80013aa:	f7ff fd8d 	bl	8000ec8 <_HTTP_ParseHeader>
 80013ae:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		NET_SendTCPData(connID, header);
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fa73 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fa6d 	bl	80038a4 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fac9 	bl	8003964 <NET_CloseConnSignal>
 80013d2:	e110      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
 80013d4:	0800f9f0 	.word	0x0800f9f0
 80013d8:	0800f9f8 	.word	0x0800f9f8
 80013dc:	0800fa04 	.word	0x0800fa04
 80013e0:	0800fa0c 	.word	0x0800fa0c
 80013e4:	0800fa18 	.word	0x0800fa18
 80013e8:	0800fa20 	.word	0x0800fa20
 80013ec:	0800fa2c 	.word	0x0800fa2c
 80013f0:	0800fa38 	.word	0x0800fa38
 80013f4:	0800fa44 	.word	0x0800fa44
 80013f8:	0800fa50 	.word	0x0800fa50
 80013fc:	0800f994 	.word	0x0800f994
 8001400:	0800fa5c 	.word	0x0800fa5c
 8001404:	0800fa68 	.word	0x0800fa68
 8001408:	0800fa78 	.word	0x0800fa78
 800140c:	0800fa88 	.word	0x0800fa88
 8001410:	0800fa94 	.word	0x0800fa94
	} OR_ROUTE("POST /dt") {
 8001414:	4979      	ldr	r1, [pc, #484]	; (80015fc <HTTP_HandleRequest+0x570>)
 8001416:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800141a:	f7fe fed9 	bl	80001d0 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 80c7 	bne.w	80015b4 <HTTP_HandleRequest+0x528>
		int index = NET_GetIndexForPattern(DT_UPDATE_PATTERN);
 8001426:	4876      	ldr	r0, [pc, #472]	; (8001600 <HTTP_HandleRequest+0x574>)
 8001428:	f001 fef2 	bl	8003210 <NET_GetIndexForPattern>
 800142c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

		int test = index;
 8001430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while (request[test++] != '}') {
 8001438:	e01a      	b.n	8001470 <HTTP_HandleRequest+0x3e4>
			if (test > strlen(request)) {
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7fe fed2 	bl	80001e4 <strlen>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001446:	429a      	cmp	r2, r3
 8001448:	d212      	bcs.n	8001470 <HTTP_HandleRequest+0x3e4>
				/* niekompletny json */
				header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_JSON, 0, CN_CLOSE);
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HTTP_HandleRequest+0x578>)
 800144c:	2200      	movs	r2, #0
 800144e:	496e      	ldr	r1, [pc, #440]	; (8001608 <HTTP_HandleRequest+0x57c>)
 8001450:	486e      	ldr	r0, [pc, #440]	; (800160c <HTTP_HandleRequest+0x580>)
 8001452:	f7ff fd39 	bl	8000ec8 <_HTTP_ParseHeader>
 8001456:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				NET_SendTCPData(connID, header);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fa1f 	bl	80038a4 <NET_SendTCPData>
				NET_CloseConnSignal(connID);
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fa7b 	bl	8003964 <NET_CloseConnSignal>
				return;
 800146e:	e0c2      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
		while (request[test++] != '}') {
 8001470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800147a:	461a      	mov	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b7d      	cmp	r3, #125	; 0x7d
 8001484:	d1d9      	bne.n	800143a <HTTP_HandleRequest+0x3ae>
			}
		}

		/* zakladamy poprawnosc w tym miejscu */
		if (index != -1) {
 8001486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148e:	f000 80b2 	beq.w	80015f6 <HTTP_HandleRequest+0x56a>
			uint8_t date[6] = { 0 }, time[6] = { 0 };
 8001492:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	809a      	strh	r2, [r3, #4]
 800149c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	809a      	strh	r2, [r3, #4]

			for (int i = 0; i < 6; i++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014ac:	e017      	b.n	80014de <HTTP_HandleRequest+0x452>
				date[i] = request[index] - '0';
 80014ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	3b30      	subs	r3, #48	; 0x30
 80014ba:	b2d9      	uxtb	r1, r3
 80014bc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80014c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014c4:	4413      	add	r3, r2
 80014c6:	460a      	mov	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
				index += 2;
 80014ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014ce:	3302      	adds	r3, #2
 80014d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (int i = 0; i < 6; i++) {
 80014d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014d8:	3301      	adds	r3, #1
 80014da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	dde3      	ble.n	80014ae <HTTP_HandleRequest+0x422>
			}

			/* tak o zeby jednak nie wpasc w loopa */
			while (request[index++] != '[') {
 80014e6:	e01a      	b.n	800151e <HTTP_HandleRequest+0x492>
				if (index > strlen(request)) {
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7fe fe7b 	bl	80001e4 <strlen>
 80014ee:	4602      	mov	r2, r0
 80014f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d212      	bcs.n	800151e <HTTP_HandleRequest+0x492>
					header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_JSON, 0,
 80014f8:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HTTP_HandleRequest+0x578>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	4942      	ldr	r1, [pc, #264]	; (8001608 <HTTP_HandleRequest+0x57c>)
 80014fe:	4843      	ldr	r0, [pc, #268]	; (800160c <HTTP_HandleRequest+0x580>)
 8001500:	f7ff fce2 	bl	8000ec8 <_HTTP_ParseHeader>
 8001504:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
					CN_CLOSE);
					NET_SendTCPData(connID, header);
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800150e:	4618      	mov	r0, r3
 8001510:	f002 f9c8 	bl	80038a4 <NET_SendTCPData>
					NET_CloseConnSignal(connID);
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fa24 	bl	8003964 <NET_CloseConnSignal>
 800151c:	e06b      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
			while (request[index++] != '[') {
 800151e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001528:	461a      	mov	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b5b      	cmp	r3, #91	; 0x5b
 8001532:	d1d9      	bne.n	80014e8 <HTTP_HandleRequest+0x45c>
					return;
				}
			}

			for (int i = 0; i < 6; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800153a:	e017      	b.n	800156c <HTTP_HandleRequest+0x4e0>
				time[i] = request[index] - '0';
 800153c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3b30      	subs	r3, #48	; 0x30
 8001548:	b2d9      	uxtb	r1, r3
 800154a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800154e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001552:	4413      	add	r3, r2
 8001554:	460a      	mov	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
				index += 2;
 8001558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800155c:	3302      	adds	r3, #2
 800155e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (int i = 0; i < 6; i++) {
 8001562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001566:	3301      	adds	r3, #1
 8001568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800156c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001570:	2b05      	cmp	r3, #5
 8001572:	dde3      	ble.n	800153c <HTTP_HandleRequest+0x4b0>
			}

			/* recieved */
			SD_SetDateTime(date, time);
 8001574:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001578:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f002 ff0a 	bl	8004398 <SD_SetDateTime>

			header = _HTTP_ParseHeader(RSP_OK, CT_JSON, strlen(DT_UPDATE_OK),
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HTTP_HandleRequest+0x578>)
 8001586:	220b      	movs	r2, #11
 8001588:	491f      	ldr	r1, [pc, #124]	; (8001608 <HTTP_HandleRequest+0x57c>)
 800158a:	4821      	ldr	r0, [pc, #132]	; (8001610 <HTTP_HandleRequest+0x584>)
 800158c:	f7ff fc9c 	bl	8000ec8 <_HTTP_ParseHeader>
 8001590:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			CN_CLOSE);
			NET_SendTCPData(connID, header);
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800159a:	4618      	mov	r0, r3
 800159c:	f002 f982 	bl	80038a4 <NET_SendTCPData>
			NET_SendTCPData(connID, DT_UPDATE_OK);
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	491c      	ldr	r1, [pc, #112]	; (8001614 <HTTP_HandleRequest+0x588>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 f97d 	bl	80038a4 <NET_SendTCPData>
			NET_CloseConnSignal(connID);
 80015aa:	78fb      	ldrb	r3, [r7, #3]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 f9d9 	bl	8003964 <NET_CloseConnSignal>
 80015b2:	e020      	b.n	80015f6 <HTTP_HandleRequest+0x56a>
		}
	} else {
		/* nieobslugiwane zadanie */
		char *file = SD_ReadFile("error.htm", &size);
 80015b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80015b8:	4619      	mov	r1, r3
 80015ba:	4817      	ldr	r0, [pc, #92]	; (8001618 <HTTP_HandleRequest+0x58c>)
 80015bc:	f002 ff4e 	bl	800445c <SD_ReadFile>
 80015c0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, size, CN_CLOSE);
 80015c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HTTP_HandleRequest+0x578>)
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <HTTP_HandleRequest+0x590>)
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <HTTP_HandleRequest+0x580>)
 80015ce:	f7ff fc7b 	bl	8000ec8 <_HTTP_ParseHeader>
 80015d2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		NET_SendTCPData(connID, header);
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f961 	bl	80038a4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 f95b 	bl	80038a4 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 f9b7 	bl	8003964 <NET_CloseConnSignal>
	}
}
 80015f6:	37d0      	adds	r7, #208	; 0xd0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800fa9c 	.word	0x0800fa9c
 8001600:	0800faa8 	.word	0x0800faa8
 8001604:	0800fa04 	.word	0x0800fa04
 8001608:	0800f994 	.word	0x0800f994
 800160c:	0800fab0 	.word	0x0800fab0
 8001610:	0800fa18 	.word	0x0800fa18
 8001614:	0800fac0 	.word	0x0800fac0
 8001618:	0800facc 	.word	0x0800facc
 800161c:	0800fa0c 	.word	0x0800fa0c

08001620 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <_LCD_SetRowOffsets+0x3c>)
 8001634:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <_LCD_SetRowOffsets+0x3c>)
 800163c:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <_LCD_SetRowOffsets+0x3c>)
 8001644:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <_LCD_SetRowOffsets+0x3c>)
 800164c:	70da      	strb	r2, [r3, #3]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000049c 	.word	0x2000049c

08001660 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <_LCD_EnableSignal+0x38>)
 800166a:	f008 fbd5 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f008 f8ca 	bl	8009808 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <_LCD_EnableSignal+0x38>)
 800167a:	f008 fbcd 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f008 f8c2 	bl	8009808 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <_LCD_EnableSignal+0x38>)
 800168a:	f008 fbc5 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f008 f8ba 	bl	8009808 <HAL_Delay>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000

0800169c <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e012      	b.n	80016d2 <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _readyData[i],
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <_LCD_WriteData+0x48>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	fa42 f303 	asr.w	r3, r2, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _readyData[i],
 80016c4:	461a      	mov	r2, r3
 80016c6:	4808      	ldr	r0, [pc, #32]	; (80016e8 <_LCD_WriteData+0x4c>)
 80016c8:	f008 fba6 	bl	8009e18 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	dde9      	ble.n	80016ac <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 80016d8:	f7ff ffc2 	bl	8001660 <_LCD_EnableSignal>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000490 	.word	0x20000490
 80016e8:	40021000 	.word	0x40021000

080016ec <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	461a      	mov	r2, r3
 8001700:	2110      	movs	r1, #16
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <_LCD_SendByteWithState+0x44>)
 8001704:	f008 fb88 	bl	8009e18 <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2120      	movs	r1, #32
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <_LCD_SendByteWithState+0x44>)
 800170e:	f008 fb83 	bl	8009e18 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ffbf 	bl	800169c <_LCD_WriteData>
	_LCD_WriteData(value);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ffbb 	bl	800169c <_LCD_WriteData>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffd2 	bl	80016ec <_LCD_SendByteWithState>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2101      	movs	r1, #1
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ffc1 	bl	80016ec <_LCD_SendByteWithState>

	if (moveCursor) {
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <_LCD_SendData+0x64>
		++_currentCol;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <_LCD_SendData+0x6c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_LCD_SendData+0x6c>)
 800177a:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <_LCD_SendData+0x6c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b13      	cmp	r3, #19
 8001782:	d917      	bls.n	80017b4 <_LCD_SendData+0x64>
			_currentCol = 0;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <_LCD_SendData+0x6c>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <_LCD_SendData+0x70>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <_LCD_SendData+0x70>)
 8001794:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <_LCD_SendData+0x70>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d902      	bls.n	80017a4 <_LCD_SendData+0x54>
				_currentRow = 0;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_LCD_SendData+0x70>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <_LCD_SendData+0x6c>)
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <_LCD_SendData+0x70>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f000 f912 	bl	80019d8 <LCD_SetCursor>
		}
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200004a1 	.word	0x200004a1
 80017c0:	2000048c 	.word	0x2000048c

080017c4 <LCD_Init>:

void LCD_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
	/* Piny danych */
	_readyData[0] = D4_PIN;
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <LCD_Init+0x16c>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	801a      	strh	r2, [r3, #0]
	_readyData[1] = D5_PIN;
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <LCD_Init+0x16c>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	805a      	strh	r2, [r3, #2]
	_readyData[2] = D6_PIN;
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <LCD_Init+0x16c>)
 80017d8:	2204      	movs	r2, #4
 80017da:	809a      	strh	r2, [r3, #4]
	_readyData[3] = D7_PIN;
 80017dc:	4b54      	ldr	r3, [pc, #336]	; (8001930 <LCD_Init+0x16c>)
 80017de:	2208      	movs	r2, #8
 80017e0:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 80017e2:	4b54      	ldr	r3, [pc, #336]	; (8001934 <LCD_Init+0x170>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 80017e8:	f000 f8cc 	bl	8001984 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 80017ec:	2354      	movs	r3, #84	; 0x54
 80017ee:	2214      	movs	r2, #20
 80017f0:	2140      	movs	r1, #64	; 0x40
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff ff14 	bl	8001620 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 80017f8:	2032      	movs	r0, #50	; 0x32
 80017fa:	f008 f805 	bl	8009808 <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2110      	movs	r1, #16
 8001802:	484d      	ldr	r0, [pc, #308]	; (8001938 <LCD_Init+0x174>)
 8001804:	f008 fb08 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	484a      	ldr	r0, [pc, #296]	; (8001938 <LCD_Init+0x174>)
 800180e:	f008 fb03 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	4848      	ldr	r0, [pc, #288]	; (8001938 <LCD_Init+0x174>)
 8001818:	f008 fafe 	bl	8009e18 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 800181c:	2003      	movs	r0, #3
 800181e:	f7ff ff3d 	bl	800169c <_LCD_WriteData>
	HAL_Delay(5);
 8001822:	2005      	movs	r0, #5
 8001824:	f007 fff0 	bl	8009808 <HAL_Delay>

	_LCD_WriteData(0x03);
 8001828:	2003      	movs	r0, #3
 800182a:	f7ff ff37 	bl	800169c <_LCD_WriteData>
	HAL_Delay(5);
 800182e:	2005      	movs	r0, #5
 8001830:	f007 ffea 	bl	8009808 <HAL_Delay>

	_LCD_WriteData(0x03);
 8001834:	2003      	movs	r0, #3
 8001836:	f7ff ff31 	bl	800169c <_LCD_WriteData>
	HAL_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f007 ffe4 	bl	8009808 <HAL_Delay>

	_LCD_WriteData(0x02);
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff ff2b 	bl	800169c <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <LCD_Init+0x170>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f043 0320 	orr.w	r3, r3, #32
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff6f 	bl	8001734 <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <LCD_Init+0x178>)
 8001858:	2204      	movs	r2, #4
 800185a:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 800185c:	f000 f8ec 	bl	8001a38 <LCD_DisplayOn>
	LCD_ClearScreen();
 8001860:	f000 f8a8 	bl	80019b4 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <LCD_Init+0x17c>)
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <LCD_Init+0x17c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff5d 	bl	8001734 <_LCD_SendCommand>

	_currentRow = 0;
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <LCD_Init+0x180>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <LCD_Init+0x184>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]

	/* welcome screen */
	LCD_PrintCentered("Weather  Station");
 8001886:	4831      	ldr	r0, [pc, #196]	; (800194c <LCD_Init+0x188>)
 8001888:	f000 f968 	bl	8001b5c <LCD_PrintCentered>
	LCD_SetCursor(0, 2);
 800188c:	2102      	movs	r1, #2
 800188e:	2000      	movs	r0, #0
 8001890:	f000 f8a2 	bl	80019d8 <LCD_SetCursor>
	LCD_PrintCentered("v1.0");
 8001894:	482e      	ldr	r0, [pc, #184]	; (8001950 <LCD_Init+0x18c>)
 8001896:	f000 f961 	bl	8001b5c <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 800189a:	2103      	movs	r1, #3
 800189c:	2000      	movs	r0, #0
 800189e:	f000 f89b 	bl	80019d8 <LCD_SetCursor>
	LCD_PrintCentered("2020 @ PUT");
 80018a2:	482c      	ldr	r0, [pc, #176]	; (8001954 <LCD_Init+0x190>)
 80018a4:	f000 f95a 	bl	8001b5c <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 80018a8:	4a2b      	ldr	r2, [pc, #172]	; (8001958 <LCD_Init+0x194>)
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b2:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4619      	mov	r1, r3
 80018bc:	2007      	movs	r0, #7
 80018be:	f000 fb5d 	bl	8001f7c <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 80018c2:	4a26      	ldr	r2, [pc, #152]	; (800195c <LCD_Init+0x198>)
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018cc:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 80018d0:	f107 0318 	add.w	r3, r7, #24
 80018d4:	4619      	mov	r1, r3
 80018d6:	2006      	movs	r0, #6
 80018d8:	f000 fb50 	bl	8001f7c <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <LCD_Init+0x19c>)
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e6:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4619      	mov	r1, r3
 80018f0:	2005      	movs	r0, #5
 80018f2:	f000 fb43 	bl	8001f7c <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 80018f6:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <LCD_Init+0x1a0>)
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001900:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4619      	mov	r1, r3
 800190a:	2004      	movs	r0, #4
 800190c:	f000 fb36 	bl	8001f7c <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <LCD_Init+0x1a4>)
 8001912:	463b      	mov	r3, r7
 8001914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001918:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	2003      	movs	r0, #3
 8001922:	f000 fb2b 	bl	8001f7c <LCD_DefineCustomChar>
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000490 	.word	0x20000490
 8001934:	20000498 	.word	0x20000498
 8001938:	40021000 	.word	0x40021000
 800193c:	200004a0 	.word	0x200004a0
 8001940:	200004a2 	.word	0x200004a2
 8001944:	2000048c 	.word	0x2000048c
 8001948:	200004a1 	.word	0x200004a1
 800194c:	0800fad8 	.word	0x0800fad8
 8001950:	0800faec 	.word	0x0800faec
 8001954:	0800faf4 	.word	0x0800faf4
 8001958:	0800fb00 	.word	0x0800fb00
 800195c:	0800fb08 	.word	0x0800fb08
 8001960:	0800fb10 	.word	0x0800fb10
 8001964:	0800fb18 	.word	0x0800fb18
 8001968:	0800fb20 	.word	0x0800fb20

0800196c <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 8001970:	f000 f808 	bl	8001984 <LCD_BackgroundOn>
	ResetTIM(3);
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <LCD_WakeScreen+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20002d04 	.word	0x20002d04

08001984 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 8001988:	2201      	movs	r2, #1
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4802      	ldr	r0, [pc, #8]	; (8001998 <LCD_BackgroundOn+0x14>)
 8001990:	f008 fa42 	bl	8009e18 <HAL_GPIO_WritePin>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020800 	.word	0x40020800

0800199c <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a6:	4802      	ldr	r0, [pc, #8]	; (80019b0 <LCD_BackgroundOff+0x14>)
 80019a8:	f008 fa36 	bl	8009e18 <HAL_GPIO_WritePin>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020800 	.word	0x40020800

080019b4 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff febb 	bl	8001734 <_LCD_SendCommand>
	LCD_ResetCursor();
 80019be:	f000 f802 	bl	80019c6 <LCD_ResetCursor>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
	LCD_SetCursor(0, 0);
 80019ca:	2100      	movs	r1, #0
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 f803 	bl	80019d8 <LCD_SetCursor>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d901      	bls.n	80019f2 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 80019ee:	2303      	movs	r3, #3
 80019f0:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b13      	cmp	r3, #19
 80019f6:	d901      	bls.n	80019fc <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 80019f8:	2313      	movs	r3, #19
 80019fa:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LCD_SetCursor+0x54>)
 8001a00:	5cd2      	ldrb	r2, [r2, r3]
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	4413      	add	r3, r2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fe8e 	bl	8001734 <_LCD_SendCommand>
	_currentRow = row;
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <LCD_SetCursor+0x58>)
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <LCD_SetCursor+0x5c>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	7013      	strb	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000049c 	.word	0x2000049c
 8001a30:	2000048c 	.word	0x2000048c
 8001a34:	200004a1 	.word	0x200004a1

08001a38 <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LCD_DisplayOn+0x28>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <LCD_DisplayOn+0x28>)
 8001a48:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LCD_DisplayOn+0x28>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe6d 	bl	8001734 <_LCD_SendCommand>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200004a0 	.word	0x200004a0

08001a64 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <LCD_DisableCursor+0x28>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f023 0302 	bic.w	r3, r3, #2
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <LCD_DisableCursor+0x28>)
 8001a74:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <LCD_DisableCursor+0x28>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fe57 	bl	8001734 <_LCD_SendCommand>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200004a0 	.word	0x200004a0

08001a90 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <LCD_EnableCursor+0x28>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <LCD_EnableCursor+0x28>)
 8001aa0:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <LCD_EnableCursor+0x28>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe41 	bl	8001734 <_LCD_SendCommand>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200004a0 	.word	0x200004a0

08001abc <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <LCD_DisableBlink+0x28>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <LCD_DisableBlink+0x28>)
 8001acc:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <LCD_DisableBlink+0x28>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fe2b 	bl	8001734 <_LCD_SendCommand>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200004a0 	.word	0x200004a0

08001ae8 <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <LCD_EnableBlink+0x28>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <LCD_EnableBlink+0x28>)
 8001af8:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <LCD_EnableBlink+0x28>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fe15 	bl	8001734 <_LCD_SendCommand>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200004a0 	.word	0x200004a0

08001b14 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d018      	beq.n	8001b54 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fb5c 	bl	80001e4 <strlen>
 8001b2c:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e00a      	b.n	8001b4a <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fe06 	bl	8001750 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d8f0      	bhi.n	8001b34 <LCD_Print+0x20>
 8001b52:	e000      	b.n	8001b56 <LCD_Print+0x42>
		return;
 8001b54:	bf00      	nop
	}
}
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_PrintCentered>:

void LCD_PrintCentered(const char str[]) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7fe fb3d 	bl	80001e4 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b14      	cmp	r3, #20
 8001b72:	dc14      	bgt.n	8001b9e <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f1c3 0314 	rsb	r3, r3, #20
 8001b7a:	0fda      	lsrs	r2, r3, #31
 8001b7c:	4413      	add	r3, r2
 8001b7e:	105b      	asrs	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <LCD_PrintCentered+0x4c>)
 8001b84:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <LCD_PrintCentered+0x4c>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <LCD_PrintCentered+0x50>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4610      	mov	r0, r2
 8001b92:	f7ff ff21 	bl	80019d8 <LCD_SetCursor>
	LCD_Print(str);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffbc 	bl	8001b14 <LCD_Print>
 8001b9c:	e000      	b.n	8001ba0 <LCD_PrintCentered+0x44>
		return;
 8001b9e:	bf00      	nop
}
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200004a1 	.word	0x200004a1
 8001bac:	2000048c 	.word	0x2000048c

08001bb0 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 8001bb0:	b590      	push	{r4, r7, lr}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8104 	beq.w	8001dca <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	d50e      	bpl.n	8001bf4 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc4 	bl	8000568 <__aeabi_f2d>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	f107 0014 	add.w	r0, r7, #20
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	4979      	ldr	r1, [pc, #484]	; (8001dd4 <LCD_PrintTempInfo+0x224>)
 8001bee:	f00c fa25 	bl	800e03c <siprintf>
 8001bf2:	e00d      	b.n	8001c10 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fcb5 	bl	8000568 <__aeabi_f2d>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	f107 0014 	add.w	r0, r7, #20
 8001c06:	461a      	mov	r2, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	4973      	ldr	r1, [pc, #460]	; (8001dd8 <LCD_PrintTempInfo+0x228>)
 8001c0c:	f00c fa16 	bl	800e03c <siprintf>

	if (data1[1] < 10.f)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3304      	adds	r3, #4
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d50f      	bpl.n	8001c46 <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc9b 	bl	8000568 <__aeabi_f2d>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	f107 0008 	add.w	r0, r7, #8
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	4967      	ldr	r1, [pc, #412]	; (8001ddc <LCD_PrintTempInfo+0x22c>)
 8001c40:	f00c f9fc 	bl	800e03c <siprintf>
 8001c44:	e020      	b.n	8001c88 <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001de0 <LCD_PrintTempInfo+0x230>
 8001c52:	eef4 7a47 	vcmp.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d106      	bne.n	8001c6a <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4960      	ldr	r1, [pc, #384]	; (8001de4 <LCD_PrintTempInfo+0x234>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00c f9ea 	bl	800e03c <siprintf>
 8001c68:	e00e      	b.n	8001c88 <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc79 	bl	8000568 <__aeabi_f2d>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	f107 0008 	add.w	r0, r7, #8
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	4959      	ldr	r1, [pc, #356]	; (8001de8 <LCD_PrintTempInfo+0x238>)
 8001c84:	f00c f9da 	bl	800e03c <siprintf>

	if (data2 != NULL) {
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8088 	beq.w	8001da0 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001c90:	2101      	movs	r1, #1
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fea0 	bl	80019d8 <LCD_SetCursor>
		LCD_Print(temp);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff39 	bl	8001b14 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fe97 	bl	80019d8 <LCD_SetCursor>
		LCD_Print(rh);
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff30 	bl	8001b14 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d50e      	bpl.n	8001ce6 <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc4b 	bl	8000568 <__aeabi_f2d>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	f107 0014 	add.w	r0, r7, #20
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	4943      	ldr	r1, [pc, #268]	; (8001dec <LCD_PrintTempInfo+0x23c>)
 8001ce0:	f00c f9ac 	bl	800e03c <siprintf>
 8001ce4:	e00d      	b.n	8001d02 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc3c 	bl	8000568 <__aeabi_f2d>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	f107 0014 	add.w	r0, r7, #20
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	493c      	ldr	r1, [pc, #240]	; (8001df0 <LCD_PrintTempInfo+0x240>)
 8001cfe:	f00c f99d 	bl	800e03c <siprintf>

		if (data2[1] < 10.f)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3304      	adds	r3, #4
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d50f      	bpl.n	8001d38 <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc22 	bl	8000568 <__aeabi_f2d>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	f107 0008 	add.w	r0, r7, #8
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	4930      	ldr	r1, [pc, #192]	; (8001df4 <LCD_PrintTempInfo+0x244>)
 8001d32:	f00c f983 	bl	800e03c <siprintf>
 8001d36:	e020      	b.n	8001d7a <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001de0 <LCD_PrintTempInfo+0x230>
 8001d44:	eef4 7a47 	vcmp.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	d106      	bne.n	8001d5c <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	4929      	ldr	r1, [pc, #164]	; (8001df8 <LCD_PrintTempInfo+0x248>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00c f971 	bl	800e03c <siprintf>
 8001d5a:	e00e      	b.n	8001d7a <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fc00 	bl	8000568 <__aeabi_f2d>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	f107 0008 	add.w	r0, r7, #8
 8001d70:	461a      	mov	r2, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	4921      	ldr	r1, [pc, #132]	; (8001dfc <LCD_PrintTempInfo+0x24c>)
 8001d76:	f00c f961 	bl	800e03c <siprintf>

		LCD_SetCursor(16, 1);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2010      	movs	r0, #16
 8001d7e:	f7ff fe2b 	bl	80019d8 <LCD_SetCursor>
		LCD_Print(temp);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fec4 	bl	8001b14 <LCD_Print>
		LCD_SetCursor(16, 2);
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	2010      	movs	r0, #16
 8001d90:	f7ff fe22 	bl	80019d8 <LCD_SetCursor>
		LCD_Print(rh);
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff febb 	bl	8001b14 <LCD_Print>
 8001d9e:	e010      	b.n	8001dc2 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001da0:	2101      	movs	r1, #1
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff fe18 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered(temp);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fed5 	bl	8001b5c <LCD_PrintCentered>
		LCD_NextLine("");
 8001db2:	4813      	ldr	r0, [pc, #76]	; (8001e00 <LCD_PrintTempInfo+0x250>)
 8001db4:	f000 f826 	bl	8001e04 <LCD_NextLine>
		LCD_PrintCentered(rh);
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fecd 	bl	8001b5c <LCD_PrintCentered>
	}
	LCD_NextLine("");
 8001dc2:	480f      	ldr	r0, [pc, #60]	; (8001e00 <LCD_PrintTempInfo+0x250>)
 8001dc4:	f000 f81e 	bl	8001e04 <LCD_NextLine>
 8001dc8:	e000      	b.n	8001dcc <LCD_PrintTempInfo+0x21c>
		return;
 8001dca:	bf00      	nop
}
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0800fb28 	.word	0x0800fb28
 8001dd8:	0800fb30 	.word	0x0800fb30
 8001ddc:	0800fb38 	.word	0x0800fb38
 8001de0:	42c80000 	.word	0x42c80000
 8001de4:	0800fb44 	.word	0x0800fb44
 8001de8:	0800fb4c 	.word	0x0800fb4c
 8001dec:	0800fb54 	.word	0x0800fb54
 8001df0:	0800fb5c 	.word	0x0800fb5c
 8001df4:	0800fb64 	.word	0x0800fb64
 8001df8:	0800fb70 	.word	0x0800fb70
 8001dfc:	0800fb78 	.word	0x0800fb78
 8001e00:	0800fb80 	.word	0x0800fb80

08001e04 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe81 	bl	8001b14 <LCD_Print>

	_currentCol = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <LCD_NextLine+0x48>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <LCD_NextLine+0x4c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <LCD_NextLine+0x4c>)
 8001e22:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <LCD_NextLine+0x4c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d902      	bls.n	8001e32 <LCD_NextLine+0x2e>
		_currentRow = 0;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <LCD_NextLine+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <LCD_NextLine+0x48>)
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <LCD_NextLine+0x4c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f7ff fdcb 	bl	80019d8 <LCD_SetCursor>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200004a1 	.word	0x200004a1
 8001e50:	2000048c 	.word	0x2000048c

08001e54 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <LCD_CursorUp+0x30>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <LCD_CursorUp+0x18>
		--_currentRow;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <LCD_CursorUp+0x30>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <LCD_CursorUp+0x30>)
 8001e6a:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <LCD_CursorUp+0x34>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <LCD_CursorUp+0x30>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f7ff fdae 	bl	80019d8 <LCD_SetCursor>
	return _currentRow;
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <LCD_CursorUp+0x30>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000048c 	.word	0x2000048c
 8001e88:	200004a1 	.word	0x200004a1

08001e8c <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <LCD_CursorDown+0x30>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d805      	bhi.n	8001ea4 <LCD_CursorDown+0x18>
		++_currentRow;
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LCD_CursorDown+0x30>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <LCD_CursorDown+0x30>)
 8001ea2:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <LCD_CursorDown+0x34>)
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <LCD_CursorDown+0x30>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f7ff fd92 	bl	80019d8 <LCD_SetCursor>
	return _currentRow;
 8001eb4:	4b01      	ldr	r3, [pc, #4]	; (8001ebc <LCD_CursorDown+0x30>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000048c 	.word	0x2000048c
 8001ec0:	200004a1 	.word	0x200004a1

08001ec4 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <LCD_CursorLeft+0x1a>
		--_currentCol;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e010      	b.n	8001f00 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001ee0:	2213      	movs	r2, #19
 8001ee2:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <LCD_CursorLeft+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LCD_CursorLeft+0x58>)
 8001eee:	2203      	movs	r2, #3
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e005      	b.n	8001f00 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <LCD_CursorLeft+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <LCD_CursorLeft+0x58>)
 8001efe:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LCD_CursorLeft+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f7ff fd64 	bl	80019d8 <LCD_SetCursor>
	return _currentCol;
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <LCD_CursorLeft+0x54>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200004a1 	.word	0x200004a1
 8001f1c:	2000048c 	.word	0x2000048c

08001f20 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b12      	cmp	r3, #18
 8001f2a:	d806      	bhi.n	8001f3a <LCD_CursorRight+0x1a>
		++_currentCol;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e010      	b.n	8001f5c <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <LCD_CursorRight+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d103      	bne.n	8001f50 <LCD_CursorRight+0x30>
			_currentRow = 0;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <LCD_CursorRight+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e005      	b.n	8001f5c <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <LCD_CursorRight+0x58>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <LCD_CursorRight+0x58>)
 8001f5a:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LCD_CursorRight+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f7ff fd36 	bl	80019d8 <LCD_SetCursor>
	return _currentCol;
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <LCD_CursorRight+0x54>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200004a1 	.word	0x200004a1
 8001f78:	2000048c 	.word	0x2000048c

08001f7c <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fbc8 	bl	8001734 <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e00a      	b.n	8001fc0 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbcb 	bl	8001750 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b07      	cmp	r3, #7
 8001fc4:	ddf1      	ble.n	8001faa <LCD_DefineCustomChar+0x2e>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fcfb 	bl	80019d8 <LCD_SetCursor>
	LCD_Print(date);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd96 	bl	8001b14 <LCD_Print>
	LCD_SetCursor(12, 0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	200c      	movs	r0, #12
 8001fec:	f7ff fcf4 	bl	80019d8 <LCD_SetCursor>
	LCD_Print(time);
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f7ff fd8f 	bl	8001b14 <LCD_Print>
	LCD_NextLine("");
 8001ff6:	4803      	ldr	r0, [pc, #12]	; (8002004 <LCD_PrintDateTime+0x34>)
 8001ff8:	f7ff ff04 	bl	8001e04 <LCD_NextLine>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0800fb80 	.word	0x0800fb80

08002008 <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb9a 	bl	8001750 <_LCD_SendData>
	LCD_CursorLeft();
 800201c:	f7ff ff52 	bl	8001ec4 <LCD_CursorLeft>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	int index = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
	int column = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3330      	adds	r3, #48	; 0x30
 8002040:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e00c      	b.n	8002062 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 8002048:	bf00      	nop
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	61fa      	str	r2, [r7, #28]
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b3b      	cmp	r3, #59	; 0x3b
 800205a:	d1f6      	bne.n	800204a <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	3301      	adds	r3, #1
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbed      	blt.n	8002048 <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 800206c:	f7ff fca2 	bl	80019b4 <LCD_ClearScreen>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 8002070:	2301      	movs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e037      	b.n	80020e6 <LCD_PrintNetworks+0xbe>
		LCD_WriteChar(number++);
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	75fa      	strb	r2, [r7, #23]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ffc3 	bl	8002008 <LCD_WriteChar>
		column = LCD_CursorRight();
 8002082:	f7ff ff4d 	bl	8001f20 <LCD_CursorRight>
 8002086:	4603      	mov	r3, r0
 8002088:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 800208a:	481b      	ldr	r0, [pc, #108]	; (80020f8 <LCD_PrintNetworks+0xd0>)
 800208c:	f7ff fd42 	bl	8001b14 <LCD_Print>

		while (data[index] != ';') {
 8002090:	e010      	b.n	80020b4 <LCD_PrintNetworks+0x8c>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dd0a      	ble.n	80020ae <LCD_PrintNetworks+0x86>
				LCD_WriteChar(data[index]);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ffb1 	bl	8002008 <LCD_WriteChar>
				column = LCD_CursorRight();
 80020a6:	f7ff ff3b 	bl	8001f20 <LCD_CursorRight>
 80020aa:	4603      	mov	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
			}
			index++;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b3b      	cmp	r3, #59	; 0x3b
 80020be:	d1e8      	bne.n	8002092 <LCD_PrintNetworks+0x6a>
		}

		if (data[index + 1] == 0) {
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00f      	beq.n	80020ee <LCD_PrintNetworks+0xc6>
			break;
		} else {
			if (column != 0)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <LCD_PrintNetworks+0xb2>
				LCD_NextLine("");
 80020d4:	4809      	ldr	r0, [pc, #36]	; (80020fc <LCD_PrintNetworks+0xd4>)
 80020d6:	f7ff fe95 	bl	8001e04 <LCD_NextLine>
			index++;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	ddc4      	ble.n	8002076 <LCD_PrintNetworks+0x4e>
		}
	}
}
 80020ec:	e000      	b.n	80020f0 <LCD_PrintNetworks+0xc8>
			break;
 80020ee:	bf00      	nop
}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	0800fb84 	.word	0x0800fb84
 80020fc:	0800fb80 	.word	0x0800fb80

08002100 <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
	int index = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e00c      	b.n	800212e <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 8002114:	bf00      	nop
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	617a      	str	r2, [r7, #20]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b3b      	cmp	r3, #59	; 0x3b
 8002126:	d1f6      	bne.n	8002116 <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	3301      	adds	r3, #1
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbed      	blt.n	8002114 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 8002138:	f7ff fc3c 	bl	80019b4 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 800213c:	4815      	ldr	r0, [pc, #84]	; (8002194 <LCD_PrintOptionsScreen+0x94>)
 800213e:	f7ff fd0d 	bl	8001b5c <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 8002142:	2301      	movs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e01e      	b.n	8002186 <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fc42 	bl	80019d8 <LCD_SetCursor>

		while (string[index] != ';') {
 8002154:	e00b      	b.n	800216e <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	617a      	str	r2, [r7, #20]
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff4f 	bl	8002008 <LCD_WriteChar>
			LCD_CursorRight();
 800216a:	f7ff fed9 	bl	8001f20 <LCD_CursorRight>
		while (string[index] != ';') {
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b3b      	cmp	r3, #59	; 0x3b
 8002178:	d1ed      	bne.n	8002156 <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	dddd      	ble.n	8002148 <LCD_PrintOptionsScreen+0x48>
	}
}
 800218c:	bf00      	nop
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0800fb88 	.word	0x0800fb88

08002198 <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 80021a4:	2103      	movs	r1, #3
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff fc16 	bl	80019d8 <LCD_SetCursor>
	LCD_Print("                    ");
 80021ac:	4825      	ldr	r0, [pc, #148]	; (8002244 <LCD_PrintNetworkStatus+0xac>)
 80021ae:	f7ff fcb1 	bl	8001b14 <LCD_Print>
	LCD_SetCursor(0, 3);
 80021b2:	2103      	movs	r1, #3
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff fc0f 	bl	80019d8 <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d103      	bne.n	80021c8 <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 80021c0:	4821      	ldr	r0, [pc, #132]	; (8002248 <LCD_PrintNetworkStatus+0xb0>)
 80021c2:	f7ff fccb 	bl	8001b5c <LCD_PrintCentered>
 80021c6:	e03a      	b.n	800223e <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d12c      	bne.n	8002228 <LCD_PrintNetworkStatus+0x90>
		if (data == NULL)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d033      	beq.n	800223c <LCD_PrintNetworkStatus+0xa4>
			return;

		int size = strlen(data);
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f7fe f805 	bl	80001e4 <strlen>
 80021da:	4603      	mov	r3, r0
 80021dc:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1c3 0314 	rsb	r3, r3, #20
 80021e4:	0fda      	lsrs	r2, r3, #31
 80021e6:	4413      	add	r3, r2
 80021e8:	105b      	asrs	r3, r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <LCD_PrintNetworkStatus+0xb4>)
 80021ee:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <LCD_PrintNetworkStatus+0xb4>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <LCD_PrintNetworkStatus+0xb8>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f7ff fbec 	bl	80019d8 <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00b      	b.n	800221e <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fefa 	bl	8002008 <LCD_WriteChar>
			LCD_CursorRight();
 8002214:	f7ff fe84 	bl	8001f20 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbef      	blt.n	8002206 <LCD_PrintNetworkStatus+0x6e>
 8002226:	e00a      	b.n	800223e <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d007      	beq.n	800223e <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d104      	bne.n	800223e <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8002234:	4807      	ldr	r0, [pc, #28]	; (8002254 <LCD_PrintNetworkStatus+0xbc>)
 8002236:	f7ff fc91 	bl	8001b5c <LCD_PrintCentered>
 800223a:	e000      	b.n	800223e <LCD_PrintNetworkStatus+0xa6>
			return;
 800223c:	bf00      	nop
	}
}
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	0800fb94 	.word	0x0800fb94
 8002248:	0800fbac 	.word	0x0800fbac
 800224c:	200004a1 	.word	0x200004a1
 8002250:	2000048c 	.word	0x2000048c
 8002254:	0800fbc0 	.word	0x0800fbc0

08002258 <LCD_FatalSDScreen>:

void LCD_FatalSDScreen(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	LCD_ClearScreen();
 800225c:	f7ff fbaa 	bl	80019b4 <LCD_ClearScreen>

	LCD_PrintCentered("Fatal error, sd card");
 8002260:	480d      	ldr	r0, [pc, #52]	; (8002298 <LCD_FatalSDScreen+0x40>)
 8002262:	f7ff fc7b 	bl	8001b5c <LCD_PrintCentered>
	LCD_NextLine("");
 8002266:	480d      	ldr	r0, [pc, #52]	; (800229c <LCD_FatalSDScreen+0x44>)
 8002268:	f7ff fdcc 	bl	8001e04 <LCD_NextLine>
	LCD_PrintCentered("must be formated");
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LCD_FatalSDScreen+0x48>)
 800226e:	f7ff fc75 	bl	8001b5c <LCD_PrintCentered>
	LCD_NextLine("");
 8002272:	480a      	ldr	r0, [pc, #40]	; (800229c <LCD_FatalSDScreen+0x44>)
 8002274:	f7ff fdc6 	bl	8001e04 <LCD_NextLine>
	LCD_PrintCentered("Copy HTTP files manu");
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <LCD_FatalSDScreen+0x4c>)
 800227a:	f7ff fc6f 	bl	8001b5c <LCD_PrintCentered>
	LCD_NextLine("");
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <LCD_FatalSDScreen+0x44>)
 8002280:	f7ff fdc0 	bl	8001e04 <LCD_NextLine>
	LCD_PrintCentered("ally to fix device");
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <LCD_FatalSDScreen+0x50>)
 8002286:	f7ff fc69 	bl	8001b5c <LCD_PrintCentered>

	HAL_Delay(1000);
 800228a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228e:	f007 fabb 	bl	8009808 <HAL_Delay>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	0800fbd8 	.word	0x0800fbd8
 800229c:	0800fb80 	.word	0x0800fb80
 80022a0:	0800fbf0 	.word	0x0800fbf0
 80022a4:	0800fc04 	.word	0x0800fc04
 80022a8:	0800fc1c 	.word	0x0800fc1c

080022ac <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	State = ST_Clock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <MENU_Init+0x14>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20002d45 	.word	0x20002d45

080022c4 <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	e007      	b.n	80022e0 <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <_PWD_ResetPasswd+0x3c>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3301      	adds	r3, #1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b27      	cmp	r3, #39	; 0x27
 80022e4:	ddf4      	ble.n	80022d0 <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_PWD_ResetPasswd+0x40>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <_PWD_ResetPasswd+0x44>)
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	701a      	strb	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200004ac 	.word	0x200004ac
 8002304:	200004eb 	.word	0x200004eb
 8002308:	200004a7 	.word	0x200004a7

0800230c <_PWD_NextChar>:

char _PWD_NextChar(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <_PWD_NextChar+0x2c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_PWD_NextChar+0x2c>)
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <_PWD_NextChar+0x2c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b7e      	cmp	r3, #126	; 0x7e
 8002322:	d902      	bls.n	800232a <_PWD_NextChar+0x1e>
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <_PWD_NextChar+0x2c>)
 8002326:	2220      	movs	r2, #32
 8002328:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 800232a:	4b03      	ldr	r3, [pc, #12]	; (8002338 <_PWD_NextChar+0x2c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	200004a7 	.word	0x200004a7

0800233c <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b20      	cmp	r3, #32
 800234a:	d001      	beq.n	8002350 <_PWD_SaveAndWrite+0x14>
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	e000      	b.n	8002352 <_PWD_SaveAndWrite+0x16>
 8002350:	2300      	movs	r3, #0
 8002352:	4a06      	ldr	r2, [pc, #24]	; (800236c <_PWD_SaveAndWrite+0x30>)
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	4611      	mov	r1, r2
 8002358:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_PWD_SaveAndWrite+0x34>)
 800235a:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe52 	bl	8002008 <LCD_WriteChar>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200004eb 	.word	0x200004eb
 8002370:	200004ac 	.word	0x200004ac

08002374 <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002378:	4b9d      	ldr	r3, [pc, #628]	; (80025f0 <_CLK_HandleDateTimeInput+0x27c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	3b01      	subs	r3, #1
 800237e:	2b11      	cmp	r3, #17
 8002380:	f200 8141 	bhi.w	8002606 <_CLK_HandleDateTimeInput+0x292>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <_CLK_HandleDateTimeInput+0x18>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023d5 	.word	0x080023d5
 8002390:	08002403 	.word	0x08002403
 8002394:	08002607 	.word	0x08002607
 8002398:	08002431 	.word	0x08002431
 800239c:	0800245f 	.word	0x0800245f
 80023a0:	08002607 	.word	0x08002607
 80023a4:	0800248d 	.word	0x0800248d
 80023a8:	080024bb 	.word	0x080024bb
 80023ac:	08002607 	.word	0x08002607
 80023b0:	08002607 	.word	0x08002607
 80023b4:	080024e9 	.word	0x080024e9
 80023b8:	08002517 	.word	0x08002517
 80023bc:	08002607 	.word	0x08002607
 80023c0:	08002545 	.word	0x08002545
 80023c4:	08002573 	.word	0x08002573
 80023c8:	08002607 	.word	0x08002607
 80023cc:	080025a1 	.word	0x080025a1
 80023d0:	080025cf 	.word	0x080025cf
		ColIs(1)
			SetBetween('0', '3');
 80023d4:	4b87      	ldr	r3, [pc, #540]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b32      	cmp	r3, #50	; 0x32
 80023da:	d903      	bls.n	80023e4 <_CLK_HandleDateTimeInput+0x70>
 80023dc:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023de:	2230      	movs	r2, #48	; 0x30
 80023e0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80023e2:	e110      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 80023e4:	4b83      	ldr	r3, [pc, #524]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b2f      	cmp	r3, #47	; 0x2f
 80023ea:	d803      	bhi.n	80023f4 <_CLK_HandleDateTimeInput+0x80>
 80023ec:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023ee:	2230      	movs	r2, #48	; 0x30
 80023f0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80023f2:	e108      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 80023f4:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80023fe:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002400:	e101      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b38      	cmp	r3, #56	; 0x38
 8002408:	d903      	bls.n	8002412 <_CLK_HandleDateTimeInput+0x9e>
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800240c:	2230      	movs	r2, #48	; 0x30
 800240e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002410:	e0f9      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002412:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b2f      	cmp	r3, #47	; 0x2f
 8002418:	d803      	bhi.n	8002422 <_CLK_HandleDateTimeInput+0xae>
 800241a:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800241c:	2230      	movs	r2, #48	; 0x30
 800241e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002420:	e0f1      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002422:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800242c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800242e:	e0ea      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8002430:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b30      	cmp	r3, #48	; 0x30
 8002436:	d903      	bls.n	8002440 <_CLK_HandleDateTimeInput+0xcc>
 8002438:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800243a:	2230      	movs	r2, #48	; 0x30
 800243c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800243e:	e0e2      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8002440:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b2f      	cmp	r3, #47	; 0x2f
 8002446:	d803      	bhi.n	8002450 <_CLK_HandleDateTimeInput+0xdc>
 8002448:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800244a:	2230      	movs	r2, #48	; 0x30
 800244c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800244e:	e0da      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800245a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800245c:	e0d3      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b38      	cmp	r3, #56	; 0x38
 8002464:	d903      	bls.n	800246e <_CLK_HandleDateTimeInput+0xfa>
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002468:	2230      	movs	r2, #48	; 0x30
 800246a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800246c:	e0cb      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800246e:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b2f      	cmp	r3, #47	; 0x2f
 8002474:	d803      	bhi.n	800247e <_CLK_HandleDateTimeInput+0x10a>
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002478:	2230      	movs	r2, #48	; 0x30
 800247a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800247c:	e0c3      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b5b      	ldr	r3, [pc, #364]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002488:	701a      	strb	r2, [r3, #0]
		ColEnd
 800248a:	e0bc      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b38      	cmp	r3, #56	; 0x38
 8002492:	d903      	bls.n	800249c <_CLK_HandleDateTimeInput+0x128>
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002496:	2232      	movs	r2, #50	; 0x32
 8002498:	701a      	strb	r2, [r3, #0]
		ColEnd
 800249a:	e0b4      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b31      	cmp	r3, #49	; 0x31
 80024a2:	d803      	bhi.n	80024ac <_CLK_HandleDateTimeInput+0x138>
 80024a4:	4b53      	ldr	r3, [pc, #332]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024a6:	2232      	movs	r2, #50	; 0x32
 80024a8:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024aa:	e0ac      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 80024ac:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024b6:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024b8:	e0a5      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 80024ba:	4b4e      	ldr	r3, [pc, #312]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b38      	cmp	r3, #56	; 0x38
 80024c0:	d903      	bls.n	80024ca <_CLK_HandleDateTimeInput+0x156>
 80024c2:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024c4:	2230      	movs	r2, #48	; 0x30
 80024c6:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024c8:	e09d      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b2f      	cmp	r3, #47	; 0x2f
 80024d0:	d803      	bhi.n	80024da <_CLK_HandleDateTimeInput+0x166>
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024d4:	2230      	movs	r2, #48	; 0x30
 80024d6:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024d8:	e095      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 80024da:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b44      	ldr	r3, [pc, #272]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024e4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024e6:	e08e      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b31      	cmp	r3, #49	; 0x31
 80024ee:	d903      	bls.n	80024f8 <_CLK_HandleDateTimeInput+0x184>
 80024f0:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024f2:	2230      	movs	r2, #48	; 0x30
 80024f4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80024f6:	e086      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 80024f8:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b2f      	cmp	r3, #47	; 0x2f
 80024fe:	d803      	bhi.n	8002508 <_CLK_HandleDateTimeInput+0x194>
 8002500:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002502:	2230      	movs	r2, #48	; 0x30
 8002504:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002506:	e07e      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8002508:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002512:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002514:	e077      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b38      	cmp	r3, #56	; 0x38
 800251c:	d903      	bls.n	8002526 <_CLK_HandleDateTimeInput+0x1b2>
 800251e:	4b35      	ldr	r3, [pc, #212]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002520:	2230      	movs	r2, #48	; 0x30
 8002522:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002524:	e06f      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b2f      	cmp	r3, #47	; 0x2f
 800252c:	d803      	bhi.n	8002536 <_CLK_HandleDateTimeInput+0x1c2>
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002530:	2230      	movs	r2, #48	; 0x30
 8002532:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002534:	e067      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002540:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002542:	e060      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b34      	cmp	r3, #52	; 0x34
 800254a:	d903      	bls.n	8002554 <_CLK_HandleDateTimeInput+0x1e0>
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800254e:	2230      	movs	r2, #48	; 0x30
 8002550:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002552:	e058      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b2f      	cmp	r3, #47	; 0x2f
 800255a:	d803      	bhi.n	8002564 <_CLK_HandleDateTimeInput+0x1f0>
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800255e:	2230      	movs	r2, #48	; 0x30
 8002560:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002562:	e050      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800256e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002570:	e049      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b38      	cmp	r3, #56	; 0x38
 8002578:	d903      	bls.n	8002582 <_CLK_HandleDateTimeInput+0x20e>
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800257c:	2230      	movs	r2, #48	; 0x30
 800257e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002580:	e041      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002582:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b2f      	cmp	r3, #47	; 0x2f
 8002588:	d803      	bhi.n	8002592 <_CLK_HandleDateTimeInput+0x21e>
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800258c:	2230      	movs	r2, #48	; 0x30
 800258e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002590:	e039      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8002592:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 800259c:	701a      	strb	r2, [r3, #0]
		ColEnd
 800259e:	e032      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b34      	cmp	r3, #52	; 0x34
 80025a6:	d903      	bls.n	80025b0 <_CLK_HandleDateTimeInput+0x23c>
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025aa:	2230      	movs	r2, #48	; 0x30
 80025ac:	701a      	strb	r2, [r3, #0]
		ColEnd
 80025ae:	e02a      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b2f      	cmp	r3, #47	; 0x2f
 80025b6:	d803      	bhi.n	80025c0 <_CLK_HandleDateTimeInput+0x24c>
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025ba:	2230      	movs	r2, #48	; 0x30
 80025bc:	701a      	strb	r2, [r3, #0]
		ColEnd
 80025be:	e022      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025ca:	701a      	strb	r2, [r3, #0]
		ColEnd
 80025cc:	e01b      	b.n	8002606 <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b38      	cmp	r3, #56	; 0x38
 80025d4:	d903      	bls.n	80025de <_CLK_HandleDateTimeInput+0x26a>
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025d8:	2230      	movs	r2, #48	; 0x30
 80025da:	701a      	strb	r2, [r3, #0]
		ColEnd
 80025dc:	e012      	b.n	8002604 <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b2f      	cmp	r3, #47	; 0x2f
 80025e4:	d808      	bhi.n	80025f8 <_CLK_HandleDateTimeInput+0x284>
 80025e6:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <_CLK_HandleDateTimeInput+0x280>)
 80025e8:	2230      	movs	r2, #48	; 0x30
 80025ea:	701a      	strb	r2, [r3, #0]
		ColEnd
 80025ec:	e00a      	b.n	8002604 <_CLK_HandleDateTimeInput+0x290>
 80025ee:	bf00      	nop
 80025f0:	200004a6 	.word	0x200004a6
 80025f4:	200004a7 	.word	0x200004a7
			SetBetween('0', '9');
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <_CLK_HandleDateTimeInput+0x2b0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_CLK_HandleDateTimeInput+0x2b0>)
 8002602:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002604:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_CLK_HandleDateTimeInput+0x2b0>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fcfc 	bl	8002008 <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <_CLK_HandleDateTimeInput+0x2b4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b03      	ldr	r3, [pc, #12]	; (8002624 <_CLK_HandleDateTimeInput+0x2b0>)
 8002618:	7819      	ldrb	r1, [r3, #0]
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <_CLK_HandleDateTimeInput+0x2b8>)
 800261c:	5499      	strb	r1, [r3, r2]
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200004a7 	.word	0x200004a7
 8002628:	200004a6 	.word	0x200004a6
 800262c:	200004d8 	.word	0x200004d8

08002630 <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	3b02      	subs	r3, #2
 800263a:	2b10      	cmp	r3, #16
 800263c:	d84c      	bhi.n	80026d8 <_CLK_MoveInputRight+0xa8>
 800263e:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <_CLK_MoveInputRight+0x14>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	080026c9 	.word	0x080026c9
 8002648:	080026d9 	.word	0x080026d9
 800264c:	080026d9 	.word	0x080026d9
 8002650:	080026b9 	.word	0x080026b9
 8002654:	080026d9 	.word	0x080026d9
 8002658:	080026d9 	.word	0x080026d9
 800265c:	080026a9 	.word	0x080026a9
 8002660:	080026d9 	.word	0x080026d9
 8002664:	080026d9 	.word	0x080026d9
 8002668:	080026d9 	.word	0x080026d9
 800266c:	08002699 	.word	0x08002699
 8002670:	080026d9 	.word	0x080026d9
 8002674:	080026d9 	.word	0x080026d9
 8002678:	08002689 	.word	0x08002689
 800267c:	080026d9 	.word	0x080026d9
 8002680:	080026d9 	.word	0x080026d9
 8002684:	080026e7 	.word	0x080026e7
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 8002688:	2101      	movs	r1, #1
 800268a:	2011      	movs	r0, #17
 800268c:	f7ff f9a4 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 17;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 8002692:	2211      	movs	r2, #17
 8002694:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002696:	e027      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 8002698:	2101      	movs	r1, #1
 800269a:	200e      	movs	r0, #14
 800269c:	f7ff f99c 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 14;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 80026a2:	220e      	movs	r2, #14
 80026a4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80026a6:	e01f      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 80026a8:	2101      	movs	r1, #1
 80026aa:	200b      	movs	r0, #11
 80026ac:	f7ff f994 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 11;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 80026b2:	220b      	movs	r2, #11
 80026b4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80026b6:	e017      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 80026b8:	2101      	movs	r1, #1
 80026ba:	2007      	movs	r0, #7
 80026bc:	f7ff f98c 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 7;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 80026c2:	2207      	movs	r2, #7
 80026c4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80026c6:	e00f      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 80026c8:	2101      	movs	r1, #1
 80026ca:	2004      	movs	r0, #4
 80026cc:	f7ff f984 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 4;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	701a      	strb	r2, [r3, #0]
		ColEnd
 80026d6:	e007      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 80026d8:	f7ff fc22 	bl	8001f20 <LCD_CursorRight>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <_CLK_MoveInputRight+0xbc>)
 80026e2:	701a      	strb	r2, [r3, #0]
	}
}
 80026e4:	e000      	b.n	80026e8 <_CLK_MoveInputRight+0xb8>
		ColEnd
 80026e6:	bf00      	nop
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200004a6 	.word	0x200004a6

080026f0 <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d84c      	bhi.n	8002798 <_CLK_MoveInputLeft+0xa8>
 80026fe:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <_CLK_MoveInputLeft+0x14>)
 8002700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002704:	080027a7 	.word	0x080027a7
 8002708:	08002799 	.word	0x08002799
 800270c:	08002799 	.word	0x08002799
 8002710:	08002749 	.word	0x08002749
 8002714:	08002799 	.word	0x08002799
 8002718:	08002799 	.word	0x08002799
 800271c:	08002759 	.word	0x08002759
 8002720:	08002799 	.word	0x08002799
 8002724:	08002799 	.word	0x08002799
 8002728:	08002799 	.word	0x08002799
 800272c:	08002769 	.word	0x08002769
 8002730:	08002799 	.word	0x08002799
 8002734:	08002799 	.word	0x08002799
 8002738:	08002779 	.word	0x08002779
 800273c:	08002799 	.word	0x08002799
 8002740:	08002799 	.word	0x08002799
 8002744:	08002789 	.word	0x08002789
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 8002748:	2101      	movs	r1, #1
 800274a:	2002      	movs	r0, #2
 800274c:	f7ff f944 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 2;
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002756:	e027      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 8002758:	2101      	movs	r1, #1
 800275a:	2005      	movs	r0, #5
 800275c:	f7ff f93c 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 5;
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 8002762:	2205      	movs	r2, #5
 8002764:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002766:	e01f      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 8002768:	2101      	movs	r1, #1
 800276a:	2008      	movs	r0, #8
 800276c:	f7ff f934 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 8;
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 8002772:	2208      	movs	r2, #8
 8002774:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002776:	e017      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 8002778:	2101      	movs	r1, #1
 800277a:	200c      	movs	r0, #12
 800277c:	f7ff f92c 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 12;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 8002782:	220c      	movs	r2, #12
 8002784:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002786:	e00f      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 8002788:	2101      	movs	r1, #1
 800278a:	200f      	movs	r0, #15
 800278c:	f7ff f924 	bl	80019d8 <LCD_SetCursor>
			_optionsCol = 15;
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 8002792:	220f      	movs	r2, #15
 8002794:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002796:	e007      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 8002798:	f7ff fb94 	bl	8001ec4 <LCD_CursorLeft>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <_CLK_MoveInputLeft+0xbc>)
 80027a2:	701a      	strb	r2, [r3, #0]
	}
}
 80027a4:	e000      	b.n	80027a8 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 80027a6:	bf00      	nop
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200004a6 	.word	0x200004a6

080027b0 <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 80027ba:	4b72      	ldr	r3, [pc, #456]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	3b30      	subs	r3, #48	; 0x30
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 80027c4:	4b6f      	ldr	r3, [pc, #444]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027c6:	789b      	ldrb	r3, [r3, #2]
 80027c8:	3b30      	subs	r3, #48	; 0x30
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	3b30      	subs	r3, #48	; 0x30
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027da:	795b      	ldrb	r3, [r3, #5]
 80027dc:	3b30      	subs	r3, #48	; 0x30
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 80027e2:	4b68      	ldr	r3, [pc, #416]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027e4:	79db      	ldrb	r3, [r3, #7]
 80027e6:	3b30      	subs	r3, #48	; 0x30
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 80027ec:	4b65      	ldr	r3, [pc, #404]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027ee:	7a1b      	ldrb	r3, [r3, #8]
 80027f0:	3b30      	subs	r3, #48	; 0x30
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 80027f8:	7adb      	ldrb	r3, [r3, #11]
 80027fa:	3b30      	subs	r3, #48	; 0x30
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 8002800:	4b60      	ldr	r3, [pc, #384]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002802:	7b1b      	ldrb	r3, [r3, #12]
 8002804:	3b30      	subs	r3, #48	; 0x30
 8002806:	b2db      	uxtb	r3, r3
 8002808:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 800280c:	7b9b      	ldrb	r3, [r3, #14]
 800280e:	3b30      	subs	r3, #48	; 0x30
 8002810:	b2db      	uxtb	r3, r3
 8002812:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 8002814:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002816:	7bdb      	ldrb	r3, [r3, #15]
 8002818:	3b30      	subs	r3, #48	; 0x30
 800281a:	b2db      	uxtb	r3, r3
 800281c:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 800281e:	4b59      	ldr	r3, [pc, #356]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002820:	7c5b      	ldrb	r3, [r3, #17]
 8002822:	3b30      	subs	r3, #48	; 0x30
 8002824:	b2db      	uxtb	r3, r3
 8002826:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 8002828:	4b56      	ldr	r3, [pc, #344]	; (8002984 <_CLK_ParseAndSetDateTime+0x1d4>)
 800282a:	7c9b      	ldrb	r3, [r3, #18]
 800282c:	3b30      	subs	r3, #48	; 0x30
 800282e:	b2db      	uxtb	r3, r3
 8002830:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 8002832:	7abb      	ldrb	r3, [r7, #10]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d104      	bne.n	8002842 <_CLK_ParseAndSetDateTime+0x92>
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 8002842:	7abb      	ldrb	r3, [r7, #10]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <_CLK_ParseAndSetDateTime+0xa2>
 8002848:	7afb      	ldrb	r3, [r7, #11]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 8002852:	783b      	ldrb	r3, [r7, #0]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d104      	bne.n	8002862 <_CLK_ParseAndSetDateTime+0xb2>
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d901      	bls.n	8002862 <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 8002862:	7abb      	ldrb	r3, [r7, #10]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <_CLK_ParseAndSetDateTime+0xbe>
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d023      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
 800286e:	7abb      	ldrb	r3, [r7, #10]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_CLK_ParseAndSetDateTime+0xca>
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d01d      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
 800287a:	7abb      	ldrb	r3, [r7, #10]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_CLK_ParseAndSetDateTime+0xd6>
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d017      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 8002886:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	2b07      	cmp	r3, #7
 8002890:	d011      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
 8002892:	7abb      	ldrb	r3, [r7, #10]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <_CLK_ParseAndSetDateTime+0xee>
 8002898:	7afb      	ldrb	r3, [r7, #11]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d00b      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
 800289e:	7abb      	ldrb	r3, [r7, #10]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <_CLK_ParseAndSetDateTime+0xfa>
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 80028aa:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10a      	bne.n	80028c6 <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 80028b6:	7a3b      	ldrb	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d104      	bne.n	80028c6 <_CLK_ParseAndSetDateTime+0x116>
 80028bc:	7a7b      	ldrb	r3, [r7, #9]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d901      	bls.n	80028c6 <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,6)||Month(0,9)||
 80028c6:	7abb      	ldrb	r3, [r7, #10]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_CLK_ParseAndSetDateTime+0x122>
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d011      	beq.n	80028f6 <_CLK_ParseAndSetDateTime+0x146>
 80028d2:	7abb      	ldrb	r3, [r7, #10]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_CLK_ParseAndSetDateTime+0x12e>
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d00b      	beq.n	80028f6 <_CLK_ParseAndSetDateTime+0x146>
 80028de:	7abb      	ldrb	r3, [r7, #10]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_CLK_ParseAndSetDateTime+0x13a>
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	2b09      	cmp	r3, #9
 80028e8:	d005      	beq.n	80028f6 <_CLK_ParseAndSetDateTime+0x146>
		Month(1,1)) {
 80028ea:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,6)||Month(0,9)||
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d10a      	bne.n	8002906 <_CLK_ParseAndSetDateTime+0x156>
		Month(1,1)) {
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 80028f6:	7a3b      	ldrb	r3, [r7, #8]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d104      	bne.n	8002906 <_CLK_ParseAndSetDateTime+0x156>
 80028fc:	7a7b      	ldrb	r3, [r7, #9]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 8002906:	7abb      	ldrb	r3, [r7, #10]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d115      	bne.n	8002938 <_CLK_ParseAndSetDateTime+0x188>
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d112      	bne.n	8002938 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 8002912:	7a3b      	ldrb	r3, [r7, #8]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 8002928:	7a3b      	ldrb	r3, [r7, #8]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d104      	bne.n	8002938 <_CLK_ParseAndSetDateTime+0x188>
 800292e:	7a7b      	ldrb	r3, [r7, #9]
 8002930:	2b09      	cmp	r3, #9
 8002932:	d101      	bne.n	8002938 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 8002938:	f7ff f894 	bl	8001a64 <LCD_DisableCursor>

	if (error) {
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d014      	beq.n	800296c <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 8002942:	f7ff f837 	bl	80019b4 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 8002946:	2101      	movs	r1, #1
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff f845 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 800294e:	480e      	ldr	r0, [pc, #56]	; (8002988 <_CLK_ParseAndSetDateTime+0x1d8>)
 8002950:	f7ff f904 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 8002954:	2102      	movs	r1, #2
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff f83e 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 800295c:	480b      	ldr	r0, [pc, #44]	; (800298c <_CLK_ParseAndSetDateTime+0x1dc>)
 800295e:	f7ff f8fd 	bl	8001b5c <LCD_PrintCentered>

		HAL_Delay(1000);
 8002962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002966:	f006 ff4f 	bl	8009808 <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 800296a:	e006      	b.n	800297a <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 800296c:	463a      	mov	r2, r7
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fd0f 	bl	8004398 <SD_SetDateTime>
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200004d8 	.word	0x200004d8
 8002988:	0800fc30 	.word	0x0800fc30
 800298c:	0800fc40 	.word	0x0800fc40

08002990 <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MENU_PasswdInput+0x44>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d018      	beq.n	80029ce <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 800299c:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <MENU_PasswdInput+0x44>)
 800299e:	2203      	movs	r2, #3
 80029a0:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80029a2:	f7ff f807 	bl	80019b4 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 80029a6:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MENU_PasswdInput+0x48>)
 80029a8:	f7ff f8d8 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 80029ac:	2103      	movs	r1, #3
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7ff f812 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 80029b4:	4809      	ldr	r0, [pc, #36]	; (80029dc <MENU_PasswdInput+0x4c>)
 80029b6:	f7ff f8d1 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff f80b 	bl	80019d8 <LCD_SetCursor>

		_PWD_ResetPasswd();
 80029c2:	f7ff fc7f 	bl	80022c4 <_PWD_ResetPasswd>

		LCD_DisableBlink();
 80029c6:	f7ff f879 	bl	8001abc <LCD_DisableBlink>
		LCD_EnableCursor();
 80029ca:	f7ff f861 	bl	8001a90 <LCD_EnableCursor>
	}
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20002d45 	.word	0x20002d45
 80029d8:	0800fc54 	.word	0x0800fc54
 80029dc:	0800fc6c 	.word	0x0800fc6c

080029e0 <MENU_Options>:

void MENU_Options(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MENU_Options+0x40>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d016      	beq.n	8002a1a <MENU_Options+0x3a>
		State = ST_Options;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MENU_Options+0x40>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80029f2:	f7fe ffdf 	bl	80019b4 <LCD_ClearScreen>

		_currentOption = 1;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <MENU_Options+0x44>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <MENU_Options+0x44>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4809      	ldr	r0, [pc, #36]	; (8002a28 <MENU_Options+0x48>)
 8002a04:	f7ff fb7c 	bl	8002100 <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe ffe4 	bl	80019d8 <LCD_SetCursor>
		_optionsRow = 1;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MENU_Options+0x4c>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 8002a16:	f7ff f867 	bl	8001ae8 <LCD_EnableBlink>
	}
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20002d45 	.word	0x20002d45
 8002a24:	200004a5 	.word	0x200004a5
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	200004a4 	.word	0x200004a4

08002a30 <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <MENU_OptionsSetDateTime+0x88>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	d038      	beq.n	8002ab0 <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <MENU_OptionsSetDateTime+0x88>)
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002a44:	f7fe ffb6 	bl	80019b4 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 8002a48:	481c      	ldr	r0, [pc, #112]	; (8002abc <MENU_OptionsSetDateTime+0x8c>)
 8002a4a:	f7ff f863 	bl	8001b14 <LCD_Print>
		LCD_SetCursor(0, 1);
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe ffc1 	bl	80019d8 <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 8002a56:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <MENU_OptionsSetDateTime+0x90>)
 8002a58:	f7ff f85c 	bl	8001b14 <LCD_Print>
		LCD_SetCursor(0, 2);
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe ffba 	bl	80019d8 <LCD_SetCursor>
		LCD_Print("--------------------");
 8002a64:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <MENU_OptionsSetDateTime+0x94>)
 8002a66:	f7ff f855 	bl	8001b14 <LCD_Print>
		LCD_SetCursor(0, 3);
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe ffb3 	bl	80019d8 <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 8002a72:	4815      	ldr	r0, [pc, #84]	; (8002ac8 <MENU_OptionsSetDateTime+0x98>)
 8002a74:	f7ff f84e 	bl	8001b14 <LCD_Print>

		LCD_SetCursor(1, 1);
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7fe ffac 	bl	80019d8 <LCD_SetCursor>
		_optionsCol = 1;
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MENU_OptionsSetDateTime+0x9c>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 8002a86:	f7ff f819 	bl	8001abc <LCD_DisableBlink>
		LCD_EnableCursor();
 8002a8a:	f7ff f801 	bl	8001a90 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	e007      	b.n	8002aa4 <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <MENU_OptionsSetDateTime+0xa0>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2230      	movs	r2, #48	; 0x30
 8002a9c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	ddf4      	ble.n	8002a94 <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <MENU_OptionsSetDateTime+0xa4>)
 8002aac:	2230      	movs	r2, #48	; 0x30
 8002aae:	701a      	strb	r2, [r3, #0]
	}
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20002d45 	.word	0x20002d45
 8002abc:	0800fc84 	.word	0x0800fc84
 8002ac0:	0800fc9c 	.word	0x0800fc9c
 8002ac4:	0800fcb4 	.word	0x0800fcb4
 8002ac8:	0800fc6c 	.word	0x0800fc6c
 8002acc:	200004a6 	.word	0x200004a6
 8002ad0:	200004d8 	.word	0x200004d8
 8002ad4:	200004a7 	.word	0x200004a7

08002ad8 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	int amount = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_WiFi_NofNetworks+0x22>
			return amount;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	e00c      	b.n	8002b14 <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b3b      	cmp	r3, #59	; 0x3b
 8002b04:	d102      	bne.n	8002b0c <_WiFi_NofNetworks+0x34>
			amount++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002b12:	e7e9      	b.n	8002ae8 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
	int clearRest = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	e015      	b.n	8002b5c <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <_WiFi_RequestConn+0x26>
 8002b36:	4a2b      	ldr	r2, [pc, #172]	; (8002be4 <_WiFi_RequestConn+0xc4>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <_WiFi_RequestConn+0x26>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <_WiFi_RequestConn+0x36>
 8002b4c:	4a25      	ldr	r2, [pc, #148]	; (8002be4 <_WiFi_RequestConn+0xc4>)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4413      	add	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b27      	cmp	r3, #39	; 0x27
 8002b60:	dde6      	ble.n	8002b30 <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 8002b62:	f7fe ff27 	bl	80019b4 <LCD_ClearScreen>
	LCD_DisableCursor();
 8002b66:	f7fe ff7d 	bl	8001a64 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe ff33 	bl	80019d8 <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 8002b72:	481d      	ldr	r0, [pc, #116]	; (8002be8 <_WiFi_RequestConn+0xc8>)
 8002b74:	f7fe fff2 	bl	8001b5c <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 8002b78:	2103      	movs	r1, #3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe ff2c 	bl	80019d8 <LCD_SetCursor>
	LCD_PrintCentered("please wait");
 8002b80:	481a      	ldr	r0, [pc, #104]	; (8002bec <_WiFi_RequestConn+0xcc>)
 8002b82:	f7fe ffeb 	bl	8001b5c <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <_WiFi_RequestConn+0xd0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4815      	ldr	r0, [pc, #84]	; (8002be4 <_WiFi_RequestConn+0xc4>)
 8002b8e:	f000 fd09 	bl	80035a4 <NET_ConnectToWiFi>
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 8002b96:	f7fe ff0d 	bl	80019b4 <LCD_ClearScreen>

	if (result == 0) {
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fe ff18 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <_WiFi_RequestConn+0xd4>)
 8002baa:	f7fe ffd7 	bl	8001b5c <LCD_PrintCentered>

		HAL_Delay(1000);
 8002bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bb2:	f006 fe29 	bl	8009808 <HAL_Delay>
 8002bb6:	e00d      	b.n	8002bd4 <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe ff0c 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 8002bc0:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <_WiFi_RequestConn+0xd8>)
 8002bc2:	f7fe ffcb 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fe ff05 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <_WiFi_RequestConn+0xdc>)
 8002bd0:	f7fe ffc4 	bl	8001b5c <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 8002bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bd8:	f006 fe16 	bl	8009808 <HAL_Delay>
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200004ac 	.word	0x200004ac
 8002be8:	0800fccc 	.word	0x0800fccc
 8002bec:	0800fcd8 	.word	0x0800fcd8
 8002bf0:	200004a5 	.word	0x200004a5
 8002bf4:	0800fce4 	.word	0x0800fce4
 8002bf8:	0800fcf0 	.word	0x0800fcf0
 8002bfc:	0800fd04 	.word	0x0800fd04

08002c00 <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <MENU_OptionsWifiList+0xac>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d049      	beq.n	8002ca2 <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 8002c0e:	4b27      	ldr	r3, [pc, #156]	; (8002cac <MENU_OptionsWifiList+0xac>)
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002c14:	f7fe fece 	bl	80019b4 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002c18:	f7fe ff50 	bl	8001abc <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 8002c1c:	4824      	ldr	r0, [pc, #144]	; (8002cb0 <MENU_OptionsWifiList+0xb0>)
 8002c1e:	f7fe ff9d 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 8002c22:	2102      	movs	r1, #2
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe fed7 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 8002c2a:	4822      	ldr	r0, [pc, #136]	; (8002cb4 <MENU_OptionsWifiList+0xb4>)
 8002c2c:	f7fe ff96 	bl	8001b5c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 8002c30:	2103      	movs	r1, #3
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fed0 	bl	80019d8 <LCD_SetCursor>
		LCD_PrintCentered("please wait");
 8002c38:	481f      	ldr	r0, [pc, #124]	; (8002cb8 <MENU_OptionsWifiList+0xb8>)
 8002c3a:	f7fe ff8f 	bl	8001b5c <LCD_PrintCentered>

		_optionsRow = 0;
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <MENU_OptionsWifiList+0xbc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 8002c44:	f000 fb7a 	bl	800333c <NET_RequestNetworkList>
 8002c48:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d019      	beq.n	8002c84 <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff41 	bl	8002ad8 <_WiFi_NofNetworks>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <MENU_OptionsWifiList+0xc0>)
 8002c5c:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 8002c5e:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <MENU_OptionsWifiList+0xc4>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 8002c64:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <MENU_OptionsWifiList+0xc8>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 8002c6a:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <MENU_OptionsWifiList+0xc4>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff f9d9 	bl	8002028 <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 8002c76:	f7fe ff37 	bl	8001ae8 <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fe feab 	bl	80019d8 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 8002c82:	e00e      	b.n	8002ca2 <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 8002c84:	f7fe fe96 	bl	80019b4 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe fea4 	bl	80019d8 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 8002c90:	480e      	ldr	r0, [pc, #56]	; (8002ccc <MENU_OptionsWifiList+0xcc>)
 8002c92:	f7fe ff63 	bl	8001b5c <LCD_PrintCentered>
			HAL_Delay(1000);
 8002c96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c9a:	f006 fdb5 	bl	8009808 <HAL_Delay>
			MENU_Options();
 8002c9e:	f7ff fe9f 	bl	80029e0 <MENU_Options>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20002d45 	.word	0x20002d45
 8002cb0:	0800fd18 	.word	0x0800fd18
 8002cb4:	0800fd2c 	.word	0x0800fd2c
 8002cb8:	0800fcd8 	.word	0x0800fcd8
 8002cbc:	200004a4 	.word	0x200004a4
 8002cc0:	200004d4 	.word	0x200004d4
 8002cc4:	200004a5 	.word	0x200004a5
 8002cc8:	200004a8 	.word	0x200004a8
 8002ccc:	0800fd3c 	.word	0x0800fd3c

08002cd0 <MENU_Clock>:

void MENU_Clock(void) {
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <MENU_Clock+0x88>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <MENU_Clock+0x1c>
		State = ST_Clock;
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <MENU_Clock+0x88>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 8002ce4:	f7fe fe66 	bl	80019b4 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002ce8:	f7fe fee8 	bl	8001abc <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 8002cec:	f001 fa90 	bl	8004210 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 8002cf0:	f107 0208 	add.w	r2, r7, #8
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fb06 	bl	800430c <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 8002d00:	f107 0208 	add.w	r2, r7, #8
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f960 	bl	8001fd0 <LCD_PrintDateTime>

	/* update jsona do wyslania dla strony, nie przeszkadzac */
	NET_AbortIT();
 8002d10:	f000 fa74 	bl	80031fc <NET_AbortIT>

	if (THS_ReadData(THS_In, data)) {
 8002d14:	463b      	mov	r3, r7
 8002d16:	4619      	mov	r1, r3
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 fe37 	bl	800498c <THS_ReadData>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <MENU_Clock+0x6e>
		LCD_PrintTempInfo(data, NULL);
 8002d24:	463b      	mov	r3, r7
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe ff41 	bl	8001bb0 <LCD_PrintTempInfo>
		SD_CreateJson(true, data, date, time);
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	f107 0214 	add.w	r2, r7, #20
 8002d36:	4639      	mov	r1, r7
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f001 fbcd 	bl	80044d8 <SD_CreateJson>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <MENU_Clock+0x8c>)
 8002d40:	781c      	ldrb	r4, [r3, #0]
 8002d42:	f000 fcbf 	bl	80036c4 <NET_GetConnInfo>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff fa24 	bl	8002198 <LCD_PrintNetworkStatus>
}
 8002d50:	bf00      	nop
 8002d52:	3724      	adds	r7, #36	; 0x24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd90      	pop	{r4, r7, pc}
 8002d58:	20002d45 	.word	0x20002d45
 8002d5c:	20002d44 	.word	0x20002d44

08002d60 <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	48b0      	ldr	r0, [pc, #704]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002d68:	f007 f83e 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 808e 	beq.w	8002e90 <MENU_HandleKeys+0x130>
 8002d74:	200a      	movs	r0, #10
 8002d76:	f006 fd47 	bl	8009808 <HAL_Delay>
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	48aa      	ldr	r0, [pc, #680]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002d7e:	f007 f833 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 81e5 	beq.w	8003154 <MENU_HandleKeys+0x3f4>
 8002d8a:	bf00      	nop
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	48a6      	ldr	r0, [pc, #664]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002d90:	f007 f82a 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f8      	bne.n	8002d8c <MENU_HandleKeys+0x2c>
		LCD_WakeScreen();
 8002d9a:	f7fe fde7 	bl	800196c <LCD_WakeScreen>

		if (State == ST_Clock) {
 8002d9e:	4ba3      	ldr	r3, [pc, #652]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <MENU_HandleKeys+0x4c>
			/* Przejdz w ekran opcji */
			MENU_Options();
 8002da6:	f7ff fe1b 	bl	80029e0 <MENU_Options>
 8002daa:	e06a      	b.n	8002e82 <MENU_HandleKeys+0x122>
		} else if (State == ST_Options) {
 8002dac:	4b9f      	ldr	r3, [pc, #636]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d125      	bne.n	8002e00 <MENU_HandleKeys+0xa0>
			if (_optionsRow > 1) {
 8002db4:	4b9e      	ldr	r3, [pc, #632]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d90c      	bls.n	8002dd6 <MENU_HandleKeys+0x76>
				_optionsRow = LCD_CursorUp();
 8002dbc:	f7ff f84a 	bl	8001e54 <LCD_CursorUp>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b9a      	ldr	r3, [pc, #616]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002dc6:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002dc8:	4b9a      	ldr	r3, [pc, #616]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b98      	ldr	r3, [pc, #608]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e055      	b.n	8002e82 <MENU_HandleKeys+0x122>
			} else if (_currentOption != 1) {
 8002dd6:	4b97      	ldr	r3, [pc, #604]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d051      	beq.n	8002e82 <MENU_HandleKeys+0x122>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 8002dde:	4b95      	ldr	r3, [pc, #596]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b93      	ldr	r3, [pc, #588]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	4b92      	ldr	r3, [pc, #584]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	4891      	ldr	r0, [pc, #580]	; (8003038 <MENU_HandleKeys+0x2d8>)
 8002df2:	f7ff f985 	bl	8002100 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 8002df6:	2101      	movs	r1, #1
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fe fded 	bl	80019d8 <LCD_SetCursor>
 8002dfe:	e040      	b.n	8002e82 <MENU_HandleKeys+0x122>
			}
		} else if (State == ST_PassInput) {
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d106      	bne.n	8002e16 <MENU_HandleKeys+0xb6>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 8002e08:	f7ff fa80 	bl	800230c <_PWD_NextChar>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fa94 	bl	800233c <_PWD_SaveAndWrite>
 8002e14:	e035      	b.n	8002e82 <MENU_HandleKeys+0x122>
		} else if (State == ST_SetDateTime) {
 8002e16:	4b85      	ldr	r3, [pc, #532]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d102      	bne.n	8002e24 <MENU_HandleKeys+0xc4>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 8002e1e:	f7ff faa9 	bl	8002374 <_CLK_HandleDateTimeInput>
 8002e22:	e02e      	b.n	8002e82 <MENU_HandleKeys+0x122>
		} else if (State == ST_WiFi) {
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d12a      	bne.n	8002e82 <MENU_HandleKeys+0x122>
			if (_optionsRow > 0) {
 8002e2c:	4b80      	ldr	r3, [pc, #512]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00c      	beq.n	8002e4e <MENU_HandleKeys+0xee>
				_optionsRow = LCD_CursorUp();
 8002e34:	f7ff f80e 	bl	8001e54 <LCD_CursorUp>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002e3e:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002e40:	4b7c      	ldr	r3, [pc, #496]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b7a      	ldr	r3, [pc, #488]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e019      	b.n	8002e82 <MENU_HandleKeys+0x122>
			} else if (_networksIn > 4 && _currentOption != 1) {
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <MENU_HandleKeys+0x2dc>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d915      	bls.n	8002e82 <MENU_HandleKeys+0x122>
 8002e56:	4b77      	ldr	r3, [pc, #476]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d011      	beq.n	8002e82 <MENU_HandleKeys+0x122>
				LCD_PrintNetworks(_networksList, --_currentOption);
 8002e5e:	4b78      	ldr	r3, [pc, #480]	; (8003040 <MENU_HandleKeys+0x2e0>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b74      	ldr	r3, [pc, #464]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b2d9      	uxtb	r1, r3
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e6c:	7019      	strb	r1, [r3, #0]
 8002e6e:	4b71      	ldr	r3, [pc, #452]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7ff f8d7 	bl	8002028 <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7fe fdab 	bl	80019d8 <LCD_SetCursor>
			}
		}

		LED_T(Red);
 8002e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e86:	486f      	ldr	r0, [pc, #444]	; (8003044 <MENU_HandleKeys+0x2e4>)
 8002e88:	f006 ffdf 	bl	8009e4a <HAL_GPIO_TogglePin>
		return 1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e162      	b.n	8003156 <MENU_HandleKeys+0x3f6>

	} Or (DOWN) {
 8002e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e94:	4864      	ldr	r0, [pc, #400]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002e96:	f006 ffa7 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8093 	beq.w	8002fc8 <MENU_HandleKeys+0x268>
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f006 fcb0 	bl	8009808 <HAL_Delay>
 8002ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eac:	485e      	ldr	r0, [pc, #376]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002eae:	f006 ff9b 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 814d 	beq.w	8003154 <MENU_HandleKeys+0x3f4>
 8002eba:	bf00      	nop
 8002ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec0:	4859      	ldr	r0, [pc, #356]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002ec2:	f006 ff91 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f7      	bne.n	8002ebc <MENU_HandleKeys+0x15c>
		LCD_WakeScreen();
 8002ecc:	f7fe fd4e 	bl	800196c <LCD_WakeScreen>

		if (State == ST_Options) {
 8002ed0:	4b56      	ldr	r3, [pc, #344]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d126      	bne.n	8002f26 <MENU_HandleKeys+0x1c6>
			if (_optionsRow < 3) {
 8002ed8:	4b55      	ldr	r3, [pc, #340]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d80c      	bhi.n	8002efa <MENU_HandleKeys+0x19a>
				_optionsRow = LCD_CursorDown();
 8002ee0:	f7fe ffd4 	bl	8001e8c <LCD_CursorDown>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b51      	ldr	r3, [pc, #324]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002eea:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002eec:	4b51      	ldr	r3, [pc, #324]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e05f      	b.n	8002fba <MENU_HandleKeys+0x25a>
			} else if (_currentOption != NOF_OPTIONS) {
 8002efa:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d05b      	beq.n	8002fba <MENU_HandleKeys+0x25a>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 8002f02:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	3b02      	subs	r3, #2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4848      	ldr	r0, [pc, #288]	; (8003038 <MENU_HandleKeys+0x2d8>)
 8002f18:	f7ff f8f2 	bl	8002100 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7fe fd5a 	bl	80019d8 <LCD_SetCursor>
 8002f24:	e049      	b.n	8002fba <MENU_HandleKeys+0x25a>
			}
		} else if (State == ST_PassInput) {
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d104      	bne.n	8002f38 <MENU_HandleKeys+0x1d8>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 8002f2e:	f7ff fdf7 	bl	8002b20 <_WiFi_RequestConn>
			MENU_Clock();
 8002f32:	f7ff fecd 	bl	8002cd0 <MENU_Clock>
 8002f36:	e040      	b.n	8002fba <MENU_HandleKeys+0x25a>
		} else if (State == ST_SetDateTime) {
 8002f38:	4b3c      	ldr	r3, [pc, #240]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d104      	bne.n	8002f4a <MENU_HandleKeys+0x1ea>
			_CLK_ParseAndSetDateTime();
 8002f40:	f7ff fc36 	bl	80027b0 <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 8002f44:	f7ff fec4 	bl	8002cd0 <MENU_Clock>
 8002f48:	e037      	b.n	8002fba <MENU_HandleKeys+0x25a>
		} else if (State == ST_WiFi) {
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <MENU_HandleKeys+0x2cc>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d133      	bne.n	8002fba <MENU_HandleKeys+0x25a>
			//TODO DEBUG n TESTING
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d814      	bhi.n	8002f84 <MENU_HandleKeys+0x224>
 8002f5a:	4b35      	ldr	r3, [pc, #212]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <MENU_HandleKeys+0x2dc>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	429a      	cmp	r2, r3
 8002f68:	da0c      	bge.n	8002f84 <MENU_HandleKeys+0x224>
				_optionsRow = LCD_CursorDown();
 8002f6a:	f7fe ff8f 	bl	8001e8c <LCD_CursorDown>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <MENU_HandleKeys+0x2d0>)
 8002f74:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002f76:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e01a      	b.n	8002fba <MENU_HandleKeys+0x25a>
			} else if (_networksIn > 4 && _currentOption != 4) {
 8002f84:	4b2d      	ldr	r3, [pc, #180]	; (800303c <MENU_HandleKeys+0x2dc>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d916      	bls.n	8002fba <MENU_HandleKeys+0x25a>
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d012      	beq.n	8002fba <MENU_HandleKeys+0x25a>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 8002f94:	4b2a      	ldr	r3, [pc, #168]	; (8003040 <MENU_HandleKeys+0x2e0>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b26      	ldr	r3, [pc, #152]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b2d9      	uxtb	r1, r3
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002fa2:	7019      	strb	r1, [r3, #0]
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <MENU_HandleKeys+0x2d4>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	3b04      	subs	r3, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7ff f83b 	bl	8002028 <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fe fd0f 	bl	80019d8 <LCD_SetCursor>
			}
		}

		LED_T(Green);
 8002fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fbe:	4821      	ldr	r0, [pc, #132]	; (8003044 <MENU_HandleKeys+0x2e4>)
 8002fc0:	f006 ff43 	bl	8009e4a <HAL_GPIO_TogglePin>
		return 1;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0c6      	b.n	8003156 <MENU_HandleKeys+0x3f6>

	} Or (LEFT) {
 8002fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fcc:	4816      	ldr	r0, [pc, #88]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002fce:	f006 ff0b 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d054      	beq.n	8003082 <MENU_HandleKeys+0x322>
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f006 fc15 	bl	8009808 <HAL_Delay>
 8002fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fe2:	4811      	ldr	r0, [pc, #68]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002fe4:	f006 ff00 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80b2 	beq.w	8003154 <MENU_HandleKeys+0x3f4>
 8002ff0:	bf00      	nop
 8002ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff6:	480c      	ldr	r0, [pc, #48]	; (8003028 <MENU_HandleKeys+0x2c8>)
 8002ff8:	f006 fef6 	bl	8009de8 <HAL_GPIO_ReadPin>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f7      	bne.n	8002ff2 <MENU_HandleKeys+0x292>
		LCD_WakeScreen();
 8003002:	f7fe fcb3 	bl	800196c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <MENU_HandleKeys+0x2cc>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d11e      	bne.n	800304c <MENU_HandleKeys+0x2ec>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MENU_HandleKeys+0x2e8>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02e      	beq.n	8003074 <MENU_HandleKeys+0x314>
				--_PWD_index;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MENU_HandleKeys+0x2e8>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3b01      	subs	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <MENU_HandleKeys+0x2e8>)
 8003020:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 8003022:	f7fe ff4f 	bl	8001ec4 <LCD_CursorLeft>
 8003026:	e025      	b.n	8003074 <MENU_HandleKeys+0x314>
 8003028:	40021000 	.word	0x40021000
 800302c:	20002d45 	.word	0x20002d45
 8003030:	200004a4 	.word	0x200004a4
 8003034:	200004a5 	.word	0x200004a5
 8003038:	20000000 	.word	0x20000000
 800303c:	200004d4 	.word	0x200004d4
 8003040:	200004a8 	.word	0x200004a8
 8003044:	40020c00 	.word	0x40020c00
 8003048:	200004eb 	.word	0x200004eb
			}
		} else if (State == ST_Options) {
 800304c:	4b43      	ldr	r3, [pc, #268]	; (800315c <MENU_HandleKeys+0x3fc>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <MENU_HandleKeys+0x2fa>
			MENU_Clock();
 8003054:	f7ff fe3c 	bl	8002cd0 <MENU_Clock>
 8003058:	e00c      	b.n	8003074 <MENU_HandleKeys+0x314>
		} else if (State == ST_SetDateTime) {
 800305a:	4b40      	ldr	r3, [pc, #256]	; (800315c <MENU_HandleKeys+0x3fc>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d102      	bne.n	8003068 <MENU_HandleKeys+0x308>
			_CLK_MoveInputLeft();
 8003062:	f7ff fb45 	bl	80026f0 <_CLK_MoveInputLeft>
 8003066:	e005      	b.n	8003074 <MENU_HandleKeys+0x314>
		} else if (State == ST_WiFi) {
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <MENU_HandleKeys+0x3fc>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d101      	bne.n	8003074 <MENU_HandleKeys+0x314>
			MENU_Options();
 8003070:	f7ff fcb6 	bl	80029e0 <MENU_Options>
		}

		LED_T(Blue);
 8003074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003078:	4839      	ldr	r0, [pc, #228]	; (8003160 <MENU_HandleKeys+0x400>)
 800307a:	f006 fee6 	bl	8009e4a <HAL_GPIO_TogglePin>
		return 1;
 800307e:	2301      	movs	r3, #1
 8003080:	e069      	b.n	8003156 <MENU_HandleKeys+0x3f6>

	} Or (RIGHT) {
 8003082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003086:	4837      	ldr	r0, [pc, #220]	; (8003164 <MENU_HandleKeys+0x404>)
 8003088:	f006 feae 	bl	8009de8 <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d060      	beq.n	8003154 <MENU_HandleKeys+0x3f4>
 8003092:	200a      	movs	r0, #10
 8003094:	f006 fbb8 	bl	8009808 <HAL_Delay>
 8003098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800309c:	4831      	ldr	r0, [pc, #196]	; (8003164 <MENU_HandleKeys+0x404>)
 800309e:	f006 fea3 	bl	8009de8 <HAL_GPIO_ReadPin>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d055      	beq.n	8003154 <MENU_HandleKeys+0x3f4>
 80030a8:	bf00      	nop
 80030aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030ae:	482d      	ldr	r0, [pc, #180]	; (8003164 <MENU_HandleKeys+0x404>)
 80030b0:	f006 fe9a 	bl	8009de8 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f7      	bne.n	80030aa <MENU_HandleKeys+0x34a>
		LCD_WakeScreen();
 80030ba:	f7fe fc57 	bl	800196c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <MENU_HandleKeys+0x3fc>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d113      	bne.n	80030ee <MENU_HandleKeys+0x38e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <MENU_HandleKeys+0x408>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <MENU_HandleKeys+0x40c>)
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d038      	beq.n	8003146 <MENU_HandleKeys+0x3e6>
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <MENU_HandleKeys+0x408>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b26      	cmp	r3, #38	; 0x26
 80030da:	d834      	bhi.n	8003146 <MENU_HandleKeys+0x3e6>
				++_PWD_index;
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <MENU_HandleKeys+0x408>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <MENU_HandleKeys+0x408>)
 80030e6:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 80030e8:	f7fe ff1a 	bl	8001f20 <LCD_CursorRight>
 80030ec:	e02b      	b.n	8003146 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_Options) {
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <MENU_HandleKeys+0x3fc>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11a      	bne.n	800312c <MENU_HandleKeys+0x3cc>
			if (_currentOption == 1) {
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <MENU_HandleKeys+0x410>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <MENU_HandleKeys+0x3a4>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 80030fe:	f7ff fd7f 	bl	8002c00 <MENU_OptionsWifiList>
 8003102:	e020      	b.n	8003146 <MENU_HandleKeys+0x3e6>
			} else if (_currentOption == 2) {
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <MENU_HandleKeys+0x410>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d104      	bne.n	8003116 <MENU_HandleKeys+0x3b6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 800310c:	f000 fb3a 	bl	8003784 <NET_WiFiDisconnect>
				MENU_Clock();
 8003110:	f7ff fdde 	bl	8002cd0 <MENU_Clock>
 8003114:	e017      	b.n	8003146 <MENU_HandleKeys+0x3e6>

			} else if (_currentOption == 3) {
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <MENU_HandleKeys+0x410>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d013      	beq.n	8003146 <MENU_HandleKeys+0x3e6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <MENU_HandleKeys+0x410>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b04      	cmp	r3, #4
 8003124:	d10f      	bne.n	8003146 <MENU_HandleKeys+0x3e6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 8003126:	f7ff fc83 	bl	8002a30 <MENU_OptionsSetDateTime>
 800312a:	e00c      	b.n	8003146 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_SetDateTime) {
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <MENU_HandleKeys+0x3fc>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d102      	bne.n	800313a <MENU_HandleKeys+0x3da>
			_CLK_MoveInputRight();
 8003134:	f7ff fa7c 	bl	8002630 <_CLK_MoveInputRight>
 8003138:	e005      	b.n	8003146 <MENU_HandleKeys+0x3e6>
		} else if (State == ST_WiFi) {
 800313a:	4b08      	ldr	r3, [pc, #32]	; (800315c <MENU_HandleKeys+0x3fc>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d101      	bne.n	8003146 <MENU_HandleKeys+0x3e6>
			MENU_PasswdInput();
 8003142:	f7ff fc25 	bl	8002990 <MENU_PasswdInput>
		}

		LED_T(Orange);
 8003146:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <MENU_HandleKeys+0x400>)
 800314c:	f006 fe7d 	bl	8009e4a <HAL_GPIO_TogglePin>
		return 1;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <MENU_HandleKeys+0x3f6>

	} IfEnd;
	return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20002d45 	.word	0x20002d45
 8003160:	40020c00 	.word	0x40020c00
 8003164:	40021000 	.word	0x40021000
 8003168:	200004eb 	.word	0x200004eb
 800316c:	200004ac 	.word	0x200004ac
 8003170:	200004a5 	.word	0x200004a5

08003174 <_NET_ResetBuffer>:
extern ModeEnum Mode;

char _receive[RECEIVE_BUFFER_SIZE];
char _currentIP[IP_SIZE];

void _NET_ResetBuffer(void) {
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	e007      	b.n	8003190 <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 8003180:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <_NET_ResetBuffer+0x30>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3301      	adds	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003196:	dbf3      	blt.n	8003180 <_NET_ResetBuffer+0xc>
	}
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	200004fc 	.word	0x200004fc

080031a8 <_NET_ResetIP>:

void _NET_ResetIP(void) {
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < IP_SIZE; i++) {
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	e007      	b.n	80031c4 <_NET_ResetIP+0x1c>
		_currentIP[i] = 0;
 80031b4:	4a08      	ldr	r2, [pc, #32]	; (80031d8 <_NET_ResetIP+0x30>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IP_SIZE; i++) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3301      	adds	r3, #1
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b0e      	cmp	r3, #14
 80031c8:	ddf4      	ble.n	80031b4 <_NET_ResetIP+0xc>
	}
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	200004ec 	.word	0x200004ec

080031dc <NET_StartIT>:

void NET_StartIT(void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
	_NET_ResetBuffer();
 80031e0:	f7ff ffc8 	bl	8003174 <_NET_ResetBuffer>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &(_receive[0]), 1);
 80031e4:	2201      	movs	r2, #1
 80031e6:	4903      	ldr	r1, [pc, #12]	; (80031f4 <NET_StartIT+0x18>)
 80031e8:	4803      	ldr	r0, [pc, #12]	; (80031f8 <NET_StartIT+0x1c>)
 80031ea:	f009 fbcd 	bl	800c988 <HAL_UART_Receive_IT>
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200004fc 	.word	0x200004fc
 80031f8:	20002cc4 	.word	0x20002cc4

080031fc <NET_AbortIT>:

void NET_AbortIT(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT(&huart3);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <NET_AbortIT+0x10>)
 8003202:	f009 fc17 	bl	800ca34 <HAL_UART_AbortReceive_IT>
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20002cc4 	.word	0x20002cc4

08003210 <NET_GetIndexForPattern>:

int NET_GetIndexForPattern(char pattern[]) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	NET_AbortIT();
 8003218:	f7ff fff0 	bl	80031fc <NET_AbortIT>
	int find = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
	int patternLen = strlen(pattern);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fc ffdf 	bl	80001e4 <strlen>
 8003226:	4603      	mov	r3, r0
 8003228:	60fb      	str	r3, [r7, #12]

	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e018      	b.n	8003262 <NET_GetIndexForPattern+0x52>
		if (find == patternLen) {
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d101      	bne.n	800323c <NET_GetIndexForPattern+0x2c>
			return cursor;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	e018      	b.n	800326e <NET_GetIndexForPattern+0x5e>
		}

		if (_receive[cursor] == pattern[find]) {
 800323c:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <NET_GetIndexForPattern+0x68>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	440b      	add	r3, r1
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d103      	bne.n	8003258 <NET_GetIndexForPattern+0x48>
			find++;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e001      	b.n	800325c <NET_GetIndexForPattern+0x4c>
		} else {
			find = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	3301      	adds	r3, #1
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003268:	dbe2      	blt.n	8003230 <NET_GetIndexForPattern+0x20>
		}
	}
	return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200004fc 	.word	0x200004fc

0800327c <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 8003288:	f7ff ff74 	bl	8003174 <_NET_ResetBuffer>
	size_t len = strlen(command);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7fc ffa9 	bl	80001e4 <strlen>
 8003292:	6178      	str	r0, [r7, #20]

	NET_AbortIT();
 8003294:	f7ff ffb2 	bl	80031fc <NET_AbortIT>

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	b29a      	uxth	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	68f9      	ldr	r1, [r7, #12]
 80032a0:	480e      	ldr	r0, [pc, #56]	; (80032dc <_NET_SendCommand+0x60>)
 80032a2:	f009 fa32 	bl	800c70a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 80032a6:	2301      	movs	r3, #1
 80032a8:	2202      	movs	r2, #2
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <_NET_SendCommand+0x64>)
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <_NET_SendCommand+0x60>)
 80032ae:	f009 fa2c 	bl	800c70a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80032b8:	490a      	ldr	r1, [pc, #40]	; (80032e4 <_NET_SendCommand+0x68>)
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <_NET_SendCommand+0x60>)
 80032bc:	f009 fabe 	bl	800c83c <HAL_UART_Receive>
			rTimeout);

	/* szukaj odpowiedzi 'OK\r\n' */
	if (NET_GetIndexForPattern(OK_PATTERN) != -1) {
 80032c0:	4809      	ldr	r0, [pc, #36]	; (80032e8 <_NET_SendCommand+0x6c>)
 80032c2:	f7ff ffa5 	bl	8003210 <NET_GetIndexForPattern>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d001      	beq.n	80032d2 <_NET_SendCommand+0x56>
		return 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <_NET_SendCommand+0x58>
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 80032d2:	2301      	movs	r3, #1
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20002cc4 	.word	0x20002cc4
 80032e0:	0800fd50 	.word	0x0800fd50
 80032e4:	200004fc 	.word	0x200004fc
 80032e8:	0800fd54 	.word	0x0800fd54

080032ec <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 80032f0:	e002      	b.n	80032f8 <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 80032f2:	2001      	movs	r0, #1
 80032f4:	f006 fa88 	bl	8009808 <HAL_Delay>
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	2101      	movs	r1, #1
 80032fc:	480a      	ldr	r0, [pc, #40]	; (8003328 <_NET_SetClientDConnMode+0x3c>)
 80032fe:	f7ff ffbd 	bl	800327c <_NET_SendCommand>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f4      	bne.n	80032f2 <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8003308:	e002      	b.n	8003310 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 800330a:	2001      	movs	r0, #1
 800330c:	f006 fa7c 	bl	8009808 <HAL_Delay>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8003310:	2264      	movs	r2, #100	; 0x64
 8003312:	2105      	movs	r1, #5
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <_NET_SetClientDConnMode+0x40>)
 8003316:	f7ff ffb1 	bl	800327c <_NET_SendCommand>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f4      	bne.n	800330a <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8003320:	f000 fa30 	bl	8003784 <NET_WiFiDisconnect>
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	0800fd5c 	.word	0x0800fd5c
 800332c:	0800fd64 	.word	0x0800fd64

08003330 <NET_Init>:

void NET_Init(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8003334:	f7ff ffda 	bl	80032ec <_NET_SetClientDConnMode>
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8003342:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003346:	2101      	movs	r1, #1
 8003348:	4894      	ldr	r0, [pc, #592]	; (800359c <NET_RequestNetworkList+0x260>)
 800334a:	f7ff ff97 	bl	800327c <_NET_SendCommand>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 811e 	bne.w	8003592 <NET_RequestNetworkList+0x256>
		int index = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	e0f8      	b.n	8003552 <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8003360:	4a8f      	ldr	r2, [pc, #572]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b28      	cmp	r3, #40	; 0x28
 800336a:	f040 80e4 	bne.w	8003536 <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	60ba      	str	r2, [r7, #8]
 8003374:	4a8a      	ldr	r2, [pc, #552]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003376:	2101      	movs	r1, #1
 8003378:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 800337a:	4a89      	ldr	r2, [pc, #548]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	3b30      	subs	r3, #48	; 0x30
 8003384:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b05      	cmp	r3, #5
 800338a:	f000 80e8 	beq.w	800355e <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 800338e:	e005      	b.n	800339c <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	60ba      	str	r2, [r7, #8]
 8003396:	4a82      	ldr	r2, [pc, #520]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003398:	2101      	movs	r1, #1
 800339a:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 800339c:	4a80      	ldr	r2, [pc, #512]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b22      	cmp	r3, #34	; 0x22
 80033a6:	d1f3      	bne.n	8003390 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	60ba      	str	r2, [r7, #8]
 80033ae:	4a7c      	ldr	r2, [pc, #496]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 80033b4:	e00e      	b.n	80033d4 <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	60fa      	str	r2, [r7, #12]
 80033bc:	4978      	ldr	r1, [pc, #480]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	440a      	add	r2, r1
 80033c2:	7811      	ldrb	r1, [r2, #0]
 80033c4:	4a76      	ldr	r2, [pc, #472]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033c6:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	60ba      	str	r2, [r7, #8]
 80033ce:	4a74      	ldr	r2, [pc, #464]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033d0:	2101      	movs	r1, #1
 80033d2:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 80033d4:	4a72      	ldr	r2, [pc, #456]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b22      	cmp	r3, #34	; 0x22
 80033de:	d1ea      	bne.n	80033b6 <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 80033e0:	e005      	b.n	80033ee <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	4a6d      	ldr	r2, [pc, #436]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033ea:	2101      	movs	r1, #1
 80033ec:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 80033ee:	4a6c      	ldr	r2, [pc, #432]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b29      	cmp	r3, #41	; 0x29
 80033f8:	d1f3      	bne.n	80033e2 <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = NETWORK_SEPARATOR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003402:	215c      	movs	r1, #92	; 0x5c
 8003404:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	60ba      	str	r2, [r7, #8]
 800340c:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800340e:	2101      	movs	r1, #1
 8003410:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d118      	bne.n	800344a <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	60fa      	str	r2, [r7, #12]
 800341e:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003420:	214f      	movs	r1, #79	; 0x4f
 8003422:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	60fa      	str	r2, [r7, #12]
 800342a:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800342c:	2150      	movs	r1, #80	; 0x50
 800342e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	60fa      	str	r2, [r7, #12]
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003438:	2145      	movs	r1, #69	; 0x45
 800343a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	60fa      	str	r2, [r7, #12]
 8003442:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003444:	214e      	movs	r1, #78	; 0x4e
 8003446:	54d1      	strb	r1, [r2, r3]
 8003448:	e06e      	b.n	8003528 <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d118      	bne.n	8003482 <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	60fa      	str	r2, [r7, #12]
 8003456:	4a52      	ldr	r2, [pc, #328]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003458:	2157      	movs	r1, #87	; 0x57
 800345a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	60fa      	str	r2, [r7, #12]
 8003462:	4a4f      	ldr	r2, [pc, #316]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003464:	2145      	movs	r1, #69	; 0x45
 8003466:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	60fa      	str	r2, [r7, #12]
 800346e:	4a4c      	ldr	r2, [pc, #304]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003470:	2150      	movs	r1, #80	; 0x50
 8003472:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	60fa      	str	r2, [r7, #12]
 800347a:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800347c:	2120      	movs	r1, #32
 800347e:	54d1      	strb	r1, [r2, r3]
 8003480:	e052      	b.n	8003528 <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d118      	bne.n	80034ba <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	60fa      	str	r2, [r7, #12]
 800348e:	4a44      	ldr	r2, [pc, #272]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003490:	2157      	movs	r1, #87	; 0x57
 8003492:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60fa      	str	r2, [r7, #12]
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800349c:	2150      	movs	r1, #80	; 0x50
 800349e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60fa      	str	r2, [r7, #12]
 80034a6:	4a3e      	ldr	r2, [pc, #248]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034a8:	2141      	movs	r1, #65	; 0x41
 80034aa:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	60fa      	str	r2, [r7, #12]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034b4:	2120      	movs	r1, #32
 80034b6:	54d1      	strb	r1, [r2, r3]
 80034b8:	e036      	b.n	8003528 <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d118      	bne.n	80034f2 <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	60fa      	str	r2, [r7, #12]
 80034c6:	4a36      	ldr	r2, [pc, #216]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034c8:	2157      	movs	r1, #87	; 0x57
 80034ca:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	60fa      	str	r2, [r7, #12]
 80034d2:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034d4:	2150      	movs	r1, #80	; 0x50
 80034d6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	60fa      	str	r2, [r7, #12]
 80034de:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034e0:	2141      	movs	r1, #65	; 0x41
 80034e2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	60fa      	str	r2, [r7, #12]
 80034ea:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <NET_RequestNetworkList+0x264>)
 80034ec:	2132      	movs	r1, #50	; 0x32
 80034ee:	54d1      	strb	r1, [r2, r3]
 80034f0:	e01a      	b.n	8003528 <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d117      	bne.n	8003528 <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60fa      	str	r2, [r7, #12]
 80034fe:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003500:	214d      	movs	r1, #77	; 0x4d
 8003502:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60fa      	str	r2, [r7, #12]
 800350a:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800350c:	2149      	movs	r1, #73	; 0x49
 800350e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	60fa      	str	r2, [r7, #12]
 8003516:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003518:	2158      	movs	r1, #88	; 0x58
 800351a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	60fa      	str	r2, [r7, #12]
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003524:	2144      	movs	r1, #68	; 0x44
 8003526:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	60fa      	str	r2, [r7, #12]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003530:	213b      	movs	r1, #59	; 0x3b
 8003532:	54d1      	strb	r1, [r2, r3]
				continue;
 8003534:	e00a      	b.n	800354c <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 8003536:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4413      	add	r3, r2
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00f      	beq.n	8003562 <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4413      	add	r3, r2
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003558:	f6ff af02 	blt.w	8003360 <NET_RequestNetworkList+0x24>
 800355c:	e002      	b.n	8003564 <NET_RequestNetworkList+0x228>
					break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <NET_RequestNetworkList+0x228>
				break;
 8003562:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8003564:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	e007      	b.n	800357c <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 800356c:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <NET_RequestNetworkList+0x264>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3b01      	subs	r3, #1
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	429a      	cmp	r2, r3
 8003582:	daf3      	bge.n	800356c <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <NET_RequestNetworkList+0x252>
			return NULL;
 800358a:	2300      	movs	r3, #0
 800358c:	e002      	b.n	8003594 <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <NET_RequestNetworkList+0x264>)
 8003590:	e000      	b.n	8003594 <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	0800fd70 	.word	0x0800fd70
 80035a0:	200004fc 	.word	0x200004fc

080035a4 <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b0a0      	sub	sp, #128	; 0x80
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	int ssidIndex = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	67fb      	str	r3, [r7, #124]	; 0x7c
	int cmdIndex = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	67bb      	str	r3, [r7, #120]	; 0x78
	char cmd[100] = { 0 };
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	2264      	movs	r2, #100	; 0x64
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f00a f8d8 	bl	800d774 <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 80035c4:	2300      	movs	r3, #0
 80035c6:	677b      	str	r3, [r7, #116]	; 0x74
 80035c8:	e00a      	b.n	80035e0 <NET_ConnectToWiFi+0x3c>
		while (_receive[ssidIndex++] != ';')
 80035ca:	bf00      	nop
 80035cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035d2:	4a37      	ldr	r2, [pc, #220]	; (80036b0 <NET_ConnectToWiFi+0x10c>)
 80035d4:	5cd3      	ldrb	r3, [r2, r3]
 80035d6:	2b3b      	cmp	r3, #59	; 0x3b
 80035d8:	d1f8      	bne.n	80035cc <NET_ConnectToWiFi+0x28>
	for (int i = 0; i < network - 1; i++) {
 80035da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035dc:	3301      	adds	r3, #1
 80035de:	677b      	str	r3, [r7, #116]	; 0x74
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035e6:	429a      	cmp	r2, r3
 80035e8:	dbef      	blt.n	80035ca <NET_ConnectToWiFi+0x26>
			;
	}

	strcpy(cmd, CONN_TO_NETWORK);
 80035ea:	f107 030c 	add.w	r3, r7, #12
 80035ee:	4a31      	ldr	r2, [pc, #196]	; (80036b4 <NET_ConnectToWiFi+0x110>)
 80035f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035f2:	c303      	stmia	r3!, {r0, r1}
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	3302      	adds	r3, #2
 80035f8:	0c12      	lsrs	r2, r2, #16
 80035fa:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(CONN_TO_NETWORK);
 80035fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035fe:	330a      	adds	r3, #10
 8003600:	67bb      	str	r3, [r7, #120]	; 0x78

	for (int i = 0;; i++) {
 8003602:	2300      	movs	r3, #0
 8003604:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == NETWORK_SEPARATOR) {
 8003606:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <NET_ConnectToWiFi+0x10c>)
 8003608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b5c      	cmp	r3, #92	; 0x5c
 8003610:	d010      	beq.n	8003634 <NET_ConnectToWiFi+0x90>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 8003612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003614:	1c53      	adds	r3, r2, #1
 8003616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	67b9      	str	r1, [r7, #120]	; 0x78
 800361e:	4924      	ldr	r1, [pc, #144]	; (80036b0 <NET_ConnectToWiFi+0x10c>)
 8003620:	5c8a      	ldrb	r2, [r1, r2]
 8003622:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003626:	440b      	add	r3, r1
 8003628:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0;; i++) {
 800362c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800362e:	3301      	adds	r3, #1
 8003630:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == NETWORK_SEPARATOR) {
 8003632:	e7e8      	b.n	8003606 <NET_ConnectToWiFi+0x62>
			break;
 8003634:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc fdd2 	bl	80001e4 <strlen>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	4413      	add	r3, r2
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <NET_ConnectToWiFi+0x114>)
 800364c:	6810      	ldr	r0, [r2, #0]
 800364e:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f00a fd10 	bl	800e07c <strcat>
	strcat(cmd, "\"");
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc fdbf 	bl	80001e4 <strlen>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4413      	add	r3, r2
 8003670:	4912      	ldr	r1, [pc, #72]	; (80036bc <NET_ConnectToWiFi+0x118>)
 8003672:	461a      	mov	r2, r3
 8003674:	460b      	mov	r3, r1
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003682:	210a      	movs	r1, #10
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fdf9 	bl	800327c <_NET_SendCommand>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <NET_ConnectToWiFi+0xfa>
		Mode = MD_ClientConn;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <NET_ConnectToWiFi+0x11c>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
		NET_HTTPSetup();
 8003696:	f000 f88d 	bl	80037b4 <NET_HTTPSetup>

		return 0;
 800369a:	2300      	movs	r3, #0
 800369c:	e003      	b.n	80036a6 <NET_ConnectToWiFi+0x102>
	}
	Mode = MD_LostHost;
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <NET_ConnectToWiFi+0x11c>)
 80036a0:	2203      	movs	r2, #3
 80036a2:	701a      	strb	r2, [r3, #0]
	return 1;
 80036a4:	2301      	movs	r3, #1
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3780      	adds	r7, #128	; 0x80
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200004fc 	.word	0x200004fc
 80036b4:	0800fd7c 	.word	0x0800fd7c
 80036b8:	0800fd88 	.word	0x0800fd88
 80036bc:	0800fd8c 	.word	0x0800fd8c
 80036c0:	20002d44 	.word	0x20002d44

080036c4 <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost)
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <NET_GetConnInfo+0xa8>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <NET_GetConnInfo+0x16>
 80036d2:	4b26      	ldr	r3, [pc, #152]	; (800376c <NET_GetConnInfo+0xa8>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d142      	bne.n	8003760 <NET_GetConnInfo+0x9c>
			&& _NET_SendCommand(SHOW_IP, 5, 100) == 0) {
 80036da:	2264      	movs	r2, #100	; 0x64
 80036dc:	2105      	movs	r1, #5
 80036de:	4824      	ldr	r0, [pc, #144]	; (8003770 <NET_GetConnInfo+0xac>)
 80036e0:	f7ff fdcc 	bl	800327c <_NET_SendCommand>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d13a      	bne.n	8003760 <NET_GetConnInfo+0x9c>
		int cursor = NET_GetIndexForPattern(CLIENT_IP_PATTERN);
 80036ea:	4822      	ldr	r0, [pc, #136]	; (8003774 <NET_GetConnInfo+0xb0>)
 80036ec:	f7ff fd90 	bl	8003210 <NET_GetIndexForPattern>
 80036f0:	6078      	str	r0, [r7, #4]
		int index = 0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]

		_NET_ResetIP();
 80036f6:	f7ff fd57 	bl	80031a8 <_NET_ResetIP>
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 80036fa:	e012      	b.n	8003722 <NET_GetConnInfo+0x5e>
			_currentIP[index++] = _receive[cursor++];
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	1c53      	adds	r3, r2, #1
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	6039      	str	r1, [r7, #0]
 8003708:	491b      	ldr	r1, [pc, #108]	; (8003778 <NET_GetConnInfo+0xb4>)
 800370a:	5c89      	ldrb	r1, [r1, r2]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <NET_GetConnInfo+0xb8>)
 800370e:	54d1      	strb	r1, [r2, r3]

			if (index - 1 > 15) {
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3b01      	subs	r3, #1
 8003714:	2b0f      	cmp	r3, #15
 8003716:	dd04      	ble.n	8003722 <NET_GetConnInfo+0x5e>
				Mode = MD_LostHost;
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <NET_GetConnInfo+0xa8>)
 800371a:	2203      	movs	r2, #3
 800371c:	701a      	strb	r2, [r3, #0]
				return NULL; /* to nie jest adres ip */
 800371e:	2300      	movs	r3, #0
 8003720:	e01f      	b.n	8003762 <NET_GetConnInfo+0x9e>
		while (_receive[cursor] != '"') {
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <NET_GetConnInfo+0xb4>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b22      	cmp	r3, #34	; 0x22
 800372c:	d1e6      	bne.n	80036fc <NET_GetConnInfo+0x38>
			}
		}

		if (strcmp("0.0.0.0", _currentIP) == 0) {
 800372e:	4913      	ldr	r1, [pc, #76]	; (800377c <NET_GetConnInfo+0xb8>)
 8003730:	4813      	ldr	r0, [pc, #76]	; (8003780 <NET_GetConnInfo+0xbc>)
 8003732:	f7fc fd4d 	bl	80001d0 <strcmp>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <NET_GetConnInfo+0x82>
			Mode = MD_LostHost;
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <NET_GetConnInfo+0xa8>)
 800373e:	2203      	movs	r2, #3
 8003740:	701a      	strb	r2, [r3, #0]
			return NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	e00d      	b.n	8003762 <NET_GetConnInfo+0x9e>
		}
		/* jesli uda sie nawiazac polaczenie pozniej, ustaw serwer */
		if (Mode == MD_LostHost) {
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <NET_GetConnInfo+0xa8>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d104      	bne.n	8003758 <NET_GetConnInfo+0x94>
			NET_HTTPSetup();
 800374e:	f000 f831 	bl	80037b4 <NET_HTTPSetup>
			Mode = MD_ClientConn;
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <NET_GetConnInfo+0xa8>)
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
		}

		/* wznow nasluchiwanie */
		NET_StartIT();
 8003758:	f7ff fd40 	bl	80031dc <NET_StartIT>
		return (char*) _currentIP;
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <NET_GetConnInfo+0xb8>)
 800375e:	e000      	b.n	8003762 <NET_GetConnInfo+0x9e>
	}

	return NULL;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20002d44 	.word	0x20002d44
 8003770:	0800fd90 	.word	0x0800fd90
 8003774:	0800fd9c 	.word	0x0800fd9c
 8003778:	200004fc 	.word	0x200004fc
 800377c:	200004ec 	.word	0x200004ec
 8003780:	0800fda4 	.word	0x0800fda4

08003784 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 8003788:	e002      	b.n	8003790 <NET_WiFiDisconnect+0xc>
		HAL_Delay(10);
 800378a:	200a      	movs	r0, #10
 800378c:	f006 f83c 	bl	8009808 <HAL_Delay>
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 8003790:	2264      	movs	r2, #100	; 0x64
 8003792:	2105      	movs	r1, #5
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <NET_WiFiDisconnect+0x28>)
 8003796:	f7ff fd71 	bl	800327c <_NET_SendCommand>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f4      	bne.n	800378a <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <NET_WiFiDisconnect+0x2c>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
	return 0;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	0800fdac 	.word	0x0800fdac
 80037b0:	20002d44 	.word	0x20002d44

080037b4 <NET_HTTPSetup>:

uint8_t NET_HTTPSetup(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80037b8:	e002      	b.n	80037c0 <NET_HTTPSetup+0xc>
		HAL_Delay(10);
 80037ba:	200a      	movs	r0, #10
 80037bc:	f006 f824 	bl	8009808 <HAL_Delay>
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80037c0:	2264      	movs	r2, #100	; 0x64
 80037c2:	2105      	movs	r1, #5
 80037c4:	480a      	ldr	r0, [pc, #40]	; (80037f0 <NET_HTTPSetup+0x3c>)
 80037c6:	f7ff fd59 	bl	800327c <_NET_SendCommand>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f4      	bne.n	80037ba <NET_HTTPSetup+0x6>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 80037d0:	e002      	b.n	80037d8 <NET_HTTPSetup+0x24>
		HAL_Delay(10);
 80037d2:	200a      	movs	r0, #10
 80037d4:	f006 f818 	bl	8009808 <HAL_Delay>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 80037d8:	2264      	movs	r2, #100	; 0x64
 80037da:	2105      	movs	r1, #5
 80037dc:	4805      	ldr	r0, [pc, #20]	; (80037f4 <NET_HTTPSetup+0x40>)
 80037de:	f7ff fd4d 	bl	800327c <_NET_SendCommand>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f4      	bne.n	80037d2 <NET_HTTPSetup+0x1e>

	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	0800fdb8 	.word	0x0800fdb8
 80037f4:	0800fdc4 	.word	0x0800fdc4

080037f8 <NET_HandleUART_IT>:

void NET_HandleUART_IT(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
	/* pobierz caly bufor */
	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE, REQUEST_RECEIVE_TIMEOUT);
 80037fe:	2364      	movs	r3, #100	; 0x64
 8003800:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003804:	4924      	ldr	r1, [pc, #144]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003806:	4825      	ldr	r0, [pc, #148]	; (800389c <NET_HandleUART_IT+0xa4>)
 8003808:	f009 f818 	bl	800c83c <HAL_UART_Receive>

	int index = NET_GetIndexForPattern(REQUEST_RECIEVED_PATTERN);
 800380c:	4824      	ldr	r0, [pc, #144]	; (80038a0 <NET_HandleUART_IT+0xa8>)
 800380e:	f7ff fcff 	bl	8003210 <NET_GetIndexForPattern>
 8003812:	60f8      	str	r0, [r7, #12]
	if (index != -1) {
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d036      	beq.n	800388a <NET_HandleUART_IT+0x92>
		char connID = _receive[index++];
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	60fa      	str	r2, [r7, #12]
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	71fb      	strb	r3, [r7, #7]
		/* przesun zadanie o przeanalizowane znaki */
		while (_receive[index++] != ':')
 8003828:	bf00      	nop
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	4a19      	ldr	r2, [pc, #100]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	2b3a      	cmp	r3, #58	; 0x3a
 8003836:	d1f8      	bne.n	800382a <NET_HandleUART_IT+0x32>
			;
		/* sformuluj zadanie http i podaj wyzej */
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e01c      	b.n	8003878 <NET_HandleUART_IT+0x80>
			if (index > RECEIVE_BUFFER_SIZE || _receive[index] == 0) {
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003844:	dc05      	bgt.n	8003852 <NET_HandleUART_IT+0x5a>
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <NET_HandleUART_IT+0x66>
				_receive[i] = 0;
 8003852:	4a11      	ldr	r2, [pc, #68]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4413      	add	r3, r2
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e009      	b.n	8003872 <NET_HandleUART_IT+0x7a>
			} else {
				_receive[i] = _receive[index++];
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	60fa      	str	r2, [r7, #12]
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003866:	5cd1      	ldrb	r1, [r2, r3]
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <NET_HandleUART_IT+0xa0>)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	4413      	add	r3, r2
 800386e:	460a      	mov	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	3301      	adds	r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800387e:	dbde      	blt.n	800383e <NET_HandleUART_IT+0x46>
			}
		}

		HTTP_HandleRequest((char*) _receive, connID);
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	4619      	mov	r1, r3
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <NET_HandleUART_IT+0xa0>)
 8003886:	f7fd fc01 	bl	800108c <HTTP_HandleRequest>
	}

	NET_StartIT();
 800388a:	f7ff fca7 	bl	80031dc <NET_StartIT>
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200004fc 	.word	0x200004fc
 800389c:	20002cc4 	.word	0x20002cc4
 80038a0:	0800fdd8 	.word	0x0800fdd8

080038a4 <NET_SendTCPData>:

#define __CMD_SIZE 20
#define __resetCmd() for(int i=0;i<__CMD_SIZE;i++)cmd[i]=0

void NET_SendTCPData(char connID, char *data) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE ];
	uint32_t len = strlen(data), index = 0;
 80038b0:	6838      	ldr	r0, [r7, #0]
 80038b2:	f7fc fc97 	bl	80001e4 <strlen>
 80038b6:	6238      	str	r0, [r7, #32]
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (len > index) {
 80038bc:	e046      	b.n	800394c <NET_SendTCPData+0xa8>
		/* dziel dane na paczki i odsylaj dokument */
		int toSend = (len - index > PACKET_SIZE) ? PACKET_SIZE : len - index;
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80038c8:	bf28      	it	cs
 80038ca:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 80038ce:	61fb      	str	r3, [r7, #28]

		__resetCmd();
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d4:	e008      	b.n	80038e8 <NET_SendTCPData+0x44>
 80038d6:	f107 0208 	add.w	r2, r7, #8
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	3301      	adds	r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	2b13      	cmp	r3, #19
 80038ec:	ddf3      	ble.n	80038d6 <NET_SendTCPData+0x32>
		sprintf(cmd, SEND_DATA_TO_CONN("%c", "%d"), connID, toSend);
 80038ee:	79fa      	ldrb	r2, [r7, #7]
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4919      	ldr	r1, [pc, #100]	; (800395c <NET_SendTCPData+0xb8>)
 80038f8:	f00a fba0 	bl	800e03c <siprintf>
		if (_NET_SendCommand(cmd, 5, 100) != 0) {
 80038fc:	f107 0308 	add.w	r3, r7, #8
 8003900:	2264      	movs	r2, #100	; 0x64
 8003902:	2105      	movs	r1, #5
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fcb9 	bl	800327c <_NET_SendCommand>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <NET_SendTCPData+0x72>
			HAL_Delay(10 * PACKET_INTERVAL);
 8003910:	20c8      	movs	r0, #200	; 0xc8
 8003912:	f005 ff79 	bl	8009808 <HAL_Delay>
		}

		HAL_Delay(5 * PACKET_INTERVAL);
 8003916:	2064      	movs	r0, #100	; 0x64
 8003918:	f005 ff76 	bl	8009808 <HAL_Delay>

		for (int i = 0; i < toSend; i++) {
 800391c:	2300      	movs	r3, #0
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e00c      	b.n	800393c <NET_SendTCPData+0x98>
			HAL_UART_Transmit(&huart3, (uint8_t*) &(data[index++]), 1, 100);
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	18d1      	adds	r1, r2, r3
 800392c:	2364      	movs	r3, #100	; 0x64
 800392e:	2201      	movs	r2, #1
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <NET_SendTCPData+0xbc>)
 8003932:	f008 feea 	bl	800c70a <HAL_UART_Transmit>
		for (int i = 0; i < toSend; i++) {
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	3301      	adds	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbee      	blt.n	8003922 <NET_SendTCPData+0x7e>
		}

		HAL_Delay(20 * PACKET_INTERVAL);
 8003944:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003948:	f005 ff5e 	bl	8009808 <HAL_Delay>
	while (len > index) {
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d8b4      	bhi.n	80038be <NET_SendTCPData+0x1a>
	}
}
 8003954:	bf00      	nop
 8003956:	3730      	adds	r7, #48	; 0x30
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	0800fde0 	.word	0x0800fde0
 8003960:	20002cc4 	.word	0x20002cc4

08003964 <NET_CloseConnSignal>:

void NET_CloseConnSignal(char connID) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE] = {0};
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	611a      	str	r2, [r3, #16]

	sprintf(cmd, CLOSE_CONN("%c"), connID);
 800397e:	79fa      	ldrb	r2, [r7, #7]
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <NET_CloseConnSignal+0x40>)
 8003986:	4618      	mov	r0, r3
 8003988:	f00a fb58 	bl	800e03c <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	2105      	movs	r1, #5
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fc71 	bl	800327c <_NET_SendCommand>
}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	0800fdf4 	.word	0x0800fdf4

080039a8 <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <RGB_Init+0x2c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <RGB_Init+0x30>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <RGB_Init+0x34>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
	_state = 0;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <RGB_Init+0x38>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <RGB_Init+0x3c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200006f8 	.word	0x200006f8
 80039d8:	200006f0 	.word	0x200006f0
 80039dc:	200006fc 	.word	0x200006fc
 80039e0:	200006f4 	.word	0x200006f4
 80039e4:	20000700 	.word	0x20000700

080039e8 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <_RGB_UpdateRegisters+0x80>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f4:	d303      	bcc.n	80039fe <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <_RGB_UpdateRegisters+0x80>)
 80039f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039fc:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <_RGB_UpdateRegisters+0x84>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a06:	d303      	bcc.n	8003a10 <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 8003a08:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <_RGB_UpdateRegisters+0x84>)
 8003a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a0e:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 8003a10:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <_RGB_UpdateRegisters+0x88>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a18:	d303      	bcc.n	8003a22 <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <_RGB_UpdateRegisters+0x88>)
 8003a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a20:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 8003a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <_RGB_UpdateRegisters+0x80>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8003a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <_RGB_UpdateRegisters+0x84>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8003a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <_RGB_UpdateRegisters+0x88>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <_RGB_UpdateRegisters+0x8c>)
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	3301      	adds	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <_RGB_UpdateRegisters+0x8c>)
 8003a4a:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <_RGB_UpdateRegisters+0x8c>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8003a54:	d902      	bls.n	8003a5c <_RGB_UpdateRegisters+0x74>
		_state = 0;
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <_RGB_UpdateRegisters+0x8c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	200006f8 	.word	0x200006f8
 8003a6c:	200006f0 	.word	0x200006f0
 8003a70:	200006fc 	.word	0x200006fc
 8003a74:	200006f4 	.word	0x200006f4

08003a78 <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <_RGB_SetWhite+0x2c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <_RGB_SetWhite+0x30>)
 8003a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a88:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <_RGB_SetWhite+0x34>)
 8003a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a90:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003a92:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <_RGB_SetWhite+0x38>)
 8003a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a98:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003a9a:	f7ff ffa5 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000700 	.word	0x20000700
 8003aa8:	200006f8 	.word	0x200006f8
 8003aac:	200006f0 	.word	0x200006f0
 8003ab0:	200006fc 	.word	0x200006fc

08003ab4 <_RGB_SetRed>:

void _RGB_SetRed(void) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <_RGB_SetRed+0x28>)
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <_RGB_SetRed+0x2c>)
 8003ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ac4:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <_RGB_SetRed+0x30>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <_RGB_SetRed+0x34>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003ad2:	f7ff ff89 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000700 	.word	0x20000700
 8003ae0:	200006f8 	.word	0x200006f8
 8003ae4:	200006f0 	.word	0x200006f0
 8003ae8:	200006fc 	.word	0x200006fc

08003aec <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_RGB_SetGreen+0x28>)
 8003af2:	2203      	movs	r2, #3
 8003af4:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <_RGB_SetGreen+0x2c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <_RGB_SetGreen+0x30>)
 8003afe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b02:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <_RGB_SetGreen+0x34>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003b0a:	f7ff ff6d 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000700 	.word	0x20000700
 8003b18:	200006f8 	.word	0x200006f8
 8003b1c:	200006f0 	.word	0x200006f0
 8003b20:	200006fc 	.word	0x200006fc

08003b24 <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <_RGB_SetBlue+0x28>)
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <_RGB_SetBlue+0x2c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <_RGB_SetBlue+0x30>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <_RGB_SetBlue+0x34>)
 8003b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b40:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003b42:	f7ff ff51 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000700 	.word	0x20000700
 8003b50:	200006f8 	.word	0x200006f8
 8003b54:	200006f0 	.word	0x200006f0
 8003b58:	200006fc 	.word	0x200006fc

08003b5c <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <_RGB_SetBlack+0x24>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <_RGB_SetBlack+0x28>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <_RGB_SetBlack+0x2c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <_RGB_SetBlack+0x30>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003b78:	f7ff ff36 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000700 	.word	0x20000700
 8003b84:	200006f8 	.word	0x200006f8
 8003b88:	200006f0 	.word	0x200006f0
 8003b8c:	200006fc 	.word	0x200006fc

08003b90 <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 8003b94:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <_RGB_Rainbow+0x10c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	d002      	beq.n	8003ba2 <_RGB_Rainbow+0x12>
		_state = 0;
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <_RGB_Rainbow+0x10c>)
 8003ba4:	2209      	movs	r2, #9
 8003ba6:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 8003ba8:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f240 124d 	movw	r2, #333	; 0x14d
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d010      	beq.n	8003bd6 <_RGB_Rainbow+0x46>
 8003bb4:	f240 229a 	movw	r2, #666	; 0x29a
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d017      	beq.n	8003bec <_RGB_Rainbow+0x5c>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d120      	bne.n	8003c02 <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 8003bc0:	4b38      	ldr	r3, [pc, #224]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003bc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bc6:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003bc8:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
		break;
 8003bd4:	e05e      	b.n	8003c94 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003bde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003be2:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003be4:	4b31      	ldr	r3, [pc, #196]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
		break;
 8003bea:	e053      	b.n	8003c94 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bfe:	601a      	str	r2, [r3, #0]
		break;
 8003c00:	e048      	b.n	8003c94 <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d012      	beq.n	8003c30 <_RGB_Rainbow+0xa0>
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8003c12:	d80d      	bhi.n	8003c30 <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b03      	subs	r3, #3
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003c1c:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 8003c1e:	4b22      	ldr	r3, [pc, #136]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3303      	adds	r3, #3
 8003c24:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003c26:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e031      	b.n	8003c94 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8003c38:	d313      	bcc.n	8003c62 <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	f240 2299 	movw	r2, #665	; 0x299
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d80d      	bhi.n	8003c62 <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3b03      	subs	r3, #3
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003c54:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3303      	adds	r3, #3
 8003c5c:	4a13      	ldr	r2, [pc, #76]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e018      	b.n	8003c94 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	f240 229a 	movw	r2, #666	; 0x29a
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d912      	bls.n	8003c94 <_RGB_Rainbow+0x104>
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <_RGB_Rainbow+0x110>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d80c      	bhi.n	8003c94 <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3303      	adds	r3, #3
 8003c80:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <_RGB_Rainbow+0x114>)
 8003c82:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <_RGB_Rainbow+0x118>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b03      	subs	r3, #3
 8003c90:	4a06      	ldr	r2, [pc, #24]	; (8003cac <_RGB_Rainbow+0x11c>)
 8003c92:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 8003c94:	f7ff fea8 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000700 	.word	0x20000700
 8003ca0:	200006f4 	.word	0x200006f4
 8003ca4:	200006f8 	.word	0x200006f8
 8003ca8:	200006f0 	.word	0x200006f0
 8003cac:	200006fc 	.word	0x200006fc

08003cb0 <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <_RGB_BlinkRed+0x5c>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d002      	beq.n	8003cc2 <_RGB_BlinkRed+0x12>
		_state = 0;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <_RGB_BlinkRed+0x60>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <_RGB_BlinkRed+0x5c>)
 8003cc4:	2206      	movs	r2, #6
 8003cc6:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <_RGB_BlinkRed+0x64>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <_RGB_BlinkRed+0x68>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <_RGB_BlinkRed+0x60>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <_RGB_BlinkRed+0x6c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e00f      	b.n	8003d04 <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <_RGB_BlinkRed+0x60>)
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003cec:	d805      	bhi.n	8003cfa <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <_RGB_BlinkRed+0x6c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <_RGB_BlinkRed+0x6c>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e004      	b.n	8003d04 <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <_RGB_BlinkRed+0x6c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3b02      	subs	r3, #2
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <_RGB_BlinkRed+0x6c>)
 8003d02:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003d04:	f7ff fe70 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000700 	.word	0x20000700
 8003d10:	200006f4 	.word	0x200006f4
 8003d14:	200006f0 	.word	0x200006f0
 8003d18:	200006fc 	.word	0x200006fc
 8003d1c:	200006f8 	.word	0x200006f8

08003d20 <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 8003d24:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <_RGB_BlinkGreen+0x5c>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b07      	cmp	r3, #7
 8003d2a:	d002      	beq.n	8003d32 <_RGB_BlinkGreen+0x12>
		_state = 0;
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <_RGB_BlinkGreen+0x60>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <_RGB_BlinkGreen+0x5c>)
 8003d34:	2207      	movs	r2, #7
 8003d36:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <_RGB_BlinkGreen+0x64>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <_RGB_BlinkGreen+0x68>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <_RGB_BlinkGreen+0x60>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <_RGB_BlinkGreen+0x6c>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e00f      	b.n	8003d74 <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <_RGB_BlinkGreen+0x60>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003d5c:	d805      	bhi.n	8003d6a <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <_RGB_BlinkGreen+0x6c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3302      	adds	r3, #2
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <_RGB_BlinkGreen+0x6c>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e004      	b.n	8003d74 <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <_RGB_BlinkGreen+0x6c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3b02      	subs	r3, #2
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <_RGB_BlinkGreen+0x6c>)
 8003d72:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003d74:	f7ff fe38 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000700 	.word	0x20000700
 8003d80:	200006f4 	.word	0x200006f4
 8003d84:	200006f8 	.word	0x200006f8
 8003d88:	200006fc 	.word	0x200006fc
 8003d8c:	200006f0 	.word	0x200006f0

08003d90 <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 8003d94:	4b15      	ldr	r3, [pc, #84]	; (8003dec <_RGB_BlinkBlue+0x5c>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d002      	beq.n	8003da2 <_RGB_BlinkBlue+0x12>
		_state = 0;
 8003d9c:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <_RGB_BlinkBlue+0x60>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <_RGB_BlinkBlue+0x5c>)
 8003da4:	2208      	movs	r2, #8
 8003da6:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <_RGB_BlinkBlue+0x64>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <_RGB_BlinkBlue+0x68>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <_RGB_BlinkBlue+0x60>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <_RGB_BlinkBlue+0x6c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e00f      	b.n	8003de4 <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <_RGB_BlinkBlue+0x60>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003dcc:	d805      	bhi.n	8003dda <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <_RGB_BlinkBlue+0x6c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <_RGB_BlinkBlue+0x6c>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e004      	b.n	8003de4 <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <_RGB_BlinkBlue+0x6c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3b02      	subs	r3, #2
 8003de0:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <_RGB_BlinkBlue+0x6c>)
 8003de2:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003de4:	f7ff fe00 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000700 	.word	0x20000700
 8003df0:	200006f4 	.word	0x200006f4
 8003df4:	200006f8 	.word	0x200006f8
 8003df8:	200006f0 	.word	0x200006f0
 8003dfc:	200006fc 	.word	0x200006fc

08003e00 <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <_RGB_BlinkWhite+0x84>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b05      	cmp	r3, #5
 8003e0a:	d002      	beq.n	8003e12 <_RGB_BlinkWhite+0x12>
		_state = 0;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <_RGB_BlinkWhite+0x88>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <_RGB_BlinkWhite+0x84>)
 8003e14:	2205      	movs	r2, #5
 8003e16:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 8003e18:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <_RGB_BlinkWhite+0x88>)
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <_RGB_BlinkWhite+0x8c>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <_RGB_BlinkWhite+0x90>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <_RGB_BlinkWhite+0x94>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e023      	b.n	8003e7c <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <_RGB_BlinkWhite+0x88>)
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003e3c:	d80f      	bhi.n	8003e5e <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <_RGB_BlinkWhite+0x8c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3302      	adds	r3, #2
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <_RGB_BlinkWhite+0x8c>)
 8003e46:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <_RGB_BlinkWhite+0x90>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <_RGB_BlinkWhite+0x90>)
 8003e50:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <_RGB_BlinkWhite+0x94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3302      	adds	r3, #2
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <_RGB_BlinkWhite+0x94>)
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e00e      	b.n	8003e7c <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <_RGB_BlinkWhite+0x8c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3b02      	subs	r3, #2
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <_RGB_BlinkWhite+0x8c>)
 8003e66:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <_RGB_BlinkWhite+0x90>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3b02      	subs	r3, #2
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <_RGB_BlinkWhite+0x90>)
 8003e70:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <_RGB_BlinkWhite+0x94>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b02      	subs	r3, #2
 8003e78:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <_RGB_BlinkWhite+0x94>)
 8003e7a:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003e7c:	f7ff fdb4 	bl	80039e8 <_RGB_UpdateRegisters>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000700 	.word	0x20000700
 8003e88:	200006f4 	.word	0x200006f4
 8003e8c:	200006f8 	.word	0x200006f8
 8003e90:	200006f0 	.word	0x200006f0
 8003e94:	200006fc 	.word	0x200006fc

08003e98 <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d835      	bhi.n	8003f14 <RGB_SetMode+0x7c>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <RGB_SetMode+0x18>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003edf 	.word	0x08003edf
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ef1 	.word	0x08003ef1
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f0f 	.word	0x08003f0f
	case RGB_Disabled:
		_RGB_SetBlack();
 8003ed8:	f7ff fe40 	bl	8003b5c <_RGB_SetBlack>
		break;
 8003edc:	e01a      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 8003ede:	f7ff fdcb 	bl	8003a78 <_RGB_SetWhite>
		break;
 8003ee2:	e017      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 8003ee4:	f7ff fde6 	bl	8003ab4 <_RGB_SetRed>
		break;
 8003ee8:	e014      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 8003eea:	f7ff fdff 	bl	8003aec <_RGB_SetGreen>
		break;
 8003eee:	e011      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 8003ef0:	f7ff fe18 	bl	8003b24 <_RGB_SetBlue>
		break;
 8003ef4:	e00e      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 8003ef6:	f7ff fedb 	bl	8003cb0 <_RGB_BlinkRed>
		break;
 8003efa:	e00b      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 8003efc:	f7ff ff10 	bl	8003d20 <_RGB_BlinkGreen>
		break;
 8003f00:	e008      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 8003f02:	f7ff ff45 	bl	8003d90 <_RGB_BlinkBlue>
		break;
 8003f06:	e005      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 8003f08:	f7ff ff7a 	bl	8003e00 <_RGB_BlinkWhite>
		break;
 8003f0c:	e002      	b.n	8003f14 <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 8003f0e:	f7ff fe3f 	bl	8003b90 <_RGB_Rainbow>
		break;
 8003f12:	bf00      	nop
	}
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_SD_ResetBuffer>:

uint32_t _lastJsonNum;
char _jsonBuffer[MAX_FILENAME_LEN];
char _lsDir[MAX_LS_LEN];

void _SD_ResetBuffer(void) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_FILESIZE; i++) {
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	e007      	b.n	8003f38 <_SD_ResetBuffer+0x1c>
		_buffer[i] = 0;
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <_SD_ResetBuffer+0x34>)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FILESIZE; i++) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3301      	adds	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f641 3257 	movw	r2, #6999	; 0x1b57
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	ddf2      	ble.n	8003f28 <_SD_ResetBuffer+0xc>
	}
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000ec8 	.word	0x20000ec8

08003f54 <_SD_GetDiskSpace>:

uint32_t _SD_GetDiskSpace(void) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
	FATFS *ptr;
	uint32_t fre_clust = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	603b      	str	r3, [r7, #0]

	_res = f_getfree("", &fre_clust, &ptr);
 8003f5e:	1d3a      	adds	r2, r7, #4
 8003f60:	463b      	mov	r3, r7
 8003f62:	4619      	mov	r1, r3
 8003f64:	4810      	ldr	r0, [pc, #64]	; (8003fa8 <_SD_GetDiskSpace+0x54>)
 8003f66:	f003 fd7c 	bl	8007a62 <f_getfree>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <_SD_GetDiskSpace+0x58>)
 8003f70:	701a      	strb	r2, [r3, #0]
	if (_res != FR_OK) {
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <_SD_GetDiskSpace+0x58>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <_SD_GetDiskSpace+0x2a>
		return 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e010      	b.n	8003fa0 <_SD_GetDiskSpace+0x4c>
	}

	DISK_LEFT = (fre_clust * ptr->csize) / 2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	895b      	ldrh	r3, [r3, #10]
 8003f82:	461a      	mov	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	fb03 f302 	mul.w	r3, r3, r2
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <_SD_GetDiskSpace+0x5c>)
 8003f8e:	6013      	str	r3, [r2, #0]
	return ((ptr->n_fatent - 2) * ptr->csize) / 2; /* kilobajty */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	3b02      	subs	r3, #2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	8952      	ldrh	r2, [r2, #10]
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	085b      	lsrs	r3, r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	0800fe04 	.word	0x0800fe04
 8003fac:	20002a48 	.word	0x20002a48
 8003fb0:	20000938 	.word	0x20000938

08003fb4 <_SD_FormatDisk>:

void _SD_FormatDisk(void) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af02      	add	r7, sp, #8
	/* fat32 */
	while ((_res = f_mkfs("", FM_FAT32, (DWORD) 0, NULL, FF_MAX_SS)) != FR_OK) {
 8003fba:	e002      	b.n	8003fc2 <_SD_FormatDisk+0xe>
		HAL_Delay(1);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f005 fc23 	bl	8009808 <HAL_Delay>
	while ((_res = f_mkfs("", FM_FAT32, (DWORD) 0, NULL, FF_MAX_SS)) != FR_OK) {
 8003fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <_SD_FormatDisk+0x3c>)
 8003fd0:	f003 fe9a 	bl	8007d08 <f_mkfs>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <_SD_FormatDisk+0x40>)
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <_SD_FormatDisk+0x40>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1eb      	bne.n	8003fbc <_SD_FormatDisk+0x8>
	}

	_SD_GetDiskSpace();
 8003fe4:	f7ff ffb6 	bl	8003f54 <_SD_GetDiskSpace>
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	0800fe04 	.word	0x0800fe04
 8003ff4:	20002a48 	.word	0x20002a48

08003ff8 <_SD_RestartNaming>:

#define __resetJsonBuf() for(int i=0;i<MAX_FILENAME_LEN;i++)_jsonBuffer[i]=0

void _SD_RestartNaming(void) {
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	_lastJsonNum = MAX_FILENAME;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <_SD_RestartNaming+0x14>)
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <_SD_RestartNaming+0x18>)
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	20002a4c 	.word	0x20002a4c
 8004010:	05f5e0ff 	.word	0x05f5e0ff

08004014 <_SD_GetNextFilename>:

char* _SD_GetNextFilename(void) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	if (_lastJsonNum == MAX_FILENAME) {
 800401a:	4b14      	ldr	r3, [pc, #80]	; (800406c <_SD_GetNextFilename+0x58>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <_SD_GetNextFilename+0x5c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <_SD_GetNextFilename+0x18>
		_lastJsonNum = 0;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <_SD_GetNextFilename+0x58>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e004      	b.n	8004036 <_SD_GetNextFilename+0x22>
	} else {
		_lastJsonNum++;
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <_SD_GetNextFilename+0x58>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <_SD_GetNextFilename+0x58>)
 8004034:	6013      	str	r3, [r2, #0]
	}

	__resetJsonBuf();
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e007      	b.n	800404c <_SD_GetNextFilename+0x38>
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <_SD_GetNextFilename+0x60>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3301      	adds	r3, #1
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	ddf4      	ble.n	800403c <_SD_GetNextFilename+0x28>
	sprintf(_jsonBuffer, "%08lu.jso", _lastJsonNum);
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <_SD_GetNextFilename+0x58>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	4907      	ldr	r1, [pc, #28]	; (8004078 <_SD_GetNextFilename+0x64>)
 800405a:	4806      	ldr	r0, [pc, #24]	; (8004074 <_SD_GetNextFilename+0x60>)
 800405c:	f009 ffee 	bl	800e03c <siprintf>

	return (char*) _jsonBuffer;
 8004060:	4b04      	ldr	r3, [pc, #16]	; (8004074 <_SD_GetNextFilename+0x60>)
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20002a4c 	.word	0x20002a4c
 8004070:	05f5e0ff 	.word	0x05f5e0ff
 8004074:	20002a20 	.word	0x20002a20
 8004078:	0800fe08 	.word	0x0800fe08

0800407c <_SD_WriteLastFilename>:

void _SD_WriteLastFilename(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8004082:	af00      	add	r7, sp, #0
	FIL temp;

	_res = f_unlink("sp.cfg");
 8004084:	4812      	ldr	r0, [pc, #72]	; (80040d0 <_SD_WriteLastFilename+0x54>)
 8004086:	f003 fda1 	bl	8007bcc <f_unlink>
 800408a:	4603      	mov	r3, r0
 800408c:	461a      	mov	r2, r3
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <_SD_WriteLastFilename+0x58>)
 8004090:	701a      	strb	r2, [r3, #0]

	if ((_res = f_open(&temp, "sp.cfg", FA_CREATE_ALWAYS | FA_WRITE))
 8004092:	463b      	mov	r3, r7
 8004094:	220a      	movs	r2, #10
 8004096:	490e      	ldr	r1, [pc, #56]	; (80040d0 <_SD_WriteLastFilename+0x54>)
 8004098:	4618      	mov	r0, r3
 800409a:	f002 ff8f 	bl	8006fbc <f_open>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <_SD_WriteLastFilename+0x58>)
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <_SD_WriteLastFilename+0x58>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <_SD_WriteLastFilename+0x4a>
			!= FR_OK) {
		return;
	}

	f_printf(&temp, "%lu", _lastJsonNum);
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <_SD_WriteLastFilename+0x5c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	463b      	mov	r3, r7
 80040b4:	4909      	ldr	r1, [pc, #36]	; (80040dc <_SD_WriteLastFilename+0x60>)
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fac6 	bl	8008648 <f_printf>

	f_close(&temp);
 80040bc:	463b      	mov	r3, r7
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fc19 	bl	80078f6 <f_close>
 80040c4:	e000      	b.n	80040c8 <_SD_WriteLastFilename+0x4c>
		return;
 80040c6:	bf00      	nop
}
 80040c8:	f507 770a 	add.w	r7, r7, #552	; 0x228
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	0800fe14 	.word	0x0800fe14
 80040d4:	20002a48 	.word	0x20002a48
 80040d8:	20002a4c 	.word	0x20002a4c
 80040dc:	0800fe1c 	.word	0x0800fe1c

080040e0 <_SD_ReadLastFilename>:

void _SD_ReadLastFilename(void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80040e6:	af00      	add	r7, sp, #0
	FIL temp;

	if (f_open(&temp, "sp.cfg", FA_READ) != FR_OK) {
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	2201      	movs	r2, #1
 80040ec:	491a      	ldr	r1, [pc, #104]	; (8004158 <_SD_ReadLastFilename+0x78>)
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 ff64 	bl	8006fbc <f_open>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <_SD_ReadLastFilename+0x20>
		_SD_RestartNaming();
 80040fa:	f7ff ff7d 	bl	8003ff8 <_SD_RestartNaming>
 80040fe:	e026      	b.n	800414e <_SD_ReadLastFilename+0x6e>
		return;
	}

	_SD_ResetBuffer();
 8004100:	f7ff ff0c 	bl	8003f1c <_SD_ResetBuffer>
	uint32_t index = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

	while (!f_eof(&temp)) {
 800410a:	e00f      	b.n	800412c <_SD_ReadLastFilename+0x4c>
		_res = f_read(&temp, &_buffer[index++], 1, &_readB);
 800410c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <_SD_ReadLastFilename+0x7c>)
 8004118:	1899      	adds	r1, r3, r2
 800411a:	1d38      	adds	r0, r7, #4
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <_SD_ReadLastFilename+0x80>)
 800411e:	2201      	movs	r2, #1
 8004120:	f003 f8cf 	bl	80072c2 <f_read>
 8004124:	4603      	mov	r3, r0
 8004126:	461a      	mov	r2, r3
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <_SD_ReadLastFilename+0x84>)
 800412a:	701a      	strb	r2, [r3, #0]
	while (!f_eof(&temp)) {
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d1e9      	bne.n	800410c <_SD_ReadLastFilename+0x2c>
	}

	f_close(&temp);
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fbdb 	bl	80078f6 <f_close>

	_lastJsonNum = atoi((char*) _buffer);
 8004140:	4806      	ldr	r0, [pc, #24]	; (800415c <_SD_ReadLastFilename+0x7c>)
 8004142:	f009 fae9 	bl	800d718 <atoi>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <_SD_ReadLastFilename+0x88>)
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	0800fe14 	.word	0x0800fe14
 800415c:	20000ec8 	.word	0x20000ec8
 8004160:	20002a44 	.word	0x20002a44
 8004164:	20002a48 	.word	0x20002a48
 8004168:	20002a4c 	.word	0x20002a4c

0800416c <SD_Init>:

void SD_Init(void) {
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	if ((_res = f_mount(&_ff, "", 1)) == FR_NO_FILESYSTEM) {
 8004170:	2201      	movs	r2, #1
 8004172:	490c      	ldr	r1, [pc, #48]	; (80041a4 <SD_Init+0x38>)
 8004174:	480c      	ldr	r0, [pc, #48]	; (80041a8 <SD_Init+0x3c>)
 8004176:	f002 fee1 	bl	8006f3c <f_mount>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <SD_Init+0x40>)
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <SD_Init+0x40>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b0d      	cmp	r3, #13
 8004188:	d103      	bne.n	8004192 <SD_Init+0x26>
		LCD_FatalSDScreen();
 800418a:	f7fe f865 	bl	8002258 <LCD_FatalSDScreen>
		_SD_FormatDisk();
 800418e:	f7ff ff11 	bl	8003fb4 <_SD_FormatDisk>
	}

	SD_RefreshDateTime();
 8004192:	f000 f83d 	bl	8004210 <SD_RefreshDateTime>

	_SD_ReadLastFilename();
 8004196:	f7ff ffa3 	bl	80040e0 <_SD_ReadLastFilename>
	_SD_GetDiskSpace();
 800419a:	f7ff fedb 	bl	8003f54 <_SD_GetDiskSpace>
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	0800fe04 	.word	0x0800fe04
 80041a8:	20000708 	.word	0x20000708
 80041ac:	20002a48 	.word	0x20002a48

080041b0 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <_SD_ClearDateTimeRegisters+0x58>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <_SD_ClearDateTimeRegisters+0x5c>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <_SD_ClearDateTimeRegisters+0x5c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <_SD_ClearDateTimeRegisters+0x5c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <_SD_ClearDateTimeRegisters+0x5c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	70da      	strb	r2, [r3, #3]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20002a30 	.word	0x20002a30
 800420c:	20000ec4 	.word	0x20000ec4

08004210 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8004214:	f7ff ffcc 	bl	80041b0 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8004218:	2201      	movs	r2, #1
 800421a:	4938      	ldr	r1, [pc, #224]	; (80042fc <SD_RefreshDateTime+0xec>)
 800421c:	4838      	ldr	r0, [pc, #224]	; (8004300 <SD_RefreshDateTime+0xf0>)
 800421e:	f006 fcd9 	bl	800abd4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8004222:	2201      	movs	r2, #1
 8004224:	4937      	ldr	r1, [pc, #220]	; (8004304 <SD_RefreshDateTime+0xf4>)
 8004226:	4836      	ldr	r0, [pc, #216]	; (8004300 <SD_RefreshDateTime+0xf0>)
 8004228:	f006 fdd9 	bl	800adde <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <SD_RefreshDateTime+0xec>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3330      	adds	r3, #48	; 0x30
 8004236:	b2da      	uxtb	r2, r3
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <SD_RefreshDateTime+0xf8>)
 800423a:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 800423c:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <SD_RefreshDateTime+0xec>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3330      	adds	r3, #48	; 0x30
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <SD_RefreshDateTime+0xf8>)
 800424c:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <SD_RefreshDateTime+0xec>)
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	b2db      	uxtb	r3, r3
 8004256:	3330      	adds	r3, #48	; 0x30
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <SD_RefreshDateTime+0xf8>)
 800425c:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <SD_RefreshDateTime+0xec>)
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3330      	adds	r3, #48	; 0x30
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <SD_RefreshDateTime+0xf8>)
 800426e:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 8004270:	4b22      	ldr	r3, [pc, #136]	; (80042fc <SD_RefreshDateTime+0xec>)
 8004272:	789b      	ldrb	r3, [r3, #2]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3330      	adds	r3, #48	; 0x30
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <SD_RefreshDateTime+0xf8>)
 800427e:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 8004280:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <SD_RefreshDateTime+0xec>)
 8004282:	789b      	ldrb	r3, [r3, #2]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3330      	adds	r3, #48	; 0x30
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <SD_RefreshDateTime+0xf8>)
 8004290:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 8004292:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <SD_RefreshDateTime+0xf4>)
 8004294:	789b      	ldrb	r3, [r3, #2]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	b2db      	uxtb	r3, r3
 800429a:	3330      	adds	r3, #48	; 0x30
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042a0:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <SD_RefreshDateTime+0xf4>)
 80042a4:	789b      	ldrb	r3, [r3, #2]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3330      	adds	r3, #48	; 0x30
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042b2:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <SD_RefreshDateTime+0xf4>)
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3330      	adds	r3, #48	; 0x30
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042c2:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <SD_RefreshDateTime+0xf4>)
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	3330      	adds	r3, #48	; 0x30
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042d4:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <SD_RefreshDateTime+0xf4>)
 80042d8:	78db      	ldrb	r3, [r3, #3]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	3330      	adds	r3, #48	; 0x30
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042e4:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <SD_RefreshDateTime+0xf4>)
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	3330      	adds	r3, #48	; 0x30
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <SD_RefreshDateTime+0xf8>)
 80042f6:	715a      	strb	r2, [r3, #5]
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20002a30 	.word	0x20002a30
 8004300:	20002d48 	.word	0x20002d48
 8004304:	20000ec4 	.word	0x20000ec4
 8004308:	2000093c 	.word	0x2000093c

0800430c <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af04      	add	r7, sp, #16
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <SD_GetDateTime+0x80>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	461c      	mov	r4, r3
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <SD_GetDateTime+0x80>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8004322:	4b1a      	ldr	r3, [pc, #104]	; (800438c <SD_GetDateTime+0x80>)
 8004324:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8004326:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <SD_GetDateTime+0x80>)
 800432a:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 800432c:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 800432e:	4b17      	ldr	r3, [pc, #92]	; (800438c <SD_GetDateTime+0x80>)
 8004330:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8004332:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <SD_GetDateTime+0x80>)
 8004336:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	9002      	str	r0, [sp, #8]
 800433c:	9101      	str	r1, [sp, #4]
 800433e:	9200      	str	r2, [sp, #0]
 8004340:	462b      	mov	r3, r5
 8004342:	4622      	mov	r2, r4
 8004344:	4912      	ldr	r1, [pc, #72]	; (8004390 <SD_GetDateTime+0x84>)
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f009 fe78 	bl	800e03c <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <SD_GetDateTime+0x80>)
 800434e:	799b      	ldrb	r3, [r3, #6]
 8004350:	461c      	mov	r4, r3
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <SD_GetDateTime+0x80>)
 8004354:	79db      	ldrb	r3, [r3, #7]
 8004356:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <SD_GetDateTime+0x80>)
 800435a:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 800435c:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <SD_GetDateTime+0x80>)
 8004360:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8004362:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <SD_GetDateTime+0x80>)
 8004366:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8004368:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <SD_GetDateTime+0x80>)
 800436c:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	9002      	str	r0, [sp, #8]
 8004372:	9101      	str	r1, [sp, #4]
 8004374:	9200      	str	r2, [sp, #0]
 8004376:	462b      	mov	r3, r5
 8004378:	4622      	mov	r2, r4
 800437a:	4906      	ldr	r1, [pc, #24]	; (8004394 <SD_GetDateTime+0x88>)
 800437c:	6838      	ldr	r0, [r7, #0]
 800437e:	f009 fe5d 	bl	800e03c <siprintf>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bdb0      	pop	{r4, r5, r7, pc}
 800438a:	bf00      	nop
 800438c:	2000093c 	.word	0x2000093c
 8004390:	0800fe20 	.word	0x0800fe20
 8004394:	0800fe30 	.word	0x0800fe30

08004398 <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 80043a2:	f7ff ff05 	bl	80041b0 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3301      	adds	r3, #1
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <SD_SetDateTime+0xb8>)
 80043ba:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3302      	adds	r3, #2
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3303      	adds	r3, #3
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <SD_SetDateTime+0xb8>)
 80043d2:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3305      	adds	r3, #5
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <SD_SetDateTime+0xb8>)
 80043ea:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <SD_SetDateTime+0xbc>)
 8004400:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3302      	adds	r3, #2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	b2da      	uxtb	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	3303      	adds	r3, #3
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	b2da      	uxtb	r2, r3
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <SD_SetDateTime+0xbc>)
 8004418:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3304      	adds	r3, #4
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	3305      	adds	r3, #5
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	4413      	add	r3, r2
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <SD_SetDateTime+0xbc>)
 8004430:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8004432:	2201      	movs	r2, #1
 8004434:	4907      	ldr	r1, [pc, #28]	; (8004454 <SD_SetDateTime+0xbc>)
 8004436:	4808      	ldr	r0, [pc, #32]	; (8004458 <SD_SetDateTime+0xc0>)
 8004438:	f006 fb0f 	bl	800aa5a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 800443c:	2201      	movs	r2, #1
 800443e:	4904      	ldr	r1, [pc, #16]	; (8004450 <SD_SetDateTime+0xb8>)
 8004440:	4805      	ldr	r0, [pc, #20]	; (8004458 <SD_SetDateTime+0xc0>)
 8004442:	f006 fc25 	bl	800ac90 <HAL_RTC_SetDate>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000ec4 	.word	0x20000ec4
 8004454:	20002a30 	.word	0x20002a30
 8004458:	20002d48 	.word	0x20002d48

0800445c <SD_ReadFile>:

char* SD_ReadFile(char *filename, uint32_t *size) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	if (f_open(&_fileH, filename, FA_READ) != FR_OK) {
 8004466:	2201      	movs	r2, #1
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4817      	ldr	r0, [pc, #92]	; (80044c8 <SD_ReadFile+0x6c>)
 800446c:	f002 fda6 	bl	8006fbc <f_open>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d004      	beq.n	8004480 <SD_ReadFile+0x24>
		*size = 0;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
		return NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	e01f      	b.n	80044c0 <SD_ReadFile+0x64>
	}

	_SD_ResetBuffer();
 8004480:	f7ff fd4c 	bl	8003f1c <_SD_ResetBuffer>
	uint32_t index = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

	while (!f_eof(&_fileH)) {
 8004488:	e00d      	b.n	80044a6 <SD_ReadFile+0x4a>
		_res = f_read(&_fileH, &_buffer[index++], 1, &_readB);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	60fa      	str	r2, [r7, #12]
 8004490:	4a0e      	ldr	r2, [pc, #56]	; (80044cc <SD_ReadFile+0x70>)
 8004492:	1899      	adds	r1, r3, r2
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <SD_ReadFile+0x74>)
 8004496:	2201      	movs	r2, #1
 8004498:	480b      	ldr	r0, [pc, #44]	; (80044c8 <SD_ReadFile+0x6c>)
 800449a:	f002 ff12 	bl	80072c2 <f_read>
 800449e:	4603      	mov	r3, r0
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <SD_ReadFile+0x78>)
 80044a4:	701a      	strb	r2, [r3, #0]
	while (!f_eof(&_fileH)) {
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SD_ReadFile+0x6c>)
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <SD_ReadFile+0x6c>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d1eb      	bne.n	800448a <SD_ReadFile+0x2e>
	}

	f_close(&_fileH);
 80044b2:	4805      	ldr	r0, [pc, #20]	; (80044c8 <SD_ReadFile+0x6c>)
 80044b4:	f003 fa1f 	bl	80078f6 <f_close>
	*size = index;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]
	return (char*) _buffer;
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <SD_ReadFile+0x70>)
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20002a50 	.word	0x20002a50
 80044cc:	20000ec8 	.word	0x20000ec8
 80044d0:	20002a44 	.word	0x20002a44
 80044d4:	20002a48 	.word	0x20002a48

080044d8 <SD_CreateJson>:
 * 		"date" : "03.30.20",
 * 		"time" : "12:03:30"
 * }
 */

uint8_t SD_CreateJson(bool innTHS, float data[], char date[], char time[]) {
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b08f      	sub	sp, #60	; 0x3c
 80044dc:	af06      	add	r7, sp, #24
 80044de:	6139      	str	r1, [r7, #16]
 80044e0:	60fa      	str	r2, [r7, #12]
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
	/* ignoruj boot log */
	if ((int) data[0] == 0 && (int) data[1] == 0) {
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	edd3 7a00 	vldr	s15, [r3]
 80044ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f2:	ee17 3a90 	vmov	r3, s15
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <SD_CreateJson+0x3a>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3304      	adds	r3, #4
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004506:	ee17 3a90 	vmov	r3, s15
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <SD_CreateJson+0x3a>
		return 1;
 800450e:	2301      	movs	r3, #1
 8004510:	e05a      	b.n	80045c8 <SD_CreateJson+0xf0>
	}

	_SD_ResetBuffer();
 8004512:	f7ff fd03 	bl	8003f1c <_SD_ResetBuffer>
	/* oof */
	uint32_t len =
			sprintf((char*) _buffer,
					"{\"id\":\"%08lu\",\"inn\":%s,\"temp\":%.0f,\"hum\":%.0f,\"date\":\"%s\",\"time\":\"%s\"}",
					(_lastJsonNum + 1 > MAX_FILENAME) ? 0 : _lastJsonNum + 1,
 8004516:	4b2e      	ldr	r3, [pc, #184]	; (80045d0 <SD_CreateJson+0xf8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3301      	adds	r3, #1
			sprintf((char*) _buffer,
 800451c:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <SD_CreateJson+0xfc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d803      	bhi.n	800452a <SD_CreateJson+0x52>
					(_lastJsonNum + 1 > MAX_FILENAME) ? 0 : _lastJsonNum + 1,
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <SD_CreateJson+0xf8>)
 8004524:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) _buffer,
 8004526:	1c5e      	adds	r6, r3, #1
 8004528:	e000      	b.n	800452c <SD_CreateJson+0x54>
 800452a:	2600      	movs	r6, #0
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <SD_CreateJson+0x60>
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <SD_CreateJson+0x100>)
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	e001      	b.n	800453c <SD_CreateJson+0x64>
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <SD_CreateJson+0x104>)
 800453a:	607b      	str	r3, [r7, #4]
					innTHS ? "true" : "false", data[0], data[1], date, time);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) _buffer,
 8004540:	4618      	mov	r0, r3
 8004542:	f7fc f811 	bl	8000568 <__aeabi_f2d>
 8004546:	4604      	mov	r4, r0
 8004548:	460d      	mov	r5, r1
					innTHS ? "true" : "false", data[0], data[1], date, time);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) _buffer,
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc f809 	bl	8000568 <__aeabi_f2d>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	9105      	str	r1, [sp, #20]
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	9104      	str	r1, [sp, #16]
 8004562:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004566:	e9cd 4500 	strd	r4, r5, [sp]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4632      	mov	r2, r6
 800456e:	491c      	ldr	r1, [pc, #112]	; (80045e0 <SD_CreateJson+0x108>)
 8004570:	481c      	ldr	r0, [pc, #112]	; (80045e4 <SD_CreateJson+0x10c>)
 8004572:	f009 fd63 	bl	800e03c <siprintf>
 8004576:	4603      	mov	r3, r0
	uint32_t len =
 8004578:	61fb      	str	r3, [r7, #28]
	/* /oof */
	_SD_GetDiskSpace();
 800457a:	f7ff fceb 	bl	8003f54 <_SD_GetDiskSpace>

	if (len > DISK_LEFT) {
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <SD_CreateJson+0x110>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	429a      	cmp	r2, r3
 8004586:	d901      	bls.n	800458c <SD_CreateJson+0xb4>
		_SD_RestartNaming();
 8004588:	f7ff fd36 	bl	8003ff8 <_SD_RestartNaming>
	}

	char *name = _SD_GetNextFilename();
 800458c:	f7ff fd42 	bl	8004014 <_SD_GetNextFilename>
 8004590:	61b8      	str	r0, [r7, #24]

	_res = f_open(&_fileH, name, FA_CREATE_ALWAYS | FA_WRITE);
 8004592:	220a      	movs	r2, #10
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	4815      	ldr	r0, [pc, #84]	; (80045ec <SD_CreateJson+0x114>)
 8004598:	f002 fd10 	bl	8006fbc <f_open>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <SD_CreateJson+0x118>)
 80045a2:	701a      	strb	r2, [r3, #0]
	if (_res != FR_OK) {
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <SD_CreateJson+0x118>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <SD_CreateJson+0xd8>
		return 2;
 80045ac:	2302      	movs	r3, #2
 80045ae:	e00b      	b.n	80045c8 <SD_CreateJson+0xf0>
	}

	f_write(&_fileH, _buffer, len, &_writtenB);
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <SD_CreateJson+0x11c>)
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	490b      	ldr	r1, [pc, #44]	; (80045e4 <SD_CreateJson+0x10c>)
 80045b6:	480d      	ldr	r0, [pc, #52]	; (80045ec <SD_CreateJson+0x114>)
 80045b8:	f002 ffb6 	bl	8007528 <f_write>

	f_close(&_fileH);
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <SD_CreateJson+0x114>)
 80045be:	f003 f99a 	bl	80078f6 <f_close>

	_SD_WriteLastFilename();
 80045c2:	f7ff fd5b 	bl	800407c <_SD_WriteLastFilename>
	return 0;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3724      	adds	r7, #36	; 0x24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	20002a4c 	.word	0x20002a4c
 80045d4:	05f5e0ff 	.word	0x05f5e0ff
 80045d8:	0800fe40 	.word	0x0800fe40
 80045dc:	0800fe48 	.word	0x0800fe48
 80045e0:	0800fe50 	.word	0x0800fe50
 80045e4:	20000ec8 	.word	0x20000ec8
 80045e8:	20000938 	.word	0x20000938
 80045ec:	20002a50 	.word	0x20002a50
 80045f0:	20002a48 	.word	0x20002a48
 80045f4:	20000704 	.word	0x20000704

080045f8 <SD_GetNofJsons>:

	*size = amount;
	return (char*) _lsDir;
}

uint32_t SD_GetNofJsons(void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
	DIR dir;
	static FILINFO fno;

	uint32_t amount = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c

	_res = f_opendir(&dir, "");
 8004602:	463b      	mov	r3, r7
 8004604:	4928      	ldr	r1, [pc, #160]	; (80046a8 <SD_GetNofJsons+0xb0>)
 8004606:	4618      	mov	r0, r3
 8004608:	f003 f995 	bl	8007936 <f_opendir>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	4b26      	ldr	r3, [pc, #152]	; (80046ac <SD_GetNofJsons+0xb4>)
 8004612:	701a      	strb	r2, [r3, #0]
	if (_res == FR_OK) {
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <SD_GetNofJsons+0xb4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d140      	bne.n	800469e <SD_GetNofJsons+0xa6>
		while (1) {
			_res = f_readdir(&dir, &fno);
 800461c:	463b      	mov	r3, r7
 800461e:	4924      	ldr	r1, [pc, #144]	; (80046b0 <SD_GetNofJsons+0xb8>)
 8004620:	4618      	mov	r0, r3
 8004622:	f003 f9e1 	bl	80079e8 <f_readdir>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <SD_GetNofJsons+0xb4>)
 800462c:	701a      	strb	r2, [r3, #0]
			if (_res != FR_OK || fno.fname[0] == 0)
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <SD_GetNofJsons+0xb4>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d133      	bne.n	800469e <SD_GetNofJsons+0xa6>
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <SD_GetNofJsons+0xb8>)
 8004638:	7a5b      	ldrb	r3, [r3, #9]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02f      	beq.n	800469e <SD_GetNofJsons+0xa6>
				break;

			if (__fileIs("SYSTEM~1") ||__fileIs("SP.CFG")
 800463e:	491d      	ldr	r1, [pc, #116]	; (80046b4 <SD_GetNofJsons+0xbc>)
 8004640:	481d      	ldr	r0, [pc, #116]	; (80046b8 <SD_GetNofJsons+0xc0>)
 8004642:	f7fb fdc5 	bl	80001d0 <strcmp>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d026      	beq.n	800469a <SD_GetNofJsons+0xa2>
 800464c:	491b      	ldr	r1, [pc, #108]	; (80046bc <SD_GetNofJsons+0xc4>)
 800464e:	481a      	ldr	r0, [pc, #104]	; (80046b8 <SD_GetNofJsons+0xc0>)
 8004650:	f7fb fdbe 	bl	80001d0 <strcmp>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01f      	beq.n	800469a <SD_GetNofJsons+0xa2>
			||__fileIs("ABOUT.HTM") || __fileIs("INDEX.HTM")
 800465a:	4919      	ldr	r1, [pc, #100]	; (80046c0 <SD_GetNofJsons+0xc8>)
 800465c:	4816      	ldr	r0, [pc, #88]	; (80046b8 <SD_GetNofJsons+0xc0>)
 800465e:	f7fb fdb7 	bl	80001d0 <strcmp>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <SD_GetNofJsons+0xa2>
 8004668:	4916      	ldr	r1, [pc, #88]	; (80046c4 <SD_GetNofJsons+0xcc>)
 800466a:	4813      	ldr	r0, [pc, #76]	; (80046b8 <SD_GetNofJsons+0xc0>)
 800466c:	f7fb fdb0 	bl	80001d0 <strcmp>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <SD_GetNofJsons+0xa2>
			|| __fileIs("DATA.HTM") || __fileIs("ERROR.HTM")) {
 8004676:	4914      	ldr	r1, [pc, #80]	; (80046c8 <SD_GetNofJsons+0xd0>)
 8004678:	480f      	ldr	r0, [pc, #60]	; (80046b8 <SD_GetNofJsons+0xc0>)
 800467a:	f7fb fda9 	bl	80001d0 <strcmp>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <SD_GetNofJsons+0xa2>
 8004684:	4911      	ldr	r1, [pc, #68]	; (80046cc <SD_GetNofJsons+0xd4>)
 8004686:	480c      	ldr	r0, [pc, #48]	; (80046b8 <SD_GetNofJsons+0xc0>)
 8004688:	f7fb fda2 	bl	80001d0 <strcmp>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <SD_GetNofJsons+0xa2>
				/* ignoruj pliki systemowe */
				continue;
			}

			amount++;
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	3301      	adds	r3, #1
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	e7c0      	b.n	800461c <SD_GetNofJsons+0x24>
				continue;
 800469a:	bf00      	nop
			_res = f_readdir(&dir, &fno);
 800469c:	e7be      	b.n	800461c <SD_GetNofJsons+0x24>
		}
	}

	return amount;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	0800fe04 	.word	0x0800fe04
 80046ac:	20002a48 	.word	0x20002a48
 80046b0:	20000254 	.word	0x20000254
 80046b4:	0800fe98 	.word	0x0800fe98
 80046b8:	2000025d 	.word	0x2000025d
 80046bc:	0800fea4 	.word	0x0800fea4
 80046c0:	0800feac 	.word	0x0800feac
 80046c4:	0800feb8 	.word	0x0800feb8
 80046c8:	0800fec4 	.word	0x0800fec4
 80046cc:	0800fed0 	.word	0x0800fed0

080046d0 <SD_GetLastJson>:

char* SD_GetLastJson(uint32_t *size) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	return SD_ReadFile(_jsonBuffer, size);
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4804      	ldr	r0, [pc, #16]	; (80046ec <SD_GetLastJson+0x1c>)
 80046dc:	f7ff febe 	bl	800445c <SD_ReadFile>
 80046e0:	4603      	mov	r3, r0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20002a20 	.word	0x20002a20

080046f0 <SD_GetJsonFromEnd>:

char* SD_GetJsonFromEnd(uint32_t offset, uint32_t *size) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	char filename[13] = { 0 };
 80046fa:	f107 030c 	add.w	r3, r7, #12
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	609a      	str	r2, [r3, #8]
 8004706:	731a      	strb	r2, [r3, #12]

	int name = _lastJsonNum - offset;
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <SD_GetJsonFromEnd+0x54>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	61fb      	str	r3, [r7, #28]

	sprintf(filename, "%08d.jso", (name > 0) ? name : MAX_FILENAME - name);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	dc03      	bgt.n	8004720 <SD_GetJsonFromEnd+0x30>
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <SD_GetJsonFromEnd+0x58>)
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	e000      	b.n	8004722 <SD_GetJsonFromEnd+0x32>
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f107 000c 	add.w	r0, r7, #12
 8004726:	461a      	mov	r2, r3
 8004728:	4908      	ldr	r1, [pc, #32]	; (800474c <SD_GetJsonFromEnd+0x5c>)
 800472a:	f009 fc87 	bl	800e03c <siprintf>

	return SD_ReadFile(filename, size);
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fe91 	bl	800445c <SD_ReadFile>
 800473a:	4603      	mov	r3, r0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20002a4c 	.word	0x20002a4c
 8004748:	05f5e0ff 	.word	0x05f5e0ff
 800474c:	0800fee0 	.word	0x0800fee0

08004750 <THS_Init>:

bool _ready;
uint8_t _readyData[5];
uint32_t _clockCounter;

void THS_Init() {
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <THS_Init+0x1c>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

	_ready = true;
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <THS_Init+0x20>)
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20002c7c 	.word	0x20002c7c
 8004770:	20002c78 	.word	0x20002c78

08004774 <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <THS_Delay+0x2c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2200      	movs	r2, #0
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8004786:	bf00      	nop
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <THS_Delay+0x2c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	429a      	cmp	r2, r3
 8004792:	d3f9      	bcc.n	8004788 <THS_Delay+0x14>
		;
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20002c84 	.word	0x20002c84

080047a4 <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047c2:	2301      	movs	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	4619      	mov	r1, r3
 80047d0:	4803      	ldr	r0, [pc, #12]	; (80047e0 <_THS_SetPinOutput+0x3c>)
 80047d2:	f005 f96f 	bl	8009ab4 <HAL_GPIO_Init>
}
 80047d6:	bf00      	nop
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40020800 	.word	0x40020800

080047e4 <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	4619      	mov	r1, r3
 8004810:	4803      	ldr	r0, [pc, #12]	; (8004820 <_THS_SetPinInput+0x3c>)
 8004812:	f005 f94f 	bl	8009ab4 <HAL_GPIO_Init>
}
 8004816:	bf00      	nop
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40020800 	.word	0x40020800

08004824 <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <_THS_InitConn+0x9c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f083 0301 	eor.w	r3, r3, #1
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <_THS_InitConn+0x1c>
		return 0;
 800483c:	2300      	movs	r3, #0
 800483e:	e03b      	b.n	80048b8 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ffae 	bl	80047a4 <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2200      	movs	r2, #0
 800484c:	4619      	mov	r1, r3
 800484e:	481d      	ldr	r0, [pc, #116]	; (80048c4 <_THS_InitConn+0xa0>)
 8004850:	f005 fae2 	bl	8009e18 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8004854:	2012      	movs	r0, #18
 8004856:	f004 ffd7 	bl	8009808 <HAL_Delay>
	Write(1);
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2201      	movs	r2, #1
 800485e:	4619      	mov	r1, r3
 8004860:	4818      	ldr	r0, [pc, #96]	; (80048c4 <_THS_InitConn+0xa0>)
 8004862:	f005 fad9 	bl	8009e18 <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 8004866:	2014      	movs	r0, #20
 8004868:	f7ff ff84 	bl	8004774 <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ffb8 	bl	80047e4 <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 8004874:	2028      	movs	r0, #40	; 0x28
 8004876:	f7ff ff7d 	bl	8004774 <THS_Delay>

	if (!Read()) {
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	4619      	mov	r1, r3
 800487e:	4811      	ldr	r0, [pc, #68]	; (80048c4 <_THS_InitConn+0xa0>)
 8004880:	f005 fab2 	bl	8009de8 <HAL_GPIO_ReadPin>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 800488a:	2050      	movs	r0, #80	; 0x50
 800488c:	f7ff ff72 	bl	8004774 <THS_Delay>
		if (!Read()) {
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	4619      	mov	r1, r3
 8004894:	480b      	ldr	r0, [pc, #44]	; (80048c4 <_THS_InitConn+0xa0>)
 8004896:	f005 faa7 	bl	8009de8 <HAL_GPIO_ReadPin>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e009      	b.n	80048b8 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 80048a4:	bf00      	nop
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4806      	ldr	r0, [pc, #24]	; (80048c4 <_THS_InitConn+0xa0>)
 80048ac:	f005 fa9c 	bl	8009de8 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d0f7      	beq.n	80048a6 <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 80048b6:	2301      	movs	r3, #1
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20002c78 	.word	0x20002c78
 80048c4:	40020800 	.word	0x40020800

080048c8 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 80048d6:	2300      	movs	r3, #0
 80048d8:	73bb      	strb	r3, [r7, #14]
 80048da:	e02f      	b.n	800493c <_THS_ReadByte+0x74>
		_clockCounter = 0;
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <_THS_ReadByte+0x84>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 80048e2:	e005      	b.n	80048f0 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <_THS_ReadByte+0x84>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2bc8      	cmp	r3, #200	; 0xc8
 80048ea:	d901      	bls.n	80048f0 <_THS_ReadByte+0x28>
				return 255;
 80048ec:	23ff      	movs	r3, #255	; 0xff
 80048ee:	e029      	b.n	8004944 <_THS_ReadByte+0x7c>
		WaitOn(0) {
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4816      	ldr	r0, [pc, #88]	; (8004950 <_THS_ReadByte+0x88>)
 80048f6:	f005 fa77 	bl	8009de8 <HAL_GPIO_ReadPin>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f1      	beq.n	80048e4 <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8004900:	203c      	movs	r0, #60	; 0x3c
 8004902:	f7ff ff37 	bl	8004774 <THS_Delay>

		byte <<= 1;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	4619      	mov	r1, r3
 8004910:	480f      	ldr	r0, [pc, #60]	; (8004950 <_THS_ReadByte+0x88>)
 8004912:	f005 fa69 	bl	8009de8 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8004924:	bf00      	nop
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	4619      	mov	r1, r3
 800492a:	4809      	ldr	r0, [pc, #36]	; (8004950 <_THS_ReadByte+0x88>)
 800492c:	f005 fa5c 	bl	8009de8 <HAL_GPIO_ReadPin>
 8004930:	4603      	mov	r3, r0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d0f7      	beq.n	8004926 <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8004936:	7bbb      	ldrb	r3, [r7, #14]
 8004938:	3301      	adds	r3, #1
 800493a:	73bb      	strb	r3, [r7, #14]
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	2b07      	cmp	r3, #7
 8004940:	d9cc      	bls.n	80048dc <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8004942:	7bfb      	ldrb	r3, [r7, #15]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20002c7c 	.word	0x20002c7c
 8004950:	40020800 	.word	0x40020800

08004954 <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	460a      	mov	r2, r1
 800495e:	71fb      	strb	r3, [r7, #7]
 8004960:	4613      	mov	r3, r2
 8004962:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 8004964:	79bb      	ldrb	r3, [r7, #6]
 8004966:	f1a3 020a 	sub.w	r2, r3, #10
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	dc06      	bgt.n	800497e <_THS_CCR_Acceptable+0x2a>
 8004970:	79fa      	ldrb	r2, [r7, #7]
 8004972:	79bb      	ldrb	r3, [r7, #6]
 8004974:	330a      	adds	r3, #10
 8004976:	429a      	cmp	r2, r3
 8004978:	dc01      	bgt.n	800497e <_THS_CCR_Acceptable+0x2a>
		return 1;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <_THS_CCR_Acceptable+0x2c>
	return 0;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <THS_ReadData+0x16>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <THS_ReadData+0x18>
 80049a2:	2302      	movs	r3, #2
 80049a4:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff ff3b 	bl	8004824 <_THS_InitConn>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <THS_ReadData+0x2c>
		return 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e091      	b.n	8004adc <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff84 	bl	80048c8 <_THS_ReadByte>
 80049c0:	4603      	mov	r3, r0
 80049c2:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 80049c4:	8bfb      	ldrh	r3, [r7, #30]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ff7e 	bl	80048c8 <_THS_ReadByte>
 80049cc:	4603      	mov	r3, r0
 80049ce:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 80049d0:	8bfb      	ldrh	r3, [r7, #30]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ff78 	bl	80048c8 <_THS_ReadByte>
 80049d8:	4603      	mov	r3, r0
 80049da:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff72 	bl	80048c8 <_THS_ReadByte>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 80049e8:	8bfb      	ldrh	r3, [r7, #30]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff6c 	bl	80048c8 <_THS_ReadByte>
 80049f0:	4603      	mov	r3, r0
 80049f2:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 80049f4:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <THS_ReadData+0x158>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 80049fa:	8bbb      	ldrh	r3, [r7, #28]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	7efb      	ldrb	r3, [r7, #27]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	b25a      	sxtb	r2, r3
 8004a06:	8b3b      	ldrh	r3, [r7, #24]
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	b25a      	sxtb	r2, r3
 8004a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	7dbb      	ldrb	r3, [r7, #22]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff99 	bl	8004954 <_THS_CCR_Acceptable>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d04f      	beq.n	8004ac8 <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 8004a28:	8b3b      	ldrh	r3, [r7, #24]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	ee07 3a90 	vmov	s15, r3
 8004a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a38:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004ae8 <THS_ReadData+0x15c>
 8004a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a40:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8004a44:	8bbb      	ldrh	r3, [r7, #28]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	7efb      	ldrb	r3, [r7, #27]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a54:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ae8 <THS_ReadData+0x15c>
 8004a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a5c:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8004a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6c:	d418      	bmi.n	8004aa0 <THS_ReadData+0x114>
 8004a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004aec <THS_ReadData+0x160>
 8004a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7e:	dc0f      	bgt.n	8004aa0 <THS_ReadData+0x114>
 8004a80:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	d408      	bmi.n	8004aa0 <THS_ReadData+0x114>
 8004a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a92:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004af0 <THS_ReadData+0x164>
 8004a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9e:	dd0a      	ble.n	8004ab6 <THS_ReadData+0x12a>
			data[0] = 0.f;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
			return 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e012      	b.n	8004adc <THS_ReadData+0x150>
		}
		data[0] = t;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	601a      	str	r2, [r3, #0]
		data[1] = r;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]
		return 1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e009      	b.n	8004adc <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
	return 0;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20002c78 	.word	0x20002c78
 8004ae8:	43800000 	.word	0x43800000
 8004aec:	42480000 	.word	0x42480000
 8004af0:	42c80000 	.word	0x42c80000

08004af4 <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <THS_ErrorClock+0x30>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b00:	d905      	bls.n	8004b0e <THS_ErrorClock+0x1a>
		_ready = true;
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <THS_ErrorClock+0x34>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <THS_ErrorClock+0x30>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <THS_ErrorClock+0x30>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <THS_ErrorClock+0x30>)
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20002c7c 	.word	0x20002c7c
 8004b28:	20002c78 	.word	0x20002c78

08004b2c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <DESELECT>:

static
inline void DESELECT(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0

}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004b52:	bf00      	nop
 8004b54:	4808      	ldr	r0, [pc, #32]	; (8004b78 <xmit_spi+0x30>)
 8004b56:	f006 fd9d 	bl	800b694 <HAL_SPI_GetState>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d1f9      	bne.n	8004b54 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8004b60:	1df9      	adds	r1, r7, #7
 8004b62:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b66:	2201      	movs	r2, #1
 8004b68:	4803      	ldr	r0, [pc, #12]	; (8004b78 <xmit_spi+0x30>)
 8004b6a:	f006 fabd 	bl	800b0e8 <HAL_SPI_Transmit>
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20002d68 	.word	0x20002d68

08004b7c <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8004b82:	23ff      	movs	r3, #255	; 0xff
 8004b84:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004b8a:	bf00      	nop
 8004b8c:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <rcvr_spi+0x38>)
 8004b8e:	f006 fd81 	bl	800b694 <HAL_SPI_GetState>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d1f9      	bne.n	8004b8c <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8004b98:	1dba      	adds	r2, r7, #6
 8004b9a:	1df9      	adds	r1, r7, #7
 8004b9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4803      	ldr	r0, [pc, #12]	; (8004bb4 <rcvr_spi+0x38>)
 8004ba6:	f006 fbd3 	bl	800b350 <HAL_SPI_TransmitReceive>

	return Data;
 8004baa:	79bb      	ldrb	r3, [r7, #6]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20002d68 	.word	0x20002d68

08004bb8 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8004bc0:	f7ff ffdc 	bl	8004b7c <rcvr_spi>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	701a      	strb	r2, [r3, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <wait_ready+0x34>)
 8004bdc:	2232      	movs	r2, #50	; 0x32
 8004bde:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8004be0:	f7ff ffcc 	bl	8004b7c <rcvr_spi>
	do
		res = rcvr_spi();
 8004be4:	f7ff ffca 	bl	8004b7c <rcvr_spi>
 8004be8:	4603      	mov	r3, r0
 8004bea:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2bff      	cmp	r3, #255	; 0xff
 8004bf0:	d004      	beq.n	8004bfc <wait_ready+0x28>
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <wait_ready+0x34>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f3      	bne.n	8004be4 <wait_ready+0x10>

	return res;
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2000026d 	.word	0x2000026d

08004c0c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8004c12:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8004c16:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8004c18:	f7ff ff8f 	bl	8004b3a <DESELECT>

	for (i = 0; i < 10; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e005      	b.n	8004c2e <power_on+0x22>
		xmit_spi(0xFF);
 8004c22:	20ff      	movs	r0, #255	; 0xff
 8004c24:	f7ff ff90 	bl	8004b48 <xmit_spi>
	for (i = 0; i < 10; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b09      	cmp	r3, #9
 8004c32:	d9f6      	bls.n	8004c22 <power_on+0x16>

	SELECT();
 8004c34:	f7ff ff7a 	bl	8004b2c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8004c4c:	2395      	movs	r3, #149	; 0x95
 8004c4e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]
 8004c54:	e00b      	b.n	8004c6e <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	f107 0210 	add.w	r2, r7, #16
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff70 	bl	8004b48 <xmit_spi>
	for (i = 0; i < 6; i++)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d9f0      	bls.n	8004c56 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8004c74:	e002      	b.n	8004c7c <power_on+0x70>
		Count--;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8004c7c:	f7ff ff7e 	bl	8004b7c <rcvr_spi>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d002      	beq.n	8004c8c <power_on+0x80>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f4      	bne.n	8004c76 <power_on+0x6a>

	DESELECT();
 8004c8c:	f7ff ff55 	bl	8004b3a <DESELECT>
	xmit_spi(0XFF);
 8004c90:	20ff      	movs	r0, #255	; 0xff
 8004c92:	f7ff ff59 	bl	8004b48 <xmit_spi>

	PowerFlag = 1;
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <power_on+0x98>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	2000026f 	.word	0x2000026f

08004ca8 <power_off>:

static
void power_off(void) {
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004cac:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <power_off+0x14>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
}
 8004cb2:	bf00      	nop
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	2000026f 	.word	0x2000026f

08004cc0 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <chk_power+0x14>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000026f 	.word	0x2000026f

08004cd8 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <rcvr_datablock+0x68>)
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8004ce8:	f7ff ff48 	bl	8004b7c <rcvr_spi>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2bff      	cmp	r3, #255	; 0xff
 8004cf4:	d104      	bne.n	8004d00 <rcvr_datablock+0x28>
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <rcvr_datablock+0x68>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f3      	bne.n	8004ce8 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2bfe      	cmp	r3, #254	; 0xfe
 8004d04:	d001      	beq.n	8004d0a <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8004d06:	2300      	movs	r3, #0
 8004d08:	e016      	b.n	8004d38 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff51 	bl	8004bb8 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff4b 	bl	8004bb8 <rcvr_spi_m>
	} while (btr -= 2);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	3b02      	subs	r3, #2
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ed      	bne.n	8004d0a <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8004d2e:	f7ff ff25 	bl	8004b7c <rcvr_spi>
	rcvr_spi();
 8004d32:	f7ff ff23 	bl	8004b7c <rcvr_spi>

	return TRUE; /* Return with success */
 8004d36:	2301      	movs	r3, #1
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	2000026c 	.word	0x2000026c

08004d44 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8004d54:	f7ff ff3e 	bl	8004bd4 <wait_ready>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2bff      	cmp	r3, #255	; 0xff
 8004d5c:	d001      	beq.n	8004d62 <xmit_datablock+0x1e>
		return FALSE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e040      	b.n	8004de4 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff feef 	bl	8004b48 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	2bfd      	cmp	r3, #253	; 0xfd
 8004d6e:	d031      	beq.n	8004dd4 <xmit_datablock+0x90>
		wc = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fee3 	bl	8004b48 <xmit_spi>
			xmit_spi(*buff++);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fedc 	bl	8004b48 <xmit_spi>
		} while (--wc);
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	73bb      	strb	r3, [r7, #14]
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1eb      	bne.n	8004d74 <xmit_datablock+0x30>

		rcvr_spi();
 8004d9c:	f7ff feee 	bl	8004b7c <rcvr_spi>
		rcvr_spi();
 8004da0:	f7ff feec 	bl	8004b7c <rcvr_spi>

		while (i <= 64) {
 8004da4:	e00b      	b.n	8004dbe <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8004da6:	f7ff fee9 	bl	8004b7c <rcvr_spi>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	2b05      	cmp	r3, #5
 8004db6:	d006      	beq.n	8004dc6 <xmit_datablock+0x82>
				break;
			i++;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d9f0      	bls.n	8004da6 <xmit_datablock+0x62>
 8004dc4:	e000      	b.n	8004dc8 <xmit_datablock+0x84>
				break;
 8004dc6:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8004dc8:	bf00      	nop
 8004dca:	f7ff fed7 	bl	8004b7c <rcvr_spi>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0fa      	beq.n	8004dca <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d101      	bne.n	8004de2 <xmit_datablock+0x9e>
		return TRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <xmit_datablock+0xa0>
	else
		return FALSE;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	6039      	str	r1, [r7, #0]
 8004df6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8004df8:	f7ff feec 	bl	8004bd4 <wait_ready>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2bff      	cmp	r3, #255	; 0xff
 8004e00:	d001      	beq.n	8004e06 <send_cmd+0x1a>
		return 0xFF;
 8004e02:	23ff      	movs	r3, #255	; 0xff
 8004e04:	e040      	b.n	8004e88 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fe9d 	bl	8004b48 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	0e1b      	lsrs	r3, r3, #24
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fe97 	bl	8004b48 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fe91 	bl	8004b48 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	0a1b      	lsrs	r3, r3, #8
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fe8b 	bl	8004b48 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fe86 	bl	8004b48 <xmit_spi>
	n = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d101      	bne.n	8004e4a <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8004e46:	2395      	movs	r3, #149	; 0x95
 8004e48:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	2b48      	cmp	r3, #72	; 0x48
 8004e4e:	d101      	bne.n	8004e54 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8004e50:	2387      	movs	r3, #135	; 0x87
 8004e52:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fe76 	bl	8004b48 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b4c      	cmp	r3, #76	; 0x4c
 8004e60:	d101      	bne.n	8004e66 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8004e62:	f7ff fe8b 	bl	8004b7c <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8004e66:	230a      	movs	r3, #10
 8004e68:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8004e6a:	f7ff fe87 	bl	8004b7c <rcvr_spi>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8004e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	da05      	bge.n	8004e86 <send_cmd+0x9a>
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f1      	bne.n	8004e6a <send_cmd+0x7e>

	return res; /* Return with the response value */
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0d5      	b.n	8005050 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8004ea4:	4b6c      	ldr	r3, [pc, #432]	; (8005058 <disk_initialize+0x1c8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8004eb2:	4b69      	ldr	r3, [pc, #420]	; (8005058 <disk_initialize+0x1c8>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	e0ca      	b.n	8005050 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8004eba:	f7ff fea7 	bl	8004c0c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8004ebe:	f7ff fe35 	bl	8004b2c <SELECT>
	ty = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2040      	movs	r0, #64	; 0x40
 8004eca:	f7ff ff8f 	bl	8004dec <send_cmd>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 80a5 	bne.w	8005020 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8004ed6:	4b61      	ldr	r3, [pc, #388]	; (800505c <disk_initialize+0x1cc>)
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8004edc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ee0:	2048      	movs	r0, #72	; 0x48
 8004ee2:	f7ff ff83 	bl	8004dec <send_cmd>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d158      	bne.n	8004f9e <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
 8004ef0:	e00c      	b.n	8004f0c <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8004ef2:	7bfc      	ldrb	r4, [r7, #15]
 8004ef4:	f7ff fe42 	bl	8004b7c <rcvr_spi>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	4423      	add	r3, r4
 8004f02:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d9ef      	bls.n	8004ef2 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8004f12:	7abb      	ldrb	r3, [r7, #10]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	f040 8083 	bne.w	8005020 <disk_initialize+0x190>
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	2baa      	cmp	r3, #170	; 0xaa
 8004f1e:	d17f      	bne.n	8005020 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8004f20:	2100      	movs	r1, #0
 8004f22:	2077      	movs	r0, #119	; 0x77
 8004f24:	f7ff ff62 	bl	8004dec <send_cmd>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d807      	bhi.n	8004f3e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8004f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004f32:	2069      	movs	r0, #105	; 0x69
 8004f34:	f7ff ff5a 	bl	8004dec <send_cmd>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <disk_initialize+0x1cc>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1eb      	bne.n	8004f20 <disk_initialize+0x90>
 8004f48:	e000      	b.n	8004f4c <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8004f4a:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8004f4c:	4b43      	ldr	r3, [pc, #268]	; (800505c <disk_initialize+0x1cc>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d064      	beq.n	8005020 <disk_initialize+0x190>
 8004f56:	2100      	movs	r1, #0
 8004f58:	207a      	movs	r0, #122	; 0x7a
 8004f5a:	f7ff ff47 	bl	8004dec <send_cmd>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d15d      	bne.n	8005020 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e00c      	b.n	8004f84 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8004f6a:	7bfc      	ldrb	r4, [r7, #15]
 8004f6c:	f7ff fe06 	bl	8004b7c <rcvr_spi>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	f107 0310 	add.w	r3, r7, #16
 8004f78:	4423      	add	r3, r4
 8004f7a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3301      	adds	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d9ef      	bls.n	8004f6a <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8004f8a:	7a3b      	ldrb	r3, [r7, #8]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <disk_initialize+0x108>
 8004f94:	2306      	movs	r3, #6
 8004f96:	e000      	b.n	8004f9a <disk_initialize+0x10a>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	73bb      	strb	r3, [r7, #14]
 8004f9c:	e040      	b.n	8005020 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	2077      	movs	r0, #119	; 0x77
 8004fa2:	f7ff ff23 	bl	8004dec <send_cmd>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d808      	bhi.n	8004fbe <disk_initialize+0x12e>
 8004fac:	2100      	movs	r1, #0
 8004fae:	2069      	movs	r0, #105	; 0x69
 8004fb0:	f7ff ff1c 	bl	8004dec <send_cmd>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d801      	bhi.n	8004fbe <disk_initialize+0x12e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e000      	b.n	8004fc0 <disk_initialize+0x130>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8004fc2:	7bbb      	ldrb	r3, [r7, #14]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d10e      	bne.n	8004fe6 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8004fc8:	2100      	movs	r1, #0
 8004fca:	2077      	movs	r0, #119	; 0x77
 8004fcc:	f7ff ff0e 	bl	8004dec <send_cmd>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d80e      	bhi.n	8004ff4 <disk_initialize+0x164>
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	2069      	movs	r0, #105	; 0x69
 8004fda:	f7ff ff07 	bl	8004dec <send_cmd>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <disk_initialize+0x164>
						break; /* ACMD41 */
 8004fe4:	e00d      	b.n	8005002 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2041      	movs	r0, #65	; 0x41
 8004fea:	f7ff feff 	bl	8004dec <send_cmd>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <disk_initialize+0x1cc>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e1      	bne.n	8004fc2 <disk_initialize+0x132>
 8004ffe:	e000      	b.n	8005002 <disk_initialize+0x172>
						break; /* CMD1 */
 8005000:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <disk_initialize+0x1cc>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <disk_initialize+0x18c>
 800500c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005010:	2050      	movs	r0, #80	; 0x50
 8005012:	f7ff feeb 	bl	8004dec <send_cmd>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <disk_initialize+0x190>
				ty = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <disk_initialize+0x1d0>)
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8005026:	f7ff fd88 	bl	8004b3a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800502a:	f7ff fda7 	bl	8004b7c <rcvr_spi>

	if (ty) /* Initialization succeded */
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <disk_initialize+0x1c8>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <disk_initialize+0x1c8>)
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e001      	b.n	800504a <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8005046:	f7ff fe2f 	bl	8004ca8 <power_off>

	return Stat;
 800504a:	4b03      	ldr	r3, [pc, #12]	; (8005058 <disk_initialize+0x1c8>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}
 8005058:	20000058 	.word	0x20000058
 800505c:	2000026c 	.word	0x2000026c
 8005060:	2000026e 	.word	0x2000026e

08005064 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8005074:	2301      	movs	r3, #1
 8005076:	e002      	b.n	800507e <disk_status+0x1a>
	return Stat;
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <disk_status+0x28>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000058 	.word	0x20000058

08005090 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <disk_read+0x1c>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <disk_read+0x20>
		return RES_PARERR;
 80050ac:	2304      	movs	r3, #4
 80050ae:	e051      	b.n	8005154 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <disk_read+0xcc>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <disk_read+0x32>
		return RES_NOTRDY;
 80050be:	2303      	movs	r3, #3
 80050c0:	e048      	b.n	8005154 <disk_read+0xc4>

	if (!(CardType & 4))
 80050c2:	4b27      	ldr	r3, [pc, #156]	; (8005160 <disk_read+0xd0>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80050d4:	f7ff fd2a 	bl	8004b2c <SELECT>

	if (count == 1) { /* Single block read */
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d111      	bne.n	8005102 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	2051      	movs	r0, #81	; 0x51
 80050e2:	f7ff fe83 	bl	8004dec <send_cmd>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d129      	bne.n	8005140 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 80050ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050f0:	68b8      	ldr	r0, [r7, #8]
 80050f2:	f7ff fdf1 	bl	8004cd8 <rcvr_datablock>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d021      	beq.n	8005140 <disk_read+0xb0>
			count = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	e01e      	b.n	8005140 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	2052      	movs	r0, #82	; 0x52
 8005106:	f7ff fe71 	bl	8004dec <send_cmd>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d117      	bne.n	8005140 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8005110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005114:	68b8      	ldr	r0, [r7, #8]
 8005116:	f7ff fddf 	bl	8004cd8 <rcvr_datablock>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <disk_read+0xa6>
					break;
				buff += 512;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005126:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	3b01      	subs	r3, #1
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1ed      	bne.n	8005110 <disk_read+0x80>
 8005134:	e000      	b.n	8005138 <disk_read+0xa8>
					break;
 8005136:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8005138:	2100      	movs	r1, #0
 800513a:	204c      	movs	r0, #76	; 0x4c
 800513c:	f7ff fe56 	bl	8004dec <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8005140:	f7ff fcfb 	bl	8004b3a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8005144:	f7ff fd1a 	bl	8004b7c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000058 	.word	0x20000058
 8005160:	2000026e 	.word	0x2000026e

08005164 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <disk_write+0x1c>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <disk_write+0x20>
		return RES_PARERR;
 8005180:	2304      	movs	r3, #4
 8005182:	e06b      	b.n	800525c <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8005184:	4b37      	ldr	r3, [pc, #220]	; (8005264 <disk_write+0x100>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <disk_write+0x32>
		return RES_NOTRDY;
 8005192:	2303      	movs	r3, #3
 8005194:	e062      	b.n	800525c <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8005196:	4b33      	ldr	r3, [pc, #204]	; (8005264 <disk_write+0x100>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <disk_write+0x44>
		return RES_WRPRT;
 80051a4:	2302      	movs	r3, #2
 80051a6:	e059      	b.n	800525c <disk_write+0xf8>

	if (!(CardType & 4))
 80051a8:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <disk_write+0x104>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d102      	bne.n	80051ba <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80051ba:	f7ff fcb7 	bl	8004b2c <SELECT>

	if (count == 1) { /* Single block write */
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d110      	bne.n	80051e6 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	2058      	movs	r0, #88	; 0x58
 80051c8:	f7ff fe10 	bl	8004dec <send_cmd>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d13a      	bne.n	8005248 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80051d2:	21fe      	movs	r1, #254	; 0xfe
 80051d4:	68b8      	ldr	r0, [r7, #8]
 80051d6:	f7ff fdb5 	bl	8004d44 <xmit_datablock>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d033      	beq.n	8005248 <disk_write+0xe4>
			count = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	e030      	b.n	8005248 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <disk_write+0x104>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 80051f2:	2100      	movs	r1, #0
 80051f4:	2077      	movs	r0, #119	; 0x77
 80051f6:	f7ff fdf9 	bl	8004dec <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	2057      	movs	r0, #87	; 0x57
 80051fe:	f7ff fdf5 	bl	8004dec <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	2059      	movs	r0, #89	; 0x59
 8005206:	f7ff fdf1 	bl	8004dec <send_cmd>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11b      	bne.n	8005248 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8005210:	21fc      	movs	r1, #252	; 0xfc
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f7ff fd96 	bl	8004d44 <xmit_datablock>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <disk_write+0xd0>
					break;
				buff += 512;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005224:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3b01      	subs	r3, #1
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ee      	bne.n	8005210 <disk_write+0xac>
 8005232:	e000      	b.n	8005236 <disk_write+0xd2>
					break;
 8005234:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8005236:	21fd      	movs	r1, #253	; 0xfd
 8005238:	2000      	movs	r0, #0
 800523a:	f7ff fd83 	bl	8004d44 <xmit_datablock>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <disk_write+0xe4>
				count = 1;
 8005244:	2301      	movs	r3, #1
 8005246:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8005248:	f7ff fc77 	bl	8004b3a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800524c:	f7ff fc96 	bl	8004b7c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000058 	.word	0x20000058
 8005268:	2000026e 	.word	0x2000026e

0800526c <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b08b      	sub	sp, #44	; 0x2c
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	603a      	str	r2, [r7, #0]
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	460b      	mov	r3, r1
 800527a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8005280:	79fb      	ldrb	r3, [r7, #7]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <disk_ioctl+0x1e>
		return RES_PARERR;
 8005286:	2304      	movs	r3, #4
 8005288:	e16a      	b.n	8005560 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8005290:	79bb      	ldrb	r3, [r7, #6]
 8005292:	2b07      	cmp	r3, #7
 8005294:	d127      	bne.n	80052e6 <disk_ioctl+0x7a>
		switch (*ptr) {
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d00e      	beq.n	80052bc <disk_ioctl+0x50>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d012      	beq.n	80052c8 <disk_ioctl+0x5c>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11b      	bne.n	80052de <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80052a6:	f7ff fd0b 	bl	8004cc0 <chk_power>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <disk_ioctl+0x48>
				power_off(); /* Power off */
 80052b0:	f7ff fcfa 	bl	8004ca8 <power_off>
			res = RES_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80052ba:	e14f      	b.n	800555c <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80052bc:	f7ff fca6 	bl	8004c0c <power_on>
			res = RES_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80052c6:	e149      	b.n	800555c <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 80052c8:	f7ff fcfa 	bl	8004cc0 <chk_power>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80052dc:	e13e      	b.n	800555c <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 80052de:	2304      	movs	r3, #4
 80052e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052e4:	e13a      	b.n	800555c <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 80052e6:	4ba0      	ldr	r3, [pc, #640]	; (8005568 <disk_ioctl+0x2fc>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e133      	b.n	8005560 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 80052f8:	f7ff fc18 	bl	8004b2c <SELECT>

		switch (ctrl) {
 80052fc:	79bb      	ldrb	r3, [r7, #6]
 80052fe:	2b35      	cmp	r3, #53	; 0x35
 8005300:	f200 811d 	bhi.w	800553e <disk_ioctl+0x2d2>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <disk_ioctl+0xa0>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	080054a7 	.word	0x080054a7
 8005310:	080053e5 	.word	0x080053e5
 8005314:	08005497 	.word	0x08005497
 8005318:	0800553f 	.word	0x0800553f
 800531c:	0800553f 	.word	0x0800553f
 8005320:	0800553f 	.word	0x0800553f
 8005324:	0800553f 	.word	0x0800553f
 8005328:	0800553f 	.word	0x0800553f
 800532c:	0800553f 	.word	0x0800553f
 8005330:	0800553f 	.word	0x0800553f
 8005334:	0800553f 	.word	0x0800553f
 8005338:	0800553f 	.word	0x0800553f
 800533c:	0800553f 	.word	0x0800553f
 8005340:	0800553f 	.word	0x0800553f
 8005344:	0800553f 	.word	0x0800553f
 8005348:	0800553f 	.word	0x0800553f
 800534c:	0800553f 	.word	0x0800553f
 8005350:	0800553f 	.word	0x0800553f
 8005354:	0800553f 	.word	0x0800553f
 8005358:	0800553f 	.word	0x0800553f
 800535c:	0800553f 	.word	0x0800553f
 8005360:	0800553f 	.word	0x0800553f
 8005364:	0800553f 	.word	0x0800553f
 8005368:	0800553f 	.word	0x0800553f
 800536c:	0800553f 	.word	0x0800553f
 8005370:	0800553f 	.word	0x0800553f
 8005374:	0800553f 	.word	0x0800553f
 8005378:	0800553f 	.word	0x0800553f
 800537c:	0800553f 	.word	0x0800553f
 8005380:	0800553f 	.word	0x0800553f
 8005384:	0800553f 	.word	0x0800553f
 8005388:	0800553f 	.word	0x0800553f
 800538c:	0800553f 	.word	0x0800553f
 8005390:	0800553f 	.word	0x0800553f
 8005394:	0800553f 	.word	0x0800553f
 8005398:	0800553f 	.word	0x0800553f
 800539c:	0800553f 	.word	0x0800553f
 80053a0:	0800553f 	.word	0x0800553f
 80053a4:	0800553f 	.word	0x0800553f
 80053a8:	0800553f 	.word	0x0800553f
 80053ac:	0800553f 	.word	0x0800553f
 80053b0:	0800553f 	.word	0x0800553f
 80053b4:	0800553f 	.word	0x0800553f
 80053b8:	0800553f 	.word	0x0800553f
 80053bc:	0800553f 	.word	0x0800553f
 80053c0:	0800553f 	.word	0x0800553f
 80053c4:	0800553f 	.word	0x0800553f
 80053c8:	0800553f 	.word	0x0800553f
 80053cc:	0800553f 	.word	0x0800553f
 80053d0:	0800553f 	.word	0x0800553f
 80053d4:	0800553f 	.word	0x0800553f
 80053d8:	080054b9 	.word	0x080054b9
 80053dc:	080054dd 	.word	0x080054dd
 80053e0:	08005501 	.word	0x08005501
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80053e4:	2100      	movs	r1, #0
 80053e6:	2049      	movs	r0, #73	; 0x49
 80053e8:	f7ff fd00 	bl	8004dec <send_cmd>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 80a9 	bne.w	8005546 <disk_ioctl+0x2da>
 80053f4:	f107 030c 	add.w	r3, r7, #12
 80053f8:	2110      	movs	r1, #16
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fc6c 	bl	8004cd8 <rcvr_datablock>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 809f 	beq.w	8005546 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8005408:	7b3b      	ldrb	r3, [r7, #12]
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10e      	bne.n	8005430 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005412:	7d7b      	ldrb	r3, [r7, #21]
 8005414:	b29a      	uxth	r2, r3
 8005416:	7d3b      	ldrb	r3, [r7, #20]
 8005418:	b29b      	uxth	r3, r3
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	b29b      	uxth	r3, r3
 800541e:	4413      	add	r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	3301      	adds	r3, #1
 8005424:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8005426:	8bfb      	ldrh	r3, [r7, #30]
 8005428:	029a      	lsls	r2, r3, #10
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e02e      	b.n	800548e <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8005430:	7c7b      	ldrb	r3, [r7, #17]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	b2da      	uxtb	r2, r3
 8005438:	7dbb      	ldrb	r3, [r7, #22]
 800543a:	09db      	lsrs	r3, r3, #7
 800543c:	b2db      	uxtb	r3, r3
 800543e:	4413      	add	r3, r2
 8005440:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8005442:	7d7b      	ldrb	r3, [r7, #21]
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0306 	and.w	r3, r3, #6
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4413      	add	r3, r2
 8005450:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8005452:	3302      	adds	r3, #2
 8005454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8005458:	7d3b      	ldrb	r3, [r7, #20]
 800545a:	099b      	lsrs	r3, r3, #6
 800545c:	b2db      	uxtb	r3, r3
 800545e:	b29a      	uxth	r2, r3
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	b29b      	uxth	r3, r3
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	b29b      	uxth	r3, r3
 8005468:	4413      	add	r3, r2
 800546a:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 800546c:	7cbb      	ldrb	r3, [r7, #18]
 800546e:	029b      	lsls	r3, r3, #10
 8005470:	b29b      	uxth	r3, r3
 8005472:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005476:	b29b      	uxth	r3, r3
 8005478:	4413      	add	r3, r2
 800547a:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800547c:	3301      	adds	r3, #1
 800547e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8005480:	8bfa      	ldrh	r2, [r7, #30]
 8005482:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005486:	3b09      	subs	r3, #9
 8005488:	409a      	lsls	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8005494:	e057      	b.n	8005546 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80054a4:	e056      	b.n	8005554 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80054a6:	f7ff fb95 	bl	8004bd4 <wait_ready>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2bff      	cmp	r3, #255	; 0xff
 80054ae:	d14c      	bne.n	800554a <disk_ioctl+0x2de>
				res = RES_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80054b6:	e048      	b.n	800554a <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80054b8:	2100      	movs	r1, #0
 80054ba:	2049      	movs	r0, #73	; 0x49
 80054bc:	f7ff fc96 	bl	8004dec <send_cmd>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d143      	bne.n	800554e <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 80054c6:	2110      	movs	r1, #16
 80054c8:	6a38      	ldr	r0, [r7, #32]
 80054ca:	f7ff fc05 	bl	8004cd8 <rcvr_datablock>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d03c      	beq.n	800554e <disk_ioctl+0x2e2>
				res = RES_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80054da:	e038      	b.n	800554e <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 80054dc:	2100      	movs	r1, #0
 80054de:	204a      	movs	r0, #74	; 0x4a
 80054e0:	f7ff fc84 	bl	8004dec <send_cmd>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d133      	bne.n	8005552 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 80054ea:	2110      	movs	r1, #16
 80054ec:	6a38      	ldr	r0, [r7, #32]
 80054ee:	f7ff fbf3 	bl	8004cd8 <rcvr_datablock>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02c      	beq.n	8005552 <disk_ioctl+0x2e6>
				res = RES_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80054fe:	e028      	b.n	8005552 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8005500:	2100      	movs	r1, #0
 8005502:	207a      	movs	r0, #122	; 0x7a
 8005504:	f7ff fc72 	bl	8004dec <send_cmd>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d117      	bne.n	800553e <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 800550e:	2300      	movs	r3, #0
 8005510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005514:	e00b      	b.n	800552e <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8005516:	6a3c      	ldr	r4, [r7, #32]
 8005518:	1c63      	adds	r3, r4, #1
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	f7ff fb2e 	bl	8004b7c <rcvr_spi>
 8005520:	4603      	mov	r3, r0
 8005522:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8005524:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005528:	3301      	adds	r3, #1
 800552a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800552e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005532:	2b03      	cmp	r3, #3
 8005534:	d9ef      	bls.n	8005516 <disk_ioctl+0x2aa>
				res = RES_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800553c:	e00a      	b.n	8005554 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 800553e:	2304      	movs	r3, #4
 8005540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005544:	e006      	b.n	8005554 <disk_ioctl+0x2e8>
			break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <disk_ioctl+0x2e8>
			break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <disk_ioctl+0x2e8>
			break;
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <disk_ioctl+0x2e8>
			break;
 8005552:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8005554:	f7ff faf1 	bl	8004b3a <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8005558:	f7ff fb10 	bl	8004b7c <rcvr_spi>
	}

	return res;
 800555c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005560:	4618      	mov	r0, r3
 8005562:	372c      	adds	r7, #44	; 0x2c
 8005564:	46bd      	mov	sp, r7
 8005566:	bd90      	pop	{r4, r7, pc}
 8005568:	20000058 	.word	0x20000058

0800556c <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8005572:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <disk_timerproc+0x44>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
	if (n)
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <disk_timerproc+0x1e>
		Timer1 = --n;
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	3b01      	subs	r3, #1
 8005582:	71fb      	strb	r3, [r7, #7]
 8005584:	4a0a      	ldr	r2, [pc, #40]	; (80055b0 <disk_timerproc+0x44>)
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <disk_timerproc+0x48>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <disk_timerproc+0x36>
		Timer2 = --n;
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	3b01      	subs	r3, #1
 800559a:	71fb      	strb	r3, [r7, #7]
 800559c:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <disk_timerproc+0x48>)
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	7013      	strb	r3, [r2, #0]

}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	2000026c 	.word	0x2000026c
 80055b4:	2000026d 	.word	0x2000026d

080055b8 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <sdcard_systick_timerproc+0x2c>)
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3301      	adds	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	4b07      	ldr	r3, [pc, #28]	; (80055e4 <sdcard_systick_timerproc+0x2c>)
 80055c8:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <sdcard_systick_timerproc+0x2c>)
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d904      	bls.n	80055de <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <sdcard_systick_timerproc+0x2c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 80055da:	f7ff ffc7 	bl	800556c <disk_timerproc>
	}
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20002c80 	.word	0x20002c80

080055e8 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 80055ec:	4b02      	ldr	r3, [pc, #8]	; (80055f8 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 80055ee:	4618      	mov	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	36c55cc0 	.word	0x36c55cc0

080055fc <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3301      	adds	r3, #1
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	b21a      	sxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	b21b      	sxth	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b21b      	sxth	r3, r3
 800561c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800561e:	89fb      	ldrh	r3, [r7, #14]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3303      	adds	r3, #3
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	3202      	adds	r2, #2
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	3201      	adds	r2, #1
 8005652:	7812      	ldrb	r2, [r2, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
	return rv;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	460b      	mov	r3, r1
 800567c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	887a      	ldrh	r2, [r7, #2]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	887a      	ldrh	r2, [r7, #2]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	1c53      	adds	r3, r2, #1
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	6179      	str	r1, [r7, #20]
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3b01      	subs	r3, #1
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f1      	bne.n	800571a <mem_cpy+0x1a>
	}
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8005742:	b480      	push	{r7}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	617a      	str	r2, [r7, #20]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3b01      	subs	r3, #1
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f3      	bne.n	8005752 <mem_set+0x10>
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8005776:	b480      	push	{r7}
 8005778:	b089      	sub	sp, #36	; 0x24
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	61fa      	str	r2, [r7, #28]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	61ba      	str	r2, [r7, #24]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	1acb      	subs	r3, r1, r3
 80057a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <mem_cmp+0x40>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0eb      	beq.n	800578e <mem_cmp+0x18>

	return r;
 80057b6:	697b      	ldr	r3, [r7, #20]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3724      	adds	r7, #36	; 0x24
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057ce:	e002      	b.n	80057d6 <chk_chr+0x12>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3301      	adds	r3, #1
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <chk_chr+0x26>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d1f2      	bne.n	80057d0 <chk_chr+0xc>
	return *str;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	781b      	ldrb	r3, [r3, #0]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8005804:	2281      	movs	r2, #129	; 0x81
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	4293      	cmp	r3, r2
 800580a:	d30f      	bcc.n	800582c <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800580c:	229f      	movs	r2, #159	; 0x9f
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	4293      	cmp	r3, r2
 8005812:	d801      	bhi.n	8005818 <dbc_1st+0x1e>
 8005814:	2301      	movs	r3, #1
 8005816:	e00a      	b.n	800582e <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8005818:	22e0      	movs	r2, #224	; 0xe0
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	4293      	cmp	r3, r2
 800581e:	d305      	bcc.n	800582c <dbc_1st+0x32>
 8005820:	22fc      	movs	r2, #252	; 0xfc
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	4293      	cmp	r3, r2
 8005826:	d801      	bhi.n	800582c <dbc_1st+0x32>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	4603      	mov	r3, r0
 8005842:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	4293      	cmp	r3, r2
 800584a:	d319      	bcc.n	8005880 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800584c:	227e      	movs	r2, #126	; 0x7e
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	4293      	cmp	r3, r2
 8005852:	d801      	bhi.n	8005858 <dbc_2nd+0x1e>
 8005854:	2301      	movs	r3, #1
 8005856:	e014      	b.n	8005882 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	4293      	cmp	r3, r2
 800585e:	d305      	bcc.n	800586c <dbc_2nd+0x32>
 8005860:	22fc      	movs	r2, #252	; 0xfc
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	4293      	cmp	r3, r2
 8005866:	d801      	bhi.n	800586c <dbc_2nd+0x32>
 8005868:	2301      	movs	r3, #1
 800586a:	e00a      	b.n	8005882 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800586c:	2200      	movs	r2, #0
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	4293      	cmp	r3, r2
 8005872:	d305      	bcc.n	8005880 <dbc_2nd+0x46>
 8005874:	2200      	movs	r2, #0
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	4293      	cmp	r3, r2
 800587a:	d801      	bhi.n	8005880 <dbc_2nd+0x46>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	78db      	ldrb	r3, [r3, #3]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d02c      	beq.n	80058fc <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7858      	ldrb	r0, [r3, #1]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	2301      	movs	r3, #1
 80058b2:	f7ff fc57 	bl	8005164 <disk_write>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11d      	bne.n	80058f8 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d213      	bcs.n	80058fc <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	789b      	ldrb	r3, [r3, #2]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d10f      	bne.n	80058fc <sync_window+0x6e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	7858      	ldrb	r0, [r3, #1]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	441a      	add	r2, r3
 80058f0:	2301      	movs	r3, #1
 80058f2:	f7ff fc37 	bl	8005164 <disk_write>
 80058f6:	e001      	b.n	80058fc <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d01b      	beq.n	8005956 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7ff ffb5 	bl	800588e <sync_window>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d113      	bne.n	8005956 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7858      	ldrb	r0, [r3, #1]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005938:	2301      	movs	r3, #1
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	f7ff fba8 	bl	8005090 <disk_read>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005956:	7bfb      	ldrb	r3, [r7, #15]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff90 	bl	800588e <sync_window>
 800596e:	4603      	mov	r3, r0
 8005970:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d158      	bne.n	8005a2a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d148      	bne.n	8005a12 <sync_fs+0xb2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	791b      	ldrb	r3, [r3, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d144      	bne.n	8005a12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3330      	adds	r3, #48	; 0x30
 800598c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fed5 	bl	8005742 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3330      	adds	r3, #48	; 0x30
 800599c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80059a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fe64 	bl	8005672 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3330      	adds	r3, #48	; 0x30
 80059ae:	4921      	ldr	r1, [pc, #132]	; (8005a34 <sync_fs+0xd4>)
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fe79 	bl	80056a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	3330      	adds	r3, #48	; 0x30
 80059ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059be:	491e      	ldr	r1, [pc, #120]	; (8005a38 <sync_fs+0xd8>)
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fe71 	bl	80056a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3330      	adds	r3, #48	; 0x30
 80059ca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7ff fe67 	bl	80056a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3330      	adds	r3, #48	; 0x30
 80059de:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7ff fe5d 	bl	80056a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7858      	ldrb	r0, [r3, #1]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	2301      	movs	r3, #1
 8005a08:	f7ff fbac 	bl	8005164 <disk_write>
			fs->fsi_flag = 0;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fc26 	bl	800526c <disk_ioctl>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <sync_fs+0xca>
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	41615252 	.word	0x41615252
 8005a38:	61417272 	.word	0x61417272

08005a3c <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	3b02      	subs	r3, #2
 8005a4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	3b02      	subs	r3, #2
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d301      	bcc.n	8005a5c <clst2sect+0x20>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e008      	b.n	8005a6e <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	895b      	ldrh	r3, [r3, #10]
 8005a64:	4619      	mov	r1, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	fb03 f301 	mul.w	r3, r3, r1
 8005a6c:	4413      	add	r3, r2
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b086      	sub	sp, #24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d904      	bls.n	8005a9a <get_fat+0x20>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e08c      	b.n	8005bba <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d045      	beq.n	8005b3a <get_fat+0xc0>
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d05d      	beq.n	8005b6e <get_fat+0xf4>
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d177      	bne.n	8005ba6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	0a5b      	lsrs	r3, r3, #9
 8005acc:	4413      	add	r3, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6938      	ldr	r0, [r7, #16]
 8005ad2:	f7ff ff18 	bl	8005906 <move_window>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d167      	bne.n	8005bac <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	60fa      	str	r2, [r7, #12]
 8005ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005aee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	0a5b      	lsrs	r3, r3, #9
 8005af8:	4413      	add	r3, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	6938      	ldr	r0, [r7, #16]
 8005afe:	f7ff ff02 	bl	8005906 <move_window>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d153      	bne.n	8005bb0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <get_fat+0xb6>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	e002      	b.n	8005b36 <get_fat+0xbc>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b36:	617b      	str	r3, [r7, #20]
			break;
 8005b38:	e03f      	b.n	8005bba <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6a1a      	ldr	r2, [r3, #32]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	4413      	add	r3, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	6938      	ldr	r0, [r7, #16]
 8005b48:	f7ff fedd 	bl	8005906 <move_window>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d130      	bne.n	8005bb4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005b60:	4413      	add	r3, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff fd4a 	bl	80055fc <ld_word>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	617b      	str	r3, [r7, #20]
			break;
 8005b6c:	e025      	b.n	8005bba <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	4413      	add	r3, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6938      	ldr	r0, [r7, #16]
 8005b7c:	f7ff fec3 	bl	8005906 <move_window>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d118      	bne.n	8005bb8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005b94:	4413      	add	r3, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fd48 	bl	800562c <ld_dword>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ba2:	617b      	str	r3, [r7, #20]
			break;
 8005ba4:	e009      	b.n	8005bba <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e006      	b.n	8005bba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bac:	bf00      	nop
 8005bae:	e004      	b.n	8005bba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bb0:	bf00      	nop
 8005bb2:	e002      	b.n	8005bba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005bb4:	bf00      	nop
 8005bb6:	e000      	b.n	8005bba <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005bb8:	bf00      	nop
		}
	}

	return val;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b089      	sub	sp, #36	; 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f240 80d6 	bls.w	8005d88 <put_fat+0x1c4>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 80d0 	bcs.w	8005d88 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d073      	beq.n	8005cd8 <put_fat+0x114>
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	f000 8091 	beq.w	8005d18 <put_fat+0x154>
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	f040 80c6 	bne.w	8005d88 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1a      	ldr	r2, [r3, #32]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	0a5b      	lsrs	r3, r3, #9
 8005c12:	4413      	add	r3, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fe75 	bl	8005906 <move_window>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c20:	7ffb      	ldrb	r3, [r7, #31]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 80a9 	bne.w	8005d7a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	1c59      	adds	r1, r3, #1
 8005c32:	61b9      	str	r1, [r7, #24]
 8005c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <put_fat+0x9e>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	b25a      	sxtb	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	b25b      	sxtb	r3, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e001      	b.n	8005c66 <put_fat+0xa2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	0a5b      	lsrs	r3, r3, #9
 8005c78:	4413      	add	r3, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fe42 	bl	8005906 <move_window>
 8005c82:	4603      	mov	r3, r0
 8005c84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d178      	bne.n	8005d7e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c98:	4413      	add	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <put_fat+0xea>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	e00e      	b.n	8005ccc <put_fat+0x108>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b25b      	sxtb	r3, r3
 8005cb4:	f023 030f 	bic.w	r3, r3, #15
 8005cb8:	b25a      	sxtb	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	b25b      	sxtb	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	70da      	strb	r2, [r3, #3]
			break;
 8005cd6:	e057      	b.n	8005d88 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	4413      	add	r3, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fe0e 	bl	8005906 <move_window>
 8005cea:	4603      	mov	r3, r0
 8005cec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cee:	7ffb      	ldrb	r3, [r7, #31]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d146      	bne.n	8005d82 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d02:	4413      	add	r3, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	b292      	uxth	r2, r2
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fcb1 	bl	8005672 <st_word>
			fs->wflag = 1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	70da      	strb	r2, [r3, #3]
			break;
 8005d16:	e037      	b.n	8005d88 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	09db      	lsrs	r3, r3, #7
 8005d20:	4413      	add	r3, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fdee 	bl	8005906 <move_window>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d128      	bne.n	8005d86 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fc6e 	bl	800562c <ld_dword>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d56:	4323      	orrs	r3, r4
 8005d58:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d68:	4413      	add	r3, r2
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fc9b 	bl	80056a8 <st_dword>
			fs->wflag = 1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	70da      	strb	r2, [r3, #3]
			break;
 8005d78:	e006      	b.n	8005d88 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005d7a:	bf00      	nop
 8005d7c:	e004      	b.n	8005d88 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005d86:	bf00      	nop
		}
	}
	return res;
 8005d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}

08005d92 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b088      	sub	sp, #32
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d904      	bls.n	8005db8 <remove_chain+0x26>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d301      	bcc.n	8005dbc <remove_chain+0x2a>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e04b      	b.n	8005e54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	69b8      	ldr	r0, [r7, #24]
 8005dca:	f7ff fefb 	bl	8005bc4 <put_fat>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005dd2:	7ffb      	ldrb	r3, [r7, #31]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <remove_chain+0x4a>
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	e03b      	b.n	8005e54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff fe4b 	bl	8005a7a <get_fat>
 8005de4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d031      	beq.n	8005e50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <remove_chain+0x64>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e02e      	b.n	8005e54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d101      	bne.n	8005e02 <remove_chain+0x70>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e028      	b.n	8005e54 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e02:	2200      	movs	r2, #0
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	69b8      	ldr	r0, [r7, #24]
 8005e08:	f7ff fedc 	bl	8005bc4 <put_fat>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <remove_chain+0x88>
 8005e16:	7ffb      	ldrb	r3, [r7, #31]
 8005e18:	e01c      	b.n	8005e54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	3b02      	subs	r3, #2
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d20b      	bcs.n	8005e40 <remove_chain+0xae>
			fs->free_clst++;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	791b      	ldrb	r3, [r3, #4]
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d3c6      	bcc.n	8005ddc <remove_chain+0x4a>
 8005e4e:	e000      	b.n	8005e52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005e50:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10d      	bne.n	8005e8e <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <create_chain+0x2c>
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d31b      	bcc.n	8005ec0 <create_chain+0x64>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e018      	b.n	8005ec0 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fdf2 	bl	8005a7a <get_fat>
 8005e96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d801      	bhi.n	8005ea2 <create_chain+0x46>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0a9      	b.n	8005ff6 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d101      	bne.n	8005eae <create_chain+0x52>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	e0a3      	b.n	8005ff6 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d201      	bcs.n	8005ebc <create_chain+0x60>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	e09c      	b.n	8005ff6 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <create_chain+0x70>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e094      	b.n	8005ff6 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d129      	bne.n	8005f2c <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d301      	bcc.n	8005eec <create_chain+0x90>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fdc3 	bl	8005a7a <get_fat>
 8005ef4:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d003      	beq.n	8005f04 <create_chain+0xa8>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d101      	bne.n	8005f08 <create_chain+0xac>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	e076      	b.n	8005ff6 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d906      	bls.n	8005f28 <create_chain+0xcc>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d201      	bcs.n	8005f28 <create_chain+0xcc>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d129      	bne.n	8005f86 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d307      	bcc.n	8005f56 <create_chain+0xfa>
					ncl = 2;
 8005f46:	2302      	movs	r3, #2
 8005f48:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d901      	bls.n	8005f56 <create_chain+0xfa>
 8005f52:	2300      	movs	r3, #0
 8005f54:	e04f      	b.n	8005ff6 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fd8e 	bl	8005a7a <get_fat>
 8005f5e:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d003      	beq.n	8005f74 <create_chain+0x118>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d101      	bne.n	8005f78 <create_chain+0x11c>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	e03e      	b.n	8005ff6 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1da      	bne.n	8005f36 <create_chain+0xda>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e038      	b.n	8005ff6 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8005f84:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	6938      	ldr	r0, [r7, #16]
 8005f8e:	f7ff fe19 	bl	8005bc4 <put_fat>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <create_chain+0x154>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d006      	beq.n	8005fb0 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6938      	ldr	r0, [r7, #16]
 8005fa8:	f7ff fe0c 	bl	8005bc4 <put_fat>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d116      	bne.n	8005fe4 <create_chain+0x188>
		fs->last_clst = ncl;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	3b02      	subs	r3, #2
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d804      	bhi.n	8005fd4 <create_chain+0x178>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	711a      	strb	r2, [r3, #4]
 8005fe2:	e007      	b.n	8005ff4 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <create_chain+0x194>
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	e000      	b.n	8005ff2 <create_chain+0x196>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ff4:	69fb      	ldr	r3, [r7, #28]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fc40 	bl	800588e <sync_window>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <dir_clear+0x1a>
 8006014:	2301      	movs	r3, #1
 8006016:	e036      	b.n	8006086 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fd0e 	bl	8005a3c <clst2sect>
 8006020:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3330      	adds	r3, #48	; 0x30
 800602c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fb85 	bl	8005742 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3330      	adds	r3, #48	; 0x30
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	2301      	movs	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	e003      	b.n	8006050 <dir_clear+0x52>
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	895b      	ldrh	r3, [r3, #10]
 8006054:	461a      	mov	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4293      	cmp	r3, r2
 800605a:	d20b      	bcs.n	8006074 <dir_clear+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7858      	ldrb	r0, [r3, #1]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	441a      	add	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	f7ff f87b 	bl	8005164 <disk_write>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0e9      	beq.n	8006048 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	895b      	ldrh	r3, [r3, #10]
 8006078:	461a      	mov	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	4293      	cmp	r3, r2
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a4:	d204      	bcs.n	80060b0 <dir_sdi+0x22>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80060b0:	2302      	movs	r3, #2
 80060b2:	e063      	b.n	800617c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <dir_sdi+0x46>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d902      	bls.n	80060d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	8912      	ldrh	r2, [r2, #8]
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d301      	bcc.n	80060ea <dir_sdi+0x5c>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e048      	b.n	800617c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	619a      	str	r2, [r3, #24]
 80060f2:	e029      	b.n	8006148 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	895b      	ldrh	r3, [r3, #10]
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80060fc:	e019      	b.n	8006132 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fcb9 	bl	8005a7a <get_fat>
 8006108:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d101      	bne.n	8006116 <dir_sdi+0x88>
 8006112:	2301      	movs	r3, #1
 8006114:	e032      	b.n	800617c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d904      	bls.n	8006126 <dir_sdi+0x98>
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	429a      	cmp	r2, r3
 8006124:	d301      	bcc.n	800612a <dir_sdi+0x9c>
 8006126:	2302      	movs	r3, #2
 8006128:	e028      	b.n	800617c <dir_sdi+0xee>
			ofs -= csz;
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	429a      	cmp	r2, r3
 8006138:	d2e1      	bcs.n	80060fe <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	6938      	ldr	r0, [r7, #16]
 800613e:	f7ff fc7d 	bl	8005a3c <clst2sect>
 8006142:	4602      	mov	r2, r0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <dir_sdi+0xcc>
 8006156:	2302      	movs	r3, #2
 8006158:	e010      	b.n	800617c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	0a5b      	lsrs	r3, r3, #9
 8006162:	441a      	add	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	3320      	adds	r3, #32
 800619a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a2:	d302      	bcc.n	80061aa <dir_next+0x26>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <dir_next+0x32>
 80061b2:	2304      	movs	r3, #4
 80061b4:	e078      	b.n	80062a8 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d166      	bne.n	800628e <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	8912      	ldrh	r2, [r2, #8]
 80061da:	4293      	cmp	r3, r2
 80061dc:	d357      	bcc.n	800628e <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	619a      	str	r2, [r3, #24]
 80061e4:	2304      	movs	r3, #4
 80061e6:	e05f      	b.n	80062a8 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0a5b      	lsrs	r3, r3, #9
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	8952      	ldrh	r2, [r2, #10]
 80061f0:	3a01      	subs	r2, #1
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d14a      	bne.n	800628e <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7ff fc3a 	bl	8005a7a <get_fat>
 8006206:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d801      	bhi.n	8006212 <dir_next+0x8e>
 800620e:	2302      	movs	r3, #2
 8006210:	e04a      	b.n	80062a8 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d101      	bne.n	800621e <dir_next+0x9a>
 800621a:	2301      	movs	r3, #1
 800621c:	e044      	b.n	80062a8 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	429a      	cmp	r2, r3
 8006226:	d328      	bcc.n	800627a <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]
 8006234:	2304      	movs	r3, #4
 8006236:	e037      	b.n	80062a8 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7ff fe0b 	bl	8005e5c <create_chain>
 8006246:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <dir_next+0xce>
 800624e:	2307      	movs	r3, #7
 8006250:	e02a      	b.n	80062a8 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <dir_next+0xd8>
 8006258:	2302      	movs	r3, #2
 800625a:	e025      	b.n	80062a8 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d101      	bne.n	8006268 <dir_next+0xe4>
 8006264:	2301      	movs	r3, #1
 8006266:	e01f      	b.n	80062a8 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8006268:	6979      	ldr	r1, [r7, #20]
 800626a:	6938      	ldr	r0, [r7, #16]
 800626c:	f7ff fec7 	bl	8005ffe <dir_clear>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <dir_next+0xf6>
 8006276:	2301      	movs	r3, #1
 8006278:	e016      	b.n	80062a8 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8006280:	6979      	ldr	r1, [r7, #20]
 8006282:	6938      	ldr	r0, [r7, #16]
 8006284:	f7ff fbda 	bl	8005a3c <clst2sect>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80062c0:	2100      	movs	r1, #0
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fee3 	bl	800608e <dir_sdi>
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d12b      	bne.n	800632a <dir_alloc+0x7a>
		n = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	4619      	mov	r1, r3
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff fb12 	bl	8005906 <move_window>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80062e6:	7dfb      	ldrb	r3, [r7, #23]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11d      	bne.n	8006328 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2be5      	cmp	r3, #229	; 0xe5
 80062f4:	d004      	beq.n	8006300 <dir_alloc+0x50>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3301      	adds	r3, #1
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d102      	bne.n	8006314 <dir_alloc+0x64>
 800630e:	e00c      	b.n	800632a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006310:	2300      	movs	r3, #0
 8006312:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006314:	2101      	movs	r1, #1
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff ff34 	bl	8006184 <dir_next>
 800631c:	4603      	mov	r3, r0
 800631e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0d7      	beq.n	80062d6 <dir_alloc+0x26>
 8006326:	e000      	b.n	800632a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006328:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d101      	bne.n	8006334 <dir_alloc+0x84>
 8006330:	2307      	movs	r3, #7
 8006332:	75fb      	strb	r3, [r7, #23]
	return res;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	331a      	adds	r3, #26
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f955 	bl	80055fc <ld_word>
 8006352:	4603      	mov	r3, r0
 8006354:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b03      	cmp	r3, #3
 800635c:	d109      	bne.n	8006372 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f94a 	bl	80055fc <ld_word>
 8006368:	4603      	mov	r3, r0
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006372:	68fb      	ldr	r3, [r7, #12]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	331a      	adds	r3, #26
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	b292      	uxth	r2, r2
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff f96d 	bl	8005672 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d109      	bne.n	80063b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f103 0214 	add.w	r2, r3, #20
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7ff f95f 	bl	8005672 <st_word>
	}
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80063c6:	2304      	movs	r3, #4
 80063c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80063d0:	e03c      	b.n	800644c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6938      	ldr	r0, [r7, #16]
 80063da:	f7ff fa94 	bl	8005906 <move_window>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d136      	bne.n	8006456 <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80063f6:	2304      	movs	r3, #4
 80063f8:	75fb      	strb	r3, [r7, #23]
 80063fa:	e031      	b.n	8006460 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	330b      	adds	r3, #11
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006408:	73bb      	strb	r3, [r7, #14]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7bba      	ldrb	r2, [r7, #14]
 800640e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2be5      	cmp	r3, #229	; 0xe5
 8006414:	d011      	beq.n	800643a <dir_read+0x7e>
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b2e      	cmp	r3, #46	; 0x2e
 800641a:	d00e      	beq.n	800643a <dir_read+0x7e>
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d00b      	beq.n	800643a <dir_read+0x7e>
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	f023 0320 	bic.w	r3, r3, #32
 8006428:	2b08      	cmp	r3, #8
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fea1 	bl	8006184 <dir_next>
 8006442:	4603      	mov	r3, r0
 8006444:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <dir_read+0xa2>
	while (dp->sect) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1be      	bne.n	80063d2 <dir_read+0x16>
 8006454:	e004      	b.n	8006460 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <dir_read+0xa4>
				break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <dir_read+0xa4>
		if (res != FR_OK) break;
 800645e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <dir_read+0xb0>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]
	return res;
 800646c:	7dfb      	ldrb	r3, [r7, #23]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006484:	2100      	movs	r1, #0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fe01 	bl	800608e <dir_sdi>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <dir_find+0x24>
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	e03e      	b.n	8006518 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	4619      	mov	r1, r3
 80064a0:	6938      	ldr	r0, [r7, #16]
 80064a2:	f7ff fa30 	bl	8005906 <move_window>
 80064a6:	4603      	mov	r3, r0
 80064a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d12f      	bne.n	8006510 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <dir_find+0x4e>
 80064be:	2304      	movs	r3, #4
 80064c0:	75fb      	strb	r3, [r7, #23]
 80064c2:	e028      	b.n	8006516 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	330b      	adds	r3, #11
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	330b      	adds	r3, #11
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <dir_find+0x86>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69d8      	ldr	r0, [r3, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3320      	adds	r3, #32
 80064ee:	220b      	movs	r2, #11
 80064f0:	4619      	mov	r1, r3
 80064f2:	f7ff f940 	bl	8005776 <mem_cmp>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fe40 	bl	8006184 <dir_next>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0c5      	beq.n	800649a <dir_find+0x24>
 800650e:	e002      	b.n	8006516 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006510:	bf00      	nop
 8006512:	e000      	b.n	8006516 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006514:	bf00      	nop

	return res;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800652e:	2101      	movs	r1, #1
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff febd 	bl	80062b0 <dir_alloc>
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d11c      	bne.n	800657a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	4619      	mov	r1, r3
 8006546:	68b8      	ldr	r0, [r7, #8]
 8006548:	f7ff f9dd 	bl	8005906 <move_window>
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d111      	bne.n	800657a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2220      	movs	r2, #32
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff f8ef 	bl	8005742 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69d8      	ldr	r0, [r3, #28]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3320      	adds	r3, #32
 800656c:	220b      	movs	r2, #11
 800656e:	4619      	mov	r1, r3
 8006570:	f7ff f8c6 	bl	8005700 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2201      	movs	r2, #1
 8006578:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff f9b4 	bl	8005906 <move_window>
 800659e:	4603      	mov	r3, r0
 80065a0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	22e5      	movs	r2, #229	; 0xe5
 80065ae:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80065b6:	7afb      	ldrb	r3, [r7, #11]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d052      	beq.n	800667e <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 80065e0:	e021      	b.n	8006626 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	6179      	str	r1, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d100      	bne.n	80065fa <get_fileinfo+0x3a>
 80065f8:	e015      	b.n	8006626 <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b05      	cmp	r3, #5
 80065fe:	d101      	bne.n	8006604 <get_fileinfo+0x44>
 8006600:	23e5      	movs	r3, #229	; 0xe5
 8006602:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b09      	cmp	r3, #9
 8006608:	d106      	bne.n	8006618 <get_fileinfo+0x58>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	613a      	str	r2, [r7, #16]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	4413      	add	r3, r2
 8006614:	222e      	movs	r2, #46	; 0x2e
 8006616:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	613a      	str	r2, [r7, #16]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	4413      	add	r3, r2
 8006622:	7bfa      	ldrb	r2, [r7, #15]
 8006624:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b0a      	cmp	r3, #10
 800662a:	d9da      	bls.n	80065e2 <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	3309      	adds	r3, #9
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	7ada      	ldrb	r2, [r3, #11]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	331c      	adds	r3, #28
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe ffef 	bl	800562c <ld_dword>
 800664e:	4602      	mov	r2, r0
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	3316      	adds	r3, #22
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe ffce 	bl	80055fc <ld_word>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	3318      	adds	r3, #24
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe ffc4 	bl	80055fc <ld_word>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	809a      	strh	r2, [r3, #4]
 800667c:	e000      	b.n	8006680 <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800667e:	bf00      	nop
}
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3320      	adds	r3, #32
 800669c:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 800669e:	220b      	movs	r2, #11
 80066a0:	2120      	movs	r1, #32
 80066a2:	6938      	ldr	r0, [r7, #16]
 80066a4:	f7ff f84d 	bl	8005742 <mem_set>
	si = i = 0; ni = 8;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	2308      	movs	r3, #8
 80066b2:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	61fa      	str	r2, [r7, #28]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d97c      	bls.n	80067c6 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80066cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d0:	2b2f      	cmp	r3, #47	; 0x2f
 80066d2:	d007      	beq.n	80066e4 <create_name+0x5c>
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d8:	2b5c      	cmp	r3, #92	; 0x5c
 80066da:	d110      	bne.n	80066fe <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80066dc:	e002      	b.n	80066e4 <create_name+0x5c>
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b2f      	cmp	r3, #47	; 0x2f
 80066ee:	d0f6      	beq.n	80066de <create_name+0x56>
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b5c      	cmp	r3, #92	; 0x5c
 80066fa:	d0f0      	beq.n	80066de <create_name+0x56>
			break;
 80066fc:	e064      	b.n	80067c8 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80066fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006702:	2b2e      	cmp	r3, #46	; 0x2e
 8006704:	d003      	beq.n	800670e <create_name+0x86>
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	429a      	cmp	r2, r3
 800670c:	d30d      	bcc.n	800672a <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	2b0b      	cmp	r3, #11
 8006712:	d003      	beq.n	800671c <create_name+0x94>
 8006714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006718:	2b2e      	cmp	r3, #46	; 0x2e
 800671a:	d001      	beq.n	8006720 <create_name+0x98>
 800671c:	2306      	movs	r3, #6
 800671e:	e06f      	b.n	8006800 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8006720:	2308      	movs	r3, #8
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	230b      	movs	r3, #11
 8006726:	623b      	str	r3, [r7, #32]
			continue;
 8006728:	e04c      	b.n	80067c4 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800672a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff f863 	bl	80057fa <dbc_1st>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d024      	beq.n	8006784 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	61fa      	str	r2, [r7, #28]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff f875 	bl	800583a <dbc_2nd>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <create_name+0xd8>
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	3b01      	subs	r3, #1
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d301      	bcc.n	8006764 <create_name+0xdc>
 8006760:	2306      	movs	r3, #6
 8006762:	e04d      	b.n	8006800 <create_name+0x178>
			sfn[i++] = c;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	61ba      	str	r2, [r7, #24]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4413      	add	r3, r2
 800676e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006772:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	61ba      	str	r2, [r7, #24]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	e797      	b.n	80066b4 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006788:	4619      	mov	r1, r3
 800678a:	481f      	ldr	r0, [pc, #124]	; (8006808 <create_name+0x180>)
 800678c:	f7ff f81a 	bl	80057c4 <chk_chr>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <create_name+0x112>
 8006796:	2306      	movs	r3, #6
 8006798:	e032      	b.n	8006800 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800679a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800679e:	2b60      	cmp	r3, #96	; 0x60
 80067a0:	d908      	bls.n	80067b4 <create_name+0x12c>
 80067a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067a6:	2b7a      	cmp	r3, #122	; 0x7a
 80067a8:	d804      	bhi.n	80067b4 <create_name+0x12c>
 80067aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ae:	3b20      	subs	r3, #32
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	61ba      	str	r2, [r7, #24]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80067c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 80067c4:	e776      	b.n	80066b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80067c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	441a      	add	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <create_name+0x154>
 80067d8:	2306      	movs	r3, #6
 80067da:	e011      	b.n	8006800 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2be5      	cmp	r3, #229	; 0xe5
 80067e2:	d102      	bne.n	80067ea <create_name+0x162>
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2205      	movs	r2, #5
 80067e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d801      	bhi.n	80067f6 <create_name+0x16e>
 80067f2:	2204      	movs	r2, #4
 80067f4:	e000      	b.n	80067f8 <create_name+0x170>
 80067f6:	2200      	movs	r2, #0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	330b      	adds	r3, #11
 80067fc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80067fe:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8006800:	4618      	mov	r0, r3
 8006802:	3728      	adds	r7, #40	; 0x28
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	0800feec 	.word	0x0800feec

0800680c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800681c:	e002      	b.n	8006824 <follow_path+0x18>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b2f      	cmp	r3, #47	; 0x2f
 800682a:	d0f8      	beq.n	800681e <follow_path+0x12>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b5c      	cmp	r3, #92	; 0x5c
 8006832:	d0f4      	beq.n	800681e <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b1f      	cmp	r3, #31
 8006840:	d80a      	bhi.n	8006858 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff fc1e 	bl	800608e <dir_sdi>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]
 8006856:	e043      	b.n	80068e0 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006858:	463b      	mov	r3, r7
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ff13 	bl	8006688 <create_name>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d134      	bne.n	80068d6 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fe02 	bl	8006476 <dir_find>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800687c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d127      	bne.n	80068da <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d122      	bne.n	80068da <follow_path+0xce>
 8006894:	2305      	movs	r3, #5
 8006896:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006898:	e01f      	b.n	80068da <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11c      	bne.n	80068de <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	799b      	ldrb	r3, [r3, #6]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 80068b0:	2305      	movs	r3, #5
 80068b2:	75fb      	strb	r3, [r7, #23]
 80068b4:	e014      	b.n	80068e0 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	4413      	add	r3, r2
 80068c6:	4619      	mov	r1, r3
 80068c8:	6938      	ldr	r0, [r7, #16]
 80068ca:	f7ff fd38 	bl	800633e <ld_clust>
 80068ce:	4602      	mov	r2, r0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068d4:	e7c0      	b.n	8006858 <follow_path+0x4c>
			if (res != FR_OK) break;
 80068d6:	bf00      	nop
 80068d8:	e002      	b.n	80068e0 <follow_path+0xd4>
				break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068de:	bf00      	nop
			}
		}
	}

	return res;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b089      	sub	sp, #36	; 0x24
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <get_ldnumber+0x22>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	e02d      	b.n	8006968 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	61fa      	str	r2, [r7, #28]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b20      	cmp	r3, #32
 800691a:	d902      	bls.n	8006922 <get_ldnumber+0x38>
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b3a      	cmp	r3, #58	; 0x3a
 8006920:	d1f4      	bne.n	800690c <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b3a      	cmp	r3, #58	; 0x3a
 8006926:	d11c      	bne.n	8006962 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8006928:	2301      	movs	r3, #1
 800692a:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b2f      	cmp	r3, #47	; 0x2f
 8006932:	d90c      	bls.n	800694e <get_ldnumber+0x64>
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b39      	cmp	r3, #57	; 0x39
 800693a:	d808      	bhi.n	800694e <get_ldnumber+0x64>
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	3302      	adds	r3, #2
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	429a      	cmp	r2, r3
 8006944:	d103      	bne.n	800694e <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	3b30      	subs	r3, #48	; 0x30
 800694c:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc04      	bgt.n	800695e <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	e002      	b.n	8006968 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3724      	adds	r7, #36	; 0x24
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	70da      	strb	r2, [r3, #3]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ffb9 	bl	8005906 <move_window>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <check_fs+0x2a>
 800699a:	2304      	movs	r3, #4
 800699c:	e038      	b.n	8006a10 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3330      	adds	r3, #48	; 0x30
 80069a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fe28 	bl	80055fc <ld_word>
 80069ac:	4603      	mov	r3, r0
 80069ae:	461a      	mov	r2, r3
 80069b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d001      	beq.n	80069bc <check_fs+0x48>
 80069b8:	2303      	movs	r3, #3
 80069ba:	e029      	b.n	8006a10 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069c2:	2be9      	cmp	r3, #233	; 0xe9
 80069c4:	d009      	beq.n	80069da <check_fs+0x66>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069cc:	2beb      	cmp	r3, #235	; 0xeb
 80069ce:	d004      	beq.n	80069da <check_fs+0x66>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069d6:	2be8      	cmp	r3, #232	; 0xe8
 80069d8:	d119      	bne.n	8006a0e <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3330      	adds	r3, #48	; 0x30
 80069de:	3336      	adds	r3, #54	; 0x36
 80069e0:	2203      	movs	r2, #3
 80069e2:	490d      	ldr	r1, [pc, #52]	; (8006a18 <check_fs+0xa4>)
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe fec6 	bl	8005776 <mem_cmp>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <check_fs+0x80>
 80069f0:	2300      	movs	r3, #0
 80069f2:	e00d      	b.n	8006a10 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3330      	adds	r3, #48	; 0x30
 80069f8:	3352      	adds	r3, #82	; 0x52
 80069fa:	2205      	movs	r2, #5
 80069fc:	4907      	ldr	r1, [pc, #28]	; (8006a1c <check_fs+0xa8>)
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe feb9 	bl	8005776 <mem_cmp>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <check_fs+0x9a>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e000      	b.n	8006a10 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8006a0e:	2302      	movs	r3, #2
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	0800fefc 	.word	0x0800fefc
 8006a1c:	0800ff00 	.word	0x0800ff00

08006a20 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b096      	sub	sp, #88	; 0x58
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff ff58 	bl	80068ea <get_ldnumber>
 8006a3a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da01      	bge.n	8006a46 <find_volume+0x26>
 8006a42:	230b      	movs	r3, #11
 8006a44:	e238      	b.n	8006eb8 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006a46:	4aa8      	ldr	r2, [pc, #672]	; (8006ce8 <find_volume+0x2c8>)
 8006a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <find_volume+0x3a>
 8006a56:	230c      	movs	r3, #12
 8006a58:	e22e      	b.n	8006eb8 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01a      	beq.n	8006aa6 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe faf5 	bl	8005064 <disk_status>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10c      	bne.n	8006aa6 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <find_volume+0x82>
 8006a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a96:	f003 0304 	and.w	r3, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	e20a      	b.n	8006eb8 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e208      	b.n	8006eb8 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fe f9e9 	bl	8004e90 <disk_initialize>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e1f1      	b.n	8006eb8 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d007      	beq.n	8006aea <find_volume+0xca>
 8006ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006ae6:	230a      	movs	r3, #10
 8006ae8:	e1e6      	b.n	8006eb8 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006af2:	f7ff ff3f 	bl	8006974 <check_fs>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d14b      	bne.n	8006b9c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b04:	2300      	movs	r3, #0
 8006b06:	643b      	str	r3, [r7, #64]	; 0x40
 8006b08:	e01f      	b.n	8006b4a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006b18:	4413      	add	r3, r2
 8006b1a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	3304      	adds	r3, #4
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <find_volume+0x114>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	3308      	adds	r3, #8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fd7e 	bl	800562c <ld_dword>
 8006b30:	4602      	mov	r2, r0
 8006b32:	e000      	b.n	8006b36 <find_volume+0x116>
 8006b34:	2200      	movs	r2, #0
 8006b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006b3e:	440b      	add	r3, r1
 8006b40:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	3301      	adds	r3, #1
 8006b48:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d9dc      	bls.n	8006b0a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006b50:	2300      	movs	r3, #0
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8006b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <find_volume+0x140>
 8006b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b68:	4413      	add	r3, r2
 8006b6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <find_volume+0x162>
 8006b76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b7a:	f7ff fefb 	bl	8006974 <check_fs>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	e000      	b.n	8006b84 <find_volume+0x164>
 8006b82:	2303      	movs	r3, #3
 8006b84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d905      	bls.n	8006b9c <find_volume+0x17c>
 8006b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b92:	3301      	adds	r3, #1
 8006b94:	643b      	str	r3, [r7, #64]	; 0x40
 8006b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d9e1      	bls.n	8006b60 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d101      	bne.n	8006ba8 <find_volume+0x188>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e187      	b.n	8006eb8 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d901      	bls.n	8006bb4 <find_volume+0x194>
 8006bb0:	230d      	movs	r3, #13
 8006bb2:	e181      	b.n	8006eb8 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	3330      	adds	r3, #48	; 0x30
 8006bb8:	330b      	adds	r3, #11
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fd1e 	bl	80055fc <ld_word>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc6:	d001      	beq.n	8006bcc <find_volume+0x1ac>
 8006bc8:	230d      	movs	r3, #13
 8006bca:	e175      	b.n	8006eb8 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	3330      	adds	r3, #48	; 0x30
 8006bd0:	3316      	adds	r3, #22
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fd12 	bl	80055fc <ld_word>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <find_volume+0x1d0>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	3330      	adds	r3, #48	; 0x30
 8006be6:	3324      	adds	r3, #36	; 0x24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fd1f 	bl	800562c <ld_dword>
 8006bee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	789b      	ldrb	r3, [r3, #2]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d005      	beq.n	8006c14 <find_volume+0x1f4>
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	789b      	ldrb	r3, [r3, #2]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d001      	beq.n	8006c14 <find_volume+0x1f4>
 8006c10:	230d      	movs	r3, #13
 8006c12:	e151      	b.n	8006eb8 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	789b      	ldrb	r3, [r3, #2]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1c:	fb02 f303 	mul.w	r3, r2, r3
 8006c20:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	895b      	ldrh	r3, [r3, #10]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <find_volume+0x228>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	895b      	ldrh	r3, [r3, #10]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	895b      	ldrh	r3, [r3, #10]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <find_volume+0x22c>
 8006c48:	230d      	movs	r3, #13
 8006c4a:	e135      	b.n	8006eb8 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	3330      	adds	r3, #48	; 0x30
 8006c50:	3311      	adds	r3, #17
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fcd2 	bl	80055fc <ld_word>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	891b      	ldrh	r3, [r3, #8]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <find_volume+0x252>
 8006c6e:	230d      	movs	r3, #13
 8006c70:	e122      	b.n	8006eb8 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	3330      	adds	r3, #48	; 0x30
 8006c76:	3313      	adds	r3, #19
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe fcbf 	bl	80055fc <ld_word>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <find_volume+0x276>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	3330      	adds	r3, #48	; 0x30
 8006c8c:	3320      	adds	r3, #32
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fccc 	bl	800562c <ld_dword>
 8006c94:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	3330      	adds	r3, #48	; 0x30
 8006c9a:	330e      	adds	r3, #14
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fcad 	bl	80055fc <ld_word>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ca6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <find_volume+0x290>
 8006cac:	230d      	movs	r3, #13
 8006cae:	e103      	b.n	8006eb8 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006cb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb4:	4413      	add	r3, r2
 8006cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb8:	8912      	ldrh	r2, [r2, #8]
 8006cba:	0912      	lsrs	r2, r2, #4
 8006cbc:	b292      	uxth	r2, r2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d201      	bcs.n	8006cce <find_volume+0x2ae>
 8006cca:	230d      	movs	r3, #13
 8006ccc:	e0f4      	b.n	8006eb8 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd6:	8952      	ldrh	r2, [r2, #10]
 8006cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <find_volume+0x2cc>
 8006ce4:	230d      	movs	r3, #13
 8006ce6:	e0e7      	b.n	8006eb8 <find_volume+0x498>
 8006ce8:	20000270 	.word	0x20000270
		fmt = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	4a72      	ldr	r2, [pc, #456]	; (8006ec0 <find_volume+0x4a0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d802      	bhi.n	8006d00 <find_volume+0x2e0>
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d802      	bhi.n	8006d10 <find_volume+0x2f0>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d802      	bhi.n	8006d20 <find_volume+0x300>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8006d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <find_volume+0x30c>
 8006d28:	230d      	movs	r3, #13
 8006d2a:	e0c5      	b.n	8006eb8 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	1c9a      	adds	r2, r3, #2
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d38:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006d3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3e:	441a      	add	r2, r3
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006d44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	441a      	add	r2, r3
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d11e      	bne.n	8006d94 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	332a      	adds	r3, #42	; 0x2a
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fc4d 	bl	80055fc <ld_word>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <find_volume+0x34c>
 8006d68:	230d      	movs	r3, #13
 8006d6a:	e0a5      	b.n	8006eb8 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	891b      	ldrh	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <find_volume+0x358>
 8006d74:	230d      	movs	r3, #13
 8006d76:	e09f      	b.n	8006eb8 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	3330      	adds	r3, #48	; 0x30
 8006d7c:	332c      	adds	r3, #44	; 0x2c
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fc54 	bl	800562c <ld_dword>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	647b      	str	r3, [r7, #68]	; 0x44
 8006d92:	e01f      	b.n	8006dd4 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	891b      	ldrh	r3, [r3, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <find_volume+0x380>
 8006d9c:	230d      	movs	r3, #13
 8006d9e:	e08b      	b.n	8006eb8 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	6a1a      	ldr	r2, [r3, #32]
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	441a      	add	r2, r3
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d103      	bne.n	8006dbc <find_volume+0x39c>
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	e00a      	b.n	8006dd2 <find_volume+0x3b2>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	695a      	ldr	r2, [r3, #20]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	085a      	lsrs	r2, r3, #1
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dda:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006dde:	0a5b      	lsrs	r3, r3, #9
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d201      	bcs.n	8006de8 <find_volume+0x3c8>
 8006de4:	230d      	movs	r3, #13
 8006de6:	e067      	b.n	8006eb8 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295
 8006dee:	611a      	str	r2, [r3, #16]
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	2280      	movs	r2, #128	; 0x80
 8006dfc:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006dfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d149      	bne.n	8006e9a <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	3330      	adds	r3, #48	; 0x30
 8006e0a:	3330      	adds	r3, #48	; 0x30
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fbf5 	bl	80055fc <ld_word>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d140      	bne.n	8006e9a <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e20:	f7fe fd71 	bl	8005906 <move_window>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d137      	bne.n	8006e9a <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	3330      	adds	r3, #48	; 0x30
 8006e34:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fbdf 	bl	80055fc <ld_word>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d127      	bne.n	8006e9a <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	3330      	adds	r3, #48	; 0x30
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fbec 	bl	800562c <ld_dword>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <find_volume+0x4a4>)
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d11e      	bne.n	8006e9a <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	3330      	adds	r3, #48	; 0x30
 8006e60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe fbe1 	bl	800562c <ld_dword>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <find_volume+0x4a8>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d113      	bne.n	8006e9a <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	3330      	adds	r3, #48	; 0x30
 8006e76:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fbd6 	bl	800562c <ld_dword>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	3330      	adds	r3, #48	; 0x30
 8006e8a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fbcc 	bl	800562c <ld_dword>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006ea0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <find_volume+0x4ac>)
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <find_volume+0x4ac>)
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <find_volume+0x4ac>)
 8006eb0:	881a      	ldrh	r2, [r3, #0]
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3758      	adds	r7, #88	; 0x58
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	0ffffff5 	.word	0x0ffffff5
 8006ec4:	41615252 	.word	0x41615252
 8006ec8:	61417272 	.word	0x61417272
 8006ecc:	20000274 	.word	0x20000274

08006ed0 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006eda:	2309      	movs	r3, #9
 8006edc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01c      	beq.n	8006f1e <validate+0x4e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d018      	beq.n	8006f1e <validate+0x4e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d013      	beq.n	8006f1e <validate+0x4e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	889a      	ldrh	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d10c      	bne.n	8006f1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe f8aa 	bl	8005064 <disk_status>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <validate+0x4e>
			res = FR_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <validate+0x5a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	e000      	b.n	8006f2c <validate+0x5c>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	6013      	str	r3, [r2, #0]
	return res;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006f4e:	f107 0310 	add.w	r3, r7, #16
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fcc9 	bl	80068ea <get_ldnumber>
 8006f58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	da01      	bge.n	8006f64 <f_mount+0x28>
 8006f60:	230b      	movs	r3, #11
 8006f62:	e025      	b.n	8006fb0 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f64:	4a14      	ldr	r2, [pc, #80]	; (8006fb8 <f_mount+0x7c>)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	490b      	ldr	r1, [pc, #44]	; (8006fb8 <f_mount+0x7c>)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <f_mount+0x5e>
 8006f96:	2300      	movs	r3, #0
 8006f98:	e00a      	b.n	8006fb0 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f9a:	f107 010c 	add.w	r1, r7, #12
 8006f9e:	f107 0308 	add.w	r3, r7, #8
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fd3b 	bl	8006a20 <find_volume>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000270 	.word	0x20000270

08006fbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006fbc:	b590      	push	{r4, r7, lr}
 8006fbe:	b099      	sub	sp, #100	; 0x64
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <f_open+0x18>
 8006fd0:	2309      	movs	r3, #9
 8006fd2:	e172      	b.n	80072ba <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006fdc:	79fa      	ldrb	r2, [r7, #7]
 8006fde:	f107 0114 	add.w	r1, r7, #20
 8006fe2:	f107 0308 	add.w	r3, r7, #8
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff fd1a 	bl	8006a20 <find_volume>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f040 8156 	bne.w	80072a8 <f_open+0x2ec>
		dj.obj.fs = fs;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	f107 0318 	add.w	r3, r7, #24
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff fbff 	bl	800680c <follow_path>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8007014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800701c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007020:	b25b      	sxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	da02      	bge.n	800702c <f_open+0x70>
				res = FR_INVALID_NAME;
 8007026:	2306      	movs	r3, #6
 8007028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	f003 031c 	and.w	r3, r3, #28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d073      	beq.n	800711e <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8007036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d010      	beq.n	8007060 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800703e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007042:	2b04      	cmp	r3, #4
 8007044:	d107      	bne.n	8007056 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8007046:	f107 0318 	add.w	r3, r7, #24
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fa68 	bl	8006520 <dir_register>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f043 0308 	orr.w	r3, r3, #8
 800705c:	71fb      	strb	r3, [r7, #7]
 800705e:	e010      	b.n	8007082 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007060:	7fbb      	ldrb	r3, [r7, #30]
 8007062:	f003 0311 	and.w	r3, r3, #17
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <f_open+0xb6>
					res = FR_DENIED;
 800706a:	2307      	movs	r3, #7
 800706c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007070:	e007      	b.n	8007082 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <f_open+0xc6>
 800707c:	2308      	movs	r3, #8
 800707e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8007082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007086:	2b00      	cmp	r3, #0
 8007088:	d163      	bne.n	8007152 <f_open+0x196>
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d05e      	beq.n	8007152 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff f94f 	bl	800633e <ld_clust>
 80070a0:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a4:	f103 040e 	add.w	r4, r3, #14
 80070a8:	f7fe fa9e 	bl	80055e8 <get_fattime>
 80070ac:	4603      	mov	r3, r0
 80070ae:	4619      	mov	r1, r3
 80070b0:	4620      	mov	r0, r4
 80070b2:	f7fe faf9 	bl	80056a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b8:	330b      	adds	r3, #11
 80070ba:	2220      	movs	r2, #32
 80070bc:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070c2:	2200      	movs	r2, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff f959 	bl	800637c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80070ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070cc:	331c      	adds	r3, #28
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fae9 	bl	80056a8 <st_dword>
					fs->wflag = 1;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2201      	movs	r2, #1
 80070da:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80070dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d037      	beq.n	8007152 <f_open+0x196>
						dw = fs->winsect;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 80070e8:	f107 0318 	add.w	r3, r7, #24
 80070ec:	2200      	movs	r2, #0
 80070ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fe4e 	bl	8005d92 <remove_chain>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80070fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007100:	2b00      	cmp	r3, #0
 8007102:	d126      	bne.n	8007152 <f_open+0x196>
							res = move_window(fs, dw);
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007108:	4618      	mov	r0, r3
 800710a:	f7fe fbfc 	bl	8005906 <move_window>
 800710e:	4603      	mov	r3, r0
 8007110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007118:	3a01      	subs	r2, #1
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e019      	b.n	8007152 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800711e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007122:	2b00      	cmp	r3, #0
 8007124:	d115      	bne.n	8007152 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8007126:	7fbb      	ldrb	r3, [r7, #30]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <f_open+0x17c>
					res = FR_NO_FILE;
 8007130:	2304      	movs	r3, #4
 8007132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007136:	e00c      	b.n	8007152 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <f_open+0x196>
 8007142:	7fbb      	ldrb	r3, [r7, #30]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <f_open+0x196>
						res = FR_DENIED;
 800714c:	2307      	movs	r3, #7
 800714e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <f_open+0x1b0>
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800716a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8007174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800717a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 8092 	bne.w	80072a8 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff f8d7 	bl	800633e <ld_clust>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	331c      	adds	r3, #28
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fa46 	bl	800562c <ld_dword>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	88da      	ldrh	r2, [r3, #6]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	79fa      	ldrb	r2, [r7, #7]
 80071b8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3328      	adds	r3, #40	; 0x28
 80071d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d4:	2100      	movs	r1, #0
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fab3 	bl	8005742 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d060      	beq.n	80072a8 <f_open+0x2ec>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d05c      	beq.n	80072a8 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	895b      	ldrh	r3, [r3, #10]
 80071fa:	025b      	lsls	r3, r3, #9
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	657b      	str	r3, [r7, #84]	; 0x54
 800720a:	e016      	b.n	800723a <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fc32 	bl	8005a7a <get_fat>
 8007216:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800721a:	2b01      	cmp	r3, #1
 800721c:	d802      	bhi.n	8007224 <f_open+0x268>
 800721e:	2302      	movs	r3, #2
 8007220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d102      	bne.n	8007232 <f_open+0x276>
 800722c:	2301      	movs	r3, #1
 800722e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	657b      	str	r3, [r7, #84]	; 0x54
 800723a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <f_open+0x28e>
 8007242:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007246:	429a      	cmp	r2, r3
 8007248:	d8e0      	bhi.n	800720c <f_open+0x250>
				}
				fp->clust = clst;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800724e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007254:	2b00      	cmp	r3, #0
 8007256:	d127      	bne.n	80072a8 <f_open+0x2ec>
 8007258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	2b00      	cmp	r3, #0
 8007260:	d022      	beq.n	80072a8 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fbe8 	bl	8005a3c <clst2sect>
 800726c:	6478      	str	r0, [r7, #68]	; 0x44
 800726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <f_open+0x2c0>
						res = FR_INT_ERR;
 8007274:	2302      	movs	r3, #2
 8007276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800727a:	e015      	b.n	80072a8 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800727c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727e:	0a5a      	lsrs	r2, r3, #9
 8007280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007282:	441a      	add	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	7858      	ldrb	r0, [r3, #1]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	69da      	ldr	r2, [r3, #28]
 8007296:	2301      	movs	r3, #1
 8007298:	f7fd fefa 	bl	8005090 <disk_read>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <f_open+0x2ec>
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <f_open+0x2fa>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80072b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3764      	adds	r7, #100	; 0x64
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd90      	pop	{r4, r7, pc}

080072c2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b08e      	sub	sp, #56	; 0x38
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f107 0214 	add.w	r2, r7, #20
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fdf4 	bl	8006ed0 <validate>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80072ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <f_read+0x44>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7c5b      	ldrb	r3, [r3, #17]
 80072fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80072fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <f_read+0x4a>
 8007306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800730a:	e109      	b.n	8007520 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	7c1b      	ldrb	r3, [r3, #16]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <f_read+0x5a>
 8007318:	2307      	movs	r3, #7
 800731a:	e101      	b.n	8007520 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	429a      	cmp	r2, r3
 800732e:	f240 80f2 	bls.w	8007516 <f_read+0x254>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8007336:	e0ee      	b.n	8007516 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 80ba 	bne.w	80074ba <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	0a5b      	lsrs	r3, r3, #9
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	8952      	ldrh	r2, [r2, #10]
 8007350:	3a01      	subs	r2, #1
 8007352:	4013      	ands	r3, r2
 8007354:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d123      	bne.n	80073a4 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
 800736a:	e007      	b.n	800737c <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7fe fb80 	bl	8005a7a <get_fat>
 800737a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	2b01      	cmp	r3, #1
 8007380:	d804      	bhi.n	800738c <f_read+0xca>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2202      	movs	r2, #2
 8007386:	745a      	strb	r2, [r3, #17]
 8007388:	2302      	movs	r3, #2
 800738a:	e0c9      	b.n	8007520 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d104      	bne.n	800739e <f_read+0xdc>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	745a      	strb	r2, [r3, #17]
 800739a:	2301      	movs	r3, #1
 800739c:	e0c0      	b.n	8007520 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a2:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7fe fb45 	bl	8005a3c <clst2sect>
 80073b2:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <f_read+0x102>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2202      	movs	r2, #2
 80073be:	745a      	strb	r2, [r3, #17]
 80073c0:	2302      	movs	r3, #2
 80073c2:	e0ad      	b.n	8007520 <f_read+0x25e>
			sect += csect;
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	0a5b      	lsrs	r3, r3, #9
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d039      	beq.n	800744c <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	4413      	add	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	8952      	ldrh	r2, [r2, #10]
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d905      	bls.n	80073f2 <f_read+0x130>
					cc = fs->csize - csect;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	895b      	ldrh	r3, [r3, #10]
 80073ea:	461a      	mov	r2, r3
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	7858      	ldrb	r0, [r3, #1]
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073fc:	f7fd fe48 	bl	8005090 <disk_read>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <f_read+0x14e>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	745a      	strb	r2, [r3, #17]
 800740c:	2301      	movs	r3, #1
 800740e:	e087      	b.n	8007520 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	7c1b      	ldrb	r3, [r3, #16]
 8007414:	b25b      	sxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	da14      	bge.n	8007444 <f_read+0x182>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007424:	429a      	cmp	r2, r3
 8007426:	d90d      	bls.n	8007444 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	025b      	lsls	r3, r3, #9
 8007432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007434:	18d0      	adds	r0, r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3328      	adds	r3, #40	; 0x28
 800743a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743e:	4619      	mov	r1, r3
 8007440:	f7fe f95e 	bl	8005700 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	025b      	lsls	r3, r3, #9
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800744a:	e050      	b.n	80074ee <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	429a      	cmp	r2, r3
 8007454:	d02e      	beq.n	80074b4 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	7c1b      	ldrb	r3, [r3, #16]
 800745a:	b25b      	sxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	da18      	bge.n	8007492 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	7858      	ldrb	r0, [r3, #1]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	69da      	ldr	r2, [r3, #28]
 800746e:	2301      	movs	r3, #1
 8007470:	f7fd fe78 	bl	8005164 <disk_write>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <f_read+0x1c2>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	745a      	strb	r2, [r3, #17]
 8007480:	2301      	movs	r3, #1
 8007482:	e04d      	b.n	8007520 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7c1b      	ldrb	r3, [r3, #16]
 8007488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748c:	b2da      	uxtb	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	7858      	ldrb	r0, [r3, #1]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800749c:	2301      	movs	r3, #1
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	f7fd fdf6 	bl	8005090 <disk_read>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <f_read+0x1f2>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	745a      	strb	r2, [r3, #17]
 80074b0:	2301      	movs	r3, #1
 80074b2:	e035      	b.n	8007520 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80074c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80074c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d901      	bls.n	80074d4 <f_read+0x212>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e2:	4413      	add	r3, r2
 80074e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e6:	4619      	mov	r1, r3
 80074e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ea:	f7fe f909 	bl	8005700 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	441a      	add	r2, r3
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	4413      	add	r3, r2
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f47f af0d 	bne.w	8007338 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3738      	adds	r7, #56	; 0x38
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08c      	sub	sp, #48	; 0x30
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f107 0210 	add.w	r2, r7, #16
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fcc1 	bl	8006ed0 <validate>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007554:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <f_write+0x44>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	7c5b      	ldrb	r3, [r3, #17]
 8007560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <f_write+0x4a>
 800756c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007570:	e13f      	b.n	80077f2 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	7c1b      	ldrb	r3, [r3, #16]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <f_write+0x5a>
 800757e:	2307      	movs	r3, #7
 8007580:	e137      	b.n	80077f2 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	695a      	ldr	r2, [r3, #20]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	441a      	add	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	429a      	cmp	r2, r3
 8007590:	f080 8121 	bcs.w	80077d6 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	43db      	mvns	r3, r3
 800759a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800759c:	e11b      	b.n	80077d6 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f040 80d7 	bne.w	800775a <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	0a5b      	lsrs	r3, r3, #9
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	8952      	ldrh	r2, [r2, #10]
 80075b6:	3a01      	subs	r2, #1
 80075b8:	4013      	ands	r3, r2
 80075ba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d137      	bne.n	8007632 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10c      	bne.n	80075e4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10e      	bne.n	80075f4 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fc3e 	bl	8005e5c <create_chain>
 80075e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80075e2:	e007      	b.n	80075f4 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fc35 	bl	8005e5c <create_chain>
 80075f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 80f2 	beq.w	80077e0 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d104      	bne.n	800760c <f_write+0xe4>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2202      	movs	r2, #2
 8007606:	745a      	strb	r2, [r3, #17]
 8007608:	2302      	movs	r3, #2
 800760a:	e0f2      	b.n	80077f2 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d104      	bne.n	800761e <f_write+0xf6>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	745a      	strb	r2, [r3, #17]
 800761a:	2301      	movs	r3, #1
 800761c:	e0e9      	b.n	80077f2 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007622:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <f_write+0x10a>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007630:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7c1b      	ldrb	r3, [r3, #16]
 8007636:	b25b      	sxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	da18      	bge.n	800766e <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	7858      	ldrb	r0, [r3, #1]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	2301      	movs	r3, #1
 800764c:	f7fd fd8a 	bl	8005164 <disk_write>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <f_write+0x138>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	745a      	strb	r2, [r3, #17]
 800765c:	2301      	movs	r3, #1
 800765e:	e0c8      	b.n	80077f2 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	7c1b      	ldrb	r3, [r3, #16]
 8007664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007668:	b2da      	uxtb	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f7fe f9e0 	bl	8005a3c <clst2sect>
 800767c:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <f_write+0x166>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2202      	movs	r2, #2
 8007688:	745a      	strb	r2, [r3, #17]
 800768a:	2302      	movs	r3, #2
 800768c:	e0b1      	b.n	80077f2 <f_write+0x2ca>
			sect += csect;
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	4413      	add	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	0a5b      	lsrs	r3, r3, #9
 800769a:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03c      	beq.n	800771c <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	4413      	add	r3, r2
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	8952      	ldrh	r2, [r2, #10]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d905      	bls.n	80076bc <f_write+0x194>
					cc = fs->csize - csect;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	895b      	ldrh	r3, [r3, #10]
 80076b4:	461a      	mov	r2, r3
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	7858      	ldrb	r0, [r3, #1]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	69f9      	ldr	r1, [r7, #28]
 80076c6:	f7fd fd4d 	bl	8005164 <disk_write>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d004      	beq.n	80076da <f_write+0x1b2>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	745a      	strb	r2, [r3, #17]
 80076d6:	2301      	movs	r3, #1
 80076d8:	e08b      	b.n	80077f2 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	69da      	ldr	r2, [r3, #28]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	6a3a      	ldr	r2, [r7, #32]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d915      	bls.n	8007714 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	69da      	ldr	r2, [r3, #28]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	025b      	lsls	r3, r3, #9
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007700:	4619      	mov	r1, r3
 8007702:	f7fd fffd 	bl	8005700 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	7c1b      	ldrb	r3, [r3, #16]
 800770a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	025b      	lsls	r3, r3, #9
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800771a:	e03f      	b.n	800779c <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	429a      	cmp	r2, r3
 8007724:	d016      	beq.n	8007754 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	695a      	ldr	r2, [r3, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800772e:	429a      	cmp	r2, r3
 8007730:	d210      	bcs.n	8007754 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	7858      	ldrb	r0, [r3, #1]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800773c:	2301      	movs	r3, #1
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	f7fd fca6 	bl	8005090 <disk_read>
 8007744:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	745a      	strb	r2, [r3, #17]
 8007750:	2301      	movs	r3, #1
 8007752:	e04e      	b.n	80077f2 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007762:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d901      	bls.n	8007774 <f_write+0x24c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	4413      	add	r3, r2
 8007784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007786:	69f9      	ldr	r1, [r7, #28]
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd ffb9 	bl	8005700 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	7c1b      	ldrb	r3, [r3, #16]
 8007792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007796:	b2da      	uxtb	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	607b      	str	r3, [r7, #4]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	441a      	add	r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	4413      	add	r3, r2
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	615a      	str	r2, [r3, #20]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	bf38      	it	cc
 80077d0:	461a      	movcc	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f47f aee0 	bne.w	800759e <f_write+0x76>
 80077de:	e000      	b.n	80077e2 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	7c1b      	ldrb	r3, [r3, #16]
 80077e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3730      	adds	r7, #48	; 0x30
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f107 0208 	add.w	r2, r7, #8
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fb60 	bl	8006ed0 <validate>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d168      	bne.n	80078ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	7c1b      	ldrb	r3, [r3, #16]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d062      	beq.n	80078ec <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7c1b      	ldrb	r3, [r3, #16]
 800782a:	b25b      	sxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	da15      	bge.n	800785c <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	7858      	ldrb	r0, [r3, #1]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	2301      	movs	r3, #1
 8007840:	f7fd fc90 	bl	8005164 <disk_write>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <f_sync+0x54>
 800784a:	2301      	movs	r3, #1
 800784c:	e04f      	b.n	80078ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7c1b      	ldrb	r3, [r3, #16]
 8007852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007856:	b2da      	uxtb	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800785c:	f7fd fec4 	bl	80055e8 <get_fattime>
 8007860:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f7fe f84b 	bl	8005906 <move_window>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d138      	bne.n	80078ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	330b      	adds	r3, #11
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	330b      	adds	r3, #11
 800788a:	f042 0220 	orr.w	r2, r2, #32
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	461a      	mov	r2, r3
 800789c:	68f9      	ldr	r1, [r7, #12]
 800789e:	f7fe fd6d 	bl	800637c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f103 021c 	add.w	r2, r3, #28
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fd fefa 	bl	80056a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3316      	adds	r3, #22
 80078b8:	6939      	ldr	r1, [r7, #16]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fd fef4 	bl	80056a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3312      	adds	r3, #18
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fd fed3 	bl	8005672 <st_word>
					fs->wflag = 1;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2201      	movs	r2, #1
 80078d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe f843 	bl	8005960 <sync_fs>
 80078da:	4603      	mov	r3, r0
 80078dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7c1b      	ldrb	r3, [r3, #16]
 80078e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff ff7b 	bl	80077fa <f_sync>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10e      	bne.n	800792c <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f107 0208 	add.w	r2, r7, #8
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fada 	bl	8006ed0 <validate>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <f_opendir+0x14>
 8007946:	2309      	movs	r3, #9
 8007948:	e04a      	b.n	80079e0 <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800794a:	f107 0108 	add.w	r1, r7, #8
 800794e:	463b      	mov	r3, r7
 8007950:	2200      	movs	r2, #0
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff f864 	bl	8006a20 <find_volume>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d137      	bne.n	80079d2 <f_opendir+0x9c>
		dp->obj.fs = fs;
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe ff4d 	bl	800680c <follow_path>
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d125      	bne.n	80079c8 <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007982:	b25b      	sxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	db12      	blt.n	80079ae <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	799b      	ldrb	r3, [r3, #6]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe fcce 	bl	800633e <ld_clust>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	e001      	b.n	80079ae <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80079aa:	2305      	movs	r3, #5
 80079ac:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d109      	bne.n	80079c8 <f_opendir+0x92>
				dp->obj.id = fs->id;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	88da      	ldrh	r2, [r3, #6]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80079bc:	2100      	movs	r1, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fe fb65 	bl	800608e <dir_sdi>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d101      	bne.n	80079d2 <f_opendir+0x9c>
 80079ce:	2305      	movs	r3, #5
 80079d0:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <f_opendir+0xa8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f107 0208 	add.w	r2, r7, #8
 80079f8:	4611      	mov	r1, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fa68 	bl	8006ed0 <validate>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d126      	bne.n	8007a58 <f_readdir+0x70>
		if (!fno) {
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7fe fb3b 	bl	800608e <dir_sdi>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e01c      	b.n	8007a58 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7fe fccb 	bl	80063bc <dir_read>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d101      	bne.n	8007a34 <f_readdir+0x4c>
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10e      	bne.n	8007a58 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7fe fdbf 	bl	80065c0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007a42:	2100      	movs	r1, #0
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7fe fb9d 	bl	8006184 <dir_next>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d101      	bne.n	8007a58 <f_readdir+0x70>
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b090      	sub	sp, #64	; 0x40
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007a6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007a72:	f107 030c 	add.w	r3, r7, #12
 8007a76:	2200      	movs	r2, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe ffd1 	bl	8006a20 <find_volume>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007a84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 8099 	bne.w	8007bc0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	3b02      	subs	r3, #2
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d804      	bhi.n	8007aac <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e089      	b.n	8007bc0 <f_getfree+0x15e>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	63bb      	str	r3, [r7, #56]	; 0x38
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d128      	bne.n	8007b0a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007ac0:	f107 0314 	add.w	r3, r7, #20
 8007ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fd ffd7 	bl	8005a7a <get_fat>
 8007acc:	62b8      	str	r0, [r7, #40]	; 0x28
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d103      	bne.n	8007ade <f_getfree+0x7c>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007adc:	e063      	b.n	8007ba6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d103      	bne.n	8007aec <f_getfree+0x8a>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007aea:	e05c      	b.n	8007ba6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d102      	bne.n	8007af8 <f_getfree+0x96>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	3301      	adds	r3, #1
 8007af6:	63bb      	str	r3, [r7, #56]	; 0x38
				} while (++clst < fs->n_fatent);
 8007af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afa:	3301      	adds	r3, #1
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3db      	bcc.n	8007ac0 <f_getfree+0x5e>
 8007b08:	e04d      	b.n	8007ba6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
					sect = fs->fatbase;		/* Top of the FAT */
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	633b      	str	r3, [r7, #48]	; 0x30
					i = 0;					/* Offset in the sector */
 8007b16:	2300      	movs	r3, #0
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10d      	bne.n	8007b3c <f_getfree+0xda>
							res = move_window(fs, sect++);
 8007b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	633a      	str	r2, [r7, #48]	; 0x30
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f7fd feec 	bl	8005906 <move_window>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							if (res != FR_OK) break;
 8007b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d133      	bne.n	8007ba4 <f_getfree+0x142>
						}
						if (fs->fs_type == FS_FAT16) {
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d111      	bne.n	8007b68 <f_getfree+0x106>
							if (ld_word(fs->win + i) == 0) nfree++;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4c:	4413      	add	r3, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fd54 	bl	80055fc <ld_word>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d102      	bne.n	8007b60 <f_getfree+0xfe>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 2;
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	3302      	adds	r3, #2
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b66:	e012      	b.n	8007b8e <f_getfree+0x12c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	4413      	add	r3, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fd5a 	bl	800562c <ld_dword>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <f_getfree+0x126>
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	3301      	adds	r3, #1
 8007b86:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 4;
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
						}
						i %= SS(fs);
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
					} while (--clst);
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1bb      	bne.n	8007b1a <f_getfree+0xb8>
 8007ba2:	e000      	b.n	8007ba6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007ba4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007baa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	791a      	ldrb	r2, [r3, #4]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	b2d2      	uxtb	r2, r2
 8007bbe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007bc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3740      	adds	r7, #64	; 0x40
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b09c      	sub	sp, #112	; 0x70
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	66bb      	str	r3, [r7, #104]	; 0x68
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007bd8:	f107 010c 	add.w	r1, r7, #12
 8007bdc:	1d3b      	adds	r3, r7, #4
 8007bde:	2202      	movs	r2, #2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ff1d 	bl	8006a20 <find_volume>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8007bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 8083 	bne.w	8007cfc <f_unlink+0x130>
		dj.obj.fs = fs;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fe02 	bl	800680c <follow_path>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007c0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d172      	bne.n	8007cfc <f_unlink+0x130>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c1a:	b25b      	sxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	da03      	bge.n	8007c28 <f_unlink+0x5c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007c20:	2306      	movs	r3, #6
 8007c22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007c26:	e008      	b.n	8007c3a <f_unlink+0x6e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007c28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <f_unlink+0x6e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007c34:	2307      	movs	r3, #7
 8007c36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
			}
			if (res == FR_OK) {
 8007c3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d134      	bne.n	8007cac <f_unlink+0xe0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fb78 	bl	800633e <ld_clust>
 8007c4e:	66b8      	str	r0, [r7, #104]	; 0x68
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007c50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d027      	beq.n	8007cac <f_unlink+0xe0>
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c62:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007c64:	f107 0310 	add.w	r3, r7, #16
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fa0f 	bl	800608e <dir_sdi>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8007c76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d116      	bne.n	8007cac <f_unlink+0xe0>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8007c7e:	f107 0310 	add.w	r3, r7, #16
 8007c82:	2100      	movs	r1, #0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fb99 	bl	80063bc <dir_read>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007c90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <f_unlink+0xd2>
 8007c98:	2307      	movs	r3, #7
 8007c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007c9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d102      	bne.n	8007cac <f_unlink+0xe0>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						}
					}
				}
			}
			if (res == FR_OK) {
 8007cac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d123      	bne.n	8007cfc <f_unlink+0x130>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007cb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe fc63 	bl	8006584 <dir_remove>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8007cc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <f_unlink+0x11a>
 8007ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <f_unlink+0x11a>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007cd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe f859 	bl	8005d92 <remove_chain>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007ce6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <f_unlink+0x130>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fe35 	bl	8005960 <sync_fs>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007cfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3770      	adds	r7, #112	; 0x70
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer (null: use heap memory) */
	UINT len			/* Size of working buffer [byte] */
)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b09d      	sub	sp, #116	; 0x74
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	460b      	mov	r3, r1
 8007d16:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT/FAT32 volume (1 or 2) */
 8007d18:	2301      	movs	r3, #1
 8007d1a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT volume */
 8007d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d20:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fddf 	bl	80068ea <get_ldnumber>
 8007d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	da02      	bge.n	8007d3a <f_mkfs+0x32>
 8007d34:	230b      	movs	r3, #11
 8007d36:	f000 bc11 	b.w	800855c <f_mkfs+0x854>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume if mounted */
 8007d3a:	4a96      	ldr	r2, [pc, #600]	; (8007f94 <f_mkfs+0x28c>)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <f_mkfs+0x4a>
 8007d46:	4a93      	ldr	r2, [pc, #588]	; (8007f94 <f_mkfs+0x28c>)
 8007d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8007d5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd f894 	bl	8004e90 <disk_initialize>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007d6e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <f_mkfs+0x76>
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e3ee      	b.n	800855c <f_mkfs+0x854>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007d7e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <f_mkfs+0x86>
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	e3e6      	b.n	800855c <f_mkfs+0x854>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8007d8e:	f107 0214 	add.w	r2, r7, #20
 8007d92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d96:	2103      	movs	r1, #3
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fa67 	bl	800526c <disk_ioctl>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10c      	bne.n	8007dbe <f_mkfs+0xb6>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <f_mkfs+0xb6>
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db0:	d805      	bhi.n	8007dbe <f_mkfs+0xb6>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	1e5a      	subs	r2, r3, #1
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <f_mkfs+0xba>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
#if FF_MAX_SS != FF_MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 8007dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <f_mkfs+0xce>
 8007dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d309      	bcc.n	8007dea <f_mkfs+0xe2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ddc:	d805      	bhi.n	8007dea <f_mkfs+0xe2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	1e5a      	subs	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4013      	ands	r3, r2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <f_mkfs+0xe6>
 8007dea:	2313      	movs	r3, #19
 8007dec:	e3b6      	b.n	800855c <f_mkfs+0x854>
	au /= ss;	/* Cluster size in unit of sector */
 8007dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	607b      	str	r3, [r7, #4]
		for (szb_buf = MAX_MALLOC, buf = 0; szb_buf >= ss && (buf = ff_memalloc(szb_buf)) == 0; szb_buf /= 2) ;
		sz_buf = szb_buf / ss;		/* Size of working buffer (sector) */
	} else
#endif
	{
		buf = (BYTE*)work;		/* Working buffer */
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	633b      	str	r3, [r7, #48]	; 0x30
		sz_buf = len / ss;		/* Size of working buffer (sector) */
 8007dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
		szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007e08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	fb02 f303 	mul.w	r3, r2, r3
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (!buf || sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <f_mkfs+0x116>
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <f_mkfs+0x11a>
 8007e1e:	2311      	movs	r3, #17
 8007e20:	e39c      	b.n	800855c <f_mkfs+0x854>
		if (pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007e22:	f107 0210 	add.w	r2, r7, #16
 8007e26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fd fa1d 	bl	800526c <disk_ioctl>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <f_mkfs+0x134>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e38f      	b.n	800855c <f_mkfs+0x854>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	f003 0308 	and.w	r3, r3, #8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <f_mkfs+0x142>
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <f_mkfs+0x144>
 8007e4a:	233f      	movs	r3, #63	; 0x3f
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d901      	bls.n	8007e5a <f_mkfs+0x152>
 8007e56:	230e      	movs	r3, #14
 8007e58:	e380      	b.n	800855c <f_mkfs+0x854>
		sz_vol -= b_vol;						/* Volume size */
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b7f      	cmp	r3, #127	; 0x7f
 8007e66:	d801      	bhi.n	8007e6c <f_mkfs+0x164>
 8007e68:	230e      	movs	r3, #14
 8007e6a:	e377      	b.n	800855c <f_mkfs+0x854>
		if (FF_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* Too large au for FAT/FAT32 */
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b80      	cmp	r3, #128	; 0x80
 8007e70:	d901      	bls.n	8007e76 <f_mkfs+0x16e>
 8007e72:	2313      	movs	r3, #19
 8007e74:	e372      	b.n	800855c <f_mkfs+0x854>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8007e76:	7afb      	ldrb	r3, [r7, #11]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00d      	beq.n	8007e9c <f_mkfs+0x194>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d004      	beq.n	8007e94 <f_mkfs+0x18c>
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <f_mkfs+0x194>
				fmt = FS_FAT32; break;
 8007e94:	2303      	movs	r3, #3
 8007e96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007e9a:	e009      	b.n	8007eb0 <f_mkfs+0x1a8>
			}
		}
		if (!(opt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <f_mkfs+0x1a2>
 8007ea6:	2313      	movs	r3, #19
 8007ea8:	e358      	b.n	800855c <f_mkfs+0x854>
		fmt = FS_FAT16;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = au;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8007eb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007eb8:	2b03      	cmp	r3, #3
 8007eba:	d13c      	bne.n	8007f36 <f_mkfs+0x22e>
				if (pau == 0) {	/* au auto-selection */
 8007ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11b      	bne.n	8007efa <f_mkfs+0x1f2>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	0c5b      	lsrs	r3, r3, #17
 8007ec6:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ecc:	2301      	movs	r3, #1
 8007ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed0:	e005      	b.n	8007ede <f_mkfs+0x1d6>
 8007ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ede:	4a2e      	ldr	r2, [pc, #184]	; (8007f98 <f_mkfs+0x290>)
 8007ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <f_mkfs+0x1f2>
 8007eea:	4a2b      	ldr	r2, [pc, #172]	; (8007f98 <f_mkfs+0x290>)
 8007eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d2eb      	bcs.n	8007ed2 <f_mkfs+0x1ca>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	3302      	adds	r3, #2
 8007f08:	009a      	lsls	r2, r3, #2
 8007f0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f0c:	4413      	add	r3, r2
 8007f0e:	1e5a      	subs	r2, r3, #1
 8007f10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f16:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8007f18:	2320      	movs	r3, #32
 8007f1a:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d903      	bls.n	8007f32 <f_mkfs+0x22a>
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <f_mkfs+0x294>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d953      	bls.n	8007fda <f_mkfs+0x2d2>
 8007f32:	230e      	movs	r3, #14
 8007f34:	e312      	b.n	800855c <f_mkfs+0x854>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8007f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11b      	bne.n	8007f74 <f_mkfs+0x26c>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	0b1b      	lsrs	r3, r3, #12
 8007f40:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007f42:	2300      	movs	r3, #0
 8007f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f46:	2301      	movs	r3, #1
 8007f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f4a:	e005      	b.n	8007f58 <f_mkfs+0x250>
 8007f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4e:	3301      	adds	r3, #1
 8007f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f58:	4a11      	ldr	r2, [pc, #68]	; (8007fa0 <f_mkfs+0x298>)
 8007f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <f_mkfs+0x26c>
 8007f64:	4a0e      	ldr	r2, [pc, #56]	; (8007fa0 <f_mkfs+0x298>)
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d2eb      	bcs.n	8007f4c <f_mkfs+0x244>
				}
				n_clst = sz_vol / pau;
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d90d      	bls.n	8007fa4 <f_mkfs+0x29c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f90:	e013      	b.n	8007fba <f_mkfs+0x2b2>
 8007f92:	bf00      	nop
 8007f94:	20000270 	.word	0x20000270
 8007f98:	0800ff3c 	.word	0x0800ff3c
 8007f9c:	0ffffff5 	.word	0x0ffffff5
 8007fa0:	0800ff4c 	.word	0x0800ff4c
				} else {
					fmt = FS_FAT12;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007faa:	6a3a      	ldr	r2, [r7, #32]
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	3303      	adds	r3, #3
 8007fb8:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007fba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007fbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fbe:	4413      	add	r3, r2
 8007fc0:	1e5a      	subs	r2, r3, #1
 8007fc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8007fca:	2301      	movs	r3, #1
 8007fcc:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8007fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fde:	4413      	add	r3, r2
 8007fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8007fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fe6:	fb02 f203 	mul.w	r2, r2, r3
 8007fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fec:	4413      	add	r3, r2
 8007fee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ff0:	4413      	add	r3, r2
 8007ff2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	1e5a      	subs	r2, r3, #1
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	425b      	negs	r3, r3
 8008000:	401a      	ands	r2, r3
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8008008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800800c:	2b03      	cmp	r3, #3
 800800e:	d108      	bne.n	8008022 <f_mkfs+0x31a>
				sz_rsv += n; b_fat += n;
 8008010:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008014:	4413      	add	r3, r2
 8008016:	65bb      	str	r3, [r7, #88]	; 0x58
 8008018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800801a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800801c:	4413      	add	r3, r2
 800801e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008020:	e006      	b.n	8008030 <f_mkfs+0x328>
			} else {					/* FAT: Expand FAT size */
				sz_fat += n / n_fats;
 8008022:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008026:	fbb2 f3f3 	udiv	r3, r2, r3
 800802a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800802c:	4413      	add	r3, r2
 800802e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume */
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	011a      	lsls	r2, r3, #4
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	441a      	add	r2, r3
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	429a      	cmp	r2, r3
 8008040:	d901      	bls.n	8008046 <f_mkfs+0x33e>
 8008042:	230e      	movs	r3, #14
 8008044:	e28a      	b.n	800855c <f_mkfs+0x854>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008050:	fb01 f303 	mul.w	r3, r1, r3
 8008054:	1ad2      	subs	r2, r2, r3
 8008056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8008062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008066:	2b03      	cmp	r3, #3
 8008068:	d10f      	bne.n	800808a <f_mkfs+0x382>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008070:	4293      	cmp	r3, r2
 8008072:	d80a      	bhi.n	800808a <f_mkfs+0x382>
					if (au == 0 && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <f_mkfs+0x37e>
 800807a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807c:	085b      	lsrs	r3, r3, #1
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d144      	bne.n	8008110 <f_mkfs+0x408>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008086:	230e      	movs	r3, #14
 8008088:	e268      	b.n	800855c <f_mkfs+0x854>
				}
			}
			if (fmt == FS_FAT16) {
 800808a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800808e:	2b02      	cmp	r3, #2
 8008090:	d133      	bne.n	80080fa <f_mkfs+0x3f2>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008098:	4293      	cmp	r3, r2
 800809a:	d91e      	bls.n	80080da <f_mkfs+0x3d2>
					if (au == 0 && (pau * 2) <= 64) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d107      	bne.n	80080b2 <f_mkfs+0x3aa>
 80080a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d803      	bhi.n	80080b2 <f_mkfs+0x3aa>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80080aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	607b      	str	r3, [r7, #4]
 80080b0:	e033      	b.n	800811a <f_mkfs+0x412>
					}
					if ((opt & FM_FAT32)) {
 80080b2:	7afb      	ldrb	r3, [r7, #11]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <f_mkfs+0x3bc>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80080bc:	2303      	movs	r3, #3
 80080be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80080c2:	e02a      	b.n	800811a <f_mkfs+0x412>
					}
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <f_mkfs+0x3ce>
 80080ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d91e      	bls.n	8008114 <f_mkfs+0x40c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 80080d6:	230e      	movs	r3, #14
 80080d8:	e240      	b.n	800855c <f_mkfs+0x854>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d80a      	bhi.n	80080fa <f_mkfs+0x3f2>
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <f_mkfs+0x3ee>
 80080ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b80      	cmp	r3, #128	; 0x80
 80080f4:	d910      	bls.n	8008118 <f_mkfs+0x410>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 80080f6:	230e      	movs	r3, #14
 80080f8:	e230      	b.n	800855c <f_mkfs+0x854>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 80080fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d10c      	bne.n	800811c <f_mkfs+0x414>
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008108:	4293      	cmp	r3, r2
 800810a:	d907      	bls.n	800811c <f_mkfs+0x414>
 800810c:	230e      	movs	r3, #14
 800810e:	e225      	b.n	800855c <f_mkfs+0x854>
					if (au == 0 && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008110:	bf00      	nop
 8008112:	e6cd      	b.n	8007eb0 <f_mkfs+0x1a8>
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008114:	bf00      	nop
 8008116:	e6cb      	b.n	8007eb0 <f_mkfs+0x1a8>
					if (au == 0 && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008118:	bf00      	nop
			pau = au;
 800811a:	e6c9      	b.n	8007eb0 <f_mkfs+0x1a8>

			/* Ok, it is the valid cluster configuration */
			break;
 800811c:	bf00      	nop
#if FF_USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800811e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008120:	461a      	mov	r2, r3
 8008122:	2100      	movs	r1, #0
 8008124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008126:	f7fd fb0c 	bl	8005742 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800812a:	220b      	movs	r2, #11
 800812c:	49bc      	ldr	r1, [pc, #752]	; (8008420 <f_mkfs+0x718>)
 800812e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008130:	f7fd fae6 	bl	8005700 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	330b      	adds	r3, #11
 8008138:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fd fa98 	bl	8005672 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	330d      	adds	r3, #13
 8008146:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	330e      	adds	r3, #14
 8008150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008152:	b292      	uxth	r2, r2
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd fa8b 	bl	8005672 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	3310      	adds	r3, #16
 8008160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f103 0211 	add.w	r2, r3, #17
 800816c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008170:	2b03      	cmp	r3, #3
 8008172:	d002      	beq.n	800817a <f_mkfs+0x472>
 8008174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008176:	b29b      	uxth	r3, r3
 8008178:	e000      	b.n	800817c <f_mkfs+0x474>
 800817a:	2300      	movs	r3, #0
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f7fd fa77 	bl	8005672 <st_word>
		if (sz_vol < 0x10000) {
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818a:	d208      	bcs.n	800819e <f_mkfs+0x496>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	3313      	adds	r3, #19
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	b292      	uxth	r2, r2
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd fa6b 	bl	8005672 <st_word>
 800819c:	e006      	b.n	80081ac <f_mkfs+0x4a4>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	3320      	adds	r3, #32
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd fa7e 	bl	80056a8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	3315      	adds	r3, #21
 80081b0:	22f8      	movs	r2, #248	; 0xf8
 80081b2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	3318      	adds	r3, #24
 80081b8:	213f      	movs	r1, #63	; 0x3f
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fd fa59 	bl	8005672 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	331a      	adds	r3, #26
 80081c4:	21ff      	movs	r1, #255	; 0xff
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fd fa53 	bl	8005672 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	331c      	adds	r3, #28
 80081d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd fa68 	bl	80056a8 <st_dword>
		if (fmt == FS_FAT32) {
 80081d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d131      	bne.n	8008244 <f_mkfs+0x53c>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80081e6:	f7fd f9ff 	bl	80055e8 <get_fattime>
 80081ea:	4603      	mov	r3, r0
 80081ec:	4619      	mov	r1, r3
 80081ee:	4620      	mov	r0, r4
 80081f0:	f7fd fa5a 	bl	80056a8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	3324      	adds	r3, #36	; 0x24
 80081f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fd fa54 	bl	80056a8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	332c      	adds	r3, #44	; 0x2c
 8008204:	2102      	movs	r1, #2
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd fa4e 	bl	80056a8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	3330      	adds	r3, #48	; 0x30
 8008210:	2101      	movs	r1, #1
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd fa2d 	bl	8005672 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	3332      	adds	r3, #50	; 0x32
 800821c:	2106      	movs	r1, #6
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd fa27 	bl	8005672 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8008224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008226:	3340      	adds	r3, #64	; 0x40
 8008228:	2280      	movs	r2, #128	; 0x80
 800822a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	3342      	adds	r3, #66	; 0x42
 8008230:	2229      	movs	r2, #41	; 0x29
 8008232:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	3347      	adds	r3, #71	; 0x47
 8008238:	2213      	movs	r2, #19
 800823a:	497a      	ldr	r1, [pc, #488]	; (8008424 <f_mkfs+0x71c>)
 800823c:	4618      	mov	r0, r3
 800823e:	f7fd fa5f 	bl	8005700 <mem_cpy>
 8008242:	e020      	b.n	8008286 <f_mkfs+0x57e>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800824a:	f7fd f9cd 	bl	80055e8 <get_fattime>
 800824e:	4603      	mov	r3, r0
 8008250:	4619      	mov	r1, r3
 8008252:	4620      	mov	r0, r4
 8008254:	f7fd fa28 	bl	80056a8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	3316      	adds	r3, #22
 800825c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800825e:	b292      	uxth	r2, r2
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fa05 	bl	8005672 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	3324      	adds	r3, #36	; 0x24
 800826c:	2280      	movs	r2, #128	; 0x80
 800826e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	3326      	adds	r3, #38	; 0x26
 8008274:	2229      	movs	r2, #41	; 0x29
 8008276:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	332b      	adds	r3, #43	; 0x2b
 800827c:	2213      	movs	r2, #19
 800827e:	496a      	ldr	r1, [pc, #424]	; (8008428 <f_mkfs+0x720>)
 8008280:	4618      	mov	r0, r3
 8008282:	f7fd fa3d 	bl	8005700 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800828c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008290:	4618      	mov	r0, r3
 8008292:	f7fd f9ee 	bl	8005672 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8008296:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800829a:	2301      	movs	r3, #1
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082a0:	f7fc ff60 	bl	8005164 <disk_write>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <f_mkfs+0x5a6>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e156      	b.n	800855c <f_mkfs+0x854>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80082ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d140      	bne.n	8008338 <f_mkfs+0x630>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	1d9a      	adds	r2, r3, #6
 80082ba:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80082be:	2301      	movs	r3, #1
 80082c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082c2:	f7fc ff4f 	bl	8005164 <disk_write>
			mem_set(buf, 0, ss);
 80082c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082c8:	461a      	mov	r2, r3
 80082ca:	2100      	movs	r1, #0
 80082cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ce:	f7fd fa38 	bl	8005742 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80082d2:	4956      	ldr	r1, [pc, #344]	; (800842c <f_mkfs+0x724>)
 80082d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082d6:	f7fd f9e7 	bl	80056a8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082e0:	4953      	ldr	r1, [pc, #332]	; (8008430 <f_mkfs+0x728>)
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd f9e0 	bl	80056a8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f7fd f9d7 	bl	80056a8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008300:	2102      	movs	r1, #2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd f9d0 	bl	80056a8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800830e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008312:	4618      	mov	r0, r3
 8008314:	f7fd f9ad 	bl	8005672 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	1dda      	adds	r2, r3, #7
 800831c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008320:	2301      	movs	r3, #1
 8008322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008324:	f7fc ff1e 	bl	8005164 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008330:	2301      	movs	r3, #1
 8008332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008334:	f7fc ff16 	bl	8005164 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8008338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800833a:	2100      	movs	r1, #0
 800833c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833e:	f7fd fa00 	bl	8005742 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8008342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008344:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8008346:	2300      	movs	r3, #0
 8008348:	64bb      	str	r3, [r7, #72]	; 0x48
 800834a:	e04b      	b.n	80083e4 <f_mkfs+0x6dc>
			if (fmt == FS_FAT32) {
 800834c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008350:	2b03      	cmp	r3, #3
 8008352:	d113      	bne.n	800837c <f_mkfs+0x674>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8008354:	f06f 0107 	mvn.w	r1, #7
 8008358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835a:	f7fd f9a5 	bl	80056a8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	3304      	adds	r3, #4
 8008362:	f04f 31ff 	mov.w	r1, #4294967295
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd f99e 	bl	80056a8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	3308      	adds	r3, #8
 8008370:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008374:	4618      	mov	r0, r3
 8008376:	f7fd f997 	bl	80056a8 <st_dword>
 800837a:	e00b      	b.n	8008394 <f_mkfs+0x68c>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800837c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <f_mkfs+0x680>
 8008384:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <f_mkfs+0x72c>)
 8008386:	e001      	b.n	800838c <f_mkfs+0x684>
 8008388:	f06f 0307 	mvn.w	r3, #7
 800838c:	4619      	mov	r1, r3
 800838e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008390:	f7fd f98a 	bl	80056a8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008396:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	4293      	cmp	r3, r2
 800839e:	bf28      	it	cs
 80083a0:	4613      	movcs	r3, r2
 80083a2:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80083a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80083a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ae:	f7fc fed9 	bl	8005164 <disk_write>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <f_mkfs+0x6b4>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e0cf      	b.n	800855c <f_mkfs+0x854>
				mem_set(buf, 0, ss);
 80083bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083be:	461a      	mov	r2, r3
 80083c0:	2100      	movs	r1, #0
 80083c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c4:	f7fd f9bd 	bl	8005742 <mem_set>
				sect += n; nsect -= n;
 80083c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083cc:	4413      	add	r3, r2
 80083ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 80083d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1dc      	bne.n	8008398 <f_mkfs+0x690>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80083de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e0:	3301      	adds	r3, #1
 80083e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d3af      	bcc.n	800834c <f_mkfs+0x644>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80083ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d101      	bne.n	80083f8 <f_mkfs+0x6f0>
 80083f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f6:	e000      	b.n	80083fa <f_mkfs+0x6f2>
 80083f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fa:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80083fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008400:	4293      	cmp	r3, r2
 8008402:	bf28      	it	cs
 8008404:	4613      	movcs	r3, r2
 8008406:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008408:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800840c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800840e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008412:	f7fc fea7 	bl	8005164 <disk_write>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <f_mkfs+0x730>
 800841c:	2301      	movs	r3, #1
 800841e:	e09d      	b.n	800855c <f_mkfs+0x854>
 8008420:	0800ff08 	.word	0x0800ff08
 8008424:	0800ff14 	.word	0x0800ff14
 8008428:	0800ff28 	.word	0x0800ff28
 800842c:	41615252 	.word	0x41615252
 8008430:	61417272 	.word	0x61417272
 8008434:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8008438:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800843a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800843c:	4413      	add	r3, r2
 800843e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008440:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8008448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1d6      	bne.n	80083fc <f_mkfs+0x6f4>

	/* Determine system ID in the partition table */
	if (FF_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800844e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008452:	2b03      	cmp	r3, #3
 8008454:	d103      	bne.n	800845e <f_mkfs+0x756>
			sys = 0x0C;		/* FAT32X */
 8008456:	230c      	movs	r3, #12
 8008458:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800845c:	e010      	b.n	8008480 <f_mkfs+0x778>
		} else {
			if (sz_vol >= 0x10000) {
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008464:	d303      	bcc.n	800846e <f_mkfs+0x766>
				sys = 0x06;	/* FAT12/16 (large) */
 8008466:	2306      	movs	r3, #6
 8008468:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800846c:	e008      	b.n	8008480 <f_mkfs+0x778>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 800846e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008472:	2b02      	cmp	r3, #2
 8008474:	d101      	bne.n	800847a <f_mkfs+0x772>
 8008476:	2304      	movs	r3, #4
 8008478:	e000      	b.n	800847c <f_mkfs+0x774>
 800847a:	2301      	movs	r3, #1
 800847c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d15b      	bne.n	8008542 <f_mkfs+0x83a>
			mem_set(buf, 0, ss);
 800848a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800848c:	461a      	mov	r2, r3
 800848e:	2100      	movs	r1, #0
 8008490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008492:	f7fd f956 	bl	8005742 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800849c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fd f8e6 	bl	8005672 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80084ac:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2200      	movs	r2, #0
 80084b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	3301      	adds	r3, #1
 80084b8:	2201      	movs	r2, #1
 80084ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	3302      	adds	r3, #2
 80084c0:	2201      	movs	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	3303      	adds	r3, #3
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3304      	adds	r3, #4
 80084d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80084d4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	441a      	add	r2, r3
 80084dc:	4b21      	ldr	r3, [pc, #132]	; (8008564 <f_mkfs+0x85c>)
 80084de:	fba3 1302 	umull	r1, r3, r3, r2
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	0852      	lsrs	r2, r2, #1
 80084e6:	4413      	add	r3, r2
 80084e8:	0b5b      	lsrs	r3, r3, #13
 80084ea:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	3305      	adds	r3, #5
 80084f0:	22fe      	movs	r2, #254	; 0xfe
 80084f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(((n >> 2) & 0xC0) | 63);	/* End sector */
 80084f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f6:	089b      	lsrs	r3, r3, #2
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	3306      	adds	r3, #6
 80084fe:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3307      	adds	r3, #7
 800850a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800850c:	b2d2      	uxtb	r2, r2
 800850e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	3308      	adds	r3, #8
 8008514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008516:	4618      	mov	r0, r3
 8008518:	f7fd f8c6 	bl	80056a8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	330c      	adds	r3, #12
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7fd f8bf 	bl	80056a8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the MBR */
 800852a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800852e:	2301      	movs	r3, #1
 8008530:	2200      	movs	r2, #0
 8008532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008534:	f7fc fe16 	bl	8005164 <disk_write>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <f_mkfs+0x83a>
 800853e:	2301      	movs	r3, #1
 8008540:	e00c      	b.n	800855c <f_mkfs+0x854>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008542:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc fe8e 	bl	800526c <disk_ioctl>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <f_mkfs+0x852>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <f_mkfs+0x854>

	LEAVE_MKFS(FR_OK);
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3774      	adds	r7, #116	; 0x74
 8008560:	46bd      	mov	sp, r7
 8008562:	bd90      	pop	{r4, r7, pc}
 8008564:	0515565b 	.word	0x0515565b

08008568 <putc_bfd>:

static void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	617b      	str	r3, [r7, #20]
	if (i < 0) return;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db27      	blt.n	80085d0 <putc_bfd+0x68>
	nc = pb->nchr;			/* Write unit counter */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	613b      	str	r3, [r7, #16]
	}
	pb->buf[i++] = (BYTE)wc;
#endif

#else									/* ANSI/OEM input (without re-encode) */
	pb->buf[i++] = (BYTE)c;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	617a      	str	r2, [r7, #20]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b3b      	cmp	r3, #59	; 0x3b
 8008598:	dd12      	ble.n	80085c0 <putc_bfd+0x58>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f103 010c 	add.w	r1, r3, #12
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	f107 030c 	add.w	r3, r7, #12
 80085aa:	f7fe ffbd 	bl	8007528 <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d101      	bne.n	80085ba <putc_bfd+0x52>
 80085b6:	2300      	movs	r3, #0
 80085b8:	e001      	b.n	80085be <putc_bfd+0x56>
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
 80085be:	617b      	str	r3, [r7, #20]
	}
	pb->idx = i;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	605a      	str	r2, [r3, #4]
	pb->nchr = nc + 1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	609a      	str	r2, [r3, #8]
 80085ce:	e000      	b.n	80085d2 <putc_bfd+0x6a>
	if (i < 0) return;
 80085d0:	bf00      	nop
}
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <putc_flush>:


static int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	db17      	blt.n	8008618 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 010c 	add.w	r1, r3, #12
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f107 030c 	add.w	r3, r7, #12
 80085fc:	f7fe ff94 	bl	8007528 <f_write>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	461a      	mov	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	429a      	cmp	r2, r3
 8008610:	d102      	bne.n	8008618 <putc_flush+0x40>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	e001      	b.n	800861c <putc_flush+0x44>
	return EOF;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <putc_init>:

static void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
	mem_set(pb, 0, sizeof (putbuff));
 800862e:	224c      	movs	r2, #76	; 0x4c
 8008630:	2100      	movs	r1, #0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fd f885 	bl	8005742 <mem_set>
	pb->fp = fp;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	601a      	str	r2, [r3, #0]
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008648:	b40e      	push	{r1, r2, r3}
 800864a:	b580      	push	{r7, lr}
 800864c:	b0a7      	sub	sp, #156	; 0x9c
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff ffe3 	bl	8008624 <putc_init>

	va_start(arp, fmt);
 800865e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008662:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008674:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 8206 	beq.w	8008a8a <f_printf+0x442>
		if (c != '%') {				/* Non escape character */
 800867e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008682:	2b25      	cmp	r3, #37	; 0x25
 8008684:	d008      	beq.n	8008698 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008686:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800868a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff ff69 	bl	8008568 <putc_bfd>
			continue;
 8008696:	e1f7      	b.n	8008a88 <f_printf+0x440>
		}
		w = f = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800869e:	2300      	movs	r3, #0
 80086a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 80086a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80086b4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80086b8:	2b30      	cmp	r3, #48	; 0x30
 80086ba:	d10b      	bne.n	80086d4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80086bc:	2301      	movs	r3, #1
 80086be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80086c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80086d2:	e00e      	b.n	80086f2 <f_printf+0xaa>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80086d4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80086d8:	2b2d      	cmp	r3, #45	; 0x2d
 80086da:	d10a      	bne.n	80086f2 <f_printf+0xaa>
				f = 2; c = *fmt++;
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80086e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		if (c == '*') {				/* Minimum width by argument */
 80086f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80086f6:	2b2a      	cmp	r3, #42	; 0x2a
 80086f8:	d123      	bne.n	8008742 <f_printf+0xfa>
			w = va_arg(arp, int);
 80086fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fc:	1d1a      	adds	r2, r3, #4
 80086fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8008706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8008716:	e01c      	b.n	8008752 <f_printf+0x10a>
		} else {
			while (IsDigit(c)) {	/* Minimum width */
				w = w * 10 + c - '0';
 8008718:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	461a      	mov	r2, r3
 8008726:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800872a:	4413      	add	r3, r2
 800872c:	3b30      	subs	r3, #48	; 0x30
 800872e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				c = *fmt++;
 8008732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			while (IsDigit(c)) {	/* Minimum width */
 8008742:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008746:	2b2f      	cmp	r3, #47	; 0x2f
 8008748:	d903      	bls.n	8008752 <f_printf+0x10a>
 800874a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800874e:	2b39      	cmp	r3, #57	; 0x39
 8008750:	d9e2      	bls.n	8008718 <f_printf+0xd0>
			}
		}
		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 8008752:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008756:	2b6c      	cmp	r3, #108	; 0x6c
 8008758:	d003      	beq.n	8008762 <f_printf+0x11a>
 800875a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800875e:	2b4c      	cmp	r3, #76	; 0x4c
 8008760:	d10d      	bne.n	800877e <f_printf+0x136>
			f |= 4; c = *fmt++;
 8008762:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008766:	f043 0304 	orr.w	r3, r3, #4
 800876a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800876e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (c == 0) break;
 800877e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8183 	beq.w	8008a8e <f_printf+0x446>
		d = c;
 8008788:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800878c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008790:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008794:	2b60      	cmp	r3, #96	; 0x60
 8008796:	d908      	bls.n	80087aa <f_printf+0x162>
 8008798:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800879c:	2b7a      	cmp	r3, #122	; 0x7a
 800879e:	d804      	bhi.n	80087aa <f_printf+0x162>
 80087a0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80087a4:	3b20      	subs	r3, #32
 80087a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Atgument type is... */
 80087aa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80087ae:	3b42      	subs	r3, #66	; 0x42
 80087b0:	2b16      	cmp	r3, #22
 80087b2:	f200 8098 	bhi.w	80088e6 <f_printf+0x29e>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <f_printf+0x174>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080088c7 	.word	0x080088c7
 80087c0:	080088af 	.word	0x080088af
 80087c4:	080088d7 	.word	0x080088d7
 80087c8:	080088e7 	.word	0x080088e7
 80087cc:	080088e7 	.word	0x080088e7
 80087d0:	080088e7 	.word	0x080088e7
 80087d4:	080088e7 	.word	0x080088e7
 80087d8:	080088e7 	.word	0x080088e7
 80087dc:	080088e7 	.word	0x080088e7
 80087e0:	080088e7 	.word	0x080088e7
 80087e4:	080088e7 	.word	0x080088e7
 80087e8:	080088e7 	.word	0x080088e7
 80087ec:	080088e7 	.word	0x080088e7
 80087f0:	080088cf 	.word	0x080088cf
 80087f4:	080088e7 	.word	0x080088e7
 80087f8:	080088e7 	.word	0x080088e7
 80087fc:	080088e7 	.word	0x080088e7
 8008800:	08008819 	.word	0x08008819
 8008804:	080088e7 	.word	0x080088e7
 8008808:	080088d7 	.word	0x080088d7
 800880c:	080088e7 	.word	0x080088e7
 8008810:	080088e7 	.word	0x080088e7
 8008814:	080088df 	.word	0x080088df
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881a:	1d1a      	adds	r2, r3, #4
 800881c:	67ba      	str	r2, [r7, #120]	; 0x78
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008822:	2300      	movs	r3, #0
 8008824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008828:	e004      	b.n	8008834 <f_printf+0x1ec>
 800882a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800882e:	3301      	adds	r3, #1
 8008830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008834:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800883a:	4413      	add	r3, r2
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f3      	bne.n	800882a <f_printf+0x1e2>
			if (!(f & 2)) {						/* Right padded */
 8008842:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d11a      	bne.n	8008884 <f_printf+0x23c>
				while (j++ < w) putc_bfd(&pb, ' ') ;
 800884e:	e005      	b.n	800885c <f_printf+0x214>
 8008850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008854:	2120      	movs	r1, #32
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff fe86 	bl	8008568 <putc_bfd>
 800885c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008866:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800886a:	429a      	cmp	r2, r3
 800886c:	d8f0      	bhi.n	8008850 <f_printf+0x208>
			}
			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 800886e:	e009      	b.n	8008884 <f_printf+0x23c>
 8008870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008876:	781a      	ldrb	r2, [r3, #0]
 8008878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff fe72 	bl	8008568 <putc_bfd>
 8008884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1f1      	bne.n	8008870 <f_printf+0x228>
			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 800888c:	e005      	b.n	800889a <f_printf+0x252>
 800888e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008892:	2120      	movs	r1, #32
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fe67 	bl	8008568 <putc_bfd>
 800889a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d8f0      	bhi.n	800888e <f_printf+0x246>
			continue;
 80088ac:	e0ec      	b.n	8008a88 <f_printf+0x440>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80088ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088b0:	1d1a      	adds	r2, r3, #4
 80088b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff fe52 	bl	8008568 <putc_bfd>
 80088c4:	e0e0      	b.n	8008a88 <f_printf+0x440>

		case 'B' :					/* Unsigned binary */
			r = 2; break;
 80088c6:	2302      	movs	r3, #2
 80088c8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80088cc:	e014      	b.n	80088f8 <f_printf+0x2b0>

		case 'O' :					/* Unsigned octal */
			r = 8; break;
 80088ce:	2308      	movs	r3, #8
 80088d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80088d4:	e010      	b.n	80088f8 <f_printf+0x2b0>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80088d6:	230a      	movs	r3, #10
 80088d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80088dc:	e00c      	b.n	80088f8 <f_printf+0x2b0>

		case 'X' :					/* Unsigned hexdecimal */
			r = 16; break;
 80088de:	2310      	movs	r3, #16
 80088e0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80088e4:	e008      	b.n	80088f8 <f_printf+0x2b0>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80088e6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80088ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff fe39 	bl	8008568 <putc_bfd>
 80088f6:	e0c7      	b.n	8008a88 <f_printf+0x440>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80088f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <f_printf+0x2c6>
 8008904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	67ba      	str	r2, [r7, #120]	; 0x78
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	e00c      	b.n	8008928 <f_printf+0x2e0>
 800890e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008912:	2b44      	cmp	r3, #68	; 0x44
 8008914:	d104      	bne.n	8008920 <f_printf+0x2d8>
 8008916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	67ba      	str	r2, [r7, #120]	; 0x78
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	e003      	b.n	8008928 <f_printf+0x2e0>
 8008920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	67ba      	str	r2, [r7, #120]	; 0x78
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800892c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008930:	2b44      	cmp	r3, #68	; 0x44
 8008932:	d10e      	bne.n	8008952 <f_printf+0x30a>
 8008934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008938:	2b00      	cmp	r3, #0
 800893a:	da0a      	bge.n	8008952 <f_printf+0x30a>
			v = 0 - v;
 800893c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008940:	425b      	negs	r3, r3
 8008942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8008946:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800894a:	f043 0308 	orr.w	r3, r3, #8
 800894e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8008958:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800895c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008960:	fbb3 f1f2 	udiv	r1, r3, r2
 8008964:	fb02 f201 	mul.w	r2, r2, r1
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800896e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8008972:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008976:	fbb2 f3f3 	udiv	r3, r2, r3
 800897a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800897e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008982:	2b09      	cmp	r3, #9
 8008984:	d90b      	bls.n	800899e <f_printf+0x356>
 8008986:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800898a:	2b78      	cmp	r3, #120	; 0x78
 800898c:	d101      	bne.n	8008992 <f_printf+0x34a>
 800898e:	2227      	movs	r2, #39	; 0x27
 8008990:	e000      	b.n	8008994 <f_printf+0x34c>
 8008992:	2207      	movs	r2, #7
 8008994:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008998:	4413      	add	r3, r2
 800899a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800899e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80089a8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80089ac:	3230      	adds	r2, #48	; 0x30
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80089b4:	440b      	add	r3, r1
 80089b6:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof *str);
 80089ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <f_printf+0x382>
 80089c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089c6:	2b1f      	cmp	r3, #31
 80089c8:	d9c6      	bls.n	8008958 <f_printf+0x310>
		if (f & 8) str[i++] = '-';
 80089ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <f_printf+0x3a4>
 80089d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80089e0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80089e4:	4413      	add	r3, r2
 80089e6:	222d      	movs	r2, #45	; 0x2d
 80089e8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80089ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80089f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <f_printf+0x3bc>
 8008a00:	2330      	movs	r3, #48	; 0x30
 8008a02:	e000      	b.n	8008a06 <f_printf+0x3be>
 8008a04:	2320      	movs	r3, #32
 8008a06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (!(f & 2)) {
 8008a0a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d111      	bne.n	8008a3a <f_printf+0x3f2>
			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 8008a16:	e007      	b.n	8008a28 <f_printf+0x3e0>
 8008a18:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fda0 	bl	8008568 <putc_bfd>
 8008a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a32:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d8ee      	bhi.n	8008a18 <f_printf+0x3d0>
		}
		do {
			putc_bfd(&pb, str[--i]);			/* Number body */
 8008a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a44:	f107 020c 	add.w	r2, r7, #12
 8008a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fd86 	bl	8008568 <putc_bfd>
		} while (i);
 8008a5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1ea      	bne.n	8008a3a <f_printf+0x3f2>
		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 8008a64:	e007      	b.n	8008a76 <f_printf+0x42e>
 8008a66:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fd79 	bl	8008568 <putc_bfd>
 8008a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d8ee      	bhi.n	8008a66 <f_printf+0x41e>
		c = *fmt++;
 8008a88:	e5ec      	b.n	8008664 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <f_printf+0x448>
		if (c == 0) break;
 8008a8e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fd9f 	bl	80085d8 <putc_flush>
 8008a9a:	4603      	mov	r3, r0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	379c      	adds	r7, #156	; 0x9c
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aa6:	b003      	add	sp, #12
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop

08008aac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008ab0:	f000 fe38 	bl	8009724 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008ab4:	f000 f852 	bl	8008b5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008ab8:	f000 fabc 	bl	8009034 <MX_GPIO_Init>
	MX_RTC_Init();
 8008abc:	f000 f8ce 	bl	8008c5c <MX_RTC_Init>
	MX_SPI1_Init();
 8008ac0:	f000 f930 	bl	8008d24 <MX_SPI1_Init>
	MX_TIM2_Init();
 8008ac4:	f000 f964 	bl	8008d90 <MX_TIM2_Init>
	MX_TIM3_Init();
 8008ac8:	f000 f9ee 	bl	8008ea8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8008acc:	f000 fa3a 	bl	8008f44 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8008ad0:	f000 fa86 	bl	8008fe0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8008ad4:	481c      	ldr	r0, [pc, #112]	; (8008b48 <main+0x9c>)
 8008ad6:	f002 fee6 	bl	800b8a6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008ada:	2100      	movs	r1, #0
 8008adc:	481a      	ldr	r0, [pc, #104]	; (8008b48 <main+0x9c>)
 8008ade:	f002 ff3b 	bl	800b958 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4818      	ldr	r0, [pc, #96]	; (8008b48 <main+0x9c>)
 8008ae6:	f002 ff37 	bl	800b958 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8008aea:	2108      	movs	r1, #8
 8008aec:	4816      	ldr	r0, [pc, #88]	; (8008b48 <main+0x9c>)
 8008aee:	f002 ff33 	bl	800b958 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8008af2:	4816      	ldr	r0, [pc, #88]	; (8008b4c <main+0xa0>)
 8008af4:	f002 fed7 	bl	800b8a6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8008af8:	4815      	ldr	r0, [pc, #84]	; (8008b50 <main+0xa4>)
 8008afa:	f002 feb0 	bl	800b85e <HAL_TIM_Base_Start>

	RGB_Init();
 8008afe:	f7fa ff53 	bl	80039a8 <RGB_Init>
	LCD_Init();
 8008b02:	f7f8 fe5f 	bl	80017c4 <LCD_Init>
	THS_Init();
 8008b06:	f7fb fe23 	bl	8004750 <THS_Init>
	SD_Init();
 8008b0a:	f7fb fb2f 	bl	800416c <SD_Init>
	NET_Init();
 8008b0e:	f7fa fc0f 	bl	8003330 <NET_Init>
	MENU_Init();
 8008b12:	f7f9 fbcb 	bl	80022ac <MENU_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8008b16:	f7f8 ff4d 	bl	80019b4 <LCD_ClearScreen>

	while (1) {
		if (Update && State == ST_Clock) {
 8008b1a:	4b0e      	ldr	r3, [pc, #56]	; (8008b54 <main+0xa8>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <main+0x88>
 8008b22:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <main+0xac>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <main+0x88>
			MENU_Clock();
 8008b2a:	f7fa f8d1 	bl	8002cd0 <MENU_Clock>
			Update = false;
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <main+0xa8>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	701a      	strb	r2, [r3, #0]
		}

		if (MENU_HandleKeys()) {
 8008b34:	f7fa f914 	bl	8002d60 <MENU_HandleKeys>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0ed      	beq.n	8008b1a <main+0x6e>
			Update = true;
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <main+0xa8>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	701a      	strb	r2, [r3, #0]
		if (Update && State == ST_Clock) {
 8008b44:	e7e9      	b.n	8008b1a <main+0x6e>
 8008b46:	bf00      	nop
 8008b48:	20002dc0 	.word	0x20002dc0
 8008b4c:	20002d04 	.word	0x20002d04
 8008b50:	20002c84 	.word	0x20002c84
 8008b54:	20000059 	.word	0x20000059
 8008b58:	20002d45 	.word	0x20002d45

08008b5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b098      	sub	sp, #96	; 0x60
 8008b60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b66:	2230      	movs	r2, #48	; 0x30
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f004 fe02 	bl	800d774 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008b70:	f107 031c 	add.w	r3, r7, #28
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	605a      	str	r2, [r3, #4]
 8008b7a:	609a      	str	r2, [r3, #8]
 8008b7c:	60da      	str	r2, [r3, #12]
 8008b7e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8008b80:	f107 030c 	add.w	r3, r7, #12
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	4b2f      	ldr	r3, [pc, #188]	; (8008c50 <SystemClock_Config+0xf4>)
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	4a2e      	ldr	r2, [pc, #184]	; (8008c50 <SystemClock_Config+0xf4>)
 8008b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b9e:	4b2c      	ldr	r3, [pc, #176]	; (8008c50 <SystemClock_Config+0xf4>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	4b29      	ldr	r3, [pc, #164]	; (8008c54 <SystemClock_Config+0xf8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a28      	ldr	r2, [pc, #160]	; (8008c54 <SystemClock_Config+0xf8>)
 8008bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <SystemClock_Config+0xf8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008bd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8008bda:	2304      	movs	r3, #4
 8008bdc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 8008bde:	2348      	movs	r3, #72	; 0x48
 8008be0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008be2:	2302      	movs	r3, #2
 8008be4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8008be6:	2303      	movs	r3, #3
 8008be8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 f95e 	bl	8009eb0 <HAL_RCC_OscConfig>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <SystemClock_Config+0xa2>
		Error_Handler();
 8008bfa:	f000 fb5d 	bl	80092b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008bfe:	230f      	movs	r3, #15
 8008c00:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c02:	2302      	movs	r3, #2
 8008c04:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c06:	2300      	movs	r3, #0
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8008c14:	f107 031c 	add.w	r3, r7, #28
 8008c18:	2102      	movs	r1, #2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 fbb8 	bl	800a390 <HAL_RCC_ClockConfig>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <SystemClock_Config+0xce>
		Error_Handler();
 8008c26:	f000 fb47 	bl	80092b8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <SystemClock_Config+0xfc>)
 8008c30:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8008c32:	f107 030c 	add.w	r3, r7, #12
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fd9c 	bl	800a774 <HAL_RCCEx_PeriphCLKConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <SystemClock_Config+0xea>
		Error_Handler();
 8008c42:	f000 fb39 	bl	80092b8 <Error_Handler>
	}
}
 8008c46:	bf00      	nop
 8008c48:	3760      	adds	r7, #96	; 0x60
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40007000 	.word	0x40007000
 8008c58:	00100300 	.word	0x00100300

08008c5c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8008c62:	1d3b      	adds	r3, r7, #4
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	609a      	str	r2, [r3, #8]
 8008c6c:	60da      	str	r2, [r3, #12]
 8008c6e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8008c70:	2300      	movs	r3, #0
 8008c72:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8008c74:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c76:	4a2a      	ldr	r2, [pc, #168]	; (8008d20 <MX_RTC_Init+0xc4>)
 8008c78:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c7a:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 8008c80:	4b26      	ldr	r3, [pc, #152]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c82:	227d      	movs	r2, #125	; 0x7d
 8008c84:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 4000;
 8008c86:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c88:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8008c8c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c8e:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c94:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c9a:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8008ca0:	481e      	ldr	r0, [pc, #120]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008ca2:	f001 fe49 	bl	800a938 <HAL_RTC_Init>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_RTC_Init+0x54>
		Error_Handler();
 8008cac:	f000 fb04 	bl	80092b8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4814      	ldr	r0, [pc, #80]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008ccc:	f001 fec5 	bl	800aa5a <HAL_RTC_SetTime>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <MX_RTC_Init+0x7e>
		Error_Handler();
 8008cd6:	f000 faef 	bl	80092b8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8008cde:	2304      	movs	r3, #4
 8008ce0:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x8;
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8008ce6:	2320      	movs	r3, #32
 8008ce8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8008cea:	463b      	mov	r3, r7
 8008cec:	2201      	movs	r2, #1
 8008cee:	4619      	mov	r1, r3
 8008cf0:	480a      	ldr	r0, [pc, #40]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008cf2:	f001 ffcd 	bl	800ac90 <HAL_RTC_SetDate>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <MX_RTC_Init+0xa4>
		Error_Handler();
 8008cfc:	f000 fadc 	bl	80092b8 <Error_Handler>
	}
	/** Enable Calibrartion
	 */
	if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK) {
 8008d00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <MX_RTC_Init+0xc0>)
 8008d06:	f002 f949 	bl	800af9c <HAL_RTCEx_SetCalibrationOutPut>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <MX_RTC_Init+0xb8>
		Error_Handler();
 8008d10:	f000 fad2 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8008d14:	bf00      	nop
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20002d48 	.word	0x20002d48
 8008d20:	40002800 	.word	0x40002800

08008d24 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d2a:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <MX_SPI1_Init+0x68>)
 8008d2c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8008d2e:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d34:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008d36:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d3c:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d54:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d58:	2218      	movs	r2, #24
 8008d5a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d68:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d70:	220a      	movs	r2, #10
 8008d72:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8008d74:	4804      	ldr	r0, [pc, #16]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d76:	f002 f953 	bl	800b020 <HAL_SPI_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_SPI1_Init+0x60>
		Error_Handler();
 8008d80:	f000 fa9a 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8008d84:	bf00      	nop
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20002d68 	.word	0x20002d68
 8008d8c:	40013000 	.word	0x40013000

08008d90 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8008d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	605a      	str	r2, [r3, #4]
 8008da0:	609a      	str	r2, [r3, #8]
 8008da2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8008da4:	f107 0320 	add.w	r3, r7, #32
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	605a      	str	r2, [r3, #4]
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	611a      	str	r2, [r3, #16]
 8008dbc:	615a      	str	r2, [r3, #20]
 8008dbe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8008dc0:	4b38      	ldr	r3, [pc, #224]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008dc6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8008dc8:	4b36      	ldr	r3, [pc, #216]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dca:	2247      	movs	r2, #71	; 0x47
 8008dcc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dce:	4b35      	ldr	r3, [pc, #212]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8008dd4:	4b33      	ldr	r3, [pc, #204]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008dda:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ddc:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008de2:	4b30      	ldr	r3, [pc, #192]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8008de8:	482e      	ldr	r0, [pc, #184]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008dea:	f002 fd0d 	bl	800b808 <HAL_TIM_Base_Init>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_TIM2_Init+0x68>
		Error_Handler();
 8008df4:	f000 fa60 	bl	80092b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8008dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e02:	4619      	mov	r1, r3
 8008e04:	4827      	ldr	r0, [pc, #156]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e06:	f002 ffb3 	bl	800bd70 <HAL_TIM_ConfigClockSource>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <MX_TIM2_Init+0x84>
		Error_Handler();
 8008e10:	f000 fa52 	bl	80092b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8008e14:	4823      	ldr	r0, [pc, #140]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e16:	f002 fd6a 	bl	800b8ee <HAL_TIM_PWM_Init>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <MX_TIM2_Init+0x94>
		Error_Handler();
 8008e20:	f000 fa4a 	bl	80092b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e24:	2300      	movs	r3, #0
 8008e26:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8008e2c:	f107 0320 	add.w	r3, r7, #32
 8008e30:	4619      	mov	r1, r3
 8008e32:	481c      	ldr	r0, [pc, #112]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e34:	f003 fb8c 	bl	800c550 <HAL_TIMEx_MasterConfigSynchronization>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8008e3e:	f000 fa3b 	bl	80092b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e42:	2360      	movs	r3, #96	; 0x60
 8008e44:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	2200      	movs	r2, #0
 8008e56:	4619      	mov	r1, r3
 8008e58:	4812      	ldr	r0, [pc, #72]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e5a:	f002 fec3 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8008e64:	f000 fa28 	bl	80092b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	480d      	ldr	r0, [pc, #52]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e70:	f002 feb8 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8008e7a:	f000 fa1d 	bl	80092b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8008e7e:	1d3b      	adds	r3, r7, #4
 8008e80:	2208      	movs	r2, #8
 8008e82:	4619      	mov	r1, r3
 8008e84:	4807      	ldr	r0, [pc, #28]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e86:	f002 fead 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8008e90:	f000 fa12 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8008e94:	4803      	ldr	r0, [pc, #12]	; (8008ea4 <MX_TIM2_Init+0x114>)
 8008e96:	f000 faf7 	bl	8009488 <HAL_TIM_MspPostInit>

}
 8008e9a:	bf00      	nop
 8008e9c:	3738      	adds	r7, #56	; 0x38
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20002dc0 	.word	0x20002dc0

08008ea8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	605a      	str	r2, [r3, #4]
 8008eb8:	609a      	str	r2, [r3, #8]
 8008eba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008ec6:	4a1e      	ldr	r2, [pc, #120]	; (8008f40 <MX_TIM3_Init+0x98>)
 8008ec8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008ecc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008ed0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ed2:	4b1a      	ldr	r3, [pc, #104]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 8008ed8:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008eda:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8008ede:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ee0:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8008eec:	4813      	ldr	r0, [pc, #76]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008eee:	f002 fc8b 	bl	800b808 <HAL_TIM_Base_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <MX_TIM3_Init+0x54>
		Error_Handler();
 8008ef8:	f000 f9de 	bl	80092b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f00:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4619      	mov	r1, r3
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008f0a:	f002 ff31 	bl	800bd70 <HAL_TIM_ConfigClockSource>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <MX_TIM3_Init+0x70>
		Error_Handler();
 8008f14:	f000 f9d0 	bl	80092b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8008f20:	463b      	mov	r3, r7
 8008f22:	4619      	mov	r1, r3
 8008f24:	4805      	ldr	r0, [pc, #20]	; (8008f3c <MX_TIM3_Init+0x94>)
 8008f26:	f003 fb13 	bl	800c550 <HAL_TIMEx_MasterConfigSynchronization>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8008f30:	f000 f9c2 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8008f34:	bf00      	nop
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20002d04 	.word	0x20002d04
 8008f40:	40000400 	.word	0x40000400

08008f44 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	605a      	str	r2, [r3, #4]
 8008f54:	609a      	str	r2, [r3, #8]
 8008f56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8008f58:	463b      	mov	r3, r7
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f62:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <MX_TIM4_Init+0x98>)
 8008f64:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8008f66:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f68:	2247      	movs	r2, #71	; 0x47
 8008f6a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f6c:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 8008f72:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f78:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f7a:	4b17      	ldr	r3, [pc, #92]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f80:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8008f86:	4814      	ldr	r0, [pc, #80]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008f88:	f002 fc3e 	bl	800b808 <HAL_TIM_Base_Init>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <MX_TIM4_Init+0x52>
		Error_Handler();
 8008f92:	f000 f991 	bl	80092b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f9a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8008f9c:	f107 0308 	add.w	r3, r7, #8
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	480d      	ldr	r0, [pc, #52]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008fa4:	f002 fee4 	bl	800bd70 <HAL_TIM_ConfigClockSource>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8008fae:	f000 f983 	bl	80092b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8008fba:	463b      	mov	r3, r7
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4806      	ldr	r0, [pc, #24]	; (8008fd8 <MX_TIM4_Init+0x94>)
 8008fc0:	f003 fac6 	bl	800c550 <HAL_TIMEx_MasterConfigSynchronization>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8008fca:	f000 f975 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8008fce:	bf00      	nop
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20002c84 	.word	0x20002c84
 8008fdc:	40000800 	.word	0x40000800

08008fe0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8008fe6:	4a12      	ldr	r2, [pc, #72]	; (8009030 <MX_USART3_UART_Init+0x50>)
 8008fe8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8008fea:	4b10      	ldr	r3, [pc, #64]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8008fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ff0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008ff2:	4b0e      	ldr	r3, [pc, #56]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8008ff8:	4b0c      	ldr	r3, [pc, #48]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8009000:	2200      	movs	r2, #0
 8009002:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8009004:	4b09      	ldr	r3, [pc, #36]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8009006:	220c      	movs	r2, #12
 8009008:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800900a:	4b08      	ldr	r3, [pc, #32]	; (800902c <MX_USART3_UART_Init+0x4c>)
 800900c:	2200      	movs	r2, #0
 800900e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8009012:	2200      	movs	r2, #0
 8009014:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <MX_USART3_UART_Init+0x4c>)
 8009018:	f003 fb2a 	bl	800c670 <HAL_UART_Init>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8009022:	f000 f949 	bl	80092b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8009026:	bf00      	nop
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20002cc4 	.word	0x20002cc4
 8009030:	40004800 	.word	0x40004800

08009034 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b08c      	sub	sp, #48	; 0x30
 8009038:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800903a:	f107 031c 	add.w	r3, r7, #28
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	605a      	str	r2, [r3, #4]
 8009044:	609a      	str	r2, [r3, #8]
 8009046:	60da      	str	r2, [r3, #12]
 8009048:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800904a:	2300      	movs	r3, #0
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	4b67      	ldr	r3, [pc, #412]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	4a66      	ldr	r2, [pc, #408]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009054:	f043 0310 	orr.w	r3, r3, #16
 8009058:	6313      	str	r3, [r2, #48]	; 0x30
 800905a:	4b64      	ldr	r3, [pc, #400]	; (80091ec <MX_GPIO_Init+0x1b8>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009066:	2300      	movs	r3, #0
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	4b60      	ldr	r3, [pc, #384]	; (80091ec <MX_GPIO_Init+0x1b8>)
 800906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906e:	4a5f      	ldr	r2, [pc, #380]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009070:	f043 0304 	orr.w	r3, r3, #4
 8009074:	6313      	str	r3, [r2, #48]	; 0x30
 8009076:	4b5d      	ldr	r3, [pc, #372]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8009082:	2300      	movs	r3, #0
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	4b59      	ldr	r3, [pc, #356]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	4a58      	ldr	r2, [pc, #352]	; (80091ec <MX_GPIO_Init+0x1b8>)
 800908c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009090:	6313      	str	r3, [r2, #48]	; 0x30
 8009092:	4b56      	ldr	r3, [pc, #344]	; (80091ec <MX_GPIO_Init+0x1b8>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	4b52      	ldr	r3, [pc, #328]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	4a51      	ldr	r2, [pc, #324]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	6313      	str	r3, [r2, #48]	; 0x30
 80090ae:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	4b4b      	ldr	r3, [pc, #300]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	4a4a      	ldr	r2, [pc, #296]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090c4:	f043 0308 	orr.w	r3, r3, #8
 80090c8:	6313      	str	r3, [r2, #48]	; 0x30
 80090ca:	4b48      	ldr	r3, [pc, #288]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80090d6:	2300      	movs	r3, #0
 80090d8:	607b      	str	r3, [r7, #4]
 80090da:	4b44      	ldr	r3, [pc, #272]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	4a43      	ldr	r2, [pc, #268]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090e0:	f043 0302 	orr.w	r3, r3, #2
 80090e4:	6313      	str	r3, [r2, #48]	; 0x30
 80090e6:	4b41      	ldr	r3, [pc, #260]	; (80091ec <MX_GPIO_Init+0x1b8>)
 80090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80090f2:	2200      	movs	r2, #0
 80090f4:	217f      	movs	r1, #127	; 0x7f
 80090f6:	483e      	ldr	r0, [pc, #248]	; (80091f0 <MX_GPIO_Init+0x1bc>)
 80090f8:	f000 fe8e 	bl	8009e18 <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 80090fc:	2200      	movs	r2, #0
 80090fe:	f248 0103 	movw	r1, #32771	; 0x8003
 8009102:	483c      	ldr	r0, [pc, #240]	; (80091f4 <MX_GPIO_Init+0x1c0>)
 8009104:	f000 fe88 	bl	8009e18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8009108:	2200      	movs	r2, #0
 800910a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800910e:	483a      	ldr	r0, [pc, #232]	; (80091f8 <MX_GPIO_Init+0x1c4>)
 8009110:	f000 fe82 	bl	8009e18 <HAL_GPIO_WritePin>
	STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 8009114:	237f      	movs	r3, #127	; 0x7f
 8009116:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009118:	2301      	movs	r3, #1
 800911a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800911c:	2302      	movs	r3, #2
 800911e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009120:	2300      	movs	r3, #0
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009124:	f107 031c 	add.w	r3, r7, #28
 8009128:	4619      	mov	r1, r3
 800912a:	4831      	ldr	r0, [pc, #196]	; (80091f0 <MX_GPIO_Init+0x1bc>)
 800912c:	f000 fcc2 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8009130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009134:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009136:	2301      	movs	r3, #1
 8009138:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800913a:	2302      	movs	r3, #2
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800913e:	2300      	movs	r3, #0
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 8009142:	f107 031c 	add.w	r3, r7, #28
 8009146:	4619      	mov	r1, r3
 8009148:	482a      	ldr	r0, [pc, #168]	; (80091f4 <MX_GPIO_Init+0x1c0>)
 800914a:	f000 fcb3 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 800914e:	2303      	movs	r3, #3
 8009150:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009152:	2301      	movs	r3, #1
 8009154:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009156:	2301      	movs	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800915a:	2300      	movs	r3, #0
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800915e:	f107 031c 	add.w	r3, r7, #28
 8009162:	4619      	mov	r1, r3
 8009164:	4823      	ldr	r0, [pc, #140]	; (80091f4 <MX_GPIO_Init+0x1c0>)
 8009166:	f000 fca5 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 800916a:	2301      	movs	r3, #1
 800916c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800916e:	4b23      	ldr	r3, [pc, #140]	; (80091fc <MX_GPIO_Init+0x1c8>)
 8009170:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009172:	2302      	movs	r3, #2
 8009174:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 8009176:	f107 031c 	add.w	r3, r7, #28
 800917a:	4619      	mov	r1, r3
 800917c:	4820      	ldr	r0, [pc, #128]	; (8009200 <MX_GPIO_Init+0x1cc>)
 800917e:	f000 fc99 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MENU_Btn1_Pin */
	GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 8009182:	2380      	movs	r3, #128	; 0x80
 8009184:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009186:	2300      	movs	r3, #0
 8009188:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800918a:	2301      	movs	r3, #1
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 800918e:	f107 031c 	add.w	r3, r7, #28
 8009192:	4619      	mov	r1, r3
 8009194:	4816      	ldr	r0, [pc, #88]	; (80091f0 <MX_GPIO_Init+0x1bc>)
 8009196:	f000 fc8d 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
	GPIO_InitStruct.Pin = MENU_Btn2_Pin | MENU_Btn3_Pin | MENU_Btn4_Pin;
 800919a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800919e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091a0:	2300      	movs	r3, #0
 80091a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80091a4:	2302      	movs	r3, #2
 80091a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80091a8:	f107 031c 	add.w	r3, r7, #28
 80091ac:	4619      	mov	r1, r3
 80091ae:	4810      	ldr	r0, [pc, #64]	; (80091f0 <MX_GPIO_Init+0x1bc>)
 80091b0:	f000 fc80 	bl	8009ab4 <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 80091b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80091b8:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091ba:	2301      	movs	r3, #1
 80091bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c2:	2300      	movs	r3, #0
 80091c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80091c6:	f107 031c 	add.w	r3, r7, #28
 80091ca:	4619      	mov	r1, r3
 80091cc:	480a      	ldr	r0, [pc, #40]	; (80091f8 <MX_GPIO_Init+0x1c4>)
 80091ce:	f000 fc71 	bl	8009ab4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80091d2:	2200      	movs	r2, #0
 80091d4:	2101      	movs	r1, #1
 80091d6:	2006      	movs	r0, #6
 80091d8:	f000 fc13 	bl	8009a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80091dc:	2006      	movs	r0, #6
 80091de:	f000 fc2c 	bl	8009a3a <HAL_NVIC_EnableIRQ>

}
 80091e2:	bf00      	nop
 80091e4:	3730      	adds	r7, #48	; 0x30
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	40023800 	.word	0x40023800
 80091f0:	40021000 	.word	0x40021000
 80091f4:	40020800 	.word	0x40020800
 80091f8:	40020c00 	.word	0x40020c00
 80091fc:	10110000 	.word	0x10110000
 8009200:	40020000 	.word	0x40020000

08009204 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009214:	d107      	bne.n	8009226 <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fa fe3c 	bl	8003e98 <RGB_SetMode>
		THS_ErrorClock();
 8009220:	f7fb fc68 	bl	8004af4 <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
		Update = true;
	}
}
 8009224:	e00d      	b.n	8009242 <HAL_TIM_PeriodElapsedCallback+0x3e>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a09      	ldr	r2, [pc, #36]	; (8009250 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d108      	bne.n	8009242 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <HAL_TIM_PeriodElapsedCallback+0x3e>
		LCD_BackgroundOff();
 8009238:	f7f8 fbb0 	bl	800199c <LCD_BackgroundOff>
		Update = true;
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800923e:	2201      	movs	r2, #1
 8009240:	701a      	strb	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000276 	.word	0x20000276
 8009250:	40000400 	.word	0x40000400
 8009254:	20002d45 	.word	0x20002d45
 8009258:	20000059 	.word	0x20000059

0800925c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8009266:	88fb      	ldrh	r3, [r7, #6]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d113      	bne.n	8009294 <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 800926c:	2101      	movs	r1, #1
 800926e:	480b      	ldr	r0, [pc, #44]	; (800929c <HAL_GPIO_EXTI_Callback+0x40>)
 8009270:	f000 fdba 	bl	8009de8 <HAL_GPIO_ReadPin>
 8009274:	4603      	mov	r3, r0
 8009276:	2b01      	cmp	r3, #1
 8009278:	d10c      	bne.n	8009294 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9) {
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <HAL_GPIO_EXTI_Callback+0x44>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	b2da      	uxtb	r2, r3
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b09      	cmp	r3, #9
 800928c:	d902      	bls.n	8009294 <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <HAL_GPIO_EXTI_Callback+0x44>)
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40020000 	.word	0x40020000
 80092a0:	20000276 	.word	0x20000276

080092a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	NET_HandleUART_IT();
 80092ac:	f7fa faa4 	bl	80037f8 <NET_HandleUART_IT>
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80092bc:	bf00      	nop
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
	...

080092c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ce:	2300      	movs	r3, #0
 80092d0:	607b      	str	r3, [r7, #4]
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <HAL_MspInit+0x4c>)
 80092d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d6:	4a0f      	ldr	r2, [pc, #60]	; (8009314 <HAL_MspInit+0x4c>)
 80092d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092dc:	6453      	str	r3, [r2, #68]	; 0x44
 80092de:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <HAL_MspInit+0x4c>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092ea:	2300      	movs	r3, #0
 80092ec:	603b      	str	r3, [r7, #0]
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <HAL_MspInit+0x4c>)
 80092f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f2:	4a08      	ldr	r2, [pc, #32]	; (8009314 <HAL_MspInit+0x4c>)
 80092f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6413      	str	r3, [r2, #64]	; 0x40
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <HAL_MspInit+0x4c>)
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	40023800 	.word	0x40023800

08009318 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a05      	ldr	r2, [pc, #20]	; (800933c <HAL_RTC_MspInit+0x24>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d102      	bne.n	8009330 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <HAL_RTC_MspInit+0x28>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	40002800 	.word	0x40002800
 8009340:	42470e3c 	.word	0x42470e3c

08009344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	; 0x28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	605a      	str	r2, [r3, #4]
 8009356:	609a      	str	r2, [r3, #8]
 8009358:	60da      	str	r2, [r3, #12]
 800935a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a19      	ldr	r2, [pc, #100]	; (80093c8 <HAL_SPI_MspInit+0x84>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d12b      	bne.n	80093be <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009366:	2300      	movs	r3, #0
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	4b18      	ldr	r3, [pc, #96]	; (80093cc <HAL_SPI_MspInit+0x88>)
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	4a17      	ldr	r2, [pc, #92]	; (80093cc <HAL_SPI_MspInit+0x88>)
 8009370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009374:	6453      	str	r3, [r2, #68]	; 0x44
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <HAL_SPI_MspInit+0x88>)
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800937e:	613b      	str	r3, [r7, #16]
 8009380:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009382:	2300      	movs	r3, #0
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	4b11      	ldr	r3, [pc, #68]	; (80093cc <HAL_SPI_MspInit+0x88>)
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <HAL_SPI_MspInit+0x88>)
 800938c:	f043 0302 	orr.w	r3, r3, #2
 8009390:	6313      	str	r3, [r2, #48]	; 0x30
 8009392:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <HAL_SPI_MspInit+0x88>)
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800939e:	2338      	movs	r3, #56	; 0x38
 80093a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a2:	2302      	movs	r3, #2
 80093a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093aa:	2303      	movs	r3, #3
 80093ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80093ae:	2305      	movs	r3, #5
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093b2:	f107 0314 	add.w	r3, r7, #20
 80093b6:	4619      	mov	r1, r3
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <HAL_SPI_MspInit+0x8c>)
 80093ba:	f000 fb7b 	bl	8009ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80093be:	bf00      	nop
 80093c0:	3728      	adds	r7, #40	; 0x28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40013000 	.word	0x40013000
 80093cc:	40023800 	.word	0x40023800
 80093d0:	40020400 	.word	0x40020400

080093d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e4:	d116      	bne.n	8009414 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	4a23      	ldr	r2, [pc, #140]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 80093f0:	f043 0301 	orr.w	r3, r3, #1
 80093f4:	6413      	str	r3, [r2, #64]	; 0x40
 80093f6:	4b21      	ldr	r3, [pc, #132]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	2102      	movs	r1, #2
 8009406:	201c      	movs	r0, #28
 8009408:	f000 fafb 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800940c:	201c      	movs	r0, #28
 800940e:	f000 fb14 	bl	8009a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8009412:	e02e      	b.n	8009472 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a19      	ldr	r2, [pc, #100]	; (8009480 <HAL_TIM_Base_MspInit+0xac>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d116      	bne.n	800944c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	4b16      	ldr	r3, [pc, #88]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	4a15      	ldr	r2, [pc, #84]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 8009428:	f043 0302 	orr.w	r3, r3, #2
 800942c:	6413      	str	r3, [r2, #64]	; 0x40
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800943a:	2200      	movs	r2, #0
 800943c:	2103      	movs	r1, #3
 800943e:	201d      	movs	r0, #29
 8009440:	f000 fadf 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009444:	201d      	movs	r0, #29
 8009446:	f000 faf8 	bl	8009a3a <HAL_NVIC_EnableIRQ>
}
 800944a:	e012      	b.n	8009472 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a0c      	ldr	r2, [pc, #48]	; (8009484 <HAL_TIM_Base_MspInit+0xb0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d10d      	bne.n	8009472 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	4b08      	ldr	r3, [pc, #32]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	4a07      	ldr	r2, [pc, #28]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 8009460:	f043 0304 	orr.w	r3, r3, #4
 8009464:	6413      	str	r3, [r2, #64]	; 0x40
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <HAL_TIM_Base_MspInit+0xa8>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40023800 	.word	0x40023800
 8009480:	40000400 	.word	0x40000400
 8009484:	40000800 	.word	0x40000800

08009488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	609a      	str	r2, [r3, #8]
 800949c:	60da      	str	r2, [r3, #12]
 800949e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d11d      	bne.n	80094e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094aa:	2300      	movs	r3, #0
 80094ac:	60bb      	str	r3, [r7, #8]
 80094ae:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <HAL_TIM_MspPostInit+0x68>)
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b2:	4a0f      	ldr	r2, [pc, #60]	; (80094f0 <HAL_TIM_MspPostInit+0x68>)
 80094b4:	f043 0301 	orr.w	r3, r3, #1
 80094b8:	6313      	str	r3, [r2, #48]	; 0x30
 80094ba:	4b0d      	ldr	r3, [pc, #52]	; (80094f0 <HAL_TIM_MspPostInit+0x68>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	60bb      	str	r3, [r7, #8]
 80094c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 80094c6:	2326      	movs	r3, #38	; 0x26
 80094c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ca:	2302      	movs	r3, #2
 80094cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	4619      	mov	r1, r3
 80094e0:	4804      	ldr	r0, [pc, #16]	; (80094f4 <HAL_TIM_MspPostInit+0x6c>)
 80094e2:	f000 fae7 	bl	8009ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80094e6:	bf00      	nop
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	40023800 	.word	0x40023800
 80094f4:	40020000 	.word	0x40020000

080094f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08a      	sub	sp, #40	; 0x28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009500:	f107 0314 	add.w	r3, r7, #20
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
 800950a:	609a      	str	r2, [r3, #8]
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a1d      	ldr	r2, [pc, #116]	; (800958c <HAL_UART_MspInit+0x94>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d134      	bne.n	8009584 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
 800951e:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <HAL_UART_MspInit+0x98>)
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	4a1b      	ldr	r2, [pc, #108]	; (8009590 <HAL_UART_MspInit+0x98>)
 8009524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009528:	6413      	str	r3, [r2, #64]	; 0x40
 800952a:	4b19      	ldr	r3, [pc, #100]	; (8009590 <HAL_UART_MspInit+0x98>)
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <HAL_UART_MspInit+0x98>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	4a14      	ldr	r2, [pc, #80]	; (8009590 <HAL_UART_MspInit+0x98>)
 8009540:	f043 0304 	orr.w	r3, r3, #4
 8009544:	6313      	str	r3, [r2, #48]	; 0x30
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <HAL_UART_MspInit+0x98>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 8009552:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009558:	2302      	movs	r3, #2
 800955a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009560:	2303      	movs	r3, #3
 8009562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009564:	2307      	movs	r3, #7
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009568:	f107 0314 	add.w	r3, r7, #20
 800956c:	4619      	mov	r1, r3
 800956e:	4809      	ldr	r0, [pc, #36]	; (8009594 <HAL_UART_MspInit+0x9c>)
 8009570:	f000 faa0 	bl	8009ab4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8009574:	2200      	movs	r2, #0
 8009576:	2101      	movs	r1, #1
 8009578:	2027      	movs	r0, #39	; 0x27
 800957a:	f000 fa42 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800957e:	2027      	movs	r0, #39	; 0x27
 8009580:	f000 fa5b 	bl	8009a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009584:	bf00      	nop
 8009586:	3728      	adds	r7, #40	; 0x28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40004800 	.word	0x40004800
 8009590:	40023800 	.word	0x40023800
 8009594:	40020800 	.word	0x40020800

08009598 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800959c:	bf00      	nop
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80095a6:	b480      	push	{r7}
 80095a8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		return;
 80095aa:	bf00      	nop
		/* USER CODE END W1_HardFault_IRQn 0 */
	}
}
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80095b8:	e7fe      	b.n	80095b8 <MemManage_Handler+0x4>

080095ba <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80095ba:	b480      	push	{r7}
 80095bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80095be:	e7fe      	b.n	80095be <BusFault_Handler+0x4>

080095c0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80095c0:	b480      	push	{r7}
 80095c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80095c4:	e7fe      	b.n	80095c4 <UsageFault_Handler+0x4>

080095c6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80095c6:	b480      	push	{r7}
 80095c8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80095ca:	bf00      	nop
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80095d8:	bf00      	nop
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80095e2:	b480      	push	{r7}
 80095e4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80095e6:	bf00      	nop
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 80095f4:	f7fb ffe0 	bl	80055b8 <sdcard_systick_timerproc>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80095f8:	f000 f8e6 	bl	80097c8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80095fc:	bf00      	nop
 80095fe:	bd80      	pop	{r7, pc}

08009600 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009604:	2001      	movs	r0, #1
 8009606:	f000 fc3b 	bl	8009e80 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 800960a:	bf00      	nop
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8009614:	4802      	ldr	r0, [pc, #8]	; (8009620 <TIM2_IRQHandler+0x10>)
 8009616:	f002 f9dd 	bl	800b9d4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 800961a:	bf00      	nop
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20002dc0 	.word	0x20002dc0

08009624 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8009628:	4802      	ldr	r0, [pc, #8]	; (8009634 <TIM3_IRQHandler+0x10>)
 800962a:	f002 f9d3 	bl	800b9d4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20002d04 	.word	0x20002d04

08009638 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 800963c:	4802      	ldr	r0, [pc, #8]	; (8009648 <USART3_IRQHandler+0x10>)
 800963e:	f003 fa51 	bl	800cae4 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20002cc4 	.word	0x20002cc4

0800964c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009654:	4b11      	ldr	r3, [pc, #68]	; (800969c <_sbrk+0x50>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <_sbrk+0x16>
		heap_end = &end;
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <_sbrk+0x50>)
 800965e:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <_sbrk+0x54>)
 8009660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009662:	4b0e      	ldr	r3, [pc, #56]	; (800969c <_sbrk+0x50>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <_sbrk+0x50>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4413      	add	r3, r2
 8009670:	466a      	mov	r2, sp
 8009672:	4293      	cmp	r3, r2
 8009674:	d907      	bls.n	8009686 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009676:	f004 f853 	bl	800d720 <__errno>
 800967a:	4602      	mov	r2, r0
 800967c:	230c      	movs	r3, #12
 800967e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009680:	f04f 33ff 	mov.w	r3, #4294967295
 8009684:	e006      	b.n	8009694 <_sbrk+0x48>
	}

	heap_end += incr;
 8009686:	4b05      	ldr	r3, [pc, #20]	; (800969c <_sbrk+0x50>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4413      	add	r3, r2
 800968e:	4a03      	ldr	r2, [pc, #12]	; (800969c <_sbrk+0x50>)
 8009690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009692:	68fb      	ldr	r3, [r7, #12]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000278 	.word	0x20000278
 80096a0:	20002e08 	.word	0x20002e08

080096a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80096a4:	b480      	push	{r7}
 80096a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80096a8:	4b08      	ldr	r3, [pc, #32]	; (80096cc <SystemInit+0x28>)
 80096aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ae:	4a07      	ldr	r2, [pc, #28]	; (80096cc <SystemInit+0x28>)
 80096b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <SystemInit+0x28>)
 80096ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80096be:	609a      	str	r2, [r3, #8]
#endif
}
 80096c0:	bf00      	nop
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80096d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80096d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80096d6:	e003      	b.n	80096e0 <LoopCopyDataInit>

080096d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80096d8:	4b0c      	ldr	r3, [pc, #48]	; (800970c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80096da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80096dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80096de:	3104      	adds	r1, #4

080096e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80096e0:	480b      	ldr	r0, [pc, #44]	; (8009710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80096e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80096e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80096e8:	d3f6      	bcc.n	80096d8 <CopyDataInit>
  ldr  r2, =_sbss
 80096ea:	4a0b      	ldr	r2, [pc, #44]	; (8009718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80096ec:	e002      	b.n	80096f4 <LoopFillZerobss>

080096ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80096ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80096f0:	f842 3b04 	str.w	r3, [r2], #4

080096f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80096f4:	4b09      	ldr	r3, [pc, #36]	; (800971c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80096f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80096f8:	d3f9      	bcc.n	80096ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096fa:	f7ff ffd3 	bl	80096a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096fe:	f004 f815 	bl	800d72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009702:	f7ff f9d3 	bl	8008aac <main>
  bx  lr    
 8009706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800970c:	080101e0 	.word	0x080101e0
  ldr  r0, =_sdata
 8009710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009714:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8009718:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 800971c:	20002e08 	.word	0x20002e08

08009720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009720:	e7fe      	b.n	8009720 <ADC_IRQHandler>
	...

08009724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009728:	4b0e      	ldr	r3, [pc, #56]	; (8009764 <HAL_Init+0x40>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a0d      	ldr	r2, [pc, #52]	; (8009764 <HAL_Init+0x40>)
 800972e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009734:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <HAL_Init+0x40>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <HAL_Init+0x40>)
 800973a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800973e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009740:	4b08      	ldr	r3, [pc, #32]	; (8009764 <HAL_Init+0x40>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a07      	ldr	r2, [pc, #28]	; (8009764 <HAL_Init+0x40>)
 8009746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800974a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800974c:	2003      	movs	r0, #3
 800974e:	f000 f94d 	bl	80099ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009752:	2000      	movs	r0, #0
 8009754:	f000 f808 	bl	8009768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009758:	f7ff fdb6 	bl	80092c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	40023c00 	.word	0x40023c00

08009768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009770:	4b12      	ldr	r3, [pc, #72]	; (80097bc <HAL_InitTick+0x54>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <HAL_InitTick+0x58>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800977e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009782:	fbb2 f3f3 	udiv	r3, r2, r3
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f965 	bl	8009a56 <HAL_SYSTICK_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e00e      	b.n	80097b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b0f      	cmp	r3, #15
 800979a:	d80a      	bhi.n	80097b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800979c:	2200      	movs	r2, #0
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	f000 f92d 	bl	8009a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80097a8:	4a06      	ldr	r2, [pc, #24]	; (80097c4 <HAL_InitTick+0x5c>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e000      	b.n	80097b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	2000005c 	.word	0x2000005c
 80097c0:	20000064 	.word	0x20000064
 80097c4:	20000060 	.word	0x20000060

080097c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <HAL_IncTick+0x20>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	4b06      	ldr	r3, [pc, #24]	; (80097ec <HAL_IncTick+0x24>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4413      	add	r3, r2
 80097d8:	4a04      	ldr	r2, [pc, #16]	; (80097ec <HAL_IncTick+0x24>)
 80097da:	6013      	str	r3, [r2, #0]
}
 80097dc:	bf00      	nop
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	20000064 	.word	0x20000064
 80097ec:	20002e00 	.word	0x20002e00

080097f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097f0:	b480      	push	{r7}
 80097f2:	af00      	add	r7, sp, #0
  return uwTick;
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <HAL_GetTick+0x14>)
 80097f6:	681b      	ldr	r3, [r3, #0]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20002e00 	.word	0x20002e00

08009808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009810:	f7ff ffee 	bl	80097f0 <HAL_GetTick>
 8009814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d005      	beq.n	800982e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <HAL_Delay+0x40>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800982e:	bf00      	nop
 8009830:	f7ff ffde 	bl	80097f0 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d8f7      	bhi.n	8009830 <HAL_Delay+0x28>
  {
  }
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000064 	.word	0x20000064

0800984c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800985c:	4b0c      	ldr	r3, [pc, #48]	; (8009890 <__NVIC_SetPriorityGrouping+0x44>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009868:	4013      	ands	r3, r2
 800986a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800987c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800987e:	4a04      	ldr	r2, [pc, #16]	; (8009890 <__NVIC_SetPriorityGrouping+0x44>)
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	60d3      	str	r3, [r2, #12]
}
 8009884:	bf00      	nop
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	e000ed00 	.word	0xe000ed00

08009894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <__NVIC_GetPriorityGrouping+0x18>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	f003 0307 	and.w	r3, r3, #7
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	e000ed00 	.word	0xe000ed00

080098b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	db0b      	blt.n	80098da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	f003 021f 	and.w	r2, r3, #31
 80098c8:	4907      	ldr	r1, [pc, #28]	; (80098e8 <__NVIC_EnableIRQ+0x38>)
 80098ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	2001      	movs	r0, #1
 80098d2:	fa00 f202 	lsl.w	r2, r0, r2
 80098d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	e000e100 	.word	0xe000e100

080098ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	db0a      	blt.n	8009916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	490c      	ldr	r1, [pc, #48]	; (8009938 <__NVIC_SetPriority+0x4c>)
 8009906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800990a:	0112      	lsls	r2, r2, #4
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	440b      	add	r3, r1
 8009910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009914:	e00a      	b.n	800992c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	b2da      	uxtb	r2, r3
 800991a:	4908      	ldr	r1, [pc, #32]	; (800993c <__NVIC_SetPriority+0x50>)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	3b04      	subs	r3, #4
 8009924:	0112      	lsls	r2, r2, #4
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	440b      	add	r3, r1
 800992a:	761a      	strb	r2, [r3, #24]
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	e000e100 	.word	0xe000e100
 800993c:	e000ed00 	.word	0xe000ed00

08009940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	; 0x24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f1c3 0307 	rsb	r3, r3, #7
 800995a:	2b04      	cmp	r3, #4
 800995c:	bf28      	it	cs
 800995e:	2304      	movcs	r3, #4
 8009960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3304      	adds	r3, #4
 8009966:	2b06      	cmp	r3, #6
 8009968:	d902      	bls.n	8009970 <NVIC_EncodePriority+0x30>
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	3b03      	subs	r3, #3
 800996e:	e000      	b.n	8009972 <NVIC_EncodePriority+0x32>
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009974:	f04f 32ff 	mov.w	r2, #4294967295
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	fa02 f303 	lsl.w	r3, r2, r3
 800997e:	43da      	mvns	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	401a      	ands	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009988:	f04f 31ff 	mov.w	r1, #4294967295
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	fa01 f303 	lsl.w	r3, r1, r3
 8009992:	43d9      	mvns	r1, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009998:	4313      	orrs	r3, r2
         );
}
 800999a:	4618      	mov	r0, r3
 800999c:	3724      	adds	r7, #36	; 0x24
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099b8:	d301      	bcc.n	80099be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099ba:	2301      	movs	r3, #1
 80099bc:	e00f      	b.n	80099de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099be:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <SysTick_Config+0x40>)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099c6:	210f      	movs	r1, #15
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	f7ff ff8e 	bl	80098ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <SysTick_Config+0x40>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099d6:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <SysTick_Config+0x40>)
 80099d8:	2207      	movs	r2, #7
 80099da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	e000e010 	.word	0xe000e010

080099ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff ff29 	bl	800984c <__NVIC_SetPriorityGrouping>
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	4603      	mov	r3, r0
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a14:	f7ff ff3e 	bl	8009894 <__NVIC_GetPriorityGrouping>
 8009a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	68b9      	ldr	r1, [r7, #8]
 8009a1e:	6978      	ldr	r0, [r7, #20]
 8009a20:	f7ff ff8e 	bl	8009940 <NVIC_EncodePriority>
 8009a24:	4602      	mov	r2, r0
 8009a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff ff5d 	bl	80098ec <__NVIC_SetPriority>
}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	4603      	mov	r3, r0
 8009a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff31 	bl	80098b0 <__NVIC_EnableIRQ>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff ffa2 	bl	80099a8 <SysTick_Config>
 8009a64:	4603      	mov	r3, r0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a6e:	b480      	push	{r7}
 8009a70:	b083      	sub	sp, #12
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d004      	beq.n	8009a8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2280      	movs	r2, #128	; 0x80
 8009a86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e00c      	b.n	8009aa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2205      	movs	r2, #5
 8009a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0201 	bic.w	r2, r2, #1
 8009aa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	370c      	adds	r7, #12
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b089      	sub	sp, #36	; 0x24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009aca:	2300      	movs	r3, #0
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	e16b      	b.n	8009da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	f040 815a 	bne.w	8009da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d00b      	beq.n	8009b0e <HAL_GPIO_Init+0x5a>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d007      	beq.n	8009b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009b02:	2b11      	cmp	r3, #17
 8009b04:	d003      	beq.n	8009b0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b12      	cmp	r3, #18
 8009b0c:	d130      	bne.n	8009b70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	2203      	movs	r2, #3
 8009b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1e:	43db      	mvns	r3, r3
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	4013      	ands	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b44:	2201      	movs	r2, #1
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4013      	ands	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	091b      	lsrs	r3, r3, #4
 8009b5a:	f003 0201 	and.w	r2, r3, #1
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	fa02 f303 	lsl.w	r3, r2, r3
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b80:	43db      	mvns	r3, r3
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	4013      	ands	r3, r2
 8009b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d003      	beq.n	8009bb0 <HAL_GPIO_Init+0xfc>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	2b12      	cmp	r3, #18
 8009bae:	d123      	bne.n	8009bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	08da      	lsrs	r2, r3, #3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3208      	adds	r2, #8
 8009bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	220f      	movs	r2, #15
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	691a      	ldr	r2, [r3, #16]
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	fa02 f303 	lsl.w	r3, r2, r3
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	08da      	lsrs	r2, r3, #3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3208      	adds	r2, #8
 8009bf2:	69b9      	ldr	r1, [r7, #24]
 8009bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	005b      	lsls	r3, r3, #1
 8009c02:	2203      	movs	r2, #3
 8009c04:	fa02 f303 	lsl.w	r3, r2, r3
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f003 0203 	and.w	r2, r3, #3
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f000 80b4 	beq.w	8009da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	4b5f      	ldr	r3, [pc, #380]	; (8009dbc <HAL_GPIO_Init+0x308>)
 8009c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c42:	4a5e      	ldr	r2, [pc, #376]	; (8009dbc <HAL_GPIO_Init+0x308>)
 8009c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c48:	6453      	str	r3, [r2, #68]	; 0x44
 8009c4a:	4b5c      	ldr	r3, [pc, #368]	; (8009dbc <HAL_GPIO_Init+0x308>)
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c56:	4a5a      	ldr	r2, [pc, #360]	; (8009dc0 <HAL_GPIO_Init+0x30c>)
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	089b      	lsrs	r3, r3, #2
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	220f      	movs	r2, #15
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	43db      	mvns	r3, r3
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	4013      	ands	r3, r2
 8009c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a51      	ldr	r2, [pc, #324]	; (8009dc4 <HAL_GPIO_Init+0x310>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d02b      	beq.n	8009cda <HAL_GPIO_Init+0x226>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a50      	ldr	r2, [pc, #320]	; (8009dc8 <HAL_GPIO_Init+0x314>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d025      	beq.n	8009cd6 <HAL_GPIO_Init+0x222>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a4f      	ldr	r2, [pc, #316]	; (8009dcc <HAL_GPIO_Init+0x318>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d01f      	beq.n	8009cd2 <HAL_GPIO_Init+0x21e>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a4e      	ldr	r2, [pc, #312]	; (8009dd0 <HAL_GPIO_Init+0x31c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d019      	beq.n	8009cce <HAL_GPIO_Init+0x21a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a4d      	ldr	r2, [pc, #308]	; (8009dd4 <HAL_GPIO_Init+0x320>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <HAL_GPIO_Init+0x216>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a4c      	ldr	r2, [pc, #304]	; (8009dd8 <HAL_GPIO_Init+0x324>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00d      	beq.n	8009cc6 <HAL_GPIO_Init+0x212>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a4b      	ldr	r2, [pc, #300]	; (8009ddc <HAL_GPIO_Init+0x328>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d007      	beq.n	8009cc2 <HAL_GPIO_Init+0x20e>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a4a      	ldr	r2, [pc, #296]	; (8009de0 <HAL_GPIO_Init+0x32c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d101      	bne.n	8009cbe <HAL_GPIO_Init+0x20a>
 8009cba:	2307      	movs	r3, #7
 8009cbc:	e00e      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	e00c      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cc2:	2306      	movs	r3, #6
 8009cc4:	e00a      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cc6:	2305      	movs	r3, #5
 8009cc8:	e008      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cca:	2304      	movs	r3, #4
 8009ccc:	e006      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e004      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e002      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e000      	b.n	8009cdc <HAL_GPIO_Init+0x228>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	69fa      	ldr	r2, [r7, #28]
 8009cde:	f002 0203 	and.w	r2, r2, #3
 8009ce2:	0092      	lsls	r2, r2, #2
 8009ce4:	4093      	lsls	r3, r2
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009cec:	4934      	ldr	r1, [pc, #208]	; (8009dc0 <HAL_GPIO_Init+0x30c>)
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	089b      	lsrs	r3, r3, #2
 8009cf2:	3302      	adds	r3, #2
 8009cf4:	69ba      	ldr	r2, [r7, #24]
 8009cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009cfa:	4b3a      	ldr	r3, [pc, #232]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	43db      	mvns	r3, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4013      	ands	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d1e:	4a31      	ldr	r2, [pc, #196]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d24:	4b2f      	ldr	r3, [pc, #188]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	4013      	ands	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d48:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d4e:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	43db      	mvns	r3, r3
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d72:	4a1c      	ldr	r2, [pc, #112]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d78:	4b1a      	ldr	r3, [pc, #104]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	43db      	mvns	r3, r3
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	4013      	ands	r3, r2
 8009d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d9c:	4a11      	ldr	r2, [pc, #68]	; (8009de4 <HAL_GPIO_Init+0x330>)
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	3301      	adds	r3, #1
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2b0f      	cmp	r3, #15
 8009dac:	f67f ae90 	bls.w	8009ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009db0:	bf00      	nop
 8009db2:	3724      	adds	r7, #36	; 0x24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	40013800 	.word	0x40013800
 8009dc4:	40020000 	.word	0x40020000
 8009dc8:	40020400 	.word	0x40020400
 8009dcc:	40020800 	.word	0x40020800
 8009dd0:	40020c00 	.word	0x40020c00
 8009dd4:	40021000 	.word	0x40021000
 8009dd8:	40021400 	.word	0x40021400
 8009ddc:	40021800 	.word	0x40021800
 8009de0:	40021c00 	.word	0x40021c00
 8009de4:	40013c00 	.word	0x40013c00

08009de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	887b      	ldrh	r3, [r7, #2]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e00:	2301      	movs	r3, #1
 8009e02:	73fb      	strb	r3, [r7, #15]
 8009e04:	e001      	b.n	8009e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
 8009e24:	4613      	mov	r3, r2
 8009e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e28:	787b      	ldrb	r3, [r7, #1]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e2e:	887a      	ldrh	r2, [r7, #2]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e34:	e003      	b.n	8009e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e36:	887b      	ldrh	r3, [r7, #2]
 8009e38:	041a      	lsls	r2, r3, #16
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	619a      	str	r2, [r3, #24]
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	695a      	ldr	r2, [r3, #20]
 8009e5a:	887b      	ldrh	r3, [r7, #2]
 8009e5c:	401a      	ands	r2, r3
 8009e5e:	887b      	ldrh	r3, [r7, #2]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d104      	bne.n	8009e6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e64:	887b      	ldrh	r3, [r7, #2]
 8009e66:	041a      	lsls	r2, r3, #16
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009e6c:	e002      	b.n	8009e74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009e6e:	887a      	ldrh	r2, [r7, #2]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	619a      	str	r2, [r3, #24]
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e8c:	695a      	ldr	r2, [r3, #20]
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	4013      	ands	r3, r2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e96:	4a05      	ldr	r2, [pc, #20]	; (8009eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff f9dc 	bl	800925c <HAL_GPIO_EXTI_Callback>
  }
}
 8009ea4:	bf00      	nop
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	40013c00 	.word	0x40013c00

08009eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e25b      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d075      	beq.n	8009fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ece:	4ba3      	ldr	r3, [pc, #652]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f003 030c 	and.w	r3, r3, #12
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d00c      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009eda:	4ba0      	ldr	r3, [pc, #640]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d112      	bne.n	8009f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009ee6:	4b9d      	ldr	r3, [pc, #628]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ef2:	d10b      	bne.n	8009f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef4:	4b99      	ldr	r3, [pc, #612]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05b      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x108>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d157      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e236      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f14:	d106      	bne.n	8009f24 <HAL_RCC_OscConfig+0x74>
 8009f16:	4b91      	ldr	r3, [pc, #580]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a90      	ldr	r2, [pc, #576]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	e01d      	b.n	8009f60 <HAL_RCC_OscConfig+0xb0>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f2c:	d10c      	bne.n	8009f48 <HAL_RCC_OscConfig+0x98>
 8009f2e:	4b8b      	ldr	r3, [pc, #556]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a8a      	ldr	r2, [pc, #552]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	4b88      	ldr	r3, [pc, #544]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a87      	ldr	r2, [pc, #540]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	e00b      	b.n	8009f60 <HAL_RCC_OscConfig+0xb0>
 8009f48:	4b84      	ldr	r3, [pc, #528]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a83      	ldr	r2, [pc, #524]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	4b81      	ldr	r3, [pc, #516]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a80      	ldr	r2, [pc, #512]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d013      	beq.n	8009f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f68:	f7ff fc42 	bl	80097f0 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f70:	f7ff fc3e 	bl	80097f0 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b64      	cmp	r3, #100	; 0x64
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e1fb      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f82:	4b76      	ldr	r3, [pc, #472]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0xc0>
 8009f8e:	e014      	b.n	8009fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f90:	f7ff fc2e 	bl	80097f0 <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f98:	f7ff fc2a 	bl	80097f0 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b64      	cmp	r3, #100	; 0x64
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e1e7      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009faa:	4b6c      	ldr	r3, [pc, #432]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0xe8>
 8009fb6:	e000      	b.n	8009fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d063      	beq.n	800a08e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fc6:	4b65      	ldr	r3, [pc, #404]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f003 030c 	and.w	r3, r3, #12
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fd2:	4b62      	ldr	r3, [pc, #392]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d11c      	bne.n	800a018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009fde:	4b5f      	ldr	r3, [pc, #380]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d116      	bne.n	800a018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fea:	4b5c      	ldr	r3, [pc, #368]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d005      	beq.n	800a002 <HAL_RCC_OscConfig+0x152>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d001      	beq.n	800a002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e1bb      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a002:	4b56      	ldr	r3, [pc, #344]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	4952      	ldr	r1, [pc, #328]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a012:	4313      	orrs	r3, r2
 800a014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a016:	e03a      	b.n	800a08e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d020      	beq.n	800a062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a020:	4b4f      	ldr	r3, [pc, #316]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a026:	f7ff fbe3 	bl	80097f0 <HAL_GetTick>
 800a02a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a02c:	e008      	b.n	800a040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a02e:	f7ff fbdf 	bl	80097f0 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e19c      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a040:	4b46      	ldr	r3, [pc, #280]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0f0      	beq.n	800a02e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a04c:	4b43      	ldr	r3, [pc, #268]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	4940      	ldr	r1, [pc, #256]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a05c:	4313      	orrs	r3, r2
 800a05e:	600b      	str	r3, [r1, #0]
 800a060:	e015      	b.n	800a08e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a062:	4b3f      	ldr	r3, [pc, #252]	; (800a160 <HAL_RCC_OscConfig+0x2b0>)
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7ff fbc2 	bl	80097f0 <HAL_GetTick>
 800a06c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a070:	f7ff fbbe 	bl	80097f0 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e17b      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a082:	4b36      	ldr	r3, [pc, #216]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1f0      	bne.n	800a070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d030      	beq.n	800a0fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d016      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0a2:	4b30      	ldr	r3, [pc, #192]	; (800a164 <HAL_RCC_OscConfig+0x2b4>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a8:	f7ff fba2 	bl	80097f0 <HAL_GetTick>
 800a0ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0ae:	e008      	b.n	800a0c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0b0:	f7ff fb9e 	bl	80097f0 <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d901      	bls.n	800a0c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e15b      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0c2:	4b26      	ldr	r3, [pc, #152]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f0      	beq.n	800a0b0 <HAL_RCC_OscConfig+0x200>
 800a0ce:	e015      	b.n	800a0fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0d0:	4b24      	ldr	r3, [pc, #144]	; (800a164 <HAL_RCC_OscConfig+0x2b4>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0d6:	f7ff fb8b 	bl	80097f0 <HAL_GetTick>
 800a0da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0dc:	e008      	b.n	800a0f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0de:	f7ff fb87 	bl	80097f0 <HAL_GetTick>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d901      	bls.n	800a0f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e144      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1f0      	bne.n	800a0de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80a0 	beq.w	800a24a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a10a:	2300      	movs	r3, #0
 800a10c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10f      	bne.n	800a13a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a11a:	2300      	movs	r3, #0
 800a11c:	60bb      	str	r3, [r7, #8]
 800a11e:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	4a0e      	ldr	r2, [pc, #56]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a128:	6413      	str	r3, [r2, #64]	; 0x40
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <HAL_RCC_OscConfig+0x2ac>)
 800a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a13a:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a142:	2b00      	cmp	r3, #0
 800a144:	d121      	bne.n	800a18a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a07      	ldr	r2, [pc, #28]	; (800a168 <HAL_RCC_OscConfig+0x2b8>)
 800a14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a152:	f7ff fb4d 	bl	80097f0 <HAL_GetTick>
 800a156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a158:	e011      	b.n	800a17e <HAL_RCC_OscConfig+0x2ce>
 800a15a:	bf00      	nop
 800a15c:	40023800 	.word	0x40023800
 800a160:	42470000 	.word	0x42470000
 800a164:	42470e80 	.word	0x42470e80
 800a168:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a16c:	f7ff fb40 	bl	80097f0 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	2b02      	cmp	r3, #2
 800a178:	d901      	bls.n	800a17e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e0fd      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a17e:	4b81      	ldr	r3, [pc, #516]	; (800a384 <HAL_RCC_OscConfig+0x4d4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f0      	beq.n	800a16c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d106      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x2f0>
 800a192:	4b7d      	ldr	r3, [pc, #500]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a196:	4a7c      	ldr	r2, [pc, #496]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	6713      	str	r3, [r2, #112]	; 0x70
 800a19e:	e01c      	b.n	800a1da <HAL_RCC_OscConfig+0x32a>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d10c      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x312>
 800a1a8:	4b77      	ldr	r3, [pc, #476]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	4a76      	ldr	r2, [pc, #472]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1ae:	f043 0304 	orr.w	r3, r3, #4
 800a1b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b4:	4b74      	ldr	r3, [pc, #464]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b8:	4a73      	ldr	r2, [pc, #460]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c0:	e00b      	b.n	800a1da <HAL_RCC_OscConfig+0x32a>
 800a1c2:	4b71      	ldr	r3, [pc, #452]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c6:	4a70      	ldr	r2, [pc, #448]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ce:	4b6e      	ldr	r3, [pc, #440]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d2:	4a6d      	ldr	r2, [pc, #436]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a1d4:	f023 0304 	bic.w	r3, r3, #4
 800a1d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d015      	beq.n	800a20e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e2:	f7ff fb05 	bl	80097f0 <HAL_GetTick>
 800a1e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1e8:	e00a      	b.n	800a200 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1ea:	f7ff fb01 	bl	80097f0 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e0bc      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a200:	4b61      	ldr	r3, [pc, #388]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a204:	f003 0302 	and.w	r3, r3, #2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0ee      	beq.n	800a1ea <HAL_RCC_OscConfig+0x33a>
 800a20c:	e014      	b.n	800a238 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a20e:	f7ff faef 	bl	80097f0 <HAL_GetTick>
 800a212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a214:	e00a      	b.n	800a22c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a216:	f7ff faeb 	bl	80097f0 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	f241 3288 	movw	r2, #5000	; 0x1388
 800a224:	4293      	cmp	r3, r2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e0a6      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a22c:	4b56      	ldr	r3, [pc, #344]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1ee      	bne.n	800a216 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d105      	bne.n	800a24a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a23e:	4b52      	ldr	r3, [pc, #328]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	4a51      	ldr	r2, [pc, #324]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 8092 	beq.w	800a378 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a254:	4b4c      	ldr	r3, [pc, #304]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 030c 	and.w	r3, r3, #12
 800a25c:	2b08      	cmp	r3, #8
 800a25e:	d05c      	beq.n	800a31a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d141      	bne.n	800a2ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a268:	4b48      	ldr	r3, [pc, #288]	; (800a38c <HAL_RCC_OscConfig+0x4dc>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a26e:	f7ff fabf 	bl	80097f0 <HAL_GetTick>
 800a272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a274:	e008      	b.n	800a288 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a276:	f7ff fabb 	bl	80097f0 <HAL_GetTick>
 800a27a:	4602      	mov	r2, r0
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d901      	bls.n	800a288 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a284:	2303      	movs	r3, #3
 800a286:	e078      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a288:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1f0      	bne.n	800a276 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69da      	ldr	r2, [r3, #28]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	019b      	lsls	r3, r3, #6
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	041b      	lsls	r3, r3, #16
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	061b      	lsls	r3, r3, #24
 800a2b8:	4933      	ldr	r1, [pc, #204]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2be:	4b33      	ldr	r3, [pc, #204]	; (800a38c <HAL_RCC_OscConfig+0x4dc>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2c4:	f7ff fa94 	bl	80097f0 <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2ca:	e008      	b.n	800a2de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2cc:	f7ff fa90 	bl	80097f0 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d901      	bls.n	800a2de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e04d      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2de:	4b2a      	ldr	r3, [pc, #168]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0f0      	beq.n	800a2cc <HAL_RCC_OscConfig+0x41c>
 800a2ea:	e045      	b.n	800a378 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2ec:	4b27      	ldr	r3, [pc, #156]	; (800a38c <HAL_RCC_OscConfig+0x4dc>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2f2:	f7ff fa7d 	bl	80097f0 <HAL_GetTick>
 800a2f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2f8:	e008      	b.n	800a30c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2fa:	f7ff fa79 	bl	80097f0 <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b02      	cmp	r3, #2
 800a306:	d901      	bls.n	800a30c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e036      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a30c:	4b1e      	ldr	r3, [pc, #120]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f0      	bne.n	800a2fa <HAL_RCC_OscConfig+0x44a>
 800a318:	e02e      	b.n	800a378 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e029      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a326:	4b18      	ldr	r3, [pc, #96]	; (800a388 <HAL_RCC_OscConfig+0x4d8>)
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	429a      	cmp	r2, r3
 800a338:	d11c      	bne.n	800a374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a344:	429a      	cmp	r2, r3
 800a346:	d115      	bne.n	800a374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a34e:	4013      	ands	r3, r2
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a354:	4293      	cmp	r3, r2
 800a356:	d10d      	bne.n	800a374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a362:	429a      	cmp	r2, r3
 800a364:	d106      	bne.n	800a374 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a370:	429a      	cmp	r2, r3
 800a372:	d001      	beq.n	800a378 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e000      	b.n	800a37a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	40007000 	.word	0x40007000
 800a388:	40023800 	.word	0x40023800
 800a38c:	42470060 	.word	0x42470060

0800a390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e0cc      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3a4:	4b68      	ldr	r3, [pc, #416]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d90c      	bls.n	800a3cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3b2:	4b65      	ldr	r3, [pc, #404]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	b2d2      	uxtb	r2, r2
 800a3b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3ba:	4b63      	ldr	r3, [pc, #396]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d001      	beq.n	800a3cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0b8      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d020      	beq.n	800a41a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a3e4:	4b59      	ldr	r3, [pc, #356]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	4a58      	ldr	r2, [pc, #352]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a3ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a3ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0308 	and.w	r3, r3, #8
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d005      	beq.n	800a408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a3fc:	4b53      	ldr	r3, [pc, #332]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	4a52      	ldr	r2, [pc, #328]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a408:	4b50      	ldr	r3, [pc, #320]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	494d      	ldr	r1, [pc, #308]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a416:	4313      	orrs	r3, r2
 800a418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d044      	beq.n	800a4b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d107      	bne.n	800a43e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a42e:	4b47      	ldr	r3, [pc, #284]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d119      	bne.n	800a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e07f      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d003      	beq.n	800a44e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d107      	bne.n	800a45e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a44e:	4b3f      	ldr	r3, [pc, #252]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d109      	bne.n	800a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e06f      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a45e:	4b3b      	ldr	r3, [pc, #236]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e067      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a46e:	4b37      	ldr	r3, [pc, #220]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f023 0203 	bic.w	r2, r3, #3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	4934      	ldr	r1, [pc, #208]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a480:	f7ff f9b6 	bl	80097f0 <HAL_GetTick>
 800a484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a486:	e00a      	b.n	800a49e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a488:	f7ff f9b2 	bl	80097f0 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	f241 3288 	movw	r2, #5000	; 0x1388
 800a496:	4293      	cmp	r3, r2
 800a498:	d901      	bls.n	800a49e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e04f      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a49e:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 020c 	and.w	r2, r3, #12
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d1eb      	bne.n	800a488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a4b0:	4b25      	ldr	r3, [pc, #148]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 030f 	and.w	r3, r3, #15
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d20c      	bcs.n	800a4d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4be:	4b22      	ldr	r3, [pc, #136]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4c6:	4b20      	ldr	r3, [pc, #128]	; (800a548 <HAL_RCC_ClockConfig+0x1b8>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d001      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e032      	b.n	800a53e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d008      	beq.n	800a4f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a4e4:	4b19      	ldr	r3, [pc, #100]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4916      	ldr	r1, [pc, #88]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d009      	beq.n	800a516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	490e      	ldr	r1, [pc, #56]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a512:	4313      	orrs	r3, r2
 800a514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a516:	f000 f821 	bl	800a55c <HAL_RCC_GetSysClockFreq>
 800a51a:	4601      	mov	r1, r0
 800a51c:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <HAL_RCC_ClockConfig+0x1bc>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	091b      	lsrs	r3, r3, #4
 800a522:	f003 030f 	and.w	r3, r3, #15
 800a526:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <HAL_RCC_ClockConfig+0x1c0>)
 800a528:	5cd3      	ldrb	r3, [r2, r3]
 800a52a:	fa21 f303 	lsr.w	r3, r1, r3
 800a52e:	4a09      	ldr	r2, [pc, #36]	; (800a554 <HAL_RCC_ClockConfig+0x1c4>)
 800a530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a532:	4b09      	ldr	r3, [pc, #36]	; (800a558 <HAL_RCC_ClockConfig+0x1c8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff f916 	bl	8009768 <HAL_InitTick>

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40023c00 	.word	0x40023c00
 800a54c:	40023800 	.word	0x40023800
 800a550:	0800ff5c 	.word	0x0800ff5c
 800a554:	2000005c 	.word	0x2000005c
 800a558:	20000060 	.word	0x20000060

0800a55c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a562:	2300      	movs	r3, #0
 800a564:	607b      	str	r3, [r7, #4]
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	2300      	movs	r3, #0
 800a56c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a572:	4b63      	ldr	r3, [pc, #396]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	f003 030c 	and.w	r3, r3, #12
 800a57a:	2b04      	cmp	r3, #4
 800a57c:	d007      	beq.n	800a58e <HAL_RCC_GetSysClockFreq+0x32>
 800a57e:	2b08      	cmp	r3, #8
 800a580:	d008      	beq.n	800a594 <HAL_RCC_GetSysClockFreq+0x38>
 800a582:	2b00      	cmp	r3, #0
 800a584:	f040 80b4 	bne.w	800a6f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a588:	4b5e      	ldr	r3, [pc, #376]	; (800a704 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a58a:	60bb      	str	r3, [r7, #8]
       break;
 800a58c:	e0b3      	b.n	800a6f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a58e:	4b5e      	ldr	r3, [pc, #376]	; (800a708 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a590:	60bb      	str	r3, [r7, #8]
      break;
 800a592:	e0b0      	b.n	800a6f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a594:	4b5a      	ldr	r3, [pc, #360]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a59c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a59e:	4b58      	ldr	r3, [pc, #352]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d04a      	beq.n	800a640 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5aa:	4b55      	ldr	r3, [pc, #340]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	099b      	lsrs	r3, r3, #6
 800a5b0:	f04f 0400 	mov.w	r4, #0
 800a5b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a5b8:	f04f 0200 	mov.w	r2, #0
 800a5bc:	ea03 0501 	and.w	r5, r3, r1
 800a5c0:	ea04 0602 	and.w	r6, r4, r2
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	f04f 0300 	mov.w	r3, #0
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	0154      	lsls	r4, r2, #5
 800a5d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a5d6:	014b      	lsls	r3, r1, #5
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4622      	mov	r2, r4
 800a5dc:	1b49      	subs	r1, r1, r5
 800a5de:	eb62 0206 	sbc.w	r2, r2, r6
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	f04f 0400 	mov.w	r4, #0
 800a5ea:	0194      	lsls	r4, r2, #6
 800a5ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a5f0:	018b      	lsls	r3, r1, #6
 800a5f2:	1a5b      	subs	r3, r3, r1
 800a5f4:	eb64 0402 	sbc.w	r4, r4, r2
 800a5f8:	f04f 0100 	mov.w	r1, #0
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	00e2      	lsls	r2, r4, #3
 800a602:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a606:	00d9      	lsls	r1, r3, #3
 800a608:	460b      	mov	r3, r1
 800a60a:	4614      	mov	r4, r2
 800a60c:	195b      	adds	r3, r3, r5
 800a60e:	eb44 0406 	adc.w	r4, r4, r6
 800a612:	f04f 0100 	mov.w	r1, #0
 800a616:	f04f 0200 	mov.w	r2, #0
 800a61a:	0262      	lsls	r2, r4, #9
 800a61c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a620:	0259      	lsls	r1, r3, #9
 800a622:	460b      	mov	r3, r1
 800a624:	4614      	mov	r4, r2
 800a626:	4618      	mov	r0, r3
 800a628:	4621      	mov	r1, r4
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f04f 0400 	mov.w	r4, #0
 800a630:	461a      	mov	r2, r3
 800a632:	4623      	mov	r3, r4
 800a634:	f7f6 fac8 	bl	8000bc8 <__aeabi_uldivmod>
 800a638:	4603      	mov	r3, r0
 800a63a:	460c      	mov	r4, r1
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	e049      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a640:	4b2f      	ldr	r3, [pc, #188]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	099b      	lsrs	r3, r3, #6
 800a646:	f04f 0400 	mov.w	r4, #0
 800a64a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	ea03 0501 	and.w	r5, r3, r1
 800a656:	ea04 0602 	and.w	r6, r4, r2
 800a65a:	4629      	mov	r1, r5
 800a65c:	4632      	mov	r2, r6
 800a65e:	f04f 0300 	mov.w	r3, #0
 800a662:	f04f 0400 	mov.w	r4, #0
 800a666:	0154      	lsls	r4, r2, #5
 800a668:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a66c:	014b      	lsls	r3, r1, #5
 800a66e:	4619      	mov	r1, r3
 800a670:	4622      	mov	r2, r4
 800a672:	1b49      	subs	r1, r1, r5
 800a674:	eb62 0206 	sbc.w	r2, r2, r6
 800a678:	f04f 0300 	mov.w	r3, #0
 800a67c:	f04f 0400 	mov.w	r4, #0
 800a680:	0194      	lsls	r4, r2, #6
 800a682:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a686:	018b      	lsls	r3, r1, #6
 800a688:	1a5b      	subs	r3, r3, r1
 800a68a:	eb64 0402 	sbc.w	r4, r4, r2
 800a68e:	f04f 0100 	mov.w	r1, #0
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	00e2      	lsls	r2, r4, #3
 800a698:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a69c:	00d9      	lsls	r1, r3, #3
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	195b      	adds	r3, r3, r5
 800a6a4:	eb44 0406 	adc.w	r4, r4, r6
 800a6a8:	f04f 0100 	mov.w	r1, #0
 800a6ac:	f04f 0200 	mov.w	r2, #0
 800a6b0:	02a2      	lsls	r2, r4, #10
 800a6b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a6b6:	0299      	lsls	r1, r3, #10
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	4621      	mov	r1, r4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f04f 0400 	mov.w	r4, #0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	f7f6 fa7d 	bl	8000bc8 <__aeabi_uldivmod>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a6d4:	4b0a      	ldr	r3, [pc, #40]	; (800a700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	0c1b      	lsrs	r3, r3, #16
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	3301      	adds	r3, #1
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ec:	60bb      	str	r3, [r7, #8]
      break;
 800a6ee:	e002      	b.n	800a6f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a6f0:	4b04      	ldr	r3, [pc, #16]	; (800a704 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a6f2:	60bb      	str	r3, [r7, #8]
      break;
 800a6f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a700:	40023800 	.word	0x40023800
 800a704:	00f42400 	.word	0x00f42400
 800a708:	007a1200 	.word	0x007a1200

0800a70c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a710:	4b03      	ldr	r3, [pc, #12]	; (800a720 <HAL_RCC_GetHCLKFreq+0x14>)
 800a712:	681b      	ldr	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	2000005c 	.word	0x2000005c

0800a724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a728:	f7ff fff0 	bl	800a70c <HAL_RCC_GetHCLKFreq>
 800a72c:	4601      	mov	r1, r0
 800a72e:	4b05      	ldr	r3, [pc, #20]	; (800a744 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	0a9b      	lsrs	r3, r3, #10
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	4a03      	ldr	r2, [pc, #12]	; (800a748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a73a:	5cd3      	ldrb	r3, [r2, r3]
 800a73c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a740:	4618      	mov	r0, r3
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40023800 	.word	0x40023800
 800a748:	0800ff6c 	.word	0x0800ff6c

0800a74c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a750:	f7ff ffdc 	bl	800a70c <HAL_RCC_GetHCLKFreq>
 800a754:	4601      	mov	r1, r0
 800a756:	4b05      	ldr	r3, [pc, #20]	; (800a76c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	0b5b      	lsrs	r3, r3, #13
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	4a03      	ldr	r2, [pc, #12]	; (800a770 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a762:	5cd3      	ldrb	r3, [r2, r3]
 800a764:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a768:	4618      	mov	r0, r3
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	40023800 	.word	0x40023800
 800a770:	0800ff6c 	.word	0x0800ff6c

0800a774 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d105      	bne.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d035      	beq.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a79c:	4b62      	ldr	r3, [pc, #392]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a7a2:	f7ff f825 	bl	80097f0 <HAL_GetTick>
 800a7a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a7a8:	e008      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a7aa:	f7ff f821 	bl	80097f0 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d901      	bls.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e0b0      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a7bc:	4b5b      	ldr	r3, [pc, #364]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1f0      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	019a      	lsls	r2, r3, #6
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	071b      	lsls	r3, r3, #28
 800a7d4:	4955      	ldr	r1, [pc, #340]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a7dc:	4b52      	ldr	r3, [pc, #328]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a7e2:	f7ff f805 	bl	80097f0 <HAL_GetTick>
 800a7e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7e8:	e008      	b.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a7ea:	f7ff f801 	bl	80097f0 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e090      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7fc:	4b4b      	ldr	r3, [pc, #300]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f0      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0302 	and.w	r3, r3, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 8083 	beq.w	800a91c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	4b44      	ldr	r3, [pc, #272]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	4a43      	ldr	r2, [pc, #268]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a824:	6413      	str	r3, [r2, #64]	; 0x40
 800a826:	4b41      	ldr	r3, [pc, #260]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a82e:	60fb      	str	r3, [r7, #12]
 800a830:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a832:	4b3f      	ldr	r3, [pc, #252]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a3e      	ldr	r2, [pc, #248]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a83c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a83e:	f7fe ffd7 	bl	80097f0 <HAL_GetTick>
 800a842:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a844:	e008      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a846:	f7fe ffd3 	bl	80097f0 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	2b02      	cmp	r3, #2
 800a852:	d901      	bls.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e062      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a858:	4b35      	ldr	r3, [pc, #212]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0f0      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a864:	4b31      	ldr	r3, [pc, #196]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a86c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d02f      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d028      	beq.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a882:	4b2a      	ldr	r3, [pc, #168]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a88a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a88c:	4b29      	ldr	r3, [pc, #164]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a892:	4b28      	ldr	r3, [pc, #160]	; (800a934 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a898:	4a24      	ldr	r2, [pc, #144]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a89e:	4b23      	ldr	r3, [pc, #140]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d114      	bne.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a8aa:	f7fe ffa1 	bl	80097f0 <HAL_GetTick>
 800a8ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8b0:	e00a      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8b2:	f7fe ff9d 	bl	80097f0 <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d901      	bls.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e02a      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c8:	4b18      	ldr	r3, [pc, #96]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0ee      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8e0:	d10d      	bne.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f6:	490d      	ldr	r1, [pc, #52]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	608b      	str	r3, [r1, #8]
 800a8fc:	e005      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4a0a      	ldr	r2, [pc, #40]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a904:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a908:	6093      	str	r3, [r2, #8]
 800a90a:	4b08      	ldr	r3, [pc, #32]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a90c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a916:	4905      	ldr	r1, [pc, #20]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	42470068 	.word	0x42470068
 800a92c:	40023800 	.word	0x40023800
 800a930:	40007000 	.word	0x40007000
 800a934:	42470e40 	.word	0x42470e40

0800a938 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e083      	b.n	800aa52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7f5b      	ldrb	r3, [r3, #29]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d105      	bne.n	800a960 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f7fe fcdc 	bl	8009318 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	22ca      	movs	r2, #202	; 0xca
 800a96c:	625a      	str	r2, [r3, #36]	; 0x24
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2253      	movs	r2, #83	; 0x53
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 faa8 	bl	800aecc <RTC_EnterInitMode>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	22ff      	movs	r2, #255	; 0xff
 800a988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2204      	movs	r2, #4
 800a98e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e05e      	b.n	800aa52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6899      	ldr	r1, [r3, #8]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685a      	ldr	r2, [r3, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68d2      	ldr	r2, [r2, #12]
 800a9ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6919      	ldr	r1, [r3, #16]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	041a      	lsls	r2, r3, #16
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10e      	bne.n	800aa20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 fa3a 	bl	800ae7c <HAL_RTC_WaitForSynchro>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d008      	beq.n	800aa20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	22ff      	movs	r2, #255	; 0xff
 800aa14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2204      	movs	r2, #4
 800aa1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e018      	b.n	800aa52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	22ff      	movs	r2, #255	; 0xff
 800aa48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800aa50:	2300      	movs	r3, #0
  }
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa5a:	b590      	push	{r4, r7, lr}
 800aa5c:	b087      	sub	sp, #28
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	7f1b      	ldrb	r3, [r3, #28]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d101      	bne.n	800aa76 <HAL_RTC_SetTime+0x1c>
 800aa72:	2302      	movs	r3, #2
 800aa74:	e0aa      	b.n	800abcc <HAL_RTC_SetTime+0x172>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d126      	bne.n	800aad6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fa3f 	bl	800af24 <RTC_ByteToBcd2>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	785b      	ldrb	r3, [r3, #1]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fa38 	bl	800af24 <RTC_ByteToBcd2>
 800aab4:	4603      	mov	r3, r0
 800aab6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aab8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	789b      	ldrb	r3, [r3, #2]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fa30 	bl	800af24 <RTC_ByteToBcd2>
 800aac4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aac6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aad0:	4313      	orrs	r3, r2
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e018      	b.n	800ab08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2200      	movs	r2, #0
 800aae8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aaf6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aafc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	78db      	ldrb	r3, [r3, #3]
 800ab02:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	22ca      	movs	r2, #202	; 0xca
 800ab0e:	625a      	str	r2, [r3, #36]	; 0x24
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2253      	movs	r2, #83	; 0x53
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 f9d7 	bl	800aecc <RTC_EnterInitMode>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	22ff      	movs	r2, #255	; 0xff
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e047      	b.n	800abcc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ab46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ab4a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689a      	ldr	r2, [r3, #8]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6899      	ldr	r1, [r3, #8]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	68da      	ldr	r2, [r3, #12]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d111      	bne.n	800abb6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f000 f972 	bl	800ae7c <HAL_RTC_WaitForSynchro>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00b      	beq.n	800abb6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	22ff      	movs	r2, #255	; 0xff
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2204      	movs	r2, #4
 800abaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e00a      	b.n	800abcc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	22ff      	movs	r2, #255	; 0xff
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2201      	movs	r2, #1
 800abc2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800abca:	2300      	movs	r3, #0
  }
}
 800abcc:	4618      	mov	r0, r3
 800abce:	371c      	adds	r7, #28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd90      	pop	{r4, r7, pc}

0800abd4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ac06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ac0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	0c1b      	lsrs	r3, r3, #16
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	0a1b      	lsrs	r3, r3, #8
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	0c1b      	lsrs	r3, r3, #16
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d11a      	bne.n	800ac86 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 f983 	bl	800af60 <RTC_Bcd2ToByte>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	785b      	ldrb	r3, [r3, #1]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f97a 	bl	800af60 <RTC_Bcd2ToByte>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f971 	bl	800af60 <RTC_Bcd2ToByte>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	461a      	mov	r2, r3
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac90:	b590      	push	{r4, r7, lr}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	7f1b      	ldrb	r3, [r3, #28]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <HAL_RTC_SetDate+0x1c>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e094      	b.n	800add6 <HAL_RTC_SetDate+0x146>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2201      	movs	r2, #1
 800acb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2202      	movs	r2, #2
 800acb6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10e      	bne.n	800acdc <HAL_RTC_SetDate+0x4c>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	785b      	ldrb	r3, [r3, #1]
 800acc2:	f003 0310 	and.w	r3, r3, #16
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d008      	beq.n	800acdc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	f023 0310 	bic.w	r3, r3, #16
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	330a      	adds	r3, #10
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d11c      	bne.n	800ad1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	78db      	ldrb	r3, [r3, #3]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 f91c 	bl	800af24 <RTC_ByteToBcd2>
 800acec:	4603      	mov	r3, r0
 800acee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	785b      	ldrb	r3, [r3, #1]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f915 	bl	800af24 <RTC_ByteToBcd2>
 800acfa:	4603      	mov	r3, r0
 800acfc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800acfe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	789b      	ldrb	r3, [r3, #2]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f90d 	bl	800af24 <RTC_ByteToBcd2>
 800ad0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ad0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ad16:	4313      	orrs	r3, r2
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	e00e      	b.n	800ad3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	78db      	ldrb	r3, [r3, #3]
 800ad20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	785b      	ldrb	r3, [r3, #1]
 800ad26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ad28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ad2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	22ca      	movs	r2, #202	; 0xca
 800ad40:	625a      	str	r2, [r3, #36]	; 0x24
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2253      	movs	r2, #83	; 0x53
 800ad48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f8be 	bl	800aecc <RTC_EnterInitMode>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00b      	beq.n	800ad6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	22ff      	movs	r2, #255	; 0xff
 800ad5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2204      	movs	r2, #4
 800ad62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e033      	b.n	800add6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f003 0320 	and.w	r3, r3, #32
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d111      	bne.n	800adc0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 f86d 	bl	800ae7c <HAL_RTC_WaitForSynchro>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	22ff      	movs	r2, #255	; 0xff
 800adae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2204      	movs	r2, #4
 800adb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e00a      	b.n	800add6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	22ff      	movs	r2, #255	; 0xff
 800adc6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2201      	movs	r2, #1
 800adcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800add4:	2300      	movs	r3, #0
  }
}
 800add6:	4618      	mov	r0, r3
 800add8:	371c      	adds	r7, #28
 800adda:	46bd      	mov	sp, r7
 800addc:	bd90      	pop	{r4, r7, pc}

0800adde <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	60f8      	str	r0, [r7, #12]
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800adf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800adfc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	0c1b      	lsrs	r3, r3, #16
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	0a1b      	lsrs	r3, r3, #8
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 031f 	and.w	r3, r3, #31
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	0b5b      	lsrs	r3, r3, #13
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 0307 	and.w	r3, r3, #7
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d11a      	bne.n	800ae72 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	78db      	ldrb	r3, [r3, #3]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f000 f88d 	bl	800af60 <RTC_Bcd2ToByte>
 800ae46:	4603      	mov	r3, r0
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	785b      	ldrb	r3, [r3, #1]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 f884 	bl	800af60 <RTC_Bcd2ToByte>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	789b      	ldrb	r3, [r3, #2]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 f87b 	bl	800af60 <RTC_Bcd2ToByte>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ae96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae98:	f7fe fcaa 	bl	80097f0 <HAL_GetTick>
 800ae9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ae9e:	e009      	b.n	800aeb4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aea0:	f7fe fca6 	bl	80097f0 <HAL_GetTick>
 800aea4:	4602      	mov	r2, r0
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeae:	d901      	bls.n	800aeb4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e007      	b.n	800aec4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f003 0320 	and.w	r3, r3, #32
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0ee      	beq.n	800aea0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d119      	bne.n	800af1a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f04f 32ff 	mov.w	r2, #4294967295
 800aeee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aef0:	f7fe fc7e 	bl	80097f0 <HAL_GetTick>
 800aef4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800aef6:	e009      	b.n	800af0c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aef8:	f7fe fc7a 	bl	80097f0 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af06:	d901      	bls.n	800af0c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e007      	b.n	800af1c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0ee      	beq.n	800aef8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4603      	mov	r3, r0
 800af2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800af32:	e005      	b.n	800af40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	3b0a      	subs	r3, #10
 800af3e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b09      	cmp	r3, #9
 800af44:	d8f6      	bhi.n	800af34 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	4313      	orrs	r3, r2
 800af52:	b2db      	uxtb	r3, r3
}
 800af54:	4618      	mov	r0, r3
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800af6e:	79fb      	ldrb	r3, [r7, #7]
 800af70:	091b      	lsrs	r3, r3, #4
 800af72:	b2db      	uxtb	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	4613      	mov	r3, r2
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	b2da      	uxtb	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	4413      	add	r3, r2
 800af8e:	b2db      	uxtb	r3, r3
}
 800af90:	4618      	mov	r0, r3
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	7f1b      	ldrb	r3, [r3, #28]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d101      	bne.n	800afb2 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 800afae:	2302      	movs	r3, #2
 800afb0:	e030      	b.n	800b014 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2201      	movs	r2, #1
 800afb6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	22ca      	movs	r2, #202	; 0xca
 800afc4:	625a      	str	r2, [r3, #36]	; 0x24
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2253      	movs	r2, #83	; 0x53
 800afcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800afdc:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	6899      	ldr	r1, [r3, #8]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800affc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	22ff      	movs	r2, #255	; 0xff
 800b004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e056      	b.n	800b0e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d106      	bne.n	800b052 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fe f979 	bl	8009344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2202      	movs	r2, #2
 800b056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b068:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	431a      	orrs	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b08e:	431a      	orrs	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	431a      	orrs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	ea42 0103 	orr.w	r1, r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	0c1b      	lsrs	r3, r3, #16
 800b0b0:	f003 0104 	and.w	r1, r3, #4
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	69da      	ldr	r2, [r3, #28]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_SPI_Transmit+0x22>
 800b106:	2302      	movs	r3, #2
 800b108:	e11e      	b.n	800b348 <HAL_SPI_Transmit+0x260>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b112:	f7fe fb6d 	bl	80097f0 <HAL_GetTick>
 800b116:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b01      	cmp	r3, #1
 800b126:	d002      	beq.n	800b12e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b128:	2302      	movs	r3, #2
 800b12a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b12c:	e103      	b.n	800b336 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <HAL_SPI_Transmit+0x52>
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d102      	bne.n	800b140 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b13e:	e0fa      	b.n	800b336 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2203      	movs	r2, #3
 800b144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	88fa      	ldrh	r2, [r7, #6]
 800b158:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	88fa      	ldrh	r2, [r7, #6]
 800b15e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b186:	d107      	bne.n	800b198 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b196:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	d007      	beq.n	800b1b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1be:	d14b      	bne.n	800b258 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <HAL_SPI_Transmit+0xe6>
 800b1c8:	8afb      	ldrh	r3, [r7, #22]
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d13e      	bne.n	800b24c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d2:	881a      	ldrh	r2, [r3, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	1c9a      	adds	r2, r3, #2
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b1f2:	e02b      	b.n	800b24c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d112      	bne.n	800b228 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b206:	881a      	ldrh	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b212:	1c9a      	adds	r2, r3, #2
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	86da      	strh	r2, [r3, #54]	; 0x36
 800b226:	e011      	b.n	800b24c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b228:	f7fe fae2 	bl	80097f0 <HAL_GetTick>
 800b22c:	4602      	mov	r2, r0
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d803      	bhi.n	800b240 <HAL_SPI_Transmit+0x158>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d102      	bne.n	800b246 <HAL_SPI_Transmit+0x15e>
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d102      	bne.n	800b24c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b24a:	e074      	b.n	800b336 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b250:	b29b      	uxth	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1ce      	bne.n	800b1f4 <HAL_SPI_Transmit+0x10c>
 800b256:	e04c      	b.n	800b2f2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <HAL_SPI_Transmit+0x17e>
 800b260:	8afb      	ldrh	r3, [r7, #22]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d140      	bne.n	800b2e8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	330c      	adds	r3, #12
 800b270:	7812      	ldrb	r2, [r2, #0]
 800b272:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b28c:	e02c      	b.n	800b2e8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f003 0302 	and.w	r3, r3, #2
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d113      	bne.n	800b2c4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	7812      	ldrb	r2, [r2, #0]
 800b2a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b2c2:	e011      	b.n	800b2e8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2c4:	f7fe fa94 	bl	80097f0 <HAL_GetTick>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d803      	bhi.n	800b2dc <HAL_SPI_Transmit+0x1f4>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	d102      	bne.n	800b2e2 <HAL_SPI_Transmit+0x1fa>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d102      	bne.n	800b2e8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b2e6:	e026      	b.n	800b336 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1cd      	bne.n	800b28e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 fa44 	bl	800b784 <SPI_EndRxTxTransaction>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2220      	movs	r2, #32
 800b306:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10a      	bne.n	800b326 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	613b      	str	r3, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	77fb      	strb	r3, [r7, #31]
 800b332:	e000      	b.n	800b336 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b334:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b346:	7ffb      	ldrb	r3, [r7, #31]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08c      	sub	sp, #48	; 0x30
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b35e:	2301      	movs	r3, #1
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <HAL_SPI_TransmitReceive+0x26>
 800b372:	2302      	movs	r3, #2
 800b374:	e18a      	b.n	800b68c <HAL_SPI_TransmitReceive+0x33c>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b37e:	f7fe fa37 	bl	80097f0 <HAL_GetTick>
 800b382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b38a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b394:	887b      	ldrh	r3, [r7, #2]
 800b396:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d00f      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x70>
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a6:	d107      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x68>
 800b3b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d003      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b3be:	e15b      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <HAL_SPI_TransmitReceive+0x82>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <HAL_SPI_TransmitReceive+0x82>
 800b3cc:	887b      	ldrh	r3, [r7, #2]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d103      	bne.n	800b3da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b3d8:	e14e      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d003      	beq.n	800b3ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2205      	movs	r2, #5
 800b3ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	887a      	ldrh	r2, [r7, #2]
 800b3fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	887a      	ldrh	r2, [r7, #2]
 800b404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	887a      	ldrh	r2, [r7, #2]
 800b410:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	887a      	ldrh	r2, [r7, #2]
 800b416:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d007      	beq.n	800b442 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b44a:	d178      	bne.n	800b53e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <HAL_SPI_TransmitReceive+0x10a>
 800b454:	8b7b      	ldrh	r3, [r7, #26]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d166      	bne.n	800b528 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	881a      	ldrh	r2, [r3, #0]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	1c9a      	adds	r2, r3, #2
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b47e:	e053      	b.n	800b528 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0302 	and.w	r3, r3, #2
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d11b      	bne.n	800b4c6 <HAL_SPI_TransmitReceive+0x176>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d016      	beq.n	800b4c6 <HAL_SPI_TransmitReceive+0x176>
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d113      	bne.n	800b4c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a2:	881a      	ldrh	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ae:	1c9a      	adds	r2, r3, #2
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d119      	bne.n	800b508 <HAL_SPI_TransmitReceive+0x1b8>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d014      	beq.n	800b508 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	b292      	uxth	r2, r2
 800b4ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f0:	1c9a      	adds	r2, r3, #2
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b504:	2301      	movs	r3, #1
 800b506:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b508:	f7fe f972 	bl	80097f0 <HAL_GetTick>
 800b50c:	4602      	mov	r2, r0
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b514:	429a      	cmp	r2, r3
 800b516:	d807      	bhi.n	800b528 <HAL_SPI_TransmitReceive+0x1d8>
 800b518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51e:	d003      	beq.n	800b528 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b526:	e0a7      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1a6      	bne.n	800b480 <HAL_SPI_TransmitReceive+0x130>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b536:	b29b      	uxth	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1a1      	bne.n	800b480 <HAL_SPI_TransmitReceive+0x130>
 800b53c:	e07c      	b.n	800b638 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <HAL_SPI_TransmitReceive+0x1fc>
 800b546:	8b7b      	ldrh	r3, [r7, #26]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d16b      	bne.n	800b624 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	330c      	adds	r3, #12
 800b556:	7812      	ldrb	r2, [r2, #0]
 800b558:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b572:	e057      	b.n	800b624 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f003 0302 	and.w	r3, r3, #2
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d11c      	bne.n	800b5bc <HAL_SPI_TransmitReceive+0x26c>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b586:	b29b      	uxth	r3, r3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d017      	beq.n	800b5bc <HAL_SPI_TransmitReceive+0x26c>
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d114      	bne.n	800b5bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	330c      	adds	r3, #12
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d119      	bne.n	800b5fe <HAL_SPI_TransmitReceive+0x2ae>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d014      	beq.n	800b5fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b5fe:	f7fe f8f7 	bl	80097f0 <HAL_GetTick>
 800b602:	4602      	mov	r2, r0
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d803      	bhi.n	800b616 <HAL_SPI_TransmitReceive+0x2c6>
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d102      	bne.n	800b61c <HAL_SPI_TransmitReceive+0x2cc>
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d103      	bne.n	800b624 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b622:	e029      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1a2      	bne.n	800b574 <HAL_SPI_TransmitReceive+0x224>
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b632:	b29b      	uxth	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d19d      	bne.n	800b574 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 f8a1 	bl	800b784 <SPI_EndRxTxTransaction>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2220      	movs	r2, #32
 800b652:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b654:	e010      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b65e:	2300      	movs	r3, #0
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	617b      	str	r3, [r7, #20]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	e000      	b.n	800b678 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b676:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3730      	adds	r7, #48	; 0x30
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b6a2:	b2db      	uxtb	r3, r3
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6c0:	e04c      	b.n	800b75c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c8:	d048      	beq.n	800b75c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b6ca:	f7fe f891 	bl	80097f0 <HAL_GetTick>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d902      	bls.n	800b6e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d13d      	bne.n	800b75c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b6ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6f8:	d111      	bne.n	800b71e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b702:	d004      	beq.n	800b70e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70c:	d107      	bne.n	800b71e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b71c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b726:	d10f      	bne.n	800b748 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b746:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e00f      	b.n	800b77c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	4013      	ands	r3, r2
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	429a      	cmp	r2, r3
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	461a      	mov	r2, r3
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	429a      	cmp	r2, r3
 800b778:	d1a3      	bne.n	800b6c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b088      	sub	sp, #32
 800b788:	af02      	add	r7, sp, #8
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b790:	4b1b      	ldr	r3, [pc, #108]	; (800b800 <SPI_EndRxTxTransaction+0x7c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a1b      	ldr	r2, [pc, #108]	; (800b804 <SPI_EndRxTxTransaction+0x80>)
 800b796:	fba2 2303 	umull	r2, r3, r2, r3
 800b79a:	0d5b      	lsrs	r3, r3, #21
 800b79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7a0:	fb02 f303 	mul.w	r3, r2, r3
 800b7a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7ae:	d112      	bne.n	800b7d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2180      	movs	r1, #128	; 0x80
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff ff78 	bl	800b6b0 <SPI_WaitFlagStateUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d016      	beq.n	800b7f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ca:	f043 0220 	orr.w	r2, r3, #32
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e00f      	b.n	800b7f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ec:	2b80      	cmp	r3, #128	; 0x80
 800b7ee:	d0f2      	beq.n	800b7d6 <SPI_EndRxTxTransaction+0x52>
 800b7f0:	e000      	b.n	800b7f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b7f2:	bf00      	nop
  }

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	2000005c 	.word	0x2000005c
 800b804:	165e9f81 	.word	0x165e9f81

0800b808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e01d      	b.n	800b856 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7fd fdd0 	bl	80093d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3304      	adds	r3, #4
 800b844:	4619      	mov	r1, r3
 800b846:	4610      	mov	r0, r2
 800b848:	f000 fb72 	bl	800bf30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b85e:	b480      	push	{r7}
 800b860:	b085      	sub	sp, #20
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2202      	movs	r2, #2
 800b86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f003 0307 	and.w	r3, r3, #7
 800b878:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b06      	cmp	r3, #6
 800b87e:	d007      	beq.n	800b890 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f042 0201 	orr.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68da      	ldr	r2, [r3, #12]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f042 0201 	orr.w	r2, r2, #1
 800b8bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f003 0307 	and.w	r3, r3, #7
 800b8c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2b06      	cmp	r3, #6
 800b8ce:	d007      	beq.n	800b8e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f042 0201 	orr.w	r2, r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e01d      	b.n	800b93c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f815 	bl	800b944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2202      	movs	r2, #2
 800b91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3304      	adds	r3, #4
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f000 faff 	bl	800bf30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2201      	movs	r2, #1
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 fdca 	bl	800c504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a15      	ldr	r2, [pc, #84]	; (800b9cc <HAL_TIM_PWM_Start+0x74>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d004      	beq.n	800b984 <HAL_TIM_PWM_Start+0x2c>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a14      	ldr	r2, [pc, #80]	; (800b9d0 <HAL_TIM_PWM_Start+0x78>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d101      	bne.n	800b988 <HAL_TIM_PWM_Start+0x30>
 800b984:	2301      	movs	r3, #1
 800b986:	e000      	b.n	800b98a <HAL_TIM_PWM_Start+0x32>
 800b988:	2300      	movs	r3, #0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d007      	beq.n	800b99e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b99c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f003 0307 	and.w	r3, r3, #7
 800b9a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b06      	cmp	r3, #6
 800b9ae:	d007      	beq.n	800b9c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f042 0201 	orr.w	r2, r2, #1
 800b9be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	40010000 	.word	0x40010000
 800b9d0:	40010400 	.word	0x40010400

0800b9d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d122      	bne.n	800ba30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d11b      	bne.n	800ba30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f06f 0202 	mvn.w	r2, #2
 800ba00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fa6b 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800ba1c:	e005      	b.n	800ba2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa5d 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fa6e 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	f003 0304 	and.w	r3, r3, #4
 800ba3a:	2b04      	cmp	r3, #4
 800ba3c:	d122      	bne.n	800ba84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b04      	cmp	r3, #4
 800ba4a:	d11b      	bne.n	800ba84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f06f 0204 	mvn.w	r2, #4
 800ba54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2202      	movs	r2, #2
 800ba5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fa41 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800ba70:	e005      	b.n	800ba7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa33 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fa44 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0308 	and.w	r3, r3, #8
 800ba8e:	2b08      	cmp	r3, #8
 800ba90:	d122      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0308 	and.w	r3, r3, #8
 800ba9c:	2b08      	cmp	r3, #8
 800ba9e:	d11b      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0208 	mvn.w	r2, #8
 800baa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2204      	movs	r2, #4
 800baae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa17 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bac4:	e005      	b.n	800bad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fa09 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fa1a 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0310 	and.w	r3, r3, #16
 800bae2:	2b10      	cmp	r3, #16
 800bae4:	d122      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f003 0310 	and.w	r3, r3, #16
 800baf0:	2b10      	cmp	r3, #16
 800baf2:	d11b      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0210 	mvn.w	r2, #16
 800bafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2208      	movs	r2, #8
 800bb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f9ed 	bl	800bef2 <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f9df 	bl	800bede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f9f0 	bl	800bf06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d10e      	bne.n	800bb58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d107      	bne.n	800bb58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f06f 0201 	mvn.w	r2, #1
 800bb50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7fd fb56 	bl	8009204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d10e      	bne.n	800bb84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb70:	2b80      	cmp	r3, #128	; 0x80
 800bb72:	d107      	bne.n	800bb84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fd6c 	bl	800c65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8e:	2b40      	cmp	r3, #64	; 0x40
 800bb90:	d10e      	bne.n	800bbb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b40      	cmp	r3, #64	; 0x40
 800bb9e:	d107      	bne.n	800bbb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f9b5 	bl	800bf1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f003 0320 	and.w	r3, r3, #32
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d10e      	bne.n	800bbdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f003 0320 	and.w	r3, r3, #32
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	d107      	bne.n	800bbdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f06f 0220 	mvn.w	r2, #32
 800bbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fd36 	bl	800c648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d101      	bne.n	800bbfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e0b4      	b.n	800bd68 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2202      	movs	r2, #2
 800bc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b0c      	cmp	r3, #12
 800bc12:	f200 809f 	bhi.w	800bd54 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bc16:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bc51 	.word	0x0800bc51
 800bc20:	0800bd55 	.word	0x0800bd55
 800bc24:	0800bd55 	.word	0x0800bd55
 800bc28:	0800bd55 	.word	0x0800bd55
 800bc2c:	0800bc91 	.word	0x0800bc91
 800bc30:	0800bd55 	.word	0x0800bd55
 800bc34:	0800bd55 	.word	0x0800bd55
 800bc38:	0800bd55 	.word	0x0800bd55
 800bc3c:	0800bcd3 	.word	0x0800bcd3
 800bc40:	0800bd55 	.word	0x0800bd55
 800bc44:	0800bd55 	.word	0x0800bd55
 800bc48:	0800bd55 	.word	0x0800bd55
 800bc4c:	0800bd13 	.word	0x0800bd13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68b9      	ldr	r1, [r7, #8]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 fa0a 	bl	800c070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f042 0208 	orr.w	r2, r2, #8
 800bc6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	699a      	ldr	r2, [r3, #24]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f022 0204 	bic.w	r2, r2, #4
 800bc7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6999      	ldr	r1, [r3, #24]
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	691a      	ldr	r2, [r3, #16]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	619a      	str	r2, [r3, #24]
      break;
 800bc8e:	e062      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fa5a 	bl	800c150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	699a      	ldr	r2, [r3, #24]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	699a      	ldr	r2, [r3, #24]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6999      	ldr	r1, [r3, #24]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	021a      	lsls	r2, r3, #8
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	619a      	str	r2, [r3, #24]
      break;
 800bcd0:	e041      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 faaf 	bl	800c23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69da      	ldr	r2, [r3, #28]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f042 0208 	orr.w	r2, r2, #8
 800bcec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69da      	ldr	r2, [r3, #28]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f022 0204 	bic.w	r2, r2, #4
 800bcfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69d9      	ldr	r1, [r3, #28]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	691a      	ldr	r2, [r3, #16]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	430a      	orrs	r2, r1
 800bd0e:	61da      	str	r2, [r3, #28]
      break;
 800bd10:	e021      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 fb03 	bl	800c324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69da      	ldr	r2, [r3, #28]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	69da      	ldr	r2, [r3, #28]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69d9      	ldr	r1, [r3, #28]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	021a      	lsls	r2, r3, #8
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	61da      	str	r2, [r3, #28]
      break;
 800bd52:	e000      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bd54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_TIM_ConfigClockSource+0x18>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e0a6      	b.n	800bed6 <HAL_TIM_ConfigClockSource+0x166>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bda6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b40      	cmp	r3, #64	; 0x40
 800bdbe:	d067      	beq.n	800be90 <HAL_TIM_ConfigClockSource+0x120>
 800bdc0:	2b40      	cmp	r3, #64	; 0x40
 800bdc2:	d80b      	bhi.n	800bddc <HAL_TIM_ConfigClockSource+0x6c>
 800bdc4:	2b10      	cmp	r3, #16
 800bdc6:	d073      	beq.n	800beb0 <HAL_TIM_ConfigClockSource+0x140>
 800bdc8:	2b10      	cmp	r3, #16
 800bdca:	d802      	bhi.n	800bdd2 <HAL_TIM_ConfigClockSource+0x62>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d06f      	beq.n	800beb0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bdd0:	e078      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bdd2:	2b20      	cmp	r3, #32
 800bdd4:	d06c      	beq.n	800beb0 <HAL_TIM_ConfigClockSource+0x140>
 800bdd6:	2b30      	cmp	r3, #48	; 0x30
 800bdd8:	d06a      	beq.n	800beb0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bdda:	e073      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bddc:	2b70      	cmp	r3, #112	; 0x70
 800bdde:	d00d      	beq.n	800bdfc <HAL_TIM_ConfigClockSource+0x8c>
 800bde0:	2b70      	cmp	r3, #112	; 0x70
 800bde2:	d804      	bhi.n	800bdee <HAL_TIM_ConfigClockSource+0x7e>
 800bde4:	2b50      	cmp	r3, #80	; 0x50
 800bde6:	d033      	beq.n	800be50 <HAL_TIM_ConfigClockSource+0xe0>
 800bde8:	2b60      	cmp	r3, #96	; 0x60
 800bdea:	d041      	beq.n	800be70 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bdec:	e06a      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bdee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf2:	d066      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x152>
 800bdf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdf8:	d017      	beq.n	800be2a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bdfa:	e063      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6818      	ldr	r0, [r3, #0]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	6899      	ldr	r1, [r3, #8]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	f000 fb5a 	bl	800c4c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	609a      	str	r2, [r3, #8]
      break;
 800be28:	e04c      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6818      	ldr	r0, [r3, #0]
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	6899      	ldr	r1, [r3, #8]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	f000 fb43 	bl	800c4c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689a      	ldr	r2, [r3, #8]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be4c:	609a      	str	r2, [r3, #8]
      break;
 800be4e:	e039      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	6859      	ldr	r1, [r3, #4]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	461a      	mov	r2, r3
 800be5e:	f000 fab7 	bl	800c3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2150      	movs	r1, #80	; 0x50
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fb10 	bl	800c48e <TIM_ITRx_SetConfig>
      break;
 800be6e:	e029      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	6859      	ldr	r1, [r3, #4]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	461a      	mov	r2, r3
 800be7e:	f000 fad6 	bl	800c42e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2160      	movs	r1, #96	; 0x60
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fb00 	bl	800c48e <TIM_ITRx_SetConfig>
      break;
 800be8e:	e019      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	6859      	ldr	r1, [r3, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	461a      	mov	r2, r3
 800be9e:	f000 fa97 	bl	800c3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2140      	movs	r1, #64	; 0x40
 800bea8:	4618      	mov	r0, r3
 800beaa:	f000 faf0 	bl	800c48e <TIM_ITRx_SetConfig>
      break;
 800beae:	e009      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4619      	mov	r1, r3
 800beba:	4610      	mov	r0, r2
 800bebc:	f000 fae7 	bl	800c48e <TIM_ITRx_SetConfig>
      break;
 800bec0:	e000      	b.n	800bec4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bede:	b480      	push	{r7}
 800bee0:	b083      	sub	sp, #12
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bef2:	b480      	push	{r7}
 800bef4:	b083      	sub	sp, #12
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr

0800bf06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf0e:	bf00      	nop
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
	...

0800bf30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a40      	ldr	r2, [pc, #256]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d013      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4e:	d00f      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a3d      	ldr	r2, [pc, #244]	; (800c048 <TIM_Base_SetConfig+0x118>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a3c      	ldr	r2, [pc, #240]	; (800c04c <TIM_Base_SetConfig+0x11c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a3b      	ldr	r2, [pc, #236]	; (800c050 <TIM_Base_SetConfig+0x120>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_Base_SetConfig+0x40>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a3a      	ldr	r2, [pc, #232]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d108      	bne.n	800bf82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a2f      	ldr	r2, [pc, #188]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d02b      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf90:	d027      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a2c      	ldr	r2, [pc, #176]	; (800c048 <TIM_Base_SetConfig+0x118>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d023      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a2b      	ldr	r2, [pc, #172]	; (800c04c <TIM_Base_SetConfig+0x11c>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d01f      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a2a      	ldr	r2, [pc, #168]	; (800c050 <TIM_Base_SetConfig+0x120>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d01b      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a29      	ldr	r2, [pc, #164]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d017      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a28      	ldr	r2, [pc, #160]	; (800c058 <TIM_Base_SetConfig+0x128>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d013      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a27      	ldr	r2, [pc, #156]	; (800c05c <TIM_Base_SetConfig+0x12c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d00f      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a26      	ldr	r2, [pc, #152]	; (800c060 <TIM_Base_SetConfig+0x130>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d00b      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a25      	ldr	r2, [pc, #148]	; (800c064 <TIM_Base_SetConfig+0x134>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d007      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a24      	ldr	r2, [pc, #144]	; (800c068 <TIM_Base_SetConfig+0x138>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d003      	beq.n	800bfe2 <TIM_Base_SetConfig+0xb2>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a23      	ldr	r2, [pc, #140]	; (800c06c <TIM_Base_SetConfig+0x13c>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d108      	bne.n	800bff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a0a      	ldr	r2, [pc, #40]	; (800c044 <TIM_Base_SetConfig+0x114>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d003      	beq.n	800c028 <TIM_Base_SetConfig+0xf8>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a0c      	ldr	r2, [pc, #48]	; (800c054 <TIM_Base_SetConfig+0x124>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d103      	bne.n	800c030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	691a      	ldr	r2, [r3, #16]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	615a      	str	r2, [r3, #20]
}
 800c036:	bf00      	nop
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40010000 	.word	0x40010000
 800c048:	40000400 	.word	0x40000400
 800c04c:	40000800 	.word	0x40000800
 800c050:	40000c00 	.word	0x40000c00
 800c054:	40010400 	.word	0x40010400
 800c058:	40014000 	.word	0x40014000
 800c05c:	40014400 	.word	0x40014400
 800c060:	40014800 	.word	0x40014800
 800c064:	40001800 	.word	0x40001800
 800c068:	40001c00 	.word	0x40001c00
 800c06c:	40002000 	.word	0x40002000

0800c070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c070:	b480      	push	{r7}
 800c072:	b087      	sub	sp, #28
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	f023 0201 	bic.w	r2, r3, #1
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 0303 	bic.w	r3, r3, #3
 800c0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f023 0302 	bic.w	r3, r3, #2
 800c0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a20      	ldr	r2, [pc, #128]	; (800c148 <TIM_OC1_SetConfig+0xd8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d003      	beq.n	800c0d4 <TIM_OC1_SetConfig+0x64>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a1f      	ldr	r2, [pc, #124]	; (800c14c <TIM_OC1_SetConfig+0xdc>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d10c      	bne.n	800c0ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	f023 0308 	bic.w	r3, r3, #8
 800c0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f023 0304 	bic.w	r3, r3, #4
 800c0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a15      	ldr	r2, [pc, #84]	; (800c148 <TIM_OC1_SetConfig+0xd8>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d003      	beq.n	800c0fe <TIM_OC1_SetConfig+0x8e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a14      	ldr	r2, [pc, #80]	; (800c14c <TIM_OC1_SetConfig+0xdc>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d111      	bne.n	800c122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	4313      	orrs	r3, r2
 800c116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	4313      	orrs	r3, r2
 800c120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	685a      	ldr	r2, [r3, #4]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	697a      	ldr	r2, [r7, #20]
 800c13a:	621a      	str	r2, [r3, #32]
}
 800c13c:	bf00      	nop
 800c13e:	371c      	adds	r7, #28
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	40010000 	.word	0x40010000
 800c14c:	40010400 	.word	0x40010400

0800c150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	f023 0210 	bic.w	r2, r3, #16
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4313      	orrs	r3, r2
 800c192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f023 0320 	bic.w	r3, r3, #32
 800c19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a22      	ldr	r2, [pc, #136]	; (800c234 <TIM_OC2_SetConfig+0xe4>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d003      	beq.n	800c1b8 <TIM_OC2_SetConfig+0x68>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a21      	ldr	r2, [pc, #132]	; (800c238 <TIM_OC2_SetConfig+0xe8>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d10d      	bne.n	800c1d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	011b      	lsls	r3, r3, #4
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a17      	ldr	r2, [pc, #92]	; (800c234 <TIM_OC2_SetConfig+0xe4>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d003      	beq.n	800c1e4 <TIM_OC2_SetConfig+0x94>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a16      	ldr	r2, [pc, #88]	; (800c238 <TIM_OC2_SetConfig+0xe8>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d113      	bne.n	800c20c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	4313      	orrs	r3, r2
 800c20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	621a      	str	r2, [r3, #32]
}
 800c226:	bf00      	nop
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	40010000 	.word	0x40010000
 800c238:	40010400 	.word	0x40010400

0800c23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a1b      	ldr	r3, [r3, #32]
 800c24a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f023 0303 	bic.w	r3, r3, #3
 800c272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	021b      	lsls	r3, r3, #8
 800c28c:	697a      	ldr	r2, [r7, #20]
 800c28e:	4313      	orrs	r3, r2
 800c290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a21      	ldr	r2, [pc, #132]	; (800c31c <TIM_OC3_SetConfig+0xe0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d003      	beq.n	800c2a2 <TIM_OC3_SetConfig+0x66>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a20      	ldr	r2, [pc, #128]	; (800c320 <TIM_OC3_SetConfig+0xe4>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d10d      	bne.n	800c2be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	021b      	lsls	r3, r3, #8
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a16      	ldr	r2, [pc, #88]	; (800c31c <TIM_OC3_SetConfig+0xe0>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d003      	beq.n	800c2ce <TIM_OC3_SetConfig+0x92>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a15      	ldr	r2, [pc, #84]	; (800c320 <TIM_OC3_SetConfig+0xe4>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d113      	bne.n	800c2f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	011b      	lsls	r3, r3, #4
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	011b      	lsls	r3, r3, #4
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	621a      	str	r2, [r3, #32]
}
 800c310:	bf00      	nop
 800c312:	371c      	adds	r7, #28
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	40010000 	.word	0x40010000
 800c320:	40010400 	.word	0x40010400

0800c324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c324:	b480      	push	{r7}
 800c326:	b087      	sub	sp, #28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a1b      	ldr	r3, [r3, #32]
 800c332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	021b      	lsls	r3, r3, #8
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	4313      	orrs	r3, r2
 800c366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	031b      	lsls	r3, r3, #12
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	4313      	orrs	r3, r2
 800c37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a12      	ldr	r2, [pc, #72]	; (800c3c8 <TIM_OC4_SetConfig+0xa4>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d003      	beq.n	800c38c <TIM_OC4_SetConfig+0x68>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a11      	ldr	r2, [pc, #68]	; (800c3cc <TIM_OC4_SetConfig+0xa8>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d109      	bne.n	800c3a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	019b      	lsls	r3, r3, #6
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685a      	ldr	r2, [r3, #4]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	621a      	str	r2, [r3, #32]
}
 800c3ba:	bf00      	nop
 800c3bc:	371c      	adds	r7, #28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	40010000 	.word	0x40010000
 800c3cc:	40010400 	.word	0x40010400

0800c3d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	f023 0201 	bic.w	r2, r3, #1
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	693a      	ldr	r2, [r7, #16]
 800c402:	4313      	orrs	r3, r2
 800c404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f023 030a 	bic.w	r3, r3, #10
 800c40c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	4313      	orrs	r3, r2
 800c414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	621a      	str	r2, [r3, #32]
}
 800c422:	bf00      	nop
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c42e:	b480      	push	{r7}
 800c430:	b087      	sub	sp, #28
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	f023 0210 	bic.w	r2, r3, #16
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6a1b      	ldr	r3, [r3, #32]
 800c450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c458:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	031b      	lsls	r3, r3, #12
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	4313      	orrs	r3, r2
 800c462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c46a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	4313      	orrs	r3, r2
 800c474:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	621a      	str	r2, [r3, #32]
}
 800c482:	bf00      	nop
 800c484:	371c      	adds	r7, #28
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c48e:	b480      	push	{r7}
 800c490:	b085      	sub	sp, #20
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	f043 0307 	orr.w	r3, r3, #7
 800c4b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	609a      	str	r2, [r3, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	3714      	adds	r7, #20
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	021a      	lsls	r2, r3, #8
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	609a      	str	r2, [r3, #8]
}
 800c4f8:	bf00      	nop
 800c4fa:	371c      	adds	r7, #28
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f003 031f 	and.w	r3, r3, #31
 800c516:	2201      	movs	r2, #1
 800c518:	fa02 f303 	lsl.w	r3, r2, r3
 800c51c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a1a      	ldr	r2, [r3, #32]
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	43db      	mvns	r3, r3
 800c526:	401a      	ands	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6a1a      	ldr	r2, [r3, #32]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f003 031f 	and.w	r3, r3, #31
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	fa01 f303 	lsl.w	r3, r1, r3
 800c53c:	431a      	orrs	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	621a      	str	r2, [r3, #32]
}
 800c542:	bf00      	nop
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
	...

0800c550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c560:	2b01      	cmp	r3, #1
 800c562:	d101      	bne.n	800c568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c564:	2302      	movs	r3, #2
 800c566:	e05a      	b.n	800c61e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2202      	movs	r2, #2
 800c574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c58e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a21      	ldr	r2, [pc, #132]	; (800c62c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d022      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b4:	d01d      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a1d      	ldr	r2, [pc, #116]	; (800c630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d018      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1b      	ldr	r2, [pc, #108]	; (800c634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d013      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1a      	ldr	r2, [pc, #104]	; (800c638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00e      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a18      	ldr	r2, [pc, #96]	; (800c63c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d009      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a17      	ldr	r2, [pc, #92]	; (800c640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d004      	beq.n	800c5f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4a15      	ldr	r2, [pc, #84]	; (800c644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d10c      	bne.n	800c60c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	4313      	orrs	r3, r2
 800c602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	4618      	mov	r0, r3
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	40010000 	.word	0x40010000
 800c630:	40000400 	.word	0x40000400
 800c634:	40000800 	.word	0x40000800
 800c638:	40000c00 	.word	0x40000c00
 800c63c:	40010400 	.word	0x40010400
 800c640:	40014000 	.word	0x40014000
 800c644:	40001800 	.word	0x40001800

0800c648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e03f      	b.n	800c702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fc ff2e 	bl	80094f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2224      	movs	r2, #36	; 0x24
 800c6a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68da      	ldr	r2, [r3, #12]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fcb3 	bl	800d020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	691a      	ldr	r2, [r3, #16]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c6c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	695a      	ldr	r2, [r3, #20]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2220      	movs	r2, #32
 800c6f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2220      	movs	r2, #32
 800c6fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b088      	sub	sp, #32
 800c70e:	af02      	add	r7, sp, #8
 800c710:	60f8      	str	r0, [r7, #12]
 800c712:	60b9      	str	r1, [r7, #8]
 800c714:	603b      	str	r3, [r7, #0]
 800c716:	4613      	mov	r3, r2
 800c718:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c71a:	2300      	movs	r3, #0
 800c71c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b20      	cmp	r3, #32
 800c728:	f040 8083 	bne.w	800c832 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <HAL_UART_Transmit+0x2e>
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e07b      	b.n	800c834 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_UART_Transmit+0x40>
 800c746:	2302      	movs	r3, #2
 800c748:	e074      	b.n	800c834 <HAL_UART_Transmit+0x12a>
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2221      	movs	r2, #33	; 0x21
 800c75c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c760:	f7fd f846 	bl	80097f0 <HAL_GetTick>
 800c764:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	88fa      	ldrh	r2, [r7, #6]
 800c76a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	88fa      	ldrh	r2, [r7, #6]
 800c770:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c77a:	e042      	b.n	800c802 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c780:	b29b      	uxth	r3, r3
 800c782:	3b01      	subs	r3, #1
 800c784:	b29a      	uxth	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c792:	d122      	bne.n	800c7da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2200      	movs	r2, #0
 800c79c:	2180      	movs	r1, #128	; 0x80
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f000 fabe 	bl	800cd20 <UART_WaitOnFlagUntilTimeout>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e042      	b.n	800c834 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	691b      	ldr	r3, [r3, #16]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d103      	bne.n	800c7d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	3302      	adds	r3, #2
 800c7ce:	60bb      	str	r3, [r7, #8]
 800c7d0:	e017      	b.n	800c802 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	60bb      	str	r3, [r7, #8]
 800c7d8:	e013      	b.n	800c802 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2180      	movs	r1, #128	; 0x80
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 fa9b 	bl	800cd20 <UART_WaitOnFlagUntilTimeout>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d001      	beq.n	800c7f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	e01f      	b.n	800c834 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	60ba      	str	r2, [r7, #8]
 800c7fa:	781a      	ldrb	r2, [r3, #0]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1b7      	bne.n	800c77c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2200      	movs	r2, #0
 800c814:	2140      	movs	r1, #64	; 0x40
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f000 fa82 	bl	800cd20 <UART_WaitOnFlagUntilTimeout>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e006      	b.n	800c834 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2220      	movs	r2, #32
 800c82a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	e000      	b.n	800c834 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c832:	2302      	movs	r3, #2
  }
}
 800c834:	4618      	mov	r0, r3
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af02      	add	r7, sp, #8
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	4613      	mov	r3, r2
 800c84a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c84c:	2300      	movs	r3, #0
 800c84e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b20      	cmp	r3, #32
 800c85a:	f040 8090 	bne.w	800c97e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <HAL_UART_Receive+0x2e>
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e088      	b.n	800c980 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c874:	2b01      	cmp	r3, #1
 800c876:	d101      	bne.n	800c87c <HAL_UART_Receive+0x40>
 800c878:	2302      	movs	r3, #2
 800c87a:	e081      	b.n	800c980 <HAL_UART_Receive+0x144>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2222      	movs	r2, #34	; 0x22
 800c88e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c892:	f7fc ffad 	bl	80097f0 <HAL_GetTick>
 800c896:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	88fa      	ldrh	r2, [r7, #6]
 800c89c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	88fa      	ldrh	r2, [r7, #6]
 800c8a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c8ac:	e05c      	b.n	800c968 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8c4:	d12b      	bne.n	800c91e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2120      	movs	r1, #32
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 fa25 	bl	800cd20 <UART_WaitOnFlagUntilTimeout>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e04f      	b.n	800c980 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10c      	bne.n	800c906 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	3302      	adds	r3, #2
 800c902:	60bb      	str	r3, [r7, #8]
 800c904:	e030      	b.n	800c968 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	b29a      	uxth	r2, r3
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	3301      	adds	r3, #1
 800c91a:	60bb      	str	r3, [r7, #8]
 800c91c:	e024      	b.n	800c968 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2200      	movs	r2, #0
 800c926:	2120      	movs	r1, #32
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f000 f9f9 	bl	800cd20 <UART_WaitOnFlagUntilTimeout>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e023      	b.n	800c980 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d108      	bne.n	800c952 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6859      	ldr	r1, [r3, #4]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	60ba      	str	r2, [r7, #8]
 800c94c:	b2ca      	uxtb	r2, r1
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	e00a      	b.n	800c968 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	1c59      	adds	r1, r3, #1
 800c95e:	60b9      	str	r1, [r7, #8]
 800c960:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d19d      	bne.n	800c8ae <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2220      	movs	r2, #32
 800c976:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e000      	b.n	800c980 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c97e:	2302      	movs	r3, #2
  }
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	4613      	mov	r3, r2
 800c994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b20      	cmp	r3, #32
 800c9a0:	d140      	bne.n	800ca24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <HAL_UART_Receive_IT+0x26>
 800c9a8:	88fb      	ldrh	r3, [r7, #6]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e039      	b.n	800ca26 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d101      	bne.n	800c9c0 <HAL_UART_Receive_IT+0x38>
 800c9bc:	2302      	movs	r3, #2
 800c9be:	e032      	b.n	800ca26 <HAL_UART_Receive_IT+0x9e>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	88fa      	ldrh	r2, [r7, #6]
 800c9d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	88fa      	ldrh	r2, [r7, #6]
 800c9d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2222      	movs	r2, #34	; 0x22
 800c9e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	68da      	ldr	r2, [r3, #12]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	695a      	ldr	r2, [r3, #20]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f042 0201 	orr.w	r2, r2, #1
 800ca0e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f042 0220 	orr.w	r2, r2, #32
 800ca1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e000      	b.n	800ca26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ca24:	2302      	movs	r3, #2
  }
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
	...

0800ca34 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68da      	ldr	r2, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	695a      	ldr	r2, [r3, #20]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f022 0201 	bic.w	r2, r2, #1
 800ca5a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca66:	2b40      	cmp	r3, #64	; 0x40
 800ca68:	d12a      	bne.n	800cac0 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	695a      	ldr	r2, [r3, #20]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca78:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d013      	beq.n	800caaa <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca86:	4a16      	ldr	r2, [pc, #88]	; (800cae0 <HAL_UART_AbortReceive_IT+0xac>)
 800ca88:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fc ffed 	bl	8009a6e <HAL_DMA_Abort_IT>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d01c      	beq.n	800cad4 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800caa4:	4610      	mov	r0, r2
 800caa6:	4798      	blx	r3
 800caa8:	e014      	b.n	800cad4 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2220      	movs	r2, #32
 800cab4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f927 	bl	800cd0c <HAL_UART_AbortReceiveCpltCallback>
 800cabe:	e009      	b.n	800cad4 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f91c 	bl	800cd0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	0800ce19 	.word	0x0800ce19

0800cae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cb04:	2300      	movs	r3, #0
 800cb06:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cb0c:	69fb      	ldr	r3, [r7, #28]
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10d      	bne.n	800cb36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	f003 0320 	and.w	r3, r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d008      	beq.n	800cb36 <HAL_UART_IRQHandler+0x52>
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	f003 0320 	and.w	r3, r3, #32
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d003      	beq.n	800cb36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f9f5 	bl	800cf1e <UART_Receive_IT>
      return;
 800cb34:	e0d1      	b.n	800ccda <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 80b0 	beq.w	800cc9e <HAL_UART_IRQHandler+0x1ba>
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d105      	bne.n	800cb54 <HAL_UART_IRQHandler+0x70>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 80a5 	beq.w	800cc9e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <HAL_UART_IRQHandler+0x90>
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d005      	beq.n	800cb74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	f043 0201 	orr.w	r2, r3, #1
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	f003 0304 	and.w	r3, r3, #4
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00a      	beq.n	800cb94 <HAL_UART_IRQHandler+0xb0>
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb8c:	f043 0202 	orr.w	r2, r3, #2
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	f003 0302 	and.w	r3, r3, #2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <HAL_UART_IRQHandler+0xd0>
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbac:	f043 0204 	orr.w	r2, r3, #4
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	f003 0308 	and.w	r3, r3, #8
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00f      	beq.n	800cbde <HAL_UART_IRQHandler+0xfa>
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	f003 0320 	and.w	r3, r3, #32
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d104      	bne.n	800cbd2 <HAL_UART_IRQHandler+0xee>
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	f003 0301 	and.w	r3, r3, #1
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	f043 0208 	orr.w	r2, r3, #8
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d078      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	f003 0320 	and.w	r3, r3, #32
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d007      	beq.n	800cc00 <HAL_UART_IRQHandler+0x11c>
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	f003 0320 	and.w	r3, r3, #32
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f98f 	bl	800cf1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc0a:	2b40      	cmp	r3, #64	; 0x40
 800cc0c:	bf0c      	ite	eq
 800cc0e:	2301      	moveq	r3, #1
 800cc10:	2300      	movne	r3, #0
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1a:	f003 0308 	and.w	r3, r3, #8
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d102      	bne.n	800cc28 <HAL_UART_IRQHandler+0x144>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d031      	beq.n	800cc8c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f8c3 	bl	800cdb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc38:	2b40      	cmp	r3, #64	; 0x40
 800cc3a:	d123      	bne.n	800cc84 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	695a      	ldr	r2, [r3, #20]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc4a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d013      	beq.n	800cc7c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc58:	4a21      	ldr	r2, [pc, #132]	; (800cce0 <HAL_UART_IRQHandler+0x1fc>)
 800cc5a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fc ff04 	bl	8009a6e <HAL_DMA_Abort_IT>
 800cc66:	4603      	mov	r3, r0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d016      	beq.n	800cc9a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc76:	4610      	mov	r0, r2
 800cc78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc7a:	e00e      	b.n	800cc9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f83b 	bl	800ccf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc82:	e00a      	b.n	800cc9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f837 	bl	800ccf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc8a:	e006      	b.n	800cc9a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f833 	bl	800ccf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800cc98:	e01e      	b.n	800ccd8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc9a:	bf00      	nop
    return;
 800cc9c:	e01c      	b.n	800ccd8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d008      	beq.n	800ccba <HAL_UART_IRQHandler+0x1d6>
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f8c5 	bl	800ce42 <UART_Transmit_IT>
    return;
 800ccb8:	e00f      	b.n	800ccda <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00a      	beq.n	800ccda <HAL_UART_IRQHandler+0x1f6>
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f90d 	bl	800ceee <UART_EndTransmit_IT>
    return;
 800ccd4:	bf00      	nop
 800ccd6:	e000      	b.n	800ccda <HAL_UART_IRQHandler+0x1f6>
    return;
 800ccd8:	bf00      	nop
  }
}
 800ccda:	3720      	adds	r7, #32
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	0800cdf1 	.word	0x0800cdf1

0800cce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	603b      	str	r3, [r7, #0]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd30:	e02c      	b.n	800cd8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd38:	d028      	beq.n	800cd8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd40:	f7fc fd56 	bl	80097f0 <HAL_GetTick>
 800cd44:	4602      	mov	r2, r0
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	69ba      	ldr	r2, [r7, #24]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d21d      	bcs.n	800cd8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cd5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	695a      	ldr	r2, [r3, #20]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0201 	bic.w	r2, r2, #1
 800cd6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2220      	movs	r2, #32
 800cd74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e00f      	b.n	800cdac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	4013      	ands	r3, r2
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	bf0c      	ite	eq
 800cd9c:	2301      	moveq	r3, #1
 800cd9e:	2300      	movne	r3, #0
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	461a      	mov	r2, r3
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d0c3      	beq.n	800cd32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68da      	ldr	r2, [r3, #12]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cdca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	695a      	ldr	r2, [r3, #20]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f022 0201 	bic.w	r2, r2, #1
 800cdda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2220      	movs	r2, #32
 800cde0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7ff ff74 	bl	800ccf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce10:	bf00      	nop
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2220      	movs	r2, #32
 800ce30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f7ff ff69 	bl	800cd0c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce3a:	bf00      	nop
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b21      	cmp	r3, #33	; 0x21
 800ce54:	d144      	bne.n	800cee0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce5e:	d11a      	bne.n	800ce96 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a1b      	ldr	r3, [r3, #32]
 800ce64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce74:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d105      	bne.n	800ce8a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	1c9a      	adds	r2, r3, #2
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	621a      	str	r2, [r3, #32]
 800ce88:	e00e      	b.n	800cea8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6a1b      	ldr	r3, [r3, #32]
 800ce8e:	1c5a      	adds	r2, r3, #1
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	621a      	str	r2, [r3, #32]
 800ce94:	e008      	b.n	800cea8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a1b      	ldr	r3, [r3, #32]
 800ce9a:	1c59      	adds	r1, r3, #1
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6211      	str	r1, [r2, #32]
 800cea0:	781a      	ldrb	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10f      	bne.n	800cedc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ceca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68da      	ldr	r2, [r3, #12]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ceda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	e000      	b.n	800cee2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cee0:	2302      	movs	r3, #2
  }
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2220      	movs	r2, #32
 800cf0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fee8 	bl	800cce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b22      	cmp	r3, #34	; 0x22
 800cf30:	d171      	bne.n	800d016 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf3a:	d123      	bne.n	800cf84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10e      	bne.n	800cf68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf60:	1c9a      	adds	r2, r3, #2
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	629a      	str	r2, [r3, #40]	; 0x28
 800cf66:	e029      	b.n	800cfbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7c:	1c5a      	adds	r2, r3, #1
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	629a      	str	r2, [r3, #40]	; 0x28
 800cf82:	e01b      	b.n	800cfbc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6858      	ldr	r0, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf96:	1c59      	adds	r1, r3, #1
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6291      	str	r1, [r2, #40]	; 0x28
 800cf9c:	b2c2      	uxtb	r2, r0
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	e00c      	b.n	800cfbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	1c58      	adds	r0, r3, #1
 800cfb0:	6879      	ldr	r1, [r7, #4]
 800cfb2:	6288      	str	r0, [r1, #40]	; 0x28
 800cfb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d120      	bne.n	800d012 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f022 0220 	bic.w	r2, r2, #32
 800cfde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cfee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	695a      	ldr	r2, [r3, #20]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f022 0201 	bic.w	r2, r2, #1
 800cffe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2220      	movs	r2, #32
 800d004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fc f94b 	bl	80092a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	e002      	b.n	800d018 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	e000      	b.n	800d018 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d016:	2302      	movs	r3, #2
  }
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3710      	adds	r7, #16
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	b085      	sub	sp, #20
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68da      	ldr	r2, [r3, #12]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	430a      	orrs	r2, r1
 800d03e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	695b      	ldr	r3, [r3, #20]
 800d04e:	431a      	orrs	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	69db      	ldr	r3, [r3, #28]
 800d054:	4313      	orrs	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d062:	f023 030c 	bic.w	r3, r3, #12
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6812      	ldr	r2, [r2, #0]
 800d06a:	68f9      	ldr	r1, [r7, #12]
 800d06c:	430b      	orrs	r3, r1
 800d06e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	699a      	ldr	r2, [r3, #24]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	69db      	ldr	r3, [r3, #28]
 800d08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d08e:	f040 818b 	bne.w	800d3a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4ac1      	ldr	r2, [pc, #772]	; (800d39c <UART_SetConfig+0x37c>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d005      	beq.n	800d0a8 <UART_SetConfig+0x88>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4abf      	ldr	r2, [pc, #764]	; (800d3a0 <UART_SetConfig+0x380>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	f040 80bd 	bne.w	800d222 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d0a8:	f7fd fb50 	bl	800a74c <HAL_RCC_GetPCLK2Freq>
 800d0ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	461d      	mov	r5, r3
 800d0b2:	f04f 0600 	mov.w	r6, #0
 800d0b6:	46a8      	mov	r8, r5
 800d0b8:	46b1      	mov	r9, r6
 800d0ba:	eb18 0308 	adds.w	r3, r8, r8
 800d0be:	eb49 0409 	adc.w	r4, r9, r9
 800d0c2:	4698      	mov	r8, r3
 800d0c4:	46a1      	mov	r9, r4
 800d0c6:	eb18 0805 	adds.w	r8, r8, r5
 800d0ca:	eb49 0906 	adc.w	r9, r9, r6
 800d0ce:	f04f 0100 	mov.w	r1, #0
 800d0d2:	f04f 0200 	mov.w	r2, #0
 800d0d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d0da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d0de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d0e2:	4688      	mov	r8, r1
 800d0e4:	4691      	mov	r9, r2
 800d0e6:	eb18 0005 	adds.w	r0, r8, r5
 800d0ea:	eb49 0106 	adc.w	r1, r9, r6
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	461d      	mov	r5, r3
 800d0f4:	f04f 0600 	mov.w	r6, #0
 800d0f8:	196b      	adds	r3, r5, r5
 800d0fa:	eb46 0406 	adc.w	r4, r6, r6
 800d0fe:	461a      	mov	r2, r3
 800d100:	4623      	mov	r3, r4
 800d102:	f7f3 fd61 	bl	8000bc8 <__aeabi_uldivmod>
 800d106:	4603      	mov	r3, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	461a      	mov	r2, r3
 800d10c:	4ba5      	ldr	r3, [pc, #660]	; (800d3a4 <UART_SetConfig+0x384>)
 800d10e:	fba3 2302 	umull	r2, r3, r3, r2
 800d112:	095b      	lsrs	r3, r3, #5
 800d114:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	461d      	mov	r5, r3
 800d11c:	f04f 0600 	mov.w	r6, #0
 800d120:	46a9      	mov	r9, r5
 800d122:	46b2      	mov	sl, r6
 800d124:	eb19 0309 	adds.w	r3, r9, r9
 800d128:	eb4a 040a 	adc.w	r4, sl, sl
 800d12c:	4699      	mov	r9, r3
 800d12e:	46a2      	mov	sl, r4
 800d130:	eb19 0905 	adds.w	r9, r9, r5
 800d134:	eb4a 0a06 	adc.w	sl, sl, r6
 800d138:	f04f 0100 	mov.w	r1, #0
 800d13c:	f04f 0200 	mov.w	r2, #0
 800d140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d14c:	4689      	mov	r9, r1
 800d14e:	4692      	mov	sl, r2
 800d150:	eb19 0005 	adds.w	r0, r9, r5
 800d154:	eb4a 0106 	adc.w	r1, sl, r6
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	461d      	mov	r5, r3
 800d15e:	f04f 0600 	mov.w	r6, #0
 800d162:	196b      	adds	r3, r5, r5
 800d164:	eb46 0406 	adc.w	r4, r6, r6
 800d168:	461a      	mov	r2, r3
 800d16a:	4623      	mov	r3, r4
 800d16c:	f7f3 fd2c 	bl	8000bc8 <__aeabi_uldivmod>
 800d170:	4603      	mov	r3, r0
 800d172:	460c      	mov	r4, r1
 800d174:	461a      	mov	r2, r3
 800d176:	4b8b      	ldr	r3, [pc, #556]	; (800d3a4 <UART_SetConfig+0x384>)
 800d178:	fba3 1302 	umull	r1, r3, r3, r2
 800d17c:	095b      	lsrs	r3, r3, #5
 800d17e:	2164      	movs	r1, #100	; 0x64
 800d180:	fb01 f303 	mul.w	r3, r1, r3
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	3332      	adds	r3, #50	; 0x32
 800d18a:	4a86      	ldr	r2, [pc, #536]	; (800d3a4 <UART_SetConfig+0x384>)
 800d18c:	fba2 2303 	umull	r2, r3, r2, r3
 800d190:	095b      	lsrs	r3, r3, #5
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d198:	4498      	add	r8, r3
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	461d      	mov	r5, r3
 800d19e:	f04f 0600 	mov.w	r6, #0
 800d1a2:	46a9      	mov	r9, r5
 800d1a4:	46b2      	mov	sl, r6
 800d1a6:	eb19 0309 	adds.w	r3, r9, r9
 800d1aa:	eb4a 040a 	adc.w	r4, sl, sl
 800d1ae:	4699      	mov	r9, r3
 800d1b0:	46a2      	mov	sl, r4
 800d1b2:	eb19 0905 	adds.w	r9, r9, r5
 800d1b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800d1ba:	f04f 0100 	mov.w	r1, #0
 800d1be:	f04f 0200 	mov.w	r2, #0
 800d1c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d1c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d1ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d1ce:	4689      	mov	r9, r1
 800d1d0:	4692      	mov	sl, r2
 800d1d2:	eb19 0005 	adds.w	r0, r9, r5
 800d1d6:	eb4a 0106 	adc.w	r1, sl, r6
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	461d      	mov	r5, r3
 800d1e0:	f04f 0600 	mov.w	r6, #0
 800d1e4:	196b      	adds	r3, r5, r5
 800d1e6:	eb46 0406 	adc.w	r4, r6, r6
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	4623      	mov	r3, r4
 800d1ee:	f7f3 fceb 	bl	8000bc8 <__aeabi_uldivmod>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	4b6a      	ldr	r3, [pc, #424]	; (800d3a4 <UART_SetConfig+0x384>)
 800d1fa:	fba3 1302 	umull	r1, r3, r3, r2
 800d1fe:	095b      	lsrs	r3, r3, #5
 800d200:	2164      	movs	r1, #100	; 0x64
 800d202:	fb01 f303 	mul.w	r3, r1, r3
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	00db      	lsls	r3, r3, #3
 800d20a:	3332      	adds	r3, #50	; 0x32
 800d20c:	4a65      	ldr	r2, [pc, #404]	; (800d3a4 <UART_SetConfig+0x384>)
 800d20e:	fba2 2303 	umull	r2, r3, r2, r3
 800d212:	095b      	lsrs	r3, r3, #5
 800d214:	f003 0207 	and.w	r2, r3, #7
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4442      	add	r2, r8
 800d21e:	609a      	str	r2, [r3, #8]
 800d220:	e26f      	b.n	800d702 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d222:	f7fd fa7f 	bl	800a724 <HAL_RCC_GetPCLK1Freq>
 800d226:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	461d      	mov	r5, r3
 800d22c:	f04f 0600 	mov.w	r6, #0
 800d230:	46a8      	mov	r8, r5
 800d232:	46b1      	mov	r9, r6
 800d234:	eb18 0308 	adds.w	r3, r8, r8
 800d238:	eb49 0409 	adc.w	r4, r9, r9
 800d23c:	4698      	mov	r8, r3
 800d23e:	46a1      	mov	r9, r4
 800d240:	eb18 0805 	adds.w	r8, r8, r5
 800d244:	eb49 0906 	adc.w	r9, r9, r6
 800d248:	f04f 0100 	mov.w	r1, #0
 800d24c:	f04f 0200 	mov.w	r2, #0
 800d250:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d254:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d258:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d25c:	4688      	mov	r8, r1
 800d25e:	4691      	mov	r9, r2
 800d260:	eb18 0005 	adds.w	r0, r8, r5
 800d264:	eb49 0106 	adc.w	r1, r9, r6
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	461d      	mov	r5, r3
 800d26e:	f04f 0600 	mov.w	r6, #0
 800d272:	196b      	adds	r3, r5, r5
 800d274:	eb46 0406 	adc.w	r4, r6, r6
 800d278:	461a      	mov	r2, r3
 800d27a:	4623      	mov	r3, r4
 800d27c:	f7f3 fca4 	bl	8000bc8 <__aeabi_uldivmod>
 800d280:	4603      	mov	r3, r0
 800d282:	460c      	mov	r4, r1
 800d284:	461a      	mov	r2, r3
 800d286:	4b47      	ldr	r3, [pc, #284]	; (800d3a4 <UART_SetConfig+0x384>)
 800d288:	fba3 2302 	umull	r2, r3, r3, r2
 800d28c:	095b      	lsrs	r3, r3, #5
 800d28e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	461d      	mov	r5, r3
 800d296:	f04f 0600 	mov.w	r6, #0
 800d29a:	46a9      	mov	r9, r5
 800d29c:	46b2      	mov	sl, r6
 800d29e:	eb19 0309 	adds.w	r3, r9, r9
 800d2a2:	eb4a 040a 	adc.w	r4, sl, sl
 800d2a6:	4699      	mov	r9, r3
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	eb19 0905 	adds.w	r9, r9, r5
 800d2ae:	eb4a 0a06 	adc.w	sl, sl, r6
 800d2b2:	f04f 0100 	mov.w	r1, #0
 800d2b6:	f04f 0200 	mov.w	r2, #0
 800d2ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2c6:	4689      	mov	r9, r1
 800d2c8:	4692      	mov	sl, r2
 800d2ca:	eb19 0005 	adds.w	r0, r9, r5
 800d2ce:	eb4a 0106 	adc.w	r1, sl, r6
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	461d      	mov	r5, r3
 800d2d8:	f04f 0600 	mov.w	r6, #0
 800d2dc:	196b      	adds	r3, r5, r5
 800d2de:	eb46 0406 	adc.w	r4, r6, r6
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	4623      	mov	r3, r4
 800d2e6:	f7f3 fc6f 	bl	8000bc8 <__aeabi_uldivmod>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4b2c      	ldr	r3, [pc, #176]	; (800d3a4 <UART_SetConfig+0x384>)
 800d2f2:	fba3 1302 	umull	r1, r3, r3, r2
 800d2f6:	095b      	lsrs	r3, r3, #5
 800d2f8:	2164      	movs	r1, #100	; 0x64
 800d2fa:	fb01 f303 	mul.w	r3, r1, r3
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	00db      	lsls	r3, r3, #3
 800d302:	3332      	adds	r3, #50	; 0x32
 800d304:	4a27      	ldr	r2, [pc, #156]	; (800d3a4 <UART_SetConfig+0x384>)
 800d306:	fba2 2303 	umull	r2, r3, r2, r3
 800d30a:	095b      	lsrs	r3, r3, #5
 800d30c:	005b      	lsls	r3, r3, #1
 800d30e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d312:	4498      	add	r8, r3
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	461d      	mov	r5, r3
 800d318:	f04f 0600 	mov.w	r6, #0
 800d31c:	46a9      	mov	r9, r5
 800d31e:	46b2      	mov	sl, r6
 800d320:	eb19 0309 	adds.w	r3, r9, r9
 800d324:	eb4a 040a 	adc.w	r4, sl, sl
 800d328:	4699      	mov	r9, r3
 800d32a:	46a2      	mov	sl, r4
 800d32c:	eb19 0905 	adds.w	r9, r9, r5
 800d330:	eb4a 0a06 	adc.w	sl, sl, r6
 800d334:	f04f 0100 	mov.w	r1, #0
 800d338:	f04f 0200 	mov.w	r2, #0
 800d33c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d348:	4689      	mov	r9, r1
 800d34a:	4692      	mov	sl, r2
 800d34c:	eb19 0005 	adds.w	r0, r9, r5
 800d350:	eb4a 0106 	adc.w	r1, sl, r6
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	461d      	mov	r5, r3
 800d35a:	f04f 0600 	mov.w	r6, #0
 800d35e:	196b      	adds	r3, r5, r5
 800d360:	eb46 0406 	adc.w	r4, r6, r6
 800d364:	461a      	mov	r2, r3
 800d366:	4623      	mov	r3, r4
 800d368:	f7f3 fc2e 	bl	8000bc8 <__aeabi_uldivmod>
 800d36c:	4603      	mov	r3, r0
 800d36e:	460c      	mov	r4, r1
 800d370:	461a      	mov	r2, r3
 800d372:	4b0c      	ldr	r3, [pc, #48]	; (800d3a4 <UART_SetConfig+0x384>)
 800d374:	fba3 1302 	umull	r1, r3, r3, r2
 800d378:	095b      	lsrs	r3, r3, #5
 800d37a:	2164      	movs	r1, #100	; 0x64
 800d37c:	fb01 f303 	mul.w	r3, r1, r3
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	3332      	adds	r3, #50	; 0x32
 800d386:	4a07      	ldr	r2, [pc, #28]	; (800d3a4 <UART_SetConfig+0x384>)
 800d388:	fba2 2303 	umull	r2, r3, r2, r3
 800d38c:	095b      	lsrs	r3, r3, #5
 800d38e:	f003 0207 	and.w	r2, r3, #7
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4442      	add	r2, r8
 800d398:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d39a:	e1b2      	b.n	800d702 <UART_SetConfig+0x6e2>
 800d39c:	40011000 	.word	0x40011000
 800d3a0:	40011400 	.word	0x40011400
 800d3a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4ad7      	ldr	r2, [pc, #860]	; (800d70c <UART_SetConfig+0x6ec>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d005      	beq.n	800d3be <UART_SetConfig+0x39e>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4ad6      	ldr	r2, [pc, #856]	; (800d710 <UART_SetConfig+0x6f0>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	f040 80d1 	bne.w	800d560 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3be:	f7fd f9c5 	bl	800a74c <HAL_RCC_GetPCLK2Freq>
 800d3c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	469a      	mov	sl, r3
 800d3c8:	f04f 0b00 	mov.w	fp, #0
 800d3cc:	46d0      	mov	r8, sl
 800d3ce:	46d9      	mov	r9, fp
 800d3d0:	eb18 0308 	adds.w	r3, r8, r8
 800d3d4:	eb49 0409 	adc.w	r4, r9, r9
 800d3d8:	4698      	mov	r8, r3
 800d3da:	46a1      	mov	r9, r4
 800d3dc:	eb18 080a 	adds.w	r8, r8, sl
 800d3e0:	eb49 090b 	adc.w	r9, r9, fp
 800d3e4:	f04f 0100 	mov.w	r1, #0
 800d3e8:	f04f 0200 	mov.w	r2, #0
 800d3ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d3f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d3f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d3f8:	4688      	mov	r8, r1
 800d3fa:	4691      	mov	r9, r2
 800d3fc:	eb1a 0508 	adds.w	r5, sl, r8
 800d400:	eb4b 0609 	adc.w	r6, fp, r9
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	4619      	mov	r1, r3
 800d40a:	f04f 0200 	mov.w	r2, #0
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	f04f 0400 	mov.w	r4, #0
 800d416:	0094      	lsls	r4, r2, #2
 800d418:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d41c:	008b      	lsls	r3, r1, #2
 800d41e:	461a      	mov	r2, r3
 800d420:	4623      	mov	r3, r4
 800d422:	4628      	mov	r0, r5
 800d424:	4631      	mov	r1, r6
 800d426:	f7f3 fbcf 	bl	8000bc8 <__aeabi_uldivmod>
 800d42a:	4603      	mov	r3, r0
 800d42c:	460c      	mov	r4, r1
 800d42e:	461a      	mov	r2, r3
 800d430:	4bb8      	ldr	r3, [pc, #736]	; (800d714 <UART_SetConfig+0x6f4>)
 800d432:	fba3 2302 	umull	r2, r3, r3, r2
 800d436:	095b      	lsrs	r3, r3, #5
 800d438:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	469b      	mov	fp, r3
 800d440:	f04f 0c00 	mov.w	ip, #0
 800d444:	46d9      	mov	r9, fp
 800d446:	46e2      	mov	sl, ip
 800d448:	eb19 0309 	adds.w	r3, r9, r9
 800d44c:	eb4a 040a 	adc.w	r4, sl, sl
 800d450:	4699      	mov	r9, r3
 800d452:	46a2      	mov	sl, r4
 800d454:	eb19 090b 	adds.w	r9, r9, fp
 800d458:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d45c:	f04f 0100 	mov.w	r1, #0
 800d460:	f04f 0200 	mov.w	r2, #0
 800d464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d468:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d46c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d470:	4689      	mov	r9, r1
 800d472:	4692      	mov	sl, r2
 800d474:	eb1b 0509 	adds.w	r5, fp, r9
 800d478:	eb4c 060a 	adc.w	r6, ip, sl
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	4619      	mov	r1, r3
 800d482:	f04f 0200 	mov.w	r2, #0
 800d486:	f04f 0300 	mov.w	r3, #0
 800d48a:	f04f 0400 	mov.w	r4, #0
 800d48e:	0094      	lsls	r4, r2, #2
 800d490:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d494:	008b      	lsls	r3, r1, #2
 800d496:	461a      	mov	r2, r3
 800d498:	4623      	mov	r3, r4
 800d49a:	4628      	mov	r0, r5
 800d49c:	4631      	mov	r1, r6
 800d49e:	f7f3 fb93 	bl	8000bc8 <__aeabi_uldivmod>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4b9a      	ldr	r3, [pc, #616]	; (800d714 <UART_SetConfig+0x6f4>)
 800d4aa:	fba3 1302 	umull	r1, r3, r3, r2
 800d4ae:	095b      	lsrs	r3, r3, #5
 800d4b0:	2164      	movs	r1, #100	; 0x64
 800d4b2:	fb01 f303 	mul.w	r3, r1, r3
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	3332      	adds	r3, #50	; 0x32
 800d4bc:	4a95      	ldr	r2, [pc, #596]	; (800d714 <UART_SetConfig+0x6f4>)
 800d4be:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c2:	095b      	lsrs	r3, r3, #5
 800d4c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4c8:	4498      	add	r8, r3
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	469b      	mov	fp, r3
 800d4ce:	f04f 0c00 	mov.w	ip, #0
 800d4d2:	46d9      	mov	r9, fp
 800d4d4:	46e2      	mov	sl, ip
 800d4d6:	eb19 0309 	adds.w	r3, r9, r9
 800d4da:	eb4a 040a 	adc.w	r4, sl, sl
 800d4de:	4699      	mov	r9, r3
 800d4e0:	46a2      	mov	sl, r4
 800d4e2:	eb19 090b 	adds.w	r9, r9, fp
 800d4e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d4ea:	f04f 0100 	mov.w	r1, #0
 800d4ee:	f04f 0200 	mov.w	r2, #0
 800d4f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d4f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d4fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d4fe:	4689      	mov	r9, r1
 800d500:	4692      	mov	sl, r2
 800d502:	eb1b 0509 	adds.w	r5, fp, r9
 800d506:	eb4c 060a 	adc.w	r6, ip, sl
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	4619      	mov	r1, r3
 800d510:	f04f 0200 	mov.w	r2, #0
 800d514:	f04f 0300 	mov.w	r3, #0
 800d518:	f04f 0400 	mov.w	r4, #0
 800d51c:	0094      	lsls	r4, r2, #2
 800d51e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d522:	008b      	lsls	r3, r1, #2
 800d524:	461a      	mov	r2, r3
 800d526:	4623      	mov	r3, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	4631      	mov	r1, r6
 800d52c:	f7f3 fb4c 	bl	8000bc8 <__aeabi_uldivmod>
 800d530:	4603      	mov	r3, r0
 800d532:	460c      	mov	r4, r1
 800d534:	461a      	mov	r2, r3
 800d536:	4b77      	ldr	r3, [pc, #476]	; (800d714 <UART_SetConfig+0x6f4>)
 800d538:	fba3 1302 	umull	r1, r3, r3, r2
 800d53c:	095b      	lsrs	r3, r3, #5
 800d53e:	2164      	movs	r1, #100	; 0x64
 800d540:	fb01 f303 	mul.w	r3, r1, r3
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	011b      	lsls	r3, r3, #4
 800d548:	3332      	adds	r3, #50	; 0x32
 800d54a:	4a72      	ldr	r2, [pc, #456]	; (800d714 <UART_SetConfig+0x6f4>)
 800d54c:	fba2 2303 	umull	r2, r3, r2, r3
 800d550:	095b      	lsrs	r3, r3, #5
 800d552:	f003 020f 	and.w	r2, r3, #15
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4442      	add	r2, r8
 800d55c:	609a      	str	r2, [r3, #8]
 800d55e:	e0d0      	b.n	800d702 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d560:	f7fd f8e0 	bl	800a724 <HAL_RCC_GetPCLK1Freq>
 800d564:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	469a      	mov	sl, r3
 800d56a:	f04f 0b00 	mov.w	fp, #0
 800d56e:	46d0      	mov	r8, sl
 800d570:	46d9      	mov	r9, fp
 800d572:	eb18 0308 	adds.w	r3, r8, r8
 800d576:	eb49 0409 	adc.w	r4, r9, r9
 800d57a:	4698      	mov	r8, r3
 800d57c:	46a1      	mov	r9, r4
 800d57e:	eb18 080a 	adds.w	r8, r8, sl
 800d582:	eb49 090b 	adc.w	r9, r9, fp
 800d586:	f04f 0100 	mov.w	r1, #0
 800d58a:	f04f 0200 	mov.w	r2, #0
 800d58e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d592:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d596:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d59a:	4688      	mov	r8, r1
 800d59c:	4691      	mov	r9, r2
 800d59e:	eb1a 0508 	adds.w	r5, sl, r8
 800d5a2:	eb4b 0609 	adc.w	r6, fp, r9
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	f04f 0200 	mov.w	r2, #0
 800d5b0:	f04f 0300 	mov.w	r3, #0
 800d5b4:	f04f 0400 	mov.w	r4, #0
 800d5b8:	0094      	lsls	r4, r2, #2
 800d5ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d5be:	008b      	lsls	r3, r1, #2
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	f7f3 fafe 	bl	8000bc8 <__aeabi_uldivmod>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	4b50      	ldr	r3, [pc, #320]	; (800d714 <UART_SetConfig+0x6f4>)
 800d5d4:	fba3 2302 	umull	r2, r3, r3, r2
 800d5d8:	095b      	lsrs	r3, r3, #5
 800d5da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	469b      	mov	fp, r3
 800d5e2:	f04f 0c00 	mov.w	ip, #0
 800d5e6:	46d9      	mov	r9, fp
 800d5e8:	46e2      	mov	sl, ip
 800d5ea:	eb19 0309 	adds.w	r3, r9, r9
 800d5ee:	eb4a 040a 	adc.w	r4, sl, sl
 800d5f2:	4699      	mov	r9, r3
 800d5f4:	46a2      	mov	sl, r4
 800d5f6:	eb19 090b 	adds.w	r9, r9, fp
 800d5fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d5fe:	f04f 0100 	mov.w	r1, #0
 800d602:	f04f 0200 	mov.w	r2, #0
 800d606:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d60a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d60e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d612:	4689      	mov	r9, r1
 800d614:	4692      	mov	sl, r2
 800d616:	eb1b 0509 	adds.w	r5, fp, r9
 800d61a:	eb4c 060a 	adc.w	r6, ip, sl
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	4619      	mov	r1, r3
 800d624:	f04f 0200 	mov.w	r2, #0
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	f04f 0400 	mov.w	r4, #0
 800d630:	0094      	lsls	r4, r2, #2
 800d632:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d636:	008b      	lsls	r3, r1, #2
 800d638:	461a      	mov	r2, r3
 800d63a:	4623      	mov	r3, r4
 800d63c:	4628      	mov	r0, r5
 800d63e:	4631      	mov	r1, r6
 800d640:	f7f3 fac2 	bl	8000bc8 <__aeabi_uldivmod>
 800d644:	4603      	mov	r3, r0
 800d646:	460c      	mov	r4, r1
 800d648:	461a      	mov	r2, r3
 800d64a:	4b32      	ldr	r3, [pc, #200]	; (800d714 <UART_SetConfig+0x6f4>)
 800d64c:	fba3 1302 	umull	r1, r3, r3, r2
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	2164      	movs	r1, #100	; 0x64
 800d654:	fb01 f303 	mul.w	r3, r1, r3
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	3332      	adds	r3, #50	; 0x32
 800d65e:	4a2d      	ldr	r2, [pc, #180]	; (800d714 <UART_SetConfig+0x6f4>)
 800d660:	fba2 2303 	umull	r2, r3, r2, r3
 800d664:	095b      	lsrs	r3, r3, #5
 800d666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d66a:	4498      	add	r8, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	469b      	mov	fp, r3
 800d670:	f04f 0c00 	mov.w	ip, #0
 800d674:	46d9      	mov	r9, fp
 800d676:	46e2      	mov	sl, ip
 800d678:	eb19 0309 	adds.w	r3, r9, r9
 800d67c:	eb4a 040a 	adc.w	r4, sl, sl
 800d680:	4699      	mov	r9, r3
 800d682:	46a2      	mov	sl, r4
 800d684:	eb19 090b 	adds.w	r9, r9, fp
 800d688:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d68c:	f04f 0100 	mov.w	r1, #0
 800d690:	f04f 0200 	mov.w	r2, #0
 800d694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d69c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d6a0:	4689      	mov	r9, r1
 800d6a2:	4692      	mov	sl, r2
 800d6a4:	eb1b 0509 	adds.w	r5, fp, r9
 800d6a8:	eb4c 060a 	adc.w	r6, ip, sl
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	f04f 0200 	mov.w	r2, #0
 800d6b6:	f04f 0300 	mov.w	r3, #0
 800d6ba:	f04f 0400 	mov.w	r4, #0
 800d6be:	0094      	lsls	r4, r2, #2
 800d6c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d6c4:	008b      	lsls	r3, r1, #2
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	f7f3 fa7b 	bl	8000bc8 <__aeabi_uldivmod>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	4b0e      	ldr	r3, [pc, #56]	; (800d714 <UART_SetConfig+0x6f4>)
 800d6da:	fba3 1302 	umull	r1, r3, r3, r2
 800d6de:	095b      	lsrs	r3, r3, #5
 800d6e0:	2164      	movs	r1, #100	; 0x64
 800d6e2:	fb01 f303 	mul.w	r3, r1, r3
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	011b      	lsls	r3, r3, #4
 800d6ea:	3332      	adds	r3, #50	; 0x32
 800d6ec:	4a09      	ldr	r2, [pc, #36]	; (800d714 <UART_SetConfig+0x6f4>)
 800d6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d6f2:	095b      	lsrs	r3, r3, #5
 800d6f4:	f003 020f 	and.w	r2, r3, #15
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4442      	add	r2, r8
 800d6fe:	609a      	str	r2, [r3, #8]
}
 800d700:	e7ff      	b.n	800d702 <UART_SetConfig+0x6e2>
 800d702:	bf00      	nop
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70c:	40011000 	.word	0x40011000
 800d710:	40011400 	.word	0x40011400
 800d714:	51eb851f 	.word	0x51eb851f

0800d718 <atoi>:
 800d718:	220a      	movs	r2, #10
 800d71a:	2100      	movs	r1, #0
 800d71c:	f000 bd40 	b.w	800e1a0 <strtol>

0800d720 <__errno>:
 800d720:	4b01      	ldr	r3, [pc, #4]	; (800d728 <__errno+0x8>)
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	20000068 	.word	0x20000068

0800d72c <__libc_init_array>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0d      	ldr	r6, [pc, #52]	; (800d764 <__libc_init_array+0x38>)
 800d730:	4c0d      	ldr	r4, [pc, #52]	; (800d768 <__libc_init_array+0x3c>)
 800d732:	1ba4      	subs	r4, r4, r6
 800d734:	10a4      	asrs	r4, r4, #2
 800d736:	2500      	movs	r5, #0
 800d738:	42a5      	cmp	r5, r4
 800d73a:	d109      	bne.n	800d750 <__libc_init_array+0x24>
 800d73c:	4e0b      	ldr	r6, [pc, #44]	; (800d76c <__libc_init_array+0x40>)
 800d73e:	4c0c      	ldr	r4, [pc, #48]	; (800d770 <__libc_init_array+0x44>)
 800d740:	f002 f90a 	bl	800f958 <_init>
 800d744:	1ba4      	subs	r4, r4, r6
 800d746:	10a4      	asrs	r4, r4, #2
 800d748:	2500      	movs	r5, #0
 800d74a:	42a5      	cmp	r5, r4
 800d74c:	d105      	bne.n	800d75a <__libc_init_array+0x2e>
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d754:	4798      	blx	r3
 800d756:	3501      	adds	r5, #1
 800d758:	e7ee      	b.n	800d738 <__libc_init_array+0xc>
 800d75a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d75e:	4798      	blx	r3
 800d760:	3501      	adds	r5, #1
 800d762:	e7f2      	b.n	800d74a <__libc_init_array+0x1e>
 800d764:	080101d8 	.word	0x080101d8
 800d768:	080101d8 	.word	0x080101d8
 800d76c:	080101d8 	.word	0x080101d8
 800d770:	080101dc 	.word	0x080101dc

0800d774 <memset>:
 800d774:	4402      	add	r2, r0
 800d776:	4603      	mov	r3, r0
 800d778:	4293      	cmp	r3, r2
 800d77a:	d100      	bne.n	800d77e <memset+0xa>
 800d77c:	4770      	bx	lr
 800d77e:	f803 1b01 	strb.w	r1, [r3], #1
 800d782:	e7f9      	b.n	800d778 <memset+0x4>

0800d784 <__cvt>:
 800d784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d788:	ec55 4b10 	vmov	r4, r5, d0
 800d78c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d78e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d792:	2d00      	cmp	r5, #0
 800d794:	460e      	mov	r6, r1
 800d796:	4691      	mov	r9, r2
 800d798:	4619      	mov	r1, r3
 800d79a:	bfb8      	it	lt
 800d79c:	4622      	movlt	r2, r4
 800d79e:	462b      	mov	r3, r5
 800d7a0:	f027 0720 	bic.w	r7, r7, #32
 800d7a4:	bfbb      	ittet	lt
 800d7a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d7aa:	461d      	movlt	r5, r3
 800d7ac:	2300      	movge	r3, #0
 800d7ae:	232d      	movlt	r3, #45	; 0x2d
 800d7b0:	bfb8      	it	lt
 800d7b2:	4614      	movlt	r4, r2
 800d7b4:	2f46      	cmp	r7, #70	; 0x46
 800d7b6:	700b      	strb	r3, [r1, #0]
 800d7b8:	d004      	beq.n	800d7c4 <__cvt+0x40>
 800d7ba:	2f45      	cmp	r7, #69	; 0x45
 800d7bc:	d100      	bne.n	800d7c0 <__cvt+0x3c>
 800d7be:	3601      	adds	r6, #1
 800d7c0:	2102      	movs	r1, #2
 800d7c2:	e000      	b.n	800d7c6 <__cvt+0x42>
 800d7c4:	2103      	movs	r1, #3
 800d7c6:	ab03      	add	r3, sp, #12
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	ab02      	add	r3, sp, #8
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	4653      	mov	r3, sl
 800d7d2:	ec45 4b10 	vmov	d0, r4, r5
 800d7d6:	f000 fd87 	bl	800e2e8 <_dtoa_r>
 800d7da:	2f47      	cmp	r7, #71	; 0x47
 800d7dc:	4680      	mov	r8, r0
 800d7de:	d102      	bne.n	800d7e6 <__cvt+0x62>
 800d7e0:	f019 0f01 	tst.w	r9, #1
 800d7e4:	d026      	beq.n	800d834 <__cvt+0xb0>
 800d7e6:	2f46      	cmp	r7, #70	; 0x46
 800d7e8:	eb08 0906 	add.w	r9, r8, r6
 800d7ec:	d111      	bne.n	800d812 <__cvt+0x8e>
 800d7ee:	f898 3000 	ldrb.w	r3, [r8]
 800d7f2:	2b30      	cmp	r3, #48	; 0x30
 800d7f4:	d10a      	bne.n	800d80c <__cvt+0x88>
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f7f3 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 800d802:	b918      	cbnz	r0, 800d80c <__cvt+0x88>
 800d804:	f1c6 0601 	rsb	r6, r6, #1
 800d808:	f8ca 6000 	str.w	r6, [sl]
 800d80c:	f8da 3000 	ldr.w	r3, [sl]
 800d810:	4499      	add	r9, r3
 800d812:	2200      	movs	r2, #0
 800d814:	2300      	movs	r3, #0
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	f7f3 f965 	bl	8000ae8 <__aeabi_dcmpeq>
 800d81e:	b938      	cbnz	r0, 800d830 <__cvt+0xac>
 800d820:	2230      	movs	r2, #48	; 0x30
 800d822:	9b03      	ldr	r3, [sp, #12]
 800d824:	454b      	cmp	r3, r9
 800d826:	d205      	bcs.n	800d834 <__cvt+0xb0>
 800d828:	1c59      	adds	r1, r3, #1
 800d82a:	9103      	str	r1, [sp, #12]
 800d82c:	701a      	strb	r2, [r3, #0]
 800d82e:	e7f8      	b.n	800d822 <__cvt+0x9e>
 800d830:	f8cd 900c 	str.w	r9, [sp, #12]
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d838:	eba3 0308 	sub.w	r3, r3, r8
 800d83c:	4640      	mov	r0, r8
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	b004      	add	sp, #16
 800d842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d846 <__exponent>:
 800d846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d848:	2900      	cmp	r1, #0
 800d84a:	4604      	mov	r4, r0
 800d84c:	bfba      	itte	lt
 800d84e:	4249      	neglt	r1, r1
 800d850:	232d      	movlt	r3, #45	; 0x2d
 800d852:	232b      	movge	r3, #43	; 0x2b
 800d854:	2909      	cmp	r1, #9
 800d856:	f804 2b02 	strb.w	r2, [r4], #2
 800d85a:	7043      	strb	r3, [r0, #1]
 800d85c:	dd20      	ble.n	800d8a0 <__exponent+0x5a>
 800d85e:	f10d 0307 	add.w	r3, sp, #7
 800d862:	461f      	mov	r7, r3
 800d864:	260a      	movs	r6, #10
 800d866:	fb91 f5f6 	sdiv	r5, r1, r6
 800d86a:	fb06 1115 	mls	r1, r6, r5, r1
 800d86e:	3130      	adds	r1, #48	; 0x30
 800d870:	2d09      	cmp	r5, #9
 800d872:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d876:	f103 32ff 	add.w	r2, r3, #4294967295
 800d87a:	4629      	mov	r1, r5
 800d87c:	dc09      	bgt.n	800d892 <__exponent+0x4c>
 800d87e:	3130      	adds	r1, #48	; 0x30
 800d880:	3b02      	subs	r3, #2
 800d882:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d886:	42bb      	cmp	r3, r7
 800d888:	4622      	mov	r2, r4
 800d88a:	d304      	bcc.n	800d896 <__exponent+0x50>
 800d88c:	1a10      	subs	r0, r2, r0
 800d88e:	b003      	add	sp, #12
 800d890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d892:	4613      	mov	r3, r2
 800d894:	e7e7      	b.n	800d866 <__exponent+0x20>
 800d896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d89a:	f804 2b01 	strb.w	r2, [r4], #1
 800d89e:	e7f2      	b.n	800d886 <__exponent+0x40>
 800d8a0:	2330      	movs	r3, #48	; 0x30
 800d8a2:	4419      	add	r1, r3
 800d8a4:	7083      	strb	r3, [r0, #2]
 800d8a6:	1d02      	adds	r2, r0, #4
 800d8a8:	70c1      	strb	r1, [r0, #3]
 800d8aa:	e7ef      	b.n	800d88c <__exponent+0x46>

0800d8ac <_printf_float>:
 800d8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b0:	b08d      	sub	sp, #52	; 0x34
 800d8b2:	460c      	mov	r4, r1
 800d8b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d8b8:	4616      	mov	r6, r2
 800d8ba:	461f      	mov	r7, r3
 800d8bc:	4605      	mov	r5, r0
 800d8be:	f001 facf 	bl	800ee60 <_localeconv_r>
 800d8c2:	6803      	ldr	r3, [r0, #0]
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7f2 fc8c 	bl	80001e4 <strlen>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8d4:	9005      	str	r0, [sp, #20]
 800d8d6:	3307      	adds	r3, #7
 800d8d8:	f023 0307 	bic.w	r3, r3, #7
 800d8dc:	f103 0208 	add.w	r2, r3, #8
 800d8e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d8e4:	f8d4 b000 	ldr.w	fp, [r4]
 800d8e8:	f8c8 2000 	str.w	r2, [r8]
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8fc:	9307      	str	r3, [sp, #28]
 800d8fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800d902:	f04f 32ff 	mov.w	r2, #4294967295
 800d906:	4ba7      	ldr	r3, [pc, #668]	; (800dba4 <_printf_float+0x2f8>)
 800d908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d90c:	f7f3 f91e 	bl	8000b4c <__aeabi_dcmpun>
 800d910:	bb70      	cbnz	r0, 800d970 <_printf_float+0xc4>
 800d912:	f04f 32ff 	mov.w	r2, #4294967295
 800d916:	4ba3      	ldr	r3, [pc, #652]	; (800dba4 <_printf_float+0x2f8>)
 800d918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d91c:	f7f3 f8f8 	bl	8000b10 <__aeabi_dcmple>
 800d920:	bb30      	cbnz	r0, 800d970 <_printf_float+0xc4>
 800d922:	2200      	movs	r2, #0
 800d924:	2300      	movs	r3, #0
 800d926:	4640      	mov	r0, r8
 800d928:	4649      	mov	r1, r9
 800d92a:	f7f3 f8e7 	bl	8000afc <__aeabi_dcmplt>
 800d92e:	b110      	cbz	r0, 800d936 <_printf_float+0x8a>
 800d930:	232d      	movs	r3, #45	; 0x2d
 800d932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d936:	4a9c      	ldr	r2, [pc, #624]	; (800dba8 <_printf_float+0x2fc>)
 800d938:	4b9c      	ldr	r3, [pc, #624]	; (800dbac <_printf_float+0x300>)
 800d93a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d93e:	bf8c      	ite	hi
 800d940:	4690      	movhi	r8, r2
 800d942:	4698      	movls	r8, r3
 800d944:	2303      	movs	r3, #3
 800d946:	f02b 0204 	bic.w	r2, fp, #4
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	6022      	str	r2, [r4, #0]
 800d94e:	f04f 0900 	mov.w	r9, #0
 800d952:	9700      	str	r7, [sp, #0]
 800d954:	4633      	mov	r3, r6
 800d956:	aa0b      	add	r2, sp, #44	; 0x2c
 800d958:	4621      	mov	r1, r4
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 f9e6 	bl	800dd2c <_printf_common>
 800d960:	3001      	adds	r0, #1
 800d962:	f040 808d 	bne.w	800da80 <_printf_float+0x1d4>
 800d966:	f04f 30ff 	mov.w	r0, #4294967295
 800d96a:	b00d      	add	sp, #52	; 0x34
 800d96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d970:	4642      	mov	r2, r8
 800d972:	464b      	mov	r3, r9
 800d974:	4640      	mov	r0, r8
 800d976:	4649      	mov	r1, r9
 800d978:	f7f3 f8e8 	bl	8000b4c <__aeabi_dcmpun>
 800d97c:	b110      	cbz	r0, 800d984 <_printf_float+0xd8>
 800d97e:	4a8c      	ldr	r2, [pc, #560]	; (800dbb0 <_printf_float+0x304>)
 800d980:	4b8c      	ldr	r3, [pc, #560]	; (800dbb4 <_printf_float+0x308>)
 800d982:	e7da      	b.n	800d93a <_printf_float+0x8e>
 800d984:	6861      	ldr	r1, [r4, #4]
 800d986:	1c4b      	adds	r3, r1, #1
 800d988:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d98c:	a80a      	add	r0, sp, #40	; 0x28
 800d98e:	d13e      	bne.n	800da0e <_printf_float+0x162>
 800d990:	2306      	movs	r3, #6
 800d992:	6063      	str	r3, [r4, #4]
 800d994:	2300      	movs	r3, #0
 800d996:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d99a:	ab09      	add	r3, sp, #36	; 0x24
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	ec49 8b10 	vmov	d0, r8, r9
 800d9a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9a6:	6022      	str	r2, [r4, #0]
 800d9a8:	f8cd a004 	str.w	sl, [sp, #4]
 800d9ac:	6861      	ldr	r1, [r4, #4]
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7ff fee8 	bl	800d784 <__cvt>
 800d9b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d9b8:	2b47      	cmp	r3, #71	; 0x47
 800d9ba:	4680      	mov	r8, r0
 800d9bc:	d109      	bne.n	800d9d2 <_printf_float+0x126>
 800d9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c0:	1cd8      	adds	r0, r3, #3
 800d9c2:	db02      	blt.n	800d9ca <_printf_float+0x11e>
 800d9c4:	6862      	ldr	r2, [r4, #4]
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	dd47      	ble.n	800da5a <_printf_float+0x1ae>
 800d9ca:	f1aa 0a02 	sub.w	sl, sl, #2
 800d9ce:	fa5f fa8a 	uxtb.w	sl, sl
 800d9d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9d8:	d824      	bhi.n	800da24 <_printf_float+0x178>
 800d9da:	3901      	subs	r1, #1
 800d9dc:	4652      	mov	r2, sl
 800d9de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d9e2:	9109      	str	r1, [sp, #36]	; 0x24
 800d9e4:	f7ff ff2f 	bl	800d846 <__exponent>
 800d9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9ea:	1813      	adds	r3, r2, r0
 800d9ec:	2a01      	cmp	r2, #1
 800d9ee:	4681      	mov	r9, r0
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	dc02      	bgt.n	800d9fa <_printf_float+0x14e>
 800d9f4:	6822      	ldr	r2, [r4, #0]
 800d9f6:	07d1      	lsls	r1, r2, #31
 800d9f8:	d501      	bpl.n	800d9fe <_printf_float+0x152>
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	6123      	str	r3, [r4, #16]
 800d9fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da02:	2b00      	cmp	r3, #0
 800da04:	d0a5      	beq.n	800d952 <_printf_float+0xa6>
 800da06:	232d      	movs	r3, #45	; 0x2d
 800da08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da0c:	e7a1      	b.n	800d952 <_printf_float+0xa6>
 800da0e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800da12:	f000 8177 	beq.w	800dd04 <_printf_float+0x458>
 800da16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800da1a:	d1bb      	bne.n	800d994 <_printf_float+0xe8>
 800da1c:	2900      	cmp	r1, #0
 800da1e:	d1b9      	bne.n	800d994 <_printf_float+0xe8>
 800da20:	2301      	movs	r3, #1
 800da22:	e7b6      	b.n	800d992 <_printf_float+0xe6>
 800da24:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800da28:	d119      	bne.n	800da5e <_printf_float+0x1b2>
 800da2a:	2900      	cmp	r1, #0
 800da2c:	6863      	ldr	r3, [r4, #4]
 800da2e:	dd0c      	ble.n	800da4a <_printf_float+0x19e>
 800da30:	6121      	str	r1, [r4, #16]
 800da32:	b913      	cbnz	r3, 800da3a <_printf_float+0x18e>
 800da34:	6822      	ldr	r2, [r4, #0]
 800da36:	07d2      	lsls	r2, r2, #31
 800da38:	d502      	bpl.n	800da40 <_printf_float+0x194>
 800da3a:	3301      	adds	r3, #1
 800da3c:	440b      	add	r3, r1
 800da3e:	6123      	str	r3, [r4, #16]
 800da40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da42:	65a3      	str	r3, [r4, #88]	; 0x58
 800da44:	f04f 0900 	mov.w	r9, #0
 800da48:	e7d9      	b.n	800d9fe <_printf_float+0x152>
 800da4a:	b913      	cbnz	r3, 800da52 <_printf_float+0x1a6>
 800da4c:	6822      	ldr	r2, [r4, #0]
 800da4e:	07d0      	lsls	r0, r2, #31
 800da50:	d501      	bpl.n	800da56 <_printf_float+0x1aa>
 800da52:	3302      	adds	r3, #2
 800da54:	e7f3      	b.n	800da3e <_printf_float+0x192>
 800da56:	2301      	movs	r3, #1
 800da58:	e7f1      	b.n	800da3e <_printf_float+0x192>
 800da5a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800da5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da62:	4293      	cmp	r3, r2
 800da64:	db05      	blt.n	800da72 <_printf_float+0x1c6>
 800da66:	6822      	ldr	r2, [r4, #0]
 800da68:	6123      	str	r3, [r4, #16]
 800da6a:	07d1      	lsls	r1, r2, #31
 800da6c:	d5e8      	bpl.n	800da40 <_printf_float+0x194>
 800da6e:	3301      	adds	r3, #1
 800da70:	e7e5      	b.n	800da3e <_printf_float+0x192>
 800da72:	2b00      	cmp	r3, #0
 800da74:	bfd4      	ite	le
 800da76:	f1c3 0302 	rsble	r3, r3, #2
 800da7a:	2301      	movgt	r3, #1
 800da7c:	4413      	add	r3, r2
 800da7e:	e7de      	b.n	800da3e <_printf_float+0x192>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	055a      	lsls	r2, r3, #21
 800da84:	d407      	bmi.n	800da96 <_printf_float+0x1ea>
 800da86:	6923      	ldr	r3, [r4, #16]
 800da88:	4642      	mov	r2, r8
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	d12b      	bne.n	800daec <_printf_float+0x240>
 800da94:	e767      	b.n	800d966 <_printf_float+0xba>
 800da96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800da9a:	f240 80dc 	bls.w	800dc56 <_printf_float+0x3aa>
 800da9e:	2200      	movs	r2, #0
 800daa0:	2300      	movs	r3, #0
 800daa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800daa6:	f7f3 f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d033      	beq.n	800db16 <_printf_float+0x26a>
 800daae:	2301      	movs	r3, #1
 800dab0:	4a41      	ldr	r2, [pc, #260]	; (800dbb8 <_printf_float+0x30c>)
 800dab2:	4631      	mov	r1, r6
 800dab4:	4628      	mov	r0, r5
 800dab6:	47b8      	blx	r7
 800dab8:	3001      	adds	r0, #1
 800daba:	f43f af54 	beq.w	800d966 <_printf_float+0xba>
 800dabe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dac2:	429a      	cmp	r2, r3
 800dac4:	db02      	blt.n	800dacc <_printf_float+0x220>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	07d8      	lsls	r0, r3, #31
 800daca:	d50f      	bpl.n	800daec <_printf_float+0x240>
 800dacc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dad0:	4631      	mov	r1, r6
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b8      	blx	r7
 800dad6:	3001      	adds	r0, #1
 800dad8:	f43f af45 	beq.w	800d966 <_printf_float+0xba>
 800dadc:	f04f 0800 	mov.w	r8, #0
 800dae0:	f104 091a 	add.w	r9, r4, #26
 800dae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae6:	3b01      	subs	r3, #1
 800dae8:	4543      	cmp	r3, r8
 800daea:	dc09      	bgt.n	800db00 <_printf_float+0x254>
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	079b      	lsls	r3, r3, #30
 800daf0:	f100 8103 	bmi.w	800dcfa <_printf_float+0x44e>
 800daf4:	68e0      	ldr	r0, [r4, #12]
 800daf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf8:	4298      	cmp	r0, r3
 800dafa:	bfb8      	it	lt
 800dafc:	4618      	movlt	r0, r3
 800dafe:	e734      	b.n	800d96a <_printf_float+0xbe>
 800db00:	2301      	movs	r3, #1
 800db02:	464a      	mov	r2, r9
 800db04:	4631      	mov	r1, r6
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	f43f af2b 	beq.w	800d966 <_printf_float+0xba>
 800db10:	f108 0801 	add.w	r8, r8, #1
 800db14:	e7e6      	b.n	800dae4 <_printf_float+0x238>
 800db16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db18:	2b00      	cmp	r3, #0
 800db1a:	dc2b      	bgt.n	800db74 <_printf_float+0x2c8>
 800db1c:	2301      	movs	r3, #1
 800db1e:	4a26      	ldr	r2, [pc, #152]	; (800dbb8 <_printf_float+0x30c>)
 800db20:	4631      	mov	r1, r6
 800db22:	4628      	mov	r0, r5
 800db24:	47b8      	blx	r7
 800db26:	3001      	adds	r0, #1
 800db28:	f43f af1d 	beq.w	800d966 <_printf_float+0xba>
 800db2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2e:	b923      	cbnz	r3, 800db3a <_printf_float+0x28e>
 800db30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db32:	b913      	cbnz	r3, 800db3a <_printf_float+0x28e>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	07d9      	lsls	r1, r3, #31
 800db38:	d5d8      	bpl.n	800daec <_printf_float+0x240>
 800db3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db3e:	4631      	mov	r1, r6
 800db40:	4628      	mov	r0, r5
 800db42:	47b8      	blx	r7
 800db44:	3001      	adds	r0, #1
 800db46:	f43f af0e 	beq.w	800d966 <_printf_float+0xba>
 800db4a:	f04f 0900 	mov.w	r9, #0
 800db4e:	f104 0a1a 	add.w	sl, r4, #26
 800db52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db54:	425b      	negs	r3, r3
 800db56:	454b      	cmp	r3, r9
 800db58:	dc01      	bgt.n	800db5e <_printf_float+0x2b2>
 800db5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5c:	e794      	b.n	800da88 <_printf_float+0x1dc>
 800db5e:	2301      	movs	r3, #1
 800db60:	4652      	mov	r2, sl
 800db62:	4631      	mov	r1, r6
 800db64:	4628      	mov	r0, r5
 800db66:	47b8      	blx	r7
 800db68:	3001      	adds	r0, #1
 800db6a:	f43f aefc 	beq.w	800d966 <_printf_float+0xba>
 800db6e:	f109 0901 	add.w	r9, r9, #1
 800db72:	e7ee      	b.n	800db52 <_printf_float+0x2a6>
 800db74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db78:	429a      	cmp	r2, r3
 800db7a:	bfa8      	it	ge
 800db7c:	461a      	movge	r2, r3
 800db7e:	2a00      	cmp	r2, #0
 800db80:	4691      	mov	r9, r2
 800db82:	dd07      	ble.n	800db94 <_printf_float+0x2e8>
 800db84:	4613      	mov	r3, r2
 800db86:	4631      	mov	r1, r6
 800db88:	4642      	mov	r2, r8
 800db8a:	4628      	mov	r0, r5
 800db8c:	47b8      	blx	r7
 800db8e:	3001      	adds	r0, #1
 800db90:	f43f aee9 	beq.w	800d966 <_printf_float+0xba>
 800db94:	f104 031a 	add.w	r3, r4, #26
 800db98:	f04f 0b00 	mov.w	fp, #0
 800db9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dba0:	9306      	str	r3, [sp, #24]
 800dba2:	e015      	b.n	800dbd0 <_printf_float+0x324>
 800dba4:	7fefffff 	.word	0x7fefffff
 800dba8:	0800ff78 	.word	0x0800ff78
 800dbac:	0800ff74 	.word	0x0800ff74
 800dbb0:	0800ff80 	.word	0x0800ff80
 800dbb4:	0800ff7c 	.word	0x0800ff7c
 800dbb8:	0800ff84 	.word	0x0800ff84
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	9a06      	ldr	r2, [sp, #24]
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	47b8      	blx	r7
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	f43f aecd 	beq.w	800d966 <_printf_float+0xba>
 800dbcc:	f10b 0b01 	add.w	fp, fp, #1
 800dbd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dbd4:	ebaa 0309 	sub.w	r3, sl, r9
 800dbd8:	455b      	cmp	r3, fp
 800dbda:	dcef      	bgt.n	800dbbc <_printf_float+0x310>
 800dbdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	44d0      	add	r8, sl
 800dbe4:	db15      	blt.n	800dc12 <_printf_float+0x366>
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	07da      	lsls	r2, r3, #31
 800dbea:	d412      	bmi.n	800dc12 <_printf_float+0x366>
 800dbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbf0:	eba3 020a 	sub.w	r2, r3, sl
 800dbf4:	eba3 0a01 	sub.w	sl, r3, r1
 800dbf8:	4592      	cmp	sl, r2
 800dbfa:	bfa8      	it	ge
 800dbfc:	4692      	movge	sl, r2
 800dbfe:	f1ba 0f00 	cmp.w	sl, #0
 800dc02:	dc0e      	bgt.n	800dc22 <_printf_float+0x376>
 800dc04:	f04f 0800 	mov.w	r8, #0
 800dc08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc0c:	f104 091a 	add.w	r9, r4, #26
 800dc10:	e019      	b.n	800dc46 <_printf_float+0x39a>
 800dc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc16:	4631      	mov	r1, r6
 800dc18:	4628      	mov	r0, r5
 800dc1a:	47b8      	blx	r7
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d1e5      	bne.n	800dbec <_printf_float+0x340>
 800dc20:	e6a1      	b.n	800d966 <_printf_float+0xba>
 800dc22:	4653      	mov	r3, sl
 800dc24:	4642      	mov	r2, r8
 800dc26:	4631      	mov	r1, r6
 800dc28:	4628      	mov	r0, r5
 800dc2a:	47b8      	blx	r7
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d1e9      	bne.n	800dc04 <_printf_float+0x358>
 800dc30:	e699      	b.n	800d966 <_printf_float+0xba>
 800dc32:	2301      	movs	r3, #1
 800dc34:	464a      	mov	r2, r9
 800dc36:	4631      	mov	r1, r6
 800dc38:	4628      	mov	r0, r5
 800dc3a:	47b8      	blx	r7
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	f43f ae92 	beq.w	800d966 <_printf_float+0xba>
 800dc42:	f108 0801 	add.w	r8, r8, #1
 800dc46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc4a:	1a9b      	subs	r3, r3, r2
 800dc4c:	eba3 030a 	sub.w	r3, r3, sl
 800dc50:	4543      	cmp	r3, r8
 800dc52:	dcee      	bgt.n	800dc32 <_printf_float+0x386>
 800dc54:	e74a      	b.n	800daec <_printf_float+0x240>
 800dc56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc58:	2a01      	cmp	r2, #1
 800dc5a:	dc01      	bgt.n	800dc60 <_printf_float+0x3b4>
 800dc5c:	07db      	lsls	r3, r3, #31
 800dc5e:	d53a      	bpl.n	800dcd6 <_printf_float+0x42a>
 800dc60:	2301      	movs	r3, #1
 800dc62:	4642      	mov	r2, r8
 800dc64:	4631      	mov	r1, r6
 800dc66:	4628      	mov	r0, r5
 800dc68:	47b8      	blx	r7
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f43f ae7b 	beq.w	800d966 <_printf_float+0xba>
 800dc70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc74:	4631      	mov	r1, r6
 800dc76:	4628      	mov	r0, r5
 800dc78:	47b8      	blx	r7
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	f108 0801 	add.w	r8, r8, #1
 800dc80:	f43f ae71 	beq.w	800d966 <_printf_float+0xba>
 800dc84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc86:	2200      	movs	r2, #0
 800dc88:	f103 3aff 	add.w	sl, r3, #4294967295
 800dc8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc90:	2300      	movs	r3, #0
 800dc92:	f7f2 ff29 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc96:	b9c8      	cbnz	r0, 800dccc <_printf_float+0x420>
 800dc98:	4653      	mov	r3, sl
 800dc9a:	4642      	mov	r2, r8
 800dc9c:	4631      	mov	r1, r6
 800dc9e:	4628      	mov	r0, r5
 800dca0:	47b8      	blx	r7
 800dca2:	3001      	adds	r0, #1
 800dca4:	d10e      	bne.n	800dcc4 <_printf_float+0x418>
 800dca6:	e65e      	b.n	800d966 <_printf_float+0xba>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	4652      	mov	r2, sl
 800dcac:	4631      	mov	r1, r6
 800dcae:	4628      	mov	r0, r5
 800dcb0:	47b8      	blx	r7
 800dcb2:	3001      	adds	r0, #1
 800dcb4:	f43f ae57 	beq.w	800d966 <_printf_float+0xba>
 800dcb8:	f108 0801 	add.w	r8, r8, #1
 800dcbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	4543      	cmp	r3, r8
 800dcc2:	dcf1      	bgt.n	800dca8 <_printf_float+0x3fc>
 800dcc4:	464b      	mov	r3, r9
 800dcc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcca:	e6de      	b.n	800da8a <_printf_float+0x1de>
 800dccc:	f04f 0800 	mov.w	r8, #0
 800dcd0:	f104 0a1a 	add.w	sl, r4, #26
 800dcd4:	e7f2      	b.n	800dcbc <_printf_float+0x410>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e7df      	b.n	800dc9a <_printf_float+0x3ee>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	464a      	mov	r2, r9
 800dcde:	4631      	mov	r1, r6
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b8      	blx	r7
 800dce4:	3001      	adds	r0, #1
 800dce6:	f43f ae3e 	beq.w	800d966 <_printf_float+0xba>
 800dcea:	f108 0801 	add.w	r8, r8, #1
 800dcee:	68e3      	ldr	r3, [r4, #12]
 800dcf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcf2:	1a9b      	subs	r3, r3, r2
 800dcf4:	4543      	cmp	r3, r8
 800dcf6:	dcf0      	bgt.n	800dcda <_printf_float+0x42e>
 800dcf8:	e6fc      	b.n	800daf4 <_printf_float+0x248>
 800dcfa:	f04f 0800 	mov.w	r8, #0
 800dcfe:	f104 0919 	add.w	r9, r4, #25
 800dd02:	e7f4      	b.n	800dcee <_printf_float+0x442>
 800dd04:	2900      	cmp	r1, #0
 800dd06:	f43f ae8b 	beq.w	800da20 <_printf_float+0x174>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd10:	ab09      	add	r3, sp, #36	; 0x24
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	ec49 8b10 	vmov	d0, r8, r9
 800dd18:	6022      	str	r2, [r4, #0]
 800dd1a:	f8cd a004 	str.w	sl, [sp, #4]
 800dd1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd22:	4628      	mov	r0, r5
 800dd24:	f7ff fd2e 	bl	800d784 <__cvt>
 800dd28:	4680      	mov	r8, r0
 800dd2a:	e648      	b.n	800d9be <_printf_float+0x112>

0800dd2c <_printf_common>:
 800dd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd30:	4691      	mov	r9, r2
 800dd32:	461f      	mov	r7, r3
 800dd34:	688a      	ldr	r2, [r1, #8]
 800dd36:	690b      	ldr	r3, [r1, #16]
 800dd38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bfb8      	it	lt
 800dd40:	4613      	movlt	r3, r2
 800dd42:	f8c9 3000 	str.w	r3, [r9]
 800dd46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460c      	mov	r4, r1
 800dd4e:	b112      	cbz	r2, 800dd56 <_printf_common+0x2a>
 800dd50:	3301      	adds	r3, #1
 800dd52:	f8c9 3000 	str.w	r3, [r9]
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	0699      	lsls	r1, r3, #26
 800dd5a:	bf42      	ittt	mi
 800dd5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dd60:	3302      	addmi	r3, #2
 800dd62:	f8c9 3000 	strmi.w	r3, [r9]
 800dd66:	6825      	ldr	r5, [r4, #0]
 800dd68:	f015 0506 	ands.w	r5, r5, #6
 800dd6c:	d107      	bne.n	800dd7e <_printf_common+0x52>
 800dd6e:	f104 0a19 	add.w	sl, r4, #25
 800dd72:	68e3      	ldr	r3, [r4, #12]
 800dd74:	f8d9 2000 	ldr.w	r2, [r9]
 800dd78:	1a9b      	subs	r3, r3, r2
 800dd7a:	42ab      	cmp	r3, r5
 800dd7c:	dc28      	bgt.n	800ddd0 <_printf_common+0xa4>
 800dd7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dd82:	6822      	ldr	r2, [r4, #0]
 800dd84:	3300      	adds	r3, #0
 800dd86:	bf18      	it	ne
 800dd88:	2301      	movne	r3, #1
 800dd8a:	0692      	lsls	r2, r2, #26
 800dd8c:	d42d      	bmi.n	800ddea <_printf_common+0xbe>
 800dd8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd92:	4639      	mov	r1, r7
 800dd94:	4630      	mov	r0, r6
 800dd96:	47c0      	blx	r8
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d020      	beq.n	800ddde <_printf_common+0xb2>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	68e5      	ldr	r5, [r4, #12]
 800dda0:	f8d9 2000 	ldr.w	r2, [r9]
 800dda4:	f003 0306 	and.w	r3, r3, #6
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	bf08      	it	eq
 800ddac:	1aad      	subeq	r5, r5, r2
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	6922      	ldr	r2, [r4, #16]
 800ddb2:	bf0c      	ite	eq
 800ddb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddb8:	2500      	movne	r5, #0
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	bfc4      	itt	gt
 800ddbe:	1a9b      	subgt	r3, r3, r2
 800ddc0:	18ed      	addgt	r5, r5, r3
 800ddc2:	f04f 0900 	mov.w	r9, #0
 800ddc6:	341a      	adds	r4, #26
 800ddc8:	454d      	cmp	r5, r9
 800ddca:	d11a      	bne.n	800de02 <_printf_common+0xd6>
 800ddcc:	2000      	movs	r0, #0
 800ddce:	e008      	b.n	800dde2 <_printf_common+0xb6>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	4639      	mov	r1, r7
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	47c0      	blx	r8
 800ddda:	3001      	adds	r0, #1
 800dddc:	d103      	bne.n	800dde6 <_printf_common+0xba>
 800ddde:	f04f 30ff 	mov.w	r0, #4294967295
 800dde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde6:	3501      	adds	r5, #1
 800dde8:	e7c3      	b.n	800dd72 <_printf_common+0x46>
 800ddea:	18e1      	adds	r1, r4, r3
 800ddec:	1c5a      	adds	r2, r3, #1
 800ddee:	2030      	movs	r0, #48	; 0x30
 800ddf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddf4:	4422      	add	r2, r4
 800ddf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddfe:	3302      	adds	r3, #2
 800de00:	e7c5      	b.n	800dd8e <_printf_common+0x62>
 800de02:	2301      	movs	r3, #1
 800de04:	4622      	mov	r2, r4
 800de06:	4639      	mov	r1, r7
 800de08:	4630      	mov	r0, r6
 800de0a:	47c0      	blx	r8
 800de0c:	3001      	adds	r0, #1
 800de0e:	d0e6      	beq.n	800ddde <_printf_common+0xb2>
 800de10:	f109 0901 	add.w	r9, r9, #1
 800de14:	e7d8      	b.n	800ddc8 <_printf_common+0x9c>
	...

0800de18 <_printf_i>:
 800de18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800de20:	460c      	mov	r4, r1
 800de22:	7e09      	ldrb	r1, [r1, #24]
 800de24:	b085      	sub	sp, #20
 800de26:	296e      	cmp	r1, #110	; 0x6e
 800de28:	4617      	mov	r7, r2
 800de2a:	4606      	mov	r6, r0
 800de2c:	4698      	mov	r8, r3
 800de2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de30:	f000 80b3 	beq.w	800df9a <_printf_i+0x182>
 800de34:	d822      	bhi.n	800de7c <_printf_i+0x64>
 800de36:	2963      	cmp	r1, #99	; 0x63
 800de38:	d036      	beq.n	800dea8 <_printf_i+0x90>
 800de3a:	d80a      	bhi.n	800de52 <_printf_i+0x3a>
 800de3c:	2900      	cmp	r1, #0
 800de3e:	f000 80b9 	beq.w	800dfb4 <_printf_i+0x19c>
 800de42:	2958      	cmp	r1, #88	; 0x58
 800de44:	f000 8083 	beq.w	800df4e <_printf_i+0x136>
 800de48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800de50:	e032      	b.n	800deb8 <_printf_i+0xa0>
 800de52:	2964      	cmp	r1, #100	; 0x64
 800de54:	d001      	beq.n	800de5a <_printf_i+0x42>
 800de56:	2969      	cmp	r1, #105	; 0x69
 800de58:	d1f6      	bne.n	800de48 <_printf_i+0x30>
 800de5a:	6820      	ldr	r0, [r4, #0]
 800de5c:	6813      	ldr	r3, [r2, #0]
 800de5e:	0605      	lsls	r5, r0, #24
 800de60:	f103 0104 	add.w	r1, r3, #4
 800de64:	d52a      	bpl.n	800debc <_printf_i+0xa4>
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	6011      	str	r1, [r2, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da03      	bge.n	800de76 <_printf_i+0x5e>
 800de6e:	222d      	movs	r2, #45	; 0x2d
 800de70:	425b      	negs	r3, r3
 800de72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800de76:	486f      	ldr	r0, [pc, #444]	; (800e034 <_printf_i+0x21c>)
 800de78:	220a      	movs	r2, #10
 800de7a:	e039      	b.n	800def0 <_printf_i+0xd8>
 800de7c:	2973      	cmp	r1, #115	; 0x73
 800de7e:	f000 809d 	beq.w	800dfbc <_printf_i+0x1a4>
 800de82:	d808      	bhi.n	800de96 <_printf_i+0x7e>
 800de84:	296f      	cmp	r1, #111	; 0x6f
 800de86:	d020      	beq.n	800deca <_printf_i+0xb2>
 800de88:	2970      	cmp	r1, #112	; 0x70
 800de8a:	d1dd      	bne.n	800de48 <_printf_i+0x30>
 800de8c:	6823      	ldr	r3, [r4, #0]
 800de8e:	f043 0320 	orr.w	r3, r3, #32
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	e003      	b.n	800de9e <_printf_i+0x86>
 800de96:	2975      	cmp	r1, #117	; 0x75
 800de98:	d017      	beq.n	800deca <_printf_i+0xb2>
 800de9a:	2978      	cmp	r1, #120	; 0x78
 800de9c:	d1d4      	bne.n	800de48 <_printf_i+0x30>
 800de9e:	2378      	movs	r3, #120	; 0x78
 800dea0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dea4:	4864      	ldr	r0, [pc, #400]	; (800e038 <_printf_i+0x220>)
 800dea6:	e055      	b.n	800df54 <_printf_i+0x13c>
 800dea8:	6813      	ldr	r3, [r2, #0]
 800deaa:	1d19      	adds	r1, r3, #4
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	6011      	str	r1, [r2, #0]
 800deb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deb8:	2301      	movs	r3, #1
 800deba:	e08c      	b.n	800dfd6 <_printf_i+0x1be>
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	6011      	str	r1, [r2, #0]
 800dec0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dec4:	bf18      	it	ne
 800dec6:	b21b      	sxthne	r3, r3
 800dec8:	e7cf      	b.n	800de6a <_printf_i+0x52>
 800deca:	6813      	ldr	r3, [r2, #0]
 800decc:	6825      	ldr	r5, [r4, #0]
 800dece:	1d18      	adds	r0, r3, #4
 800ded0:	6010      	str	r0, [r2, #0]
 800ded2:	0628      	lsls	r0, r5, #24
 800ded4:	d501      	bpl.n	800deda <_printf_i+0xc2>
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	e002      	b.n	800dee0 <_printf_i+0xc8>
 800deda:	0668      	lsls	r0, r5, #25
 800dedc:	d5fb      	bpl.n	800ded6 <_printf_i+0xbe>
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	4854      	ldr	r0, [pc, #336]	; (800e034 <_printf_i+0x21c>)
 800dee2:	296f      	cmp	r1, #111	; 0x6f
 800dee4:	bf14      	ite	ne
 800dee6:	220a      	movne	r2, #10
 800dee8:	2208      	moveq	r2, #8
 800deea:	2100      	movs	r1, #0
 800deec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800def0:	6865      	ldr	r5, [r4, #4]
 800def2:	60a5      	str	r5, [r4, #8]
 800def4:	2d00      	cmp	r5, #0
 800def6:	f2c0 8095 	blt.w	800e024 <_printf_i+0x20c>
 800defa:	6821      	ldr	r1, [r4, #0]
 800defc:	f021 0104 	bic.w	r1, r1, #4
 800df00:	6021      	str	r1, [r4, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d13d      	bne.n	800df82 <_printf_i+0x16a>
 800df06:	2d00      	cmp	r5, #0
 800df08:	f040 808e 	bne.w	800e028 <_printf_i+0x210>
 800df0c:	4665      	mov	r5, ip
 800df0e:	2a08      	cmp	r2, #8
 800df10:	d10b      	bne.n	800df2a <_printf_i+0x112>
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	07db      	lsls	r3, r3, #31
 800df16:	d508      	bpl.n	800df2a <_printf_i+0x112>
 800df18:	6923      	ldr	r3, [r4, #16]
 800df1a:	6862      	ldr	r2, [r4, #4]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	bfde      	ittt	le
 800df20:	2330      	movle	r3, #48	; 0x30
 800df22:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df26:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df2a:	ebac 0305 	sub.w	r3, ip, r5
 800df2e:	6123      	str	r3, [r4, #16]
 800df30:	f8cd 8000 	str.w	r8, [sp]
 800df34:	463b      	mov	r3, r7
 800df36:	aa03      	add	r2, sp, #12
 800df38:	4621      	mov	r1, r4
 800df3a:	4630      	mov	r0, r6
 800df3c:	f7ff fef6 	bl	800dd2c <_printf_common>
 800df40:	3001      	adds	r0, #1
 800df42:	d14d      	bne.n	800dfe0 <_printf_i+0x1c8>
 800df44:	f04f 30ff 	mov.w	r0, #4294967295
 800df48:	b005      	add	sp, #20
 800df4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df4e:	4839      	ldr	r0, [pc, #228]	; (800e034 <_printf_i+0x21c>)
 800df50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800df54:	6813      	ldr	r3, [r2, #0]
 800df56:	6821      	ldr	r1, [r4, #0]
 800df58:	1d1d      	adds	r5, r3, #4
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	6015      	str	r5, [r2, #0]
 800df5e:	060a      	lsls	r2, r1, #24
 800df60:	d50b      	bpl.n	800df7a <_printf_i+0x162>
 800df62:	07ca      	lsls	r2, r1, #31
 800df64:	bf44      	itt	mi
 800df66:	f041 0120 	orrmi.w	r1, r1, #32
 800df6a:	6021      	strmi	r1, [r4, #0]
 800df6c:	b91b      	cbnz	r3, 800df76 <_printf_i+0x15e>
 800df6e:	6822      	ldr	r2, [r4, #0]
 800df70:	f022 0220 	bic.w	r2, r2, #32
 800df74:	6022      	str	r2, [r4, #0]
 800df76:	2210      	movs	r2, #16
 800df78:	e7b7      	b.n	800deea <_printf_i+0xd2>
 800df7a:	064d      	lsls	r5, r1, #25
 800df7c:	bf48      	it	mi
 800df7e:	b29b      	uxthmi	r3, r3
 800df80:	e7ef      	b.n	800df62 <_printf_i+0x14a>
 800df82:	4665      	mov	r5, ip
 800df84:	fbb3 f1f2 	udiv	r1, r3, r2
 800df88:	fb02 3311 	mls	r3, r2, r1, r3
 800df8c:	5cc3      	ldrb	r3, [r0, r3]
 800df8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800df92:	460b      	mov	r3, r1
 800df94:	2900      	cmp	r1, #0
 800df96:	d1f5      	bne.n	800df84 <_printf_i+0x16c>
 800df98:	e7b9      	b.n	800df0e <_printf_i+0xf6>
 800df9a:	6813      	ldr	r3, [r2, #0]
 800df9c:	6825      	ldr	r5, [r4, #0]
 800df9e:	6961      	ldr	r1, [r4, #20]
 800dfa0:	1d18      	adds	r0, r3, #4
 800dfa2:	6010      	str	r0, [r2, #0]
 800dfa4:	0628      	lsls	r0, r5, #24
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	d501      	bpl.n	800dfae <_printf_i+0x196>
 800dfaa:	6019      	str	r1, [r3, #0]
 800dfac:	e002      	b.n	800dfb4 <_printf_i+0x19c>
 800dfae:	066a      	lsls	r2, r5, #25
 800dfb0:	d5fb      	bpl.n	800dfaa <_printf_i+0x192>
 800dfb2:	8019      	strh	r1, [r3, #0]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	6123      	str	r3, [r4, #16]
 800dfb8:	4665      	mov	r5, ip
 800dfba:	e7b9      	b.n	800df30 <_printf_i+0x118>
 800dfbc:	6813      	ldr	r3, [r2, #0]
 800dfbe:	1d19      	adds	r1, r3, #4
 800dfc0:	6011      	str	r1, [r2, #0]
 800dfc2:	681d      	ldr	r5, [r3, #0]
 800dfc4:	6862      	ldr	r2, [r4, #4]
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	4628      	mov	r0, r5
 800dfca:	f7f2 f919 	bl	8000200 <memchr>
 800dfce:	b108      	cbz	r0, 800dfd4 <_printf_i+0x1bc>
 800dfd0:	1b40      	subs	r0, r0, r5
 800dfd2:	6060      	str	r0, [r4, #4]
 800dfd4:	6863      	ldr	r3, [r4, #4]
 800dfd6:	6123      	str	r3, [r4, #16]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfde:	e7a7      	b.n	800df30 <_printf_i+0x118>
 800dfe0:	6923      	ldr	r3, [r4, #16]
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	47c0      	blx	r8
 800dfea:	3001      	adds	r0, #1
 800dfec:	d0aa      	beq.n	800df44 <_printf_i+0x12c>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	079b      	lsls	r3, r3, #30
 800dff2:	d413      	bmi.n	800e01c <_printf_i+0x204>
 800dff4:	68e0      	ldr	r0, [r4, #12]
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	4298      	cmp	r0, r3
 800dffa:	bfb8      	it	lt
 800dffc:	4618      	movlt	r0, r3
 800dffe:	e7a3      	b.n	800df48 <_printf_i+0x130>
 800e000:	2301      	movs	r3, #1
 800e002:	464a      	mov	r2, r9
 800e004:	4639      	mov	r1, r7
 800e006:	4630      	mov	r0, r6
 800e008:	47c0      	blx	r8
 800e00a:	3001      	adds	r0, #1
 800e00c:	d09a      	beq.n	800df44 <_printf_i+0x12c>
 800e00e:	3501      	adds	r5, #1
 800e010:	68e3      	ldr	r3, [r4, #12]
 800e012:	9a03      	ldr	r2, [sp, #12]
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	42ab      	cmp	r3, r5
 800e018:	dcf2      	bgt.n	800e000 <_printf_i+0x1e8>
 800e01a:	e7eb      	b.n	800dff4 <_printf_i+0x1dc>
 800e01c:	2500      	movs	r5, #0
 800e01e:	f104 0919 	add.w	r9, r4, #25
 800e022:	e7f5      	b.n	800e010 <_printf_i+0x1f8>
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1ac      	bne.n	800df82 <_printf_i+0x16a>
 800e028:	7803      	ldrb	r3, [r0, #0]
 800e02a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e02e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e032:	e76c      	b.n	800df0e <_printf_i+0xf6>
 800e034:	0800ff86 	.word	0x0800ff86
 800e038:	0800ff97 	.word	0x0800ff97

0800e03c <siprintf>:
 800e03c:	b40e      	push	{r1, r2, r3}
 800e03e:	b500      	push	{lr}
 800e040:	b09c      	sub	sp, #112	; 0x70
 800e042:	ab1d      	add	r3, sp, #116	; 0x74
 800e044:	9002      	str	r0, [sp, #8]
 800e046:	9006      	str	r0, [sp, #24]
 800e048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e04c:	4809      	ldr	r0, [pc, #36]	; (800e074 <siprintf+0x38>)
 800e04e:	9107      	str	r1, [sp, #28]
 800e050:	9104      	str	r1, [sp, #16]
 800e052:	4909      	ldr	r1, [pc, #36]	; (800e078 <siprintf+0x3c>)
 800e054:	f853 2b04 	ldr.w	r2, [r3], #4
 800e058:	9105      	str	r1, [sp, #20]
 800e05a:	6800      	ldr	r0, [r0, #0]
 800e05c:	9301      	str	r3, [sp, #4]
 800e05e:	a902      	add	r1, sp, #8
 800e060:	f001 fb1c 	bl	800f69c <_svfiprintf_r>
 800e064:	9b02      	ldr	r3, [sp, #8]
 800e066:	2200      	movs	r2, #0
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	b01c      	add	sp, #112	; 0x70
 800e06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e070:	b003      	add	sp, #12
 800e072:	4770      	bx	lr
 800e074:	20000068 	.word	0x20000068
 800e078:	ffff0208 	.word	0xffff0208

0800e07c <strcat>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	4603      	mov	r3, r0
 800e080:	781a      	ldrb	r2, [r3, #0]
 800e082:	1c5c      	adds	r4, r3, #1
 800e084:	b93a      	cbnz	r2, 800e096 <strcat+0x1a>
 800e086:	3b01      	subs	r3, #1
 800e088:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e08c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e090:	2a00      	cmp	r2, #0
 800e092:	d1f9      	bne.n	800e088 <strcat+0xc>
 800e094:	bd10      	pop	{r4, pc}
 800e096:	4623      	mov	r3, r4
 800e098:	e7f2      	b.n	800e080 <strcat+0x4>

0800e09a <strcpy>:
 800e09a:	4603      	mov	r3, r0
 800e09c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0a0:	f803 2b01 	strb.w	r2, [r3], #1
 800e0a4:	2a00      	cmp	r2, #0
 800e0a6:	d1f9      	bne.n	800e09c <strcpy+0x2>
 800e0a8:	4770      	bx	lr

0800e0aa <_strtol_l.isra.0>:
 800e0aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	4689      	mov	r9, r1
 800e0b2:	4692      	mov	sl, r2
 800e0b4:	461e      	mov	r6, r3
 800e0b6:	460f      	mov	r7, r1
 800e0b8:	463d      	mov	r5, r7
 800e0ba:	9808      	ldr	r0, [sp, #32]
 800e0bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0c0:	f000 feca 	bl	800ee58 <__locale_ctype_ptr_l>
 800e0c4:	4420      	add	r0, r4
 800e0c6:	7843      	ldrb	r3, [r0, #1]
 800e0c8:	f013 0308 	ands.w	r3, r3, #8
 800e0cc:	d132      	bne.n	800e134 <_strtol_l.isra.0+0x8a>
 800e0ce:	2c2d      	cmp	r4, #45	; 0x2d
 800e0d0:	d132      	bne.n	800e138 <_strtol_l.isra.0+0x8e>
 800e0d2:	787c      	ldrb	r4, [r7, #1]
 800e0d4:	1cbd      	adds	r5, r7, #2
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	d05d      	beq.n	800e198 <_strtol_l.isra.0+0xee>
 800e0dc:	2e10      	cmp	r6, #16
 800e0de:	d109      	bne.n	800e0f4 <_strtol_l.isra.0+0x4a>
 800e0e0:	2c30      	cmp	r4, #48	; 0x30
 800e0e2:	d107      	bne.n	800e0f4 <_strtol_l.isra.0+0x4a>
 800e0e4:	782b      	ldrb	r3, [r5, #0]
 800e0e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0ea:	2b58      	cmp	r3, #88	; 0x58
 800e0ec:	d14f      	bne.n	800e18e <_strtol_l.isra.0+0xe4>
 800e0ee:	786c      	ldrb	r4, [r5, #1]
 800e0f0:	2610      	movs	r6, #16
 800e0f2:	3502      	adds	r5, #2
 800e0f4:	2a00      	cmp	r2, #0
 800e0f6:	bf14      	ite	ne
 800e0f8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e0fc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e100:	2700      	movs	r7, #0
 800e102:	fbb1 fcf6 	udiv	ip, r1, r6
 800e106:	4638      	mov	r0, r7
 800e108:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e10c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e110:	2b09      	cmp	r3, #9
 800e112:	d817      	bhi.n	800e144 <_strtol_l.isra.0+0x9a>
 800e114:	461c      	mov	r4, r3
 800e116:	42a6      	cmp	r6, r4
 800e118:	dd23      	ble.n	800e162 <_strtol_l.isra.0+0xb8>
 800e11a:	1c7b      	adds	r3, r7, #1
 800e11c:	d007      	beq.n	800e12e <_strtol_l.isra.0+0x84>
 800e11e:	4584      	cmp	ip, r0
 800e120:	d31c      	bcc.n	800e15c <_strtol_l.isra.0+0xb2>
 800e122:	d101      	bne.n	800e128 <_strtol_l.isra.0+0x7e>
 800e124:	45a6      	cmp	lr, r4
 800e126:	db19      	blt.n	800e15c <_strtol_l.isra.0+0xb2>
 800e128:	fb00 4006 	mla	r0, r0, r6, r4
 800e12c:	2701      	movs	r7, #1
 800e12e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e132:	e7eb      	b.n	800e10c <_strtol_l.isra.0+0x62>
 800e134:	462f      	mov	r7, r5
 800e136:	e7bf      	b.n	800e0b8 <_strtol_l.isra.0+0xe>
 800e138:	2c2b      	cmp	r4, #43	; 0x2b
 800e13a:	bf04      	itt	eq
 800e13c:	1cbd      	addeq	r5, r7, #2
 800e13e:	787c      	ldrbeq	r4, [r7, #1]
 800e140:	461a      	mov	r2, r3
 800e142:	e7c9      	b.n	800e0d8 <_strtol_l.isra.0+0x2e>
 800e144:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e148:	2b19      	cmp	r3, #25
 800e14a:	d801      	bhi.n	800e150 <_strtol_l.isra.0+0xa6>
 800e14c:	3c37      	subs	r4, #55	; 0x37
 800e14e:	e7e2      	b.n	800e116 <_strtol_l.isra.0+0x6c>
 800e150:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e154:	2b19      	cmp	r3, #25
 800e156:	d804      	bhi.n	800e162 <_strtol_l.isra.0+0xb8>
 800e158:	3c57      	subs	r4, #87	; 0x57
 800e15a:	e7dc      	b.n	800e116 <_strtol_l.isra.0+0x6c>
 800e15c:	f04f 37ff 	mov.w	r7, #4294967295
 800e160:	e7e5      	b.n	800e12e <_strtol_l.isra.0+0x84>
 800e162:	1c7b      	adds	r3, r7, #1
 800e164:	d108      	bne.n	800e178 <_strtol_l.isra.0+0xce>
 800e166:	2322      	movs	r3, #34	; 0x22
 800e168:	f8c8 3000 	str.w	r3, [r8]
 800e16c:	4608      	mov	r0, r1
 800e16e:	f1ba 0f00 	cmp.w	sl, #0
 800e172:	d107      	bne.n	800e184 <_strtol_l.isra.0+0xda>
 800e174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e178:	b102      	cbz	r2, 800e17c <_strtol_l.isra.0+0xd2>
 800e17a:	4240      	negs	r0, r0
 800e17c:	f1ba 0f00 	cmp.w	sl, #0
 800e180:	d0f8      	beq.n	800e174 <_strtol_l.isra.0+0xca>
 800e182:	b10f      	cbz	r7, 800e188 <_strtol_l.isra.0+0xde>
 800e184:	f105 39ff 	add.w	r9, r5, #4294967295
 800e188:	f8ca 9000 	str.w	r9, [sl]
 800e18c:	e7f2      	b.n	800e174 <_strtol_l.isra.0+0xca>
 800e18e:	2430      	movs	r4, #48	; 0x30
 800e190:	2e00      	cmp	r6, #0
 800e192:	d1af      	bne.n	800e0f4 <_strtol_l.isra.0+0x4a>
 800e194:	2608      	movs	r6, #8
 800e196:	e7ad      	b.n	800e0f4 <_strtol_l.isra.0+0x4a>
 800e198:	2c30      	cmp	r4, #48	; 0x30
 800e19a:	d0a3      	beq.n	800e0e4 <_strtol_l.isra.0+0x3a>
 800e19c:	260a      	movs	r6, #10
 800e19e:	e7a9      	b.n	800e0f4 <_strtol_l.isra.0+0x4a>

0800e1a0 <strtol>:
 800e1a0:	4b08      	ldr	r3, [pc, #32]	; (800e1c4 <strtol+0x24>)
 800e1a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1a4:	681c      	ldr	r4, [r3, #0]
 800e1a6:	4d08      	ldr	r5, [pc, #32]	; (800e1c8 <strtol+0x28>)
 800e1a8:	6a23      	ldr	r3, [r4, #32]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	bf08      	it	eq
 800e1ae:	462b      	moveq	r3, r5
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	460a      	mov	r2, r1
 800e1b6:	4601      	mov	r1, r0
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f7ff ff76 	bl	800e0aa <_strtol_l.isra.0>
 800e1be:	b003      	add	sp, #12
 800e1c0:	bd30      	pop	{r4, r5, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20000068 	.word	0x20000068
 800e1c8:	200000cc 	.word	0x200000cc

0800e1cc <quorem>:
 800e1cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	6903      	ldr	r3, [r0, #16]
 800e1d2:	690c      	ldr	r4, [r1, #16]
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	f2c0 8082 	blt.w	800e2e0 <quorem+0x114>
 800e1dc:	3c01      	subs	r4, #1
 800e1de:	f101 0714 	add.w	r7, r1, #20
 800e1e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e1e6:	f100 0614 	add.w	r6, r0, #20
 800e1ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e1ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e1f2:	eb06 030c 	add.w	r3, r6, ip
 800e1f6:	3501      	adds	r5, #1
 800e1f8:	eb07 090c 	add.w	r9, r7, ip
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800e202:	b395      	cbz	r5, 800e26a <quorem+0x9e>
 800e204:	f04f 0a00 	mov.w	sl, #0
 800e208:	4638      	mov	r0, r7
 800e20a:	46b6      	mov	lr, r6
 800e20c:	46d3      	mov	fp, sl
 800e20e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e212:	b293      	uxth	r3, r2
 800e214:	fb05 a303 	mla	r3, r5, r3, sl
 800e218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	ebab 0303 	sub.w	r3, fp, r3
 800e222:	0c12      	lsrs	r2, r2, #16
 800e224:	f8de b000 	ldr.w	fp, [lr]
 800e228:	fb05 a202 	mla	r2, r5, r2, sl
 800e22c:	fa13 f38b 	uxtah	r3, r3, fp
 800e230:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e234:	fa1f fb82 	uxth.w	fp, r2
 800e238:	f8de 2000 	ldr.w	r2, [lr]
 800e23c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e240:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e244:	b29b      	uxth	r3, r3
 800e246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e24a:	4581      	cmp	r9, r0
 800e24c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e250:	f84e 3b04 	str.w	r3, [lr], #4
 800e254:	d2db      	bcs.n	800e20e <quorem+0x42>
 800e256:	f856 300c 	ldr.w	r3, [r6, ip]
 800e25a:	b933      	cbnz	r3, 800e26a <quorem+0x9e>
 800e25c:	9b01      	ldr	r3, [sp, #4]
 800e25e:	3b04      	subs	r3, #4
 800e260:	429e      	cmp	r6, r3
 800e262:	461a      	mov	r2, r3
 800e264:	d330      	bcc.n	800e2c8 <quorem+0xfc>
 800e266:	f8c8 4010 	str.w	r4, [r8, #16]
 800e26a:	4640      	mov	r0, r8
 800e26c:	f001 f840 	bl	800f2f0 <__mcmp>
 800e270:	2800      	cmp	r0, #0
 800e272:	db25      	blt.n	800e2c0 <quorem+0xf4>
 800e274:	3501      	adds	r5, #1
 800e276:	4630      	mov	r0, r6
 800e278:	f04f 0c00 	mov.w	ip, #0
 800e27c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e280:	f8d0 e000 	ldr.w	lr, [r0]
 800e284:	b293      	uxth	r3, r2
 800e286:	ebac 0303 	sub.w	r3, ip, r3
 800e28a:	0c12      	lsrs	r2, r2, #16
 800e28c:	fa13 f38e 	uxtah	r3, r3, lr
 800e290:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e298:	b29b      	uxth	r3, r3
 800e29a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e29e:	45b9      	cmp	r9, r7
 800e2a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e2a4:	f840 3b04 	str.w	r3, [r0], #4
 800e2a8:	d2e8      	bcs.n	800e27c <quorem+0xb0>
 800e2aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e2ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e2b2:	b92a      	cbnz	r2, 800e2c0 <quorem+0xf4>
 800e2b4:	3b04      	subs	r3, #4
 800e2b6:	429e      	cmp	r6, r3
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	d30b      	bcc.n	800e2d4 <quorem+0x108>
 800e2bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	b003      	add	sp, #12
 800e2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	6812      	ldr	r2, [r2, #0]
 800e2ca:	3b04      	subs	r3, #4
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d1ca      	bne.n	800e266 <quorem+0x9a>
 800e2d0:	3c01      	subs	r4, #1
 800e2d2:	e7c5      	b.n	800e260 <quorem+0x94>
 800e2d4:	6812      	ldr	r2, [r2, #0]
 800e2d6:	3b04      	subs	r3, #4
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	d1ef      	bne.n	800e2bc <quorem+0xf0>
 800e2dc:	3c01      	subs	r4, #1
 800e2de:	e7ea      	b.n	800e2b6 <quorem+0xea>
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	e7ee      	b.n	800e2c2 <quorem+0xf6>
 800e2e4:	0000      	movs	r0, r0
	...

0800e2e8 <_dtoa_r>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	ec57 6b10 	vmov	r6, r7, d0
 800e2f0:	b097      	sub	sp, #92	; 0x5c
 800e2f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e2f4:	9106      	str	r1, [sp, #24]
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2fa:	9312      	str	r3, [sp, #72]	; 0x48
 800e2fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e300:	e9cd 6700 	strd	r6, r7, [sp]
 800e304:	b93d      	cbnz	r5, 800e316 <_dtoa_r+0x2e>
 800e306:	2010      	movs	r0, #16
 800e308:	f000 fdb8 	bl	800ee7c <malloc>
 800e30c:	6260      	str	r0, [r4, #36]	; 0x24
 800e30e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e312:	6005      	str	r5, [r0, #0]
 800e314:	60c5      	str	r5, [r0, #12]
 800e316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e318:	6819      	ldr	r1, [r3, #0]
 800e31a:	b151      	cbz	r1, 800e332 <_dtoa_r+0x4a>
 800e31c:	685a      	ldr	r2, [r3, #4]
 800e31e:	604a      	str	r2, [r1, #4]
 800e320:	2301      	movs	r3, #1
 800e322:	4093      	lsls	r3, r2
 800e324:	608b      	str	r3, [r1, #8]
 800e326:	4620      	mov	r0, r4
 800e328:	f000 fe01 	bl	800ef2e <_Bfree>
 800e32c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e32e:	2200      	movs	r2, #0
 800e330:	601a      	str	r2, [r3, #0]
 800e332:	1e3b      	subs	r3, r7, #0
 800e334:	bfbb      	ittet	lt
 800e336:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e33a:	9301      	strlt	r3, [sp, #4]
 800e33c:	2300      	movge	r3, #0
 800e33e:	2201      	movlt	r2, #1
 800e340:	bfac      	ite	ge
 800e342:	f8c8 3000 	strge.w	r3, [r8]
 800e346:	f8c8 2000 	strlt.w	r2, [r8]
 800e34a:	4baf      	ldr	r3, [pc, #700]	; (800e608 <_dtoa_r+0x320>)
 800e34c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e350:	ea33 0308 	bics.w	r3, r3, r8
 800e354:	d114      	bne.n	800e380 <_dtoa_r+0x98>
 800e356:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e358:	f242 730f 	movw	r3, #9999	; 0x270f
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	9b00      	ldr	r3, [sp, #0]
 800e360:	b923      	cbnz	r3, 800e36c <_dtoa_r+0x84>
 800e362:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e366:	2800      	cmp	r0, #0
 800e368:	f000 8542 	beq.w	800edf0 <_dtoa_r+0xb08>
 800e36c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e36e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e61c <_dtoa_r+0x334>
 800e372:	2b00      	cmp	r3, #0
 800e374:	f000 8544 	beq.w	800ee00 <_dtoa_r+0xb18>
 800e378:	f10b 0303 	add.w	r3, fp, #3
 800e37c:	f000 bd3e 	b.w	800edfc <_dtoa_r+0xb14>
 800e380:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e384:	2200      	movs	r2, #0
 800e386:	2300      	movs	r3, #0
 800e388:	4630      	mov	r0, r6
 800e38a:	4639      	mov	r1, r7
 800e38c:	f7f2 fbac 	bl	8000ae8 <__aeabi_dcmpeq>
 800e390:	4681      	mov	r9, r0
 800e392:	b168      	cbz	r0, 800e3b0 <_dtoa_r+0xc8>
 800e394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e396:	2301      	movs	r3, #1
 800e398:	6013      	str	r3, [r2, #0]
 800e39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 8524 	beq.w	800edea <_dtoa_r+0xb02>
 800e3a2:	4b9a      	ldr	r3, [pc, #616]	; (800e60c <_dtoa_r+0x324>)
 800e3a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800e3aa:	6013      	str	r3, [r2, #0]
 800e3ac:	f000 bd28 	b.w	800ee00 <_dtoa_r+0xb18>
 800e3b0:	aa14      	add	r2, sp, #80	; 0x50
 800e3b2:	a915      	add	r1, sp, #84	; 0x54
 800e3b4:	ec47 6b10 	vmov	d0, r6, r7
 800e3b8:	4620      	mov	r0, r4
 800e3ba:	f001 f810 	bl	800f3de <__d2b>
 800e3be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3c2:	9004      	str	r0, [sp, #16]
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	d07c      	beq.n	800e4c2 <_dtoa_r+0x1da>
 800e3c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e3d0:	46b2      	mov	sl, r6
 800e3d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e3de:	2200      	movs	r2, #0
 800e3e0:	4b8b      	ldr	r3, [pc, #556]	; (800e610 <_dtoa_r+0x328>)
 800e3e2:	4650      	mov	r0, sl
 800e3e4:	4659      	mov	r1, fp
 800e3e6:	f7f1 ff5f 	bl	80002a8 <__aeabi_dsub>
 800e3ea:	a381      	add	r3, pc, #516	; (adr r3, 800e5f0 <_dtoa_r+0x308>)
 800e3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f0:	f7f2 f912 	bl	8000618 <__aeabi_dmul>
 800e3f4:	a380      	add	r3, pc, #512	; (adr r3, 800e5f8 <_dtoa_r+0x310>)
 800e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fa:	f7f1 ff57 	bl	80002ac <__adddf3>
 800e3fe:	4606      	mov	r6, r0
 800e400:	4628      	mov	r0, r5
 800e402:	460f      	mov	r7, r1
 800e404:	f7f2 f89e 	bl	8000544 <__aeabi_i2d>
 800e408:	a37d      	add	r3, pc, #500	; (adr r3, 800e600 <_dtoa_r+0x318>)
 800e40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40e:	f7f2 f903 	bl	8000618 <__aeabi_dmul>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4630      	mov	r0, r6
 800e418:	4639      	mov	r1, r7
 800e41a:	f7f1 ff47 	bl	80002ac <__adddf3>
 800e41e:	4606      	mov	r6, r0
 800e420:	460f      	mov	r7, r1
 800e422:	f7f2 fba9 	bl	8000b78 <__aeabi_d2iz>
 800e426:	2200      	movs	r2, #0
 800e428:	4682      	mov	sl, r0
 800e42a:	2300      	movs	r3, #0
 800e42c:	4630      	mov	r0, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f2 fb64 	bl	8000afc <__aeabi_dcmplt>
 800e434:	b148      	cbz	r0, 800e44a <_dtoa_r+0x162>
 800e436:	4650      	mov	r0, sl
 800e438:	f7f2 f884 	bl	8000544 <__aeabi_i2d>
 800e43c:	4632      	mov	r2, r6
 800e43e:	463b      	mov	r3, r7
 800e440:	f7f2 fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 800e444:	b908      	cbnz	r0, 800e44a <_dtoa_r+0x162>
 800e446:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e44a:	f1ba 0f16 	cmp.w	sl, #22
 800e44e:	d859      	bhi.n	800e504 <_dtoa_r+0x21c>
 800e450:	4970      	ldr	r1, [pc, #448]	; (800e614 <_dtoa_r+0x32c>)
 800e452:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e45e:	f7f2 fb6b 	bl	8000b38 <__aeabi_dcmpgt>
 800e462:	2800      	cmp	r0, #0
 800e464:	d050      	beq.n	800e508 <_dtoa_r+0x220>
 800e466:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e46a:	2300      	movs	r3, #0
 800e46c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e46e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e470:	1b5d      	subs	r5, r3, r5
 800e472:	f1b5 0801 	subs.w	r8, r5, #1
 800e476:	bf49      	itett	mi
 800e478:	f1c5 0301 	rsbmi	r3, r5, #1
 800e47c:	2300      	movpl	r3, #0
 800e47e:	9305      	strmi	r3, [sp, #20]
 800e480:	f04f 0800 	movmi.w	r8, #0
 800e484:	bf58      	it	pl
 800e486:	9305      	strpl	r3, [sp, #20]
 800e488:	f1ba 0f00 	cmp.w	sl, #0
 800e48c:	db3e      	blt.n	800e50c <_dtoa_r+0x224>
 800e48e:	2300      	movs	r3, #0
 800e490:	44d0      	add	r8, sl
 800e492:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	9b06      	ldr	r3, [sp, #24]
 800e49a:	2b09      	cmp	r3, #9
 800e49c:	f200 8090 	bhi.w	800e5c0 <_dtoa_r+0x2d8>
 800e4a0:	2b05      	cmp	r3, #5
 800e4a2:	bfc4      	itt	gt
 800e4a4:	3b04      	subgt	r3, #4
 800e4a6:	9306      	strgt	r3, [sp, #24]
 800e4a8:	9b06      	ldr	r3, [sp, #24]
 800e4aa:	f1a3 0302 	sub.w	r3, r3, #2
 800e4ae:	bfcc      	ite	gt
 800e4b0:	2500      	movgt	r5, #0
 800e4b2:	2501      	movle	r5, #1
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	f200 808f 	bhi.w	800e5d8 <_dtoa_r+0x2f0>
 800e4ba:	e8df f003 	tbb	[pc, r3]
 800e4be:	7f7d      	.short	0x7f7d
 800e4c0:	7131      	.short	0x7131
 800e4c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e4c6:	441d      	add	r5, r3
 800e4c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e4cc:	2820      	cmp	r0, #32
 800e4ce:	dd13      	ble.n	800e4f8 <_dtoa_r+0x210>
 800e4d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e4d4:	9b00      	ldr	r3, [sp, #0]
 800e4d6:	fa08 f800 	lsl.w	r8, r8, r0
 800e4da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e4de:	fa23 f000 	lsr.w	r0, r3, r0
 800e4e2:	ea48 0000 	orr.w	r0, r8, r0
 800e4e6:	f7f2 f81d 	bl	8000524 <__aeabi_ui2d>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e4f2:	3d01      	subs	r5, #1
 800e4f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e4f6:	e772      	b.n	800e3de <_dtoa_r+0xf6>
 800e4f8:	9b00      	ldr	r3, [sp, #0]
 800e4fa:	f1c0 0020 	rsb	r0, r0, #32
 800e4fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e502:	e7f0      	b.n	800e4e6 <_dtoa_r+0x1fe>
 800e504:	2301      	movs	r3, #1
 800e506:	e7b1      	b.n	800e46c <_dtoa_r+0x184>
 800e508:	900f      	str	r0, [sp, #60]	; 0x3c
 800e50a:	e7b0      	b.n	800e46e <_dtoa_r+0x186>
 800e50c:	9b05      	ldr	r3, [sp, #20]
 800e50e:	eba3 030a 	sub.w	r3, r3, sl
 800e512:	9305      	str	r3, [sp, #20]
 800e514:	f1ca 0300 	rsb	r3, sl, #0
 800e518:	9307      	str	r3, [sp, #28]
 800e51a:	2300      	movs	r3, #0
 800e51c:	930e      	str	r3, [sp, #56]	; 0x38
 800e51e:	e7bb      	b.n	800e498 <_dtoa_r+0x1b0>
 800e520:	2301      	movs	r3, #1
 800e522:	930a      	str	r3, [sp, #40]	; 0x28
 800e524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e526:	2b00      	cmp	r3, #0
 800e528:	dd59      	ble.n	800e5de <_dtoa_r+0x2f6>
 800e52a:	9302      	str	r3, [sp, #8]
 800e52c:	4699      	mov	r9, r3
 800e52e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e530:	2200      	movs	r2, #0
 800e532:	6072      	str	r2, [r6, #4]
 800e534:	2204      	movs	r2, #4
 800e536:	f102 0014 	add.w	r0, r2, #20
 800e53a:	4298      	cmp	r0, r3
 800e53c:	6871      	ldr	r1, [r6, #4]
 800e53e:	d953      	bls.n	800e5e8 <_dtoa_r+0x300>
 800e540:	4620      	mov	r0, r4
 800e542:	f000 fcc0 	bl	800eec6 <_Balloc>
 800e546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e548:	6030      	str	r0, [r6, #0]
 800e54a:	f1b9 0f0e 	cmp.w	r9, #14
 800e54e:	f8d3 b000 	ldr.w	fp, [r3]
 800e552:	f200 80e6 	bhi.w	800e722 <_dtoa_r+0x43a>
 800e556:	2d00      	cmp	r5, #0
 800e558:	f000 80e3 	beq.w	800e722 <_dtoa_r+0x43a>
 800e55c:	ed9d 7b00 	vldr	d7, [sp]
 800e560:	f1ba 0f00 	cmp.w	sl, #0
 800e564:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e568:	dd74      	ble.n	800e654 <_dtoa_r+0x36c>
 800e56a:	4a2a      	ldr	r2, [pc, #168]	; (800e614 <_dtoa_r+0x32c>)
 800e56c:	f00a 030f 	and.w	r3, sl, #15
 800e570:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e574:	ed93 7b00 	vldr	d7, [r3]
 800e578:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e57c:	06f0      	lsls	r0, r6, #27
 800e57e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e582:	d565      	bpl.n	800e650 <_dtoa_r+0x368>
 800e584:	4b24      	ldr	r3, [pc, #144]	; (800e618 <_dtoa_r+0x330>)
 800e586:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e58a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e58e:	f7f2 f96d 	bl	800086c <__aeabi_ddiv>
 800e592:	e9cd 0100 	strd	r0, r1, [sp]
 800e596:	f006 060f 	and.w	r6, r6, #15
 800e59a:	2503      	movs	r5, #3
 800e59c:	4f1e      	ldr	r7, [pc, #120]	; (800e618 <_dtoa_r+0x330>)
 800e59e:	e04c      	b.n	800e63a <_dtoa_r+0x352>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e5a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5a6:	4453      	add	r3, sl
 800e5a8:	f103 0901 	add.w	r9, r3, #1
 800e5ac:	9302      	str	r3, [sp, #8]
 800e5ae:	464b      	mov	r3, r9
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	bfb8      	it	lt
 800e5b4:	2301      	movlt	r3, #1
 800e5b6:	e7ba      	b.n	800e52e <_dtoa_r+0x246>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e7b2      	b.n	800e522 <_dtoa_r+0x23a>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	e7f0      	b.n	800e5a2 <_dtoa_r+0x2ba>
 800e5c0:	2501      	movs	r5, #1
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	9306      	str	r3, [sp, #24]
 800e5c6:	950a      	str	r5, [sp, #40]	; 0x28
 800e5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5cc:	9302      	str	r3, [sp, #8]
 800e5ce:	4699      	mov	r9, r3
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	2312      	movs	r3, #18
 800e5d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e5d6:	e7aa      	b.n	800e52e <_dtoa_r+0x246>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	930a      	str	r3, [sp, #40]	; 0x28
 800e5dc:	e7f4      	b.n	800e5c8 <_dtoa_r+0x2e0>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	9302      	str	r3, [sp, #8]
 800e5e2:	4699      	mov	r9, r3
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	e7f5      	b.n	800e5d4 <_dtoa_r+0x2ec>
 800e5e8:	3101      	adds	r1, #1
 800e5ea:	6071      	str	r1, [r6, #4]
 800e5ec:	0052      	lsls	r2, r2, #1
 800e5ee:	e7a2      	b.n	800e536 <_dtoa_r+0x24e>
 800e5f0:	636f4361 	.word	0x636f4361
 800e5f4:	3fd287a7 	.word	0x3fd287a7
 800e5f8:	8b60c8b3 	.word	0x8b60c8b3
 800e5fc:	3fc68a28 	.word	0x3fc68a28
 800e600:	509f79fb 	.word	0x509f79fb
 800e604:	3fd34413 	.word	0x3fd34413
 800e608:	7ff00000 	.word	0x7ff00000
 800e60c:	0800ff85 	.word	0x0800ff85
 800e610:	3ff80000 	.word	0x3ff80000
 800e614:	0800ffe8 	.word	0x0800ffe8
 800e618:	0800ffc0 	.word	0x0800ffc0
 800e61c:	0800ffb1 	.word	0x0800ffb1
 800e620:	07f1      	lsls	r1, r6, #31
 800e622:	d508      	bpl.n	800e636 <_dtoa_r+0x34e>
 800e624:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e62c:	f7f1 fff4 	bl	8000618 <__aeabi_dmul>
 800e630:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e634:	3501      	adds	r5, #1
 800e636:	1076      	asrs	r6, r6, #1
 800e638:	3708      	adds	r7, #8
 800e63a:	2e00      	cmp	r6, #0
 800e63c:	d1f0      	bne.n	800e620 <_dtoa_r+0x338>
 800e63e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e646:	f7f2 f911 	bl	800086c <__aeabi_ddiv>
 800e64a:	e9cd 0100 	strd	r0, r1, [sp]
 800e64e:	e01a      	b.n	800e686 <_dtoa_r+0x39e>
 800e650:	2502      	movs	r5, #2
 800e652:	e7a3      	b.n	800e59c <_dtoa_r+0x2b4>
 800e654:	f000 80a0 	beq.w	800e798 <_dtoa_r+0x4b0>
 800e658:	f1ca 0600 	rsb	r6, sl, #0
 800e65c:	4b9f      	ldr	r3, [pc, #636]	; (800e8dc <_dtoa_r+0x5f4>)
 800e65e:	4fa0      	ldr	r7, [pc, #640]	; (800e8e0 <_dtoa_r+0x5f8>)
 800e660:	f006 020f 	and.w	r2, r6, #15
 800e664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e670:	f7f1 ffd2 	bl	8000618 <__aeabi_dmul>
 800e674:	e9cd 0100 	strd	r0, r1, [sp]
 800e678:	1136      	asrs	r6, r6, #4
 800e67a:	2300      	movs	r3, #0
 800e67c:	2502      	movs	r5, #2
 800e67e:	2e00      	cmp	r6, #0
 800e680:	d17f      	bne.n	800e782 <_dtoa_r+0x49a>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1e1      	bne.n	800e64a <_dtoa_r+0x362>
 800e686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 8087 	beq.w	800e79c <_dtoa_r+0x4b4>
 800e68e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e692:	2200      	movs	r2, #0
 800e694:	4b93      	ldr	r3, [pc, #588]	; (800e8e4 <_dtoa_r+0x5fc>)
 800e696:	4630      	mov	r0, r6
 800e698:	4639      	mov	r1, r7
 800e69a:	f7f2 fa2f 	bl	8000afc <__aeabi_dcmplt>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d07c      	beq.n	800e79c <_dtoa_r+0x4b4>
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	d079      	beq.n	800e79c <_dtoa_r+0x4b4>
 800e6a8:	9b02      	ldr	r3, [sp, #8]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	dd35      	ble.n	800e71a <_dtoa_r+0x432>
 800e6ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e6b2:	9308      	str	r3, [sp, #32]
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	4b8b      	ldr	r3, [pc, #556]	; (800e8e8 <_dtoa_r+0x600>)
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f7f1 ffac 	bl	8000618 <__aeabi_dmul>
 800e6c0:	e9cd 0100 	strd	r0, r1, [sp]
 800e6c4:	9f02      	ldr	r7, [sp, #8]
 800e6c6:	3501      	adds	r5, #1
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f7f1 ff3b 	bl	8000544 <__aeabi_i2d>
 800e6ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6d2:	f7f1 ffa1 	bl	8000618 <__aeabi_dmul>
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	4b84      	ldr	r3, [pc, #528]	; (800e8ec <_dtoa_r+0x604>)
 800e6da:	f7f1 fde7 	bl	80002ac <__adddf3>
 800e6de:	4605      	mov	r5, r0
 800e6e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e6e4:	2f00      	cmp	r7, #0
 800e6e6:	d15d      	bne.n	800e7a4 <_dtoa_r+0x4bc>
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	4b81      	ldr	r3, [pc, #516]	; (800e8f0 <_dtoa_r+0x608>)
 800e6ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6f0:	f7f1 fdda 	bl	80002a8 <__aeabi_dsub>
 800e6f4:	462a      	mov	r2, r5
 800e6f6:	4633      	mov	r3, r6
 800e6f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e6fc:	f7f2 fa1c 	bl	8000b38 <__aeabi_dcmpgt>
 800e700:	2800      	cmp	r0, #0
 800e702:	f040 8288 	bne.w	800ec16 <_dtoa_r+0x92e>
 800e706:	462a      	mov	r2, r5
 800e708:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e710:	f7f2 f9f4 	bl	8000afc <__aeabi_dcmplt>
 800e714:	2800      	cmp	r0, #0
 800e716:	f040 827c 	bne.w	800ec12 <_dtoa_r+0x92a>
 800e71a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e71e:	e9cd 2300 	strd	r2, r3, [sp]
 800e722:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e724:	2b00      	cmp	r3, #0
 800e726:	f2c0 8150 	blt.w	800e9ca <_dtoa_r+0x6e2>
 800e72a:	f1ba 0f0e 	cmp.w	sl, #14
 800e72e:	f300 814c 	bgt.w	800e9ca <_dtoa_r+0x6e2>
 800e732:	4b6a      	ldr	r3, [pc, #424]	; (800e8dc <_dtoa_r+0x5f4>)
 800e734:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e738:	ed93 7b00 	vldr	d7, [r3]
 800e73c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e73e:	2b00      	cmp	r3, #0
 800e740:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e744:	f280 80d8 	bge.w	800e8f8 <_dtoa_r+0x610>
 800e748:	f1b9 0f00 	cmp.w	r9, #0
 800e74c:	f300 80d4 	bgt.w	800e8f8 <_dtoa_r+0x610>
 800e750:	f040 825e 	bne.w	800ec10 <_dtoa_r+0x928>
 800e754:	2200      	movs	r2, #0
 800e756:	4b66      	ldr	r3, [pc, #408]	; (800e8f0 <_dtoa_r+0x608>)
 800e758:	ec51 0b17 	vmov	r0, r1, d7
 800e75c:	f7f1 ff5c 	bl	8000618 <__aeabi_dmul>
 800e760:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e764:	f7f2 f9de 	bl	8000b24 <__aeabi_dcmpge>
 800e768:	464f      	mov	r7, r9
 800e76a:	464e      	mov	r6, r9
 800e76c:	2800      	cmp	r0, #0
 800e76e:	f040 8234 	bne.w	800ebda <_dtoa_r+0x8f2>
 800e772:	2331      	movs	r3, #49	; 0x31
 800e774:	f10b 0501 	add.w	r5, fp, #1
 800e778:	f88b 3000 	strb.w	r3, [fp]
 800e77c:	f10a 0a01 	add.w	sl, sl, #1
 800e780:	e22f      	b.n	800ebe2 <_dtoa_r+0x8fa>
 800e782:	07f2      	lsls	r2, r6, #31
 800e784:	d505      	bpl.n	800e792 <_dtoa_r+0x4aa>
 800e786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e78a:	f7f1 ff45 	bl	8000618 <__aeabi_dmul>
 800e78e:	3501      	adds	r5, #1
 800e790:	2301      	movs	r3, #1
 800e792:	1076      	asrs	r6, r6, #1
 800e794:	3708      	adds	r7, #8
 800e796:	e772      	b.n	800e67e <_dtoa_r+0x396>
 800e798:	2502      	movs	r5, #2
 800e79a:	e774      	b.n	800e686 <_dtoa_r+0x39e>
 800e79c:	f8cd a020 	str.w	sl, [sp, #32]
 800e7a0:	464f      	mov	r7, r9
 800e7a2:	e791      	b.n	800e6c8 <_dtoa_r+0x3e0>
 800e7a4:	4b4d      	ldr	r3, [pc, #308]	; (800e8dc <_dtoa_r+0x5f4>)
 800e7a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d047      	beq.n	800e844 <_dtoa_r+0x55c>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	494e      	ldr	r1, [pc, #312]	; (800e8f4 <_dtoa_r+0x60c>)
 800e7bc:	f7f2 f856 	bl	800086c <__aeabi_ddiv>
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4633      	mov	r3, r6
 800e7c4:	f7f1 fd70 	bl	80002a8 <__aeabi_dsub>
 800e7c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e7cc:	465d      	mov	r5, fp
 800e7ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7d2:	f7f2 f9d1 	bl	8000b78 <__aeabi_d2iz>
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	f7f1 feb4 	bl	8000544 <__aeabi_i2d>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7e4:	f7f1 fd60 	bl	80002a8 <__aeabi_dsub>
 800e7e8:	3630      	adds	r6, #48	; 0x30
 800e7ea:	f805 6b01 	strb.w	r6, [r5], #1
 800e7ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e7f2:	e9cd 0100 	strd	r0, r1, [sp]
 800e7f6:	f7f2 f981 	bl	8000afc <__aeabi_dcmplt>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d163      	bne.n	800e8c6 <_dtoa_r+0x5de>
 800e7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e802:	2000      	movs	r0, #0
 800e804:	4937      	ldr	r1, [pc, #220]	; (800e8e4 <_dtoa_r+0x5fc>)
 800e806:	f7f1 fd4f 	bl	80002a8 <__aeabi_dsub>
 800e80a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e80e:	f7f2 f975 	bl	8000afc <__aeabi_dcmplt>
 800e812:	2800      	cmp	r0, #0
 800e814:	f040 80b7 	bne.w	800e986 <_dtoa_r+0x69e>
 800e818:	eba5 030b 	sub.w	r3, r5, fp
 800e81c:	429f      	cmp	r7, r3
 800e81e:	f77f af7c 	ble.w	800e71a <_dtoa_r+0x432>
 800e822:	2200      	movs	r2, #0
 800e824:	4b30      	ldr	r3, [pc, #192]	; (800e8e8 <_dtoa_r+0x600>)
 800e826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e82a:	f7f1 fef5 	bl	8000618 <__aeabi_dmul>
 800e82e:	2200      	movs	r2, #0
 800e830:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e834:	4b2c      	ldr	r3, [pc, #176]	; (800e8e8 <_dtoa_r+0x600>)
 800e836:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e83a:	f7f1 feed 	bl	8000618 <__aeabi_dmul>
 800e83e:	e9cd 0100 	strd	r0, r1, [sp]
 800e842:	e7c4      	b.n	800e7ce <_dtoa_r+0x4e6>
 800e844:	462a      	mov	r2, r5
 800e846:	4633      	mov	r3, r6
 800e848:	f7f1 fee6 	bl	8000618 <__aeabi_dmul>
 800e84c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e850:	eb0b 0507 	add.w	r5, fp, r7
 800e854:	465e      	mov	r6, fp
 800e856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e85a:	f7f2 f98d 	bl	8000b78 <__aeabi_d2iz>
 800e85e:	4607      	mov	r7, r0
 800e860:	f7f1 fe70 	bl	8000544 <__aeabi_i2d>
 800e864:	3730      	adds	r7, #48	; 0x30
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e86e:	f7f1 fd1b 	bl	80002a8 <__aeabi_dsub>
 800e872:	f806 7b01 	strb.w	r7, [r6], #1
 800e876:	42ae      	cmp	r6, r5
 800e878:	e9cd 0100 	strd	r0, r1, [sp]
 800e87c:	f04f 0200 	mov.w	r2, #0
 800e880:	d126      	bne.n	800e8d0 <_dtoa_r+0x5e8>
 800e882:	4b1c      	ldr	r3, [pc, #112]	; (800e8f4 <_dtoa_r+0x60c>)
 800e884:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e888:	f7f1 fd10 	bl	80002ac <__adddf3>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e894:	f7f2 f950 	bl	8000b38 <__aeabi_dcmpgt>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d174      	bne.n	800e986 <_dtoa_r+0x69e>
 800e89c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	4914      	ldr	r1, [pc, #80]	; (800e8f4 <_dtoa_r+0x60c>)
 800e8a4:	f7f1 fd00 	bl	80002a8 <__aeabi_dsub>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b0:	f7f2 f924 	bl	8000afc <__aeabi_dcmplt>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	f43f af30 	beq.w	800e71a <_dtoa_r+0x432>
 800e8ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8be:	2b30      	cmp	r3, #48	; 0x30
 800e8c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8c4:	d002      	beq.n	800e8cc <_dtoa_r+0x5e4>
 800e8c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e8ca:	e04a      	b.n	800e962 <_dtoa_r+0x67a>
 800e8cc:	4615      	mov	r5, r2
 800e8ce:	e7f4      	b.n	800e8ba <_dtoa_r+0x5d2>
 800e8d0:	4b05      	ldr	r3, [pc, #20]	; (800e8e8 <_dtoa_r+0x600>)
 800e8d2:	f7f1 fea1 	bl	8000618 <__aeabi_dmul>
 800e8d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e8da:	e7bc      	b.n	800e856 <_dtoa_r+0x56e>
 800e8dc:	0800ffe8 	.word	0x0800ffe8
 800e8e0:	0800ffc0 	.word	0x0800ffc0
 800e8e4:	3ff00000 	.word	0x3ff00000
 800e8e8:	40240000 	.word	0x40240000
 800e8ec:	401c0000 	.word	0x401c0000
 800e8f0:	40140000 	.word	0x40140000
 800e8f4:	3fe00000 	.word	0x3fe00000
 800e8f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e8fc:	465d      	mov	r5, fp
 800e8fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e902:	4630      	mov	r0, r6
 800e904:	4639      	mov	r1, r7
 800e906:	f7f1 ffb1 	bl	800086c <__aeabi_ddiv>
 800e90a:	f7f2 f935 	bl	8000b78 <__aeabi_d2iz>
 800e90e:	4680      	mov	r8, r0
 800e910:	f7f1 fe18 	bl	8000544 <__aeabi_i2d>
 800e914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e918:	f7f1 fe7e 	bl	8000618 <__aeabi_dmul>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	4630      	mov	r0, r6
 800e922:	4639      	mov	r1, r7
 800e924:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e928:	f7f1 fcbe 	bl	80002a8 <__aeabi_dsub>
 800e92c:	f805 6b01 	strb.w	r6, [r5], #1
 800e930:	eba5 060b 	sub.w	r6, r5, fp
 800e934:	45b1      	cmp	r9, r6
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	d139      	bne.n	800e9b0 <_dtoa_r+0x6c8>
 800e93c:	f7f1 fcb6 	bl	80002ac <__adddf3>
 800e940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e944:	4606      	mov	r6, r0
 800e946:	460f      	mov	r7, r1
 800e948:	f7f2 f8f6 	bl	8000b38 <__aeabi_dcmpgt>
 800e94c:	b9c8      	cbnz	r0, 800e982 <_dtoa_r+0x69a>
 800e94e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e952:	4630      	mov	r0, r6
 800e954:	4639      	mov	r1, r7
 800e956:	f7f2 f8c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800e95a:	b110      	cbz	r0, 800e962 <_dtoa_r+0x67a>
 800e95c:	f018 0f01 	tst.w	r8, #1
 800e960:	d10f      	bne.n	800e982 <_dtoa_r+0x69a>
 800e962:	9904      	ldr	r1, [sp, #16]
 800e964:	4620      	mov	r0, r4
 800e966:	f000 fae2 	bl	800ef2e <_Bfree>
 800e96a:	2300      	movs	r3, #0
 800e96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e96e:	702b      	strb	r3, [r5, #0]
 800e970:	f10a 0301 	add.w	r3, sl, #1
 800e974:	6013      	str	r3, [r2, #0]
 800e976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 8241 	beq.w	800ee00 <_dtoa_r+0xb18>
 800e97e:	601d      	str	r5, [r3, #0]
 800e980:	e23e      	b.n	800ee00 <_dtoa_r+0xb18>
 800e982:	f8cd a020 	str.w	sl, [sp, #32]
 800e986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e98a:	2a39      	cmp	r2, #57	; 0x39
 800e98c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e990:	d108      	bne.n	800e9a4 <_dtoa_r+0x6bc>
 800e992:	459b      	cmp	fp, r3
 800e994:	d10a      	bne.n	800e9ac <_dtoa_r+0x6c4>
 800e996:	9b08      	ldr	r3, [sp, #32]
 800e998:	3301      	adds	r3, #1
 800e99a:	9308      	str	r3, [sp, #32]
 800e99c:	2330      	movs	r3, #48	; 0x30
 800e99e:	f88b 3000 	strb.w	r3, [fp]
 800e9a2:	465b      	mov	r3, fp
 800e9a4:	781a      	ldrb	r2, [r3, #0]
 800e9a6:	3201      	adds	r2, #1
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	e78c      	b.n	800e8c6 <_dtoa_r+0x5de>
 800e9ac:	461d      	mov	r5, r3
 800e9ae:	e7ea      	b.n	800e986 <_dtoa_r+0x69e>
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	4b9b      	ldr	r3, [pc, #620]	; (800ec20 <_dtoa_r+0x938>)
 800e9b4:	f7f1 fe30 	bl	8000618 <__aeabi_dmul>
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	4606      	mov	r6, r0
 800e9be:	460f      	mov	r7, r1
 800e9c0:	f7f2 f892 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d09a      	beq.n	800e8fe <_dtoa_r+0x616>
 800e9c8:	e7cb      	b.n	800e962 <_dtoa_r+0x67a>
 800e9ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	f000 808b 	beq.w	800eae8 <_dtoa_r+0x800>
 800e9d2:	9a06      	ldr	r2, [sp, #24]
 800e9d4:	2a01      	cmp	r2, #1
 800e9d6:	dc6e      	bgt.n	800eab6 <_dtoa_r+0x7ce>
 800e9d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e9da:	2a00      	cmp	r2, #0
 800e9dc:	d067      	beq.n	800eaae <_dtoa_r+0x7c6>
 800e9de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e9e2:	9f07      	ldr	r7, [sp, #28]
 800e9e4:	9d05      	ldr	r5, [sp, #20]
 800e9e6:	9a05      	ldr	r2, [sp, #20]
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	441a      	add	r2, r3
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	9205      	str	r2, [sp, #20]
 800e9f0:	4498      	add	r8, r3
 800e9f2:	f000 fb3c 	bl	800f06e <__i2b>
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	2d00      	cmp	r5, #0
 800e9fa:	dd0c      	ble.n	800ea16 <_dtoa_r+0x72e>
 800e9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ea00:	dd09      	ble.n	800ea16 <_dtoa_r+0x72e>
 800ea02:	4545      	cmp	r5, r8
 800ea04:	9a05      	ldr	r2, [sp, #20]
 800ea06:	462b      	mov	r3, r5
 800ea08:	bfa8      	it	ge
 800ea0a:	4643      	movge	r3, r8
 800ea0c:	1ad2      	subs	r2, r2, r3
 800ea0e:	9205      	str	r2, [sp, #20]
 800ea10:	1aed      	subs	r5, r5, r3
 800ea12:	eba8 0803 	sub.w	r8, r8, r3
 800ea16:	9b07      	ldr	r3, [sp, #28]
 800ea18:	b1eb      	cbz	r3, 800ea56 <_dtoa_r+0x76e>
 800ea1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d067      	beq.n	800eaf0 <_dtoa_r+0x808>
 800ea20:	b18f      	cbz	r7, 800ea46 <_dtoa_r+0x75e>
 800ea22:	4631      	mov	r1, r6
 800ea24:	463a      	mov	r2, r7
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 fbc0 	bl	800f1ac <__pow5mult>
 800ea2c:	9a04      	ldr	r2, [sp, #16]
 800ea2e:	4601      	mov	r1, r0
 800ea30:	4606      	mov	r6, r0
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fb24 	bl	800f080 <__multiply>
 800ea38:	9904      	ldr	r1, [sp, #16]
 800ea3a:	9008      	str	r0, [sp, #32]
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f000 fa76 	bl	800ef2e <_Bfree>
 800ea42:	9b08      	ldr	r3, [sp, #32]
 800ea44:	9304      	str	r3, [sp, #16]
 800ea46:	9b07      	ldr	r3, [sp, #28]
 800ea48:	1bda      	subs	r2, r3, r7
 800ea4a:	d004      	beq.n	800ea56 <_dtoa_r+0x76e>
 800ea4c:	9904      	ldr	r1, [sp, #16]
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fbac 	bl	800f1ac <__pow5mult>
 800ea54:	9004      	str	r0, [sp, #16]
 800ea56:	2101      	movs	r1, #1
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f000 fb08 	bl	800f06e <__i2b>
 800ea5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea60:	4607      	mov	r7, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f000 81d0 	beq.w	800ee08 <_dtoa_r+0xb20>
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	f000 fb9d 	bl	800f1ac <__pow5mult>
 800ea72:	9b06      	ldr	r3, [sp, #24]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	4607      	mov	r7, r0
 800ea78:	dc40      	bgt.n	800eafc <_dtoa_r+0x814>
 800ea7a:	9b00      	ldr	r3, [sp, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d139      	bne.n	800eaf4 <_dtoa_r+0x80c>
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d136      	bne.n	800eaf8 <_dtoa_r+0x810>
 800ea8a:	9b01      	ldr	r3, [sp, #4]
 800ea8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea90:	0d1b      	lsrs	r3, r3, #20
 800ea92:	051b      	lsls	r3, r3, #20
 800ea94:	b12b      	cbz	r3, 800eaa2 <_dtoa_r+0x7ba>
 800ea96:	9b05      	ldr	r3, [sp, #20]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	f108 0801 	add.w	r8, r8, #1
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	9307      	str	r3, [sp, #28]
 800eaa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d12a      	bne.n	800eb00 <_dtoa_r+0x818>
 800eaaa:	2001      	movs	r0, #1
 800eaac:	e030      	b.n	800eb10 <_dtoa_r+0x828>
 800eaae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eab0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eab4:	e795      	b.n	800e9e2 <_dtoa_r+0x6fa>
 800eab6:	9b07      	ldr	r3, [sp, #28]
 800eab8:	f109 37ff 	add.w	r7, r9, #4294967295
 800eabc:	42bb      	cmp	r3, r7
 800eabe:	bfbf      	itttt	lt
 800eac0:	9b07      	ldrlt	r3, [sp, #28]
 800eac2:	9707      	strlt	r7, [sp, #28]
 800eac4:	1afa      	sublt	r2, r7, r3
 800eac6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eac8:	bfbb      	ittet	lt
 800eaca:	189b      	addlt	r3, r3, r2
 800eacc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eace:	1bdf      	subge	r7, r3, r7
 800ead0:	2700      	movlt	r7, #0
 800ead2:	f1b9 0f00 	cmp.w	r9, #0
 800ead6:	bfb5      	itete	lt
 800ead8:	9b05      	ldrlt	r3, [sp, #20]
 800eada:	9d05      	ldrge	r5, [sp, #20]
 800eadc:	eba3 0509 	sublt.w	r5, r3, r9
 800eae0:	464b      	movge	r3, r9
 800eae2:	bfb8      	it	lt
 800eae4:	2300      	movlt	r3, #0
 800eae6:	e77e      	b.n	800e9e6 <_dtoa_r+0x6fe>
 800eae8:	9f07      	ldr	r7, [sp, #28]
 800eaea:	9d05      	ldr	r5, [sp, #20]
 800eaec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800eaee:	e783      	b.n	800e9f8 <_dtoa_r+0x710>
 800eaf0:	9a07      	ldr	r2, [sp, #28]
 800eaf2:	e7ab      	b.n	800ea4c <_dtoa_r+0x764>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e7d4      	b.n	800eaa2 <_dtoa_r+0x7ba>
 800eaf8:	9b00      	ldr	r3, [sp, #0]
 800eafa:	e7d2      	b.n	800eaa2 <_dtoa_r+0x7ba>
 800eafc:	2300      	movs	r3, #0
 800eafe:	9307      	str	r3, [sp, #28]
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800eb06:	6918      	ldr	r0, [r3, #16]
 800eb08:	f000 fa63 	bl	800efd2 <__hi0bits>
 800eb0c:	f1c0 0020 	rsb	r0, r0, #32
 800eb10:	4440      	add	r0, r8
 800eb12:	f010 001f 	ands.w	r0, r0, #31
 800eb16:	d047      	beq.n	800eba8 <_dtoa_r+0x8c0>
 800eb18:	f1c0 0320 	rsb	r3, r0, #32
 800eb1c:	2b04      	cmp	r3, #4
 800eb1e:	dd3b      	ble.n	800eb98 <_dtoa_r+0x8b0>
 800eb20:	9b05      	ldr	r3, [sp, #20]
 800eb22:	f1c0 001c 	rsb	r0, r0, #28
 800eb26:	4403      	add	r3, r0
 800eb28:	9305      	str	r3, [sp, #20]
 800eb2a:	4405      	add	r5, r0
 800eb2c:	4480      	add	r8, r0
 800eb2e:	9b05      	ldr	r3, [sp, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	dd05      	ble.n	800eb40 <_dtoa_r+0x858>
 800eb34:	461a      	mov	r2, r3
 800eb36:	9904      	ldr	r1, [sp, #16]
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f000 fb85 	bl	800f248 <__lshift>
 800eb3e:	9004      	str	r0, [sp, #16]
 800eb40:	f1b8 0f00 	cmp.w	r8, #0
 800eb44:	dd05      	ble.n	800eb52 <_dtoa_r+0x86a>
 800eb46:	4639      	mov	r1, r7
 800eb48:	4642      	mov	r2, r8
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f000 fb7c 	bl	800f248 <__lshift>
 800eb50:	4607      	mov	r7, r0
 800eb52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb54:	b353      	cbz	r3, 800ebac <_dtoa_r+0x8c4>
 800eb56:	4639      	mov	r1, r7
 800eb58:	9804      	ldr	r0, [sp, #16]
 800eb5a:	f000 fbc9 	bl	800f2f0 <__mcmp>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	da24      	bge.n	800ebac <_dtoa_r+0x8c4>
 800eb62:	2300      	movs	r3, #0
 800eb64:	220a      	movs	r2, #10
 800eb66:	9904      	ldr	r1, [sp, #16]
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f000 f9f7 	bl	800ef5c <__multadd>
 800eb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb70:	9004      	str	r0, [sp, #16]
 800eb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f000 814d 	beq.w	800ee16 <_dtoa_r+0xb2e>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	4631      	mov	r1, r6
 800eb80:	220a      	movs	r2, #10
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 f9ea 	bl	800ef5c <__multadd>
 800eb88:	9b02      	ldr	r3, [sp, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	4606      	mov	r6, r0
 800eb8e:	dc4f      	bgt.n	800ec30 <_dtoa_r+0x948>
 800eb90:	9b06      	ldr	r3, [sp, #24]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	dd4c      	ble.n	800ec30 <_dtoa_r+0x948>
 800eb96:	e011      	b.n	800ebbc <_dtoa_r+0x8d4>
 800eb98:	d0c9      	beq.n	800eb2e <_dtoa_r+0x846>
 800eb9a:	9a05      	ldr	r2, [sp, #20]
 800eb9c:	331c      	adds	r3, #28
 800eb9e:	441a      	add	r2, r3
 800eba0:	9205      	str	r2, [sp, #20]
 800eba2:	441d      	add	r5, r3
 800eba4:	4498      	add	r8, r3
 800eba6:	e7c2      	b.n	800eb2e <_dtoa_r+0x846>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	e7f6      	b.n	800eb9a <_dtoa_r+0x8b2>
 800ebac:	f1b9 0f00 	cmp.w	r9, #0
 800ebb0:	dc38      	bgt.n	800ec24 <_dtoa_r+0x93c>
 800ebb2:	9b06      	ldr	r3, [sp, #24]
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	dd35      	ble.n	800ec24 <_dtoa_r+0x93c>
 800ebb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebbc:	9b02      	ldr	r3, [sp, #8]
 800ebbe:	b963      	cbnz	r3, 800ebda <_dtoa_r+0x8f2>
 800ebc0:	4639      	mov	r1, r7
 800ebc2:	2205      	movs	r2, #5
 800ebc4:	4620      	mov	r0, r4
 800ebc6:	f000 f9c9 	bl	800ef5c <__multadd>
 800ebca:	4601      	mov	r1, r0
 800ebcc:	4607      	mov	r7, r0
 800ebce:	9804      	ldr	r0, [sp, #16]
 800ebd0:	f000 fb8e 	bl	800f2f0 <__mcmp>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f73f adcc 	bgt.w	800e772 <_dtoa_r+0x48a>
 800ebda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebdc:	465d      	mov	r5, fp
 800ebde:	ea6f 0a03 	mvn.w	sl, r3
 800ebe2:	f04f 0900 	mov.w	r9, #0
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f000 f9a0 	bl	800ef2e <_Bfree>
 800ebee:	2e00      	cmp	r6, #0
 800ebf0:	f43f aeb7 	beq.w	800e962 <_dtoa_r+0x67a>
 800ebf4:	f1b9 0f00 	cmp.w	r9, #0
 800ebf8:	d005      	beq.n	800ec06 <_dtoa_r+0x91e>
 800ebfa:	45b1      	cmp	r9, r6
 800ebfc:	d003      	beq.n	800ec06 <_dtoa_r+0x91e>
 800ebfe:	4649      	mov	r1, r9
 800ec00:	4620      	mov	r0, r4
 800ec02:	f000 f994 	bl	800ef2e <_Bfree>
 800ec06:	4631      	mov	r1, r6
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 f990 	bl	800ef2e <_Bfree>
 800ec0e:	e6a8      	b.n	800e962 <_dtoa_r+0x67a>
 800ec10:	2700      	movs	r7, #0
 800ec12:	463e      	mov	r6, r7
 800ec14:	e7e1      	b.n	800ebda <_dtoa_r+0x8f2>
 800ec16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ec1a:	463e      	mov	r6, r7
 800ec1c:	e5a9      	b.n	800e772 <_dtoa_r+0x48a>
 800ec1e:	bf00      	nop
 800ec20:	40240000 	.word	0x40240000
 800ec24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec26:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 80fa 	beq.w	800ee24 <_dtoa_r+0xb3c>
 800ec30:	2d00      	cmp	r5, #0
 800ec32:	dd05      	ble.n	800ec40 <_dtoa_r+0x958>
 800ec34:	4631      	mov	r1, r6
 800ec36:	462a      	mov	r2, r5
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 fb05 	bl	800f248 <__lshift>
 800ec3e:	4606      	mov	r6, r0
 800ec40:	9b07      	ldr	r3, [sp, #28]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d04c      	beq.n	800ece0 <_dtoa_r+0x9f8>
 800ec46:	6871      	ldr	r1, [r6, #4]
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f000 f93c 	bl	800eec6 <_Balloc>
 800ec4e:	6932      	ldr	r2, [r6, #16]
 800ec50:	3202      	adds	r2, #2
 800ec52:	4605      	mov	r5, r0
 800ec54:	0092      	lsls	r2, r2, #2
 800ec56:	f106 010c 	add.w	r1, r6, #12
 800ec5a:	300c      	adds	r0, #12
 800ec5c:	f000 f928 	bl	800eeb0 <memcpy>
 800ec60:	2201      	movs	r2, #1
 800ec62:	4629      	mov	r1, r5
 800ec64:	4620      	mov	r0, r4
 800ec66:	f000 faef 	bl	800f248 <__lshift>
 800ec6a:	9b00      	ldr	r3, [sp, #0]
 800ec6c:	f8cd b014 	str.w	fp, [sp, #20]
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	46b1      	mov	r9, r6
 800ec76:	9307      	str	r3, [sp, #28]
 800ec78:	4606      	mov	r6, r0
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	9804      	ldr	r0, [sp, #16]
 800ec7e:	f7ff faa5 	bl	800e1cc <quorem>
 800ec82:	4649      	mov	r1, r9
 800ec84:	4605      	mov	r5, r0
 800ec86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ec8a:	9804      	ldr	r0, [sp, #16]
 800ec8c:	f000 fb30 	bl	800f2f0 <__mcmp>
 800ec90:	4632      	mov	r2, r6
 800ec92:	9000      	str	r0, [sp, #0]
 800ec94:	4639      	mov	r1, r7
 800ec96:	4620      	mov	r0, r4
 800ec98:	f000 fb44 	bl	800f324 <__mdiff>
 800ec9c:	68c3      	ldr	r3, [r0, #12]
 800ec9e:	4602      	mov	r2, r0
 800eca0:	bb03      	cbnz	r3, 800ece4 <_dtoa_r+0x9fc>
 800eca2:	4601      	mov	r1, r0
 800eca4:	9008      	str	r0, [sp, #32]
 800eca6:	9804      	ldr	r0, [sp, #16]
 800eca8:	f000 fb22 	bl	800f2f0 <__mcmp>
 800ecac:	9a08      	ldr	r2, [sp, #32]
 800ecae:	4603      	mov	r3, r0
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	9308      	str	r3, [sp, #32]
 800ecb6:	f000 f93a 	bl	800ef2e <_Bfree>
 800ecba:	9b08      	ldr	r3, [sp, #32]
 800ecbc:	b9a3      	cbnz	r3, 800ece8 <_dtoa_r+0xa00>
 800ecbe:	9a06      	ldr	r2, [sp, #24]
 800ecc0:	b992      	cbnz	r2, 800ece8 <_dtoa_r+0xa00>
 800ecc2:	9a07      	ldr	r2, [sp, #28]
 800ecc4:	b982      	cbnz	r2, 800ece8 <_dtoa_r+0xa00>
 800ecc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ecca:	d029      	beq.n	800ed20 <_dtoa_r+0xa38>
 800eccc:	9b00      	ldr	r3, [sp, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	dd01      	ble.n	800ecd6 <_dtoa_r+0x9ee>
 800ecd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ecd6:	9b05      	ldr	r3, [sp, #20]
 800ecd8:	1c5d      	adds	r5, r3, #1
 800ecda:	f883 8000 	strb.w	r8, [r3]
 800ecde:	e782      	b.n	800ebe6 <_dtoa_r+0x8fe>
 800ece0:	4630      	mov	r0, r6
 800ece2:	e7c2      	b.n	800ec6a <_dtoa_r+0x982>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e7e3      	b.n	800ecb0 <_dtoa_r+0x9c8>
 800ece8:	9a00      	ldr	r2, [sp, #0]
 800ecea:	2a00      	cmp	r2, #0
 800ecec:	db04      	blt.n	800ecf8 <_dtoa_r+0xa10>
 800ecee:	d125      	bne.n	800ed3c <_dtoa_r+0xa54>
 800ecf0:	9a06      	ldr	r2, [sp, #24]
 800ecf2:	bb1a      	cbnz	r2, 800ed3c <_dtoa_r+0xa54>
 800ecf4:	9a07      	ldr	r2, [sp, #28]
 800ecf6:	bb0a      	cbnz	r2, 800ed3c <_dtoa_r+0xa54>
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	ddec      	ble.n	800ecd6 <_dtoa_r+0x9ee>
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	9904      	ldr	r1, [sp, #16]
 800ed00:	4620      	mov	r0, r4
 800ed02:	f000 faa1 	bl	800f248 <__lshift>
 800ed06:	4639      	mov	r1, r7
 800ed08:	9004      	str	r0, [sp, #16]
 800ed0a:	f000 faf1 	bl	800f2f0 <__mcmp>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	dc03      	bgt.n	800ed1a <_dtoa_r+0xa32>
 800ed12:	d1e0      	bne.n	800ecd6 <_dtoa_r+0x9ee>
 800ed14:	f018 0f01 	tst.w	r8, #1
 800ed18:	d0dd      	beq.n	800ecd6 <_dtoa_r+0x9ee>
 800ed1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed1e:	d1d8      	bne.n	800ecd2 <_dtoa_r+0x9ea>
 800ed20:	9b05      	ldr	r3, [sp, #20]
 800ed22:	9a05      	ldr	r2, [sp, #20]
 800ed24:	1c5d      	adds	r5, r3, #1
 800ed26:	2339      	movs	r3, #57	; 0x39
 800ed28:	7013      	strb	r3, [r2, #0]
 800ed2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed2e:	2b39      	cmp	r3, #57	; 0x39
 800ed30:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed34:	d04f      	beq.n	800edd6 <_dtoa_r+0xaee>
 800ed36:	3301      	adds	r3, #1
 800ed38:	7013      	strb	r3, [r2, #0]
 800ed3a:	e754      	b.n	800ebe6 <_dtoa_r+0x8fe>
 800ed3c:	9a05      	ldr	r2, [sp, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f102 0501 	add.w	r5, r2, #1
 800ed44:	dd06      	ble.n	800ed54 <_dtoa_r+0xa6c>
 800ed46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed4a:	d0e9      	beq.n	800ed20 <_dtoa_r+0xa38>
 800ed4c:	f108 0801 	add.w	r8, r8, #1
 800ed50:	9b05      	ldr	r3, [sp, #20]
 800ed52:	e7c2      	b.n	800ecda <_dtoa_r+0x9f2>
 800ed54:	9a02      	ldr	r2, [sp, #8]
 800ed56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ed5a:	eba5 030b 	sub.w	r3, r5, fp
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d021      	beq.n	800eda6 <_dtoa_r+0xabe>
 800ed62:	2300      	movs	r3, #0
 800ed64:	220a      	movs	r2, #10
 800ed66:	9904      	ldr	r1, [sp, #16]
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f000 f8f7 	bl	800ef5c <__multadd>
 800ed6e:	45b1      	cmp	r9, r6
 800ed70:	9004      	str	r0, [sp, #16]
 800ed72:	f04f 0300 	mov.w	r3, #0
 800ed76:	f04f 020a 	mov.w	r2, #10
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	d105      	bne.n	800ed8c <_dtoa_r+0xaa4>
 800ed80:	f000 f8ec 	bl	800ef5c <__multadd>
 800ed84:	4681      	mov	r9, r0
 800ed86:	4606      	mov	r6, r0
 800ed88:	9505      	str	r5, [sp, #20]
 800ed8a:	e776      	b.n	800ec7a <_dtoa_r+0x992>
 800ed8c:	f000 f8e6 	bl	800ef5c <__multadd>
 800ed90:	4631      	mov	r1, r6
 800ed92:	4681      	mov	r9, r0
 800ed94:	2300      	movs	r3, #0
 800ed96:	220a      	movs	r2, #10
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f000 f8df 	bl	800ef5c <__multadd>
 800ed9e:	4606      	mov	r6, r0
 800eda0:	e7f2      	b.n	800ed88 <_dtoa_r+0xaa0>
 800eda2:	f04f 0900 	mov.w	r9, #0
 800eda6:	2201      	movs	r2, #1
 800eda8:	9904      	ldr	r1, [sp, #16]
 800edaa:	4620      	mov	r0, r4
 800edac:	f000 fa4c 	bl	800f248 <__lshift>
 800edb0:	4639      	mov	r1, r7
 800edb2:	9004      	str	r0, [sp, #16]
 800edb4:	f000 fa9c 	bl	800f2f0 <__mcmp>
 800edb8:	2800      	cmp	r0, #0
 800edba:	dcb6      	bgt.n	800ed2a <_dtoa_r+0xa42>
 800edbc:	d102      	bne.n	800edc4 <_dtoa_r+0xadc>
 800edbe:	f018 0f01 	tst.w	r8, #1
 800edc2:	d1b2      	bne.n	800ed2a <_dtoa_r+0xa42>
 800edc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800edc8:	2b30      	cmp	r3, #48	; 0x30
 800edca:	f105 32ff 	add.w	r2, r5, #4294967295
 800edce:	f47f af0a 	bne.w	800ebe6 <_dtoa_r+0x8fe>
 800edd2:	4615      	mov	r5, r2
 800edd4:	e7f6      	b.n	800edc4 <_dtoa_r+0xadc>
 800edd6:	4593      	cmp	fp, r2
 800edd8:	d105      	bne.n	800ede6 <_dtoa_r+0xafe>
 800edda:	2331      	movs	r3, #49	; 0x31
 800eddc:	f10a 0a01 	add.w	sl, sl, #1
 800ede0:	f88b 3000 	strb.w	r3, [fp]
 800ede4:	e6ff      	b.n	800ebe6 <_dtoa_r+0x8fe>
 800ede6:	4615      	mov	r5, r2
 800ede8:	e79f      	b.n	800ed2a <_dtoa_r+0xa42>
 800edea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ee50 <_dtoa_r+0xb68>
 800edee:	e007      	b.n	800ee00 <_dtoa_r+0xb18>
 800edf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ee54 <_dtoa_r+0xb6c>
 800edf6:	b11b      	cbz	r3, 800ee00 <_dtoa_r+0xb18>
 800edf8:	f10b 0308 	add.w	r3, fp, #8
 800edfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	4658      	mov	r0, fp
 800ee02:	b017      	add	sp, #92	; 0x5c
 800ee04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee08:	9b06      	ldr	r3, [sp, #24]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	f77f ae35 	ble.w	800ea7a <_dtoa_r+0x792>
 800ee10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee12:	9307      	str	r3, [sp, #28]
 800ee14:	e649      	b.n	800eaaa <_dtoa_r+0x7c2>
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dc03      	bgt.n	800ee24 <_dtoa_r+0xb3c>
 800ee1c:	9b06      	ldr	r3, [sp, #24]
 800ee1e:	2b02      	cmp	r3, #2
 800ee20:	f73f aecc 	bgt.w	800ebbc <_dtoa_r+0x8d4>
 800ee24:	465d      	mov	r5, fp
 800ee26:	4639      	mov	r1, r7
 800ee28:	9804      	ldr	r0, [sp, #16]
 800ee2a:	f7ff f9cf 	bl	800e1cc <quorem>
 800ee2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee32:	f805 8b01 	strb.w	r8, [r5], #1
 800ee36:	9a02      	ldr	r2, [sp, #8]
 800ee38:	eba5 030b 	sub.w	r3, r5, fp
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	ddb0      	ble.n	800eda2 <_dtoa_r+0xaba>
 800ee40:	2300      	movs	r3, #0
 800ee42:	220a      	movs	r2, #10
 800ee44:	9904      	ldr	r1, [sp, #16]
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 f888 	bl	800ef5c <__multadd>
 800ee4c:	9004      	str	r0, [sp, #16]
 800ee4e:	e7ea      	b.n	800ee26 <_dtoa_r+0xb3e>
 800ee50:	0800ff84 	.word	0x0800ff84
 800ee54:	0800ffa8 	.word	0x0800ffa8

0800ee58 <__locale_ctype_ptr_l>:
 800ee58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ee5c:	4770      	bx	lr
	...

0800ee60 <_localeconv_r>:
 800ee60:	4b04      	ldr	r3, [pc, #16]	; (800ee74 <_localeconv_r+0x14>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6a18      	ldr	r0, [r3, #32]
 800ee66:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <_localeconv_r+0x18>)
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	bf08      	it	eq
 800ee6c:	4618      	moveq	r0, r3
 800ee6e:	30f0      	adds	r0, #240	; 0xf0
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	20000068 	.word	0x20000068
 800ee78:	200000cc 	.word	0x200000cc

0800ee7c <malloc>:
 800ee7c:	4b02      	ldr	r3, [pc, #8]	; (800ee88 <malloc+0xc>)
 800ee7e:	4601      	mov	r1, r0
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	f000 bb57 	b.w	800f534 <_malloc_r>
 800ee86:	bf00      	nop
 800ee88:	20000068 	.word	0x20000068

0800ee8c <__ascii_mbtowc>:
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	b901      	cbnz	r1, 800ee92 <__ascii_mbtowc+0x6>
 800ee90:	a901      	add	r1, sp, #4
 800ee92:	b142      	cbz	r2, 800eea6 <__ascii_mbtowc+0x1a>
 800ee94:	b14b      	cbz	r3, 800eeaa <__ascii_mbtowc+0x1e>
 800ee96:	7813      	ldrb	r3, [r2, #0]
 800ee98:	600b      	str	r3, [r1, #0]
 800ee9a:	7812      	ldrb	r2, [r2, #0]
 800ee9c:	1c10      	adds	r0, r2, #0
 800ee9e:	bf18      	it	ne
 800eea0:	2001      	movne	r0, #1
 800eea2:	b002      	add	sp, #8
 800eea4:	4770      	bx	lr
 800eea6:	4610      	mov	r0, r2
 800eea8:	e7fb      	b.n	800eea2 <__ascii_mbtowc+0x16>
 800eeaa:	f06f 0001 	mvn.w	r0, #1
 800eeae:	e7f8      	b.n	800eea2 <__ascii_mbtowc+0x16>

0800eeb0 <memcpy>:
 800eeb0:	b510      	push	{r4, lr}
 800eeb2:	1e43      	subs	r3, r0, #1
 800eeb4:	440a      	add	r2, r1
 800eeb6:	4291      	cmp	r1, r2
 800eeb8:	d100      	bne.n	800eebc <memcpy+0xc>
 800eeba:	bd10      	pop	{r4, pc}
 800eebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec4:	e7f7      	b.n	800eeb6 <memcpy+0x6>

0800eec6 <_Balloc>:
 800eec6:	b570      	push	{r4, r5, r6, lr}
 800eec8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eeca:	4604      	mov	r4, r0
 800eecc:	460e      	mov	r6, r1
 800eece:	b93d      	cbnz	r5, 800eee0 <_Balloc+0x1a>
 800eed0:	2010      	movs	r0, #16
 800eed2:	f7ff ffd3 	bl	800ee7c <malloc>
 800eed6:	6260      	str	r0, [r4, #36]	; 0x24
 800eed8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eedc:	6005      	str	r5, [r0, #0]
 800eede:	60c5      	str	r5, [r0, #12]
 800eee0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800eee2:	68eb      	ldr	r3, [r5, #12]
 800eee4:	b183      	cbz	r3, 800ef08 <_Balloc+0x42>
 800eee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eeee:	b9b8      	cbnz	r0, 800ef20 <_Balloc+0x5a>
 800eef0:	2101      	movs	r1, #1
 800eef2:	fa01 f506 	lsl.w	r5, r1, r6
 800eef6:	1d6a      	adds	r2, r5, #5
 800eef8:	0092      	lsls	r2, r2, #2
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fabe 	bl	800f47c <_calloc_r>
 800ef00:	b160      	cbz	r0, 800ef1c <_Balloc+0x56>
 800ef02:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ef06:	e00e      	b.n	800ef26 <_Balloc+0x60>
 800ef08:	2221      	movs	r2, #33	; 0x21
 800ef0a:	2104      	movs	r1, #4
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 fab5 	bl	800f47c <_calloc_r>
 800ef12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef14:	60e8      	str	r0, [r5, #12]
 800ef16:	68db      	ldr	r3, [r3, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e4      	bne.n	800eee6 <_Balloc+0x20>
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	6802      	ldr	r2, [r0, #0]
 800ef22:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ef26:	2300      	movs	r3, #0
 800ef28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef2c:	e7f7      	b.n	800ef1e <_Balloc+0x58>

0800ef2e <_Bfree>:
 800ef2e:	b570      	push	{r4, r5, r6, lr}
 800ef30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ef32:	4606      	mov	r6, r0
 800ef34:	460d      	mov	r5, r1
 800ef36:	b93c      	cbnz	r4, 800ef48 <_Bfree+0x1a>
 800ef38:	2010      	movs	r0, #16
 800ef3a:	f7ff ff9f 	bl	800ee7c <malloc>
 800ef3e:	6270      	str	r0, [r6, #36]	; 0x24
 800ef40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef44:	6004      	str	r4, [r0, #0]
 800ef46:	60c4      	str	r4, [r0, #12]
 800ef48:	b13d      	cbz	r5, 800ef5a <_Bfree+0x2c>
 800ef4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef4c:	686a      	ldr	r2, [r5, #4]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef54:	6029      	str	r1, [r5, #0]
 800ef56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}

0800ef5c <__multadd>:
 800ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef60:	690d      	ldr	r5, [r1, #16]
 800ef62:	461f      	mov	r7, r3
 800ef64:	4606      	mov	r6, r0
 800ef66:	460c      	mov	r4, r1
 800ef68:	f101 0c14 	add.w	ip, r1, #20
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f8dc 0000 	ldr.w	r0, [ip]
 800ef72:	b281      	uxth	r1, r0
 800ef74:	fb02 7101 	mla	r1, r2, r1, r7
 800ef78:	0c0f      	lsrs	r7, r1, #16
 800ef7a:	0c00      	lsrs	r0, r0, #16
 800ef7c:	fb02 7000 	mla	r0, r2, r0, r7
 800ef80:	b289      	uxth	r1, r1
 800ef82:	3301      	adds	r3, #1
 800ef84:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ef88:	429d      	cmp	r5, r3
 800ef8a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ef8e:	f84c 1b04 	str.w	r1, [ip], #4
 800ef92:	dcec      	bgt.n	800ef6e <__multadd+0x12>
 800ef94:	b1d7      	cbz	r7, 800efcc <__multadd+0x70>
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	42ab      	cmp	r3, r5
 800ef9a:	dc12      	bgt.n	800efc2 <__multadd+0x66>
 800ef9c:	6861      	ldr	r1, [r4, #4]
 800ef9e:	4630      	mov	r0, r6
 800efa0:	3101      	adds	r1, #1
 800efa2:	f7ff ff90 	bl	800eec6 <_Balloc>
 800efa6:	6922      	ldr	r2, [r4, #16]
 800efa8:	3202      	adds	r2, #2
 800efaa:	f104 010c 	add.w	r1, r4, #12
 800efae:	4680      	mov	r8, r0
 800efb0:	0092      	lsls	r2, r2, #2
 800efb2:	300c      	adds	r0, #12
 800efb4:	f7ff ff7c 	bl	800eeb0 <memcpy>
 800efb8:	4621      	mov	r1, r4
 800efba:	4630      	mov	r0, r6
 800efbc:	f7ff ffb7 	bl	800ef2e <_Bfree>
 800efc0:	4644      	mov	r4, r8
 800efc2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efc6:	3501      	adds	r5, #1
 800efc8:	615f      	str	r7, [r3, #20]
 800efca:	6125      	str	r5, [r4, #16]
 800efcc:	4620      	mov	r0, r4
 800efce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efd2 <__hi0bits>:
 800efd2:	0c02      	lsrs	r2, r0, #16
 800efd4:	0412      	lsls	r2, r2, #16
 800efd6:	4603      	mov	r3, r0
 800efd8:	b9b2      	cbnz	r2, 800f008 <__hi0bits+0x36>
 800efda:	0403      	lsls	r3, r0, #16
 800efdc:	2010      	movs	r0, #16
 800efde:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800efe2:	bf04      	itt	eq
 800efe4:	021b      	lsleq	r3, r3, #8
 800efe6:	3008      	addeq	r0, #8
 800efe8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800efec:	bf04      	itt	eq
 800efee:	011b      	lsleq	r3, r3, #4
 800eff0:	3004      	addeq	r0, #4
 800eff2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800eff6:	bf04      	itt	eq
 800eff8:	009b      	lsleq	r3, r3, #2
 800effa:	3002      	addeq	r0, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	db06      	blt.n	800f00e <__hi0bits+0x3c>
 800f000:	005b      	lsls	r3, r3, #1
 800f002:	d503      	bpl.n	800f00c <__hi0bits+0x3a>
 800f004:	3001      	adds	r0, #1
 800f006:	4770      	bx	lr
 800f008:	2000      	movs	r0, #0
 800f00a:	e7e8      	b.n	800efde <__hi0bits+0xc>
 800f00c:	2020      	movs	r0, #32
 800f00e:	4770      	bx	lr

0800f010 <__lo0bits>:
 800f010:	6803      	ldr	r3, [r0, #0]
 800f012:	f013 0207 	ands.w	r2, r3, #7
 800f016:	4601      	mov	r1, r0
 800f018:	d00b      	beq.n	800f032 <__lo0bits+0x22>
 800f01a:	07da      	lsls	r2, r3, #31
 800f01c:	d423      	bmi.n	800f066 <__lo0bits+0x56>
 800f01e:	0798      	lsls	r0, r3, #30
 800f020:	bf49      	itett	mi
 800f022:	085b      	lsrmi	r3, r3, #1
 800f024:	089b      	lsrpl	r3, r3, #2
 800f026:	2001      	movmi	r0, #1
 800f028:	600b      	strmi	r3, [r1, #0]
 800f02a:	bf5c      	itt	pl
 800f02c:	600b      	strpl	r3, [r1, #0]
 800f02e:	2002      	movpl	r0, #2
 800f030:	4770      	bx	lr
 800f032:	b298      	uxth	r0, r3
 800f034:	b9a8      	cbnz	r0, 800f062 <__lo0bits+0x52>
 800f036:	0c1b      	lsrs	r3, r3, #16
 800f038:	2010      	movs	r0, #16
 800f03a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f03e:	bf04      	itt	eq
 800f040:	0a1b      	lsreq	r3, r3, #8
 800f042:	3008      	addeq	r0, #8
 800f044:	071a      	lsls	r2, r3, #28
 800f046:	bf04      	itt	eq
 800f048:	091b      	lsreq	r3, r3, #4
 800f04a:	3004      	addeq	r0, #4
 800f04c:	079a      	lsls	r2, r3, #30
 800f04e:	bf04      	itt	eq
 800f050:	089b      	lsreq	r3, r3, #2
 800f052:	3002      	addeq	r0, #2
 800f054:	07da      	lsls	r2, r3, #31
 800f056:	d402      	bmi.n	800f05e <__lo0bits+0x4e>
 800f058:	085b      	lsrs	r3, r3, #1
 800f05a:	d006      	beq.n	800f06a <__lo0bits+0x5a>
 800f05c:	3001      	adds	r0, #1
 800f05e:	600b      	str	r3, [r1, #0]
 800f060:	4770      	bx	lr
 800f062:	4610      	mov	r0, r2
 800f064:	e7e9      	b.n	800f03a <__lo0bits+0x2a>
 800f066:	2000      	movs	r0, #0
 800f068:	4770      	bx	lr
 800f06a:	2020      	movs	r0, #32
 800f06c:	4770      	bx	lr

0800f06e <__i2b>:
 800f06e:	b510      	push	{r4, lr}
 800f070:	460c      	mov	r4, r1
 800f072:	2101      	movs	r1, #1
 800f074:	f7ff ff27 	bl	800eec6 <_Balloc>
 800f078:	2201      	movs	r2, #1
 800f07a:	6144      	str	r4, [r0, #20]
 800f07c:	6102      	str	r2, [r0, #16]
 800f07e:	bd10      	pop	{r4, pc}

0800f080 <__multiply>:
 800f080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	4614      	mov	r4, r2
 800f086:	690a      	ldr	r2, [r1, #16]
 800f088:	6923      	ldr	r3, [r4, #16]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	bfb8      	it	lt
 800f08e:	460b      	movlt	r3, r1
 800f090:	4688      	mov	r8, r1
 800f092:	bfbc      	itt	lt
 800f094:	46a0      	movlt	r8, r4
 800f096:	461c      	movlt	r4, r3
 800f098:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f09c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f0a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f0a8:	eb07 0609 	add.w	r6, r7, r9
 800f0ac:	42b3      	cmp	r3, r6
 800f0ae:	bfb8      	it	lt
 800f0b0:	3101      	addlt	r1, #1
 800f0b2:	f7ff ff08 	bl	800eec6 <_Balloc>
 800f0b6:	f100 0514 	add.w	r5, r0, #20
 800f0ba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f0be:	462b      	mov	r3, r5
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	4573      	cmp	r3, lr
 800f0c4:	d316      	bcc.n	800f0f4 <__multiply+0x74>
 800f0c6:	f104 0214 	add.w	r2, r4, #20
 800f0ca:	f108 0114 	add.w	r1, r8, #20
 800f0ce:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f0d2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	9b00      	ldr	r3, [sp, #0]
 800f0da:	9201      	str	r2, [sp, #4]
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d80c      	bhi.n	800f0fa <__multiply+0x7a>
 800f0e0:	2e00      	cmp	r6, #0
 800f0e2:	dd03      	ble.n	800f0ec <__multiply+0x6c>
 800f0e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d05d      	beq.n	800f1a8 <__multiply+0x128>
 800f0ec:	6106      	str	r6, [r0, #16]
 800f0ee:	b003      	add	sp, #12
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	f843 2b04 	str.w	r2, [r3], #4
 800f0f8:	e7e3      	b.n	800f0c2 <__multiply+0x42>
 800f0fa:	f8b2 b000 	ldrh.w	fp, [r2]
 800f0fe:	f1bb 0f00 	cmp.w	fp, #0
 800f102:	d023      	beq.n	800f14c <__multiply+0xcc>
 800f104:	4689      	mov	r9, r1
 800f106:	46ac      	mov	ip, r5
 800f108:	f04f 0800 	mov.w	r8, #0
 800f10c:	f859 4b04 	ldr.w	r4, [r9], #4
 800f110:	f8dc a000 	ldr.w	sl, [ip]
 800f114:	b2a3      	uxth	r3, r4
 800f116:	fa1f fa8a 	uxth.w	sl, sl
 800f11a:	fb0b a303 	mla	r3, fp, r3, sl
 800f11e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f122:	f8dc 4000 	ldr.w	r4, [ip]
 800f126:	4443      	add	r3, r8
 800f128:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f12c:	fb0b 840a 	mla	r4, fp, sl, r8
 800f130:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f134:	46e2      	mov	sl, ip
 800f136:	b29b      	uxth	r3, r3
 800f138:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f13c:	454f      	cmp	r7, r9
 800f13e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f142:	f84a 3b04 	str.w	r3, [sl], #4
 800f146:	d82b      	bhi.n	800f1a0 <__multiply+0x120>
 800f148:	f8cc 8004 	str.w	r8, [ip, #4]
 800f14c:	9b01      	ldr	r3, [sp, #4]
 800f14e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f152:	3204      	adds	r2, #4
 800f154:	f1ba 0f00 	cmp.w	sl, #0
 800f158:	d020      	beq.n	800f19c <__multiply+0x11c>
 800f15a:	682b      	ldr	r3, [r5, #0]
 800f15c:	4689      	mov	r9, r1
 800f15e:	46a8      	mov	r8, r5
 800f160:	f04f 0b00 	mov.w	fp, #0
 800f164:	f8b9 c000 	ldrh.w	ip, [r9]
 800f168:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f16c:	fb0a 440c 	mla	r4, sl, ip, r4
 800f170:	445c      	add	r4, fp
 800f172:	46c4      	mov	ip, r8
 800f174:	b29b      	uxth	r3, r3
 800f176:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f17a:	f84c 3b04 	str.w	r3, [ip], #4
 800f17e:	f859 3b04 	ldr.w	r3, [r9], #4
 800f182:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f186:	0c1b      	lsrs	r3, r3, #16
 800f188:	fb0a b303 	mla	r3, sl, r3, fp
 800f18c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f190:	454f      	cmp	r7, r9
 800f192:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f196:	d805      	bhi.n	800f1a4 <__multiply+0x124>
 800f198:	f8c8 3004 	str.w	r3, [r8, #4]
 800f19c:	3504      	adds	r5, #4
 800f19e:	e79b      	b.n	800f0d8 <__multiply+0x58>
 800f1a0:	46d4      	mov	ip, sl
 800f1a2:	e7b3      	b.n	800f10c <__multiply+0x8c>
 800f1a4:	46e0      	mov	r8, ip
 800f1a6:	e7dd      	b.n	800f164 <__multiply+0xe4>
 800f1a8:	3e01      	subs	r6, #1
 800f1aa:	e799      	b.n	800f0e0 <__multiply+0x60>

0800f1ac <__pow5mult>:
 800f1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1b0:	4615      	mov	r5, r2
 800f1b2:	f012 0203 	ands.w	r2, r2, #3
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	460f      	mov	r7, r1
 800f1ba:	d007      	beq.n	800f1cc <__pow5mult+0x20>
 800f1bc:	3a01      	subs	r2, #1
 800f1be:	4c21      	ldr	r4, [pc, #132]	; (800f244 <__pow5mult+0x98>)
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1c6:	f7ff fec9 	bl	800ef5c <__multadd>
 800f1ca:	4607      	mov	r7, r0
 800f1cc:	10ad      	asrs	r5, r5, #2
 800f1ce:	d035      	beq.n	800f23c <__pow5mult+0x90>
 800f1d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1d2:	b93c      	cbnz	r4, 800f1e4 <__pow5mult+0x38>
 800f1d4:	2010      	movs	r0, #16
 800f1d6:	f7ff fe51 	bl	800ee7c <malloc>
 800f1da:	6270      	str	r0, [r6, #36]	; 0x24
 800f1dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f1e0:	6004      	str	r4, [r0, #0]
 800f1e2:	60c4      	str	r4, [r0, #12]
 800f1e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f1e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f1ec:	b94c      	cbnz	r4, 800f202 <__pow5mult+0x56>
 800f1ee:	f240 2171 	movw	r1, #625	; 0x271
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f7ff ff3b 	bl	800f06e <__i2b>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f1fe:	4604      	mov	r4, r0
 800f200:	6003      	str	r3, [r0, #0]
 800f202:	f04f 0800 	mov.w	r8, #0
 800f206:	07eb      	lsls	r3, r5, #31
 800f208:	d50a      	bpl.n	800f220 <__pow5mult+0x74>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4622      	mov	r2, r4
 800f20e:	4630      	mov	r0, r6
 800f210:	f7ff ff36 	bl	800f080 <__multiply>
 800f214:	4639      	mov	r1, r7
 800f216:	4681      	mov	r9, r0
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff fe88 	bl	800ef2e <_Bfree>
 800f21e:	464f      	mov	r7, r9
 800f220:	106d      	asrs	r5, r5, #1
 800f222:	d00b      	beq.n	800f23c <__pow5mult+0x90>
 800f224:	6820      	ldr	r0, [r4, #0]
 800f226:	b938      	cbnz	r0, 800f238 <__pow5mult+0x8c>
 800f228:	4622      	mov	r2, r4
 800f22a:	4621      	mov	r1, r4
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7ff ff27 	bl	800f080 <__multiply>
 800f232:	6020      	str	r0, [r4, #0]
 800f234:	f8c0 8000 	str.w	r8, [r0]
 800f238:	4604      	mov	r4, r0
 800f23a:	e7e4      	b.n	800f206 <__pow5mult+0x5a>
 800f23c:	4638      	mov	r0, r7
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	bf00      	nop
 800f244:	080100b0 	.word	0x080100b0

0800f248 <__lshift>:
 800f248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f24c:	460c      	mov	r4, r1
 800f24e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f252:	6923      	ldr	r3, [r4, #16]
 800f254:	6849      	ldr	r1, [r1, #4]
 800f256:	eb0a 0903 	add.w	r9, sl, r3
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	4607      	mov	r7, r0
 800f25e:	4616      	mov	r6, r2
 800f260:	f109 0501 	add.w	r5, r9, #1
 800f264:	42ab      	cmp	r3, r5
 800f266:	db32      	blt.n	800f2ce <__lshift+0x86>
 800f268:	4638      	mov	r0, r7
 800f26a:	f7ff fe2c 	bl	800eec6 <_Balloc>
 800f26e:	2300      	movs	r3, #0
 800f270:	4680      	mov	r8, r0
 800f272:	f100 0114 	add.w	r1, r0, #20
 800f276:	461a      	mov	r2, r3
 800f278:	4553      	cmp	r3, sl
 800f27a:	db2b      	blt.n	800f2d4 <__lshift+0x8c>
 800f27c:	6920      	ldr	r0, [r4, #16]
 800f27e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f282:	f104 0314 	add.w	r3, r4, #20
 800f286:	f016 021f 	ands.w	r2, r6, #31
 800f28a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f28e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f292:	d025      	beq.n	800f2e0 <__lshift+0x98>
 800f294:	f1c2 0e20 	rsb	lr, r2, #32
 800f298:	2000      	movs	r0, #0
 800f29a:	681e      	ldr	r6, [r3, #0]
 800f29c:	468a      	mov	sl, r1
 800f29e:	4096      	lsls	r6, r2
 800f2a0:	4330      	orrs	r0, r6
 800f2a2:	f84a 0b04 	str.w	r0, [sl], #4
 800f2a6:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2aa:	459c      	cmp	ip, r3
 800f2ac:	fa20 f00e 	lsr.w	r0, r0, lr
 800f2b0:	d814      	bhi.n	800f2dc <__lshift+0x94>
 800f2b2:	6048      	str	r0, [r1, #4]
 800f2b4:	b108      	cbz	r0, 800f2ba <__lshift+0x72>
 800f2b6:	f109 0502 	add.w	r5, r9, #2
 800f2ba:	3d01      	subs	r5, #1
 800f2bc:	4638      	mov	r0, r7
 800f2be:	f8c8 5010 	str.w	r5, [r8, #16]
 800f2c2:	4621      	mov	r1, r4
 800f2c4:	f7ff fe33 	bl	800ef2e <_Bfree>
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ce:	3101      	adds	r1, #1
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	e7c7      	b.n	800f264 <__lshift+0x1c>
 800f2d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	e7cd      	b.n	800f278 <__lshift+0x30>
 800f2dc:	4651      	mov	r1, sl
 800f2de:	e7dc      	b.n	800f29a <__lshift+0x52>
 800f2e0:	3904      	subs	r1, #4
 800f2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e6:	f841 2f04 	str.w	r2, [r1, #4]!
 800f2ea:	459c      	cmp	ip, r3
 800f2ec:	d8f9      	bhi.n	800f2e2 <__lshift+0x9a>
 800f2ee:	e7e4      	b.n	800f2ba <__lshift+0x72>

0800f2f0 <__mcmp>:
 800f2f0:	6903      	ldr	r3, [r0, #16]
 800f2f2:	690a      	ldr	r2, [r1, #16]
 800f2f4:	1a9b      	subs	r3, r3, r2
 800f2f6:	b530      	push	{r4, r5, lr}
 800f2f8:	d10c      	bne.n	800f314 <__mcmp+0x24>
 800f2fa:	0092      	lsls	r2, r2, #2
 800f2fc:	3014      	adds	r0, #20
 800f2fe:	3114      	adds	r1, #20
 800f300:	1884      	adds	r4, r0, r2
 800f302:	4411      	add	r1, r2
 800f304:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f308:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f30c:	4295      	cmp	r5, r2
 800f30e:	d003      	beq.n	800f318 <__mcmp+0x28>
 800f310:	d305      	bcc.n	800f31e <__mcmp+0x2e>
 800f312:	2301      	movs	r3, #1
 800f314:	4618      	mov	r0, r3
 800f316:	bd30      	pop	{r4, r5, pc}
 800f318:	42a0      	cmp	r0, r4
 800f31a:	d3f3      	bcc.n	800f304 <__mcmp+0x14>
 800f31c:	e7fa      	b.n	800f314 <__mcmp+0x24>
 800f31e:	f04f 33ff 	mov.w	r3, #4294967295
 800f322:	e7f7      	b.n	800f314 <__mcmp+0x24>

0800f324 <__mdiff>:
 800f324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f328:	460d      	mov	r5, r1
 800f32a:	4607      	mov	r7, r0
 800f32c:	4611      	mov	r1, r2
 800f32e:	4628      	mov	r0, r5
 800f330:	4614      	mov	r4, r2
 800f332:	f7ff ffdd 	bl	800f2f0 <__mcmp>
 800f336:	1e06      	subs	r6, r0, #0
 800f338:	d108      	bne.n	800f34c <__mdiff+0x28>
 800f33a:	4631      	mov	r1, r6
 800f33c:	4638      	mov	r0, r7
 800f33e:	f7ff fdc2 	bl	800eec6 <_Balloc>
 800f342:	2301      	movs	r3, #1
 800f344:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f34c:	bfa4      	itt	ge
 800f34e:	4623      	movge	r3, r4
 800f350:	462c      	movge	r4, r5
 800f352:	4638      	mov	r0, r7
 800f354:	6861      	ldr	r1, [r4, #4]
 800f356:	bfa6      	itte	ge
 800f358:	461d      	movge	r5, r3
 800f35a:	2600      	movge	r6, #0
 800f35c:	2601      	movlt	r6, #1
 800f35e:	f7ff fdb2 	bl	800eec6 <_Balloc>
 800f362:	692b      	ldr	r3, [r5, #16]
 800f364:	60c6      	str	r6, [r0, #12]
 800f366:	6926      	ldr	r6, [r4, #16]
 800f368:	f105 0914 	add.w	r9, r5, #20
 800f36c:	f104 0214 	add.w	r2, r4, #20
 800f370:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f374:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f378:	f100 0514 	add.w	r5, r0, #20
 800f37c:	f04f 0e00 	mov.w	lr, #0
 800f380:	f852 ab04 	ldr.w	sl, [r2], #4
 800f384:	f859 4b04 	ldr.w	r4, [r9], #4
 800f388:	fa1e f18a 	uxtah	r1, lr, sl
 800f38c:	b2a3      	uxth	r3, r4
 800f38e:	1ac9      	subs	r1, r1, r3
 800f390:	0c23      	lsrs	r3, r4, #16
 800f392:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f396:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f39a:	b289      	uxth	r1, r1
 800f39c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f3a0:	45c8      	cmp	r8, r9
 800f3a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3a6:	4694      	mov	ip, r2
 800f3a8:	f845 3b04 	str.w	r3, [r5], #4
 800f3ac:	d8e8      	bhi.n	800f380 <__mdiff+0x5c>
 800f3ae:	45bc      	cmp	ip, r7
 800f3b0:	d304      	bcc.n	800f3bc <__mdiff+0x98>
 800f3b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f3b6:	b183      	cbz	r3, 800f3da <__mdiff+0xb6>
 800f3b8:	6106      	str	r6, [r0, #16]
 800f3ba:	e7c5      	b.n	800f348 <__mdiff+0x24>
 800f3bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3c0:	fa1e f381 	uxtah	r3, lr, r1
 800f3c4:	141a      	asrs	r2, r3, #16
 800f3c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f3d4:	f845 3b04 	str.w	r3, [r5], #4
 800f3d8:	e7e9      	b.n	800f3ae <__mdiff+0x8a>
 800f3da:	3e01      	subs	r6, #1
 800f3dc:	e7e9      	b.n	800f3b2 <__mdiff+0x8e>

0800f3de <__d2b>:
 800f3de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3e2:	460e      	mov	r6, r1
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	ec59 8b10 	vmov	r8, r9, d0
 800f3ea:	4615      	mov	r5, r2
 800f3ec:	f7ff fd6b 	bl	800eec6 <_Balloc>
 800f3f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3fa:	bb34      	cbnz	r4, 800f44a <__d2b+0x6c>
 800f3fc:	9301      	str	r3, [sp, #4]
 800f3fe:	f1b8 0300 	subs.w	r3, r8, #0
 800f402:	d027      	beq.n	800f454 <__d2b+0x76>
 800f404:	a802      	add	r0, sp, #8
 800f406:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f40a:	f7ff fe01 	bl	800f010 <__lo0bits>
 800f40e:	9900      	ldr	r1, [sp, #0]
 800f410:	b1f0      	cbz	r0, 800f450 <__d2b+0x72>
 800f412:	9a01      	ldr	r2, [sp, #4]
 800f414:	f1c0 0320 	rsb	r3, r0, #32
 800f418:	fa02 f303 	lsl.w	r3, r2, r3
 800f41c:	430b      	orrs	r3, r1
 800f41e:	40c2      	lsrs	r2, r0
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	9201      	str	r2, [sp, #4]
 800f424:	9b01      	ldr	r3, [sp, #4]
 800f426:	61bb      	str	r3, [r7, #24]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	bf14      	ite	ne
 800f42c:	2102      	movne	r1, #2
 800f42e:	2101      	moveq	r1, #1
 800f430:	6139      	str	r1, [r7, #16]
 800f432:	b1c4      	cbz	r4, 800f466 <__d2b+0x88>
 800f434:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f438:	4404      	add	r4, r0
 800f43a:	6034      	str	r4, [r6, #0]
 800f43c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f440:	6028      	str	r0, [r5, #0]
 800f442:	4638      	mov	r0, r7
 800f444:	b003      	add	sp, #12
 800f446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f44a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f44e:	e7d5      	b.n	800f3fc <__d2b+0x1e>
 800f450:	6179      	str	r1, [r7, #20]
 800f452:	e7e7      	b.n	800f424 <__d2b+0x46>
 800f454:	a801      	add	r0, sp, #4
 800f456:	f7ff fddb 	bl	800f010 <__lo0bits>
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	617b      	str	r3, [r7, #20]
 800f45e:	2101      	movs	r1, #1
 800f460:	6139      	str	r1, [r7, #16]
 800f462:	3020      	adds	r0, #32
 800f464:	e7e5      	b.n	800f432 <__d2b+0x54>
 800f466:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f46a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f46e:	6030      	str	r0, [r6, #0]
 800f470:	6918      	ldr	r0, [r3, #16]
 800f472:	f7ff fdae 	bl	800efd2 <__hi0bits>
 800f476:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f47a:	e7e1      	b.n	800f440 <__d2b+0x62>

0800f47c <_calloc_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	fb02 f401 	mul.w	r4, r2, r1
 800f482:	4621      	mov	r1, r4
 800f484:	f000 f856 	bl	800f534 <_malloc_r>
 800f488:	4605      	mov	r5, r0
 800f48a:	b118      	cbz	r0, 800f494 <_calloc_r+0x18>
 800f48c:	4622      	mov	r2, r4
 800f48e:	2100      	movs	r1, #0
 800f490:	f7fe f970 	bl	800d774 <memset>
 800f494:	4628      	mov	r0, r5
 800f496:	bd38      	pop	{r3, r4, r5, pc}

0800f498 <_free_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4605      	mov	r5, r0
 800f49c:	2900      	cmp	r1, #0
 800f49e:	d045      	beq.n	800f52c <_free_r+0x94>
 800f4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4a4:	1f0c      	subs	r4, r1, #4
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	bfb8      	it	lt
 800f4aa:	18e4      	addlt	r4, r4, r3
 800f4ac:	f000 fa24 	bl	800f8f8 <__malloc_lock>
 800f4b0:	4a1f      	ldr	r2, [pc, #124]	; (800f530 <_free_r+0x98>)
 800f4b2:	6813      	ldr	r3, [r2, #0]
 800f4b4:	4610      	mov	r0, r2
 800f4b6:	b933      	cbnz	r3, 800f4c6 <_free_r+0x2e>
 800f4b8:	6063      	str	r3, [r4, #4]
 800f4ba:	6014      	str	r4, [r2, #0]
 800f4bc:	4628      	mov	r0, r5
 800f4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4c2:	f000 ba1a 	b.w	800f8fa <__malloc_unlock>
 800f4c6:	42a3      	cmp	r3, r4
 800f4c8:	d90c      	bls.n	800f4e4 <_free_r+0x4c>
 800f4ca:	6821      	ldr	r1, [r4, #0]
 800f4cc:	1862      	adds	r2, r4, r1
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	bf04      	itt	eq
 800f4d2:	681a      	ldreq	r2, [r3, #0]
 800f4d4:	685b      	ldreq	r3, [r3, #4]
 800f4d6:	6063      	str	r3, [r4, #4]
 800f4d8:	bf04      	itt	eq
 800f4da:	1852      	addeq	r2, r2, r1
 800f4dc:	6022      	streq	r2, [r4, #0]
 800f4de:	6004      	str	r4, [r0, #0]
 800f4e0:	e7ec      	b.n	800f4bc <_free_r+0x24>
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	685a      	ldr	r2, [r3, #4]
 800f4e6:	b10a      	cbz	r2, 800f4ec <_free_r+0x54>
 800f4e8:	42a2      	cmp	r2, r4
 800f4ea:	d9fa      	bls.n	800f4e2 <_free_r+0x4a>
 800f4ec:	6819      	ldr	r1, [r3, #0]
 800f4ee:	1858      	adds	r0, r3, r1
 800f4f0:	42a0      	cmp	r0, r4
 800f4f2:	d10b      	bne.n	800f50c <_free_r+0x74>
 800f4f4:	6820      	ldr	r0, [r4, #0]
 800f4f6:	4401      	add	r1, r0
 800f4f8:	1858      	adds	r0, r3, r1
 800f4fa:	4282      	cmp	r2, r0
 800f4fc:	6019      	str	r1, [r3, #0]
 800f4fe:	d1dd      	bne.n	800f4bc <_free_r+0x24>
 800f500:	6810      	ldr	r0, [r2, #0]
 800f502:	6852      	ldr	r2, [r2, #4]
 800f504:	605a      	str	r2, [r3, #4]
 800f506:	4401      	add	r1, r0
 800f508:	6019      	str	r1, [r3, #0]
 800f50a:	e7d7      	b.n	800f4bc <_free_r+0x24>
 800f50c:	d902      	bls.n	800f514 <_free_r+0x7c>
 800f50e:	230c      	movs	r3, #12
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	e7d3      	b.n	800f4bc <_free_r+0x24>
 800f514:	6820      	ldr	r0, [r4, #0]
 800f516:	1821      	adds	r1, r4, r0
 800f518:	428a      	cmp	r2, r1
 800f51a:	bf04      	itt	eq
 800f51c:	6811      	ldreq	r1, [r2, #0]
 800f51e:	6852      	ldreq	r2, [r2, #4]
 800f520:	6062      	str	r2, [r4, #4]
 800f522:	bf04      	itt	eq
 800f524:	1809      	addeq	r1, r1, r0
 800f526:	6021      	streq	r1, [r4, #0]
 800f528:	605c      	str	r4, [r3, #4]
 800f52a:	e7c7      	b.n	800f4bc <_free_r+0x24>
 800f52c:	bd38      	pop	{r3, r4, r5, pc}
 800f52e:	bf00      	nop
 800f530:	2000027c 	.word	0x2000027c

0800f534 <_malloc_r>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	1ccd      	adds	r5, r1, #3
 800f538:	f025 0503 	bic.w	r5, r5, #3
 800f53c:	3508      	adds	r5, #8
 800f53e:	2d0c      	cmp	r5, #12
 800f540:	bf38      	it	cc
 800f542:	250c      	movcc	r5, #12
 800f544:	2d00      	cmp	r5, #0
 800f546:	4606      	mov	r6, r0
 800f548:	db01      	blt.n	800f54e <_malloc_r+0x1a>
 800f54a:	42a9      	cmp	r1, r5
 800f54c:	d903      	bls.n	800f556 <_malloc_r+0x22>
 800f54e:	230c      	movs	r3, #12
 800f550:	6033      	str	r3, [r6, #0]
 800f552:	2000      	movs	r0, #0
 800f554:	bd70      	pop	{r4, r5, r6, pc}
 800f556:	f000 f9cf 	bl	800f8f8 <__malloc_lock>
 800f55a:	4a21      	ldr	r2, [pc, #132]	; (800f5e0 <_malloc_r+0xac>)
 800f55c:	6814      	ldr	r4, [r2, #0]
 800f55e:	4621      	mov	r1, r4
 800f560:	b991      	cbnz	r1, 800f588 <_malloc_r+0x54>
 800f562:	4c20      	ldr	r4, [pc, #128]	; (800f5e4 <_malloc_r+0xb0>)
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	b91b      	cbnz	r3, 800f570 <_malloc_r+0x3c>
 800f568:	4630      	mov	r0, r6
 800f56a:	f000 f98f 	bl	800f88c <_sbrk_r>
 800f56e:	6020      	str	r0, [r4, #0]
 800f570:	4629      	mov	r1, r5
 800f572:	4630      	mov	r0, r6
 800f574:	f000 f98a 	bl	800f88c <_sbrk_r>
 800f578:	1c43      	adds	r3, r0, #1
 800f57a:	d124      	bne.n	800f5c6 <_malloc_r+0x92>
 800f57c:	230c      	movs	r3, #12
 800f57e:	6033      	str	r3, [r6, #0]
 800f580:	4630      	mov	r0, r6
 800f582:	f000 f9ba 	bl	800f8fa <__malloc_unlock>
 800f586:	e7e4      	b.n	800f552 <_malloc_r+0x1e>
 800f588:	680b      	ldr	r3, [r1, #0]
 800f58a:	1b5b      	subs	r3, r3, r5
 800f58c:	d418      	bmi.n	800f5c0 <_malloc_r+0x8c>
 800f58e:	2b0b      	cmp	r3, #11
 800f590:	d90f      	bls.n	800f5b2 <_malloc_r+0x7e>
 800f592:	600b      	str	r3, [r1, #0]
 800f594:	50cd      	str	r5, [r1, r3]
 800f596:	18cc      	adds	r4, r1, r3
 800f598:	4630      	mov	r0, r6
 800f59a:	f000 f9ae 	bl	800f8fa <__malloc_unlock>
 800f59e:	f104 000b 	add.w	r0, r4, #11
 800f5a2:	1d23      	adds	r3, r4, #4
 800f5a4:	f020 0007 	bic.w	r0, r0, #7
 800f5a8:	1ac3      	subs	r3, r0, r3
 800f5aa:	d0d3      	beq.n	800f554 <_malloc_r+0x20>
 800f5ac:	425a      	negs	r2, r3
 800f5ae:	50e2      	str	r2, [r4, r3]
 800f5b0:	e7d0      	b.n	800f554 <_malloc_r+0x20>
 800f5b2:	428c      	cmp	r4, r1
 800f5b4:	684b      	ldr	r3, [r1, #4]
 800f5b6:	bf16      	itet	ne
 800f5b8:	6063      	strne	r3, [r4, #4]
 800f5ba:	6013      	streq	r3, [r2, #0]
 800f5bc:	460c      	movne	r4, r1
 800f5be:	e7eb      	b.n	800f598 <_malloc_r+0x64>
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	6849      	ldr	r1, [r1, #4]
 800f5c4:	e7cc      	b.n	800f560 <_malloc_r+0x2c>
 800f5c6:	1cc4      	adds	r4, r0, #3
 800f5c8:	f024 0403 	bic.w	r4, r4, #3
 800f5cc:	42a0      	cmp	r0, r4
 800f5ce:	d005      	beq.n	800f5dc <_malloc_r+0xa8>
 800f5d0:	1a21      	subs	r1, r4, r0
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f000 f95a 	bl	800f88c <_sbrk_r>
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d0cf      	beq.n	800f57c <_malloc_r+0x48>
 800f5dc:	6025      	str	r5, [r4, #0]
 800f5de:	e7db      	b.n	800f598 <_malloc_r+0x64>
 800f5e0:	2000027c 	.word	0x2000027c
 800f5e4:	20000280 	.word	0x20000280

0800f5e8 <__ssputs_r>:
 800f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	688e      	ldr	r6, [r1, #8]
 800f5ee:	429e      	cmp	r6, r3
 800f5f0:	4682      	mov	sl, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	4690      	mov	r8, r2
 800f5f6:	4699      	mov	r9, r3
 800f5f8:	d837      	bhi.n	800f66a <__ssputs_r+0x82>
 800f5fa:	898a      	ldrh	r2, [r1, #12]
 800f5fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f600:	d031      	beq.n	800f666 <__ssputs_r+0x7e>
 800f602:	6825      	ldr	r5, [r4, #0]
 800f604:	6909      	ldr	r1, [r1, #16]
 800f606:	1a6f      	subs	r7, r5, r1
 800f608:	6965      	ldr	r5, [r4, #20]
 800f60a:	2302      	movs	r3, #2
 800f60c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f610:	fb95 f5f3 	sdiv	r5, r5, r3
 800f614:	f109 0301 	add.w	r3, r9, #1
 800f618:	443b      	add	r3, r7
 800f61a:	429d      	cmp	r5, r3
 800f61c:	bf38      	it	cc
 800f61e:	461d      	movcc	r5, r3
 800f620:	0553      	lsls	r3, r2, #21
 800f622:	d530      	bpl.n	800f686 <__ssputs_r+0x9e>
 800f624:	4629      	mov	r1, r5
 800f626:	f7ff ff85 	bl	800f534 <_malloc_r>
 800f62a:	4606      	mov	r6, r0
 800f62c:	b950      	cbnz	r0, 800f644 <__ssputs_r+0x5c>
 800f62e:	230c      	movs	r3, #12
 800f630:	f8ca 3000 	str.w	r3, [sl]
 800f634:	89a3      	ldrh	r3, [r4, #12]
 800f636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f63a:	81a3      	strh	r3, [r4, #12]
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f644:	463a      	mov	r2, r7
 800f646:	6921      	ldr	r1, [r4, #16]
 800f648:	f7ff fc32 	bl	800eeb0 <memcpy>
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f656:	81a3      	strh	r3, [r4, #12]
 800f658:	6126      	str	r6, [r4, #16]
 800f65a:	6165      	str	r5, [r4, #20]
 800f65c:	443e      	add	r6, r7
 800f65e:	1bed      	subs	r5, r5, r7
 800f660:	6026      	str	r6, [r4, #0]
 800f662:	60a5      	str	r5, [r4, #8]
 800f664:	464e      	mov	r6, r9
 800f666:	454e      	cmp	r6, r9
 800f668:	d900      	bls.n	800f66c <__ssputs_r+0x84>
 800f66a:	464e      	mov	r6, r9
 800f66c:	4632      	mov	r2, r6
 800f66e:	4641      	mov	r1, r8
 800f670:	6820      	ldr	r0, [r4, #0]
 800f672:	f000 f928 	bl	800f8c6 <memmove>
 800f676:	68a3      	ldr	r3, [r4, #8]
 800f678:	1b9b      	subs	r3, r3, r6
 800f67a:	60a3      	str	r3, [r4, #8]
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	441e      	add	r6, r3
 800f680:	6026      	str	r6, [r4, #0]
 800f682:	2000      	movs	r0, #0
 800f684:	e7dc      	b.n	800f640 <__ssputs_r+0x58>
 800f686:	462a      	mov	r2, r5
 800f688:	f000 f938 	bl	800f8fc <_realloc_r>
 800f68c:	4606      	mov	r6, r0
 800f68e:	2800      	cmp	r0, #0
 800f690:	d1e2      	bne.n	800f658 <__ssputs_r+0x70>
 800f692:	6921      	ldr	r1, [r4, #16]
 800f694:	4650      	mov	r0, sl
 800f696:	f7ff feff 	bl	800f498 <_free_r>
 800f69a:	e7c8      	b.n	800f62e <__ssputs_r+0x46>

0800f69c <_svfiprintf_r>:
 800f69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a0:	461d      	mov	r5, r3
 800f6a2:	898b      	ldrh	r3, [r1, #12]
 800f6a4:	061f      	lsls	r7, r3, #24
 800f6a6:	b09d      	sub	sp, #116	; 0x74
 800f6a8:	4680      	mov	r8, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	4616      	mov	r6, r2
 800f6ae:	d50f      	bpl.n	800f6d0 <_svfiprintf_r+0x34>
 800f6b0:	690b      	ldr	r3, [r1, #16]
 800f6b2:	b96b      	cbnz	r3, 800f6d0 <_svfiprintf_r+0x34>
 800f6b4:	2140      	movs	r1, #64	; 0x40
 800f6b6:	f7ff ff3d 	bl	800f534 <_malloc_r>
 800f6ba:	6020      	str	r0, [r4, #0]
 800f6bc:	6120      	str	r0, [r4, #16]
 800f6be:	b928      	cbnz	r0, 800f6cc <_svfiprintf_r+0x30>
 800f6c0:	230c      	movs	r3, #12
 800f6c2:	f8c8 3000 	str.w	r3, [r8]
 800f6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ca:	e0c8      	b.n	800f85e <_svfiprintf_r+0x1c2>
 800f6cc:	2340      	movs	r3, #64	; 0x40
 800f6ce:	6163      	str	r3, [r4, #20]
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d4:	2320      	movs	r3, #32
 800f6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6da:	2330      	movs	r3, #48	; 0x30
 800f6dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6e0:	9503      	str	r5, [sp, #12]
 800f6e2:	f04f 0b01 	mov.w	fp, #1
 800f6e6:	4637      	mov	r7, r6
 800f6e8:	463d      	mov	r5, r7
 800f6ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f6ee:	b10b      	cbz	r3, 800f6f4 <_svfiprintf_r+0x58>
 800f6f0:	2b25      	cmp	r3, #37	; 0x25
 800f6f2:	d13e      	bne.n	800f772 <_svfiprintf_r+0xd6>
 800f6f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800f6f8:	d00b      	beq.n	800f712 <_svfiprintf_r+0x76>
 800f6fa:	4653      	mov	r3, sl
 800f6fc:	4632      	mov	r2, r6
 800f6fe:	4621      	mov	r1, r4
 800f700:	4640      	mov	r0, r8
 800f702:	f7ff ff71 	bl	800f5e8 <__ssputs_r>
 800f706:	3001      	adds	r0, #1
 800f708:	f000 80a4 	beq.w	800f854 <_svfiprintf_r+0x1b8>
 800f70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f70e:	4453      	add	r3, sl
 800f710:	9309      	str	r3, [sp, #36]	; 0x24
 800f712:	783b      	ldrb	r3, [r7, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	f000 809d 	beq.w	800f854 <_svfiprintf_r+0x1b8>
 800f71a:	2300      	movs	r3, #0
 800f71c:	f04f 32ff 	mov.w	r2, #4294967295
 800f720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f724:	9304      	str	r3, [sp, #16]
 800f726:	9307      	str	r3, [sp, #28]
 800f728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f72c:	931a      	str	r3, [sp, #104]	; 0x68
 800f72e:	462f      	mov	r7, r5
 800f730:	2205      	movs	r2, #5
 800f732:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f736:	4850      	ldr	r0, [pc, #320]	; (800f878 <_svfiprintf_r+0x1dc>)
 800f738:	f7f0 fd62 	bl	8000200 <memchr>
 800f73c:	9b04      	ldr	r3, [sp, #16]
 800f73e:	b9d0      	cbnz	r0, 800f776 <_svfiprintf_r+0xda>
 800f740:	06d9      	lsls	r1, r3, #27
 800f742:	bf44      	itt	mi
 800f744:	2220      	movmi	r2, #32
 800f746:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f74a:	071a      	lsls	r2, r3, #28
 800f74c:	bf44      	itt	mi
 800f74e:	222b      	movmi	r2, #43	; 0x2b
 800f750:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f754:	782a      	ldrb	r2, [r5, #0]
 800f756:	2a2a      	cmp	r2, #42	; 0x2a
 800f758:	d015      	beq.n	800f786 <_svfiprintf_r+0xea>
 800f75a:	9a07      	ldr	r2, [sp, #28]
 800f75c:	462f      	mov	r7, r5
 800f75e:	2000      	movs	r0, #0
 800f760:	250a      	movs	r5, #10
 800f762:	4639      	mov	r1, r7
 800f764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f768:	3b30      	subs	r3, #48	; 0x30
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d94d      	bls.n	800f80a <_svfiprintf_r+0x16e>
 800f76e:	b1b8      	cbz	r0, 800f7a0 <_svfiprintf_r+0x104>
 800f770:	e00f      	b.n	800f792 <_svfiprintf_r+0xf6>
 800f772:	462f      	mov	r7, r5
 800f774:	e7b8      	b.n	800f6e8 <_svfiprintf_r+0x4c>
 800f776:	4a40      	ldr	r2, [pc, #256]	; (800f878 <_svfiprintf_r+0x1dc>)
 800f778:	1a80      	subs	r0, r0, r2
 800f77a:	fa0b f000 	lsl.w	r0, fp, r0
 800f77e:	4318      	orrs	r0, r3
 800f780:	9004      	str	r0, [sp, #16]
 800f782:	463d      	mov	r5, r7
 800f784:	e7d3      	b.n	800f72e <_svfiprintf_r+0x92>
 800f786:	9a03      	ldr	r2, [sp, #12]
 800f788:	1d11      	adds	r1, r2, #4
 800f78a:	6812      	ldr	r2, [r2, #0]
 800f78c:	9103      	str	r1, [sp, #12]
 800f78e:	2a00      	cmp	r2, #0
 800f790:	db01      	blt.n	800f796 <_svfiprintf_r+0xfa>
 800f792:	9207      	str	r2, [sp, #28]
 800f794:	e004      	b.n	800f7a0 <_svfiprintf_r+0x104>
 800f796:	4252      	negs	r2, r2
 800f798:	f043 0302 	orr.w	r3, r3, #2
 800f79c:	9207      	str	r2, [sp, #28]
 800f79e:	9304      	str	r3, [sp, #16]
 800f7a0:	783b      	ldrb	r3, [r7, #0]
 800f7a2:	2b2e      	cmp	r3, #46	; 0x2e
 800f7a4:	d10c      	bne.n	800f7c0 <_svfiprintf_r+0x124>
 800f7a6:	787b      	ldrb	r3, [r7, #1]
 800f7a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7aa:	d133      	bne.n	800f814 <_svfiprintf_r+0x178>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	1d1a      	adds	r2, r3, #4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	9203      	str	r2, [sp, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	bfb8      	it	lt
 800f7b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7bc:	3702      	adds	r7, #2
 800f7be:	9305      	str	r3, [sp, #20]
 800f7c0:	4d2e      	ldr	r5, [pc, #184]	; (800f87c <_svfiprintf_r+0x1e0>)
 800f7c2:	7839      	ldrb	r1, [r7, #0]
 800f7c4:	2203      	movs	r2, #3
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f7f0 fd1a 	bl	8000200 <memchr>
 800f7cc:	b138      	cbz	r0, 800f7de <_svfiprintf_r+0x142>
 800f7ce:	2340      	movs	r3, #64	; 0x40
 800f7d0:	1b40      	subs	r0, r0, r5
 800f7d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f7d6:	9b04      	ldr	r3, [sp, #16]
 800f7d8:	4303      	orrs	r3, r0
 800f7da:	3701      	adds	r7, #1
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	7839      	ldrb	r1, [r7, #0]
 800f7e0:	4827      	ldr	r0, [pc, #156]	; (800f880 <_svfiprintf_r+0x1e4>)
 800f7e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7e6:	2206      	movs	r2, #6
 800f7e8:	1c7e      	adds	r6, r7, #1
 800f7ea:	f7f0 fd09 	bl	8000200 <memchr>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d038      	beq.n	800f864 <_svfiprintf_r+0x1c8>
 800f7f2:	4b24      	ldr	r3, [pc, #144]	; (800f884 <_svfiprintf_r+0x1e8>)
 800f7f4:	bb13      	cbnz	r3, 800f83c <_svfiprintf_r+0x1a0>
 800f7f6:	9b03      	ldr	r3, [sp, #12]
 800f7f8:	3307      	adds	r3, #7
 800f7fa:	f023 0307 	bic.w	r3, r3, #7
 800f7fe:	3308      	adds	r3, #8
 800f800:	9303      	str	r3, [sp, #12]
 800f802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f804:	444b      	add	r3, r9
 800f806:	9309      	str	r3, [sp, #36]	; 0x24
 800f808:	e76d      	b.n	800f6e6 <_svfiprintf_r+0x4a>
 800f80a:	fb05 3202 	mla	r2, r5, r2, r3
 800f80e:	2001      	movs	r0, #1
 800f810:	460f      	mov	r7, r1
 800f812:	e7a6      	b.n	800f762 <_svfiprintf_r+0xc6>
 800f814:	2300      	movs	r3, #0
 800f816:	3701      	adds	r7, #1
 800f818:	9305      	str	r3, [sp, #20]
 800f81a:	4619      	mov	r1, r3
 800f81c:	250a      	movs	r5, #10
 800f81e:	4638      	mov	r0, r7
 800f820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f824:	3a30      	subs	r2, #48	; 0x30
 800f826:	2a09      	cmp	r2, #9
 800f828:	d903      	bls.n	800f832 <_svfiprintf_r+0x196>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d0c8      	beq.n	800f7c0 <_svfiprintf_r+0x124>
 800f82e:	9105      	str	r1, [sp, #20]
 800f830:	e7c6      	b.n	800f7c0 <_svfiprintf_r+0x124>
 800f832:	fb05 2101 	mla	r1, r5, r1, r2
 800f836:	2301      	movs	r3, #1
 800f838:	4607      	mov	r7, r0
 800f83a:	e7f0      	b.n	800f81e <_svfiprintf_r+0x182>
 800f83c:	ab03      	add	r3, sp, #12
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	4622      	mov	r2, r4
 800f842:	4b11      	ldr	r3, [pc, #68]	; (800f888 <_svfiprintf_r+0x1ec>)
 800f844:	a904      	add	r1, sp, #16
 800f846:	4640      	mov	r0, r8
 800f848:	f7fe f830 	bl	800d8ac <_printf_float>
 800f84c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f850:	4681      	mov	r9, r0
 800f852:	d1d6      	bne.n	800f802 <_svfiprintf_r+0x166>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	065b      	lsls	r3, r3, #25
 800f858:	f53f af35 	bmi.w	800f6c6 <_svfiprintf_r+0x2a>
 800f85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f85e:	b01d      	add	sp, #116	; 0x74
 800f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f864:	ab03      	add	r3, sp, #12
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	4622      	mov	r2, r4
 800f86a:	4b07      	ldr	r3, [pc, #28]	; (800f888 <_svfiprintf_r+0x1ec>)
 800f86c:	a904      	add	r1, sp, #16
 800f86e:	4640      	mov	r0, r8
 800f870:	f7fe fad2 	bl	800de18 <_printf_i>
 800f874:	e7ea      	b.n	800f84c <_svfiprintf_r+0x1b0>
 800f876:	bf00      	nop
 800f878:	080100bc 	.word	0x080100bc
 800f87c:	080100c2 	.word	0x080100c2
 800f880:	080100c6 	.word	0x080100c6
 800f884:	0800d8ad 	.word	0x0800d8ad
 800f888:	0800f5e9 	.word	0x0800f5e9

0800f88c <_sbrk_r>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	4c06      	ldr	r4, [pc, #24]	; (800f8a8 <_sbrk_r+0x1c>)
 800f890:	2300      	movs	r3, #0
 800f892:	4605      	mov	r5, r0
 800f894:	4608      	mov	r0, r1
 800f896:	6023      	str	r3, [r4, #0]
 800f898:	f7f9 fed8 	bl	800964c <_sbrk>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d102      	bne.n	800f8a6 <_sbrk_r+0x1a>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	b103      	cbz	r3, 800f8a6 <_sbrk_r+0x1a>
 800f8a4:	602b      	str	r3, [r5, #0]
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	20002e04 	.word	0x20002e04

0800f8ac <__ascii_wctomb>:
 800f8ac:	b149      	cbz	r1, 800f8c2 <__ascii_wctomb+0x16>
 800f8ae:	2aff      	cmp	r2, #255	; 0xff
 800f8b0:	bf85      	ittet	hi
 800f8b2:	238a      	movhi	r3, #138	; 0x8a
 800f8b4:	6003      	strhi	r3, [r0, #0]
 800f8b6:	700a      	strbls	r2, [r1, #0]
 800f8b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8bc:	bf98      	it	ls
 800f8be:	2001      	movls	r0, #1
 800f8c0:	4770      	bx	lr
 800f8c2:	4608      	mov	r0, r1
 800f8c4:	4770      	bx	lr

0800f8c6 <memmove>:
 800f8c6:	4288      	cmp	r0, r1
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	eb01 0302 	add.w	r3, r1, r2
 800f8ce:	d807      	bhi.n	800f8e0 <memmove+0x1a>
 800f8d0:	1e42      	subs	r2, r0, #1
 800f8d2:	4299      	cmp	r1, r3
 800f8d4:	d00a      	beq.n	800f8ec <memmove+0x26>
 800f8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8da:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f8de:	e7f8      	b.n	800f8d2 <memmove+0xc>
 800f8e0:	4283      	cmp	r3, r0
 800f8e2:	d9f5      	bls.n	800f8d0 <memmove+0xa>
 800f8e4:	1881      	adds	r1, r0, r2
 800f8e6:	1ad2      	subs	r2, r2, r3
 800f8e8:	42d3      	cmn	r3, r2
 800f8ea:	d100      	bne.n	800f8ee <memmove+0x28>
 800f8ec:	bd10      	pop	{r4, pc}
 800f8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f8f6:	e7f7      	b.n	800f8e8 <memmove+0x22>

0800f8f8 <__malloc_lock>:
 800f8f8:	4770      	bx	lr

0800f8fa <__malloc_unlock>:
 800f8fa:	4770      	bx	lr

0800f8fc <_realloc_r>:
 800f8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fe:	4607      	mov	r7, r0
 800f900:	4614      	mov	r4, r2
 800f902:	460e      	mov	r6, r1
 800f904:	b921      	cbnz	r1, 800f910 <_realloc_r+0x14>
 800f906:	4611      	mov	r1, r2
 800f908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f90c:	f7ff be12 	b.w	800f534 <_malloc_r>
 800f910:	b922      	cbnz	r2, 800f91c <_realloc_r+0x20>
 800f912:	f7ff fdc1 	bl	800f498 <_free_r>
 800f916:	4625      	mov	r5, r4
 800f918:	4628      	mov	r0, r5
 800f91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f91c:	f000 f814 	bl	800f948 <_malloc_usable_size_r>
 800f920:	42a0      	cmp	r0, r4
 800f922:	d20f      	bcs.n	800f944 <_realloc_r+0x48>
 800f924:	4621      	mov	r1, r4
 800f926:	4638      	mov	r0, r7
 800f928:	f7ff fe04 	bl	800f534 <_malloc_r>
 800f92c:	4605      	mov	r5, r0
 800f92e:	2800      	cmp	r0, #0
 800f930:	d0f2      	beq.n	800f918 <_realloc_r+0x1c>
 800f932:	4631      	mov	r1, r6
 800f934:	4622      	mov	r2, r4
 800f936:	f7ff fabb 	bl	800eeb0 <memcpy>
 800f93a:	4631      	mov	r1, r6
 800f93c:	4638      	mov	r0, r7
 800f93e:	f7ff fdab 	bl	800f498 <_free_r>
 800f942:	e7e9      	b.n	800f918 <_realloc_r+0x1c>
 800f944:	4635      	mov	r5, r6
 800f946:	e7e7      	b.n	800f918 <_realloc_r+0x1c>

0800f948 <_malloc_usable_size_r>:
 800f948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f94c:	1f18      	subs	r0, r3, #4
 800f94e:	2b00      	cmp	r3, #0
 800f950:	bfbc      	itt	lt
 800f952:	580b      	ldrlt	r3, [r1, r0]
 800f954:	18c0      	addlt	r0, r0, r3
 800f956:	4770      	bx	lr

0800f958 <_init>:
 800f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95a:	bf00      	nop
 800f95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f95e:	bc08      	pop	{r3}
 800f960:	469e      	mov	lr, r3
 800f962:	4770      	bx	lr

0800f964 <_fini>:
 800f964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f966:	bf00      	nop
 800f968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96a:	bc08      	pop	{r3}
 800f96c:	469e      	mov	lr, r3
 800f96e:	4770      	bx	lr
