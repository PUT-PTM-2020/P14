
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08008fb8  08008fb8  00018fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d0  080092d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d8  080092d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080092e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200001e4  080094c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  080094c4  000209c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dd0  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf8  00000000  00000000  00034fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001378  00000000  00000000  00037ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  00039058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a45  00000000  00000000  0003a268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010822  00000000  00000000  0005dcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d65db  00000000  00000000  0006e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f0  00000000  00000000  00144b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fa0 	.word	0x08008fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08008fa0 	.word	0x08008fa0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <LCD_Init>:
uint8_t _rowOffsets[4];

uint8_t _currentRow;
uint8_t _currentCol;

void LCD_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
	_rs = GPIO_PIN_4;
 8000e06:	4b5b      	ldr	r3, [pc, #364]	; (8000f74 <LCD_Init+0x174>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	801a      	strh	r2, [r3, #0]
	_rw = GPIO_PIN_5;
 8000e0c:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <LCD_Init+0x178>)
 8000e0e:	2220      	movs	r2, #32
 8000e10:	801a      	strh	r2, [r3, #0]
	_enable = GPIO_PIN_6;
 8000e12:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <LCD_Init+0x17c>)
 8000e14:	2240      	movs	r2, #64	; 0x40
 8000e16:	801a      	strh	r2, [r3, #0]

	_data[0] = GPIO_PIN_0;
 8000e18:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <LCD_Init+0x180>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	801a      	strh	r2, [r3, #0]
	_data[1] = GPIO_PIN_1;
 8000e1e:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <LCD_Init+0x180>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	805a      	strh	r2, [r3, #2]
	_data[2] = GPIO_PIN_2;
 8000e24:	4b56      	ldr	r3, [pc, #344]	; (8000f80 <LCD_Init+0x180>)
 8000e26:	2204      	movs	r2, #4
 8000e28:	809a      	strh	r2, [r3, #4]
	_data[3] = GPIO_PIN_3;
 8000e2a:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <LCD_Init+0x180>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	80da      	strh	r2, [r3, #6]

	_displayFunction = LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS;
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <LCD_Init+0x184>)
 8000e32:	2208      	movs	r2, #8
 8000e34:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e3c:	4852      	ldr	r0, [pc, #328]	; (8000f88 <LCD_Init+0x188>)
 8000e3e:	f002 ff8f 	bl	8003d60 <HAL_GPIO_WritePin>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + LCD_COLUMNS, 0x40 + LCD_COLUMNS);
 8000e42:	2354      	movs	r3, #84	; 0x54
 8000e44:	2214      	movs	r2, #20
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f8c1 	bl	8000fd0 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 8000e4e:	2032      	movs	r0, #50	; 0x32
 8000e50:	f002 fc7e 	bl	8003750 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_PORT, _rs, GPIO_PIN_RESET);
 8000e54:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <LCD_Init+0x174>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	484b      	ldr	r0, [pc, #300]	; (8000f8c <LCD_Init+0x18c>)
 8000e5e:	f002 ff7f 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <LCD_Init+0x17c>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4848      	ldr	r0, [pc, #288]	; (8000f8c <LCD_Init+0x18c>)
 8000e6c:	f002 ff78 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, _rw, GPIO_PIN_RESET);
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <LCD_Init+0x178>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4844      	ldr	r0, [pc, #272]	; (8000f8c <LCD_Init+0x18c>)
 8000e7a:	f002 ff71 	bl	8003d60 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 fa5e 	bl	8001340 <_LCD_WriteData>
	HAL_Delay(5);
 8000e84:	2005      	movs	r0, #5
 8000e86:	f002 fc63 	bl	8003750 <HAL_Delay>

	_LCD_WriteData(0x03);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f000 fa58 	bl	8001340 <_LCD_WriteData>
	HAL_Delay(5);
 8000e90:	2005      	movs	r0, #5
 8000e92:	f002 fc5d 	bl	8003750 <HAL_Delay>

	_LCD_WriteData(0x03);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 fa52 	bl	8001340 <_LCD_WriteData>
	HAL_Delay(1);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f002 fc57 	bl	8003750 <HAL_Delay>

	_LCD_WriteData(0x02);
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f000 fa4c 	bl	8001340 <_LCD_WriteData>
	_LCD_SendCommand(LCD_FUNCTIONSET | _displayFunction);
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <LCD_Init+0x184>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f9a7 	bl	8001206 <_LCD_SendCommand>
	_displayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <LCD_Init+0x190>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8000ebe:	f000 f8ed 	bl	800109c <LCD_DisplayOn>
	LCD_ClearScreen();
 8000ec2:	f000 f8a5 	bl	8001010 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <LCD_Init+0x194>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(LCD_ENTRYMODESET | _displayMode);
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <LCD_Init+0x194>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f995 	bl	8001206 <_LCD_SendCommand>

	_currentRow = 0;
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <LCD_Init+0x198>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <LCD_Init+0x19c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 8000ee8:	482d      	ldr	r0, [pc, #180]	; (8000fa0 <LCD_Init+0x1a0>)
 8000eea:	f000 f911 	bl	8001110 <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8000eee:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <LCD_Init+0x1a4>)
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(7, char7); /* Stopnie */
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4619      	mov	r1, r3
 8000f02:	2007      	movs	r0, #7
 8000f04:	f000 f956 	bl	80011b4 <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <LCD_Init+0x1a8>)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f12:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(6, char6); /* Temp IN */
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2006      	movs	r0, #6
 8000f1e:	f000 f949 	bl	80011b4 <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <LCD_Init+0x1ac>)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2c:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(5, char5); /* Temp OUT */
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	2005      	movs	r0, #5
 8000f38:	f000 f93c 	bl	80011b4 <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <LCD_Init+0x1b0>)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(4, char4); /* Humid IN */
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2004      	movs	r0, #4
 8000f52:	f000 f92f 	bl	80011b4 <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <LCD_Init+0x1b4>)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(3, char3); /* Humid OUT */
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f924 	bl	80011b4 <LCD_DefineCustomChar>
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000460 	.word	0x20000460
 8000f78:	2000044a 	.word	0x2000044a
 8000f7c:	20000464 	.word	0x20000464
 8000f80:	20000458 	.word	0x20000458
 8000f84:	2000044c 	.word	0x2000044c
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	20000454 	.word	0x20000454
 8000f94:	20000456 	.word	0x20000456
 8000f98:	20000448 	.word	0x20000448
 8000f9c:	20000455 	.word	0x20000455
 8000fa0:	08008fb8 	.word	0x08008fb8
 8000fa4:	08008fc4 	.word	0x08008fc4
 8000fa8:	08008fcc 	.word	0x08008fcc
 8000fac:	08008fd4 	.word	0x08008fd4
 8000fb0:	08008fdc 	.word	0x08008fdc
 8000fb4:	08008fe4 	.word	0x08008fe4

08000fb8 <LCD_ToggleBackgroundLED>:

void LCD_ToggleBackgroundLED(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <LCD_ToggleBackgroundLED+0x14>)
 8000fc2:	f002 fee6 	bl	8003d92 <HAL_GPIO_TogglePin>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <_LCD_SetRowOffsets>:

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <_LCD_SetRowOffsets+0x3c>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <_LCD_SetRowOffsets+0x3c>)
 8000fec:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <_LCD_SetRowOffsets+0x3c>)
 8000ff4:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <_LCD_SetRowOffsets+0x3c>)
 8000ffc:	70da      	strb	r2, [r3, #3]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000450 	.word	0x20000450

08001010 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	_LCD_SendCommand(LCD_CLEARDISPLAY);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 f8f6 	bl	8001206 <_LCD_SendCommand>
	HAL_Delay(2);
 800101a:	2002      	movs	r0, #2
 800101c:	f002 fb98 	bl	8003750 <HAL_Delay>
	LCD_ResetCursor();
 8001020:	f000 f802 	bl	8001028 <LCD_ResetCursor>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	_LCD_SendCommand(LCD_RETURNHOME);
 800102c:	2002      	movs	r0, #2
 800102e:	f000 f8ea 	bl	8001206 <_LCD_SendCommand>
	HAL_Delay(2);
 8001032:	2002      	movs	r0, #2
 8001034:	f002 fb8c 	bl	8003750 <HAL_Delay>
	LCD_SetCursor(0, 0);
 8001038:	2100      	movs	r1, #0
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f802 	bl	8001044 <LCD_SetCursor>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	/* Aby nigdy nie wyjsc poza zakres tablicy */
	if (row >= LCD_ROWS) {
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d901      	bls.n	800105e <LCD_SetCursor+0x1a>
		row = LCD_ROWS - 1;
 800105a:	2303      	movs	r3, #3
 800105c:	71bb      	strb	r3, [r7, #6]
	}

	_LCD_SendCommand(LCD_SETDDRAMADDR | (col + _rowOffsets[row]));
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LCD_SetCursor+0x4c>)
 8001062:	5cd2      	ldrb	r2, [r2, r3]
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4413      	add	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001070:	b25b      	sxtb	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f8c6 	bl	8001206 <_LCD_SendCommand>
	_currentRow = row;
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <LCD_SetCursor+0x50>)
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <LCD_SetCursor+0x54>)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	7013      	strb	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000450 	.word	0x20000450
 8001094:	20000448 	.word	0x20000448
 8001098:	20000455 	.word	0x20000455

0800109c <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~LCD_DISPLAYON;
	_LCD_SendCommand(LCD_DISPLAYCONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	_displayControl |= LCD_DISPLAYON;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <LCD_DisplayOn+0x28>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <LCD_DisplayOn+0x28>)
 80010ac:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(LCD_DISPLAYCONTROL | _displayControl);
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <LCD_DisplayOn+0x28>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f8a4 	bl	8001206 <_LCD_SendCommand>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000454 	.word	0x20000454

080010c8 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~LCD_ENTRYSHIFTINCREMENT;
	_LCD_SendCommand(LCD_ENTRYMODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d018      	beq.n	8001108 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff f874 	bl	80001c8 <strlen>
 80010e0:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e00a      	b.n	80010fe <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f896 	bl	8001224 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3301      	adds	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	429a      	cmp	r2, r3
 8001104:	d8f0      	bhi.n	80010e8 <LCD_Print+0x20>
 8001106:	e000      	b.n	800110a <LCD_Print+0x42>
		return;
 8001108:	bf00      	nop
	}
}
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff f855 	bl	80001c8 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b14      	cmp	r3, #20
 8001126:	dc14      	bgt.n	8001152 <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((LCD_COLUMNS - size) / 2);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f1c3 0314 	rsb	r3, r3, #20
 800112e:	0fda      	lsrs	r2, r3, #31
 8001130:	4413      	add	r3, r2
 8001132:	105b      	asrs	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <LCD_PrintCentered+0x4c>)
 8001138:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <LCD_PrintCentered+0x4c>)
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LCD_PrintCentered+0x50>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	4610      	mov	r0, r2
 8001146:	f7ff ff7d 	bl	8001044 <LCD_SetCursor>
	LCD_Print(str);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffbc 	bl	80010c8 <LCD_Print>
 8001150:	e000      	b.n	8001154 <LCD_PrintCentered+0x44>
		return;
 8001152:	bf00      	nop
}
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000455 	.word	0x20000455
 8001160:	20000448 	.word	0x20000448

08001164 <LCD_NextLine>:
	}

	LCD_NextLine("");
}

void LCD_NextLine(const char text[]) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffab 	bl	80010c8 <LCD_Print>

	_currentCol = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <LCD_NextLine+0x48>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <LCD_NextLine+0x4c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LCD_NextLine+0x4c>)
 8001182:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= LCD_ROWS) {
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <LCD_NextLine+0x4c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d902      	bls.n	8001192 <LCD_NextLine+0x2e>
		_currentRow = 0;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <LCD_NextLine+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <LCD_NextLine+0x48>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <LCD_NextLine+0x4c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	4610      	mov	r0, r2
 800119e:	f7ff ff51 	bl	8001044 <LCD_SetCursor>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000455 	.word	0x20000455
 80011b0:	20000448 	.word	0x20000448

080011b4 <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f815 	bl	8001206 <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e00a      	b.n	80011f8 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f819 	bl	8001224 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b07      	cmp	r3, #7
 80011fc:	ddf1      	ble.n	80011e2 <LCD_DefineCustomChar+0x2e>
	}
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f83f 	bl	8001298 <_LCD_SendByteWithState>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f82d 	bl	8001298 <_LCD_SendByteWithState>

	if (moveCursor) {
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d021      	beq.n	8001288 <_LCD_SendData+0x64>
		++_currentCol;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <_LCD_SendData+0x6c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_LCD_SendData+0x6c>)
 800124e:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= LCD_COLUMNS) {
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <_LCD_SendData+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b13      	cmp	r3, #19
 8001256:	d917      	bls.n	8001288 <_LCD_SendData+0x64>
			_currentCol = 0;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <_LCD_SendData+0x6c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <_LCD_SendData+0x70>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <_LCD_SendData+0x70>)
 8001268:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= LCD_ROWS) {
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <_LCD_SendData+0x70>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d902      	bls.n	8001278 <_LCD_SendData+0x54>
				_currentRow = 0;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_LCD_SendData+0x70>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_LCD_SendData+0x6c>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <_LCD_SendData+0x70>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4610      	mov	r0, r2
 8001284:	f7ff fede 	bl	8001044 <LCD_SetCursor>
		}
	}
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000455 	.word	0x20000455
 8001294:	20000448 	.word	0x20000448

08001298 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_PORT, _rs, mode);
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <_LCD_SendByteWithState+0x50>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	4619      	mov	r1, r3
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <_LCD_SendByteWithState+0x54>)
 80012b2:	f002 fd55 	bl	8003d60 <HAL_GPIO_WritePin>

	if (_rw != 255) {
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <_LCD_SendByteWithState+0x58>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d006      	beq.n	80012cc <_LCD_SendByteWithState+0x34>
		HAL_GPIO_WritePin(LCD_PORT, _rw, GPIO_PIN_RESET);
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <_LCD_SendByteWithState+0x58>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <_LCD_SendByteWithState+0x54>)
 80012c8:	f002 fd4a 	bl	8003d60 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f834 	bl	8001340 <_LCD_WriteData>
	_LCD_WriteData(value);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f830 	bl	8001340 <_LCD_WriteData>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000460 	.word	0x20000460
 80012ec:	40021000 	.word	0x40021000
 80012f0:	2000044a 	.word	0x2000044a

080012f4 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <_LCD_EnableSignal+0x44>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <_LCD_EnableSignal+0x48>)
 8001302:	f002 fd2d 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f002 fa22 	bl	8003750 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_SET);
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <_LCD_EnableSignal+0x44>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <_LCD_EnableSignal+0x48>)
 8001316:	f002 fd23 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f002 fa18 	bl	8003750 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT, _enable, GPIO_PIN_RESET);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <_LCD_EnableSignal+0x44>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <_LCD_EnableSignal+0x48>)
 800132a:	f002 fd19 	bl	8003d60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f002 fa0e 	bl	8003750 <HAL_Delay>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000464 	.word	0x20000464
 800133c:	40021000 	.word	0x40021000

08001340 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e012      	b.n	8001376 <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(LCD_PORT, _data[i],
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <_LCD_WriteData+0x48>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	fa42 f303 	asr.w	r3, r2, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(LCD_PORT, _data[i],
 8001368:	461a      	mov	r2, r3
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <_LCD_WriteData+0x4c>)
 800136c:	f002 fcf8 	bl	8003d60 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b03      	cmp	r3, #3
 800137a:	dde9      	ble.n	8001350 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 800137c:	f7ff ffba 	bl	80012f4 <_LCD_EnableSignal>
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000458 	.word	0x20000458
 800138c:	40021000 	.word	0x40021000

08001390 <RGB_Init>:
	
uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <RGB_Init+0x2c>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <RGB_Init+0x30>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <RGB_Init+0x34>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	_state = 0;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <RGB_Init+0x38>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	801a      	strh	r2, [r3, #0]
	_mode = NONE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <RGB_Init+0x3c>)
 80013ae:	220a      	movs	r2, #10
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20000470 	.word	0x20000470
 80013c0:	20000468 	.word	0x20000468
 80013c4:	20000474 	.word	0x20000474
 80013c8:	2000046c 	.word	0x2000046c
 80013cc:	20000478 	.word	0x20000478

080013d0 <RGB_SetWhite>:
void RGB_SetWhite(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	_mode = White;
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <RGB_SetWhite+0x2c>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = RGB_MAX_REGISTER_VAL;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <RGB_SetWhite+0x30>)
 80013dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e0:	601a      	str	r2, [r3, #0]
	_CCR2 = RGB_MAX_REGISTER_VAL;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <RGB_SetWhite+0x34>)
 80013e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e8:	601a      	str	r2, [r3, #0]
	_CCR3 = RGB_MAX_REGISTER_VAL;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <RGB_SetWhite+0x38>)
 80013ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f0:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 80013f2:	f000 f879 	bl	80014e8 <_RGB_UpdateRegisters>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000478 	.word	0x20000478
 8001400:	20000470 	.word	0x20000470
 8001404:	20000468 	.word	0x20000468
 8001408:	20000474 	.word	0x20000474

0800140c <RGB_SetRed>:
void RGB_SetRed(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	_mode = Red;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <RGB_SetRed+0x28>)
 8001412:	2202      	movs	r2, #2
 8001414:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = RGB_MAX_REGISTER_VAL;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <RGB_SetRed+0x2c>)
 8001418:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141c:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <RGB_SetRed+0x30>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <RGB_SetRed+0x34>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 800142a:	f000 f85d 	bl	80014e8 <_RGB_UpdateRegisters>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000478 	.word	0x20000478
 8001438:	20000470 	.word	0x20000470
 800143c:	20000468 	.word	0x20000468
 8001440:	20000474 	.word	0x20000474

08001444 <RGB_SetGreen>:
void RGB_SetGreen(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	_mode = Green;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <RGB_SetGreen+0x28>)
 800144a:	2203      	movs	r2, #3
 800144c:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <RGB_SetGreen+0x2c>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	_CCR2 = RGB_MAX_REGISTER_VAL;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <RGB_SetGreen+0x30>)
 8001456:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145a:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <RGB_SetGreen+0x34>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 8001462:	f000 f841 	bl	80014e8 <_RGB_UpdateRegisters>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000478 	.word	0x20000478
 8001470:	20000470 	.word	0x20000470
 8001474:	20000468 	.word	0x20000468
 8001478:	20000474 	.word	0x20000474

0800147c <RGB_SetBlue>:
void RGB_SetBlue(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	_mode = Blue;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <RGB_SetBlue+0x28>)
 8001482:	2204      	movs	r2, #4
 8001484:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <RGB_SetBlue+0x2c>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <RGB_SetBlue+0x30>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	_CCR3 = RGB_MAX_REGISTER_VAL;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <RGB_SetBlue+0x34>)
 8001494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001498:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 800149a:	f000 f825 	bl	80014e8 <_RGB_UpdateRegisters>
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000478 	.word	0x20000478
 80014a8:	20000470 	.word	0x20000470
 80014ac:	20000468 	.word	0x20000468
 80014b0:	20000474 	.word	0x20000474

080014b4 <RGB_SetBlack>:
void RGB_SetBlack(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	_mode = Disabled;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <RGB_SetBlack+0x24>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <RGB_SetBlack+0x28>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <RGB_SetBlack+0x2c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <RGB_SetBlack+0x30>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
	
	_RGB_UpdateRegisters();
 80014d0:	f000 f80a 	bl	80014e8 <_RGB_UpdateRegisters>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000478 	.word	0x20000478
 80014dc:	20000470 	.word	0x20000470
 80014e0:	20000468 	.word	0x20000468
 80014e4:	20000474 	.word	0x20000474

080014e8 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
	if (_CCR1 > RGB_MAX_REGISTER_VAL) _CCR1 = RGB_MAX_REGISTER_VAL;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <_RGB_UpdateRegisters+0x80>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f4:	d303      	bcc.n	80014fe <_RGB_UpdateRegisters+0x16>
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <_RGB_UpdateRegisters+0x80>)
 80014f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014fc:	601a      	str	r2, [r3, #0]
	if (_CCR2 > RGB_MAX_REGISTER_VAL) _CCR2 = RGB_MAX_REGISTER_VAL;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <_RGB_UpdateRegisters+0x84>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001506:	d303      	bcc.n	8001510 <_RGB_UpdateRegisters+0x28>
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <_RGB_UpdateRegisters+0x84>)
 800150a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150e:	601a      	str	r2, [r3, #0]
	if (_CCR3 > RGB_MAX_REGISTER_VAL) _CCR3 = RGB_MAX_REGISTER_VAL;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <_RGB_UpdateRegisters+0x88>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001518:	d303      	bcc.n	8001522 <_RGB_UpdateRegisters+0x3a>
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_RGB_UpdateRegisters+0x88>)
 800151c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001520:	601a      	str	r2, [r3, #0]
	
	if (_CCR1 < 0) _CCR1 = 0;
	if (_CCR2 < 0) _CCR2 = 0;
	if (_CCR3 < 0) _CCR3 = 0;
	
	TIM2->CCR1 = _CCR1;
 8001522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <_RGB_UpdateRegisters+0x80>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 800152c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <_RGB_UpdateRegisters+0x84>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8001536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <_RGB_UpdateRegisters+0x88>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	63d3      	str	r3, [r2, #60]	; 0x3c
	
	++_state;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <_RGB_UpdateRegisters+0x8c>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <_RGB_UpdateRegisters+0x8c>)
 800154a:	801a      	strh	r2, [r3, #0]
	if (_state > RGB_MAX_REGISTER_VAL - 3) _state = 0;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <_RGB_UpdateRegisters+0x8c>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8001554:	d902      	bls.n	800155c <_RGB_UpdateRegisters+0x74>
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_RGB_UpdateRegisters+0x8c>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000470 	.word	0x20000470
 800156c:	20000468 	.word	0x20000468
 8001570:	20000474 	.word	0x20000474
 8001574:	2000046c 	.word	0x2000046c

08001578 <RGB_Rainbow>:

void RGB_Rainbow(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	if (_mode != Rainbow) _state = 0;
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <RGB_Rainbow+0x10c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b09      	cmp	r3, #9
 8001582:	d002      	beq.n	800158a <RGB_Rainbow+0x12>
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <RGB_Rainbow+0x110>)
 8001586:	2200      	movs	r2, #0
 8001588:	801a      	strh	r2, [r3, #0]
	_mode = Rainbow;
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <RGB_Rainbow+0x10c>)
 800158c:	2209      	movs	r2, #9
 800158e:	701a      	strb	r2, [r3, #0]
	
	switch (_state)
 8001590:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <RGB_Rainbow+0x110>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	f240 124d 	movw	r2, #333	; 0x14d
 8001598:	4293      	cmp	r3, r2
 800159a:	d010      	beq.n	80015be <RGB_Rainbow+0x46>
 800159c:	f240 229a 	movw	r2, #666	; 0x29a
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d017      	beq.n	80015d4 <RGB_Rainbow+0x5c>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d120      	bne.n	80015ea <RGB_Rainbow+0x72>
	{
	case 0: 
		{
			_CCR1 = RGB_MAX_REGISTER_VAL;
 80015a8:	4b38      	ldr	r3, [pc, #224]	; (800168c <RGB_Rainbow+0x114>)
 80015aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ae:	601a      	str	r2, [r3, #0]
			_CCR2 = 0;
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <RGB_Rainbow+0x118>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
			_CCR3 = 0;
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <RGB_Rainbow+0x11c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
			break;
 80015bc:	e05e      	b.n	800167c <RGB_Rainbow+0x104>
		}
	case (int)(RGB_MAX_REGISTER_VAL / 3): 
		{
			_CCR1 = 0;
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <RGB_Rainbow+0x114>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
			_CCR2 = RGB_MAX_REGISTER_VAL;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <RGB_Rainbow+0x118>)
 80015c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ca:	601a      	str	r2, [r3, #0]
			_CCR3 = 0;
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <RGB_Rainbow+0x11c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
			break;
 80015d2:	e053      	b.n	800167c <RGB_Rainbow+0x104>
		}
	case (int)(RGB_MAX_REGISTER_VAL * 2 / 3): 
		{
			_CCR1 = 0;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <RGB_Rainbow+0x114>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
			_CCR2 = 0;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <RGB_Rainbow+0x118>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
			_CCR3 = RGB_MAX_REGISTER_VAL;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <RGB_Rainbow+0x11c>)
 80015e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e6:	601a      	str	r2, [r3, #0]
			break;
 80015e8:	e048      	b.n	800167c <RGB_Rainbow+0x104>
		}
	default: 
		{
			if (_state > 0 && (_state < RGB_MAX_REGISTER_VAL / 3))
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <RGB_Rainbow+0x110>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d012      	beq.n	8001618 <RGB_Rainbow+0xa0>
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <RGB_Rainbow+0x110>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 80015fa:	d80d      	bhi.n	8001618 <RGB_Rainbow+0xa0>
			{
				_CCR1 -= 3;
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <RGB_Rainbow+0x114>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b03      	subs	r3, #3
 8001602:	4a22      	ldr	r2, [pc, #136]	; (800168c <RGB_Rainbow+0x114>)
 8001604:	6013      	str	r3, [r2, #0]
				_CCR2 += 3;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <RGB_Rainbow+0x118>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3303      	adds	r3, #3
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <RGB_Rainbow+0x118>)
 800160e:	6013      	str	r3, [r2, #0]
				_CCR3 = 0;
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <RGB_Rainbow+0x11c>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e031      	b.n	800167c <RGB_Rainbow+0x104>
			}
			else if ((_state > RGB_MAX_REGISTER_VAL / 3) && (_state < RGB_MAX_REGISTER_VAL * 2 / 3))
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <RGB_Rainbow+0x110>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8001620:	d313      	bcc.n	800164a <RGB_Rainbow+0xd2>
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <RGB_Rainbow+0x110>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f240 2299 	movw	r2, #665	; 0x299
 800162a:	4293      	cmp	r3, r2
 800162c:	d80d      	bhi.n	800164a <RGB_Rainbow+0xd2>
			{
				_CCR1 = 0;
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <RGB_Rainbow+0x114>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
				_CCR2 -= 3;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <RGB_Rainbow+0x118>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b03      	subs	r3, #3
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <RGB_Rainbow+0x118>)
 800163c:	6013      	str	r3, [r2, #0]
				_CCR3 += 3;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <RGB_Rainbow+0x11c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3303      	adds	r3, #3
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <RGB_Rainbow+0x11c>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e018      	b.n	800167c <RGB_Rainbow+0x104>
			}
			else if ((_state > RGB_MAX_REGISTER_VAL * 2 / 3) && (_state < RGB_MAX_REGISTER_VAL))
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <RGB_Rainbow+0x110>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	f240 229a 	movw	r2, #666	; 0x29a
 8001652:	4293      	cmp	r3, r2
 8001654:	d912      	bls.n	800167c <RGB_Rainbow+0x104>
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <RGB_Rainbow+0x110>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800165e:	4293      	cmp	r3, r2
 8001660:	d80c      	bhi.n	800167c <RGB_Rainbow+0x104>
			{
				_CCR1 += 3;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <RGB_Rainbow+0x114>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3303      	adds	r3, #3
 8001668:	4a08      	ldr	r2, [pc, #32]	; (800168c <RGB_Rainbow+0x114>)
 800166a:	6013      	str	r3, [r2, #0]
				_CCR2 = 0;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <RGB_Rainbow+0x118>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
				_CCR3 -= 3;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <RGB_Rainbow+0x11c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3b03      	subs	r3, #3
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <RGB_Rainbow+0x11c>)
 800167a:	6013      	str	r3, [r2, #0]
			}
		}
	}
	_RGB_UpdateRegisters();
 800167c:	f7ff ff34 	bl	80014e8 <_RGB_UpdateRegisters>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000478 	.word	0x20000478
 8001688:	2000046c 	.word	0x2000046c
 800168c:	20000470 	.word	0x20000470
 8001690:	20000468 	.word	0x20000468
 8001694:	20000474 	.word	0x20000474

08001698 <RGB_BlinkRed>:

void RGB_BlinkRed(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if (_mode != BlinkRed) _state = 0;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <RGB_BlinkRed+0x5c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d002      	beq.n	80016aa <RGB_BlinkRed+0x12>
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <RGB_BlinkRed+0x60>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
	_mode = BlinkRed;
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <RGB_BlinkRed+0x5c>)
 80016ac:	2206      	movs	r2, #6
 80016ae:	701a      	strb	r2, [r3, #0]
	
	_CCR2 = 0;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <RGB_BlinkRed+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <RGB_BlinkRed+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <RGB_BlinkRed+0x60>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <RGB_BlinkRed+0x34>
	{
		_CCR1 = 0;	
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <RGB_BlinkRed+0x6c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e00f      	b.n	80016ec <RGB_BlinkRed+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <RGB_BlinkRed+0x60>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80016d4:	d805      	bhi.n	80016e2 <RGB_BlinkRed+0x4a>
	{
		_CCR1 += 2;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <RGB_BlinkRed+0x6c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3302      	adds	r3, #2
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <RGB_BlinkRed+0x6c>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e004      	b.n	80016ec <RGB_BlinkRed+0x54>
	}
	else
	{
		_CCR1 -= 2;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <RGB_BlinkRed+0x6c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b02      	subs	r3, #2
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <RGB_BlinkRed+0x6c>)
 80016ea:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 80016ec:	f7ff fefc 	bl	80014e8 <_RGB_UpdateRegisters>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000478 	.word	0x20000478
 80016f8:	2000046c 	.word	0x2000046c
 80016fc:	20000468 	.word	0x20000468
 8001700:	20000474 	.word	0x20000474
 8001704:	20000470 	.word	0x20000470

08001708 <RGB_BlinkGreen>:
void RGB_BlinkGreen(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	if (_mode != BlinkGreen) _state = 0;
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <RGB_BlinkGreen+0x5c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b07      	cmp	r3, #7
 8001712:	d002      	beq.n	800171a <RGB_BlinkGreen+0x12>
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <RGB_BlinkGreen+0x60>)
 8001716:	2200      	movs	r2, #0
 8001718:	801a      	strh	r2, [r3, #0]
	_mode = BlinkGreen;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <RGB_BlinkGreen+0x5c>)
 800171c:	2207      	movs	r2, #7
 800171e:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <RGB_BlinkGreen+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <RGB_BlinkGreen+0x68>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <RGB_BlinkGreen+0x60>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <RGB_BlinkGreen+0x34>
	{
		_CCR2 = 0;	
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <RGB_BlinkGreen+0x6c>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00f      	b.n	800175c <RGB_BlinkGreen+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <RGB_BlinkGreen+0x60>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001744:	d805      	bhi.n	8001752 <RGB_BlinkGreen+0x4a>
	{
		_CCR2 += 2;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <RGB_BlinkGreen+0x6c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3302      	adds	r3, #2
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <RGB_BlinkGreen+0x6c>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e004      	b.n	800175c <RGB_BlinkGreen+0x54>
	}
	else
	{
		_CCR2 -= 2;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <RGB_BlinkGreen+0x6c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3b02      	subs	r3, #2
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <RGB_BlinkGreen+0x6c>)
 800175a:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 800175c:	f7ff fec4 	bl	80014e8 <_RGB_UpdateRegisters>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000478 	.word	0x20000478
 8001768:	2000046c 	.word	0x2000046c
 800176c:	20000470 	.word	0x20000470
 8001770:	20000474 	.word	0x20000474
 8001774:	20000468 	.word	0x20000468

08001778 <RGB_BlinkBlue>:
void RGB_BlinkBlue(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	if (_mode != BlinkBlue) _state = 0;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <RGB_BlinkBlue+0x5c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d002      	beq.n	800178a <RGB_BlinkBlue+0x12>
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <RGB_BlinkBlue+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	801a      	strh	r2, [r3, #0]
	_mode = BlinkBlue;
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <RGB_BlinkBlue+0x5c>)
 800178c:	2208      	movs	r2, #8
 800178e:	701a      	strb	r2, [r3, #0]
	
	_CCR1 = 0;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <RGB_BlinkBlue+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <RGB_BlinkBlue+0x68>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	
	if (_state == 0)
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <RGB_BlinkBlue+0x60>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <RGB_BlinkBlue+0x34>
	{
		_CCR3 = 0;	
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <RGB_BlinkBlue+0x6c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00f      	b.n	80017cc <RGB_BlinkBlue+0x54>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <RGB_BlinkBlue+0x60>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80017b4:	d805      	bhi.n	80017c2 <RGB_BlinkBlue+0x4a>
	{
		_CCR3 += 2;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <RGB_BlinkBlue+0x6c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3302      	adds	r3, #2
 80017bc:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <RGB_BlinkBlue+0x6c>)
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e004      	b.n	80017cc <RGB_BlinkBlue+0x54>
	}
	else
	{
		_CCR3 -= 2;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <RGB_BlinkBlue+0x6c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b02      	subs	r3, #2
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <RGB_BlinkBlue+0x6c>)
 80017ca:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 80017cc:	f7ff fe8c 	bl	80014e8 <_RGB_UpdateRegisters>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000478 	.word	0x20000478
 80017d8:	2000046c 	.word	0x2000046c
 80017dc:	20000470 	.word	0x20000470
 80017e0:	20000468 	.word	0x20000468
 80017e4:	20000474 	.word	0x20000474

080017e8 <RGB_BlinkWhite>:
void RGB_BlinkWhite(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	if (_mode != BlinkWhite) _state = 0;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <RGB_BlinkWhite+0x84>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d002      	beq.n	80017fa <RGB_BlinkWhite+0x12>
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <RGB_BlinkWhite+0x88>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	801a      	strh	r2, [r3, #0]
	_mode = BlinkWhite;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <RGB_BlinkWhite+0x84>)
 80017fc:	2205      	movs	r2, #5
 80017fe:	701a      	strb	r2, [r3, #0]
	
	if (_state == 0)
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <RGB_BlinkWhite+0x88>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <RGB_BlinkWhite+0x34>
	{
		_CCR1 = 0;	
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <RGB_BlinkWhite+0x8c>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;	
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <RGB_BlinkWhite+0x90>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;	
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <RGB_BlinkWhite+0x94>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e023      	b.n	8001864 <RGB_BlinkWhite+0x7c>
	}
	else if (_state < RGB_MAX_REGISTER_VAL / 2)
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <RGB_BlinkWhite+0x88>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001824:	d80f      	bhi.n	8001846 <RGB_BlinkWhite+0x5e>
	{
		_CCR1 += 2;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <RGB_BlinkWhite+0x8c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3302      	adds	r3, #2
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <RGB_BlinkWhite+0x8c>)
 800182e:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <RGB_BlinkWhite+0x90>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3302      	adds	r3, #2
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <RGB_BlinkWhite+0x90>)
 8001838:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <RGB_BlinkWhite+0x94>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <RGB_BlinkWhite+0x94>)
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e00e      	b.n	8001864 <RGB_BlinkWhite+0x7c>
	}
	else
	{
		_CCR1 -= 2;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <RGB_BlinkWhite+0x8c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3b02      	subs	r3, #2
 800184c:	4a09      	ldr	r2, [pc, #36]	; (8001874 <RGB_BlinkWhite+0x8c>)
 800184e:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <RGB_BlinkWhite+0x90>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b02      	subs	r3, #2
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <RGB_BlinkWhite+0x90>)
 8001858:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <RGB_BlinkWhite+0x94>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3b02      	subs	r3, #2
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <RGB_BlinkWhite+0x94>)
 8001862:	6013      	str	r3, [r2, #0]
	}
	
	_RGB_UpdateRegisters();
 8001864:	f7ff fe40 	bl	80014e8 <_RGB_UpdateRegisters>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000478 	.word	0x20000478
 8001870:	2000046c 	.word	0x2000046c
 8001874:	20000470 	.word	0x20000470
 8001878:	20000468 	.word	0x20000468
 800187c:	20000474 	.word	0x20000474

08001880 <_RGB_Test>:

void _RGB_Test(uint8_t choice)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	switch (choice)
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b09      	cmp	r3, #9
 800188e:	d835      	bhi.n	80018fc <_RGB_Test+0x7c>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <_RGB_Test+0x18>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018c1 	.word	0x080018c1
 800189c:	080018c7 	.word	0x080018c7
 80018a0:	080018cd 	.word	0x080018cd
 80018a4:	080018d3 	.word	0x080018d3
 80018a8:	080018d9 	.word	0x080018d9
 80018ac:	080018df 	.word	0x080018df
 80018b0:	080018e5 	.word	0x080018e5
 80018b4:	080018eb 	.word	0x080018eb
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	080018f7 	.word	0x080018f7
	{
	case 0: RGB_SetBlack(); break;
 80018c0:	f7ff fdf8 	bl	80014b4 <RGB_SetBlack>
 80018c4:	e01a      	b.n	80018fc <_RGB_Test+0x7c>
	case 1: RGB_SetWhite(); break;
 80018c6:	f7ff fd83 	bl	80013d0 <RGB_SetWhite>
 80018ca:	e017      	b.n	80018fc <_RGB_Test+0x7c>
	case 2: RGB_SetRed(); break;
 80018cc:	f7ff fd9e 	bl	800140c <RGB_SetRed>
 80018d0:	e014      	b.n	80018fc <_RGB_Test+0x7c>
	case 3: RGB_SetGreen(); break;
 80018d2:	f7ff fdb7 	bl	8001444 <RGB_SetGreen>
 80018d6:	e011      	b.n	80018fc <_RGB_Test+0x7c>
	case 4: RGB_SetBlue(); break;
 80018d8:	f7ff fdd0 	bl	800147c <RGB_SetBlue>
 80018dc:	e00e      	b.n	80018fc <_RGB_Test+0x7c>
	case 5: RGB_BlinkRed(); break;
 80018de:	f7ff fedb 	bl	8001698 <RGB_BlinkRed>
 80018e2:	e00b      	b.n	80018fc <_RGB_Test+0x7c>
	case 6: RGB_BlinkGreen(); break;
 80018e4:	f7ff ff10 	bl	8001708 <RGB_BlinkGreen>
 80018e8:	e008      	b.n	80018fc <_RGB_Test+0x7c>
	case 7: RGB_BlinkBlue(); break;
 80018ea:	f7ff ff45 	bl	8001778 <RGB_BlinkBlue>
 80018ee:	e005      	b.n	80018fc <_RGB_Test+0x7c>
	case 8: RGB_BlinkWhite(); break;
 80018f0:	f7ff ff7a 	bl	80017e8 <RGB_BlinkWhite>
 80018f4:	e002      	b.n	80018fc <_RGB_Test+0x7c>
	case 9: RGB_Rainbow(); break;
 80018f6:	f7ff fe3f 	bl	8001578 <RGB_Rainbow>
 80018fa:	bf00      	nop
	}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <SD_Init>:
extern RTC_TimeTypeDef hTime;
extern RTC_DateTypeDef hDate;

SD_Time _tHandle;

void SD_Init(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	f_mount(&_ffHandle, "", 0);
 8001908:	2200      	movs	r2, #0
 800190a:	4904      	ldr	r1, [pc, #16]	; (800191c <SD_Init+0x18>)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <SD_Init+0x1c>)
 800190e:	f001 f84d 	bl	80029ac <f_mount>

	SD_RefreshDateTime();
 8001912:	f000 f807 	bl	8001924 <SD_RefreshDateTime>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08009048 	.word	0x08009048
 8001920:	20000200 	.word	0x20000200

08001924 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc, &hTime, RTC_FORMAT_BCD);
 8001928:	2201      	movs	r2, #1
 800192a:	4938      	ldr	r1, [pc, #224]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 800192c:	4838      	ldr	r0, [pc, #224]	; (8001a10 <SD_RefreshDateTime+0xec>)
 800192e:	f003 f8f5 	bl	8004b1c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &hDate, RTC_FORMAT_BCD);
 8001932:	2201      	movs	r2, #1
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 8001936:	4836      	ldr	r0, [pc, #216]	; (8001a10 <SD_RefreshDateTime+0xec>)
 8001938:	f003 f9f5 	bl	8004d26 <HAL_RTC_GetDate>

	_tHandle.time[0] = (hTime.Hours / 16) + 48;
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3330      	adds	r3, #48	; 0x30
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 800194a:	719a      	strb	r2, [r3, #6]
	_tHandle.time[1] = (hTime.Hours % 16) + 48;
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3330      	adds	r3, #48	; 0x30
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 800195c:	71da      	strb	r2, [r3, #7]
	_tHandle.time[2] = (hTime.Minutes / 16) + 48;
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3330      	adds	r3, #48	; 0x30
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 800196c:	721a      	strb	r2, [r3, #8]
	_tHandle.time[3] = (hTime.Minutes % 16) + 48;
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3330      	adds	r3, #48	; 0x30
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 800197e:	725a      	strb	r2, [r3, #9]
	_tHandle.time[4] = (hTime.Seconds / 16) + 48;
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3330      	adds	r3, #48	; 0x30
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 800198e:	729a      	strb	r2, [r3, #10]
	_tHandle.time[5] = (hTime.Seconds % 16) + 48;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <SD_RefreshDateTime+0xe8>)
 8001992:	789b      	ldrb	r3, [r3, #2]
 8001994:	f003 030f 	and.w	r3, r3, #15
 8001998:	b2db      	uxtb	r3, r3
 800199a:	3330      	adds	r3, #48	; 0x30
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019a0:	72da      	strb	r2, [r3, #11]

	_tHandle.date[0] = (hDate.Date / 16) + 48;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019a4:	789b      	ldrb	r3, [r3, #2]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3330      	adds	r3, #48	; 0x30
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019b0:	701a      	strb	r2, [r3, #0]
	_tHandle.date[1] = (hDate.Date % 16) + 48;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3330      	adds	r3, #48	; 0x30
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019c2:	705a      	strb	r2, [r3, #1]
	_tHandle.date[2] = (hDate.Month / 16) + 48;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	3330      	adds	r3, #48	; 0x30
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019d2:	709a      	strb	r2, [r3, #2]
	_tHandle.date[3] = (hDate.Month % 16) + 48;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3330      	adds	r3, #48	; 0x30
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019e4:	70da      	strb	r2, [r3, #3]
	_tHandle.date[4] = (hDate.Year / 16) + 48;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019e8:	78db      	ldrb	r3, [r3, #3]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3330      	adds	r3, #48	; 0x30
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 80019f4:	711a      	strb	r2, [r3, #4]
	_tHandle.date[5] = (hDate.Year % 16) + 48;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <SD_RefreshDateTime+0xf0>)
 80019f8:	78db      	ldrb	r3, [r3, #3]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	3330      	adds	r3, #48	; 0x30
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SD_RefreshDateTime+0xf4>)
 8001a06:	715a      	strb	r2, [r3, #5]
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000848 	.word	0x20000848
 8001a10:	200008a0 	.word	0x200008a0
 8001a14:	2000085c 	.word	0x2000085c
 8001a18:	200007a8 	.word	0x200007a8

08001a1c <THS_Init>:

uint32_t _clockCounter;

extern TIM_HandleTypeDef htim4;

void THS_Init() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	_pin1 = GPIO_PIN_0;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <THS_Init+0x28>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	801a      	strh	r2, [r3, #0]
	_pin2 = GPIO_PIN_1;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <THS_Init+0x2c>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	801a      	strh	r2, [r3, #0]

	_clockCounter = 0;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <THS_Init+0x30>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

	HAL_Delay(500);
 8001a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a36:	f001 fe8b 	bl	8003750 <HAL_Delay>
	_ready = true;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <THS_Init+0x34>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200007bc 	.word	0x200007bc
 8001a48:	200007ba 	.word	0x200007ba
 8001a4c:	200007c0 	.word	0x200007c0
 8001a50:	200007b8 	.word	0x200007b8

08001a54 <THS_ErrorClock>:
	data[1] = 0.f;
	return 0;
}

/* Umiescic w obsludze przerwania zegara  tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
	if (_clockCounter > THS_SECOND) {
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <THS_ErrorClock+0x30>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a60:	d905      	bls.n	8001a6e <THS_ErrorClock+0x1a>
		_ready = true;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <THS_ErrorClock+0x34>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <THS_ErrorClock+0x30>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <THS_ErrorClock+0x30>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <THS_ErrorClock+0x30>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200007c0 	.word	0x200007c0
 8001a88:	200007b8 	.word	0x200007b8

08001a8c <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <DESELECT>:

static
inline void DESELECT(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001ab2:	bf00      	nop
 8001ab4:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <xmit_spi+0x30>)
 8001ab6:	f003 fd4f 	bl	8005558 <HAL_SPI_GetState>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d1f9      	bne.n	8001ab4 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8001ac0:	1df9      	adds	r1, r7, #7
 8001ac2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <xmit_spi+0x30>)
 8001aca:	f003 fa6f 	bl	8004fac <HAL_SPI_Transmit>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000924 	.word	0x20000924

08001adc <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8001ae2:	23ff      	movs	r3, #255	; 0xff
 8001ae4:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001aea:	bf00      	nop
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <rcvr_spi+0x38>)
 8001aee:	f003 fd33 	bl	8005558 <HAL_SPI_GetState>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d1f9      	bne.n	8001aec <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8001af8:	1dba      	adds	r2, r7, #6
 8001afa:	1df9      	adds	r1, r7, #7
 8001afc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <rcvr_spi+0x38>)
 8001b06:	f003 fb85 	bl	8005214 <HAL_SPI_TransmitReceive>

	return Data;
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000924 	.word	0x20000924

08001b18 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8001b20:	f7ff ffdc 	bl	8001adc <rcvr_spi>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	701a      	strb	r2, [r3, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <wait_ready+0x34>)
 8001b3c:	2232      	movs	r2, #50	; 0x32
 8001b3e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8001b40:	f7ff ffcc 	bl	8001adc <rcvr_spi>
	do
		res = rcvr_spi();
 8001b44:	f7ff ffca 	bl	8001adc <rcvr_spi>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2bff      	cmp	r3, #255	; 0xff
 8001b50:	d004      	beq.n	8001b5c <wait_ready+0x28>
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <wait_ready+0x34>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f3      	bne.n	8001b44 <wait_ready+0x10>

	return res;
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000431 	.word	0x20000431

08001b6c <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8001b72:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001b76:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8001b78:	f7ff ff8f 	bl	8001a9a <DESELECT>

	for (i = 0; i < 10; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e005      	b.n	8001b8e <power_on+0x22>
		xmit_spi(0xFF);
 8001b82:	20ff      	movs	r0, #255	; 0xff
 8001b84:	f7ff ff90 	bl	8001aa8 <xmit_spi>
	for (i = 0; i < 10; i++)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d9f6      	bls.n	8001b82 <power_on+0x16>

	SELECT();
 8001b94:	f7ff ff7a 	bl	8001a8c <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8001b98:	2340      	movs	r3, #64	; 0x40
 8001b9a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8001bac:	2395      	movs	r3, #149	; 0x95
 8001bae:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e00b      	b.n	8001bce <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	f107 0210 	add.w	r2, r7, #16
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff70 	bl	8001aa8 <xmit_spi>
	for (i = 0; i < 6; i++)
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d9f0      	bls.n	8001bb6 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8001bd4:	e002      	b.n	8001bdc <power_on+0x70>
		Count--;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8001bdc:	f7ff ff7e 	bl	8001adc <rcvr_spi>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d002      	beq.n	8001bec <power_on+0x80>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f4      	bne.n	8001bd6 <power_on+0x6a>

	DESELECT();
 8001bec:	f7ff ff55 	bl	8001a9a <DESELECT>
	xmit_spi(0XFF);
 8001bf0:	20ff      	movs	r0, #255	; 0xff
 8001bf2:	f7ff ff59 	bl	8001aa8 <xmit_spi>

	PowerFlag = 1;
 8001bf6:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <power_on+0x98>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000433 	.word	0x20000433

08001c08 <power_off>:

static
void power_off(void) {
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <power_off+0x14>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000433 	.word	0x20000433

08001c20 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <rcvr_datablock+0x68>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8001c30:	f7ff ff54 	bl	8001adc <rcvr_spi>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	d104      	bne.n	8001c48 <rcvr_datablock+0x28>
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <rcvr_datablock+0x68>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f3      	bne.n	8001c30 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8001c4c:	d001      	beq.n	8001c52 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e016      	b.n	8001c80 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff57 	bl	8001b18 <rcvr_spi_m>
	} while (btr -= 2);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3b02      	subs	r3, #2
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ed      	bne.n	8001c52 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8001c76:	f7ff ff31 	bl	8001adc <rcvr_spi>
	rcvr_spi();
 8001c7a:	f7ff ff2f 	bl	8001adc <rcvr_spi>

	return TRUE; /* Return with success */
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000430 	.word	0x20000430

08001c8c <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8001c9c:	f7ff ff4a 	bl	8001b34 <wait_ready>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d001      	beq.n	8001caa <xmit_datablock+0x1e>
		return FALSE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e040      	b.n	8001d2c <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fefb 	bl	8001aa8 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	2bfd      	cmp	r3, #253	; 0xfd
 8001cb6:	d031      	beq.n	8001d1c <xmit_datablock+0x90>
		wc = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff feef 	bl	8001aa8 <xmit_spi>
			xmit_spi(*buff++);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fee8 	bl	8001aa8 <xmit_spi>
		} while (--wc);
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	73bb      	strb	r3, [r7, #14]
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1eb      	bne.n	8001cbc <xmit_datablock+0x30>

		rcvr_spi();
 8001ce4:	f7ff fefa 	bl	8001adc <rcvr_spi>
		rcvr_spi();
 8001ce8:	f7ff fef8 	bl	8001adc <rcvr_spi>

		while (i <= 64) {
 8001cec:	e00b      	b.n	8001d06 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8001cee:	f7ff fef5 	bl	8001adc <rcvr_spi>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d006      	beq.n	8001d0e <xmit_datablock+0x82>
				break;
			i++;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d9f0      	bls.n	8001cee <xmit_datablock+0x62>
 8001d0c:	e000      	b.n	8001d10 <xmit_datablock+0x84>
				break;
 8001d0e:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8001d10:	bf00      	nop
 8001d12:	f7ff fee3 	bl	8001adc <rcvr_spi>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0fa      	beq.n	8001d12 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d101      	bne.n	8001d2a <xmit_datablock+0x9e>
		return TRUE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <xmit_datablock+0xa0>
	else
		return FALSE;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8001d40:	f7ff fef8 	bl	8001b34 <wait_ready>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2bff      	cmp	r3, #255	; 0xff
 8001d48:	d001      	beq.n	8001d4e <send_cmd+0x1a>
		return 0xFF;
 8001d4a:	23ff      	movs	r3, #255	; 0xff
 8001d4c:	e040      	b.n	8001dd0 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fea9 	bl	8001aa8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	0e1b      	lsrs	r3, r3, #24
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fea3 	bl	8001aa8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe9d 	bl	8001aa8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fe97 	bl	8001aa8 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe92 	bl	8001aa8 <xmit_spi>
	n = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
 8001d8c:	d101      	bne.n	8001d92 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8001d8e:	2395      	movs	r3, #149	; 0x95
 8001d90:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b48      	cmp	r3, #72	; 0x48
 8001d96:	d101      	bne.n	8001d9c <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001d98:	2387      	movs	r3, #135	; 0x87
 8001d9a:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fe82 	bl	8001aa8 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	2b4c      	cmp	r3, #76	; 0x4c
 8001da8:	d101      	bne.n	8001dae <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8001daa:	f7ff fe97 	bl	8001adc <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8001dae:	230a      	movs	r3, #10
 8001db0:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8001db2:	f7ff fe93 	bl	8001adc <rcvr_spi>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8001dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da05      	bge.n	8001dce <send_cmd+0x9a>
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f1      	bne.n	8001db2 <send_cmd+0x7e>

	return res; /* Return with the response value */
 8001dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d5      	b.n	8001f98 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001dec:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <disk_initialize+0x1c8>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8001dfa:	4b69      	ldr	r3, [pc, #420]	; (8001fa0 <disk_initialize+0x1c8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	e0ca      	b.n	8001f98 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001e02:	f7ff feb3 	bl	8001b6c <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001e06:	f7ff fe41 	bl	8001a8c <SELECT>
	ty = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2040      	movs	r0, #64	; 0x40
 8001e12:	f7ff ff8f 	bl	8001d34 <send_cmd>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 80a5 	bne.w	8001f68 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001e1e:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <disk_initialize+0x1cc>)
 8001e20:	2264      	movs	r2, #100	; 0x64
 8001e22:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001e24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001e28:	2048      	movs	r0, #72	; 0x48
 8001e2a:	f7ff ff83 	bl	8001d34 <send_cmd>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d158      	bne.n	8001ee6 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e00c      	b.n	8001e54 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001e3a:	7bfc      	ldrb	r4, [r7, #15]
 8001e3c:	f7ff fe4e 	bl	8001adc <rcvr_spi>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4423      	add	r3, r4
 8001e4a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d9ef      	bls.n	8001e3a <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001e5a:	7abb      	ldrb	r3, [r7, #10]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8083 	bne.w	8001f68 <disk_initialize+0x190>
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	2baa      	cmp	r3, #170	; 0xaa
 8001e66:	d17f      	bne.n	8001f68 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2077      	movs	r0, #119	; 0x77
 8001e6c:	f7ff ff62 	bl	8001d34 <send_cmd>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d807      	bhi.n	8001e86 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001e76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e7a:	2069      	movs	r0, #105	; 0x69
 8001e7c:	f7ff ff5a 	bl	8001d34 <send_cmd>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <disk_initialize+0x1cc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1eb      	bne.n	8001e68 <disk_initialize+0x90>
 8001e90:	e000      	b.n	8001e94 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001e92:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <disk_initialize+0x1cc>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d064      	beq.n	8001f68 <disk_initialize+0x190>
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	207a      	movs	r0, #122	; 0x7a
 8001ea2:	f7ff ff47 	bl	8001d34 <send_cmd>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d15d      	bne.n	8001f68 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e00c      	b.n	8001ecc <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8001eb2:	7bfc      	ldrb	r4, [r7, #15]
 8001eb4:	f7ff fe12 	bl	8001adc <rcvr_spi>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4423      	add	r3, r4
 8001ec2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d9ef      	bls.n	8001eb2 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8001ed2:	7a3b      	ldrb	r3, [r7, #8]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <disk_initialize+0x108>
 8001edc:	2306      	movs	r3, #6
 8001ede:	e000      	b.n	8001ee2 <disk_initialize+0x10a>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	73bb      	strb	r3, [r7, #14]
 8001ee4:	e040      	b.n	8001f68 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2077      	movs	r0, #119	; 0x77
 8001eea:	f7ff ff23 	bl	8001d34 <send_cmd>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d808      	bhi.n	8001f06 <disk_initialize+0x12e>
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2069      	movs	r0, #105	; 0x69
 8001ef8:	f7ff ff1c 	bl	8001d34 <send_cmd>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d801      	bhi.n	8001f06 <disk_initialize+0x12e>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e000      	b.n	8001f08 <disk_initialize+0x130>
 8001f06:	2301      	movs	r3, #1
 8001f08:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d10e      	bne.n	8001f2e <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8001f10:	2100      	movs	r1, #0
 8001f12:	2077      	movs	r0, #119	; 0x77
 8001f14:	f7ff ff0e 	bl	8001d34 <send_cmd>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d80e      	bhi.n	8001f3c <disk_initialize+0x164>
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2069      	movs	r0, #105	; 0x69
 8001f22:	f7ff ff07 	bl	8001d34 <send_cmd>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <disk_initialize+0x164>
						break; /* ACMD41 */
 8001f2c:	e00d      	b.n	8001f4a <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2041      	movs	r0, #65	; 0x41
 8001f32:	f7ff feff 	bl	8001d34 <send_cmd>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <disk_initialize+0x1cc>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e1      	bne.n	8001f0a <disk_initialize+0x132>
 8001f46:	e000      	b.n	8001f4a <disk_initialize+0x172>
						break; /* CMD1 */
 8001f48:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <disk_initialize+0x1cc>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <disk_initialize+0x18c>
 8001f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f58:	2050      	movs	r0, #80	; 0x50
 8001f5a:	f7ff feeb 	bl	8001d34 <send_cmd>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <disk_initialize+0x190>
				ty = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <disk_initialize+0x1d0>)
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8001f6e:	f7ff fd94 	bl	8001a9a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001f72:	f7ff fdb3 	bl	8001adc <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001f76:	7bbb      	ldrb	r3, [r7, #14]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <disk_initialize+0x1c8>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <disk_initialize+0x1c8>)
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e001      	b.n	8001f92 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8001f8e:	f7ff fe3b 	bl	8001c08 <power_off>

	return Stat;
 8001f92:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <disk_initialize+0x1c8>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	20000430 	.word	0x20000430
 8001fa8:	20000432 	.word	0x20000432

08001fac <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e002      	b.n	8001fc6 <disk_status+0x1a>
	return Stat;
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <disk_status+0x28>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <disk_read+0x1c>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <disk_read+0x20>
		return RES_PARERR;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e051      	b.n	800209c <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <disk_read+0xcc>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <disk_read+0x32>
		return RES_NOTRDY;
 8002006:	2303      	movs	r3, #3
 8002008:	e048      	b.n	800209c <disk_read+0xc4>

	if (!(CardType & 4))
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <disk_read+0xd0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800201c:	f7ff fd36 	bl	8001a8c <SELECT>

	if (count == 1) { /* Single block read */
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d111      	bne.n	800204a <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	2051      	movs	r0, #81	; 0x51
 800202a:	f7ff fe83 	bl	8001d34 <send_cmd>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d129      	bne.n	8002088 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8002034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002038:	68b8      	ldr	r0, [r7, #8]
 800203a:	f7ff fdf1 	bl	8001c20 <rcvr_datablock>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d021      	beq.n	8002088 <disk_read+0xb0>
			count = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	e01e      	b.n	8002088 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2052      	movs	r0, #82	; 0x52
 800204e:	f7ff fe71 	bl	8001d34 <send_cmd>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d117      	bne.n	8002088 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8002058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205c:	68b8      	ldr	r0, [r7, #8]
 800205e:	f7ff fddf 	bl	8001c20 <rcvr_datablock>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <disk_read+0xa6>
					break;
				buff += 512;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800206e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3b01      	subs	r3, #1
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ed      	bne.n	8002058 <disk_read+0x80>
 800207c:	e000      	b.n	8002080 <disk_read+0xa8>
					break;
 800207e:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8002080:	2100      	movs	r1, #0
 8002082:	204c      	movs	r0, #76	; 0x4c
 8002084:	f7ff fe56 	bl	8001d34 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8002088:	f7ff fd07 	bl	8001a9a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800208c:	f7ff fd26 	bl	8001adc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000432 	.word	0x20000432

080020ac <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <disk_write+0x1c>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <disk_write+0x20>
		return RES_PARERR;
 80020c8:	2304      	movs	r3, #4
 80020ca:	e06b      	b.n	80021a4 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <disk_write+0x100>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <disk_write+0x32>
		return RES_NOTRDY;
 80020da:	2303      	movs	r3, #3
 80020dc:	e062      	b.n	80021a4 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <disk_write+0x100>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <disk_write+0x44>
		return RES_WRPRT;
 80020ec:	2302      	movs	r3, #2
 80020ee:	e059      	b.n	80021a4 <disk_write+0xf8>

	if (!(CardType & 4))
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <disk_write+0x104>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	025b      	lsls	r3, r3, #9
 8002100:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8002102:	f7ff fcc3 	bl	8001a8c <SELECT>

	if (count == 1) { /* Single block write */
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d110      	bne.n	800212e <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	2058      	movs	r0, #88	; 0x58
 8002110:	f7ff fe10 	bl	8001d34 <send_cmd>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d13a      	bne.n	8002190 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 800211a:	21fe      	movs	r1, #254	; 0xfe
 800211c:	68b8      	ldr	r0, [r7, #8]
 800211e:	f7ff fdb5 	bl	8001c8c <xmit_datablock>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d033      	beq.n	8002190 <disk_write+0xe4>
			count = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	e030      	b.n	8002190 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <disk_write+0x104>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <disk_write+0x9e>
			send_cmd(CMD55, 0);
 800213a:	2100      	movs	r1, #0
 800213c:	2077      	movs	r0, #119	; 0x77
 800213e:	f7ff fdf9 	bl	8001d34 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	2057      	movs	r0, #87	; 0x57
 8002146:	f7ff fdf5 	bl	8001d34 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	2059      	movs	r0, #89	; 0x59
 800214e:	f7ff fdf1 	bl	8001d34 <send_cmd>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11b      	bne.n	8002190 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8002158:	21fc      	movs	r1, #252	; 0xfc
 800215a:	68b8      	ldr	r0, [r7, #8]
 800215c:	f7ff fd96 	bl	8001c8c <xmit_datablock>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <disk_write+0xd0>
					break;
				buff += 512;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800216c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ee      	bne.n	8002158 <disk_write+0xac>
 800217a:	e000      	b.n	800217e <disk_write+0xd2>
					break;
 800217c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800217e:	21fd      	movs	r1, #253	; 0xfd
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fd83 	bl	8001c8c <xmit_datablock>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <disk_write+0xe4>
				count = 1;
 800218c:	2301      	movs	r3, #1
 800218e:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8002190:	f7ff fc83 	bl	8001a9a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8002194:	f7ff fca2 	bl	8001adc <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000432 	.word	0x20000432

080021b4 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <disk_timerproc+0x44>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
	if (n)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <disk_timerproc+0x1e>
		Timer1 = --n;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <disk_timerproc+0x44>)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <disk_timerproc+0x48>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <disk_timerproc+0x36>
		Timer2 = --n;
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <disk_timerproc+0x48>)
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	7013      	strb	r3, [r2, #0]

}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000430 	.word	0x20000430
 80021fc:	20000431 	.word	0x20000431

08002200 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8002204:	4b09      	ldr	r3, [pc, #36]	; (800222c <sdcard_systick_timerproc+0x2c>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <sdcard_systick_timerproc+0x2c>)
 8002210:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <sdcard_systick_timerproc+0x2c>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b09      	cmp	r3, #9
 800221a:	d904      	bls.n	8002226 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <sdcard_systick_timerproc+0x2c>)
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8002222:	f7ff ffc7 	bl	80021b4 <disk_timerproc>
	}
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200007c4 	.word	0x200007c4

08002230 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b21b      	sxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	b21b      	sxth	r3, r3
 8002250:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002252:	89fb      	ldrh	r3, [r7, #14]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3303      	adds	r3, #3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	3202      	adds	r2, #2
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	3201      	adds	r2, #1
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	7812      	ldrb	r2, [r2, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
	return rv;
 8002298:	68fb      	ldr	r3, [r7, #12]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <mem_cmp>:
}


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80022a6:	b480      	push	{r7}
 80022a8:	b089      	sub	sp, #36	; 0x24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	61fa      	str	r2, [r7, #28]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	61ba      	str	r2, [r7, #24]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	1acb      	subs	r3, r1, r3
 80022d2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <mem_cmp+0x40>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0eb      	beq.n	80022be <mem_cmp+0x18>

	return r;
 80022e6:	697b      	ldr	r3, [r7, #20]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	78db      	ldrb	r3, [r3, #3]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02c      	beq.n	8002362 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7858      	ldrb	r0, [r3, #1]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	2301      	movs	r3, #1
 8002318:	f7ff fec8 	bl	80020ac <disk_write>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11d      	bne.n	800235e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	1ad2      	subs	r2, r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	429a      	cmp	r2, r3
 8002338:	d213      	bcs.n	8002362 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d10f      	bne.n	8002362 <sync_window+0x6e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7858      	ldrb	r0, [r3, #1]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	441a      	add	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	f7ff fea8 	bl	80020ac <disk_write>
 800235c:	e001      	b.n	8002362 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d01b      	beq.n	80023bc <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffb5 	bl	80022f4 <sync_window>
 800238a:	4603      	mov	r3, r0
 800238c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7858      	ldrb	r0, [r3, #1]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800239e:	2301      	movs	r3, #1
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	f7ff fe19 	bl	8001fd8 <disk_read>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b089      	sub	sp, #36	; 0x24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <get_ldnumber+0x22>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	e02d      	b.n	8002444 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	61fa      	str	r2, [r7, #28]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d902      	bls.n	80023fe <get_ldnumber+0x38>
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b3a      	cmp	r3, #58	; 0x3a
 80023fc:	d1f4      	bne.n	80023e8 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b3a      	cmp	r3, #58	; 0x3a
 8002402:	d11c      	bne.n	800243e <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8002404:	2301      	movs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b2f      	cmp	r3, #47	; 0x2f
 800240e:	d90c      	bls.n	800242a <get_ldnumber+0x64>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b39      	cmp	r3, #57	; 0x39
 8002416:	d808      	bhi.n	800242a <get_ldnumber+0x64>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	3302      	adds	r3, #2
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	429a      	cmp	r2, r3
 8002420:	d103      	bne.n	800242a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3b30      	subs	r3, #48	; 0x30
 8002428:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	dc04      	bgt.n	800243a <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	e002      	b.n	8002444 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8002442:	697b      	ldr	r3, [r7, #20]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3724      	adds	r7, #36	; 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	70da      	strb	r2, [r3, #3]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f04f 32ff 	mov.w	r2, #4294967295
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002468:	6839      	ldr	r1, [r7, #0]
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff7e 	bl	800236c <move_window>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <check_fs+0x2a>
 8002476:	2304      	movs	r3, #4
 8002478:	e038      	b.n	80024ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3330      	adds	r3, #48	; 0x30
 800247e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fed4 	bl	8002230 <ld_word>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <check_fs+0x48>
 8002494:	2303      	movs	r3, #3
 8002496:	e029      	b.n	80024ec <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249e:	2be9      	cmp	r3, #233	; 0xe9
 80024a0:	d009      	beq.n	80024b6 <check_fs+0x66>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a8:	2beb      	cmp	r3, #235	; 0xeb
 80024aa:	d004      	beq.n	80024b6 <check_fs+0x66>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b2:	2be8      	cmp	r3, #232	; 0xe8
 80024b4:	d119      	bne.n	80024ea <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3330      	adds	r3, #48	; 0x30
 80024ba:	3336      	adds	r3, #54	; 0x36
 80024bc:	2203      	movs	r2, #3
 80024be:	490d      	ldr	r1, [pc, #52]	; (80024f4 <check_fs+0xa4>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fef0 	bl	80022a6 <mem_cmp>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <check_fs+0x80>
 80024cc:	2300      	movs	r3, #0
 80024ce:	e00d      	b.n	80024ec <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3330      	adds	r3, #48	; 0x30
 80024d4:	3352      	adds	r3, #82	; 0x52
 80024d6:	2205      	movs	r2, #5
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <check_fs+0xa8>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fee3 	bl	80022a6 <mem_cmp>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <check_fs+0x9a>
 80024e6:	2300      	movs	r3, #0
 80024e8:	e000      	b.n	80024ec <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 80024ea:	2302      	movs	r3, #2
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	0800907c 	.word	0x0800907c
 80024f8:	08009080 	.word	0x08009080

080024fc <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b096      	sub	sp, #88	; 0x58
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff ff58 	bl	80023c6 <get_ldnumber>
 8002516:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8002518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800251a:	2b00      	cmp	r3, #0
 800251c:	da01      	bge.n	8002522 <find_volume+0x26>
 800251e:	230b      	movs	r3, #11
 8002520:	e238      	b.n	8002994 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002522:	4aa8      	ldr	r2, [pc, #672]	; (80027c4 <find_volume+0x2c8>)
 8002524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <find_volume+0x3a>
 8002532:	230c      	movs	r3, #12
 8002534:	e22e      	b.n	8002994 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01a      	beq.n	8002582 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	785b      	ldrb	r3, [r3, #1]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fd2b 	bl	8001fac <disk_status>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800255c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10c      	bne.n	8002582 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <find_volume+0x82>
 800256e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800257a:	230a      	movs	r3, #10
 800257c:	e20a      	b.n	8002994 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 800257e:	2300      	movs	r3, #0
 8002580:	e208      	b.n	8002994 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	b2da      	uxtb	r2, r3
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	785b      	ldrb	r3, [r3, #1]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fc1f 	bl	8001dd8 <disk_initialize>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80025a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1f1      	b.n	8002994 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <find_volume+0xca>
 80025b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80025c2:	230a      	movs	r3, #10
 80025c4:	e1e6      	b.n	8002994 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80025ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80025cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025ce:	f7ff ff3f 	bl	8002450 <check_fs>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80025d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d14b      	bne.n	8002678 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
 80025e4:	e01f      	b.n	8002626 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80025e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80025ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80025f4:	4413      	add	r3, r2
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3304      	adds	r3, #4
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <find_volume+0x114>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	3308      	adds	r3, #8
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fe2a 	bl	8002260 <ld_dword>
 800260c:	4602      	mov	r2, r0
 800260e:	e000      	b.n	8002612 <find_volume+0x116>
 8002610:	2200      	movs	r2, #0
 8002612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800261a:	440b      	add	r3, r1
 800261c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	3301      	adds	r3, #1
 8002624:	643b      	str	r3, [r7, #64]	; 0x40
 8002626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002628:	2b03      	cmp	r3, #3
 800262a:	d9dc      	bls.n	80025e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800262c:	2300      	movs	r3, #0
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <find_volume+0x140>
 8002636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002638:	3b01      	subs	r3, #1
 800263a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800263c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002644:	4413      	add	r3, r2
 8002646:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800264a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <find_volume+0x162>
 8002652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002656:	f7ff fefb 	bl	8002450 <check_fs>
 800265a:	4603      	mov	r3, r0
 800265c:	e000      	b.n	8002660 <find_volume+0x164>
 800265e:	2303      	movs	r3, #3
 8002660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002668:	2b01      	cmp	r3, #1
 800266a:	d905      	bls.n	8002678 <find_volume+0x17c>
 800266c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266e:	3301      	adds	r3, #1
 8002670:	643b      	str	r3, [r7, #64]	; 0x40
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	2b03      	cmp	r3, #3
 8002676:	d9e1      	bls.n	800263c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800267c:	2b04      	cmp	r3, #4
 800267e:	d101      	bne.n	8002684 <find_volume+0x188>
 8002680:	2301      	movs	r3, #1
 8002682:	e187      	b.n	8002994 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002688:	2b01      	cmp	r3, #1
 800268a:	d901      	bls.n	8002690 <find_volume+0x194>
 800268c:	230d      	movs	r3, #13
 800268e:	e181      	b.n	8002994 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	3330      	adds	r3, #48	; 0x30
 8002694:	330b      	adds	r3, #11
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fdca 	bl	8002230 <ld_word>
 800269c:	4603      	mov	r3, r0
 800269e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a2:	d001      	beq.n	80026a8 <find_volume+0x1ac>
 80026a4:	230d      	movs	r3, #13
 80026a6:	e175      	b.n	8002994 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	3330      	adds	r3, #48	; 0x30
 80026ac:	3316      	adds	r3, #22
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fdbe 	bl	8002230 <ld_word>
 80026b4:	4603      	mov	r3, r0
 80026b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80026b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <find_volume+0x1d0>
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	3330      	adds	r3, #48	; 0x30
 80026c2:	3324      	adds	r3, #36	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fdcb 	bl	8002260 <ld_dword>
 80026ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026d0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d005      	beq.n	80026f0 <find_volume+0x1f4>
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	789b      	ldrb	r3, [r3, #2]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d001      	beq.n	80026f0 <find_volume+0x1f4>
 80026ec:	230d      	movs	r3, #13
 80026ee:	e151      	b.n	8002994 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	789b      	ldrb	r3, [r3, #2]
 80026f4:	461a      	mov	r2, r3
 80026f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002704:	b29a      	uxth	r2, r3
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	895b      	ldrh	r3, [r3, #10]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <find_volume+0x228>
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	895b      	ldrh	r3, [r3, #10]
 8002716:	461a      	mov	r2, r3
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	895b      	ldrh	r3, [r3, #10]
 800271c:	3b01      	subs	r3, #1
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <find_volume+0x22c>
 8002724:	230d      	movs	r3, #13
 8002726:	e135      	b.n	8002994 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	3330      	adds	r3, #48	; 0x30
 800272c:	3311      	adds	r3, #17
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fd7e 	bl	8002230 <ld_word>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	891b      	ldrh	r3, [r3, #8]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <find_volume+0x252>
 800274a:	230d      	movs	r3, #13
 800274c:	e122      	b.n	8002994 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	3330      	adds	r3, #48	; 0x30
 8002752:	3313      	adds	r3, #19
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fd6b 	bl	8002230 <ld_word>
 800275a:	4603      	mov	r3, r0
 800275c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800275e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <find_volume+0x276>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	3330      	adds	r3, #48	; 0x30
 8002768:	3320      	adds	r3, #32
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fd78 	bl	8002260 <ld_dword>
 8002770:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	3330      	adds	r3, #48	; 0x30
 8002776:	330e      	adds	r3, #14
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fd59 	bl	8002230 <ld_word>
 800277e:	4603      	mov	r3, r0
 8002780:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <find_volume+0x290>
 8002788:	230d      	movs	r3, #13
 800278a:	e103      	b.n	8002994 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800278c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800278e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002790:	4413      	add	r3, r2
 8002792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002794:	8912      	ldrh	r2, [r2, #8]
 8002796:	0912      	lsrs	r2, r2, #4
 8002798:	b292      	uxth	r2, r2
 800279a:	4413      	add	r3, r2
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800279e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d201      	bcs.n	80027aa <find_volume+0x2ae>
 80027a6:	230d      	movs	r3, #13
 80027a8:	e0f4      	b.n	8002994 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80027aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027b2:	8952      	ldrh	r2, [r2, #10]
 80027b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <find_volume+0x2cc>
 80027c0:	230d      	movs	r3, #13
 80027c2:	e0e7      	b.n	8002994 <find_volume+0x498>
 80027c4:	20000434 	.word	0x20000434
		fmt = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	4a72      	ldr	r2, [pc, #456]	; (800299c <find_volume+0x4a0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d802      	bhi.n	80027dc <find_volume+0x2e0>
 80027d6:	2303      	movs	r3, #3
 80027d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <find_volume+0x2f0>
 80027e6:	2302      	movs	r3, #2
 80027e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d802      	bhi.n	80027fc <find_volume+0x300>
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80027fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <find_volume+0x30c>
 8002804:	230d      	movs	r3, #13
 8002806:	e0c5      	b.n	8002994 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002814:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002816:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281a:	441a      	add	r2, r3
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8002820:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	441a      	add	r2, r3
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800282a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800282e:	2b03      	cmp	r3, #3
 8002830:	d11e      	bne.n	8002870 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	3330      	adds	r3, #48	; 0x30
 8002836:	332a      	adds	r3, #42	; 0x2a
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fcf9 	bl	8002230 <ld_word>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <find_volume+0x34c>
 8002844:	230d      	movs	r3, #13
 8002846:	e0a5      	b.n	8002994 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	891b      	ldrh	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <find_volume+0x358>
 8002850:	230d      	movs	r3, #13
 8002852:	e09f      	b.n	8002994 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	3330      	adds	r3, #48	; 0x30
 8002858:	332c      	adds	r3, #44	; 0x2c
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fd00 	bl	8002260 <ld_dword>
 8002860:	4602      	mov	r2, r0
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	647b      	str	r3, [r7, #68]	; 0x44
 800286e:	e01f      	b.n	80028b0 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	891b      	ldrh	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <find_volume+0x380>
 8002878:	230d      	movs	r3, #13
 800287a:	e08b      	b.n	8002994 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002882:	441a      	add	r2, r3
 8002884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800288c:	2b02      	cmp	r3, #2
 800288e:	d103      	bne.n	8002898 <find_volume+0x39c>
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	e00a      	b.n	80028ae <find_volume+0x3b2>
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	085a      	lsrs	r2, r3, #1
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80028ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	699a      	ldr	r2, [r3, #24]
 80028b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	429a      	cmp	r2, r3
 80028be:	d201      	bcs.n	80028c4 <find_volume+0x3c8>
 80028c0:	230d      	movs	r3, #13
 80028c2:	e067      	b.n	8002994 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ca:	611a      	str	r2, [r3, #16]
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80028da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d149      	bne.n	8002976 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80028e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e4:	3330      	adds	r3, #48	; 0x30
 80028e6:	3330      	adds	r3, #48	; 0x30
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fca1 	bl	8002230 <ld_word>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d140      	bne.n	8002976 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 80028f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028f6:	3301      	adds	r3, #1
 80028f8:	4619      	mov	r1, r3
 80028fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028fc:	f7ff fd36 	bl	800236c <move_window>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d137      	bne.n	8002976 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	3330      	adds	r3, #48	; 0x30
 8002910:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc8b 	bl	8002230 <ld_word>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002922:	429a      	cmp	r2, r3
 8002924:	d127      	bne.n	8002976 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	3330      	adds	r3, #48	; 0x30
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc98 	bl	8002260 <ld_dword>
 8002930:	4602      	mov	r2, r0
 8002932:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <find_volume+0x4a4>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d11e      	bne.n	8002976 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	3330      	adds	r3, #48	; 0x30
 800293c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fc8d 	bl	8002260 <ld_dword>
 8002946:	4602      	mov	r2, r0
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <find_volume+0x4a8>)
 800294a:	429a      	cmp	r2, r3
 800294c:	d113      	bne.n	8002976 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	3330      	adds	r3, #48	; 0x30
 8002952:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fc82 	bl	8002260 <ld_dword>
 800295c:	4602      	mov	r2, r0
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	3330      	adds	r3, #48	; 0x30
 8002966:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fc78 	bl	8002260 <ld_dword>
 8002970:	4602      	mov	r2, r0
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800297c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <find_volume+0x4ac>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	3301      	adds	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <find_volume+0x4ac>)
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <find_volume+0x4ac>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3758      	adds	r7, #88	; 0x58
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	0ffffff5 	.word	0x0ffffff5
 80029a0:	41615252 	.word	0x41615252
 80029a4:	61417272 	.word	0x61417272
 80029a8:	20000438 	.word	0x20000438

080029ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fcff 	bl	80023c6 <get_ldnumber>
 80029c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da01      	bge.n	80029d4 <f_mount+0x28>
 80029d0:	230b      	movs	r3, #11
 80029d2:	e025      	b.n	8002a20 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <f_mount+0x7c>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	490b      	ldr	r1, [pc, #44]	; (8002a28 <f_mount+0x7c>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <f_mount+0x5e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	e00a      	b.n	8002a20 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002a0a:	f107 010c 	add.w	r1, r7, #12
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	2200      	movs	r2, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fd71 	bl	80024fc <find_volume>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000434 	.word	0x20000434

08002a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a30:	f000 fe1c 	bl	800366c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a34:	f000 f85c 	bl	8002af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a38:	f000 fabc 	bl	8002fb4 <MX_GPIO_Init>
  MX_RTC_Init();
 8002a3c:	f000 f8d8 	bl	8002bf0 <MX_RTC_Init>
  MX_SPI1_Init();
 8002a40:	f000 f930 	bl	8002ca4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002a44:	f000 f964 	bl	8002d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a48:	f000 f9ee 	bl	8002e28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a4c:	f000 fa3a 	bl	8002ec4 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002a50:	f000 fa86 	bl	8002f60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	RGB_Init();
 8002a54:	f7fe fc9c 	bl	8001390 <RGB_Init>
	LCD_Init();
 8002a58:	f7fe f9d2 	bl	8000e00 <LCD_Init>
	THS_Init();
 8002a5c:	f7fe ffde 	bl	8001a1c <THS_Init>
	SD_Init();
 8002a60:	f7fe ff50 	bl	8001904 <SD_Init>

	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8002a64:	481a      	ldr	r0, [pc, #104]	; (8002ad0 <main+0xa4>)
 8002a66:	f002 fe80 	bl	800576a <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <main+0xa4>)
 8002a6e:	f002 fed5 	bl	800581c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002a72:	2104      	movs	r1, #4
 8002a74:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <main+0xa4>)
 8002a76:	f002 fed1 	bl	800581c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a7a:	2108      	movs	r1, #8
 8002a7c:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <main+0xa4>)
 8002a7e:	f002 fecd 	bl	800581c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8002a82:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <main+0xa8>)
 8002a84:	f002 fe71 	bl	800576a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8002a88:	4813      	ldr	r0, [pc, #76]	; (8002ad8 <main+0xac>)
 8002a8a:	f002 fe4a 	bl	8005722 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LCD_ClearScreen();
 8002a8e:	f7fe fabf 	bl	8001010 <LCD_ClearScreen>

		LCD_SetCursor(0, 0);
		LCD_PrintCentered(date);
		LCD_SetCursor(0, 3);
		LCD_PrintCentered(time);*/
		HAL_UART_Transmit(&huart3, send, 2, 1000);
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	2202      	movs	r2, #2
 8002a98:	4910      	ldr	r1, [pc, #64]	; (8002adc <main+0xb0>)
 8002a9a:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <main+0xb4>)
 8002a9c:	f003 fd97 	bl	80065ce <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 100);
 8002aa0:	2364      	movs	r3, #100	; 0x64
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	490f      	ldr	r1, [pc, #60]	; (8002ae4 <main+0xb8>)
 8002aa6:	480e      	ldr	r0, [pc, #56]	; (8002ae0 <main+0xb4>)
 8002aa8:	f003 fd91 	bl	80065ce <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, receive, 100, 2000);
 8002aac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ab0:	2264      	movs	r2, #100	; 0x64
 8002ab2:	490d      	ldr	r1, [pc, #52]	; (8002ae8 <main+0xbc>)
 8002ab4:	480a      	ldr	r0, [pc, #40]	; (8002ae0 <main+0xb4>)
 8002ab6:	f003 fe23 	bl	8006700 <HAL_UART_Receive>
		LCD_Print(receive);
 8002aba:	480b      	ldr	r0, [pc, #44]	; (8002ae8 <main+0xbc>)
 8002abc:	f7fe fb04 	bl	80010c8 <LCD_Print>
		LCD_NextLine("|");
 8002ac0:	480a      	ldr	r0, [pc, #40]	; (8002aec <main+0xc0>)
 8002ac2:	f7fe fb4f 	bl	8001164 <LCD_NextLine>

		HAL_Delay(1000);
 8002ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aca:	f000 fe41 	bl	8003750 <HAL_Delay>
		HAL_UART_Transmit(&huart3, send, 2, 1000);
 8002ace:	e7e0      	b.n	8002a92 <main+0x66>
 8002ad0:	2000097c 	.word	0x2000097c
 8002ad4:	20000860 	.word	0x20000860
 8002ad8:	200007c8 	.word	0x200007c8
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	20000808 	.word	0x20000808
 8002ae4:	08009088 	.word	0x08009088
 8002ae8:	200008c0 	.word	0x200008c0
 8002aec:	0800908c 	.word	0x0800908c

08002af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b098      	sub	sp, #96	; 0x60
 8002af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002afa:	2230      	movs	r2, #48	; 0x30
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fd28 	bl	8007554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <SystemClock_Config+0xf8>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <SystemClock_Config+0xf8>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <SystemClock_Config+0xf8>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <SystemClock_Config+0xfc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <SystemClock_Config+0xfc>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <SystemClock_Config+0xfc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b64:	2301      	movs	r3, #1
 8002b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b72:	2304      	movs	r3, #4
 8002b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002b76:	2348      	movs	r3, #72	; 0x48
 8002b78:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f936 	bl	8003df8 <HAL_RCC_OscConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002b92:	f000 fb39 	bl	8003208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b96:	230f      	movs	r3, #15
 8002b98:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fb90 	bl	80042d8 <HAL_RCC_ClockConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002bbe:	f000 fb23 	bl	8003208 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 fd73 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002bdc:	f000 fb14 	bl	8003208 <Error_Handler>
  }
}
 8002be0:	bf00      	nop
 8002be2:	3760      	adds	r7, #96	; 0x60
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40007000 	.word	0x40007000

08002bf0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002c04:	2300      	movs	r3, #0
 8002c06:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c0a:	4a25      	ldr	r2, [pc, #148]	; (8002ca0 <MX_RTC_Init+0xb0>)
 8002c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 125;
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c16:	227d      	movs	r2, #125	; 0x7d
 8002c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 320;
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c20:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c22:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c34:	4819      	ldr	r0, [pc, #100]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c36:	f001 fe23 	bl	8004880 <HAL_RTC_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002c40:	f000 fae2 	bl	8003208 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x15;
 8002c44:	2315      	movs	r3, #21
 8002c46:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	480f      	ldr	r0, [pc, #60]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c60:	f001 fe9f 	bl	80049a2 <HAL_RTC_SetTime>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8002c6a:	f000 facd 	bl	8003208 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8002c76:	2330      	movs	r3, #48	; 0x30
 8002c78:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c7e:	463b      	mov	r3, r7
 8002c80:	2201      	movs	r2, #1
 8002c82:	4619      	mov	r1, r3
 8002c84:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_RTC_Init+0xac>)
 8002c86:	f001 ffa7 	bl	8004bd8 <HAL_RTC_SetDate>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8002c90:	f000 faba 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200008a0 	.word	0x200008a0
 8002ca0:	40002800 	.word	0x40002800

08002ca4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002caa:	4a18      	ldr	r2, [pc, #96]	; (8002d0c <MX_SPI1_Init+0x68>)
 8002cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cd8:	2218      	movs	r2, #24
 8002cda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_SPI1_Init+0x64>)
 8002cf6:	f002 f8f5 	bl	8004ee4 <HAL_SPI_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d00:	f000 fa82 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000924 	.word	0x20000924
 8002d0c:	40013000 	.word	0x40013000

08002d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	f107 0320 	add.w	r3, r7, #32
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
 8002d3c:	615a      	str	r2, [r3, #20]
 8002d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d40:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d4a:	2247      	movs	r2, #71	; 0x47
 8002d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d68:	482e      	ldr	r0, [pc, #184]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d6a:	f002 fcaf 	bl	80056cc <HAL_TIM_Base_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d74:	f000 fa48 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d82:	4619      	mov	r1, r3
 8002d84:	4827      	ldr	r0, [pc, #156]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d86:	f002 ff55 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d90:	f000 fa3a 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d94:	4823      	ldr	r0, [pc, #140]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002d96:	f002 fd0c 	bl	80057b2 <HAL_TIM_PWM_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002da0:	f000 fa32 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	4619      	mov	r1, r3
 8002db2:	481c      	ldr	r0, [pc, #112]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002db4:	f003 fb2e 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dbe:	f000 fa23 	bl	8003208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc2:	2360      	movs	r3, #96	; 0x60
 8002dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4812      	ldr	r0, [pc, #72]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002dda:	f002 fe65 	bl	8005aa8 <HAL_TIM_PWM_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002de4:	f000 fa10 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2204      	movs	r2, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	480d      	ldr	r0, [pc, #52]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002df0:	f002 fe5a 	bl	8005aa8 <HAL_TIM_PWM_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002dfa:	f000 fa05 	bl	8003208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	2208      	movs	r2, #8
 8002e02:	4619      	mov	r1, r3
 8002e04:	4807      	ldr	r0, [pc, #28]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002e06:	f002 fe4f 	bl	8005aa8 <HAL_TIM_PWM_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002e10:	f000 f9fa 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e14:	4803      	ldr	r0, [pc, #12]	; (8002e24 <MX_TIM2_Init+0x114>)
 8002e16:	f000 fadf 	bl	80033d8 <HAL_TIM_MspPostInit>

}
 8002e1a:	bf00      	nop
 8002e1c:	3738      	adds	r7, #56	; 0x38
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	2000097c 	.word	0x2000097c

08002e28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <MX_TIM3_Init+0x98>)
 8002e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e4c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002e50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e5a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002e5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e6c:	4813      	ldr	r0, [pc, #76]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e6e:	f002 fc2d 	bl	80056cc <HAL_TIM_Base_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e78:	f000 f9c6 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	4619      	mov	r1, r3
 8002e88:	480c      	ldr	r0, [pc, #48]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002e8a:	f002 fed3 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e94:	f000 f9b8 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_TIM3_Init+0x94>)
 8002ea6:	f003 fab5 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002eb0:	f000 f9aa 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000860 	.word	0x20000860
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	f107 0308 	add.w	r3, r7, #8
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <MX_TIM4_Init+0x98>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ee8:	2247      	movs	r2, #71	; 0x47
 8002eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF-1;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002ef4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f06:	4814      	ldr	r0, [pc, #80]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f08:	f002 fbe0 	bl	80056cc <HAL_TIM_Base_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f12:	f000 f979 	bl	8003208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	4619      	mov	r1, r3
 8002f22:	480d      	ldr	r0, [pc, #52]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f24:	f002 fe86 	bl	8005c34 <HAL_TIM_ConfigClockSource>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f2e:	f000 f96b 	bl	8003208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4806      	ldr	r0, [pc, #24]	; (8002f58 <MX_TIM4_Init+0x94>)
 8002f40:	f003 fa68 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002f4a:	f000 f95d 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200007c8 	.word	0x200007c8
 8002f5c:	40000800 	.word	0x40000800

08002f60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_USART3_UART_Init+0x50>)
 8002f68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f86:	220c      	movs	r2, #12
 8002f88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_USART3_UART_Init+0x4c>)
 8002f98:	f003 facc 	bl	8006534 <HAL_UART_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002fa2:	f000 f931 	bl	8003208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000808 	.word	0x20000808
 8002fb0:	40004800 	.word	0x40004800

08002fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <MX_GPIO_Init+0x184>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a59      	ldr	r2, [pc, #356]	; (8003138 <MX_GPIO_Init+0x184>)
 8002fd4:	f043 0310 	orr.w	r3, r3, #16
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <MX_GPIO_Init+0x184>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	4b53      	ldr	r3, [pc, #332]	; (8003138 <MX_GPIO_Init+0x184>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a52      	ldr	r2, [pc, #328]	; (8003138 <MX_GPIO_Init+0x184>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <MX_GPIO_Init+0x184>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <MX_GPIO_Init+0x184>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a4b      	ldr	r2, [pc, #300]	; (8003138 <MX_GPIO_Init+0x184>)
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b49      	ldr	r3, [pc, #292]	; (8003138 <MX_GPIO_Init+0x184>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <MX_GPIO_Init+0x184>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a44      	ldr	r2, [pc, #272]	; (8003138 <MX_GPIO_Init+0x184>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <MX_GPIO_Init+0x184>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <MX_GPIO_Init+0x184>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a3d      	ldr	r2, [pc, #244]	; (8003138 <MX_GPIO_Init+0x184>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <MX_GPIO_Init+0x184>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <MX_GPIO_Init+0x184>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a36      	ldr	r2, [pc, #216]	; (8003138 <MX_GPIO_Init+0x184>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b34      	ldr	r3, [pc, #208]	; (8003138 <MX_GPIO_Init+0x184>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin|LCD_RW_Pin 
 8003072:	2200      	movs	r2, #0
 8003074:	217f      	movs	r1, #127	; 0x7f
 8003076:	4831      	ldr	r0, [pc, #196]	; (800313c <MX_GPIO_Init+0x188>)
 8003078:	f000 fe72 	bl	8003d60 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin|THS_Sensor1_Pin|THS_Sensor2_Pin, GPIO_PIN_RESET);
 800307c:	2200      	movs	r2, #0
 800307e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003082:	482f      	ldr	r0, [pc, #188]	; (8003140 <MX_GPIO_Init+0x18c>)
 8003084:	f000 fe6c 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STM_Green_Pin|STM_Orange_Pin|STM_Red_Pin|STM_Blue_Pin, GPIO_PIN_RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800308e:	482d      	ldr	r0, [pc, #180]	; (8003144 <MX_GPIO_Init+0x190>)
 8003090:	f000 fe66 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin 
                           LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin|LCD_RW_Pin 
 8003094:	237f      	movs	r3, #127	; 0x7f
 8003096:	61fb      	str	r3, [r7, #28]
                          |LCD_E_Pin|LCD_D4_Pin|LCD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003098:	2301      	movs	r3, #1
 800309a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800309c:	2302      	movs	r3, #2
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4824      	ldr	r0, [pc, #144]	; (800313c <MX_GPIO_Init+0x188>)
 80030ac:	f000 fca6 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_Screen_Pin */
  GPIO_InitStruct.Pin = LCD_Screen_Pin;
 80030b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030ba:	2302      	movs	r3, #2
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4619      	mov	r1, r3
 80030c8:	481d      	ldr	r0, [pc, #116]	; (8003140 <MX_GPIO_Init+0x18c>)
 80030ca:	f000 fc97 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
  GPIO_InitStruct.Pin = THS_Sensor1_Pin|THS_Sensor2_Pin;
 80030ce:	2303      	movs	r3, #3
 80030d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	4816      	ldr	r0, [pc, #88]	; (8003140 <MX_GPIO_Init+0x18c>)
 80030e6:	f000 fc89 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pin : STM_UserButton_Pin */
  GPIO_InitStruct.Pin = STM_UserButton_Pin;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <MX_GPIO_Init+0x194>)
 80030f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030f2:	2302      	movs	r3, #2
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	4813      	ldr	r0, [pc, #76]	; (800314c <MX_GPIO_Init+0x198>)
 80030fe:	f000 fc7d 	bl	80039fc <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
  GPIO_InitStruct.Pin = STM_Green_Pin|STM_Orange_Pin|STM_Red_Pin|STM_Blue_Pin;
 8003102:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003114:	f107 031c 	add.w	r3, r7, #28
 8003118:	4619      	mov	r1, r3
 800311a:	480a      	ldr	r0, [pc, #40]	; (8003144 <MX_GPIO_Init+0x190>)
 800311c:	f000 fc6e 	bl	80039fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	2006      	movs	r0, #6
 8003126:	f000 fc10 	bl	800394a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800312a:	2006      	movs	r0, #6
 800312c:	f000 fc29 	bl	8003982 <HAL_NVIC_EnableIRQ>

}
 8003130:	bf00      	nop
 8003132:	3730      	adds	r7, #48	; 0x30
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40021000 	.word	0x40021000
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	10110000 	.word	0x10110000
 800314c:	40020000 	.word	0x40020000

08003150 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d106      	bne.n	8003170 <HAL_TIM_PeriodElapsedCallback+0x20>
		_RGB_Test(_led);
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fb8a 	bl	8001880 <_RGB_Test>
		THS_ErrorClock();
 800316c:	f7fe fc72 	bl	8001a54 <THS_ErrorClock>
	} else if (htim->Instance == TIM3) {

	}
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000043a 	.word	0x2000043a

0800317c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d11a      	bne.n	80031c2 <HAL_GPIO_EXTI_Callback+0x46>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 800318c:	2101      	movs	r1, #1
 800318e:	480f      	ldr	r0, [pc, #60]	; (80031cc <HAL_GPIO_EXTI_Callback+0x50>)
 8003190:	f000 fdce 	bl	8003d30 <HAL_GPIO_ReadPin>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d113      	bne.n	80031c2 <HAL_GPIO_EXTI_Callback+0x46>
		{
			LCD_ToggleBackgroundLED();
 800319a:	f7fd ff0d 	bl	8000fb8 <LCD_ToggleBackgroundLED>

			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800319e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a2:	480b      	ldr	r0, [pc, #44]	; (80031d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80031a4:	f000 fdf5 	bl	8003d92 <HAL_GPIO_TogglePin>
			++_led;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80031b2:	701a      	strb	r2, [r3, #0]
			if (_led > 9)
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d902      	bls.n	80031c2 <HAL_GPIO_EXTI_Callback+0x46>
				_led = 0;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020c00 	.word	0x40020c00
 80031d4:	2000043a 	.word	0x2000043a

080031d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_UART_RxCpltCallback+0x24>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d104      	bne.n	80031f4 <HAL_UART_RxCpltCallback+0x1c>


		HAL_UART_Receive_IT(&huart3, receive, 10);
 80031ea:	220a      	movs	r2, #10
 80031ec:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_UART_RxCpltCallback+0x28>)
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <HAL_UART_RxCpltCallback+0x2c>)
 80031f0:	f003 fb2c 	bl	800684c <HAL_UART_Receive_IT>
	}
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40004800 	.word	0x40004800
 8003200:	200008c0 	.word	0x200008c0
 8003204:	20000808 	.word	0x20000808

08003208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_MspInit+0x4c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a0f      	ldr	r2, [pc, #60]	; (8003264 <HAL_MspInit+0x4c>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_MspInit+0x4c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_MspInit+0x4c>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a08      	ldr	r2, [pc, #32]	; (8003264 <HAL_MspInit+0x4c>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_MspInit+0x4c>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RTC_MspInit+0x24>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d102      	bne.n	8003280 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RTC_MspInit+0x28>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40002800 	.word	0x40002800
 8003290:	42470e3c 	.word	0x42470e3c

08003294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	; 0x28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_SPI_MspInit+0x84>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12b      	bne.n	800330e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a17      	ldr	r2, [pc, #92]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_SPI_MspInit+0x88>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80032ee:	2338      	movs	r3, #56	; 0x38
 80032f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032fe:	2305      	movs	r3, #5
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	4619      	mov	r1, r3
 8003308:	4805      	ldr	r0, [pc, #20]	; (8003320 <HAL_SPI_MspInit+0x8c>)
 800330a:	f000 fb77 	bl	80039fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800330e:	bf00      	nop
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40013000 	.word	0x40013000
 800331c:	40023800 	.word	0x40023800
 8003320:	40020400 	.word	0x40020400

08003324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d116      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	4a23      	ldr	r2, [pc, #140]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6413      	str	r3, [r2, #64]	; 0x40
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2102      	movs	r1, #2
 8003356:	201c      	movs	r0, #28
 8003358:	f000 faf7 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800335c:	201c      	movs	r0, #28
 800335e:	f000 fb10 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003362:	e02e      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_TIM_Base_MspInit+0xac>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d116      	bne.n	800339c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6413      	str	r3, [r2, #64]	; 0x40
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2103      	movs	r1, #3
 800338e:	201d      	movs	r0, #29
 8003390:	f000 fadb 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003394:	201d      	movs	r0, #29
 8003396:	f000 faf4 	bl	8003982 <HAL_NVIC_EnableIRQ>
}
 800339a:	e012      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_TIM_Base_MspInit+0xb0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10d      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_TIM_Base_MspInit+0xa8>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d11d      	bne.n	8003436 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 8003416:	2326      	movs	r3, #38	; 0x26
 8003418:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003426:	2301      	movs	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4619      	mov	r1, r3
 8003430:	4804      	ldr	r0, [pc, #16]	; (8003444 <HAL_TIM_MspPostInit+0x6c>)
 8003432:	f000 fae3 	bl	80039fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40020000 	.word	0x40020000

08003448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_UART_MspInit+0x94>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d134      	bne.n	80034d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <HAL_UART_MspInit+0x98>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_UART_MspInit+0x98>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_UART_MspInit+0x98>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_UART_MspInit+0x98>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_UART_MspInit+0x98>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_UART_MspInit+0x98>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034b4:	2307      	movs	r3, #7
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4809      	ldr	r0, [pc, #36]	; (80034e4 <HAL_UART_MspInit+0x9c>)
 80034c0:	f000 fa9c 	bl	80039fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2102      	movs	r1, #2
 80034c8:	2027      	movs	r0, #39	; 0x27
 80034ca:	f000 fa3e 	bl	800394a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034ce:	2027      	movs	r0, #39	; 0x27
 80034d0:	f000 fa57 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034d4:	bf00      	nop
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40004800 	.word	0x40004800
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020800 	.word	0x40020800

080034e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <MemManage_Handler+0x4>

08003502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <BusFault_Handler+0x4>

08003508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <UsageFault_Handler+0x4>

0800350e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 800353c:	f7fe fe60 	bl	8002200 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003540:	f000 f8e6 	bl	8003710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}

08003548 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800354c:	2001      	movs	r0, #1
 800354e:	f000 fc3b 	bl	8003dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <TIM2_IRQHandler+0x10>)
 800355e:	f002 f99b 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000097c 	.word	0x2000097c

0800356c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <TIM3_IRQHandler+0x10>)
 8003572:	f002 f991 	bl	8005898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000860 	.word	0x20000860

08003580 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <USART3_IRQHandler+0x10>)
 8003586:	f003 f9b7 	bl	80068f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000808 	.word	0x20000808

08003594 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <_sbrk+0x50>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <_sbrk+0x16>
		heap_end = &end;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <_sbrk+0x50>)
 80035a6:	4a10      	ldr	r2, [pc, #64]	; (80035e8 <_sbrk+0x54>)
 80035a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <_sbrk+0x50>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <_sbrk+0x50>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	466a      	mov	r2, sp
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d907      	bls.n	80035ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80035be:	f003 ff97 	bl	80074f0 <__errno>
 80035c2:	4602      	mov	r2, r0
 80035c4:	230c      	movs	r3, #12
 80035c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
 80035cc:	e006      	b.n	80035dc <_sbrk+0x48>
	}

	heap_end += incr;
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_sbrk+0x50>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <_sbrk+0x50>)
 80035d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2000043c 	.word	0x2000043c
 80035e8:	200009c8 	.word	0x200009c8

080035ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <SystemInit+0x28>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	4a07      	ldr	r2, [pc, #28]	; (8003614 <SystemInit+0x28>)
 80035f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <SystemInit+0x28>)
 8003602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003606:	609a      	str	r2, [r3, #8]
#endif
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800361c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800361e:	e003      	b.n	8003628 <LoopCopyDataInit>

08003620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003626:	3104      	adds	r1, #4

08003628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003628:	480b      	ldr	r0, [pc, #44]	; (8003658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800362c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800362e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003630:	d3f6      	bcc.n	8003620 <CopyDataInit>
  ldr  r2, =_sbss
 8003632:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003634:	e002      	b.n	800363c <LoopFillZerobss>

08003636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003638:	f842 3b04 	str.w	r3, [r2], #4

0800363c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800363e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003640:	d3f9      	bcc.n	8003636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003642:	f7ff ffd3 	bl	80035ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003646:	f003 ff59 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364a:	f7ff f9ef 	bl	8002a2c <main>
  bx  lr    
 800364e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003654:	080092e0 	.word	0x080092e0
  ldr  r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800365c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003660:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003664:	200009c4 	.word	0x200009c4

08003668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003668:	e7fe      	b.n	8003668 <ADC_IRQHandler>
	...

0800366c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_Init+0x40>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HAL_Init+0x40>)
 8003676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_Init+0x40>)
 8003682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a07      	ldr	r2, [pc, #28]	; (80036ac <HAL_Init+0x40>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003694:	2003      	movs	r0, #3
 8003696:	f000 f94d 	bl	8003934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800369a:	2000      	movs	r0, #0
 800369c:	f000 f808 	bl	80036b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a0:	f7ff fdba 	bl	8003218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00

080036b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036b8:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_InitTick+0x54>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b12      	ldr	r3, [pc, #72]	; (8003708 <HAL_InitTick+0x58>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f965 	bl	800399e <HAL_SYSTICK_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00e      	b.n	80036fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d80a      	bhi.n	80036fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f000 f92d 	bl	800394a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <HAL_InitTick+0x5c>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000008 	.word	0x20000008
 8003708:	20000010 	.word	0x20000010
 800370c:	2000000c 	.word	0x2000000c

08003710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_IncTick+0x20>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x24>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_IncTick+0x24>)
 8003722:	6013      	str	r3, [r2, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000010 	.word	0x20000010
 8003734:	200009bc 	.word	0x200009bc

08003738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return uwTick;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_GetTick+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200009bc 	.word	0x200009bc

08003750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff ffee 	bl	8003738 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d005      	beq.n	8003776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_Delay+0x40>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003776:	bf00      	nop
 8003778:	f7ff ffde 	bl	8003738 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	429a      	cmp	r2, r3
 8003786:	d8f7      	bhi.n	8003778 <HAL_Delay+0x28>
  {
  }
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000010 	.word	0x20000010

08003794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <__NVIC_GetPriorityGrouping+0x18>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	f003 0307 	and.w	r3, r3, #7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	db0b      	blt.n	8003822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <__NVIC_EnableIRQ+0x38>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2001      	movs	r0, #1
 800381a:	fa00 f202 	lsl.w	r2, r0, r2
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100

08003834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	; (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	; (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003888:	b480      	push	{r7}
 800388a:	b089      	sub	sp, #36	; 0x24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f1c3 0307 	rsb	r3, r3, #7
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	bf28      	it	cs
 80038a6:	2304      	movcs	r3, #4
 80038a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <NVIC_EncodePriority+0x30>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3b03      	subs	r3, #3
 80038b6:	e000      	b.n	80038ba <NVIC_EncodePriority+0x32>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	401a      	ands	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d0:	f04f 31ff 	mov.w	r1, #4294967295
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa01 f303 	lsl.w	r3, r1, r3
 80038da:	43d9      	mvns	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	4313      	orrs	r3, r2
         );
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3724      	adds	r7, #36	; 0x24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003900:	d301      	bcc.n	8003906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003902:	2301      	movs	r3, #1
 8003904:	e00f      	b.n	8003926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <SysTick_Config+0x40>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390e:	210f      	movs	r1, #15
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f7ff ff8e 	bl	8003834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <SysTick_Config+0x40>)
 800391a:	2200      	movs	r2, #0
 800391c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <SysTick_Config+0x40>)
 8003920:	2207      	movs	r2, #7
 8003922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	e000e010 	.word	0xe000e010

08003934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff29 	bl	8003794 <__NVIC_SetPriorityGrouping>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff3e 	bl	80037dc <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff8e 	bl	8003888 <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5d 	bl	8003834 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff31 	bl	80037f8 <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa2 	bl	80038f0 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e00c      	b.n	80039ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2205      	movs	r2, #5
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e16b      	b.n	8003cf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a18:	2201      	movs	r2, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	f040 815a 	bne.w	8003cea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d00b      	beq.n	8003a56 <HAL_GPIO_Init+0x5a>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4a:	2b11      	cmp	r3, #17
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0xfc>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b12      	cmp	r3, #18
 8003af6:	d123      	bne.n	8003b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	08da      	lsrs	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3208      	adds	r2, #8
 8003b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	220f      	movs	r2, #15
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	08da      	lsrs	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3208      	adds	r2, #8
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0203 	and.w	r2, r3, #3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80b4 	beq.w	8003cea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b5f      	ldr	r3, [pc, #380]	; (8003d04 <HAL_GPIO_Init+0x308>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <HAL_GPIO_Init+0x308>)
 8003b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	4b5c      	ldr	r3, [pc, #368]	; (8003d04 <HAL_GPIO_Init+0x308>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9e:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_GPIO_Init+0x30c>)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a51      	ldr	r2, [pc, #324]	; (8003d0c <HAL_GPIO_Init+0x310>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d02b      	beq.n	8003c22 <HAL_GPIO_Init+0x226>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a50      	ldr	r2, [pc, #320]	; (8003d10 <HAL_GPIO_Init+0x314>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d025      	beq.n	8003c1e <HAL_GPIO_Init+0x222>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4f      	ldr	r2, [pc, #316]	; (8003d14 <HAL_GPIO_Init+0x318>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01f      	beq.n	8003c1a <HAL_GPIO_Init+0x21e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a4e      	ldr	r2, [pc, #312]	; (8003d18 <HAL_GPIO_Init+0x31c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d019      	beq.n	8003c16 <HAL_GPIO_Init+0x21a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4d      	ldr	r2, [pc, #308]	; (8003d1c <HAL_GPIO_Init+0x320>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_GPIO_Init+0x216>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4c      	ldr	r2, [pc, #304]	; (8003d20 <HAL_GPIO_Init+0x324>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00d      	beq.n	8003c0e <HAL_GPIO_Init+0x212>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4b      	ldr	r2, [pc, #300]	; (8003d24 <HAL_GPIO_Init+0x328>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <HAL_GPIO_Init+0x20e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <HAL_GPIO_Init+0x32c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_GPIO_Init+0x20a>
 8003c02:	2307      	movs	r3, #7
 8003c04:	e00e      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00c      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	e00a      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e008      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e004      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_GPIO_Init+0x228>
 8003c22:	2300      	movs	r3, #0
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f002 0203 	and.w	r2, r2, #3
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	4093      	lsls	r3, r2
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c34:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_GPIO_Init+0x30c>)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c42:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c66:	4a31      	ldr	r2, [pc, #196]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_GPIO_Init+0x330>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	f67f ae90 	bls.w	8003a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3724      	adds	r7, #36	; 0x24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d7c:	e003      	b.n	8003d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	041a      	lsls	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	619a      	str	r2, [r3, #24]
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	401a      	ands	r2, r3
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d104      	bne.n	8003db6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	041a      	lsls	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff f9c8 	bl	800317c <HAL_GPIO_EXTI_Callback>
  }
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40013c00 	.word	0x40013c00

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e25b      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d075      	beq.n	8003f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e16:	4ba3      	ldr	r3, [pc, #652]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d00c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e22:	4ba0      	ldr	r3, [pc, #640]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d112      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2e:	4b9d      	ldr	r3, [pc, #628]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e3a:	d10b      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	4b99      	ldr	r3, [pc, #612]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d05b      	beq.n	8003f00 <HAL_RCC_OscConfig+0x108>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d157      	bne.n	8003f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e236      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5c:	d106      	bne.n	8003e6c <HAL_RCC_OscConfig+0x74>
 8003e5e:	4b91      	ldr	r3, [pc, #580]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a90      	ldr	r2, [pc, #576]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e01d      	b.n	8003ea8 <HAL_RCC_OscConfig+0xb0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x98>
 8003e76:	4b8b      	ldr	r3, [pc, #556]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a8a      	ldr	r2, [pc, #552]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a87      	ldr	r2, [pc, #540]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e00b      	b.n	8003ea8 <HAL_RCC_OscConfig+0xb0>
 8003e90:	4b84      	ldr	r3, [pc, #528]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a83      	ldr	r2, [pc, #524]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b81      	ldr	r3, [pc, #516]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a80      	ldr	r2, [pc, #512]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d013      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7ff fc42 	bl	8003738 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7ff fc3e 	bl	8003738 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1fb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0xc0>
 8003ed6:	e014      	b.n	8003f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7ff fc2e 	bl	8003738 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7ff fc2a 	bl	8003738 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1e7      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xe8>
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d063      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0e:	4b65      	ldr	r3, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1a:	4b62      	ldr	r3, [pc, #392]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d11c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f26:	4b5f      	ldr	r3, [pc, #380]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d116      	bne.n	8003f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f32:	4b5c      	ldr	r3, [pc, #368]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_RCC_OscConfig+0x152>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e1bb      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4952      	ldr	r1, [pc, #328]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	e03a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f68:	4b4f      	ldr	r3, [pc, #316]	; (80040a8 <HAL_RCC_OscConfig+0x2b0>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7ff fbe3 	bl	8003738 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f76:	f7ff fbdf 	bl	8003738 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e19c      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4940      	ldr	r1, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
 8003fa8:	e015      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003faa:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <HAL_RCC_OscConfig+0x2b0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fbc2 	bl	8003738 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7ff fbbe 	bl	8003738 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e17b      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d030      	beq.n	8004044 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_RCC_OscConfig+0x2b4>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7ff fba2 	bl	8003738 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7ff fb9e 	bl	8003738 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e15b      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x200>
 8004016:	e015      	b.n	8004044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <HAL_RCC_OscConfig+0x2b4>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401e:	f7ff fb8b 	bl	8003738 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004026:	f7ff fb87 	bl	8003738 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e144      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 800403a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a0 	beq.w	8004192 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_OscConfig+0x2b8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d121      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCC_OscConfig+0x2b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <HAL_RCC_OscConfig+0x2b8>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409a:	f7ff fb4d 	bl	8003738 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	e011      	b.n	80040c6 <HAL_RCC_OscConfig+0x2ce>
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	42470000 	.word	0x42470000
 80040ac:	42470e80 	.word	0x42470e80
 80040b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b4:	f7ff fb40 	bl	8003738 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0fd      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b81      	ldr	r3, [pc, #516]	; (80042cc <HAL_RCC_OscConfig+0x4d4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d106      	bne.n	80040e8 <HAL_RCC_OscConfig+0x2f0>
 80040da:	4b7d      	ldr	r3, [pc, #500]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a7c      	ldr	r2, [pc, #496]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e01c      	b.n	8004122 <HAL_RCC_OscConfig+0x32a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x312>
 80040f0:	4b77      	ldr	r3, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a76      	ldr	r2, [pc, #472]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b74      	ldr	r3, [pc, #464]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a73      	ldr	r2, [pc, #460]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e00b      	b.n	8004122 <HAL_RCC_OscConfig+0x32a>
 800410a:	4b71      	ldr	r3, [pc, #452]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a70      	ldr	r2, [pc, #448]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b6e      	ldr	r3, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a6d      	ldr	r2, [pc, #436]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d015      	beq.n	8004156 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7ff fb05 	bl	8003738 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7ff fb01 	bl	8003738 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0bc      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RCC_OscConfig+0x33a>
 8004154:	e014      	b.n	8004180 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7ff faef 	bl	8003738 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7ff faeb 	bl	8003738 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e0a6      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004174:	4b56      	ldr	r3, [pc, #344]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004186:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a51      	ldr	r2, [pc, #324]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 800418c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8092 	beq.w	80042c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d05c      	beq.n	8004262 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d141      	bne.n	8004234 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b48      	ldr	r3, [pc, #288]	; (80042d4 <HAL_RCC_OscConfig+0x4dc>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7ff fabf 	bl	8003738 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041be:	f7ff fabb 	bl	8003738 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e078      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d0:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	019b      	lsls	r3, r3, #6
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	4933      	ldr	r1, [pc, #204]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCC_OscConfig+0x4dc>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420c:	f7ff fa94 	bl	8003738 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004214:	f7ff fa90 	bl	8003738 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e04d      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x41c>
 8004232:	e045      	b.n	80042c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <HAL_RCC_OscConfig+0x4dc>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7ff fa7d 	bl	8003738 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004242:	f7ff fa79 	bl	8003738 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e036      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004254:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x44a>
 8004260:	e02e      	b.n	80042c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e029      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_RCC_OscConfig+0x4d8>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	429a      	cmp	r2, r3
 8004280:	d11c      	bne.n	80042bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d115      	bne.n	80042bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004296:	4013      	ands	r3, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800429c:	4293      	cmp	r3, r2
 800429e:	d10d      	bne.n	80042bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40007000 	.word	0x40007000
 80042d0:	40023800 	.word	0x40023800
 80042d4:	42470060 	.word	0x42470060

080042d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cc      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d90c      	bls.n	8004314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0b8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	494d      	ldr	r1, [pc, #308]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d044      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e067      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4934      	ldr	r1, [pc, #208]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7ff f9b6 	bl	8003738 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7ff f9b2 	bl	8003738 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20c      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e032      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4916      	ldr	r1, [pc, #88]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445e:	f000 f821 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004462:	4601      	mov	r1, r0
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	5cd3      	ldrb	r3, [r2, r3]
 8004472:	fa21 f303 	lsr.w	r3, r1, r3
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f916 	bl	80036b0 <HAL_InitTick>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023c00 	.word	0x40023c00
 8004494:	40023800 	.word	0x40023800
 8004498:	08009090 	.word	0x08009090
 800449c:	20000008 	.word	0x20000008
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	2300      	movs	r3, #0
 80044b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044ba:	4b63      	ldr	r3, [pc, #396]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d007      	beq.n	80044d6 <HAL_RCC_GetSysClockFreq+0x32>
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d008      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x38>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80b4 	bne.w	8004638 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044d2:	60bb      	str	r3, [r7, #8]
       break;
 80044d4:	e0b3      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d6:	4b5e      	ldr	r3, [pc, #376]	; (8004650 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044d8:	60bb      	str	r3, [r7, #8]
      break;
 80044da:	e0b0      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044dc:	4b5a      	ldr	r3, [pc, #360]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e6:	4b58      	ldr	r3, [pc, #352]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04a      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b55      	ldr	r3, [pc, #340]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	f04f 0400 	mov.w	r4, #0
 80044fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	ea03 0501 	and.w	r5, r3, r1
 8004508:	ea04 0602 	and.w	r6, r4, r2
 800450c:	4629      	mov	r1, r5
 800450e:	4632      	mov	r2, r6
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0154      	lsls	r4, r2, #5
 800451a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800451e:	014b      	lsls	r3, r1, #5
 8004520:	4619      	mov	r1, r3
 8004522:	4622      	mov	r2, r4
 8004524:	1b49      	subs	r1, r1, r5
 8004526:	eb62 0206 	sbc.w	r2, r2, r6
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	f04f 0400 	mov.w	r4, #0
 8004532:	0194      	lsls	r4, r2, #6
 8004534:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004538:	018b      	lsls	r3, r1, #6
 800453a:	1a5b      	subs	r3, r3, r1
 800453c:	eb64 0402 	sbc.w	r4, r4, r2
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	00e2      	lsls	r2, r4, #3
 800454a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800454e:	00d9      	lsls	r1, r3, #3
 8004550:	460b      	mov	r3, r1
 8004552:	4614      	mov	r4, r2
 8004554:	195b      	adds	r3, r3, r5
 8004556:	eb44 0406 	adc.w	r4, r4, r6
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	0262      	lsls	r2, r4, #9
 8004564:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004568:	0259      	lsls	r1, r3, #9
 800456a:	460b      	mov	r3, r1
 800456c:	4614      	mov	r4, r2
 800456e:	4618      	mov	r0, r3
 8004570:	4621      	mov	r1, r4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 0400 	mov.w	r4, #0
 8004578:	461a      	mov	r2, r3
 800457a:	4623      	mov	r3, r4
 800457c:	f7fc fac0 	bl	8000b00 <__aeabi_uldivmod>
 8004580:	4603      	mov	r3, r0
 8004582:	460c      	mov	r4, r1
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e049      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	ea03 0501 	and.w	r5, r3, r1
 800459e:	ea04 0602 	and.w	r6, r4, r2
 80045a2:	4629      	mov	r1, r5
 80045a4:	4632      	mov	r2, r6
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	f04f 0400 	mov.w	r4, #0
 80045ae:	0154      	lsls	r4, r2, #5
 80045b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045b4:	014b      	lsls	r3, r1, #5
 80045b6:	4619      	mov	r1, r3
 80045b8:	4622      	mov	r2, r4
 80045ba:	1b49      	subs	r1, r1, r5
 80045bc:	eb62 0206 	sbc.w	r2, r2, r6
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	f04f 0400 	mov.w	r4, #0
 80045c8:	0194      	lsls	r4, r2, #6
 80045ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045ce:	018b      	lsls	r3, r1, #6
 80045d0:	1a5b      	subs	r3, r3, r1
 80045d2:	eb64 0402 	sbc.w	r4, r4, r2
 80045d6:	f04f 0100 	mov.w	r1, #0
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	00e2      	lsls	r2, r4, #3
 80045e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045e4:	00d9      	lsls	r1, r3, #3
 80045e6:	460b      	mov	r3, r1
 80045e8:	4614      	mov	r4, r2
 80045ea:	195b      	adds	r3, r3, r5
 80045ec:	eb44 0406 	adc.w	r4, r4, r6
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	02a2      	lsls	r2, r4, #10
 80045fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045fe:	0299      	lsls	r1, r3, #10
 8004600:	460b      	mov	r3, r1
 8004602:	4614      	mov	r4, r2
 8004604:	4618      	mov	r0, r3
 8004606:	4621      	mov	r1, r4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	461a      	mov	r2, r3
 8004610:	4623      	mov	r3, r4
 8004612:	f7fc fa75 	bl	8000b00 <__aeabi_uldivmod>
 8004616:	4603      	mov	r3, r0
 8004618:	460c      	mov	r4, r1
 800461a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
      break;
 8004636:	e002      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800463a:	60bb      	str	r3, [r7, #8]
      break;
 800463c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463e:	68bb      	ldr	r3, [r7, #8]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	00f42400 	.word	0x00f42400
 8004650:	007a1200 	.word	0x007a1200

08004654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_RCC_GetHCLKFreq+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000008 	.word	0x20000008

0800466c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004670:	f7ff fff0 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 8004674:	4601      	mov	r1, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0a9b      	lsrs	r3, r3, #10
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4a03      	ldr	r2, [pc, #12]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40023800 	.word	0x40023800
 8004690:	080090a0 	.word	0x080090a0

08004694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004698:	f7ff ffdc 	bl	8004654 <HAL_RCC_GetHCLKFreq>
 800469c:	4601      	mov	r1, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	0b5b      	lsrs	r3, r3, #13
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046aa:	5cd3      	ldrb	r3, [r2, r3]
 80046ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	080090a0 	.word	0x080090a0

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d035      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046e4:	4b62      	ldr	r3, [pc, #392]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ea:	f7ff f825 	bl	8003738 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046f2:	f7ff f821 	bl	8003738 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0b0      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004704:	4b5b      	ldr	r3, [pc, #364]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	019a      	lsls	r2, r3, #6
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	071b      	lsls	r3, r3, #28
 800471c:	4955      	ldr	r1, [pc, #340]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004724:	4b52      	ldr	r3, [pc, #328]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800472a:	f7ff f805 	bl	8003738 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004732:	f7ff f801 	bl	8003738 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e090      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	4b4b      	ldr	r3, [pc, #300]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8083 	beq.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b44      	ldr	r3, [pc, #272]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a43      	ldr	r2, [pc, #268]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800477a:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004786:	f7fe ffd7 	bl	8003738 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe ffd3 	bl	8003738 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e062      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a0:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ac:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02f      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d028      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ca:	4b2a      	ldr	r3, [pc, #168]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d4:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047da:	4b28      	ldr	r3, [pc, #160]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047e0:	4a24      	ldr	r2, [pc, #144]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047e6:	4b23      	ldr	r3, [pc, #140]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d114      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fe ffa1 	bl	8003738 <HAL_GetTick>
 80047f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f8:	e00a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fe ff9d 	bl	8003738 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	; 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d901      	bls.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e02a      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	4b18      	ldr	r3, [pc, #96]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ee      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004828:	d10d      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	490d      	ldr	r1, [pc, #52]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]
 8004844:	e005      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4a0a      	ldr	r2, [pc, #40]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485e:	4905      	ldr	r1, [pc, #20]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	42470068 	.word	0x42470068
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000
 800487c:	42470e40 	.word	0x42470e40

08004880 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e083      	b.n	800499a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7f5b      	ldrb	r3, [r3, #29]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe fce0 	bl	8003268 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ca      	movs	r2, #202	; 0xca
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2253      	movs	r2, #83	; 0x53
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 faa8 	bl	8004e14 <RTC_EnterInitMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e05e      	b.n	800499a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6899      	ldr	r1, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	041a      	lsls	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800493a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10e      	bne.n	8004968 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa3a 	bl	8004dc4 <HAL_RTC_WaitForSynchro>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e018      	b.n	800499a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	22ff      	movs	r2, #255	; 0xff
 8004990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049a2:	b590      	push	{r4, r7, lr}
 80049a4:	b087      	sub	sp, #28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	7f1b      	ldrb	r3, [r3, #28]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_RTC_SetTime+0x1c>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0aa      	b.n	8004b14 <HAL_RTC_SetTime+0x172>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2202      	movs	r2, #2
 80049c8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d126      	bne.n	8004a1e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2200      	movs	r2, #0
 80049e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fa3f 	bl	8004e6c <RTC_ByteToBcd2>
 80049ee:	4603      	mov	r3, r0
 80049f0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fa38 	bl	8004e6c <RTC_ByteToBcd2>
 80049fc:	4603      	mov	r3, r0
 80049fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a00:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	789b      	ldrb	r3, [r3, #2]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fa30 	bl	8004e6c <RTC_ByteToBcd2>
 8004a0c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a0e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e018      	b.n	8004a50 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	785b      	ldrb	r3, [r3, #1]
 8004a3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a3e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a44:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	78db      	ldrb	r3, [r3, #3]
 8004a4a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	22ca      	movs	r2, #202	; 0xca
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2253      	movs	r2, #83	; 0x53
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f9d7 	bl	8004e14 <RTC_EnterInitMode>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e047      	b.n	8004b14 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d111      	bne.n	8004afe <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f972 	bl	8004dc4 <HAL_RTC_WaitForSynchro>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	22ff      	movs	r2, #255	; 0xff
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2204      	movs	r2, #4
 8004af2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e00a      	b.n	8004b14 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004b12:	2300      	movs	r3, #0
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}

08004b1c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004b4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d11a      	bne.n	8004bce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f983 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f97a 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	789b      	ldrb	r3, [r3, #2]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f971 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	7f1b      	ldrb	r3, [r3, #28]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_RTC_SetDate+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e094      	b.n	8004d1e <HAL_RTC_SetDate+0x146>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10e      	bne.n	8004c24 <HAL_RTC_SetDate+0x4c>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	f023 0310 	bic.w	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	330a      	adds	r3, #10
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11c      	bne.n	8004c64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	78db      	ldrb	r3, [r3, #3]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f91c 	bl	8004e6c <RTC_ByteToBcd2>
 8004c34:	4603      	mov	r3, r0
 8004c36:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f915 	bl	8004e6c <RTC_ByteToBcd2>
 8004c42:	4603      	mov	r3, r0
 8004c44:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c46:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	789b      	ldrb	r3, [r3, #2]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 f90d 	bl	8004e6c <RTC_ByteToBcd2>
 8004c52:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004c54:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e00e      	b.n	8004c82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	78db      	ldrb	r3, [r3, #3]
 8004c68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	785b      	ldrb	r3, [r3, #1]
 8004c6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c70:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004c76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	22ca      	movs	r2, #202	; 0xca
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2253      	movs	r2, #83	; 0x53
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 f8be 	bl	8004e14 <RTC_EnterInitMode>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	22ff      	movs	r2, #255	; 0xff
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e033      	b.n	8004d1e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004cc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cc4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d111      	bne.n	8004d08 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f86d 	bl	8004dc4 <HAL_RTC_WaitForSynchro>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	22ff      	movs	r2, #255	; 0xff
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e00a      	b.n	8004d1e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd90      	pop	{r4, r7, pc}

08004d26 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	0c1b      	lsrs	r3, r3, #16
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	0b5b      	lsrs	r3, r3, #13
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11a      	bne.n	8004dba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	78db      	ldrb	r3, [r3, #3]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f88d 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f884 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	789b      	ldrb	r3, [r3, #2]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f87b 	bl	8004ea8 <RTC_Bcd2ToByte>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dde:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de0:	f7fe fcaa 	bl	8003738 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004de6:	e009      	b.n	8004dfc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004de8:	f7fe fca6 	bl	8003738 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df6:	d901      	bls.n	8004dfc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e007      	b.n	8004e0c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ee      	beq.n	8004de8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d119      	bne.n	8004e62 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e38:	f7fe fc7e 	bl	8003738 <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e3e:	e009      	b.n	8004e54 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e40:	f7fe fc7a 	bl	8003738 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4e:	d901      	bls.n	8004e54 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e007      	b.n	8004e64 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ee      	beq.n	8004e40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004e7a:	e005      	b.n	8004e88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	3b0a      	subs	r3, #10
 8004e86:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d8f6      	bhi.n	8004e7c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b2db      	uxtb	r3, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	b2db      	uxtb	r3, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e056      	b.n	8004fa4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7fe f9bf 	bl	8003294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	ea42 0103 	orr.w	r1, r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	0c1b      	lsrs	r3, r3, #16
 8004f74:	f003 0104 	and.w	r1, r3, #4
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69da      	ldr	r2, [r3, #28]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_SPI_Transmit+0x22>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e11e      	b.n	800520c <HAL_SPI_Transmit+0x260>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd6:	f7fe fbaf 	bl	8003738 <HAL_GetTick>
 8004fda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
 8004fee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ff0:	e103      	b.n	80051fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_Transmit+0x52>
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005002:	e0fa      	b.n	80051fa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2203      	movs	r2, #3
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504a:	d107      	bne.n	800505c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d007      	beq.n	800507a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005082:	d14b      	bne.n	800511c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0xe6>
 800508c:	8afb      	ldrh	r3, [r7, #22]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d13e      	bne.n	8005110 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050b6:	e02b      	b.n	8005110 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d112      	bne.n	80050ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80050ea:	e011      	b.n	8005110 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ec:	f7fe fb24 	bl	8003738 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d803      	bhi.n	8005104 <HAL_SPI_Transmit+0x158>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d102      	bne.n	800510a <HAL_SPI_Transmit+0x15e>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800510e:	e074      	b.n	80051fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ce      	bne.n	80050b8 <HAL_SPI_Transmit+0x10c>
 800511a:	e04c      	b.n	80051b6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_SPI_Transmit+0x17e>
 8005124:	8afb      	ldrh	r3, [r7, #22]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d140      	bne.n	80051ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005150:	e02c      	b.n	80051ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d113      	bne.n	8005188 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	86da      	strh	r2, [r3, #54]	; 0x36
 8005186:	e011      	b.n	80051ac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005188:	f7fe fad6 	bl	8003738 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d803      	bhi.n	80051a0 <HAL_SPI_Transmit+0x1f4>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d102      	bne.n	80051a6 <HAL_SPI_Transmit+0x1fa>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051aa:	e026      	b.n	80051fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1cd      	bne.n	8005152 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fa44 	bl	8005648 <SPI_EndRxTxTransaction>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e000      	b.n	80051fa <HAL_SPI_Transmit+0x24e>
  }

error:
 80051f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800520a:	7ffb      	ldrb	r3, [r7, #31]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08c      	sub	sp, #48	; 0x30
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005222:	2301      	movs	r3, #1
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_SPI_TransmitReceive+0x26>
 8005236:	2302      	movs	r3, #2
 8005238:	e18a      	b.n	8005550 <HAL_SPI_TransmitReceive+0x33c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005242:	f7fe fa79 	bl	8003738 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800525c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005260:	2b01      	cmp	r3, #1
 8005262:	d00f      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x70>
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526a:	d107      	bne.n	800527c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <HAL_SPI_TransmitReceive+0x68>
 8005274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005278:	2b04      	cmp	r3, #4
 800527a:	d003      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005282:	e15b      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x82>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x82>
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800529c:	e14e      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2205      	movs	r2, #5
 80052ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	887a      	ldrh	r2, [r7, #2]
 80052c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	887a      	ldrh	r2, [r7, #2]
 80052da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d007      	beq.n	8005306 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005304:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530e:	d178      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_SPI_TransmitReceive+0x10a>
 8005318:	8b7b      	ldrh	r3, [r7, #26]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d166      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	881a      	ldrh	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	1c9a      	adds	r2, r3, #2
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005342:	e053      	b.n	80053ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d11b      	bne.n	800538a <HAL_SPI_TransmitReceive+0x176>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d016      	beq.n	800538a <HAL_SPI_TransmitReceive+0x176>
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d113      	bne.n	800538a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	1c9a      	adds	r2, r3, #2
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d119      	bne.n	80053cc <HAL_SPI_TransmitReceive+0x1b8>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d014      	beq.n	80053cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	b292      	uxth	r2, r2
 80053ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c8:	2301      	movs	r3, #1
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053cc:	f7fe f9b4 	bl	8003738 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d8:	429a      	cmp	r2, r3
 80053da:	d807      	bhi.n	80053ec <HAL_SPI_TransmitReceive+0x1d8>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d003      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053ea:	e0a7      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1a6      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x130>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1a1      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x130>
 8005400:	e07c      	b.n	80054fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_TransmitReceive+0x1fc>
 800540a:	8b7b      	ldrh	r3, [r7, #26]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d16b      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005436:	e057      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d11c      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x26c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_SPI_TransmitReceive+0x26c>
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d114      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d119      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x2ae>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c2:	f7fe f939 	bl	8003738 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d803      	bhi.n	80054da <HAL_SPI_TransmitReceive+0x2c6>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d102      	bne.n	80054e0 <HAL_SPI_TransmitReceive+0x2cc>
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054e6:	e029      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1a2      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x224>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d19d      	bne.n	8005438 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f8a1 	bl	8005648 <SPI_EndRxTxTransaction>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005518:	e010      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e000      	b.n	800553c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800553a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800554c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	; 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005566:	b2db      	uxtb	r3, r3
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005584:	e04c      	b.n	8005620 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558c:	d048      	beq.n	8005620 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800558e:	f7fe f8d3 	bl	8003738 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d902      	bls.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d13d      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055bc:	d111      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c6:	d004      	beq.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d0:	d107      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d10f      	bne.n	800560c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e00f      	b.n	8005640 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	429a      	cmp	r2, r3
 800563c:	d1a3      	bne.n	8005586 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <SPI_EndRxTxTransaction+0x7c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <SPI_EndRxTxTransaction+0x80>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0d5b      	lsrs	r3, r3, #21
 8005660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005672:	d112      	bne.n	800569a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff ff78 	bl	8005574 <SPI_WaitFlagStateUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e00f      	b.n	80056ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b80      	cmp	r3, #128	; 0x80
 80056b2:	d0f2      	beq.n	800569a <SPI_EndRxTxTransaction+0x52>
 80056b4:	e000      	b.n	80056b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80056b6:	bf00      	nop
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000008 	.word	0x20000008
 80056c8:	165e9f81 	.word	0x165e9f81

080056cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e01d      	b.n	800571a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fd fe16 	bl	8003324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f000 fb72 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b06      	cmp	r3, #6
 8005742:	d007      	beq.n	8005754 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b06      	cmp	r3, #6
 8005792:	d007      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e01d      	b.n	8005800 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f815 	bl	8005808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 faff 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fdca 	bl	80063c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a15      	ldr	r2, [pc, #84]	; (8005890 <HAL_TIM_PWM_Start+0x74>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_TIM_PWM_Start+0x2c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <HAL_TIM_PWM_Start+0x78>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_TIM_PWM_Start+0x30>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_TIM_PWM_Start+0x32>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d007      	beq.n	8005884 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0202 	mvn.w	r2, #2
 80058c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa6b 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa5d 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa6e 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0204 	mvn.w	r2, #4
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa41 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa33 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fa44 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b08      	cmp	r3, #8
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0208 	mvn.w	r2, #8
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2204      	movs	r2, #4
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa17 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa09 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa1a 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0210 	mvn.w	r2, #16
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2208      	movs	r2, #8
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f9ed 	bl	8005db6 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9df 	bl	8005da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f9f0 	bl	8005dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0201 	mvn.w	r2, #1
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fd fb9a 	bl	8003150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b80      	cmp	r3, #128	; 0x80
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd6c 	bl	8006520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9b5 	bl	8005dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d107      	bne.n	8005aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0220 	mvn.w	r2, #32
 8005a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fd36 	bl	800650c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0b4      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	f200 809f 	bhi.w	8005c18 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005c19 	.word	0x08005c19
 8005ae8:	08005c19 	.word	0x08005c19
 8005aec:	08005c19 	.word	0x08005c19
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005c19 	.word	0x08005c19
 8005af8:	08005c19 	.word	0x08005c19
 8005afc:	08005c19 	.word	0x08005c19
 8005b00:	08005b97 	.word	0x08005b97
 8005b04:	08005c19 	.word	0x08005c19
 8005b08:	08005c19 	.word	0x08005c19
 8005b0c:	08005c19 	.word	0x08005c19
 8005b10:	08005bd7 	.word	0x08005bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fa0a 	bl	8005f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0208 	orr.w	r2, r2, #8
 8005b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0204 	bic.w	r2, r2, #4
 8005b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	619a      	str	r2, [r3, #24]
      break;
 8005b52:	e062      	b.n	8005c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fa5a 	bl	8006014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	021a      	lsls	r2, r3, #8
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	619a      	str	r2, [r3, #24]
      break;
 8005b94:	e041      	b.n	8005c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 faaf 	bl	8006100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0208 	orr.w	r2, r2, #8
 8005bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0204 	bic.w	r2, r2, #4
 8005bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69d9      	ldr	r1, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	61da      	str	r2, [r3, #28]
      break;
 8005bd4:	e021      	b.n	8005c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fb03 	bl	80061e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	021a      	lsls	r2, r3, #8
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	61da      	str	r2, [r3, #28]
      break;
 8005c16:	e000      	b.n	8005c1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005c18:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_ConfigClockSource+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e0a6      	b.n	8005d9a <HAL_TIM_ConfigClockSource+0x166>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d067      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x120>
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d80b      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x6c>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d073      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x140>
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d802      	bhi.n	8005c96 <HAL_TIM_ConfigClockSource+0x62>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d06f      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c94:	e078      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d06c      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x140>
 8005c9a:	2b30      	cmp	r3, #48	; 0x30
 8005c9c:	d06a      	beq.n	8005d74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c9e:	e073      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ca0:	2b70      	cmp	r3, #112	; 0x70
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x8c>
 8005ca4:	2b70      	cmp	r3, #112	; 0x70
 8005ca6:	d804      	bhi.n	8005cb2 <HAL_TIM_ConfigClockSource+0x7e>
 8005ca8:	2b50      	cmp	r3, #80	; 0x50
 8005caa:	d033      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0xe0>
 8005cac:	2b60      	cmp	r3, #96	; 0x60
 8005cae:	d041      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005cb0:	e06a      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	d066      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x152>
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	d017      	beq.n	8005cee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005cbe:	e063      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f000 fb5a 	bl	8006388 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ce2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	609a      	str	r2, [r3, #8]
      break;
 8005cec:	e04c      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f000 fb43 	bl	8006388 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d10:	609a      	str	r2, [r3, #8]
      break;
 8005d12:	e039      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f000 fab7 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2150      	movs	r1, #80	; 0x50
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fb10 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8005d32:	e029      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6859      	ldr	r1, [r3, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f000 fad6 	bl	80062f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2160      	movs	r1, #96	; 0x60
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fb00 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8005d52:	e019      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	461a      	mov	r2, r3
 8005d62:	f000 fa97 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2140      	movs	r1, #64	; 0x40
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 faf0 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8005d72:	e009      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fae7 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3d      	ldr	r2, [pc, #244]	; (8005f0c <TIM_Base_SetConfig+0x118>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3c      	ldr	r2, [pc, #240]	; (8005f10 <TIM_Base_SetConfig+0x11c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3b      	ldr	r2, [pc, #236]	; (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3a      	ldr	r2, [pc, #232]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d027      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2c      	ldr	r2, [pc, #176]	; (8005f0c <TIM_Base_SetConfig+0x118>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d023      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	; (8005f10 <TIM_Base_SetConfig+0x11c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2a      	ldr	r2, [pc, #168]	; (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_Base_SetConfig+0x128>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <TIM_Base_SetConfig+0x134>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <TIM_Base_SetConfig+0x138>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a23      	ldr	r2, [pc, #140]	; (8005f30 <TIM_Base_SetConfig+0x13c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a0c      	ldr	r2, [pc, #48]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d103      	bne.n	8005ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800
 8005f28:	40001800 	.word	0x40001800
 8005f2c:	40001c00 	.word	0x40001c00
 8005f30:	40002000 	.word	0x40002000

08005f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f023 0201 	bic.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 0302 	bic.w	r3, r3, #2
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a20      	ldr	r2, [pc, #128]	; (800600c <TIM_OC1_SetConfig+0xd8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_OC1_SetConfig+0x64>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <TIM_OC1_SetConfig+0xdc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10c      	bne.n	8005fb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0308 	bic.w	r3, r3, #8
 8005f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f023 0304 	bic.w	r3, r3, #4
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <TIM_OC1_SetConfig+0xd8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_OC1_SetConfig+0x8e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <TIM_OC1_SetConfig+0xdc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d111      	bne.n	8005fe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	621a      	str	r2, [r3, #32]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0210 	bic.w	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0320 	bic.w	r3, r3, #32
 800605e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <TIM_OC2_SetConfig+0xe4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC2_SetConfig+0x68>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a21      	ldr	r2, [pc, #132]	; (80060fc <TIM_OC2_SetConfig+0xe8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d10d      	bne.n	8006098 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a17      	ldr	r2, [pc, #92]	; (80060f8 <TIM_OC2_SetConfig+0xe4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC2_SetConfig+0x94>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a16      	ldr	r2, [pc, #88]	; (80060fc <TIM_OC2_SetConfig+0xe8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d113      	bne.n	80060d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400

08006100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <TIM_OC3_SetConfig+0xe0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC3_SetConfig+0x66>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a20      	ldr	r2, [pc, #128]	; (80061e4 <TIM_OC3_SetConfig+0xe4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10d      	bne.n	8006182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800616c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <TIM_OC3_SetConfig+0xe0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC3_SetConfig+0x92>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <TIM_OC3_SetConfig+0xe4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d113      	bne.n	80061ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <TIM_OC4_SetConfig+0xa4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC4_SetConfig+0x68>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a11      	ldr	r2, [pc, #68]	; (8006290 <TIM_OC4_SetConfig+0xa8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d109      	bne.n	8006264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	621a      	str	r2, [r3, #32]
}
 800627e:	bf00      	nop
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40010000 	.word	0x40010000
 8006290:	40010400 	.word	0x40010400

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0210 	bic.w	r2, r3, #16
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2201      	movs	r2, #1
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	401a      	ands	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e05a      	b.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006478:	d01d      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10c      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e03f      	b.n	80065c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc ff74 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fc3d 	bl	8006df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b088      	sub	sp, #32
 80065d2:	af02      	add	r7, sp, #8
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	f040 8083 	bne.w	80066f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Transmit+0x2e>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e07b      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UART_Transmit+0x40>
 800660a:	2302      	movs	r3, #2
 800660c:	e074      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2221      	movs	r2, #33	; 0x21
 8006620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006624:	f7fd f888 	bl	8003738 <HAL_GetTick>
 8006628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800663e:	e042      	b.n	80066c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d122      	bne.n	800669e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2200      	movs	r2, #0
 8006660:	2180      	movs	r1, #128	; 0x80
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fa5c 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e042      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006684:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	3302      	adds	r3, #2
 8006692:	60bb      	str	r3, [r7, #8]
 8006694:	e017      	b.n	80066c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	3301      	adds	r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	e013      	b.n	80066c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	; 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fa39 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01f      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	60ba      	str	r2, [r7, #8]
 80066be:	781a      	ldrb	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1b7      	bne.n	8006640 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2140      	movs	r1, #64	; 0x40
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa20 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e006      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	e000      	b.n	80066f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
  }
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b20      	cmp	r3, #32
 800671e:	f040 8090 	bne.w	8006842 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_UART_Receive+0x2e>
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e088      	b.n	8006844 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_UART_Receive+0x40>
 800673c:	2302      	movs	r3, #2
 800673e:	e081      	b.n	8006844 <HAL_UART_Receive+0x144>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2222      	movs	r2, #34	; 0x22
 8006752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006756:	f7fc ffef 	bl	8003738 <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006770:	e05c      	b.n	800682c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d12b      	bne.n	80067e2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	2120      	movs	r1, #32
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f9c3 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e04f      	b.n	8006844 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10c      	bne.n	80067ca <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	b29a      	uxth	r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3302      	adds	r3, #2
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	e030      	b.n	800682c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	3301      	adds	r3, #1
 80067de:	60bb      	str	r3, [r7, #8]
 80067e0:	e024      	b.n	800682c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	2120      	movs	r1, #32
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f997 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e023      	b.n	8006844 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d108      	bne.n	8006816 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	60ba      	str	r2, [r7, #8]
 8006810:	b2ca      	uxtb	r2, r1
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e00a      	b.n	800682c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1c59      	adds	r1, r3, #1
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d19d      	bne.n	8006772 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e000      	b.n	8006844 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006842:	2302      	movs	r3, #2
  }
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b20      	cmp	r3, #32
 8006864:	d140      	bne.n	80068e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_UART_Receive_IT+0x26>
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e039      	b.n	80068ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_UART_Receive_IT+0x38>
 8006880:	2302      	movs	r3, #2
 8006882:	e032      	b.n	80068ea <HAL_UART_Receive_IT+0x9e>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2222      	movs	r2, #34	; 0x22
 80068a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0220 	orr.w	r2, r2, #32
 80068e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_UART_IRQHandler+0x52>
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9d6 	bl	8006cf4 <UART_Receive_IT>
      return;
 8006948:	e0d1      	b.n	8006aee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80b0 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x1ba>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <HAL_UART_IRQHandler+0x70>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 80a5 	beq.w	8006ab2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_UART_IRQHandler+0x90>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	f043 0201 	orr.w	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <HAL_UART_IRQHandler+0xb0>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a0:	f043 0202 	orr.w	r2, r3, #2
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_UART_IRQHandler+0xd0>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c0:	f043 0204 	orr.w	r2, r3, #4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00f      	beq.n	80069f2 <HAL_UART_IRQHandler+0xfa>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_UART_IRQHandler+0xee>
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	f043 0208 	orr.w	r2, r3, #8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d078      	beq.n	8006aec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_UART_IRQHandler+0x11c>
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f970 	bl	8006cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <HAL_UART_IRQHandler+0x144>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d031      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8b9 	bl	8006bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d123      	bne.n	8006a98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_UART_IRQHandler+0x1fc>)
 8006a6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fc ff9e 	bl	80039b6 <HAL_DMA_Abort_IT>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d016      	beq.n	8006aae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8e:	e00e      	b.n	8006aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f83b 	bl	8006b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a96:	e00a      	b.n	8006aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f837 	bl	8006b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9e:	e006      	b.n	8006aae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f833 	bl	8006b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006aac:	e01e      	b.n	8006aec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aae:	bf00      	nop
    return;
 8006ab0:	e01c      	b.n	8006aec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_UART_IRQHandler+0x1d6>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8a6 	bl	8006c18 <UART_Transmit_IT>
    return;
 8006acc:	e00f      	b.n	8006aee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <HAL_UART_IRQHandler+0x1f6>
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8ee 	bl	8006cc4 <UART_EndTransmit_IT>
    return;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <HAL_UART_IRQHandler+0x1f6>
    return;
 8006aec:	bf00      	nop
  }
}
 8006aee:	3720      	adds	r7, #32
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	08006bf1 	.word	0x08006bf1

08006af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	e02c      	b.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d028      	beq.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b40:	f7fc fdfa 	bl	8003738 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d21d      	bcs.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0201 	bic.w	r2, r2, #1
 8006b6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e00f      	b.n	8006bac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d0c3      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0201 	bic.w	r2, r2, #1
 8006bda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f7ff ff7e 	bl	8006b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c10:	bf00      	nop
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b21      	cmp	r3, #33	; 0x21
 8006c2a:	d144      	bne.n	8006cb6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d11a      	bne.n	8006c6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d105      	bne.n	8006c60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]
 8006c5e:	e00e      	b.n	8006c7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]
 8006c6a:	e008      	b.n	8006c7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6211      	str	r1, [r2, #32]
 8006c76:	781a      	ldrb	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10f      	bne.n	8006cb2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e000      	b.n	8006cb8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff ff07 	bl	8006af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b22      	cmp	r3, #34	; 0x22
 8006d06:	d171      	bne.n	8006dec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d10:	d123      	bne.n	8006d5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10e      	bne.n	8006d3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	1c9a      	adds	r2, r3, #2
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d3c:	e029      	b.n	8006d92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28
 8006d58:	e01b      	b.n	8006d92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6858      	ldr	r0, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	1c59      	adds	r1, r3, #1
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6291      	str	r1, [r2, #40]	; 0x28
 8006d72:	b2c2      	uxtb	r2, r0
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e00c      	b.n	8006d92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	1c58      	adds	r0, r3, #1
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	6288      	str	r0, [r1, #40]	; 0x28
 8006d8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d120      	bne.n	8006de8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0220 	bic.w	r2, r2, #32
 8006db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fc f9fa 	bl	80031d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e002      	b.n	8006dee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e3a:	f023 030c 	bic.w	r3, r3, #12
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	430b      	orrs	r3, r1
 8006e46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	f040 818b 	bne.w	8007180 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4ac1      	ldr	r2, [pc, #772]	; (8007174 <UART_SetConfig+0x37c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d005      	beq.n	8006e80 <UART_SetConfig+0x88>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4abf      	ldr	r2, [pc, #764]	; (8007178 <UART_SetConfig+0x380>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	f040 80bd 	bne.w	8006ffa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e80:	f7fd fc08 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 8006e84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	461d      	mov	r5, r3
 8006e8a:	f04f 0600 	mov.w	r6, #0
 8006e8e:	46a8      	mov	r8, r5
 8006e90:	46b1      	mov	r9, r6
 8006e92:	eb18 0308 	adds.w	r3, r8, r8
 8006e96:	eb49 0409 	adc.w	r4, r9, r9
 8006e9a:	4698      	mov	r8, r3
 8006e9c:	46a1      	mov	r9, r4
 8006e9e:	eb18 0805 	adds.w	r8, r8, r5
 8006ea2:	eb49 0906 	adc.w	r9, r9, r6
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006eb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006eba:	4688      	mov	r8, r1
 8006ebc:	4691      	mov	r9, r2
 8006ebe:	eb18 0005 	adds.w	r0, r8, r5
 8006ec2:	eb49 0106 	adc.w	r1, r9, r6
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	461d      	mov	r5, r3
 8006ecc:	f04f 0600 	mov.w	r6, #0
 8006ed0:	196b      	adds	r3, r5, r5
 8006ed2:	eb46 0406 	adc.w	r4, r6, r6
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4623      	mov	r3, r4
 8006eda:	f7f9 fe11 	bl	8000b00 <__aeabi_uldivmod>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4ba5      	ldr	r3, [pc, #660]	; (800717c <UART_SetConfig+0x384>)
 8006ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	461d      	mov	r5, r3
 8006ef4:	f04f 0600 	mov.w	r6, #0
 8006ef8:	46a9      	mov	r9, r5
 8006efa:	46b2      	mov	sl, r6
 8006efc:	eb19 0309 	adds.w	r3, r9, r9
 8006f00:	eb4a 040a 	adc.w	r4, sl, sl
 8006f04:	4699      	mov	r9, r3
 8006f06:	46a2      	mov	sl, r4
 8006f08:	eb19 0905 	adds.w	r9, r9, r5
 8006f0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f10:	f04f 0100 	mov.w	r1, #0
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f24:	4689      	mov	r9, r1
 8006f26:	4692      	mov	sl, r2
 8006f28:	eb19 0005 	adds.w	r0, r9, r5
 8006f2c:	eb4a 0106 	adc.w	r1, sl, r6
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	461d      	mov	r5, r3
 8006f36:	f04f 0600 	mov.w	r6, #0
 8006f3a:	196b      	adds	r3, r5, r5
 8006f3c:	eb46 0406 	adc.w	r4, r6, r6
 8006f40:	461a      	mov	r2, r3
 8006f42:	4623      	mov	r3, r4
 8006f44:	f7f9 fddc 	bl	8000b00 <__aeabi_uldivmod>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4b8b      	ldr	r3, [pc, #556]	; (800717c <UART_SetConfig+0x384>)
 8006f50:	fba3 1302 	umull	r1, r3, r3, r2
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	2164      	movs	r1, #100	; 0x64
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	3332      	adds	r3, #50	; 0x32
 8006f62:	4a86      	ldr	r2, [pc, #536]	; (800717c <UART_SetConfig+0x384>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f70:	4498      	add	r8, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	461d      	mov	r5, r3
 8006f76:	f04f 0600 	mov.w	r6, #0
 8006f7a:	46a9      	mov	r9, r5
 8006f7c:	46b2      	mov	sl, r6
 8006f7e:	eb19 0309 	adds.w	r3, r9, r9
 8006f82:	eb4a 040a 	adc.w	r4, sl, sl
 8006f86:	4699      	mov	r9, r3
 8006f88:	46a2      	mov	sl, r4
 8006f8a:	eb19 0905 	adds.w	r9, r9, r5
 8006f8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f92:	f04f 0100 	mov.w	r1, #0
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fa6:	4689      	mov	r9, r1
 8006fa8:	4692      	mov	sl, r2
 8006faa:	eb19 0005 	adds.w	r0, r9, r5
 8006fae:	eb4a 0106 	adc.w	r1, sl, r6
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	461d      	mov	r5, r3
 8006fb8:	f04f 0600 	mov.w	r6, #0
 8006fbc:	196b      	adds	r3, r5, r5
 8006fbe:	eb46 0406 	adc.w	r4, r6, r6
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	f7f9 fd9b 	bl	8000b00 <__aeabi_uldivmod>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	461a      	mov	r2, r3
 8006fd0:	4b6a      	ldr	r3, [pc, #424]	; (800717c <UART_SetConfig+0x384>)
 8006fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	2164      	movs	r1, #100	; 0x64
 8006fda:	fb01 f303 	mul.w	r3, r1, r3
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	3332      	adds	r3, #50	; 0x32
 8006fe4:	4a65      	ldr	r2, [pc, #404]	; (800717c <UART_SetConfig+0x384>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	f003 0207 	and.w	r2, r3, #7
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4442      	add	r2, r8
 8006ff6:	609a      	str	r2, [r3, #8]
 8006ff8:	e26f      	b.n	80074da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fd fb37 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 8006ffe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	461d      	mov	r5, r3
 8007004:	f04f 0600 	mov.w	r6, #0
 8007008:	46a8      	mov	r8, r5
 800700a:	46b1      	mov	r9, r6
 800700c:	eb18 0308 	adds.w	r3, r8, r8
 8007010:	eb49 0409 	adc.w	r4, r9, r9
 8007014:	4698      	mov	r8, r3
 8007016:	46a1      	mov	r9, r4
 8007018:	eb18 0805 	adds.w	r8, r8, r5
 800701c:	eb49 0906 	adc.w	r9, r9, r6
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800702c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007030:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007034:	4688      	mov	r8, r1
 8007036:	4691      	mov	r9, r2
 8007038:	eb18 0005 	adds.w	r0, r8, r5
 800703c:	eb49 0106 	adc.w	r1, r9, r6
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	461d      	mov	r5, r3
 8007046:	f04f 0600 	mov.w	r6, #0
 800704a:	196b      	adds	r3, r5, r5
 800704c:	eb46 0406 	adc.w	r4, r6, r6
 8007050:	461a      	mov	r2, r3
 8007052:	4623      	mov	r3, r4
 8007054:	f7f9 fd54 	bl	8000b00 <__aeabi_uldivmod>
 8007058:	4603      	mov	r3, r0
 800705a:	460c      	mov	r4, r1
 800705c:	461a      	mov	r2, r3
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <UART_SetConfig+0x384>)
 8007060:	fba3 2302 	umull	r2, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	461d      	mov	r5, r3
 800706e:	f04f 0600 	mov.w	r6, #0
 8007072:	46a9      	mov	r9, r5
 8007074:	46b2      	mov	sl, r6
 8007076:	eb19 0309 	adds.w	r3, r9, r9
 800707a:	eb4a 040a 	adc.w	r4, sl, sl
 800707e:	4699      	mov	r9, r3
 8007080:	46a2      	mov	sl, r4
 8007082:	eb19 0905 	adds.w	r9, r9, r5
 8007086:	eb4a 0a06 	adc.w	sl, sl, r6
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800709a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800709e:	4689      	mov	r9, r1
 80070a0:	4692      	mov	sl, r2
 80070a2:	eb19 0005 	adds.w	r0, r9, r5
 80070a6:	eb4a 0106 	adc.w	r1, sl, r6
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	461d      	mov	r5, r3
 80070b0:	f04f 0600 	mov.w	r6, #0
 80070b4:	196b      	adds	r3, r5, r5
 80070b6:	eb46 0406 	adc.w	r4, r6, r6
 80070ba:	461a      	mov	r2, r3
 80070bc:	4623      	mov	r3, r4
 80070be:	f7f9 fd1f 	bl	8000b00 <__aeabi_uldivmod>
 80070c2:	4603      	mov	r3, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	461a      	mov	r2, r3
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <UART_SetConfig+0x384>)
 80070ca:	fba3 1302 	umull	r1, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	2164      	movs	r1, #100	; 0x64
 80070d2:	fb01 f303 	mul.w	r3, r1, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	3332      	adds	r3, #50	; 0x32
 80070dc:	4a27      	ldr	r2, [pc, #156]	; (800717c <UART_SetConfig+0x384>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070ea:	4498      	add	r8, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	461d      	mov	r5, r3
 80070f0:	f04f 0600 	mov.w	r6, #0
 80070f4:	46a9      	mov	r9, r5
 80070f6:	46b2      	mov	sl, r6
 80070f8:	eb19 0309 	adds.w	r3, r9, r9
 80070fc:	eb4a 040a 	adc.w	r4, sl, sl
 8007100:	4699      	mov	r9, r3
 8007102:	46a2      	mov	sl, r4
 8007104:	eb19 0905 	adds.w	r9, r9, r5
 8007108:	eb4a 0a06 	adc.w	sl, sl, r6
 800710c:	f04f 0100 	mov.w	r1, #0
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007118:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800711c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007120:	4689      	mov	r9, r1
 8007122:	4692      	mov	sl, r2
 8007124:	eb19 0005 	adds.w	r0, r9, r5
 8007128:	eb4a 0106 	adc.w	r1, sl, r6
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	461d      	mov	r5, r3
 8007132:	f04f 0600 	mov.w	r6, #0
 8007136:	196b      	adds	r3, r5, r5
 8007138:	eb46 0406 	adc.w	r4, r6, r6
 800713c:	461a      	mov	r2, r3
 800713e:	4623      	mov	r3, r4
 8007140:	f7f9 fcde 	bl	8000b00 <__aeabi_uldivmod>
 8007144:	4603      	mov	r3, r0
 8007146:	460c      	mov	r4, r1
 8007148:	461a      	mov	r2, r3
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <UART_SetConfig+0x384>)
 800714c:	fba3 1302 	umull	r1, r3, r3, r2
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	3332      	adds	r3, #50	; 0x32
 800715e:	4a07      	ldr	r2, [pc, #28]	; (800717c <UART_SetConfig+0x384>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	f003 0207 	and.w	r2, r3, #7
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4442      	add	r2, r8
 8007170:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007172:	e1b2      	b.n	80074da <UART_SetConfig+0x6e2>
 8007174:	40011000 	.word	0x40011000
 8007178:	40011400 	.word	0x40011400
 800717c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4ad7      	ldr	r2, [pc, #860]	; (80074e4 <UART_SetConfig+0x6ec>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d005      	beq.n	8007196 <UART_SetConfig+0x39e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4ad6      	ldr	r2, [pc, #856]	; (80074e8 <UART_SetConfig+0x6f0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	f040 80d1 	bne.w	8007338 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007196:	f7fd fa7d 	bl	8004694 <HAL_RCC_GetPCLK2Freq>
 800719a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	469a      	mov	sl, r3
 80071a0:	f04f 0b00 	mov.w	fp, #0
 80071a4:	46d0      	mov	r8, sl
 80071a6:	46d9      	mov	r9, fp
 80071a8:	eb18 0308 	adds.w	r3, r8, r8
 80071ac:	eb49 0409 	adc.w	r4, r9, r9
 80071b0:	4698      	mov	r8, r3
 80071b2:	46a1      	mov	r9, r4
 80071b4:	eb18 080a 	adds.w	r8, r8, sl
 80071b8:	eb49 090b 	adc.w	r9, r9, fp
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071d0:	4688      	mov	r8, r1
 80071d2:	4691      	mov	r9, r2
 80071d4:	eb1a 0508 	adds.w	r5, sl, r8
 80071d8:	eb4b 0609 	adc.w	r6, fp, r9
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	f04f 0400 	mov.w	r4, #0
 80071ee:	0094      	lsls	r4, r2, #2
 80071f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071f4:	008b      	lsls	r3, r1, #2
 80071f6:	461a      	mov	r2, r3
 80071f8:	4623      	mov	r3, r4
 80071fa:	4628      	mov	r0, r5
 80071fc:	4631      	mov	r1, r6
 80071fe:	f7f9 fc7f 	bl	8000b00 <__aeabi_uldivmod>
 8007202:	4603      	mov	r3, r0
 8007204:	460c      	mov	r4, r1
 8007206:	461a      	mov	r2, r3
 8007208:	4bb8      	ldr	r3, [pc, #736]	; (80074ec <UART_SetConfig+0x6f4>)
 800720a:	fba3 2302 	umull	r2, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	469b      	mov	fp, r3
 8007218:	f04f 0c00 	mov.w	ip, #0
 800721c:	46d9      	mov	r9, fp
 800721e:	46e2      	mov	sl, ip
 8007220:	eb19 0309 	adds.w	r3, r9, r9
 8007224:	eb4a 040a 	adc.w	r4, sl, sl
 8007228:	4699      	mov	r9, r3
 800722a:	46a2      	mov	sl, r4
 800722c:	eb19 090b 	adds.w	r9, r9, fp
 8007230:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007234:	f04f 0100 	mov.w	r1, #0
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007248:	4689      	mov	r9, r1
 800724a:	4692      	mov	sl, r2
 800724c:	eb1b 0509 	adds.w	r5, fp, r9
 8007250:	eb4c 060a 	adc.w	r6, ip, sl
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4619      	mov	r1, r3
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	f04f 0400 	mov.w	r4, #0
 8007266:	0094      	lsls	r4, r2, #2
 8007268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800726c:	008b      	lsls	r3, r1, #2
 800726e:	461a      	mov	r2, r3
 8007270:	4623      	mov	r3, r4
 8007272:	4628      	mov	r0, r5
 8007274:	4631      	mov	r1, r6
 8007276:	f7f9 fc43 	bl	8000b00 <__aeabi_uldivmod>
 800727a:	4603      	mov	r3, r0
 800727c:	460c      	mov	r4, r1
 800727e:	461a      	mov	r2, r3
 8007280:	4b9a      	ldr	r3, [pc, #616]	; (80074ec <UART_SetConfig+0x6f4>)
 8007282:	fba3 1302 	umull	r1, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2164      	movs	r1, #100	; 0x64
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	3332      	adds	r3, #50	; 0x32
 8007294:	4a95      	ldr	r2, [pc, #596]	; (80074ec <UART_SetConfig+0x6f4>)
 8007296:	fba2 2303 	umull	r2, r3, r2, r3
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a0:	4498      	add	r8, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	469b      	mov	fp, r3
 80072a6:	f04f 0c00 	mov.w	ip, #0
 80072aa:	46d9      	mov	r9, fp
 80072ac:	46e2      	mov	sl, ip
 80072ae:	eb19 0309 	adds.w	r3, r9, r9
 80072b2:	eb4a 040a 	adc.w	r4, sl, sl
 80072b6:	4699      	mov	r9, r3
 80072b8:	46a2      	mov	sl, r4
 80072ba:	eb19 090b 	adds.w	r9, r9, fp
 80072be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072d6:	4689      	mov	r9, r1
 80072d8:	4692      	mov	sl, r2
 80072da:	eb1b 0509 	adds.w	r5, fp, r9
 80072de:	eb4c 060a 	adc.w	r6, ip, sl
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4619      	mov	r1, r3
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	f04f 0400 	mov.w	r4, #0
 80072f4:	0094      	lsls	r4, r2, #2
 80072f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072fa:	008b      	lsls	r3, r1, #2
 80072fc:	461a      	mov	r2, r3
 80072fe:	4623      	mov	r3, r4
 8007300:	4628      	mov	r0, r5
 8007302:	4631      	mov	r1, r6
 8007304:	f7f9 fbfc 	bl	8000b00 <__aeabi_uldivmod>
 8007308:	4603      	mov	r3, r0
 800730a:	460c      	mov	r4, r1
 800730c:	461a      	mov	r2, r3
 800730e:	4b77      	ldr	r3, [pc, #476]	; (80074ec <UART_SetConfig+0x6f4>)
 8007310:	fba3 1302 	umull	r1, r3, r3, r2
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	2164      	movs	r1, #100	; 0x64
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	3332      	adds	r3, #50	; 0x32
 8007322:	4a72      	ldr	r2, [pc, #456]	; (80074ec <UART_SetConfig+0x6f4>)
 8007324:	fba2 2303 	umull	r2, r3, r2, r3
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	f003 020f 	and.w	r2, r3, #15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4442      	add	r2, r8
 8007334:	609a      	str	r2, [r3, #8]
 8007336:	e0d0      	b.n	80074da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007338:	f7fd f998 	bl	800466c <HAL_RCC_GetPCLK1Freq>
 800733c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	469a      	mov	sl, r3
 8007342:	f04f 0b00 	mov.w	fp, #0
 8007346:	46d0      	mov	r8, sl
 8007348:	46d9      	mov	r9, fp
 800734a:	eb18 0308 	adds.w	r3, r8, r8
 800734e:	eb49 0409 	adc.w	r4, r9, r9
 8007352:	4698      	mov	r8, r3
 8007354:	46a1      	mov	r9, r4
 8007356:	eb18 080a 	adds.w	r8, r8, sl
 800735a:	eb49 090b 	adc.w	r9, r9, fp
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800736a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800736e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007372:	4688      	mov	r8, r1
 8007374:	4691      	mov	r9, r2
 8007376:	eb1a 0508 	adds.w	r5, sl, r8
 800737a:	eb4b 0609 	adc.w	r6, fp, r9
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	4619      	mov	r1, r3
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	f04f 0400 	mov.w	r4, #0
 8007390:	0094      	lsls	r4, r2, #2
 8007392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007396:	008b      	lsls	r3, r1, #2
 8007398:	461a      	mov	r2, r3
 800739a:	4623      	mov	r3, r4
 800739c:	4628      	mov	r0, r5
 800739e:	4631      	mov	r1, r6
 80073a0:	f7f9 fbae 	bl	8000b00 <__aeabi_uldivmod>
 80073a4:	4603      	mov	r3, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	461a      	mov	r2, r3
 80073aa:	4b50      	ldr	r3, [pc, #320]	; (80074ec <UART_SetConfig+0x6f4>)
 80073ac:	fba3 2302 	umull	r2, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	469b      	mov	fp, r3
 80073ba:	f04f 0c00 	mov.w	ip, #0
 80073be:	46d9      	mov	r9, fp
 80073c0:	46e2      	mov	sl, ip
 80073c2:	eb19 0309 	adds.w	r3, r9, r9
 80073c6:	eb4a 040a 	adc.w	r4, sl, sl
 80073ca:	4699      	mov	r9, r3
 80073cc:	46a2      	mov	sl, r4
 80073ce:	eb19 090b 	adds.w	r9, r9, fp
 80073d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073d6:	f04f 0100 	mov.w	r1, #0
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ea:	4689      	mov	r9, r1
 80073ec:	4692      	mov	sl, r2
 80073ee:	eb1b 0509 	adds.w	r5, fp, r9
 80073f2:	eb4c 060a 	adc.w	r6, ip, sl
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	4619      	mov	r1, r3
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	f04f 0400 	mov.w	r4, #0
 8007408:	0094      	lsls	r4, r2, #2
 800740a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800740e:	008b      	lsls	r3, r1, #2
 8007410:	461a      	mov	r2, r3
 8007412:	4623      	mov	r3, r4
 8007414:	4628      	mov	r0, r5
 8007416:	4631      	mov	r1, r6
 8007418:	f7f9 fb72 	bl	8000b00 <__aeabi_uldivmod>
 800741c:	4603      	mov	r3, r0
 800741e:	460c      	mov	r4, r1
 8007420:	461a      	mov	r2, r3
 8007422:	4b32      	ldr	r3, [pc, #200]	; (80074ec <UART_SetConfig+0x6f4>)
 8007424:	fba3 1302 	umull	r1, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	2164      	movs	r1, #100	; 0x64
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	3332      	adds	r3, #50	; 0x32
 8007436:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <UART_SetConfig+0x6f4>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007442:	4498      	add	r8, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	469b      	mov	fp, r3
 8007448:	f04f 0c00 	mov.w	ip, #0
 800744c:	46d9      	mov	r9, fp
 800744e:	46e2      	mov	sl, ip
 8007450:	eb19 0309 	adds.w	r3, r9, r9
 8007454:	eb4a 040a 	adc.w	r4, sl, sl
 8007458:	4699      	mov	r9, r3
 800745a:	46a2      	mov	sl, r4
 800745c:	eb19 090b 	adds.w	r9, r9, fp
 8007460:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007464:	f04f 0100 	mov.w	r1, #0
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007470:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007474:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007478:	4689      	mov	r9, r1
 800747a:	4692      	mov	sl, r2
 800747c:	eb1b 0509 	adds.w	r5, fp, r9
 8007480:	eb4c 060a 	adc.w	r6, ip, sl
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4619      	mov	r1, r3
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	f04f 0400 	mov.w	r4, #0
 8007496:	0094      	lsls	r4, r2, #2
 8007498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800749c:	008b      	lsls	r3, r1, #2
 800749e:	461a      	mov	r2, r3
 80074a0:	4623      	mov	r3, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	4631      	mov	r1, r6
 80074a6:	f7f9 fb2b 	bl	8000b00 <__aeabi_uldivmod>
 80074aa:	4603      	mov	r3, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <UART_SetConfig+0x6f4>)
 80074b2:	fba3 1302 	umull	r1, r3, r3, r2
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	2164      	movs	r1, #100	; 0x64
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	3332      	adds	r3, #50	; 0x32
 80074c4:	4a09      	ldr	r2, [pc, #36]	; (80074ec <UART_SetConfig+0x6f4>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	f003 020f 	and.w	r2, r3, #15
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4442      	add	r2, r8
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	e7ff      	b.n	80074da <UART_SetConfig+0x6e2>
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	40011000 	.word	0x40011000
 80074e8:	40011400 	.word	0x40011400
 80074ec:	51eb851f 	.word	0x51eb851f

080074f0 <__errno>:
 80074f0:	4b01      	ldr	r3, [pc, #4]	; (80074f8 <__errno+0x8>)
 80074f2:	6818      	ldr	r0, [r3, #0]
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	20000014 	.word	0x20000014

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4e0d      	ldr	r6, [pc, #52]	; (8007534 <__libc_init_array+0x38>)
 8007500:	4c0d      	ldr	r4, [pc, #52]	; (8007538 <__libc_init_array+0x3c>)
 8007502:	1ba4      	subs	r4, r4, r6
 8007504:	10a4      	asrs	r4, r4, #2
 8007506:	2500      	movs	r5, #0
 8007508:	42a5      	cmp	r5, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	4e0b      	ldr	r6, [pc, #44]	; (800753c <__libc_init_array+0x40>)
 800750e:	4c0c      	ldr	r4, [pc, #48]	; (8007540 <__libc_init_array+0x44>)
 8007510:	f001 fd46 	bl	8008fa0 <_init>
 8007514:	1ba4      	subs	r4, r4, r6
 8007516:	10a4      	asrs	r4, r4, #2
 8007518:	2500      	movs	r5, #0
 800751a:	42a5      	cmp	r5, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007524:	4798      	blx	r3
 8007526:	3501      	adds	r5, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800752e:	4798      	blx	r3
 8007530:	3501      	adds	r5, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	080092d8 	.word	0x080092d8
 8007538:	080092d8 	.word	0x080092d8
 800753c:	080092d8 	.word	0x080092d8
 8007540:	080092dc 	.word	0x080092dc

08007544 <malloc>:
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <malloc+0xc>)
 8007546:	4601      	mov	r1, r0
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f000 b80b 	b.w	8007564 <_malloc_r>
 800754e:	bf00      	nop
 8007550:	20000014 	.word	0x20000014

08007554 <memset>:
 8007554:	4402      	add	r2, r0
 8007556:	4603      	mov	r3, r0
 8007558:	4293      	cmp	r3, r2
 800755a:	d100      	bne.n	800755e <memset+0xa>
 800755c:	4770      	bx	lr
 800755e:	f803 1b01 	strb.w	r1, [r3], #1
 8007562:	e7f9      	b.n	8007558 <memset+0x4>

08007564 <_malloc_r>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	1ccd      	adds	r5, r1, #3
 8007568:	f025 0503 	bic.w	r5, r5, #3
 800756c:	3508      	adds	r5, #8
 800756e:	2d0c      	cmp	r5, #12
 8007570:	bf38      	it	cc
 8007572:	250c      	movcc	r5, #12
 8007574:	2d00      	cmp	r5, #0
 8007576:	4606      	mov	r6, r0
 8007578:	db01      	blt.n	800757e <_malloc_r+0x1a>
 800757a:	42a9      	cmp	r1, r5
 800757c:	d903      	bls.n	8007586 <_malloc_r+0x22>
 800757e:	230c      	movs	r3, #12
 8007580:	6033      	str	r3, [r6, #0]
 8007582:	2000      	movs	r0, #0
 8007584:	bd70      	pop	{r4, r5, r6, pc}
 8007586:	f001 fa00 	bl	800898a <__malloc_lock>
 800758a:	4a21      	ldr	r2, [pc, #132]	; (8007610 <_malloc_r+0xac>)
 800758c:	6814      	ldr	r4, [r2, #0]
 800758e:	4621      	mov	r1, r4
 8007590:	b991      	cbnz	r1, 80075b8 <_malloc_r+0x54>
 8007592:	4c20      	ldr	r4, [pc, #128]	; (8007614 <_malloc_r+0xb0>)
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	b91b      	cbnz	r3, 80075a0 <_malloc_r+0x3c>
 8007598:	4630      	mov	r0, r6
 800759a:	f000 fb87 	bl	8007cac <_sbrk_r>
 800759e:	6020      	str	r0, [r4, #0]
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 fb82 	bl	8007cac <_sbrk_r>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d124      	bne.n	80075f6 <_malloc_r+0x92>
 80075ac:	230c      	movs	r3, #12
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	4630      	mov	r0, r6
 80075b2:	f001 f9eb 	bl	800898c <__malloc_unlock>
 80075b6:	e7e4      	b.n	8007582 <_malloc_r+0x1e>
 80075b8:	680b      	ldr	r3, [r1, #0]
 80075ba:	1b5b      	subs	r3, r3, r5
 80075bc:	d418      	bmi.n	80075f0 <_malloc_r+0x8c>
 80075be:	2b0b      	cmp	r3, #11
 80075c0:	d90f      	bls.n	80075e2 <_malloc_r+0x7e>
 80075c2:	600b      	str	r3, [r1, #0]
 80075c4:	50cd      	str	r5, [r1, r3]
 80075c6:	18cc      	adds	r4, r1, r3
 80075c8:	4630      	mov	r0, r6
 80075ca:	f001 f9df 	bl	800898c <__malloc_unlock>
 80075ce:	f104 000b 	add.w	r0, r4, #11
 80075d2:	1d23      	adds	r3, r4, #4
 80075d4:	f020 0007 	bic.w	r0, r0, #7
 80075d8:	1ac3      	subs	r3, r0, r3
 80075da:	d0d3      	beq.n	8007584 <_malloc_r+0x20>
 80075dc:	425a      	negs	r2, r3
 80075de:	50e2      	str	r2, [r4, r3]
 80075e0:	e7d0      	b.n	8007584 <_malloc_r+0x20>
 80075e2:	428c      	cmp	r4, r1
 80075e4:	684b      	ldr	r3, [r1, #4]
 80075e6:	bf16      	itet	ne
 80075e8:	6063      	strne	r3, [r4, #4]
 80075ea:	6013      	streq	r3, [r2, #0]
 80075ec:	460c      	movne	r4, r1
 80075ee:	e7eb      	b.n	80075c8 <_malloc_r+0x64>
 80075f0:	460c      	mov	r4, r1
 80075f2:	6849      	ldr	r1, [r1, #4]
 80075f4:	e7cc      	b.n	8007590 <_malloc_r+0x2c>
 80075f6:	1cc4      	adds	r4, r0, #3
 80075f8:	f024 0403 	bic.w	r4, r4, #3
 80075fc:	42a0      	cmp	r0, r4
 80075fe:	d005      	beq.n	800760c <_malloc_r+0xa8>
 8007600:	1a21      	subs	r1, r4, r0
 8007602:	4630      	mov	r0, r6
 8007604:	f000 fb52 	bl	8007cac <_sbrk_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d0cf      	beq.n	80075ac <_malloc_r+0x48>
 800760c:	6025      	str	r5, [r4, #0]
 800760e:	e7db      	b.n	80075c8 <_malloc_r+0x64>
 8007610:	20000440 	.word	0x20000440
 8007614:	20000444 	.word	0x20000444

08007618 <__cvt>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	ec55 4b10 	vmov	r4, r5, d0
 8007620:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007622:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007626:	2d00      	cmp	r5, #0
 8007628:	460e      	mov	r6, r1
 800762a:	4691      	mov	r9, r2
 800762c:	4619      	mov	r1, r3
 800762e:	bfb8      	it	lt
 8007630:	4622      	movlt	r2, r4
 8007632:	462b      	mov	r3, r5
 8007634:	f027 0720 	bic.w	r7, r7, #32
 8007638:	bfbb      	ittet	lt
 800763a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800763e:	461d      	movlt	r5, r3
 8007640:	2300      	movge	r3, #0
 8007642:	232d      	movlt	r3, #45	; 0x2d
 8007644:	bfb8      	it	lt
 8007646:	4614      	movlt	r4, r2
 8007648:	2f46      	cmp	r7, #70	; 0x46
 800764a:	700b      	strb	r3, [r1, #0]
 800764c:	d004      	beq.n	8007658 <__cvt+0x40>
 800764e:	2f45      	cmp	r7, #69	; 0x45
 8007650:	d100      	bne.n	8007654 <__cvt+0x3c>
 8007652:	3601      	adds	r6, #1
 8007654:	2102      	movs	r1, #2
 8007656:	e000      	b.n	800765a <__cvt+0x42>
 8007658:	2103      	movs	r1, #3
 800765a:	ab03      	add	r3, sp, #12
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	ab02      	add	r3, sp, #8
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	4632      	mov	r2, r6
 8007664:	4653      	mov	r3, sl
 8007666:	ec45 4b10 	vmov	d0, r4, r5
 800766a:	f000 fbbd 	bl	8007de8 <_dtoa_r>
 800766e:	2f47      	cmp	r7, #71	; 0x47
 8007670:	4680      	mov	r8, r0
 8007672:	d102      	bne.n	800767a <__cvt+0x62>
 8007674:	f019 0f01 	tst.w	r9, #1
 8007678:	d026      	beq.n	80076c8 <__cvt+0xb0>
 800767a:	2f46      	cmp	r7, #70	; 0x46
 800767c:	eb08 0906 	add.w	r9, r8, r6
 8007680:	d111      	bne.n	80076a6 <__cvt+0x8e>
 8007682:	f898 3000 	ldrb.w	r3, [r8]
 8007686:	2b30      	cmp	r3, #48	; 0x30
 8007688:	d10a      	bne.n	80076a0 <__cvt+0x88>
 800768a:	2200      	movs	r2, #0
 800768c:	2300      	movs	r3, #0
 800768e:	4620      	mov	r0, r4
 8007690:	4629      	mov	r1, r5
 8007692:	f7f9 f9c5 	bl	8000a20 <__aeabi_dcmpeq>
 8007696:	b918      	cbnz	r0, 80076a0 <__cvt+0x88>
 8007698:	f1c6 0601 	rsb	r6, r6, #1
 800769c:	f8ca 6000 	str.w	r6, [sl]
 80076a0:	f8da 3000 	ldr.w	r3, [sl]
 80076a4:	4499      	add	r9, r3
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	4620      	mov	r0, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7f9 f9b7 	bl	8000a20 <__aeabi_dcmpeq>
 80076b2:	b938      	cbnz	r0, 80076c4 <__cvt+0xac>
 80076b4:	2230      	movs	r2, #48	; 0x30
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	454b      	cmp	r3, r9
 80076ba:	d205      	bcs.n	80076c8 <__cvt+0xb0>
 80076bc:	1c59      	adds	r1, r3, #1
 80076be:	9103      	str	r1, [sp, #12]
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	e7f8      	b.n	80076b6 <__cvt+0x9e>
 80076c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076cc:	eba3 0308 	sub.w	r3, r3, r8
 80076d0:	4640      	mov	r0, r8
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	b004      	add	sp, #16
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080076da <__exponent>:
 80076da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076dc:	2900      	cmp	r1, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	bfba      	itte	lt
 80076e2:	4249      	neglt	r1, r1
 80076e4:	232d      	movlt	r3, #45	; 0x2d
 80076e6:	232b      	movge	r3, #43	; 0x2b
 80076e8:	2909      	cmp	r1, #9
 80076ea:	f804 2b02 	strb.w	r2, [r4], #2
 80076ee:	7043      	strb	r3, [r0, #1]
 80076f0:	dd20      	ble.n	8007734 <__exponent+0x5a>
 80076f2:	f10d 0307 	add.w	r3, sp, #7
 80076f6:	461f      	mov	r7, r3
 80076f8:	260a      	movs	r6, #10
 80076fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80076fe:	fb06 1115 	mls	r1, r6, r5, r1
 8007702:	3130      	adds	r1, #48	; 0x30
 8007704:	2d09      	cmp	r5, #9
 8007706:	f803 1c01 	strb.w	r1, [r3, #-1]
 800770a:	f103 32ff 	add.w	r2, r3, #4294967295
 800770e:	4629      	mov	r1, r5
 8007710:	dc09      	bgt.n	8007726 <__exponent+0x4c>
 8007712:	3130      	adds	r1, #48	; 0x30
 8007714:	3b02      	subs	r3, #2
 8007716:	f802 1c01 	strb.w	r1, [r2, #-1]
 800771a:	42bb      	cmp	r3, r7
 800771c:	4622      	mov	r2, r4
 800771e:	d304      	bcc.n	800772a <__exponent+0x50>
 8007720:	1a10      	subs	r0, r2, r0
 8007722:	b003      	add	sp, #12
 8007724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007726:	4613      	mov	r3, r2
 8007728:	e7e7      	b.n	80076fa <__exponent+0x20>
 800772a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772e:	f804 2b01 	strb.w	r2, [r4], #1
 8007732:	e7f2      	b.n	800771a <__exponent+0x40>
 8007734:	2330      	movs	r3, #48	; 0x30
 8007736:	4419      	add	r1, r3
 8007738:	7083      	strb	r3, [r0, #2]
 800773a:	1d02      	adds	r2, r0, #4
 800773c:	70c1      	strb	r1, [r0, #3]
 800773e:	e7ef      	b.n	8007720 <__exponent+0x46>

08007740 <_printf_float>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	b08d      	sub	sp, #52	; 0x34
 8007746:	460c      	mov	r4, r1
 8007748:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800774c:	4616      	mov	r6, r2
 800774e:	461f      	mov	r7, r3
 8007750:	4605      	mov	r5, r0
 8007752:	f001 f901 	bl	8008958 <_localeconv_r>
 8007756:	6803      	ldr	r3, [r0, #0]
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	4618      	mov	r0, r3
 800775c:	f7f8 fd34 	bl	80001c8 <strlen>
 8007760:	2300      	movs	r3, #0
 8007762:	930a      	str	r3, [sp, #40]	; 0x28
 8007764:	f8d8 3000 	ldr.w	r3, [r8]
 8007768:	9005      	str	r0, [sp, #20]
 800776a:	3307      	adds	r3, #7
 800776c:	f023 0307 	bic.w	r3, r3, #7
 8007770:	f103 0208 	add.w	r2, r3, #8
 8007774:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007778:	f8d4 b000 	ldr.w	fp, [r4]
 800777c:	f8c8 2000 	str.w	r2, [r8]
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007788:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800778c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	f8cd 8018 	str.w	r8, [sp, #24]
 8007796:	f04f 32ff 	mov.w	r2, #4294967295
 800779a:	4ba7      	ldr	r3, [pc, #668]	; (8007a38 <_printf_float+0x2f8>)
 800779c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077a0:	f7f9 f970 	bl	8000a84 <__aeabi_dcmpun>
 80077a4:	bb70      	cbnz	r0, 8007804 <_printf_float+0xc4>
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295
 80077aa:	4ba3      	ldr	r3, [pc, #652]	; (8007a38 <_printf_float+0x2f8>)
 80077ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b0:	f7f9 f94a 	bl	8000a48 <__aeabi_dcmple>
 80077b4:	bb30      	cbnz	r0, 8007804 <_printf_float+0xc4>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 f939 	bl	8000a34 <__aeabi_dcmplt>
 80077c2:	b110      	cbz	r0, 80077ca <_printf_float+0x8a>
 80077c4:	232d      	movs	r3, #45	; 0x2d
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ca:	4a9c      	ldr	r2, [pc, #624]	; (8007a3c <_printf_float+0x2fc>)
 80077cc:	4b9c      	ldr	r3, [pc, #624]	; (8007a40 <_printf_float+0x300>)
 80077ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80077d2:	bf8c      	ite	hi
 80077d4:	4690      	movhi	r8, r2
 80077d6:	4698      	movls	r8, r3
 80077d8:	2303      	movs	r3, #3
 80077da:	f02b 0204 	bic.w	r2, fp, #4
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	6022      	str	r2, [r4, #0]
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	9700      	str	r7, [sp, #0]
 80077e8:	4633      	mov	r3, r6
 80077ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f9e6 	bl	8007bc0 <_printf_common>
 80077f4:	3001      	adds	r0, #1
 80077f6:	f040 808d 	bne.w	8007914 <_printf_float+0x1d4>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295
 80077fe:	b00d      	add	sp, #52	; 0x34
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f93a 	bl	8000a84 <__aeabi_dcmpun>
 8007810:	b110      	cbz	r0, 8007818 <_printf_float+0xd8>
 8007812:	4a8c      	ldr	r2, [pc, #560]	; (8007a44 <_printf_float+0x304>)
 8007814:	4b8c      	ldr	r3, [pc, #560]	; (8007a48 <_printf_float+0x308>)
 8007816:	e7da      	b.n	80077ce <_printf_float+0x8e>
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	1c4b      	adds	r3, r1, #1
 800781c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007820:	a80a      	add	r0, sp, #40	; 0x28
 8007822:	d13e      	bne.n	80078a2 <_printf_float+0x162>
 8007824:	2306      	movs	r3, #6
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	2300      	movs	r3, #0
 800782a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800782e:	ab09      	add	r3, sp, #36	; 0x24
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	ec49 8b10 	vmov	d0, r8, r9
 8007836:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	f8cd a004 	str.w	sl, [sp, #4]
 8007840:	6861      	ldr	r1, [r4, #4]
 8007842:	4628      	mov	r0, r5
 8007844:	f7ff fee8 	bl	8007618 <__cvt>
 8007848:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800784c:	2b47      	cmp	r3, #71	; 0x47
 800784e:	4680      	mov	r8, r0
 8007850:	d109      	bne.n	8007866 <_printf_float+0x126>
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	1cd8      	adds	r0, r3, #3
 8007856:	db02      	blt.n	800785e <_printf_float+0x11e>
 8007858:	6862      	ldr	r2, [r4, #4]
 800785a:	4293      	cmp	r3, r2
 800785c:	dd47      	ble.n	80078ee <_printf_float+0x1ae>
 800785e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007862:	fa5f fa8a 	uxtb.w	sl, sl
 8007866:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800786a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800786c:	d824      	bhi.n	80078b8 <_printf_float+0x178>
 800786e:	3901      	subs	r1, #1
 8007870:	4652      	mov	r2, sl
 8007872:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007876:	9109      	str	r1, [sp, #36]	; 0x24
 8007878:	f7ff ff2f 	bl	80076da <__exponent>
 800787c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800787e:	1813      	adds	r3, r2, r0
 8007880:	2a01      	cmp	r2, #1
 8007882:	4681      	mov	r9, r0
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	dc02      	bgt.n	800788e <_printf_float+0x14e>
 8007888:	6822      	ldr	r2, [r4, #0]
 800788a:	07d1      	lsls	r1, r2, #31
 800788c:	d501      	bpl.n	8007892 <_printf_float+0x152>
 800788e:	3301      	adds	r3, #1
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0a5      	beq.n	80077e6 <_printf_float+0xa6>
 800789a:	232d      	movs	r3, #45	; 0x2d
 800789c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078a0:	e7a1      	b.n	80077e6 <_printf_float+0xa6>
 80078a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80078a6:	f000 8177 	beq.w	8007b98 <_printf_float+0x458>
 80078aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80078ae:	d1bb      	bne.n	8007828 <_printf_float+0xe8>
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d1b9      	bne.n	8007828 <_printf_float+0xe8>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e7b6      	b.n	8007826 <_printf_float+0xe6>
 80078b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80078bc:	d119      	bne.n	80078f2 <_printf_float+0x1b2>
 80078be:	2900      	cmp	r1, #0
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	dd0c      	ble.n	80078de <_printf_float+0x19e>
 80078c4:	6121      	str	r1, [r4, #16]
 80078c6:	b913      	cbnz	r3, 80078ce <_printf_float+0x18e>
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	07d2      	lsls	r2, r2, #31
 80078cc:	d502      	bpl.n	80078d4 <_printf_float+0x194>
 80078ce:	3301      	adds	r3, #1
 80078d0:	440b      	add	r3, r1
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80078d8:	f04f 0900 	mov.w	r9, #0
 80078dc:	e7d9      	b.n	8007892 <_printf_float+0x152>
 80078de:	b913      	cbnz	r3, 80078e6 <_printf_float+0x1a6>
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	07d0      	lsls	r0, r2, #31
 80078e4:	d501      	bpl.n	80078ea <_printf_float+0x1aa>
 80078e6:	3302      	adds	r3, #2
 80078e8:	e7f3      	b.n	80078d2 <_printf_float+0x192>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e7f1      	b.n	80078d2 <_printf_float+0x192>
 80078ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80078f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80078f6:	4293      	cmp	r3, r2
 80078f8:	db05      	blt.n	8007906 <_printf_float+0x1c6>
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	07d1      	lsls	r1, r2, #31
 8007900:	d5e8      	bpl.n	80078d4 <_printf_float+0x194>
 8007902:	3301      	adds	r3, #1
 8007904:	e7e5      	b.n	80078d2 <_printf_float+0x192>
 8007906:	2b00      	cmp	r3, #0
 8007908:	bfd4      	ite	le
 800790a:	f1c3 0302 	rsble	r3, r3, #2
 800790e:	2301      	movgt	r3, #1
 8007910:	4413      	add	r3, r2
 8007912:	e7de      	b.n	80078d2 <_printf_float+0x192>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	055a      	lsls	r2, r3, #21
 8007918:	d407      	bmi.n	800792a <_printf_float+0x1ea>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d12b      	bne.n	8007980 <_printf_float+0x240>
 8007928:	e767      	b.n	80077fa <_printf_float+0xba>
 800792a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800792e:	f240 80dc 	bls.w	8007aea <_printf_float+0x3aa>
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800793a:	f7f9 f871 	bl	8000a20 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d033      	beq.n	80079aa <_printf_float+0x26a>
 8007942:	2301      	movs	r3, #1
 8007944:	4a41      	ldr	r2, [pc, #260]	; (8007a4c <_printf_float+0x30c>)
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f af54 	beq.w	80077fa <_printf_float+0xba>
 8007952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007956:	429a      	cmp	r2, r3
 8007958:	db02      	blt.n	8007960 <_printf_float+0x220>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	07d8      	lsls	r0, r3, #31
 800795e:	d50f      	bpl.n	8007980 <_printf_float+0x240>
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af45 	beq.w	80077fa <_printf_float+0xba>
 8007970:	f04f 0800 	mov.w	r8, #0
 8007974:	f104 091a 	add.w	r9, r4, #26
 8007978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797a:	3b01      	subs	r3, #1
 800797c:	4543      	cmp	r3, r8
 800797e:	dc09      	bgt.n	8007994 <_printf_float+0x254>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	079b      	lsls	r3, r3, #30
 8007984:	f100 8103 	bmi.w	8007b8e <_printf_float+0x44e>
 8007988:	68e0      	ldr	r0, [r4, #12]
 800798a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798c:	4298      	cmp	r0, r3
 800798e:	bfb8      	it	lt
 8007990:	4618      	movlt	r0, r3
 8007992:	e734      	b.n	80077fe <_printf_float+0xbe>
 8007994:	2301      	movs	r3, #1
 8007996:	464a      	mov	r2, r9
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af2b 	beq.w	80077fa <_printf_float+0xba>
 80079a4:	f108 0801 	add.w	r8, r8, #1
 80079a8:	e7e6      	b.n	8007978 <_printf_float+0x238>
 80079aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc2b      	bgt.n	8007a08 <_printf_float+0x2c8>
 80079b0:	2301      	movs	r3, #1
 80079b2:	4a26      	ldr	r2, [pc, #152]	; (8007a4c <_printf_float+0x30c>)
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af1d 	beq.w	80077fa <_printf_float+0xba>
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	b923      	cbnz	r3, 80079ce <_printf_float+0x28e>
 80079c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c6:	b913      	cbnz	r3, 80079ce <_printf_float+0x28e>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d5d8      	bpl.n	8007980 <_printf_float+0x240>
 80079ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	f43f af0e 	beq.w	80077fa <_printf_float+0xba>
 80079de:	f04f 0900 	mov.w	r9, #0
 80079e2:	f104 0a1a 	add.w	sl, r4, #26
 80079e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e8:	425b      	negs	r3, r3
 80079ea:	454b      	cmp	r3, r9
 80079ec:	dc01      	bgt.n	80079f2 <_printf_float+0x2b2>
 80079ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f0:	e794      	b.n	800791c <_printf_float+0x1dc>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4652      	mov	r2, sl
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f aefc 	beq.w	80077fa <_printf_float+0xba>
 8007a02:	f109 0901 	add.w	r9, r9, #1
 8007a06:	e7ee      	b.n	80079e6 <_printf_float+0x2a6>
 8007a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bfa8      	it	ge
 8007a10:	461a      	movge	r2, r3
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	4691      	mov	r9, r2
 8007a16:	dd07      	ble.n	8007a28 <_printf_float+0x2e8>
 8007a18:	4613      	mov	r3, r2
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f aee9 	beq.w	80077fa <_printf_float+0xba>
 8007a28:	f104 031a 	add.w	r3, r4, #26
 8007a2c:	f04f 0b00 	mov.w	fp, #0
 8007a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a34:	9306      	str	r3, [sp, #24]
 8007a36:	e015      	b.n	8007a64 <_printf_float+0x324>
 8007a38:	7fefffff 	.word	0x7fefffff
 8007a3c:	080090ac 	.word	0x080090ac
 8007a40:	080090a8 	.word	0x080090a8
 8007a44:	080090b4 	.word	0x080090b4
 8007a48:	080090b0 	.word	0x080090b0
 8007a4c:	080090b8 	.word	0x080090b8
 8007a50:	2301      	movs	r3, #1
 8007a52:	9a06      	ldr	r2, [sp, #24]
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f aecd 	beq.w	80077fa <_printf_float+0xba>
 8007a60:	f10b 0b01 	add.w	fp, fp, #1
 8007a64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007a68:	ebaa 0309 	sub.w	r3, sl, r9
 8007a6c:	455b      	cmp	r3, fp
 8007a6e:	dcef      	bgt.n	8007a50 <_printf_float+0x310>
 8007a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a74:	429a      	cmp	r2, r3
 8007a76:	44d0      	add	r8, sl
 8007a78:	db15      	blt.n	8007aa6 <_printf_float+0x366>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	07da      	lsls	r2, r3, #31
 8007a7e:	d412      	bmi.n	8007aa6 <_printf_float+0x366>
 8007a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a84:	eba3 020a 	sub.w	r2, r3, sl
 8007a88:	eba3 0a01 	sub.w	sl, r3, r1
 8007a8c:	4592      	cmp	sl, r2
 8007a8e:	bfa8      	it	ge
 8007a90:	4692      	movge	sl, r2
 8007a92:	f1ba 0f00 	cmp.w	sl, #0
 8007a96:	dc0e      	bgt.n	8007ab6 <_printf_float+0x376>
 8007a98:	f04f 0800 	mov.w	r8, #0
 8007a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aa0:	f104 091a 	add.w	r9, r4, #26
 8007aa4:	e019      	b.n	8007ada <_printf_float+0x39a>
 8007aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d1e5      	bne.n	8007a80 <_printf_float+0x340>
 8007ab4:	e6a1      	b.n	80077fa <_printf_float+0xba>
 8007ab6:	4653      	mov	r3, sl
 8007ab8:	4642      	mov	r2, r8
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1e9      	bne.n	8007a98 <_printf_float+0x358>
 8007ac4:	e699      	b.n	80077fa <_printf_float+0xba>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	464a      	mov	r2, r9
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b8      	blx	r7
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f43f ae92 	beq.w	80077fa <_printf_float+0xba>
 8007ad6:	f108 0801 	add.w	r8, r8, #1
 8007ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	eba3 030a 	sub.w	r3, r3, sl
 8007ae4:	4543      	cmp	r3, r8
 8007ae6:	dcee      	bgt.n	8007ac6 <_printf_float+0x386>
 8007ae8:	e74a      	b.n	8007980 <_printf_float+0x240>
 8007aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aec:	2a01      	cmp	r2, #1
 8007aee:	dc01      	bgt.n	8007af4 <_printf_float+0x3b4>
 8007af0:	07db      	lsls	r3, r3, #31
 8007af2:	d53a      	bpl.n	8007b6a <_printf_float+0x42a>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4642      	mov	r2, r8
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f ae7b 	beq.w	80077fa <_printf_float+0xba>
 8007b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f108 0801 	add.w	r8, r8, #1
 8007b14:	f43f ae71 	beq.w	80077fa <_printf_float+0xba>
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b24:	2300      	movs	r3, #0
 8007b26:	f7f8 ff7b 	bl	8000a20 <__aeabi_dcmpeq>
 8007b2a:	b9c8      	cbnz	r0, 8007b60 <_printf_float+0x420>
 8007b2c:	4653      	mov	r3, sl
 8007b2e:	4642      	mov	r2, r8
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	d10e      	bne.n	8007b58 <_printf_float+0x418>
 8007b3a:	e65e      	b.n	80077fa <_printf_float+0xba>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4652      	mov	r2, sl
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f ae57 	beq.w	80077fa <_printf_float+0xba>
 8007b4c:	f108 0801 	add.w	r8, r8, #1
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4543      	cmp	r3, r8
 8007b56:	dcf1      	bgt.n	8007b3c <_printf_float+0x3fc>
 8007b58:	464b      	mov	r3, r9
 8007b5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b5e:	e6de      	b.n	800791e <_printf_float+0x1de>
 8007b60:	f04f 0800 	mov.w	r8, #0
 8007b64:	f104 0a1a 	add.w	sl, r4, #26
 8007b68:	e7f2      	b.n	8007b50 <_printf_float+0x410>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e7df      	b.n	8007b2e <_printf_float+0x3ee>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	464a      	mov	r2, r9
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f ae3e 	beq.w	80077fa <_printf_float+0xba>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dcf0      	bgt.n	8007b6e <_printf_float+0x42e>
 8007b8c:	e6fc      	b.n	8007988 <_printf_float+0x248>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	f104 0919 	add.w	r9, r4, #25
 8007b96:	e7f4      	b.n	8007b82 <_printf_float+0x442>
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	f43f ae8b 	beq.w	80078b4 <_printf_float+0x174>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ba4:	ab09      	add	r3, sp, #36	; 0x24
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	ec49 8b10 	vmov	d0, r8, r9
 8007bac:	6022      	str	r2, [r4, #0]
 8007bae:	f8cd a004 	str.w	sl, [sp, #4]
 8007bb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7ff fd2e 	bl	8007618 <__cvt>
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	e648      	b.n	8007852 <_printf_float+0x112>

08007bc0 <_printf_common>:
 8007bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	4691      	mov	r9, r2
 8007bc6:	461f      	mov	r7, r3
 8007bc8:	688a      	ldr	r2, [r1, #8]
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	bfb8      	it	lt
 8007bd4:	4613      	movlt	r3, r2
 8007bd6:	f8c9 3000 	str.w	r3, [r9]
 8007bda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bde:	4606      	mov	r6, r0
 8007be0:	460c      	mov	r4, r1
 8007be2:	b112      	cbz	r2, 8007bea <_printf_common+0x2a>
 8007be4:	3301      	adds	r3, #1
 8007be6:	f8c9 3000 	str.w	r3, [r9]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	0699      	lsls	r1, r3, #26
 8007bee:	bf42      	ittt	mi
 8007bf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007bf4:	3302      	addmi	r3, #2
 8007bf6:	f8c9 3000 	strmi.w	r3, [r9]
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	f015 0506 	ands.w	r5, r5, #6
 8007c00:	d107      	bne.n	8007c12 <_printf_common+0x52>
 8007c02:	f104 0a19 	add.w	sl, r4, #25
 8007c06:	68e3      	ldr	r3, [r4, #12]
 8007c08:	f8d9 2000 	ldr.w	r2, [r9]
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dc28      	bgt.n	8007c64 <_printf_common+0xa4>
 8007c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	3300      	adds	r3, #0
 8007c1a:	bf18      	it	ne
 8007c1c:	2301      	movne	r3, #1
 8007c1e:	0692      	lsls	r2, r2, #26
 8007c20:	d42d      	bmi.n	8007c7e <_printf_common+0xbe>
 8007c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c26:	4639      	mov	r1, r7
 8007c28:	4630      	mov	r0, r6
 8007c2a:	47c0      	blx	r8
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d020      	beq.n	8007c72 <_printf_common+0xb2>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	68e5      	ldr	r5, [r4, #12]
 8007c34:	f8d9 2000 	ldr.w	r2, [r9]
 8007c38:	f003 0306 	and.w	r3, r3, #6
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	bf08      	it	eq
 8007c40:	1aad      	subeq	r5, r5, r2
 8007c42:	68a3      	ldr	r3, [r4, #8]
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	bf0c      	ite	eq
 8007c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c4c:	2500      	movne	r5, #0
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	bfc4      	itt	gt
 8007c52:	1a9b      	subgt	r3, r3, r2
 8007c54:	18ed      	addgt	r5, r5, r3
 8007c56:	f04f 0900 	mov.w	r9, #0
 8007c5a:	341a      	adds	r4, #26
 8007c5c:	454d      	cmp	r5, r9
 8007c5e:	d11a      	bne.n	8007c96 <_printf_common+0xd6>
 8007c60:	2000      	movs	r0, #0
 8007c62:	e008      	b.n	8007c76 <_printf_common+0xb6>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4652      	mov	r2, sl
 8007c68:	4639      	mov	r1, r7
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	47c0      	blx	r8
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d103      	bne.n	8007c7a <_printf_common+0xba>
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	3501      	adds	r5, #1
 8007c7c:	e7c3      	b.n	8007c06 <_printf_common+0x46>
 8007c7e:	18e1      	adds	r1, r4, r3
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	2030      	movs	r0, #48	; 0x30
 8007c84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c88:	4422      	add	r2, r4
 8007c8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c92:	3302      	adds	r3, #2
 8007c94:	e7c5      	b.n	8007c22 <_printf_common+0x62>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4622      	mov	r2, r4
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	47c0      	blx	r8
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d0e6      	beq.n	8007c72 <_printf_common+0xb2>
 8007ca4:	f109 0901 	add.w	r9, r9, #1
 8007ca8:	e7d8      	b.n	8007c5c <_printf_common+0x9c>
	...

08007cac <_sbrk_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4c06      	ldr	r4, [pc, #24]	; (8007cc8 <_sbrk_r+0x1c>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	f7fb fc6c 	bl	8003594 <_sbrk>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_sbrk_r+0x1a>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_sbrk_r+0x1a>
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	200009c0 	.word	0x200009c0

08007ccc <quorem>:
 8007ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	6903      	ldr	r3, [r0, #16]
 8007cd2:	690c      	ldr	r4, [r1, #16]
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	f2c0 8082 	blt.w	8007de0 <quorem+0x114>
 8007cdc:	3c01      	subs	r4, #1
 8007cde:	f101 0714 	add.w	r7, r1, #20
 8007ce2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ce6:	f100 0614 	add.w	r6, r0, #20
 8007cea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cf2:	eb06 030c 	add.w	r3, r6, ip
 8007cf6:	3501      	adds	r5, #1
 8007cf8:	eb07 090c 	add.w	r9, r7, ip
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d02:	b395      	cbz	r5, 8007d6a <quorem+0x9e>
 8007d04:	f04f 0a00 	mov.w	sl, #0
 8007d08:	4638      	mov	r0, r7
 8007d0a:	46b6      	mov	lr, r6
 8007d0c:	46d3      	mov	fp, sl
 8007d0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d12:	b293      	uxth	r3, r2
 8007d14:	fb05 a303 	mla	r3, r5, r3, sl
 8007d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	ebab 0303 	sub.w	r3, fp, r3
 8007d22:	0c12      	lsrs	r2, r2, #16
 8007d24:	f8de b000 	ldr.w	fp, [lr]
 8007d28:	fb05 a202 	mla	r2, r5, r2, sl
 8007d2c:	fa13 f38b 	uxtah	r3, r3, fp
 8007d30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d34:	fa1f fb82 	uxth.w	fp, r2
 8007d38:	f8de 2000 	ldr.w	r2, [lr]
 8007d3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d4a:	4581      	cmp	r9, r0
 8007d4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d50:	f84e 3b04 	str.w	r3, [lr], #4
 8007d54:	d2db      	bcs.n	8007d0e <quorem+0x42>
 8007d56:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d5a:	b933      	cbnz	r3, 8007d6a <quorem+0x9e>
 8007d5c:	9b01      	ldr	r3, [sp, #4]
 8007d5e:	3b04      	subs	r3, #4
 8007d60:	429e      	cmp	r6, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	d330      	bcc.n	8007dc8 <quorem+0xfc>
 8007d66:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f001 f824 	bl	8008db8 <__mcmp>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	db25      	blt.n	8007dc0 <quorem+0xf4>
 8007d74:	3501      	adds	r5, #1
 8007d76:	4630      	mov	r0, r6
 8007d78:	f04f 0c00 	mov.w	ip, #0
 8007d7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d80:	f8d0 e000 	ldr.w	lr, [r0]
 8007d84:	b293      	uxth	r3, r2
 8007d86:	ebac 0303 	sub.w	r3, ip, r3
 8007d8a:	0c12      	lsrs	r2, r2, #16
 8007d8c:	fa13 f38e 	uxtah	r3, r3, lr
 8007d90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d9e:	45b9      	cmp	r9, r7
 8007da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007da4:	f840 3b04 	str.w	r3, [r0], #4
 8007da8:	d2e8      	bcs.n	8007d7c <quorem+0xb0>
 8007daa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007dae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007db2:	b92a      	cbnz	r2, 8007dc0 <quorem+0xf4>
 8007db4:	3b04      	subs	r3, #4
 8007db6:	429e      	cmp	r6, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	d30b      	bcc.n	8007dd4 <quorem+0x108>
 8007dbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	b003      	add	sp, #12
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	3b04      	subs	r3, #4
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d1ca      	bne.n	8007d66 <quorem+0x9a>
 8007dd0:	3c01      	subs	r4, #1
 8007dd2:	e7c5      	b.n	8007d60 <quorem+0x94>
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	3b04      	subs	r3, #4
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	d1ef      	bne.n	8007dbc <quorem+0xf0>
 8007ddc:	3c01      	subs	r4, #1
 8007dde:	e7ea      	b.n	8007db6 <quorem+0xea>
 8007de0:	2000      	movs	r0, #0
 8007de2:	e7ee      	b.n	8007dc2 <quorem+0xf6>
 8007de4:	0000      	movs	r0, r0
	...

08007de8 <_dtoa_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	ec57 6b10 	vmov	r6, r7, d0
 8007df0:	b097      	sub	sp, #92	; 0x5c
 8007df2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007df4:	9106      	str	r1, [sp, #24]
 8007df6:	4604      	mov	r4, r0
 8007df8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8007dfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e00:	e9cd 6700 	strd	r6, r7, [sp]
 8007e04:	b93d      	cbnz	r5, 8007e16 <_dtoa_r+0x2e>
 8007e06:	2010      	movs	r0, #16
 8007e08:	f7ff fb9c 	bl	8007544 <malloc>
 8007e0c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e12:	6005      	str	r5, [r0, #0]
 8007e14:	60c5      	str	r5, [r0, #12]
 8007e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e18:	6819      	ldr	r1, [r3, #0]
 8007e1a:	b151      	cbz	r1, 8007e32 <_dtoa_r+0x4a>
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	604a      	str	r2, [r1, #4]
 8007e20:	2301      	movs	r3, #1
 8007e22:	4093      	lsls	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fde5 	bl	80089f6 <_Bfree>
 8007e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	1e3b      	subs	r3, r7, #0
 8007e34:	bfbb      	ittet	lt
 8007e36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e3a:	9301      	strlt	r3, [sp, #4]
 8007e3c:	2300      	movge	r3, #0
 8007e3e:	2201      	movlt	r2, #1
 8007e40:	bfac      	ite	ge
 8007e42:	f8c8 3000 	strge.w	r3, [r8]
 8007e46:	f8c8 2000 	strlt.w	r2, [r8]
 8007e4a:	4baf      	ldr	r3, [pc, #700]	; (8008108 <_dtoa_r+0x320>)
 8007e4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e50:	ea33 0308 	bics.w	r3, r3, r8
 8007e54:	d114      	bne.n	8007e80 <_dtoa_r+0x98>
 8007e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e58:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	9b00      	ldr	r3, [sp, #0]
 8007e60:	b923      	cbnz	r3, 8007e6c <_dtoa_r+0x84>
 8007e62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f000 8542 	beq.w	80088f0 <_dtoa_r+0xb08>
 8007e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800811c <_dtoa_r+0x334>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8544 	beq.w	8008900 <_dtoa_r+0xb18>
 8007e78:	f10b 0303 	add.w	r3, fp, #3
 8007e7c:	f000 bd3e 	b.w	80088fc <_dtoa_r+0xb14>
 8007e80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e84:	2200      	movs	r2, #0
 8007e86:	2300      	movs	r3, #0
 8007e88:	4630      	mov	r0, r6
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	f7f8 fdc8 	bl	8000a20 <__aeabi_dcmpeq>
 8007e90:	4681      	mov	r9, r0
 8007e92:	b168      	cbz	r0, 8007eb0 <_dtoa_r+0xc8>
 8007e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e96:	2301      	movs	r3, #1
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8524 	beq.w	80088ea <_dtoa_r+0xb02>
 8007ea2:	4b9a      	ldr	r3, [pc, #616]	; (800810c <_dtoa_r+0x324>)
 8007ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ea6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	f000 bd28 	b.w	8008900 <_dtoa_r+0xb18>
 8007eb0:	aa14      	add	r2, sp, #80	; 0x50
 8007eb2:	a915      	add	r1, sp, #84	; 0x54
 8007eb4:	ec47 6b10 	vmov	d0, r6, r7
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fff4 	bl	8008ea6 <__d2b>
 8007ebe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ec2:	9004      	str	r0, [sp, #16]
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d07c      	beq.n	8007fc2 <_dtoa_r+0x1da>
 8007ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ecc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007ed0:	46b2      	mov	sl, r6
 8007ed2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007eda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4b8b      	ldr	r3, [pc, #556]	; (8008110 <_dtoa_r+0x328>)
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	f7f8 f97b 	bl	80001e0 <__aeabi_dsub>
 8007eea:	a381      	add	r3, pc, #516	; (adr r3, 80080f0 <_dtoa_r+0x308>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 fb2e 	bl	8000550 <__aeabi_dmul>
 8007ef4:	a380      	add	r3, pc, #512	; (adr r3, 80080f8 <_dtoa_r+0x310>)
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f7f8 f973 	bl	80001e4 <__adddf3>
 8007efe:	4606      	mov	r6, r0
 8007f00:	4628      	mov	r0, r5
 8007f02:	460f      	mov	r7, r1
 8007f04:	f7f8 faba 	bl	800047c <__aeabi_i2d>
 8007f08:	a37d      	add	r3, pc, #500	; (adr r3, 8008100 <_dtoa_r+0x318>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 fb1f 	bl	8000550 <__aeabi_dmul>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 f963 	bl	80001e4 <__adddf3>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	f7f8 fdc5 	bl	8000ab0 <__aeabi_d2iz>
 8007f26:	2200      	movs	r2, #0
 8007f28:	4682      	mov	sl, r0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 fd80 	bl	8000a34 <__aeabi_dcmplt>
 8007f34:	b148      	cbz	r0, 8007f4a <_dtoa_r+0x162>
 8007f36:	4650      	mov	r0, sl
 8007f38:	f7f8 faa0 	bl	800047c <__aeabi_i2d>
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	463b      	mov	r3, r7
 8007f40:	f7f8 fd6e 	bl	8000a20 <__aeabi_dcmpeq>
 8007f44:	b908      	cbnz	r0, 8007f4a <_dtoa_r+0x162>
 8007f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4a:	f1ba 0f16 	cmp.w	sl, #22
 8007f4e:	d859      	bhi.n	8008004 <_dtoa_r+0x21c>
 8007f50:	4970      	ldr	r1, [pc, #448]	; (8008114 <_dtoa_r+0x32c>)
 8007f52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5e:	f7f8 fd87 	bl	8000a70 <__aeabi_dcmpgt>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d050      	beq.n	8008008 <_dtoa_r+0x220>
 8007f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f70:	1b5d      	subs	r5, r3, r5
 8007f72:	f1b5 0801 	subs.w	r8, r5, #1
 8007f76:	bf49      	itett	mi
 8007f78:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f7c:	2300      	movpl	r3, #0
 8007f7e:	9305      	strmi	r3, [sp, #20]
 8007f80:	f04f 0800 	movmi.w	r8, #0
 8007f84:	bf58      	it	pl
 8007f86:	9305      	strpl	r3, [sp, #20]
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	db3e      	blt.n	800800c <_dtoa_r+0x224>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	44d0      	add	r8, sl
 8007f92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	9b06      	ldr	r3, [sp, #24]
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	f200 8090 	bhi.w	80080c0 <_dtoa_r+0x2d8>
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	bfc4      	itt	gt
 8007fa4:	3b04      	subgt	r3, #4
 8007fa6:	9306      	strgt	r3, [sp, #24]
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	f1a3 0302 	sub.w	r3, r3, #2
 8007fae:	bfcc      	ite	gt
 8007fb0:	2500      	movgt	r5, #0
 8007fb2:	2501      	movle	r5, #1
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	f200 808f 	bhi.w	80080d8 <_dtoa_r+0x2f0>
 8007fba:	e8df f003 	tbb	[pc, r3]
 8007fbe:	7f7d      	.short	0x7f7d
 8007fc0:	7131      	.short	0x7131
 8007fc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007fc6:	441d      	add	r5, r3
 8007fc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fcc:	2820      	cmp	r0, #32
 8007fce:	dd13      	ble.n	8007ff8 <_dtoa_r+0x210>
 8007fd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	fa08 f800 	lsl.w	r8, r8, r0
 8007fda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fde:	fa23 f000 	lsr.w	r0, r3, r0
 8007fe2:	ea48 0000 	orr.w	r0, r8, r0
 8007fe6:	f7f8 fa39 	bl	800045c <__aeabi_ui2d>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4682      	mov	sl, r0
 8007fee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007ff2:	3d01      	subs	r5, #1
 8007ff4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ff6:	e772      	b.n	8007ede <_dtoa_r+0xf6>
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	f1c0 0020 	rsb	r0, r0, #32
 8007ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8008002:	e7f0      	b.n	8007fe6 <_dtoa_r+0x1fe>
 8008004:	2301      	movs	r3, #1
 8008006:	e7b1      	b.n	8007f6c <_dtoa_r+0x184>
 8008008:	900f      	str	r0, [sp, #60]	; 0x3c
 800800a:	e7b0      	b.n	8007f6e <_dtoa_r+0x186>
 800800c:	9b05      	ldr	r3, [sp, #20]
 800800e:	eba3 030a 	sub.w	r3, r3, sl
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	f1ca 0300 	rsb	r3, sl, #0
 8008018:	9307      	str	r3, [sp, #28]
 800801a:	2300      	movs	r3, #0
 800801c:	930e      	str	r3, [sp, #56]	; 0x38
 800801e:	e7bb      	b.n	8007f98 <_dtoa_r+0x1b0>
 8008020:	2301      	movs	r3, #1
 8008022:	930a      	str	r3, [sp, #40]	; 0x28
 8008024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008026:	2b00      	cmp	r3, #0
 8008028:	dd59      	ble.n	80080de <_dtoa_r+0x2f6>
 800802a:	9302      	str	r3, [sp, #8]
 800802c:	4699      	mov	r9, r3
 800802e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008030:	2200      	movs	r2, #0
 8008032:	6072      	str	r2, [r6, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	f102 0014 	add.w	r0, r2, #20
 800803a:	4298      	cmp	r0, r3
 800803c:	6871      	ldr	r1, [r6, #4]
 800803e:	d953      	bls.n	80080e8 <_dtoa_r+0x300>
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fca4 	bl	800898e <_Balloc>
 8008046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008048:	6030      	str	r0, [r6, #0]
 800804a:	f1b9 0f0e 	cmp.w	r9, #14
 800804e:	f8d3 b000 	ldr.w	fp, [r3]
 8008052:	f200 80e6 	bhi.w	8008222 <_dtoa_r+0x43a>
 8008056:	2d00      	cmp	r5, #0
 8008058:	f000 80e3 	beq.w	8008222 <_dtoa_r+0x43a>
 800805c:	ed9d 7b00 	vldr	d7, [sp]
 8008060:	f1ba 0f00 	cmp.w	sl, #0
 8008064:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008068:	dd74      	ble.n	8008154 <_dtoa_r+0x36c>
 800806a:	4a2a      	ldr	r2, [pc, #168]	; (8008114 <_dtoa_r+0x32c>)
 800806c:	f00a 030f 	and.w	r3, sl, #15
 8008070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008074:	ed93 7b00 	vldr	d7, [r3]
 8008078:	ea4f 162a 	mov.w	r6, sl, asr #4
 800807c:	06f0      	lsls	r0, r6, #27
 800807e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008082:	d565      	bpl.n	8008150 <_dtoa_r+0x368>
 8008084:	4b24      	ldr	r3, [pc, #144]	; (8008118 <_dtoa_r+0x330>)
 8008086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800808a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800808e:	f7f8 fb89 	bl	80007a4 <__aeabi_ddiv>
 8008092:	e9cd 0100 	strd	r0, r1, [sp]
 8008096:	f006 060f 	and.w	r6, r6, #15
 800809a:	2503      	movs	r5, #3
 800809c:	4f1e      	ldr	r7, [pc, #120]	; (8008118 <_dtoa_r+0x330>)
 800809e:	e04c      	b.n	800813a <_dtoa_r+0x352>
 80080a0:	2301      	movs	r3, #1
 80080a2:	930a      	str	r3, [sp, #40]	; 0x28
 80080a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a6:	4453      	add	r3, sl
 80080a8:	f103 0901 	add.w	r9, r3, #1
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	464b      	mov	r3, r9
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	bfb8      	it	lt
 80080b4:	2301      	movlt	r3, #1
 80080b6:	e7ba      	b.n	800802e <_dtoa_r+0x246>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e7b2      	b.n	8008022 <_dtoa_r+0x23a>
 80080bc:	2300      	movs	r3, #0
 80080be:	e7f0      	b.n	80080a2 <_dtoa_r+0x2ba>
 80080c0:	2501      	movs	r5, #1
 80080c2:	2300      	movs	r3, #0
 80080c4:	9306      	str	r3, [sp, #24]
 80080c6:	950a      	str	r5, [sp, #40]	; 0x28
 80080c8:	f04f 33ff 	mov.w	r3, #4294967295
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	4699      	mov	r9, r3
 80080d0:	2200      	movs	r2, #0
 80080d2:	2312      	movs	r3, #18
 80080d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80080d6:	e7aa      	b.n	800802e <_dtoa_r+0x246>
 80080d8:	2301      	movs	r3, #1
 80080da:	930a      	str	r3, [sp, #40]	; 0x28
 80080dc:	e7f4      	b.n	80080c8 <_dtoa_r+0x2e0>
 80080de:	2301      	movs	r3, #1
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	4699      	mov	r9, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	e7f5      	b.n	80080d4 <_dtoa_r+0x2ec>
 80080e8:	3101      	adds	r1, #1
 80080ea:	6071      	str	r1, [r6, #4]
 80080ec:	0052      	lsls	r2, r2, #1
 80080ee:	e7a2      	b.n	8008036 <_dtoa_r+0x24e>
 80080f0:	636f4361 	.word	0x636f4361
 80080f4:	3fd287a7 	.word	0x3fd287a7
 80080f8:	8b60c8b3 	.word	0x8b60c8b3
 80080fc:	3fc68a28 	.word	0x3fc68a28
 8008100:	509f79fb 	.word	0x509f79fb
 8008104:	3fd34413 	.word	0x3fd34413
 8008108:	7ff00000 	.word	0x7ff00000
 800810c:	080090b9 	.word	0x080090b9
 8008110:	3ff80000 	.word	0x3ff80000
 8008114:	080090f0 	.word	0x080090f0
 8008118:	080090c8 	.word	0x080090c8
 800811c:	080090c3 	.word	0x080090c3
 8008120:	07f1      	lsls	r1, r6, #31
 8008122:	d508      	bpl.n	8008136 <_dtoa_r+0x34e>
 8008124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812c:	f7f8 fa10 	bl	8000550 <__aeabi_dmul>
 8008130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008134:	3501      	adds	r5, #1
 8008136:	1076      	asrs	r6, r6, #1
 8008138:	3708      	adds	r7, #8
 800813a:	2e00      	cmp	r6, #0
 800813c:	d1f0      	bne.n	8008120 <_dtoa_r+0x338>
 800813e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008142:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008146:	f7f8 fb2d 	bl	80007a4 <__aeabi_ddiv>
 800814a:	e9cd 0100 	strd	r0, r1, [sp]
 800814e:	e01a      	b.n	8008186 <_dtoa_r+0x39e>
 8008150:	2502      	movs	r5, #2
 8008152:	e7a3      	b.n	800809c <_dtoa_r+0x2b4>
 8008154:	f000 80a0 	beq.w	8008298 <_dtoa_r+0x4b0>
 8008158:	f1ca 0600 	rsb	r6, sl, #0
 800815c:	4b9f      	ldr	r3, [pc, #636]	; (80083dc <_dtoa_r+0x5f4>)
 800815e:	4fa0      	ldr	r7, [pc, #640]	; (80083e0 <_dtoa_r+0x5f8>)
 8008160:	f006 020f 	and.w	r2, r6, #15
 8008164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008170:	f7f8 f9ee 	bl	8000550 <__aeabi_dmul>
 8008174:	e9cd 0100 	strd	r0, r1, [sp]
 8008178:	1136      	asrs	r6, r6, #4
 800817a:	2300      	movs	r3, #0
 800817c:	2502      	movs	r5, #2
 800817e:	2e00      	cmp	r6, #0
 8008180:	d17f      	bne.n	8008282 <_dtoa_r+0x49a>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e1      	bne.n	800814a <_dtoa_r+0x362>
 8008186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 8087 	beq.w	800829c <_dtoa_r+0x4b4>
 800818e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008192:	2200      	movs	r2, #0
 8008194:	4b93      	ldr	r3, [pc, #588]	; (80083e4 <_dtoa_r+0x5fc>)
 8008196:	4630      	mov	r0, r6
 8008198:	4639      	mov	r1, r7
 800819a:	f7f8 fc4b 	bl	8000a34 <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d07c      	beq.n	800829c <_dtoa_r+0x4b4>
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	d079      	beq.n	800829c <_dtoa_r+0x4b4>
 80081a8:	9b02      	ldr	r3, [sp, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	dd35      	ble.n	800821a <_dtoa_r+0x432>
 80081ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081b2:	9308      	str	r3, [sp, #32]
 80081b4:	4639      	mov	r1, r7
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b8b      	ldr	r3, [pc, #556]	; (80083e8 <_dtoa_r+0x600>)
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7f8 f9c8 	bl	8000550 <__aeabi_dmul>
 80081c0:	e9cd 0100 	strd	r0, r1, [sp]
 80081c4:	9f02      	ldr	r7, [sp, #8]
 80081c6:	3501      	adds	r5, #1
 80081c8:	4628      	mov	r0, r5
 80081ca:	f7f8 f957 	bl	800047c <__aeabi_i2d>
 80081ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d2:	f7f8 f9bd 	bl	8000550 <__aeabi_dmul>
 80081d6:	2200      	movs	r2, #0
 80081d8:	4b84      	ldr	r3, [pc, #528]	; (80083ec <_dtoa_r+0x604>)
 80081da:	f7f8 f803 	bl	80001e4 <__adddf3>
 80081de:	4605      	mov	r5, r0
 80081e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	d15d      	bne.n	80082a4 <_dtoa_r+0x4bc>
 80081e8:	2200      	movs	r2, #0
 80081ea:	4b81      	ldr	r3, [pc, #516]	; (80083f0 <_dtoa_r+0x608>)
 80081ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f0:	f7f7 fff6 	bl	80001e0 <__aeabi_dsub>
 80081f4:	462a      	mov	r2, r5
 80081f6:	4633      	mov	r3, r6
 80081f8:	e9cd 0100 	strd	r0, r1, [sp]
 80081fc:	f7f8 fc38 	bl	8000a70 <__aeabi_dcmpgt>
 8008200:	2800      	cmp	r0, #0
 8008202:	f040 8288 	bne.w	8008716 <_dtoa_r+0x92e>
 8008206:	462a      	mov	r2, r5
 8008208:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800820c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008210:	f7f8 fc10 	bl	8000a34 <__aeabi_dcmplt>
 8008214:	2800      	cmp	r0, #0
 8008216:	f040 827c 	bne.w	8008712 <_dtoa_r+0x92a>
 800821a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800821e:	e9cd 2300 	strd	r2, r3, [sp]
 8008222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008224:	2b00      	cmp	r3, #0
 8008226:	f2c0 8150 	blt.w	80084ca <_dtoa_r+0x6e2>
 800822a:	f1ba 0f0e 	cmp.w	sl, #14
 800822e:	f300 814c 	bgt.w	80084ca <_dtoa_r+0x6e2>
 8008232:	4b6a      	ldr	r3, [pc, #424]	; (80083dc <_dtoa_r+0x5f4>)
 8008234:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008238:	ed93 7b00 	vldr	d7, [r3]
 800823c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823e:	2b00      	cmp	r3, #0
 8008240:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008244:	f280 80d8 	bge.w	80083f8 <_dtoa_r+0x610>
 8008248:	f1b9 0f00 	cmp.w	r9, #0
 800824c:	f300 80d4 	bgt.w	80083f8 <_dtoa_r+0x610>
 8008250:	f040 825e 	bne.w	8008710 <_dtoa_r+0x928>
 8008254:	2200      	movs	r2, #0
 8008256:	4b66      	ldr	r3, [pc, #408]	; (80083f0 <_dtoa_r+0x608>)
 8008258:	ec51 0b17 	vmov	r0, r1, d7
 800825c:	f7f8 f978 	bl	8000550 <__aeabi_dmul>
 8008260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008264:	f7f8 fbfa 	bl	8000a5c <__aeabi_dcmpge>
 8008268:	464f      	mov	r7, r9
 800826a:	464e      	mov	r6, r9
 800826c:	2800      	cmp	r0, #0
 800826e:	f040 8234 	bne.w	80086da <_dtoa_r+0x8f2>
 8008272:	2331      	movs	r3, #49	; 0x31
 8008274:	f10b 0501 	add.w	r5, fp, #1
 8008278:	f88b 3000 	strb.w	r3, [fp]
 800827c:	f10a 0a01 	add.w	sl, sl, #1
 8008280:	e22f      	b.n	80086e2 <_dtoa_r+0x8fa>
 8008282:	07f2      	lsls	r2, r6, #31
 8008284:	d505      	bpl.n	8008292 <_dtoa_r+0x4aa>
 8008286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828a:	f7f8 f961 	bl	8000550 <__aeabi_dmul>
 800828e:	3501      	adds	r5, #1
 8008290:	2301      	movs	r3, #1
 8008292:	1076      	asrs	r6, r6, #1
 8008294:	3708      	adds	r7, #8
 8008296:	e772      	b.n	800817e <_dtoa_r+0x396>
 8008298:	2502      	movs	r5, #2
 800829a:	e774      	b.n	8008186 <_dtoa_r+0x39e>
 800829c:	f8cd a020 	str.w	sl, [sp, #32]
 80082a0:	464f      	mov	r7, r9
 80082a2:	e791      	b.n	80081c8 <_dtoa_r+0x3e0>
 80082a4:	4b4d      	ldr	r3, [pc, #308]	; (80083dc <_dtoa_r+0x5f4>)
 80082a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d047      	beq.n	8008344 <_dtoa_r+0x55c>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	2000      	movs	r0, #0
 80082ba:	494e      	ldr	r1, [pc, #312]	; (80083f4 <_dtoa_r+0x60c>)
 80082bc:	f7f8 fa72 	bl	80007a4 <__aeabi_ddiv>
 80082c0:	462a      	mov	r2, r5
 80082c2:	4633      	mov	r3, r6
 80082c4:	f7f7 ff8c 	bl	80001e0 <__aeabi_dsub>
 80082c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082cc:	465d      	mov	r5, fp
 80082ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082d2:	f7f8 fbed 	bl	8000ab0 <__aeabi_d2iz>
 80082d6:	4606      	mov	r6, r0
 80082d8:	f7f8 f8d0 	bl	800047c <__aeabi_i2d>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e4:	f7f7 ff7c 	bl	80001e0 <__aeabi_dsub>
 80082e8:	3630      	adds	r6, #48	; 0x30
 80082ea:	f805 6b01 	strb.w	r6, [r5], #1
 80082ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082f2:	e9cd 0100 	strd	r0, r1, [sp]
 80082f6:	f7f8 fb9d 	bl	8000a34 <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d163      	bne.n	80083c6 <_dtoa_r+0x5de>
 80082fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008302:	2000      	movs	r0, #0
 8008304:	4937      	ldr	r1, [pc, #220]	; (80083e4 <_dtoa_r+0x5fc>)
 8008306:	f7f7 ff6b 	bl	80001e0 <__aeabi_dsub>
 800830a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800830e:	f7f8 fb91 	bl	8000a34 <__aeabi_dcmplt>
 8008312:	2800      	cmp	r0, #0
 8008314:	f040 80b7 	bne.w	8008486 <_dtoa_r+0x69e>
 8008318:	eba5 030b 	sub.w	r3, r5, fp
 800831c:	429f      	cmp	r7, r3
 800831e:	f77f af7c 	ble.w	800821a <_dtoa_r+0x432>
 8008322:	2200      	movs	r2, #0
 8008324:	4b30      	ldr	r3, [pc, #192]	; (80083e8 <_dtoa_r+0x600>)
 8008326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800832a:	f7f8 f911 	bl	8000550 <__aeabi_dmul>
 800832e:	2200      	movs	r2, #0
 8008330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008334:	4b2c      	ldr	r3, [pc, #176]	; (80083e8 <_dtoa_r+0x600>)
 8008336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800833a:	f7f8 f909 	bl	8000550 <__aeabi_dmul>
 800833e:	e9cd 0100 	strd	r0, r1, [sp]
 8008342:	e7c4      	b.n	80082ce <_dtoa_r+0x4e6>
 8008344:	462a      	mov	r2, r5
 8008346:	4633      	mov	r3, r6
 8008348:	f7f8 f902 	bl	8000550 <__aeabi_dmul>
 800834c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008350:	eb0b 0507 	add.w	r5, fp, r7
 8008354:	465e      	mov	r6, fp
 8008356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835a:	f7f8 fba9 	bl	8000ab0 <__aeabi_d2iz>
 800835e:	4607      	mov	r7, r0
 8008360:	f7f8 f88c 	bl	800047c <__aeabi_i2d>
 8008364:	3730      	adds	r7, #48	; 0x30
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800836e:	f7f7 ff37 	bl	80001e0 <__aeabi_dsub>
 8008372:	f806 7b01 	strb.w	r7, [r6], #1
 8008376:	42ae      	cmp	r6, r5
 8008378:	e9cd 0100 	strd	r0, r1, [sp]
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	d126      	bne.n	80083d0 <_dtoa_r+0x5e8>
 8008382:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <_dtoa_r+0x60c>)
 8008384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008388:	f7f7 ff2c 	bl	80001e4 <__adddf3>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008394:	f7f8 fb6c 	bl	8000a70 <__aeabi_dcmpgt>
 8008398:	2800      	cmp	r0, #0
 800839a:	d174      	bne.n	8008486 <_dtoa_r+0x69e>
 800839c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083a0:	2000      	movs	r0, #0
 80083a2:	4914      	ldr	r1, [pc, #80]	; (80083f4 <_dtoa_r+0x60c>)
 80083a4:	f7f7 ff1c 	bl	80001e0 <__aeabi_dsub>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b0:	f7f8 fb40 	bl	8000a34 <__aeabi_dcmplt>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f43f af30 	beq.w	800821a <_dtoa_r+0x432>
 80083ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083be:	2b30      	cmp	r3, #48	; 0x30
 80083c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80083c4:	d002      	beq.n	80083cc <_dtoa_r+0x5e4>
 80083c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80083ca:	e04a      	b.n	8008462 <_dtoa_r+0x67a>
 80083cc:	4615      	mov	r5, r2
 80083ce:	e7f4      	b.n	80083ba <_dtoa_r+0x5d2>
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <_dtoa_r+0x600>)
 80083d2:	f7f8 f8bd 	bl	8000550 <__aeabi_dmul>
 80083d6:	e9cd 0100 	strd	r0, r1, [sp]
 80083da:	e7bc      	b.n	8008356 <_dtoa_r+0x56e>
 80083dc:	080090f0 	.word	0x080090f0
 80083e0:	080090c8 	.word	0x080090c8
 80083e4:	3ff00000 	.word	0x3ff00000
 80083e8:	40240000 	.word	0x40240000
 80083ec:	401c0000 	.word	0x401c0000
 80083f0:	40140000 	.word	0x40140000
 80083f4:	3fe00000 	.word	0x3fe00000
 80083f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083fc:	465d      	mov	r5, fp
 80083fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f8 f9cd 	bl	80007a4 <__aeabi_ddiv>
 800840a:	f7f8 fb51 	bl	8000ab0 <__aeabi_d2iz>
 800840e:	4680      	mov	r8, r0
 8008410:	f7f8 f834 	bl	800047c <__aeabi_i2d>
 8008414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008418:	f7f8 f89a 	bl	8000550 <__aeabi_dmul>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	4630      	mov	r0, r6
 8008422:	4639      	mov	r1, r7
 8008424:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008428:	f7f7 feda 	bl	80001e0 <__aeabi_dsub>
 800842c:	f805 6b01 	strb.w	r6, [r5], #1
 8008430:	eba5 060b 	sub.w	r6, r5, fp
 8008434:	45b1      	cmp	r9, r6
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	d139      	bne.n	80084b0 <_dtoa_r+0x6c8>
 800843c:	f7f7 fed2 	bl	80001e4 <__adddf3>
 8008440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008444:	4606      	mov	r6, r0
 8008446:	460f      	mov	r7, r1
 8008448:	f7f8 fb12 	bl	8000a70 <__aeabi_dcmpgt>
 800844c:	b9c8      	cbnz	r0, 8008482 <_dtoa_r+0x69a>
 800844e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f8 fae3 	bl	8000a20 <__aeabi_dcmpeq>
 800845a:	b110      	cbz	r0, 8008462 <_dtoa_r+0x67a>
 800845c:	f018 0f01 	tst.w	r8, #1
 8008460:	d10f      	bne.n	8008482 <_dtoa_r+0x69a>
 8008462:	9904      	ldr	r1, [sp, #16]
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fac6 	bl	80089f6 <_Bfree>
 800846a:	2300      	movs	r3, #0
 800846c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800846e:	702b      	strb	r3, [r5, #0]
 8008470:	f10a 0301 	add.w	r3, sl, #1
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8241 	beq.w	8008900 <_dtoa_r+0xb18>
 800847e:	601d      	str	r5, [r3, #0]
 8008480:	e23e      	b.n	8008900 <_dtoa_r+0xb18>
 8008482:	f8cd a020 	str.w	sl, [sp, #32]
 8008486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800848a:	2a39      	cmp	r2, #57	; 0x39
 800848c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008490:	d108      	bne.n	80084a4 <_dtoa_r+0x6bc>
 8008492:	459b      	cmp	fp, r3
 8008494:	d10a      	bne.n	80084ac <_dtoa_r+0x6c4>
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	3301      	adds	r3, #1
 800849a:	9308      	str	r3, [sp, #32]
 800849c:	2330      	movs	r3, #48	; 0x30
 800849e:	f88b 3000 	strb.w	r3, [fp]
 80084a2:	465b      	mov	r3, fp
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	3201      	adds	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	e78c      	b.n	80083c6 <_dtoa_r+0x5de>
 80084ac:	461d      	mov	r5, r3
 80084ae:	e7ea      	b.n	8008486 <_dtoa_r+0x69e>
 80084b0:	2200      	movs	r2, #0
 80084b2:	4b9b      	ldr	r3, [pc, #620]	; (8008720 <_dtoa_r+0x938>)
 80084b4:	f7f8 f84c 	bl	8000550 <__aeabi_dmul>
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	f7f8 faae 	bl	8000a20 <__aeabi_dcmpeq>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d09a      	beq.n	80083fe <_dtoa_r+0x616>
 80084c8:	e7cb      	b.n	8008462 <_dtoa_r+0x67a>
 80084ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	f000 808b 	beq.w	80085e8 <_dtoa_r+0x800>
 80084d2:	9a06      	ldr	r2, [sp, #24]
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	dc6e      	bgt.n	80085b6 <_dtoa_r+0x7ce>
 80084d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084da:	2a00      	cmp	r2, #0
 80084dc:	d067      	beq.n	80085ae <_dtoa_r+0x7c6>
 80084de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084e2:	9f07      	ldr	r7, [sp, #28]
 80084e4:	9d05      	ldr	r5, [sp, #20]
 80084e6:	9a05      	ldr	r2, [sp, #20]
 80084e8:	2101      	movs	r1, #1
 80084ea:	441a      	add	r2, r3
 80084ec:	4620      	mov	r0, r4
 80084ee:	9205      	str	r2, [sp, #20]
 80084f0:	4498      	add	r8, r3
 80084f2:	f000 fb20 	bl	8008b36 <__i2b>
 80084f6:	4606      	mov	r6, r0
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	dd0c      	ble.n	8008516 <_dtoa_r+0x72e>
 80084fc:	f1b8 0f00 	cmp.w	r8, #0
 8008500:	dd09      	ble.n	8008516 <_dtoa_r+0x72e>
 8008502:	4545      	cmp	r5, r8
 8008504:	9a05      	ldr	r2, [sp, #20]
 8008506:	462b      	mov	r3, r5
 8008508:	bfa8      	it	ge
 800850a:	4643      	movge	r3, r8
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	9205      	str	r2, [sp, #20]
 8008510:	1aed      	subs	r5, r5, r3
 8008512:	eba8 0803 	sub.w	r8, r8, r3
 8008516:	9b07      	ldr	r3, [sp, #28]
 8008518:	b1eb      	cbz	r3, 8008556 <_dtoa_r+0x76e>
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	2b00      	cmp	r3, #0
 800851e:	d067      	beq.n	80085f0 <_dtoa_r+0x808>
 8008520:	b18f      	cbz	r7, 8008546 <_dtoa_r+0x75e>
 8008522:	4631      	mov	r1, r6
 8008524:	463a      	mov	r2, r7
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fba4 	bl	8008c74 <__pow5mult>
 800852c:	9a04      	ldr	r2, [sp, #16]
 800852e:	4601      	mov	r1, r0
 8008530:	4606      	mov	r6, r0
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fb08 	bl	8008b48 <__multiply>
 8008538:	9904      	ldr	r1, [sp, #16]
 800853a:	9008      	str	r0, [sp, #32]
 800853c:	4620      	mov	r0, r4
 800853e:	f000 fa5a 	bl	80089f6 <_Bfree>
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	9b07      	ldr	r3, [sp, #28]
 8008548:	1bda      	subs	r2, r3, r7
 800854a:	d004      	beq.n	8008556 <_dtoa_r+0x76e>
 800854c:	9904      	ldr	r1, [sp, #16]
 800854e:	4620      	mov	r0, r4
 8008550:	f000 fb90 	bl	8008c74 <__pow5mult>
 8008554:	9004      	str	r0, [sp, #16]
 8008556:	2101      	movs	r1, #1
 8008558:	4620      	mov	r0, r4
 800855a:	f000 faec 	bl	8008b36 <__i2b>
 800855e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008560:	4607      	mov	r7, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 81d0 	beq.w	8008908 <_dtoa_r+0xb20>
 8008568:	461a      	mov	r2, r3
 800856a:	4601      	mov	r1, r0
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fb81 	bl	8008c74 <__pow5mult>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b01      	cmp	r3, #1
 8008576:	4607      	mov	r7, r0
 8008578:	dc40      	bgt.n	80085fc <_dtoa_r+0x814>
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d139      	bne.n	80085f4 <_dtoa_r+0x80c>
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008586:	2b00      	cmp	r3, #0
 8008588:	d136      	bne.n	80085f8 <_dtoa_r+0x810>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	051b      	lsls	r3, r3, #20
 8008594:	b12b      	cbz	r3, 80085a2 <_dtoa_r+0x7ba>
 8008596:	9b05      	ldr	r3, [sp, #20]
 8008598:	3301      	adds	r3, #1
 800859a:	9305      	str	r3, [sp, #20]
 800859c:	f108 0801 	add.w	r8, r8, #1
 80085a0:	2301      	movs	r3, #1
 80085a2:	9307      	str	r3, [sp, #28]
 80085a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d12a      	bne.n	8008600 <_dtoa_r+0x818>
 80085aa:	2001      	movs	r0, #1
 80085ac:	e030      	b.n	8008610 <_dtoa_r+0x828>
 80085ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085b4:	e795      	b.n	80084e2 <_dtoa_r+0x6fa>
 80085b6:	9b07      	ldr	r3, [sp, #28]
 80085b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80085bc:	42bb      	cmp	r3, r7
 80085be:	bfbf      	itttt	lt
 80085c0:	9b07      	ldrlt	r3, [sp, #28]
 80085c2:	9707      	strlt	r7, [sp, #28]
 80085c4:	1afa      	sublt	r2, r7, r3
 80085c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085c8:	bfbb      	ittet	lt
 80085ca:	189b      	addlt	r3, r3, r2
 80085cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085ce:	1bdf      	subge	r7, r3, r7
 80085d0:	2700      	movlt	r7, #0
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	bfb5      	itete	lt
 80085d8:	9b05      	ldrlt	r3, [sp, #20]
 80085da:	9d05      	ldrge	r5, [sp, #20]
 80085dc:	eba3 0509 	sublt.w	r5, r3, r9
 80085e0:	464b      	movge	r3, r9
 80085e2:	bfb8      	it	lt
 80085e4:	2300      	movlt	r3, #0
 80085e6:	e77e      	b.n	80084e6 <_dtoa_r+0x6fe>
 80085e8:	9f07      	ldr	r7, [sp, #28]
 80085ea:	9d05      	ldr	r5, [sp, #20]
 80085ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085ee:	e783      	b.n	80084f8 <_dtoa_r+0x710>
 80085f0:	9a07      	ldr	r2, [sp, #28]
 80085f2:	e7ab      	b.n	800854c <_dtoa_r+0x764>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7d4      	b.n	80085a2 <_dtoa_r+0x7ba>
 80085f8:	9b00      	ldr	r3, [sp, #0]
 80085fa:	e7d2      	b.n	80085a2 <_dtoa_r+0x7ba>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008606:	6918      	ldr	r0, [r3, #16]
 8008608:	f000 fa47 	bl	8008a9a <__hi0bits>
 800860c:	f1c0 0020 	rsb	r0, r0, #32
 8008610:	4440      	add	r0, r8
 8008612:	f010 001f 	ands.w	r0, r0, #31
 8008616:	d047      	beq.n	80086a8 <_dtoa_r+0x8c0>
 8008618:	f1c0 0320 	rsb	r3, r0, #32
 800861c:	2b04      	cmp	r3, #4
 800861e:	dd3b      	ble.n	8008698 <_dtoa_r+0x8b0>
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	f1c0 001c 	rsb	r0, r0, #28
 8008626:	4403      	add	r3, r0
 8008628:	9305      	str	r3, [sp, #20]
 800862a:	4405      	add	r5, r0
 800862c:	4480      	add	r8, r0
 800862e:	9b05      	ldr	r3, [sp, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	dd05      	ble.n	8008640 <_dtoa_r+0x858>
 8008634:	461a      	mov	r2, r3
 8008636:	9904      	ldr	r1, [sp, #16]
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fb69 	bl	8008d10 <__lshift>
 800863e:	9004      	str	r0, [sp, #16]
 8008640:	f1b8 0f00 	cmp.w	r8, #0
 8008644:	dd05      	ble.n	8008652 <_dtoa_r+0x86a>
 8008646:	4639      	mov	r1, r7
 8008648:	4642      	mov	r2, r8
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fb60 	bl	8008d10 <__lshift>
 8008650:	4607      	mov	r7, r0
 8008652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008654:	b353      	cbz	r3, 80086ac <_dtoa_r+0x8c4>
 8008656:	4639      	mov	r1, r7
 8008658:	9804      	ldr	r0, [sp, #16]
 800865a:	f000 fbad 	bl	8008db8 <__mcmp>
 800865e:	2800      	cmp	r0, #0
 8008660:	da24      	bge.n	80086ac <_dtoa_r+0x8c4>
 8008662:	2300      	movs	r3, #0
 8008664:	220a      	movs	r2, #10
 8008666:	9904      	ldr	r1, [sp, #16]
 8008668:	4620      	mov	r0, r4
 800866a:	f000 f9db 	bl	8008a24 <__multadd>
 800866e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008670:	9004      	str	r0, [sp, #16]
 8008672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 814d 	beq.w	8008916 <_dtoa_r+0xb2e>
 800867c:	2300      	movs	r3, #0
 800867e:	4631      	mov	r1, r6
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 f9ce 	bl	8008a24 <__multadd>
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	4606      	mov	r6, r0
 800868e:	dc4f      	bgt.n	8008730 <_dtoa_r+0x948>
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	2b02      	cmp	r3, #2
 8008694:	dd4c      	ble.n	8008730 <_dtoa_r+0x948>
 8008696:	e011      	b.n	80086bc <_dtoa_r+0x8d4>
 8008698:	d0c9      	beq.n	800862e <_dtoa_r+0x846>
 800869a:	9a05      	ldr	r2, [sp, #20]
 800869c:	331c      	adds	r3, #28
 800869e:	441a      	add	r2, r3
 80086a0:	9205      	str	r2, [sp, #20]
 80086a2:	441d      	add	r5, r3
 80086a4:	4498      	add	r8, r3
 80086a6:	e7c2      	b.n	800862e <_dtoa_r+0x846>
 80086a8:	4603      	mov	r3, r0
 80086aa:	e7f6      	b.n	800869a <_dtoa_r+0x8b2>
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	dc38      	bgt.n	8008724 <_dtoa_r+0x93c>
 80086b2:	9b06      	ldr	r3, [sp, #24]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	dd35      	ble.n	8008724 <_dtoa_r+0x93c>
 80086b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80086bc:	9b02      	ldr	r3, [sp, #8]
 80086be:	b963      	cbnz	r3, 80086da <_dtoa_r+0x8f2>
 80086c0:	4639      	mov	r1, r7
 80086c2:	2205      	movs	r2, #5
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 f9ad 	bl	8008a24 <__multadd>
 80086ca:	4601      	mov	r1, r0
 80086cc:	4607      	mov	r7, r0
 80086ce:	9804      	ldr	r0, [sp, #16]
 80086d0:	f000 fb72 	bl	8008db8 <__mcmp>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f73f adcc 	bgt.w	8008272 <_dtoa_r+0x48a>
 80086da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086dc:	465d      	mov	r5, fp
 80086de:	ea6f 0a03 	mvn.w	sl, r3
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	4639      	mov	r1, r7
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 f984 	bl	80089f6 <_Bfree>
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	f43f aeb7 	beq.w	8008462 <_dtoa_r+0x67a>
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	d005      	beq.n	8008706 <_dtoa_r+0x91e>
 80086fa:	45b1      	cmp	r9, r6
 80086fc:	d003      	beq.n	8008706 <_dtoa_r+0x91e>
 80086fe:	4649      	mov	r1, r9
 8008700:	4620      	mov	r0, r4
 8008702:	f000 f978 	bl	80089f6 <_Bfree>
 8008706:	4631      	mov	r1, r6
 8008708:	4620      	mov	r0, r4
 800870a:	f000 f974 	bl	80089f6 <_Bfree>
 800870e:	e6a8      	b.n	8008462 <_dtoa_r+0x67a>
 8008710:	2700      	movs	r7, #0
 8008712:	463e      	mov	r6, r7
 8008714:	e7e1      	b.n	80086da <_dtoa_r+0x8f2>
 8008716:	f8dd a020 	ldr.w	sl, [sp, #32]
 800871a:	463e      	mov	r6, r7
 800871c:	e5a9      	b.n	8008272 <_dtoa_r+0x48a>
 800871e:	bf00      	nop
 8008720:	40240000 	.word	0x40240000
 8008724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008726:	f8cd 9008 	str.w	r9, [sp, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 80fa 	beq.w	8008924 <_dtoa_r+0xb3c>
 8008730:	2d00      	cmp	r5, #0
 8008732:	dd05      	ble.n	8008740 <_dtoa_r+0x958>
 8008734:	4631      	mov	r1, r6
 8008736:	462a      	mov	r2, r5
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fae9 	bl	8008d10 <__lshift>
 800873e:	4606      	mov	r6, r0
 8008740:	9b07      	ldr	r3, [sp, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d04c      	beq.n	80087e0 <_dtoa_r+0x9f8>
 8008746:	6871      	ldr	r1, [r6, #4]
 8008748:	4620      	mov	r0, r4
 800874a:	f000 f920 	bl	800898e <_Balloc>
 800874e:	6932      	ldr	r2, [r6, #16]
 8008750:	3202      	adds	r2, #2
 8008752:	4605      	mov	r5, r0
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	f106 010c 	add.w	r1, r6, #12
 800875a:	300c      	adds	r0, #12
 800875c:	f000 f90a 	bl	8008974 <memcpy>
 8008760:	2201      	movs	r2, #1
 8008762:	4629      	mov	r1, r5
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fad3 	bl	8008d10 <__lshift>
 800876a:	9b00      	ldr	r3, [sp, #0]
 800876c:	f8cd b014 	str.w	fp, [sp, #20]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	46b1      	mov	r9, r6
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	4606      	mov	r6, r0
 800877a:	4639      	mov	r1, r7
 800877c:	9804      	ldr	r0, [sp, #16]
 800877e:	f7ff faa5 	bl	8007ccc <quorem>
 8008782:	4649      	mov	r1, r9
 8008784:	4605      	mov	r5, r0
 8008786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800878a:	9804      	ldr	r0, [sp, #16]
 800878c:	f000 fb14 	bl	8008db8 <__mcmp>
 8008790:	4632      	mov	r2, r6
 8008792:	9000      	str	r0, [sp, #0]
 8008794:	4639      	mov	r1, r7
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fb28 	bl	8008dec <__mdiff>
 800879c:	68c3      	ldr	r3, [r0, #12]
 800879e:	4602      	mov	r2, r0
 80087a0:	bb03      	cbnz	r3, 80087e4 <_dtoa_r+0x9fc>
 80087a2:	4601      	mov	r1, r0
 80087a4:	9008      	str	r0, [sp, #32]
 80087a6:	9804      	ldr	r0, [sp, #16]
 80087a8:	f000 fb06 	bl	8008db8 <__mcmp>
 80087ac:	9a08      	ldr	r2, [sp, #32]
 80087ae:	4603      	mov	r3, r0
 80087b0:	4611      	mov	r1, r2
 80087b2:	4620      	mov	r0, r4
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	f000 f91e 	bl	80089f6 <_Bfree>
 80087ba:	9b08      	ldr	r3, [sp, #32]
 80087bc:	b9a3      	cbnz	r3, 80087e8 <_dtoa_r+0xa00>
 80087be:	9a06      	ldr	r2, [sp, #24]
 80087c0:	b992      	cbnz	r2, 80087e8 <_dtoa_r+0xa00>
 80087c2:	9a07      	ldr	r2, [sp, #28]
 80087c4:	b982      	cbnz	r2, 80087e8 <_dtoa_r+0xa00>
 80087c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087ca:	d029      	beq.n	8008820 <_dtoa_r+0xa38>
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dd01      	ble.n	80087d6 <_dtoa_r+0x9ee>
 80087d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	1c5d      	adds	r5, r3, #1
 80087da:	f883 8000 	strb.w	r8, [r3]
 80087de:	e782      	b.n	80086e6 <_dtoa_r+0x8fe>
 80087e0:	4630      	mov	r0, r6
 80087e2:	e7c2      	b.n	800876a <_dtoa_r+0x982>
 80087e4:	2301      	movs	r3, #1
 80087e6:	e7e3      	b.n	80087b0 <_dtoa_r+0x9c8>
 80087e8:	9a00      	ldr	r2, [sp, #0]
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	db04      	blt.n	80087f8 <_dtoa_r+0xa10>
 80087ee:	d125      	bne.n	800883c <_dtoa_r+0xa54>
 80087f0:	9a06      	ldr	r2, [sp, #24]
 80087f2:	bb1a      	cbnz	r2, 800883c <_dtoa_r+0xa54>
 80087f4:	9a07      	ldr	r2, [sp, #28]
 80087f6:	bb0a      	cbnz	r2, 800883c <_dtoa_r+0xa54>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	ddec      	ble.n	80087d6 <_dtoa_r+0x9ee>
 80087fc:	2201      	movs	r2, #1
 80087fe:	9904      	ldr	r1, [sp, #16]
 8008800:	4620      	mov	r0, r4
 8008802:	f000 fa85 	bl	8008d10 <__lshift>
 8008806:	4639      	mov	r1, r7
 8008808:	9004      	str	r0, [sp, #16]
 800880a:	f000 fad5 	bl	8008db8 <__mcmp>
 800880e:	2800      	cmp	r0, #0
 8008810:	dc03      	bgt.n	800881a <_dtoa_r+0xa32>
 8008812:	d1e0      	bne.n	80087d6 <_dtoa_r+0x9ee>
 8008814:	f018 0f01 	tst.w	r8, #1
 8008818:	d0dd      	beq.n	80087d6 <_dtoa_r+0x9ee>
 800881a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800881e:	d1d8      	bne.n	80087d2 <_dtoa_r+0x9ea>
 8008820:	9b05      	ldr	r3, [sp, #20]
 8008822:	9a05      	ldr	r2, [sp, #20]
 8008824:	1c5d      	adds	r5, r3, #1
 8008826:	2339      	movs	r3, #57	; 0x39
 8008828:	7013      	strb	r3, [r2, #0]
 800882a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800882e:	2b39      	cmp	r3, #57	; 0x39
 8008830:	f105 32ff 	add.w	r2, r5, #4294967295
 8008834:	d04f      	beq.n	80088d6 <_dtoa_r+0xaee>
 8008836:	3301      	adds	r3, #1
 8008838:	7013      	strb	r3, [r2, #0]
 800883a:	e754      	b.n	80086e6 <_dtoa_r+0x8fe>
 800883c:	9a05      	ldr	r2, [sp, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f102 0501 	add.w	r5, r2, #1
 8008844:	dd06      	ble.n	8008854 <_dtoa_r+0xa6c>
 8008846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800884a:	d0e9      	beq.n	8008820 <_dtoa_r+0xa38>
 800884c:	f108 0801 	add.w	r8, r8, #1
 8008850:	9b05      	ldr	r3, [sp, #20]
 8008852:	e7c2      	b.n	80087da <_dtoa_r+0x9f2>
 8008854:	9a02      	ldr	r2, [sp, #8]
 8008856:	f805 8c01 	strb.w	r8, [r5, #-1]
 800885a:	eba5 030b 	sub.w	r3, r5, fp
 800885e:	4293      	cmp	r3, r2
 8008860:	d021      	beq.n	80088a6 <_dtoa_r+0xabe>
 8008862:	2300      	movs	r3, #0
 8008864:	220a      	movs	r2, #10
 8008866:	9904      	ldr	r1, [sp, #16]
 8008868:	4620      	mov	r0, r4
 800886a:	f000 f8db 	bl	8008a24 <__multadd>
 800886e:	45b1      	cmp	r9, r6
 8008870:	9004      	str	r0, [sp, #16]
 8008872:	f04f 0300 	mov.w	r3, #0
 8008876:	f04f 020a 	mov.w	r2, #10
 800887a:	4649      	mov	r1, r9
 800887c:	4620      	mov	r0, r4
 800887e:	d105      	bne.n	800888c <_dtoa_r+0xaa4>
 8008880:	f000 f8d0 	bl	8008a24 <__multadd>
 8008884:	4681      	mov	r9, r0
 8008886:	4606      	mov	r6, r0
 8008888:	9505      	str	r5, [sp, #20]
 800888a:	e776      	b.n	800877a <_dtoa_r+0x992>
 800888c:	f000 f8ca 	bl	8008a24 <__multadd>
 8008890:	4631      	mov	r1, r6
 8008892:	4681      	mov	r9, r0
 8008894:	2300      	movs	r3, #0
 8008896:	220a      	movs	r2, #10
 8008898:	4620      	mov	r0, r4
 800889a:	f000 f8c3 	bl	8008a24 <__multadd>
 800889e:	4606      	mov	r6, r0
 80088a0:	e7f2      	b.n	8008888 <_dtoa_r+0xaa0>
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	2201      	movs	r2, #1
 80088a8:	9904      	ldr	r1, [sp, #16]
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fa30 	bl	8008d10 <__lshift>
 80088b0:	4639      	mov	r1, r7
 80088b2:	9004      	str	r0, [sp, #16]
 80088b4:	f000 fa80 	bl	8008db8 <__mcmp>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	dcb6      	bgt.n	800882a <_dtoa_r+0xa42>
 80088bc:	d102      	bne.n	80088c4 <_dtoa_r+0xadc>
 80088be:	f018 0f01 	tst.w	r8, #1
 80088c2:	d1b2      	bne.n	800882a <_dtoa_r+0xa42>
 80088c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088c8:	2b30      	cmp	r3, #48	; 0x30
 80088ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80088ce:	f47f af0a 	bne.w	80086e6 <_dtoa_r+0x8fe>
 80088d2:	4615      	mov	r5, r2
 80088d4:	e7f6      	b.n	80088c4 <_dtoa_r+0xadc>
 80088d6:	4593      	cmp	fp, r2
 80088d8:	d105      	bne.n	80088e6 <_dtoa_r+0xafe>
 80088da:	2331      	movs	r3, #49	; 0x31
 80088dc:	f10a 0a01 	add.w	sl, sl, #1
 80088e0:	f88b 3000 	strb.w	r3, [fp]
 80088e4:	e6ff      	b.n	80086e6 <_dtoa_r+0x8fe>
 80088e6:	4615      	mov	r5, r2
 80088e8:	e79f      	b.n	800882a <_dtoa_r+0xa42>
 80088ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008950 <_dtoa_r+0xb68>
 80088ee:	e007      	b.n	8008900 <_dtoa_r+0xb18>
 80088f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008954 <_dtoa_r+0xb6c>
 80088f6:	b11b      	cbz	r3, 8008900 <_dtoa_r+0xb18>
 80088f8:	f10b 0308 	add.w	r3, fp, #8
 80088fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4658      	mov	r0, fp
 8008902:	b017      	add	sp, #92	; 0x5c
 8008904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008908:	9b06      	ldr	r3, [sp, #24]
 800890a:	2b01      	cmp	r3, #1
 800890c:	f77f ae35 	ble.w	800857a <_dtoa_r+0x792>
 8008910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008912:	9307      	str	r3, [sp, #28]
 8008914:	e649      	b.n	80085aa <_dtoa_r+0x7c2>
 8008916:	9b02      	ldr	r3, [sp, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc03      	bgt.n	8008924 <_dtoa_r+0xb3c>
 800891c:	9b06      	ldr	r3, [sp, #24]
 800891e:	2b02      	cmp	r3, #2
 8008920:	f73f aecc 	bgt.w	80086bc <_dtoa_r+0x8d4>
 8008924:	465d      	mov	r5, fp
 8008926:	4639      	mov	r1, r7
 8008928:	9804      	ldr	r0, [sp, #16]
 800892a:	f7ff f9cf 	bl	8007ccc <quorem>
 800892e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008932:	f805 8b01 	strb.w	r8, [r5], #1
 8008936:	9a02      	ldr	r2, [sp, #8]
 8008938:	eba5 030b 	sub.w	r3, r5, fp
 800893c:	429a      	cmp	r2, r3
 800893e:	ddb0      	ble.n	80088a2 <_dtoa_r+0xaba>
 8008940:	2300      	movs	r3, #0
 8008942:	220a      	movs	r2, #10
 8008944:	9904      	ldr	r1, [sp, #16]
 8008946:	4620      	mov	r0, r4
 8008948:	f000 f86c 	bl	8008a24 <__multadd>
 800894c:	9004      	str	r0, [sp, #16]
 800894e:	e7ea      	b.n	8008926 <_dtoa_r+0xb3e>
 8008950:	080090b8 	.word	0x080090b8
 8008954:	080090ba 	.word	0x080090ba

08008958 <_localeconv_r>:
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <_localeconv_r+0x14>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6a18      	ldr	r0, [r3, #32]
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <_localeconv_r+0x18>)
 8008960:	2800      	cmp	r0, #0
 8008962:	bf08      	it	eq
 8008964:	4618      	moveq	r0, r3
 8008966:	30f0      	adds	r0, #240	; 0xf0
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20000014 	.word	0x20000014
 8008970:	20000078 	.word	0x20000078

08008974 <memcpy>:
 8008974:	b510      	push	{r4, lr}
 8008976:	1e43      	subs	r3, r0, #1
 8008978:	440a      	add	r2, r1
 800897a:	4291      	cmp	r1, r2
 800897c:	d100      	bne.n	8008980 <memcpy+0xc>
 800897e:	bd10      	pop	{r4, pc}
 8008980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008988:	e7f7      	b.n	800897a <memcpy+0x6>

0800898a <__malloc_lock>:
 800898a:	4770      	bx	lr

0800898c <__malloc_unlock>:
 800898c:	4770      	bx	lr

0800898e <_Balloc>:
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008992:	4604      	mov	r4, r0
 8008994:	460e      	mov	r6, r1
 8008996:	b93d      	cbnz	r5, 80089a8 <_Balloc+0x1a>
 8008998:	2010      	movs	r0, #16
 800899a:	f7fe fdd3 	bl	8007544 <malloc>
 800899e:	6260      	str	r0, [r4, #36]	; 0x24
 80089a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089a4:	6005      	str	r5, [r0, #0]
 80089a6:	60c5      	str	r5, [r0, #12]
 80089a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80089aa:	68eb      	ldr	r3, [r5, #12]
 80089ac:	b183      	cbz	r3, 80089d0 <_Balloc+0x42>
 80089ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089b6:	b9b8      	cbnz	r0, 80089e8 <_Balloc+0x5a>
 80089b8:	2101      	movs	r1, #1
 80089ba:	fa01 f506 	lsl.w	r5, r1, r6
 80089be:	1d6a      	adds	r2, r5, #5
 80089c0:	0092      	lsls	r2, r2, #2
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fabe 	bl	8008f44 <_calloc_r>
 80089c8:	b160      	cbz	r0, 80089e4 <_Balloc+0x56>
 80089ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089ce:	e00e      	b.n	80089ee <_Balloc+0x60>
 80089d0:	2221      	movs	r2, #33	; 0x21
 80089d2:	2104      	movs	r1, #4
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 fab5 	bl	8008f44 <_calloc_r>
 80089da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089dc:	60e8      	str	r0, [r5, #12]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e4      	bne.n	80089ae <_Balloc+0x20>
 80089e4:	2000      	movs	r0, #0
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	6802      	ldr	r2, [r0, #0]
 80089ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80089ee:	2300      	movs	r3, #0
 80089f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089f4:	e7f7      	b.n	80089e6 <_Balloc+0x58>

080089f6 <_Bfree>:
 80089f6:	b570      	push	{r4, r5, r6, lr}
 80089f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80089fa:	4606      	mov	r6, r0
 80089fc:	460d      	mov	r5, r1
 80089fe:	b93c      	cbnz	r4, 8008a10 <_Bfree+0x1a>
 8008a00:	2010      	movs	r0, #16
 8008a02:	f7fe fd9f 	bl	8007544 <malloc>
 8008a06:	6270      	str	r0, [r6, #36]	; 0x24
 8008a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a0c:	6004      	str	r4, [r0, #0]
 8008a0e:	60c4      	str	r4, [r0, #12]
 8008a10:	b13d      	cbz	r5, 8008a22 <_Bfree+0x2c>
 8008a12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a14:	686a      	ldr	r2, [r5, #4]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a1c:	6029      	str	r1, [r5, #0]
 8008a1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a22:	bd70      	pop	{r4, r5, r6, pc}

08008a24 <__multadd>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	690d      	ldr	r5, [r1, #16]
 8008a2a:	461f      	mov	r7, r3
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	460c      	mov	r4, r1
 8008a30:	f101 0c14 	add.w	ip, r1, #20
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8dc 0000 	ldr.w	r0, [ip]
 8008a3a:	b281      	uxth	r1, r0
 8008a3c:	fb02 7101 	mla	r1, r2, r1, r7
 8008a40:	0c0f      	lsrs	r7, r1, #16
 8008a42:	0c00      	lsrs	r0, r0, #16
 8008a44:	fb02 7000 	mla	r0, r2, r0, r7
 8008a48:	b289      	uxth	r1, r1
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a50:	429d      	cmp	r5, r3
 8008a52:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a56:	f84c 1b04 	str.w	r1, [ip], #4
 8008a5a:	dcec      	bgt.n	8008a36 <__multadd+0x12>
 8008a5c:	b1d7      	cbz	r7, 8008a94 <__multadd+0x70>
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dc12      	bgt.n	8008a8a <__multadd+0x66>
 8008a64:	6861      	ldr	r1, [r4, #4]
 8008a66:	4630      	mov	r0, r6
 8008a68:	3101      	adds	r1, #1
 8008a6a:	f7ff ff90 	bl	800898e <_Balloc>
 8008a6e:	6922      	ldr	r2, [r4, #16]
 8008a70:	3202      	adds	r2, #2
 8008a72:	f104 010c 	add.w	r1, r4, #12
 8008a76:	4680      	mov	r8, r0
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	300c      	adds	r0, #12
 8008a7c:	f7ff ff7a 	bl	8008974 <memcpy>
 8008a80:	4621      	mov	r1, r4
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7ff ffb7 	bl	80089f6 <_Bfree>
 8008a88:	4644      	mov	r4, r8
 8008a8a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a8e:	3501      	adds	r5, #1
 8008a90:	615f      	str	r7, [r3, #20]
 8008a92:	6125      	str	r5, [r4, #16]
 8008a94:	4620      	mov	r0, r4
 8008a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a9a <__hi0bits>:
 8008a9a:	0c02      	lsrs	r2, r0, #16
 8008a9c:	0412      	lsls	r2, r2, #16
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	b9b2      	cbnz	r2, 8008ad0 <__hi0bits+0x36>
 8008aa2:	0403      	lsls	r3, r0, #16
 8008aa4:	2010      	movs	r0, #16
 8008aa6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008aaa:	bf04      	itt	eq
 8008aac:	021b      	lsleq	r3, r3, #8
 8008aae:	3008      	addeq	r0, #8
 8008ab0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ab4:	bf04      	itt	eq
 8008ab6:	011b      	lsleq	r3, r3, #4
 8008ab8:	3004      	addeq	r0, #4
 8008aba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008abe:	bf04      	itt	eq
 8008ac0:	009b      	lsleq	r3, r3, #2
 8008ac2:	3002      	addeq	r0, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db06      	blt.n	8008ad6 <__hi0bits+0x3c>
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	d503      	bpl.n	8008ad4 <__hi0bits+0x3a>
 8008acc:	3001      	adds	r0, #1
 8008ace:	4770      	bx	lr
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7e8      	b.n	8008aa6 <__hi0bits+0xc>
 8008ad4:	2020      	movs	r0, #32
 8008ad6:	4770      	bx	lr

08008ad8 <__lo0bits>:
 8008ad8:	6803      	ldr	r3, [r0, #0]
 8008ada:	f013 0207 	ands.w	r2, r3, #7
 8008ade:	4601      	mov	r1, r0
 8008ae0:	d00b      	beq.n	8008afa <__lo0bits+0x22>
 8008ae2:	07da      	lsls	r2, r3, #31
 8008ae4:	d423      	bmi.n	8008b2e <__lo0bits+0x56>
 8008ae6:	0798      	lsls	r0, r3, #30
 8008ae8:	bf49      	itett	mi
 8008aea:	085b      	lsrmi	r3, r3, #1
 8008aec:	089b      	lsrpl	r3, r3, #2
 8008aee:	2001      	movmi	r0, #1
 8008af0:	600b      	strmi	r3, [r1, #0]
 8008af2:	bf5c      	itt	pl
 8008af4:	600b      	strpl	r3, [r1, #0]
 8008af6:	2002      	movpl	r0, #2
 8008af8:	4770      	bx	lr
 8008afa:	b298      	uxth	r0, r3
 8008afc:	b9a8      	cbnz	r0, 8008b2a <__lo0bits+0x52>
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	2010      	movs	r0, #16
 8008b02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b06:	bf04      	itt	eq
 8008b08:	0a1b      	lsreq	r3, r3, #8
 8008b0a:	3008      	addeq	r0, #8
 8008b0c:	071a      	lsls	r2, r3, #28
 8008b0e:	bf04      	itt	eq
 8008b10:	091b      	lsreq	r3, r3, #4
 8008b12:	3004      	addeq	r0, #4
 8008b14:	079a      	lsls	r2, r3, #30
 8008b16:	bf04      	itt	eq
 8008b18:	089b      	lsreq	r3, r3, #2
 8008b1a:	3002      	addeq	r0, #2
 8008b1c:	07da      	lsls	r2, r3, #31
 8008b1e:	d402      	bmi.n	8008b26 <__lo0bits+0x4e>
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	d006      	beq.n	8008b32 <__lo0bits+0x5a>
 8008b24:	3001      	adds	r0, #1
 8008b26:	600b      	str	r3, [r1, #0]
 8008b28:	4770      	bx	lr
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	e7e9      	b.n	8008b02 <__lo0bits+0x2a>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	4770      	bx	lr
 8008b32:	2020      	movs	r0, #32
 8008b34:	4770      	bx	lr

08008b36 <__i2b>:
 8008b36:	b510      	push	{r4, lr}
 8008b38:	460c      	mov	r4, r1
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	f7ff ff27 	bl	800898e <_Balloc>
 8008b40:	2201      	movs	r2, #1
 8008b42:	6144      	str	r4, [r0, #20]
 8008b44:	6102      	str	r2, [r0, #16]
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <__multiply>:
 8008b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	690a      	ldr	r2, [r1, #16]
 8008b50:	6923      	ldr	r3, [r4, #16]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	bfb8      	it	lt
 8008b56:	460b      	movlt	r3, r1
 8008b58:	4688      	mov	r8, r1
 8008b5a:	bfbc      	itt	lt
 8008b5c:	46a0      	movlt	r8, r4
 8008b5e:	461c      	movlt	r4, r3
 8008b60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b70:	eb07 0609 	add.w	r6, r7, r9
 8008b74:	42b3      	cmp	r3, r6
 8008b76:	bfb8      	it	lt
 8008b78:	3101      	addlt	r1, #1
 8008b7a:	f7ff ff08 	bl	800898e <_Balloc>
 8008b7e:	f100 0514 	add.w	r5, r0, #20
 8008b82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008b86:	462b      	mov	r3, r5
 8008b88:	2200      	movs	r2, #0
 8008b8a:	4573      	cmp	r3, lr
 8008b8c:	d316      	bcc.n	8008bbc <__multiply+0x74>
 8008b8e:	f104 0214 	add.w	r2, r4, #20
 8008b92:	f108 0114 	add.w	r1, r8, #20
 8008b96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008b9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	9201      	str	r2, [sp, #4]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d80c      	bhi.n	8008bc2 <__multiply+0x7a>
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	dd03      	ble.n	8008bb4 <__multiply+0x6c>
 8008bac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d05d      	beq.n	8008c70 <__multiply+0x128>
 8008bb4:	6106      	str	r6, [r0, #16]
 8008bb6:	b003      	add	sp, #12
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	f843 2b04 	str.w	r2, [r3], #4
 8008bc0:	e7e3      	b.n	8008b8a <__multiply+0x42>
 8008bc2:	f8b2 b000 	ldrh.w	fp, [r2]
 8008bc6:	f1bb 0f00 	cmp.w	fp, #0
 8008bca:	d023      	beq.n	8008c14 <__multiply+0xcc>
 8008bcc:	4689      	mov	r9, r1
 8008bce:	46ac      	mov	ip, r5
 8008bd0:	f04f 0800 	mov.w	r8, #0
 8008bd4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008bd8:	f8dc a000 	ldr.w	sl, [ip]
 8008bdc:	b2a3      	uxth	r3, r4
 8008bde:	fa1f fa8a 	uxth.w	sl, sl
 8008be2:	fb0b a303 	mla	r3, fp, r3, sl
 8008be6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008bea:	f8dc 4000 	ldr.w	r4, [ip]
 8008bee:	4443      	add	r3, r8
 8008bf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008bf4:	fb0b 840a 	mla	r4, fp, sl, r8
 8008bf8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008bfc:	46e2      	mov	sl, ip
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c04:	454f      	cmp	r7, r9
 8008c06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c0a:	f84a 3b04 	str.w	r3, [sl], #4
 8008c0e:	d82b      	bhi.n	8008c68 <__multiply+0x120>
 8008c10:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c1a:	3204      	adds	r2, #4
 8008c1c:	f1ba 0f00 	cmp.w	sl, #0
 8008c20:	d020      	beq.n	8008c64 <__multiply+0x11c>
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	4689      	mov	r9, r1
 8008c26:	46a8      	mov	r8, r5
 8008c28:	f04f 0b00 	mov.w	fp, #0
 8008c2c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c34:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c38:	445c      	add	r4, fp
 8008c3a:	46c4      	mov	ip, r8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c42:	f84c 3b04 	str.w	r3, [ip], #4
 8008c46:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008c4e:	0c1b      	lsrs	r3, r3, #16
 8008c50:	fb0a b303 	mla	r3, sl, r3, fp
 8008c54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008c58:	454f      	cmp	r7, r9
 8008c5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008c5e:	d805      	bhi.n	8008c6c <__multiply+0x124>
 8008c60:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c64:	3504      	adds	r5, #4
 8008c66:	e79b      	b.n	8008ba0 <__multiply+0x58>
 8008c68:	46d4      	mov	ip, sl
 8008c6a:	e7b3      	b.n	8008bd4 <__multiply+0x8c>
 8008c6c:	46e0      	mov	r8, ip
 8008c6e:	e7dd      	b.n	8008c2c <__multiply+0xe4>
 8008c70:	3e01      	subs	r6, #1
 8008c72:	e799      	b.n	8008ba8 <__multiply+0x60>

08008c74 <__pow5mult>:
 8008c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c78:	4615      	mov	r5, r2
 8008c7a:	f012 0203 	ands.w	r2, r2, #3
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	d007      	beq.n	8008c94 <__pow5mult+0x20>
 8008c84:	3a01      	subs	r2, #1
 8008c86:	4c21      	ldr	r4, [pc, #132]	; (8008d0c <__pow5mult+0x98>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c8e:	f7ff fec9 	bl	8008a24 <__multadd>
 8008c92:	4607      	mov	r7, r0
 8008c94:	10ad      	asrs	r5, r5, #2
 8008c96:	d035      	beq.n	8008d04 <__pow5mult+0x90>
 8008c98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c9a:	b93c      	cbnz	r4, 8008cac <__pow5mult+0x38>
 8008c9c:	2010      	movs	r0, #16
 8008c9e:	f7fe fc51 	bl	8007544 <malloc>
 8008ca2:	6270      	str	r0, [r6, #36]	; 0x24
 8008ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ca8:	6004      	str	r4, [r0, #0]
 8008caa:	60c4      	str	r4, [r0, #12]
 8008cac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cb4:	b94c      	cbnz	r4, 8008cca <__pow5mult+0x56>
 8008cb6:	f240 2171 	movw	r1, #625	; 0x271
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ff3b 	bl	8008b36 <__i2b>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	07eb      	lsls	r3, r5, #31
 8008cd0:	d50a      	bpl.n	8008ce8 <__pow5mult+0x74>
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7ff ff36 	bl	8008b48 <__multiply>
 8008cdc:	4639      	mov	r1, r7
 8008cde:	4681      	mov	r9, r0
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7ff fe88 	bl	80089f6 <_Bfree>
 8008ce6:	464f      	mov	r7, r9
 8008ce8:	106d      	asrs	r5, r5, #1
 8008cea:	d00b      	beq.n	8008d04 <__pow5mult+0x90>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	b938      	cbnz	r0, 8008d00 <__pow5mult+0x8c>
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7ff ff27 	bl	8008b48 <__multiply>
 8008cfa:	6020      	str	r0, [r4, #0]
 8008cfc:	f8c0 8000 	str.w	r8, [r0]
 8008d00:	4604      	mov	r4, r0
 8008d02:	e7e4      	b.n	8008cce <__pow5mult+0x5a>
 8008d04:	4638      	mov	r0, r7
 8008d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	bf00      	nop
 8008d0c:	080091b8 	.word	0x080091b8

08008d10 <__lshift>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	460c      	mov	r4, r1
 8008d16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	6849      	ldr	r1, [r1, #4]
 8008d1e:	eb0a 0903 	add.w	r9, sl, r3
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	4607      	mov	r7, r0
 8008d26:	4616      	mov	r6, r2
 8008d28:	f109 0501 	add.w	r5, r9, #1
 8008d2c:	42ab      	cmp	r3, r5
 8008d2e:	db32      	blt.n	8008d96 <__lshift+0x86>
 8008d30:	4638      	mov	r0, r7
 8008d32:	f7ff fe2c 	bl	800898e <_Balloc>
 8008d36:	2300      	movs	r3, #0
 8008d38:	4680      	mov	r8, r0
 8008d3a:	f100 0114 	add.w	r1, r0, #20
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4553      	cmp	r3, sl
 8008d42:	db2b      	blt.n	8008d9c <__lshift+0x8c>
 8008d44:	6920      	ldr	r0, [r4, #16]
 8008d46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d4a:	f104 0314 	add.w	r3, r4, #20
 8008d4e:	f016 021f 	ands.w	r2, r6, #31
 8008d52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d5a:	d025      	beq.n	8008da8 <__lshift+0x98>
 8008d5c:	f1c2 0e20 	rsb	lr, r2, #32
 8008d60:	2000      	movs	r0, #0
 8008d62:	681e      	ldr	r6, [r3, #0]
 8008d64:	468a      	mov	sl, r1
 8008d66:	4096      	lsls	r6, r2
 8008d68:	4330      	orrs	r0, r6
 8008d6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008d72:	459c      	cmp	ip, r3
 8008d74:	fa20 f00e 	lsr.w	r0, r0, lr
 8008d78:	d814      	bhi.n	8008da4 <__lshift+0x94>
 8008d7a:	6048      	str	r0, [r1, #4]
 8008d7c:	b108      	cbz	r0, 8008d82 <__lshift+0x72>
 8008d7e:	f109 0502 	add.w	r5, r9, #2
 8008d82:	3d01      	subs	r5, #1
 8008d84:	4638      	mov	r0, r7
 8008d86:	f8c8 5010 	str.w	r5, [r8, #16]
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	f7ff fe33 	bl	80089f6 <_Bfree>
 8008d90:	4640      	mov	r0, r8
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	3101      	adds	r1, #1
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	e7c7      	b.n	8008d2c <__lshift+0x1c>
 8008d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008da0:	3301      	adds	r3, #1
 8008da2:	e7cd      	b.n	8008d40 <__lshift+0x30>
 8008da4:	4651      	mov	r1, sl
 8008da6:	e7dc      	b.n	8008d62 <__lshift+0x52>
 8008da8:	3904      	subs	r1, #4
 8008daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dae:	f841 2f04 	str.w	r2, [r1, #4]!
 8008db2:	459c      	cmp	ip, r3
 8008db4:	d8f9      	bhi.n	8008daa <__lshift+0x9a>
 8008db6:	e7e4      	b.n	8008d82 <__lshift+0x72>

08008db8 <__mcmp>:
 8008db8:	6903      	ldr	r3, [r0, #16]
 8008dba:	690a      	ldr	r2, [r1, #16]
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	b530      	push	{r4, r5, lr}
 8008dc0:	d10c      	bne.n	8008ddc <__mcmp+0x24>
 8008dc2:	0092      	lsls	r2, r2, #2
 8008dc4:	3014      	adds	r0, #20
 8008dc6:	3114      	adds	r1, #20
 8008dc8:	1884      	adds	r4, r0, r2
 8008dca:	4411      	add	r1, r2
 8008dcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dd4:	4295      	cmp	r5, r2
 8008dd6:	d003      	beq.n	8008de0 <__mcmp+0x28>
 8008dd8:	d305      	bcc.n	8008de6 <__mcmp+0x2e>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4618      	mov	r0, r3
 8008dde:	bd30      	pop	{r4, r5, pc}
 8008de0:	42a0      	cmp	r0, r4
 8008de2:	d3f3      	bcc.n	8008dcc <__mcmp+0x14>
 8008de4:	e7fa      	b.n	8008ddc <__mcmp+0x24>
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dea:	e7f7      	b.n	8008ddc <__mcmp+0x24>

08008dec <__mdiff>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	460d      	mov	r5, r1
 8008df2:	4607      	mov	r7, r0
 8008df4:	4611      	mov	r1, r2
 8008df6:	4628      	mov	r0, r5
 8008df8:	4614      	mov	r4, r2
 8008dfa:	f7ff ffdd 	bl	8008db8 <__mcmp>
 8008dfe:	1e06      	subs	r6, r0, #0
 8008e00:	d108      	bne.n	8008e14 <__mdiff+0x28>
 8008e02:	4631      	mov	r1, r6
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff fdc2 	bl	800898e <_Balloc>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e14:	bfa4      	itt	ge
 8008e16:	4623      	movge	r3, r4
 8008e18:	462c      	movge	r4, r5
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	6861      	ldr	r1, [r4, #4]
 8008e1e:	bfa6      	itte	ge
 8008e20:	461d      	movge	r5, r3
 8008e22:	2600      	movge	r6, #0
 8008e24:	2601      	movlt	r6, #1
 8008e26:	f7ff fdb2 	bl	800898e <_Balloc>
 8008e2a:	692b      	ldr	r3, [r5, #16]
 8008e2c:	60c6      	str	r6, [r0, #12]
 8008e2e:	6926      	ldr	r6, [r4, #16]
 8008e30:	f105 0914 	add.w	r9, r5, #20
 8008e34:	f104 0214 	add.w	r2, r4, #20
 8008e38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008e40:	f100 0514 	add.w	r5, r0, #20
 8008e44:	f04f 0e00 	mov.w	lr, #0
 8008e48:	f852 ab04 	ldr.w	sl, [r2], #4
 8008e4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e50:	fa1e f18a 	uxtah	r1, lr, sl
 8008e54:	b2a3      	uxth	r3, r4
 8008e56:	1ac9      	subs	r1, r1, r3
 8008e58:	0c23      	lsrs	r3, r4, #16
 8008e5a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008e5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e62:	b289      	uxth	r1, r1
 8008e64:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008e68:	45c8      	cmp	r8, r9
 8008e6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e6e:	4694      	mov	ip, r2
 8008e70:	f845 3b04 	str.w	r3, [r5], #4
 8008e74:	d8e8      	bhi.n	8008e48 <__mdiff+0x5c>
 8008e76:	45bc      	cmp	ip, r7
 8008e78:	d304      	bcc.n	8008e84 <__mdiff+0x98>
 8008e7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008e7e:	b183      	cbz	r3, 8008ea2 <__mdiff+0xb6>
 8008e80:	6106      	str	r6, [r0, #16]
 8008e82:	e7c5      	b.n	8008e10 <__mdiff+0x24>
 8008e84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e88:	fa1e f381 	uxtah	r3, lr, r1
 8008e8c:	141a      	asrs	r2, r3, #16
 8008e8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e98:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008e9c:	f845 3b04 	str.w	r3, [r5], #4
 8008ea0:	e7e9      	b.n	8008e76 <__mdiff+0x8a>
 8008ea2:	3e01      	subs	r6, #1
 8008ea4:	e7e9      	b.n	8008e7a <__mdiff+0x8e>

08008ea6 <__d2b>:
 8008ea6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	2101      	movs	r1, #1
 8008eae:	ec59 8b10 	vmov	r8, r9, d0
 8008eb2:	4615      	mov	r5, r2
 8008eb4:	f7ff fd6b 	bl	800898e <_Balloc>
 8008eb8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ec2:	bb34      	cbnz	r4, 8008f12 <__d2b+0x6c>
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	f1b8 0300 	subs.w	r3, r8, #0
 8008eca:	d027      	beq.n	8008f1c <__d2b+0x76>
 8008ecc:	a802      	add	r0, sp, #8
 8008ece:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008ed2:	f7ff fe01 	bl	8008ad8 <__lo0bits>
 8008ed6:	9900      	ldr	r1, [sp, #0]
 8008ed8:	b1f0      	cbz	r0, 8008f18 <__d2b+0x72>
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	f1c0 0320 	rsb	r3, r0, #32
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	40c2      	lsrs	r2, r0
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	9201      	str	r2, [sp, #4]
 8008eec:	9b01      	ldr	r3, [sp, #4]
 8008eee:	61bb      	str	r3, [r7, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bf14      	ite	ne
 8008ef4:	2102      	movne	r1, #2
 8008ef6:	2101      	moveq	r1, #1
 8008ef8:	6139      	str	r1, [r7, #16]
 8008efa:	b1c4      	cbz	r4, 8008f2e <__d2b+0x88>
 8008efc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f00:	4404      	add	r4, r0
 8008f02:	6034      	str	r4, [r6, #0]
 8008f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f08:	6028      	str	r0, [r5, #0]
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	b003      	add	sp, #12
 8008f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f16:	e7d5      	b.n	8008ec4 <__d2b+0x1e>
 8008f18:	6179      	str	r1, [r7, #20]
 8008f1a:	e7e7      	b.n	8008eec <__d2b+0x46>
 8008f1c:	a801      	add	r0, sp, #4
 8008f1e:	f7ff fddb 	bl	8008ad8 <__lo0bits>
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	2101      	movs	r1, #1
 8008f28:	6139      	str	r1, [r7, #16]
 8008f2a:	3020      	adds	r0, #32
 8008f2c:	e7e5      	b.n	8008efa <__d2b+0x54>
 8008f2e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f36:	6030      	str	r0, [r6, #0]
 8008f38:	6918      	ldr	r0, [r3, #16]
 8008f3a:	f7ff fdae 	bl	8008a9a <__hi0bits>
 8008f3e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f42:	e7e1      	b.n	8008f08 <__d2b+0x62>

08008f44 <_calloc_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	fb02 f401 	mul.w	r4, r2, r1
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	f7fe fb0a 	bl	8007564 <_malloc_r>
 8008f50:	4605      	mov	r5, r0
 8008f52:	b118      	cbz	r0, 8008f5c <_calloc_r+0x18>
 8008f54:	4622      	mov	r2, r4
 8008f56:	2100      	movs	r1, #0
 8008f58:	f7fe fafc 	bl	8007554 <memset>
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}

08008f60 <__ascii_mbtowc>:
 8008f60:	b082      	sub	sp, #8
 8008f62:	b901      	cbnz	r1, 8008f66 <__ascii_mbtowc+0x6>
 8008f64:	a901      	add	r1, sp, #4
 8008f66:	b142      	cbz	r2, 8008f7a <__ascii_mbtowc+0x1a>
 8008f68:	b14b      	cbz	r3, 8008f7e <__ascii_mbtowc+0x1e>
 8008f6a:	7813      	ldrb	r3, [r2, #0]
 8008f6c:	600b      	str	r3, [r1, #0]
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	1c10      	adds	r0, r2, #0
 8008f72:	bf18      	it	ne
 8008f74:	2001      	movne	r0, #1
 8008f76:	b002      	add	sp, #8
 8008f78:	4770      	bx	lr
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	e7fb      	b.n	8008f76 <__ascii_mbtowc+0x16>
 8008f7e:	f06f 0001 	mvn.w	r0, #1
 8008f82:	e7f8      	b.n	8008f76 <__ascii_mbtowc+0x16>

08008f84 <__ascii_wctomb>:
 8008f84:	b149      	cbz	r1, 8008f9a <__ascii_wctomb+0x16>
 8008f86:	2aff      	cmp	r2, #255	; 0xff
 8008f88:	bf85      	ittet	hi
 8008f8a:	238a      	movhi	r3, #138	; 0x8a
 8008f8c:	6003      	strhi	r3, [r0, #0]
 8008f8e:	700a      	strbls	r2, [r1, #0]
 8008f90:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f94:	bf98      	it	ls
 8008f96:	2001      	movls	r0, #1
 8008f98:	4770      	bx	lr
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4770      	bx	lr
	...

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
