
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800dd70  0800dd70  0001dd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e440  0800e440  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800e440  0800e440  0001e440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e448  0800e448  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e448  0800e448  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e44c  0800e44c  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800e450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031e0  20000238  0800e688  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003418  0800e688  00023418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018706  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003651  00000000  00000000  0003896e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c8  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  0003d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247de  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140d5  00000000  00000000  000633e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7bcb  00000000  00000000  000774bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006884  00000000  00000000  0014f104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd58 	.word	0x0800dd58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800dd58 	.word	0x0800dd58

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_HTTP_ParseHeader>:
#define CHECK_CONNECTION(a1,a2) arg=(NET_GetIndexForPattern(a2)!=-1)?false:true
#define IF_GET(arg) if(strcmp(req,arg)==0)
#define OR_GET(arg) else if(strcmp(req,arg)==0)

char* _HTTP_ParseHeader(char *response, char *contentType, uint32_t length,
		char *connection) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	__resetResponse();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	e007      	b.n	8000eec <_HTTP_ParseHeader+0x24>
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ef2:	dbf3      	blt.n	8000edc <_HTTP_ParseHeader+0x14>
	__resetLine();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	e007      	b.n	8000f0a <_HTTP_ParseHeader+0x42>
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	3301      	adds	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2b63      	cmp	r3, #99	; 0x63
 8000f0e:	ddf4      	ble.n	8000efa <_HTTP_ParseHeader+0x32>

	sprintf(_line, "HTTP/1.1 %s\r\n", response);
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	492b      	ldr	r1, [pc, #172]	; (8000fc0 <_HTTP_ParseHeader+0xf8>)
 8000f14:	4829      	ldr	r0, [pc, #164]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f16:	f00b fb25 	bl	800c564 <siprintf>
	strcpy(_response, _line);
 8000f1a:	4928      	ldr	r1, [pc, #160]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f1c:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f1e:	f00b fb50 	bl	800c5c2 <strcpy>
	__resetLine();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e007      	b.n	8000f38 <_HTTP_ParseHeader+0x70>
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b63      	cmp	r3, #99	; 0x63
 8000f3c:	ddf4      	ble.n	8000f28 <_HTTP_ParseHeader+0x60>

	sprintf(_line, "Content-Type: %s\r\n", contentType);
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4920      	ldr	r1, [pc, #128]	; (8000fc4 <_HTTP_ParseHeader+0xfc>)
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f44:	f00b fb0e 	bl	800c564 <siprintf>
	strcat(_response, _line);
 8000f48:	491c      	ldr	r1, [pc, #112]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f4a:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f4c:	f00b fb2a 	bl	800c5a4 <strcat>
	__resetLine();
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	e007      	b.n	8000f66 <_HTTP_ParseHeader+0x9e>
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b63      	cmp	r3, #99	; 0x63
 8000f6a:	ddf4      	ble.n	8000f56 <_HTTP_ParseHeader+0x8e>

	sprintf(_line, "Content-Lenght: %ld\r\n", length);
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <_HTTP_ParseHeader+0x100>)
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f72:	f00b faf7 	bl	800c564 <siprintf>
	strcat(_response, _line);
 8000f76:	4911      	ldr	r1, [pc, #68]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f7a:	f00b fb13 	bl	800c5a4 <strcat>
	__resetLine();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e007      	b.n	8000f94 <_HTTP_ParseHeader+0xcc>
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b63      	cmp	r3, #99	; 0x63
 8000f98:	ddf4      	ble.n	8000f84 <_HTTP_ParseHeader+0xbc>

	sprintf(_line, "Connection: %s\r\n\r\n", connection);
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	490b      	ldr	r1, [pc, #44]	; (8000fcc <_HTTP_ParseHeader+0x104>)
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000fa0:	f00b fae0 	bl	800c564 <siprintf>
	strcat(_response, _line);
 8000fa4:	4905      	ldr	r1, [pc, #20]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000fa8:	f00b fafc 	bl	800c5a4 <strcat>

	return (char*) _response;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002e4 	.word	0x200002e4
 8000fbc:	2000026c 	.word	0x2000026c
 8000fc0:	0800dd70 	.word	0x0800dd70
 8000fc4:	0800dd80 	.word	0x0800dd80
 8000fc8:	0800dd94 	.word	0x0800dd94
 8000fcc:	0800ddac 	.word	0x0800ddac

08000fd0 <_HTTP_GetRequestUrl>:

char* _HTTP_GetRequestUrl(char *request) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	int cursor = NET_GetIndexForPattern(GET_FILE_PATTERN);
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <_HTTP_GetRequestUrl+0x6c>)
 8000fda:	f001 fe67 	bl	8002cac <NET_GetIndexForPattern>
 8000fde:	6178      	str	r0, [r7, #20]
	int index = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]

	__resetRequest();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e007      	b.n	8000ffa <_HTTP_GetRequestUrl+0x2a>
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <_HTTP_GetRequestUrl+0x70>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b13      	cmp	r3, #19
 8000ffe:	ddf4      	ble.n	8000fea <_HTTP_GetRequestUrl+0x1a>
	if (cursor != -1) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d014      	beq.n	8001032 <_HTTP_GetRequestUrl+0x62>
		while (request[cursor] != ' ') {
 8001008:	e00b      	b.n	8001022 <_HTTP_GetRequestUrl+0x52>
			_request[index++] = request[cursor++];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	617a      	str	r2, [r7, #20]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	441a      	add	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1c59      	adds	r1, r3, #1
 800101a:	6139      	str	r1, [r7, #16]
 800101c:	7811      	ldrb	r1, [r2, #0]
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <_HTTP_GetRequestUrl+0x70>)
 8001020:	54d1      	strb	r1, [r2, r3]
		while (request[cursor] != ' ') {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b20      	cmp	r3, #32
 800102c:	d1ed      	bne.n	800100a <_HTTP_GetRequestUrl+0x3a>
		}
		return (char*) _request;
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <_HTTP_GetRequestUrl+0x70>)
 8001030:	e000      	b.n	8001034 <_HTTP_GetRequestUrl+0x64>
	}
	return NULL;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	0800ddc0 	.word	0x0800ddc0
 8001040:	200002d0 	.word	0x200002d0

08001044 <HTTP_HandleRequest>:

void HTTP_HandleRequest(char *request, char connID) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	char *req = _HTTP_GetRequestUrl(request);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffbd 	bl	8000fd0 <_HTTP_GetRequestUrl>
 8001056:	6178      	str	r0, [r7, #20]
	char *header;
	char *file;
	uint32_t size;

	IF_GET("/") {
 8001058:	492d      	ldr	r1, [pc, #180]	; (8001110 <HTTP_HandleRequest+0xcc>)
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff f8b8 	bl	80001d0 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11c      	bne.n	80010a0 <HTTP_HandleRequest+0x5c>
		file = SD_ReadFile("index.htm", &size);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4619      	mov	r1, r3
 800106c:	4829      	ldr	r0, [pc, #164]	; (8001114 <HTTP_HandleRequest+0xd0>)
 800106e:	f002 fe4d 	bl	8003d0c <SD_ReadFile>
 8001072:	60f8      	str	r0, [r7, #12]
		header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_CLOSE);
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HTTP_HandleRequest+0xd4>)
 8001078:	4928      	ldr	r1, [pc, #160]	; (800111c <HTTP_HandleRequest+0xd8>)
 800107a:	4829      	ldr	r0, [pc, #164]	; (8001120 <HTTP_HandleRequest+0xdc>)
 800107c:	f7ff ff24 	bl	8000ec8 <_HTTP_ParseHeader>
 8001080:	6138      	str	r0, [r7, #16]

		NET_SendTCPData(connID, header);
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	6939      	ldr	r1, [r7, #16]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 f956 	bl	8003338 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f951 	bl	8003338 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f9ad 	bl	80033f8 <NET_CloseConnSignal>
		/* nieobslugiwane zadanie */
		header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, 0, CN_CLOSE);
		NET_SendTCPData(connID, header);
		NET_CloseConnSignal(connID);
	}
}
 800109e:	e033      	b.n	8001108 <HTTP_HandleRequest+0xc4>
	} OR_GET("/now") {
 80010a0:	4920      	ldr	r1, [pc, #128]	; (8001124 <HTTP_HandleRequest+0xe0>)
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff f894 	bl	80001d0 <strcmp>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d11c      	bne.n	80010e8 <HTTP_HandleRequest+0xa4>
		file = SD_ReadFile("wynik.jso", &size);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <HTTP_HandleRequest+0xe4>)
 80010b6:	f002 fe29 	bl	8003d0c <SD_ReadFile>
 80010ba:	60f8      	str	r0, [r7, #12]
		header = _HTTP_ParseHeader(RSP_OK, CT_JSON, size, CN_CLOSE);
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HTTP_HandleRequest+0xd4>)
 80010c0:	491a      	ldr	r1, [pc, #104]	; (800112c <HTTP_HandleRequest+0xe8>)
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <HTTP_HandleRequest+0xdc>)
 80010c4:	f7ff ff00 	bl	8000ec8 <_HTTP_ParseHeader>
 80010c8:	6138      	str	r0, [r7, #16]
		NET_SendTCPData(connID, header);
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f932 	bl	8003338 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 f92d 	bl	8003338 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 f989 	bl	80033f8 <NET_CloseConnSignal>
}
 80010e6:	e00f      	b.n	8001108 <HTTP_HandleRequest+0xc4>
		header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, 0, CN_CLOSE);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HTTP_HandleRequest+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	490b      	ldr	r1, [pc, #44]	; (800111c <HTTP_HandleRequest+0xd8>)
 80010ee:	4810      	ldr	r0, [pc, #64]	; (8001130 <HTTP_HandleRequest+0xec>)
 80010f0:	f7ff feea 	bl	8000ec8 <_HTTP_ParseHeader>
 80010f4:	6138      	str	r0, [r7, #16]
		NET_SendTCPData(connID, header);
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	6939      	ldr	r1, [r7, #16]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 f91c 	bl	8003338 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f978 	bl	80033f8 <NET_CloseConnSignal>
}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800ddc8 	.word	0x0800ddc8
 8001114:	0800ddcc 	.word	0x0800ddcc
 8001118:	0800ddd8 	.word	0x0800ddd8
 800111c:	0800dde0 	.word	0x0800dde0
 8001120:	0800ddec 	.word	0x0800ddec
 8001124:	0800ddf4 	.word	0x0800ddf4
 8001128:	0800ddfc 	.word	0x0800ddfc
 800112c:	0800de08 	.word	0x0800de08
 8001130:	0800de14 	.word	0x0800de14

08001134 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <_LCD_SetRowOffsets+0x3c>)
 8001148:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_LCD_SetRowOffsets+0x3c>)
 8001150:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <_LCD_SetRowOffsets+0x3c>)
 8001158:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <_LCD_SetRowOffsets+0x3c>)
 8001160:	70da      	strb	r2, [r3, #3]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000484 	.word	0x20000484

08001174 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <_LCD_EnableSignal+0x38>)
 800117e:	f007 f8e3 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f006 fdd8 	bl	8007d38 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2140      	movs	r1, #64	; 0x40
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <_LCD_EnableSignal+0x38>)
 800118e:	f007 f8db 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f006 fdd0 	bl	8007d38 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <_LCD_EnableSignal+0x38>)
 800119e:	f007 f8d3 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f006 fdc8 	bl	8007d38 <HAL_Delay>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000

080011b0 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e012      	b.n	80011e6 <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _readyData[i],
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <_LCD_WriteData+0x48>)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	fa42 f303 	asr.w	r3, r2, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _readyData[i],
 80011d8:	461a      	mov	r2, r3
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <_LCD_WriteData+0x4c>)
 80011dc:	f007 f8b4 	bl	8008348 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	dde9      	ble.n	80011c0 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 80011ec:	f7ff ffc2 	bl	8001174 <_LCD_EnableSignal>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000478 	.word	0x20000478
 80011fc:	40021000 	.word	0x40021000

08001200 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	461a      	mov	r2, r3
 8001214:	2110      	movs	r1, #16
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <_LCD_SendByteWithState+0x44>)
 8001218:	f007 f896 	bl	8008348 <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <_LCD_SendByteWithState+0x44>)
 8001222:	f007 f891 	bl	8008348 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ffbf 	bl	80011b0 <_LCD_WriteData>
	_LCD_WriteData(value);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffbb 	bl	80011b0 <_LCD_WriteData>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffd2 	bl	8001200 <_LCD_SendByteWithState>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	4613      	mov	r3, r2
 8001272:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2101      	movs	r1, #1
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffc1 	bl	8001200 <_LCD_SendByteWithState>

	if (moveCursor) {
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d021      	beq.n	80012c8 <_LCD_SendData+0x64>
		++_currentCol;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <_LCD_SendData+0x6c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_LCD_SendData+0x6c>)
 800128e:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <_LCD_SendData+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b13      	cmp	r3, #19
 8001296:	d917      	bls.n	80012c8 <_LCD_SendData+0x64>
			_currentCol = 0;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <_LCD_SendData+0x6c>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <_LCD_SendData+0x70>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <_LCD_SendData+0x70>)
 80012a8:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <_LCD_SendData+0x70>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b03      	cmp	r3, #3
 80012b0:	d902      	bls.n	80012b8 <_LCD_SendData+0x54>
				_currentRow = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_LCD_SendData+0x70>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <_LCD_SendData+0x6c>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <_LCD_SendData+0x70>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f000 f900 	bl	80014c8 <LCD_SetCursor>
		}
	}
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000489 	.word	0x20000489
 80012d4:	20000474 	.word	0x20000474

080012d8 <LCD_Init>:

void LCD_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
	/* Piny danych */
	_readyData[0] = D4_PIN;
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <LCD_Init+0x150>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	801a      	strh	r2, [r3, #0]
	_readyData[1] = D5_PIN;
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <LCD_Init+0x150>)
 80012e6:	2202      	movs	r2, #2
 80012e8:	805a      	strh	r2, [r3, #2]
	_readyData[2] = D6_PIN;
 80012ea:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <LCD_Init+0x150>)
 80012ec:	2204      	movs	r2, #4
 80012ee:	809a      	strh	r2, [r3, #4]
	_readyData[3] = D7_PIN;
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <LCD_Init+0x150>)
 80012f2:	2208      	movs	r2, #8
 80012f4:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <LCD_Init+0x154>)
 80012f8:	2208      	movs	r2, #8
 80012fa:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 80012fc:	f000 f8ba 	bl	8001474 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 8001300:	2354      	movs	r3, #84	; 0x54
 8001302:	2214      	movs	r2, #20
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ff14 	bl	8001134 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f006 fd13 	bl	8007d38 <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2110      	movs	r1, #16
 8001316:	4846      	ldr	r0, [pc, #280]	; (8001430 <LCD_Init+0x158>)
 8001318:	f007 f816 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	4843      	ldr	r0, [pc, #268]	; (8001430 <LCD_Init+0x158>)
 8001322:	f007 f811 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	4841      	ldr	r0, [pc, #260]	; (8001430 <LCD_Init+0x158>)
 800132c:	f007 f80c 	bl	8008348 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 8001330:	2003      	movs	r0, #3
 8001332:	f7ff ff3d 	bl	80011b0 <_LCD_WriteData>
	HAL_Delay(5);
 8001336:	2005      	movs	r0, #5
 8001338:	f006 fcfe 	bl	8007d38 <HAL_Delay>

	_LCD_WriteData(0x03);
 800133c:	2003      	movs	r0, #3
 800133e:	f7ff ff37 	bl	80011b0 <_LCD_WriteData>
	HAL_Delay(5);
 8001342:	2005      	movs	r0, #5
 8001344:	f006 fcf8 	bl	8007d38 <HAL_Delay>

	_LCD_WriteData(0x03);
 8001348:	2003      	movs	r0, #3
 800134a:	f7ff ff31 	bl	80011b0 <_LCD_WriteData>
	HAL_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f006 fcf2 	bl	8007d38 <HAL_Delay>

	_LCD_WriteData(0x02);
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff ff2b 	bl	80011b0 <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <LCD_Init+0x154>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f043 0320 	orr.w	r3, r3, #32
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff6f 	bl	8001248 <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <LCD_Init+0x15c>)
 800136c:	2204      	movs	r2, #4
 800136e:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8001370:	f000 f8da 	bl	8001528 <LCD_DisplayOn>
	LCD_ClearScreen();
 8001374:	f000 f896 	bl	80014a4 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <LCD_Init+0x160>)
 800137a:	2202      	movs	r2, #2
 800137c:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <LCD_Init+0x160>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <_LCD_SendCommand>

	_currentRow = 0;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <LCD_Init+0x164>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <LCD_Init+0x168>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 800139a:	482a      	ldr	r0, [pc, #168]	; (8001444 <LCD_Init+0x16c>)
 800139c:	f000 f956 	bl	800164c <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <LCD_Init+0x170>)
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013aa:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4619      	mov	r1, r3
 80013b4:	2007      	movs	r0, #7
 80013b6:	f000 fb59 	bl	8001a6c <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 80013ba:	4a24      	ldr	r2, [pc, #144]	; (800144c <LCD_Init+0x174>)
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c4:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	4619      	mov	r1, r3
 80013ce:	2006      	movs	r0, #6
 80013d0:	f000 fb4c 	bl	8001a6c <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 80013d4:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <LCD_Init+0x178>)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013de:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	2005      	movs	r0, #5
 80013ea:	f000 fb3f 	bl	8001a6c <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <LCD_Init+0x17c>)
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	2004      	movs	r0, #4
 8001404:	f000 fb32 	bl	8001a6c <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <LCD_Init+0x180>)
 800140a:	463b      	mov	r3, r7
 800140c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001410:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	2003      	movs	r0, #3
 800141a:	f000 fb27 	bl	8001a6c <LCD_DefineCustomChar>
}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000478 	.word	0x20000478
 800142c:	20000480 	.word	0x20000480
 8001430:	40021000 	.word	0x40021000
 8001434:	20000488 	.word	0x20000488
 8001438:	2000048a 	.word	0x2000048a
 800143c:	20000474 	.word	0x20000474
 8001440:	20000489 	.word	0x20000489
 8001444:	0800de24 	.word	0x0800de24
 8001448:	0800de30 	.word	0x0800de30
 800144c:	0800de38 	.word	0x0800de38
 8001450:	0800de40 	.word	0x0800de40
 8001454:	0800de48 	.word	0x0800de48
 8001458:	0800de50 	.word	0x0800de50

0800145c <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 8001460:	f000 f808 	bl	8001474 <LCD_BackgroundOn>
	ResetTIM(3);
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <LCD_WakeScreen+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20003314 	.word	0x20003314

08001474 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <LCD_BackgroundOn+0x14>)
 8001480:	f006 ff62 	bl	8008348 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40020800 	.word	0x40020800

0800148c <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <LCD_BackgroundOff+0x14>)
 8001498:	f006 ff56 	bl	8008348 <HAL_GPIO_WritePin>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40020800 	.word	0x40020800

080014a4 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fecd 	bl	8001248 <_LCD_SendCommand>
	LCD_ResetCursor();
 80014ae:	f000 f802 	bl	80014b6 <LCD_ResetCursor>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
	LCD_SetCursor(0, 0);
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 f803 	bl	80014c8 <LCD_SetCursor>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d901      	bls.n	80014e2 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 80014de:	2303      	movs	r3, #3
 80014e0:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b13      	cmp	r3, #19
 80014e6:	d901      	bls.n	80014ec <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 80014e8:	2313      	movs	r3, #19
 80014ea:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LCD_SetCursor+0x54>)
 80014f0:	5cd2      	ldrb	r2, [r2, r3]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fea0 	bl	8001248 <_LCD_SendCommand>
	_currentRow = row;
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <LCD_SetCursor+0x58>)
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <LCD_SetCursor+0x5c>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	7013      	strb	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000484 	.word	0x20000484
 8001520:	20000474 	.word	0x20000474
 8001524:	20000489 	.word	0x20000489

08001528 <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <LCD_DisplayOn+0x28>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LCD_DisplayOn+0x28>)
 8001538:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <LCD_DisplayOn+0x28>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe7f 	bl	8001248 <_LCD_SendCommand>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000488 	.word	0x20000488

08001554 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <LCD_DisableCursor+0x28>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	f023 0302 	bic.w	r3, r3, #2
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <LCD_DisableCursor+0x28>)
 8001564:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <LCD_DisableCursor+0x28>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe69 	bl	8001248 <_LCD_SendCommand>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000488 	.word	0x20000488

08001580 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <LCD_EnableCursor+0x28>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <LCD_EnableCursor+0x28>)
 8001590:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <LCD_EnableCursor+0x28>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fe53 	bl	8001248 <_LCD_SendCommand>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000488 	.word	0x20000488

080015ac <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <LCD_DisableBlink+0x28>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <LCD_DisableBlink+0x28>)
 80015bc:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <LCD_DisableBlink+0x28>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe3d 	bl	8001248 <_LCD_SendCommand>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000488 	.word	0x20000488

080015d8 <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LCD_EnableBlink+0x28>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <LCD_EnableBlink+0x28>)
 80015e8:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LCD_EnableBlink+0x28>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe27 	bl	8001248 <_LCD_SendCommand>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000488 	.word	0x20000488

08001604 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d018      	beq.n	8001644 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7fe fde4 	bl	80001e4 <strlen>
 800161c:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e00a      	b.n	800163a <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe18 	bl	8001264 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	429a      	cmp	r2, r3
 8001640:	d8f0      	bhi.n	8001624 <LCD_Print+0x20>
 8001642:	e000      	b.n	8001646 <LCD_Print+0x42>
		return;
 8001644:	bf00      	nop
	}
}
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe fdc5 	bl	80001e4 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b14      	cmp	r3, #20
 8001662:	dc14      	bgt.n	800168e <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f1c3 0314 	rsb	r3, r3, #20
 800166a:	0fda      	lsrs	r2, r3, #31
 800166c:	4413      	add	r3, r2
 800166e:	105b      	asrs	r3, r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <LCD_PrintCentered+0x4c>)
 8001674:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LCD_PrintCentered+0x4c>)
 8001678:	781a      	ldrb	r2, [r3, #0]
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <LCD_PrintCentered+0x50>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	4610      	mov	r0, r2
 8001682:	f7ff ff21 	bl	80014c8 <LCD_SetCursor>
	LCD_Print(str);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffbc 	bl	8001604 <LCD_Print>
 800168c:	e000      	b.n	8001690 <LCD_PrintCentered+0x44>
		return;
 800168e:	bf00      	nop
}
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000489 	.word	0x20000489
 800169c:	20000474 	.word	0x20000474

080016a0 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 8104 	beq.w	80018ba <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d50e      	bpl.n	80016e4 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff4c 	bl	8000568 <__aeabi_f2d>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	f107 0014 	add.w	r0, r7, #20
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	4979      	ldr	r1, [pc, #484]	; (80018c4 <LCD_PrintTempInfo+0x224>)
 80016de:	f00a ff41 	bl	800c564 <siprintf>
 80016e2:	e00d      	b.n	8001700 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff3d 	bl	8000568 <__aeabi_f2d>
 80016ee:	4603      	mov	r3, r0
 80016f0:	460c      	mov	r4, r1
 80016f2:	f107 0014 	add.w	r0, r7, #20
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	4973      	ldr	r1, [pc, #460]	; (80018c8 <LCD_PrintTempInfo+0x228>)
 80016fc:	f00a ff32 	bl	800c564 <siprintf>

	if (data1[1] < 10.f)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d50f      	bpl.n	8001736 <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff23 	bl	8000568 <__aeabi_f2d>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	f107 0008 	add.w	r0, r7, #8
 800172a:	461a      	mov	r2, r3
 800172c:	4623      	mov	r3, r4
 800172e:	4967      	ldr	r1, [pc, #412]	; (80018cc <LCD_PrintTempInfo+0x22c>)
 8001730:	f00a ff18 	bl	800c564 <siprintf>
 8001734:	e020      	b.n	8001778 <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80018d0 <LCD_PrintTempInfo+0x230>
 8001742:	eef4 7a47 	vcmp.f32	s15, s14
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	d106      	bne.n	800175a <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4960      	ldr	r1, [pc, #384]	; (80018d4 <LCD_PrintTempInfo+0x234>)
 8001752:	4618      	mov	r0, r3
 8001754:	f00a ff06 	bl	800c564 <siprintf>
 8001758:	e00e      	b.n	8001778 <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff01 	bl	8000568 <__aeabi_f2d>
 8001766:	4603      	mov	r3, r0
 8001768:	460c      	mov	r4, r1
 800176a:	f107 0008 	add.w	r0, r7, #8
 800176e:	461a      	mov	r2, r3
 8001770:	4623      	mov	r3, r4
 8001772:	4959      	ldr	r1, [pc, #356]	; (80018d8 <LCD_PrintTempInfo+0x238>)
 8001774:	f00a fef6 	bl	800c564 <siprintf>

	if (data2 != NULL) {
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8088 	beq.w	8001890 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001780:	2101      	movs	r1, #1
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fea0 	bl	80014c8 <LCD_SetCursor>
		LCD_Print(temp);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff39 	bl	8001604 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001792:	2102      	movs	r1, #2
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fe97 	bl	80014c8 <LCD_SetCursor>
		LCD_Print(rh);
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff30 	bl	8001604 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d50e      	bpl.n	80017d6 <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed3 	bl	8000568 <__aeabi_f2d>
 80017c2:	4603      	mov	r3, r0
 80017c4:	460c      	mov	r4, r1
 80017c6:	f107 0014 	add.w	r0, r7, #20
 80017ca:	461a      	mov	r2, r3
 80017cc:	4623      	mov	r3, r4
 80017ce:	4943      	ldr	r1, [pc, #268]	; (80018dc <LCD_PrintTempInfo+0x23c>)
 80017d0:	f00a fec8 	bl	800c564 <siprintf>
 80017d4:	e00d      	b.n	80017f2 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fec4 	bl	8000568 <__aeabi_f2d>
 80017e0:	4603      	mov	r3, r0
 80017e2:	460c      	mov	r4, r1
 80017e4:	f107 0014 	add.w	r0, r7, #20
 80017e8:	461a      	mov	r2, r3
 80017ea:	4623      	mov	r3, r4
 80017ec:	493c      	ldr	r1, [pc, #240]	; (80018e0 <LCD_PrintTempInfo+0x240>)
 80017ee:	f00a feb9 	bl	800c564 <siprintf>

		if (data2[1] < 10.f)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3304      	adds	r3, #4
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d50f      	bpl.n	8001828 <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3304      	adds	r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feaa 	bl	8000568 <__aeabi_f2d>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	f107 0008 	add.w	r0, r7, #8
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	4930      	ldr	r1, [pc, #192]	; (80018e4 <LCD_PrintTempInfo+0x244>)
 8001822:	f00a fe9f 	bl	800c564 <siprintf>
 8001826:	e020      	b.n	800186a <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018d0 <LCD_PrintTempInfo+0x230>
 8001834:	eef4 7a47 	vcmp.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d106      	bne.n	800184c <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4929      	ldr	r1, [pc, #164]	; (80018e8 <LCD_PrintTempInfo+0x248>)
 8001844:	4618      	mov	r0, r3
 8001846:	f00a fe8d 	bl	800c564 <siprintf>
 800184a:	e00e      	b.n	800186a <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe88 	bl	8000568 <__aeabi_f2d>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	f107 0008 	add.w	r0, r7, #8
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	4921      	ldr	r1, [pc, #132]	; (80018ec <LCD_PrintTempInfo+0x24c>)
 8001866:	f00a fe7d 	bl	800c564 <siprintf>

		LCD_SetCursor(16, 1);
 800186a:	2101      	movs	r1, #1
 800186c:	2010      	movs	r0, #16
 800186e:	f7ff fe2b 	bl	80014c8 <LCD_SetCursor>
		LCD_Print(temp);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fec4 	bl	8001604 <LCD_Print>
		LCD_SetCursor(16, 2);
 800187c:	2102      	movs	r1, #2
 800187e:	2010      	movs	r0, #16
 8001880:	f7ff fe22 	bl	80014c8 <LCD_SetCursor>
		LCD_Print(rh);
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff febb 	bl	8001604 <LCD_Print>
 800188e:	e010      	b.n	80018b2 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001890:	2101      	movs	r1, #1
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fe18 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered(temp);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fed5 	bl	800164c <LCD_PrintCentered>
		LCD_NextLine("");
 80018a2:	4813      	ldr	r0, [pc, #76]	; (80018f0 <LCD_PrintTempInfo+0x250>)
 80018a4:	f000 f826 	bl	80018f4 <LCD_NextLine>
		LCD_PrintCentered(rh);
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fecd 	bl	800164c <LCD_PrintCentered>
	}
	LCD_NextLine("");
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <LCD_PrintTempInfo+0x250>)
 80018b4:	f000 f81e 	bl	80018f4 <LCD_NextLine>
 80018b8:	e000      	b.n	80018bc <LCD_PrintTempInfo+0x21c>
		return;
 80018ba:	bf00      	nop
}
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	0800de58 	.word	0x0800de58
 80018c8:	0800de60 	.word	0x0800de60
 80018cc:	0800de68 	.word	0x0800de68
 80018d0:	42c80000 	.word	0x42c80000
 80018d4:	0800de74 	.word	0x0800de74
 80018d8:	0800de7c 	.word	0x0800de7c
 80018dc:	0800de84 	.word	0x0800de84
 80018e0:	0800de8c 	.word	0x0800de8c
 80018e4:	0800de94 	.word	0x0800de94
 80018e8:	0800dea0 	.word	0x0800dea0
 80018ec:	0800dea8 	.word	0x0800dea8
 80018f0:	0800deb0 	.word	0x0800deb0

080018f4 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fe81 	bl	8001604 <LCD_Print>

	_currentCol = 0;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <LCD_NextLine+0x48>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <LCD_NextLine+0x4c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <LCD_NextLine+0x4c>)
 8001912:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <LCD_NextLine+0x4c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d902      	bls.n	8001922 <LCD_NextLine+0x2e>
		_currentRow = 0;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <LCD_NextLine+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <LCD_NextLine+0x48>)
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <LCD_NextLine+0x4c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fdcb 	bl	80014c8 <LCD_SetCursor>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000489 	.word	0x20000489
 8001940:	20000474 	.word	0x20000474

08001944 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <LCD_CursorUp+0x30>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <LCD_CursorUp+0x18>
		--_currentRow;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <LCD_CursorUp+0x30>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LCD_CursorUp+0x30>)
 800195a:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LCD_CursorUp+0x34>)
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <LCD_CursorUp+0x30>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff fdae 	bl	80014c8 <LCD_SetCursor>
	return _currentRow;
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <LCD_CursorUp+0x30>)
 800196e:	781b      	ldrb	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000474 	.word	0x20000474
 8001978:	20000489 	.word	0x20000489

0800197c <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <LCD_CursorDown+0x30>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d805      	bhi.n	8001994 <LCD_CursorDown+0x18>
		++_currentRow;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <LCD_CursorDown+0x30>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <LCD_CursorDown+0x30>)
 8001992:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LCD_CursorDown+0x34>)
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <LCD_CursorDown+0x30>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff fd92 	bl	80014c8 <LCD_SetCursor>
	return _currentRow;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <LCD_CursorDown+0x30>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000474 	.word	0x20000474
 80019b0:	20000489 	.word	0x20000489

080019b4 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <LCD_CursorLeft+0x54>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <LCD_CursorLeft+0x1a>
		--_currentCol;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <LCD_CursorLeft+0x54>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <LCD_CursorLeft+0x54>)
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e010      	b.n	80019f0 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <LCD_CursorLeft+0x54>)
 80019d0:	2213      	movs	r2, #19
 80019d2:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <LCD_CursorLeft+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <LCD_CursorLeft+0x58>)
 80019de:	2203      	movs	r2, #3
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e005      	b.n	80019f0 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <LCD_CursorLeft+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <LCD_CursorLeft+0x58>)
 80019ee:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <LCD_CursorLeft+0x54>)
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <LCD_CursorLeft+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff fd64 	bl	80014c8 <LCD_SetCursor>
	return _currentCol;
 8001a00:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <LCD_CursorLeft+0x54>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000489 	.word	0x20000489
 8001a0c:	20000474 	.word	0x20000474

08001a10 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b12      	cmp	r3, #18
 8001a1a:	d806      	bhi.n	8001a2a <LCD_CursorRight+0x1a>
		++_currentCol;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e010      	b.n	8001a4c <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <LCD_CursorRight+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d103      	bne.n	8001a40 <LCD_CursorRight+0x30>
			_currentRow = 0;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <LCD_CursorRight+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e005      	b.n	8001a4c <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <LCD_CursorRight+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <LCD_CursorRight+0x58>)
 8001a4a:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a4e:	781a      	ldrb	r2, [r3, #0]
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <LCD_CursorRight+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f7ff fd36 	bl	80014c8 <LCD_SetCursor>
	return _currentCol;
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <LCD_CursorRight+0x54>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000489 	.word	0x20000489
 8001a68:	20000474 	.word	0x20000474

08001a6c <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fbda 	bl	8001248 <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e00a      	b.n	8001ab0 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fbdd 	bl	8001264 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	ddf1      	ble.n	8001a9a <LCD_DefineCustomChar+0x2e>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 8001aca:	2100      	movs	r1, #0
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fcfb 	bl	80014c8 <LCD_SetCursor>
	LCD_Print(date);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fd96 	bl	8001604 <LCD_Print>
	LCD_SetCursor(12, 0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	200c      	movs	r0, #12
 8001adc:	f7ff fcf4 	bl	80014c8 <LCD_SetCursor>
	LCD_Print(time);
 8001ae0:	6838      	ldr	r0, [r7, #0]
 8001ae2:	f7ff fd8f 	bl	8001604 <LCD_Print>
	LCD_NextLine("");
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <LCD_PrintDateTime+0x34>)
 8001ae8:	f7ff ff04 	bl	80018f4 <LCD_NextLine>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800deb0 	.word	0x0800deb0

08001af8 <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fbac 	bl	8001264 <_LCD_SendData>
	LCD_CursorLeft();
 8001b0c:	f7ff ff52 	bl	80019b4 <LCD_CursorLeft>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
	int column = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3330      	adds	r3, #48	; 0x30
 8001b30:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	e00c      	b.n	8001b52 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 8001b38:	bf00      	nop
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	61fa      	str	r2, [r7, #28]
 8001b40:	461a      	mov	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b3b      	cmp	r3, #59	; 0x3b
 8001b4a:	d1f6      	bne.n	8001b3a <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbed      	blt.n	8001b38 <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 8001b5c:	f7ff fca2 	bl	80014a4 <LCD_ClearScreen>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 8001b60:	2301      	movs	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e037      	b.n	8001bd6 <LCD_PrintNetworks+0xbe>
		LCD_WriteChar(number++);
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	75fa      	strb	r2, [r7, #23]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ffc3 	bl	8001af8 <LCD_WriteChar>
		column = LCD_CursorRight();
 8001b72:	f7ff ff4d 	bl	8001a10 <LCD_CursorRight>
 8001b76:	4603      	mov	r3, r0
 8001b78:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 8001b7a:	481b      	ldr	r0, [pc, #108]	; (8001be8 <LCD_PrintNetworks+0xd0>)
 8001b7c:	f7ff fd42 	bl	8001604 <LCD_Print>

		while (data[index] != ';') {
 8001b80:	e010      	b.n	8001ba4 <LCD_PrintNetworks+0x8c>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dd0a      	ble.n	8001b9e <LCD_PrintNetworks+0x86>
				LCD_WriteChar(data[index]);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ffb1 	bl	8001af8 <LCD_WriteChar>
				column = LCD_CursorRight();
 8001b96:	f7ff ff3b 	bl	8001a10 <LCD_CursorRight>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
			}
			index++;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b3b      	cmp	r3, #59	; 0x3b
 8001bae:	d1e8      	bne.n	8001b82 <LCD_PrintNetworks+0x6a>
		}

		if (data[index + 1] == 0) {
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00f      	beq.n	8001bde <LCD_PrintNetworks+0xc6>
			break;
		} else {
			if (column != 0)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <LCD_PrintNetworks+0xb2>
				LCD_NextLine("");
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <LCD_PrintNetworks+0xd4>)
 8001bc6:	f7ff fe95 	bl	80018f4 <LCD_NextLine>
			index++;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	ddc4      	ble.n	8001b66 <LCD_PrintNetworks+0x4e>
		}
	}
}
 8001bdc:	e000      	b.n	8001be0 <LCD_PrintNetworks+0xc8>
			break;
 8001bde:	bf00      	nop
}
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800deb4 	.word	0x0800deb4
 8001bec:	0800deb0 	.word	0x0800deb0

08001bf0 <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	e00c      	b.n	8001c1e <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 8001c04:	bf00      	nop
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	617a      	str	r2, [r7, #20]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b3b      	cmp	r3, #59	; 0x3b
 8001c16:	d1f6      	bne.n	8001c06 <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbed      	blt.n	8001c04 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 8001c28:	f7ff fc3c 	bl	80014a4 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 8001c2c:	4815      	ldr	r0, [pc, #84]	; (8001c84 <LCD_PrintOptionsScreen+0x94>)
 8001c2e:	f7ff fd0d 	bl	800164c <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 8001c32:	2301      	movs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e01e      	b.n	8001c76 <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f7ff fc42 	bl	80014c8 <LCD_SetCursor>

		while (string[index] != ';') {
 8001c44:	e00b      	b.n	8001c5e <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	617a      	str	r2, [r7, #20]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff4f 	bl	8001af8 <LCD_WriteChar>
			LCD_CursorRight();
 8001c5a:	f7ff fed9 	bl	8001a10 <LCD_CursorRight>
		while (string[index] != ';') {
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b3b      	cmp	r3, #59	; 0x3b
 8001c68:	d1ed      	bne.n	8001c46 <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3301      	adds	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	dddd      	ble.n	8001c38 <LCD_PrintOptionsScreen+0x48>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0800deb8 	.word	0x0800deb8

08001c88 <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 8001c94:	2103      	movs	r1, #3
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fc16 	bl	80014c8 <LCD_SetCursor>
	LCD_Print("                    ");
 8001c9c:	4825      	ldr	r0, [pc, #148]	; (8001d34 <LCD_PrintNetworkStatus+0xac>)
 8001c9e:	f7ff fcb1 	bl	8001604 <LCD_Print>
	LCD_SetCursor(0, 3);
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff fc0f 	bl	80014c8 <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d103      	bne.n	8001cb8 <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 8001cb0:	4821      	ldr	r0, [pc, #132]	; (8001d38 <LCD_PrintNetworkStatus+0xb0>)
 8001cb2:	f7ff fccb 	bl	800164c <LCD_PrintCentered>
 8001cb6:	e03a      	b.n	8001d2e <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12c      	bne.n	8001d18 <LCD_PrintNetworkStatus+0x90>
		if (data == NULL) return;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d033      	beq.n	8001d2c <LCD_PrintNetworkStatus+0xa4>

		int size = strlen(data);
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	f7fe fa8d 	bl	80001e4 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f1c3 0314 	rsb	r3, r3, #20
 8001cd4:	0fda      	lsrs	r2, r3, #31
 8001cd6:	4413      	add	r3, r2
 8001cd8:	105b      	asrs	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <LCD_PrintNetworkStatus+0xb4>)
 8001cde:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <LCD_PrintNetworkStatus+0xb4>)
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <LCD_PrintNetworkStatus+0xb8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f7ff fbec 	bl	80014c8 <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e00b      	b.n	8001d0e <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fefa 	bl	8001af8 <LCD_WriteChar>
			LCD_CursorRight();
 8001d04:	f7ff fe84 	bl	8001a10 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbef      	blt.n	8001cf6 <LCD_PrintNetworkStatus+0x6e>
 8001d16:	e00a      	b.n	8001d2e <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d007      	beq.n	8001d2e <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d104      	bne.n	8001d2e <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <LCD_PrintNetworkStatus+0xbc>)
 8001d26:	f7ff fc91 	bl	800164c <LCD_PrintCentered>
 8001d2a:	e000      	b.n	8001d2e <LCD_PrintNetworkStatus+0xa6>
		if (data == NULL) return;
 8001d2c:	bf00      	nop
	}
}
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0800dec4 	.word	0x0800dec4
 8001d38:	0800dedc 	.word	0x0800dedc
 8001d3c:	20000489 	.word	0x20000489
 8001d40:	20000474 	.word	0x20000474
 8001d44:	0800def0 	.word	0x0800def0

08001d48 <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	State = ST_Clock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <MENU_Init+0x14>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	20003355 	.word	0x20003355

08001d60 <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e007      	b.n	8001d7c <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <_PWD_ResetPasswd+0x3c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b27      	cmp	r3, #39	; 0x27
 8001d80:	ddf4      	ble.n	8001d6c <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_PWD_ResetPasswd+0x40>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <_PWD_ResetPasswd+0x44>)
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	701a      	strb	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000494 	.word	0x20000494
 8001da0:	200004d3 	.word	0x200004d3
 8001da4:	2000048f 	.word	0x2000048f

08001da8 <_PWD_NextChar>:

char _PWD_NextChar(void) {
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <_PWD_NextChar+0x2c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_PWD_NextChar+0x2c>)
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <_PWD_NextChar+0x2c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b7e      	cmp	r3, #126	; 0x7e
 8001dbe:	d902      	bls.n	8001dc6 <_PWD_NextChar+0x1e>
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <_PWD_NextChar+0x2c>)
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <_PWD_NextChar+0x2c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	2000048f 	.word	0x2000048f

08001dd8 <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d001      	beq.n	8001dec <_PWD_SaveAndWrite+0x14>
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	e000      	b.n	8001dee <_PWD_SaveAndWrite+0x16>
 8001dec:	2300      	movs	r3, #0
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <_PWD_SaveAndWrite+0x30>)
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <_PWD_SaveAndWrite+0x34>)
 8001df6:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fe7c 	bl	8001af8 <LCD_WriteChar>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200004d3 	.word	0x200004d3
 8001e0c:	20000494 	.word	0x20000494

08001e10 <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001e14:	4b9d      	ldr	r3, [pc, #628]	; (800208c <_CLK_HandleDateTimeInput+0x27c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	2b11      	cmp	r3, #17
 8001e1c:	f200 8141 	bhi.w	80020a2 <_CLK_HandleDateTimeInput+0x292>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <_CLK_HandleDateTimeInput+0x18>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e71 	.word	0x08001e71
 8001e2c:	08001e9f 	.word	0x08001e9f
 8001e30:	080020a3 	.word	0x080020a3
 8001e34:	08001ecd 	.word	0x08001ecd
 8001e38:	08001efb 	.word	0x08001efb
 8001e3c:	080020a3 	.word	0x080020a3
 8001e40:	08001f29 	.word	0x08001f29
 8001e44:	08001f57 	.word	0x08001f57
 8001e48:	080020a3 	.word	0x080020a3
 8001e4c:	080020a3 	.word	0x080020a3
 8001e50:	08001f85 	.word	0x08001f85
 8001e54:	08001fb3 	.word	0x08001fb3
 8001e58:	080020a3 	.word	0x080020a3
 8001e5c:	08001fe1 	.word	0x08001fe1
 8001e60:	0800200f 	.word	0x0800200f
 8001e64:	080020a3 	.word	0x080020a3
 8001e68:	0800203d 	.word	0x0800203d
 8001e6c:	0800206b 	.word	0x0800206b
		ColIs(1)
			SetBetween('0', '3');
 8001e70:	4b87      	ldr	r3, [pc, #540]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b32      	cmp	r3, #50	; 0x32
 8001e76:	d903      	bls.n	8001e80 <_CLK_HandleDateTimeInput+0x70>
 8001e78:	4b85      	ldr	r3, [pc, #532]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e7e:	e110      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e80:	4b83      	ldr	r3, [pc, #524]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b2f      	cmp	r3, #47	; 0x2f
 8001e86:	d803      	bhi.n	8001e90 <_CLK_HandleDateTimeInput+0x80>
 8001e88:	4b81      	ldr	r3, [pc, #516]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e8a:	2230      	movs	r2, #48	; 0x30
 8001e8c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e8e:	e108      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e90:	4b7f      	ldr	r3, [pc, #508]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b7d      	ldr	r3, [pc, #500]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e9c:	e101      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8001e9e:	4b7c      	ldr	r3, [pc, #496]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b38      	cmp	r3, #56	; 0x38
 8001ea4:	d903      	bls.n	8001eae <_CLK_HandleDateTimeInput+0x9e>
 8001ea6:	4b7a      	ldr	r3, [pc, #488]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ea8:	2230      	movs	r2, #48	; 0x30
 8001eaa:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eac:	e0f9      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001eae:	4b78      	ldr	r3, [pc, #480]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb4:	d803      	bhi.n	8001ebe <_CLK_HandleDateTimeInput+0xae>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001eb8:	2230      	movs	r2, #48	; 0x30
 8001eba:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ebc:	e0f1      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001ebe:	4b74      	ldr	r3, [pc, #464]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ec8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eca:	e0ea      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8001ecc:	4b70      	ldr	r3, [pc, #448]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b30      	cmp	r3, #48	; 0x30
 8001ed2:	d903      	bls.n	8001edc <_CLK_HandleDateTimeInput+0xcc>
 8001ed4:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ed6:	2230      	movs	r2, #48	; 0x30
 8001ed8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eda:	e0e2      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001edc:	4b6c      	ldr	r3, [pc, #432]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ee2:	d803      	bhi.n	8001eec <_CLK_HandleDateTimeInput+0xdc>
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ee6:	2230      	movs	r2, #48	; 0x30
 8001ee8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eea:	e0da      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001eec:	4b68      	ldr	r3, [pc, #416]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ef6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ef8:	e0d3      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 8001efa:	4b65      	ldr	r3, [pc, #404]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b38      	cmp	r3, #56	; 0x38
 8001f00:	d903      	bls.n	8001f0a <_CLK_HandleDateTimeInput+0xfa>
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f04:	2230      	movs	r2, #48	; 0x30
 8001f06:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f08:	e0cb      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f0a:	4b61      	ldr	r3, [pc, #388]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b2f      	cmp	r3, #47	; 0x2f
 8001f10:	d803      	bhi.n	8001f1a <_CLK_HandleDateTimeInput+0x10a>
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f14:	2230      	movs	r2, #48	; 0x30
 8001f16:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f18:	e0c3      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f24:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f26:	e0bc      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 8001f28:	4b59      	ldr	r3, [pc, #356]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b38      	cmp	r3, #56	; 0x38
 8001f2e:	d903      	bls.n	8001f38 <_CLK_HandleDateTimeInput+0x128>
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f32:	2232      	movs	r2, #50	; 0x32
 8001f34:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f36:	e0b4      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001f38:	4b55      	ldr	r3, [pc, #340]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b31      	cmp	r3, #49	; 0x31
 8001f3e:	d803      	bhi.n	8001f48 <_CLK_HandleDateTimeInput+0x138>
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f42:	2232      	movs	r2, #50	; 0x32
 8001f44:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f46:	e0ac      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001f48:	4b51      	ldr	r3, [pc, #324]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f52:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f54:	e0a5      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b38      	cmp	r3, #56	; 0x38
 8001f5c:	d903      	bls.n	8001f66 <_CLK_HandleDateTimeInput+0x156>
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f60:	2230      	movs	r2, #48	; 0x30
 8001f62:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f64:	e09d      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b2f      	cmp	r3, #47	; 0x2f
 8001f6c:	d803      	bhi.n	8001f76 <_CLK_HandleDateTimeInput+0x166>
 8001f6e:	4b48      	ldr	r3, [pc, #288]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f70:	2230      	movs	r2, #48	; 0x30
 8001f72:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f74:	e095      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f80:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f82:	e08e      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 8001f84:	4b42      	ldr	r3, [pc, #264]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b31      	cmp	r3, #49	; 0x31
 8001f8a:	d903      	bls.n	8001f94 <_CLK_HandleDateTimeInput+0x184>
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f8e:	2230      	movs	r2, #48	; 0x30
 8001f90:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f92:	e086      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001f94:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b2f      	cmp	r3, #47	; 0x2f
 8001f9a:	d803      	bhi.n	8001fa4 <_CLK_HandleDateTimeInput+0x194>
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fa2:	e07e      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fae:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fb0:	e077      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8001fb2:	4b37      	ldr	r3, [pc, #220]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b38      	cmp	r3, #56	; 0x38
 8001fb8:	d903      	bls.n	8001fc2 <_CLK_HandleDateTimeInput+0x1b2>
 8001fba:	4b35      	ldr	r3, [pc, #212]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fbc:	2230      	movs	r2, #48	; 0x30
 8001fbe:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fc0:	e06f      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b2f      	cmp	r3, #47	; 0x2f
 8001fc8:	d803      	bhi.n	8001fd2 <_CLK_HandleDateTimeInput+0x1c2>
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fcc:	2230      	movs	r2, #48	; 0x30
 8001fce:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fd0:	e067      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fdc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fde:	e060      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b34      	cmp	r3, #52	; 0x34
 8001fe6:	d903      	bls.n	8001ff0 <_CLK_HandleDateTimeInput+0x1e0>
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001fea:	2230      	movs	r2, #48	; 0x30
 8001fec:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fee:	e058      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ff6:	d803      	bhi.n	8002000 <_CLK_HandleDateTimeInput+0x1f0>
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8001ffa:	2230      	movs	r2, #48	; 0x30
 8001ffc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ffe:	e050      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800200a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800200c:	e049      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b38      	cmp	r3, #56	; 0x38
 8002014:	d903      	bls.n	800201e <_CLK_HandleDateTimeInput+0x20e>
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002018:	2230      	movs	r2, #48	; 0x30
 800201a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800201c:	e041      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b2f      	cmp	r3, #47	; 0x2f
 8002024:	d803      	bhi.n	800202e <_CLK_HandleDateTimeInput+0x21e>
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002028:	2230      	movs	r2, #48	; 0x30
 800202a:	701a      	strb	r2, [r3, #0]
		ColEnd
 800202c:	e039      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002038:	701a      	strb	r2, [r3, #0]
		ColEnd
 800203a:	e032      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b34      	cmp	r3, #52	; 0x34
 8002042:	d903      	bls.n	800204c <_CLK_HandleDateTimeInput+0x23c>
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002046:	2230      	movs	r2, #48	; 0x30
 8002048:	701a      	strb	r2, [r3, #0]
		ColEnd
 800204a:	e02a      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b2f      	cmp	r3, #47	; 0x2f
 8002052:	d803      	bhi.n	800205c <_CLK_HandleDateTimeInput+0x24c>
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002056:	2230      	movs	r2, #48	; 0x30
 8002058:	701a      	strb	r2, [r3, #0]
		ColEnd
 800205a:	e022      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002066:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002068:	e01b      	b.n	80020a2 <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b38      	cmp	r3, #56	; 0x38
 8002070:	d903      	bls.n	800207a <_CLK_HandleDateTimeInput+0x26a>
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002074:	2230      	movs	r2, #48	; 0x30
 8002076:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002078:	e012      	b.n	80020a0 <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b2f      	cmp	r3, #47	; 0x2f
 8002080:	d808      	bhi.n	8002094 <_CLK_HandleDateTimeInput+0x284>
 8002082:	4b03      	ldr	r3, [pc, #12]	; (8002090 <_CLK_HandleDateTimeInput+0x280>)
 8002084:	2230      	movs	r2, #48	; 0x30
 8002086:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002088:	e00a      	b.n	80020a0 <_CLK_HandleDateTimeInput+0x290>
 800208a:	bf00      	nop
 800208c:	2000048e 	.word	0x2000048e
 8002090:	2000048f 	.word	0x2000048f
			SetBetween('0', '9');
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <_CLK_HandleDateTimeInput+0x2b0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_CLK_HandleDateTimeInput+0x2b0>)
 800209e:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020a0:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_CLK_HandleDateTimeInput+0x2b0>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fd26 	bl	8001af8 <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <_CLK_HandleDateTimeInput+0x2b4>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <_CLK_HandleDateTimeInput+0x2b0>)
 80020b4:	7819      	ldrb	r1, [r3, #0]
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <_CLK_HandleDateTimeInput+0x2b8>)
 80020b8:	5499      	strb	r1, [r3, r2]
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000048f 	.word	0x2000048f
 80020c4:	2000048e 	.word	0x2000048e
 80020c8:	200004c0 	.word	0x200004c0

080020cc <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 80020d0:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3b02      	subs	r3, #2
 80020d6:	2b10      	cmp	r3, #16
 80020d8:	d84c      	bhi.n	8002174 <_CLK_MoveInputRight+0xa8>
 80020da:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <_CLK_MoveInputRight+0x14>)
 80020dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e0:	08002165 	.word	0x08002165
 80020e4:	08002175 	.word	0x08002175
 80020e8:	08002175 	.word	0x08002175
 80020ec:	08002155 	.word	0x08002155
 80020f0:	08002175 	.word	0x08002175
 80020f4:	08002175 	.word	0x08002175
 80020f8:	08002145 	.word	0x08002145
 80020fc:	08002175 	.word	0x08002175
 8002100:	08002175 	.word	0x08002175
 8002104:	08002175 	.word	0x08002175
 8002108:	08002135 	.word	0x08002135
 800210c:	08002175 	.word	0x08002175
 8002110:	08002175 	.word	0x08002175
 8002114:	08002125 	.word	0x08002125
 8002118:	08002175 	.word	0x08002175
 800211c:	08002175 	.word	0x08002175
 8002120:	08002183 	.word	0x08002183
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 8002124:	2101      	movs	r1, #1
 8002126:	2011      	movs	r0, #17
 8002128:	f7ff f9ce 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 17;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800212e:	2211      	movs	r2, #17
 8002130:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002132:	e027      	b.n	8002184 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 8002134:	2101      	movs	r1, #1
 8002136:	200e      	movs	r0, #14
 8002138:	f7ff f9c6 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 14;
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800213e:	220e      	movs	r2, #14
 8002140:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002142:	e01f      	b.n	8002184 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 8002144:	2101      	movs	r1, #1
 8002146:	200b      	movs	r0, #11
 8002148:	f7ff f9be 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 11;
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800214e:	220b      	movs	r2, #11
 8002150:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002152:	e017      	b.n	8002184 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 8002154:	2101      	movs	r1, #1
 8002156:	2007      	movs	r0, #7
 8002158:	f7ff f9b6 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 7;
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800215e:	2207      	movs	r2, #7
 8002160:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002162:	e00f      	b.n	8002184 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 8002164:	2101      	movs	r1, #1
 8002166:	2004      	movs	r0, #4
 8002168:	f7ff f9ae 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 4;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800216e:	2204      	movs	r2, #4
 8002170:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002172:	e007      	b.n	8002184 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 8002174:	f7ff fc4c 	bl	8001a10 <LCD_CursorRight>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <_CLK_MoveInputRight+0xbc>)
 800217e:	701a      	strb	r2, [r3, #0]
	}
}
 8002180:	e000      	b.n	8002184 <_CLK_MoveInputRight+0xb8>
		ColEnd
 8002182:	bf00      	nop
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000048e 	.word	0x2000048e

0800218c <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3b01      	subs	r3, #1
 8002196:	2b10      	cmp	r3, #16
 8002198:	d84c      	bhi.n	8002234 <_CLK_MoveInputLeft+0xa8>
 800219a:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <_CLK_MoveInputLeft+0x14>)
 800219c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a0:	08002243 	.word	0x08002243
 80021a4:	08002235 	.word	0x08002235
 80021a8:	08002235 	.word	0x08002235
 80021ac:	080021e5 	.word	0x080021e5
 80021b0:	08002235 	.word	0x08002235
 80021b4:	08002235 	.word	0x08002235
 80021b8:	080021f5 	.word	0x080021f5
 80021bc:	08002235 	.word	0x08002235
 80021c0:	08002235 	.word	0x08002235
 80021c4:	08002235 	.word	0x08002235
 80021c8:	08002205 	.word	0x08002205
 80021cc:	08002235 	.word	0x08002235
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002215 	.word	0x08002215
 80021d8:	08002235 	.word	0x08002235
 80021dc:	08002235 	.word	0x08002235
 80021e0:	08002225 	.word	0x08002225
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 80021e4:	2101      	movs	r1, #1
 80021e6:	2002      	movs	r0, #2
 80021e8:	f7ff f96e 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 2;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021f2:	e027      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 80021f4:	2101      	movs	r1, #1
 80021f6:	2005      	movs	r0, #5
 80021f8:	f7ff f966 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 5;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 80021fe:	2205      	movs	r2, #5
 8002200:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002202:	e01f      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 8002204:	2101      	movs	r1, #1
 8002206:	2008      	movs	r0, #8
 8002208:	f7ff f95e 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 8;
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 800220e:	2208      	movs	r2, #8
 8002210:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002212:	e017      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 8002214:	2101      	movs	r1, #1
 8002216:	200c      	movs	r0, #12
 8002218:	f7ff f956 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 12;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 800221e:	220c      	movs	r2, #12
 8002220:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002222:	e00f      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 8002224:	2101      	movs	r1, #1
 8002226:	200f      	movs	r0, #15
 8002228:	f7ff f94e 	bl	80014c8 <LCD_SetCursor>
			_optionsCol = 15;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 800222e:	220f      	movs	r2, #15
 8002230:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002232:	e007      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 8002234:	f7ff fbbe 	bl	80019b4 <LCD_CursorLeft>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <_CLK_MoveInputLeft+0xbc>)
 800223e:	701a      	strb	r2, [r3, #0]
	}
}
 8002240:	e000      	b.n	8002244 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 8002242:	bf00      	nop
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000048e 	.word	0x2000048e

0800224c <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	3b30      	subs	r3, #48	; 0x30
 800225c:	b2db      	uxtb	r3, r3
 800225e:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 8002260:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002262:	789b      	ldrb	r3, [r3, #2]
 8002264:	3b30      	subs	r3, #48	; 0x30
 8002266:	b2db      	uxtb	r3, r3
 8002268:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	3b30      	subs	r3, #48	; 0x30
 8002270:	b2db      	uxtb	r3, r3
 8002272:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 8002274:	4b6a      	ldr	r3, [pc, #424]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002276:	795b      	ldrb	r3, [r3, #5]
 8002278:	3b30      	subs	r3, #48	; 0x30
 800227a:	b2db      	uxtb	r3, r3
 800227c:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002280:	79db      	ldrb	r3, [r3, #7]
 8002282:	3b30      	subs	r3, #48	; 0x30
 8002284:	b2db      	uxtb	r3, r3
 8002286:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 8002288:	4b65      	ldr	r3, [pc, #404]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 800228a:	7a1b      	ldrb	r3, [r3, #8]
 800228c:	3b30      	subs	r3, #48	; 0x30
 800228e:	b2db      	uxtb	r3, r3
 8002290:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002294:	7adb      	ldrb	r3, [r3, #11]
 8002296:	3b30      	subs	r3, #48	; 0x30
 8002298:	b2db      	uxtb	r3, r3
 800229a:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 800229c:	4b60      	ldr	r3, [pc, #384]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 800229e:	7b1b      	ldrb	r3, [r3, #12]
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 80022a8:	7b9b      	ldrb	r3, [r3, #14]
 80022aa:	3b30      	subs	r3, #48	; 0x30
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 80022b0:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 80022b2:	7bdb      	ldrb	r3, [r3, #15]
 80022b4:	3b30      	subs	r3, #48	; 0x30
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 80022bc:	7c5b      	ldrb	r3, [r3, #17]
 80022be:	3b30      	subs	r3, #48	; 0x30
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 80022c4:	4b56      	ldr	r3, [pc, #344]	; (8002420 <_CLK_ParseAndSetDateTime+0x1d4>)
 80022c6:	7c9b      	ldrb	r3, [r3, #18]
 80022c8:	3b30      	subs	r3, #48	; 0x30
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 80022ce:	7abb      	ldrb	r3, [r7, #10]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d104      	bne.n	80022de <_CLK_ParseAndSetDateTime+0x92>
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 80022de:	7abb      	ldrb	r3, [r7, #10]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <_CLK_ParseAndSetDateTime+0xa2>
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 80022ee:	783b      	ldrb	r3, [r7, #0]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d104      	bne.n	80022fe <_CLK_ParseAndSetDateTime+0xb2>
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d901      	bls.n	80022fe <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80022fe:	7abb      	ldrb	r3, [r7, #10]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <_CLK_ParseAndSetDateTime+0xbe>
 8002304:	7afb      	ldrb	r3, [r7, #11]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d023      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
 800230a:	7abb      	ldrb	r3, [r7, #10]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_CLK_ParseAndSetDateTime+0xca>
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d01d      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
 8002316:	7abb      	ldrb	r3, [r7, #10]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0xd6>
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d017      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 8002322:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	2b07      	cmp	r3, #7
 800232c:	d011      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
 800232e:	7abb      	ldrb	r3, [r7, #10]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_CLK_ParseAndSetDateTime+0xee>
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	2b08      	cmp	r3, #8
 8002338:	d00b      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
 800233a:	7abb      	ldrb	r3, [r7, #10]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <_CLK_ParseAndSetDateTime+0xfa>
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 8002346:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10a      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d107      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 8002352:	7a3b      	ldrb	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d104      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x116>
 8002358:	7a7b      	ldrb	r3, [r7, #9]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d901      	bls.n	8002362 <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002362:	7abb      	ldrb	r3, [r7, #10]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_CLK_ParseAndSetDateTime+0x122>
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d011      	beq.n	8002392 <_CLK_ParseAndSetDateTime+0x146>
 800236e:	7abb      	ldrb	r3, [r7, #10]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <_CLK_ParseAndSetDateTime+0x12e>
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	2b04      	cmp	r3, #4
 8002378:	d00b      	beq.n	8002392 <_CLK_ParseAndSetDateTime+0x146>
 800237a:	7abb      	ldrb	r3, [r7, #10]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_CLK_ParseAndSetDateTime+0x13a>
 8002380:	7afb      	ldrb	r3, [r7, #11]
 8002382:	2b04      	cmp	r3, #4
 8002384:	d005      	beq.n	8002392 <_CLK_ParseAndSetDateTime+0x146>
		Month(0,4)) {
 8002386:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <_CLK_ParseAndSetDateTime+0x156>
		Month(0,4)) {
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d107      	bne.n	80023a2 <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 8002392:	7a3b      	ldrb	r3, [r7, #8]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d104      	bne.n	80023a2 <_CLK_ParseAndSetDateTime+0x156>
 8002398:	7a7b      	ldrb	r3, [r7, #9]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 80023a2:	7abb      	ldrb	r3, [r7, #10]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d115      	bne.n	80023d4 <_CLK_ParseAndSetDateTime+0x188>
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d112      	bne.n	80023d4 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 80023ae:	7a3b      	ldrb	r3, [r7, #8]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 80023c4:	7a3b      	ldrb	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d104      	bne.n	80023d4 <_CLK_ParseAndSetDateTime+0x188>
 80023ca:	7a7b      	ldrb	r3, [r7, #9]
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d101      	bne.n	80023d4 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 80023d4:	f7ff f8be 	bl	8001554 <LCD_DisableCursor>

	if (error) {
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d014      	beq.n	8002408 <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 80023de:	f7ff f861 	bl	80014a4 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 80023e2:	2101      	movs	r1, #1
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f86f 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 80023ea:	480e      	ldr	r0, [pc, #56]	; (8002424 <_CLK_ParseAndSetDateTime+0x1d8>)
 80023ec:	f7ff f92e 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 80023f0:	2102      	movs	r1, #2
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff f868 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 80023f8:	480b      	ldr	r0, [pc, #44]	; (8002428 <_CLK_ParseAndSetDateTime+0x1dc>)
 80023fa:	f7ff f927 	bl	800164c <LCD_PrintCentered>

		HAL_Delay(1000);
 80023fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002402:	f005 fc99 	bl	8007d38 <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 8002406:	e006      	b.n	8002416 <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 8002408:	463a      	mov	r2, r7
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f001 fc19 	bl	8003c48 <SD_SetDateTime>
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200004c0 	.word	0x200004c0
 8002424:	0800df08 	.word	0x0800df08
 8002428:	0800df18 	.word	0x0800df18

0800242c <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MENU_PasswdInput+0x44>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d018      	beq.n	800246a <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <MENU_PasswdInput+0x44>)
 800243a:	2203      	movs	r2, #3
 800243c:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800243e:	f7ff f831 	bl	80014a4 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 8002442:	480c      	ldr	r0, [pc, #48]	; (8002474 <MENU_PasswdInput+0x48>)
 8002444:	f7ff f902 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 8002448:	2103      	movs	r1, #3
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff f83c 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 8002450:	4809      	ldr	r0, [pc, #36]	; (8002478 <MENU_PasswdInput+0x4c>)
 8002452:	f7ff f8fb 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 8002456:	2101      	movs	r1, #1
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff f835 	bl	80014c8 <LCD_SetCursor>

		_PWD_ResetPasswd();
 800245e:	f7ff fc7f 	bl	8001d60 <_PWD_ResetPasswd>

		LCD_DisableBlink();
 8002462:	f7ff f8a3 	bl	80015ac <LCD_DisableBlink>
		LCD_EnableCursor();
 8002466:	f7ff f88b 	bl	8001580 <LCD_EnableCursor>
	}
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20003355 	.word	0x20003355
 8002474:	0800df2c 	.word	0x0800df2c
 8002478:	0800df44 	.word	0x0800df44

0800247c <MENU_Options>:

void MENU_Options(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MENU_Options+0x40>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d016      	beq.n	80024b6 <MENU_Options+0x3a>
		State = ST_Options;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MENU_Options+0x40>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800248e:	f7ff f809 	bl	80014a4 <LCD_ClearScreen>

		_currentOption = 1;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MENU_Options+0x44>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MENU_Options+0x44>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <MENU_Options+0x48>)
 80024a0:	f7ff fba6 	bl	8001bf0 <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 80024a4:	2101      	movs	r1, #1
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff f80e 	bl	80014c8 <LCD_SetCursor>
		_optionsRow = 1;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MENU_Options+0x4c>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 80024b2:	f7ff f891 	bl	80015d8 <LCD_EnableBlink>
	}
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20003355 	.word	0x20003355
 80024c0:	2000048d 	.word	0x2000048d
 80024c4:	20000000 	.word	0x20000000
 80024c8:	2000048c 	.word	0x2000048c

080024cc <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <MENU_OptionsSetDateTime+0x88>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d038      	beq.n	800254c <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <MENU_OptionsSetDateTime+0x88>)
 80024dc:	2204      	movs	r2, #4
 80024de:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80024e0:	f7fe ffe0 	bl	80014a4 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 80024e4:	481c      	ldr	r0, [pc, #112]	; (8002558 <MENU_OptionsSetDateTime+0x8c>)
 80024e6:	f7ff f88d 	bl	8001604 <LCD_Print>
		LCD_SetCursor(0, 1);
 80024ea:	2101      	movs	r1, #1
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe ffeb 	bl	80014c8 <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 80024f2:	481a      	ldr	r0, [pc, #104]	; (800255c <MENU_OptionsSetDateTime+0x90>)
 80024f4:	f7ff f886 	bl	8001604 <LCD_Print>
		LCD_SetCursor(0, 2);
 80024f8:	2102      	movs	r1, #2
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7fe ffe4 	bl	80014c8 <LCD_SetCursor>
		LCD_Print("--------------------");
 8002500:	4817      	ldr	r0, [pc, #92]	; (8002560 <MENU_OptionsSetDateTime+0x94>)
 8002502:	f7ff f87f 	bl	8001604 <LCD_Print>
		LCD_SetCursor(0, 3);
 8002506:	2103      	movs	r1, #3
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe ffdd 	bl	80014c8 <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 800250e:	4815      	ldr	r0, [pc, #84]	; (8002564 <MENU_OptionsSetDateTime+0x98>)
 8002510:	f7ff f878 	bl	8001604 <LCD_Print>

		LCD_SetCursor(1, 1);
 8002514:	2101      	movs	r1, #1
 8002516:	2001      	movs	r0, #1
 8002518:	f7fe ffd6 	bl	80014c8 <LCD_SetCursor>
		_optionsCol = 1;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MENU_OptionsSetDateTime+0x9c>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 8002522:	f7ff f843 	bl	80015ac <LCD_DisableBlink>
		LCD_EnableCursor();
 8002526:	f7ff f82b 	bl	8001580 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	e007      	b.n	8002540 <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <MENU_OptionsSetDateTime+0xa0>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	2230      	movs	r2, #48	; 0x30
 8002538:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3301      	adds	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b12      	cmp	r3, #18
 8002544:	ddf4      	ble.n	8002530 <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <MENU_OptionsSetDateTime+0xa4>)
 8002548:	2230      	movs	r2, #48	; 0x30
 800254a:	701a      	strb	r2, [r3, #0]
	}
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20003355 	.word	0x20003355
 8002558:	0800df5c 	.word	0x0800df5c
 800255c:	0800df74 	.word	0x0800df74
 8002560:	0800df8c 	.word	0x0800df8c
 8002564:	0800df44 	.word	0x0800df44
 8002568:	2000048e 	.word	0x2000048e
 800256c:	200004c0 	.word	0x200004c0
 8002570:	2000048f 	.word	0x2000048f

08002574 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	int amount = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <_WiFi_NofNetworks+0x22>
			return amount;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e00c      	b.n	80025b0 <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b3b      	cmp	r3, #59	; 0x3b
 80025a0:	d102      	bne.n	80025a8 <_WiFi_NofNetworks+0x34>
			amount++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 80025ae:	e7e9      	b.n	8002584 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
	int clearRest = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	e015      	b.n	80025f8 <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <_WiFi_RequestConn+0x26>
 80025d2:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <_WiFi_RequestConn+0xc4>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4413      	add	r3, r2
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <_WiFi_RequestConn+0x26>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <_WiFi_RequestConn+0x36>
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <_WiFi_RequestConn+0xc4>)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4413      	add	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b27      	cmp	r3, #39	; 0x27
 80025fc:	dde6      	ble.n	80025cc <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 80025fe:	f7fe ff51 	bl	80014a4 <LCD_ClearScreen>
	LCD_DisableCursor();
 8002602:	f7fe ffa7 	bl	8001554 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 8002606:	2101      	movs	r1, #1
 8002608:	2000      	movs	r0, #0
 800260a:	f7fe ff5d 	bl	80014c8 <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 800260e:	481d      	ldr	r0, [pc, #116]	; (8002684 <_WiFi_RequestConn+0xc8>)
 8002610:	f7ff f81c 	bl	800164c <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 8002614:	2103      	movs	r1, #3
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe ff56 	bl	80014c8 <LCD_SetCursor>
	LCD_PrintCentered("please wait xD");
 800261c:	481a      	ldr	r0, [pc, #104]	; (8002688 <_WiFi_RequestConn+0xcc>)
 800261e:	f7ff f815 	bl	800164c <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <_WiFi_RequestConn+0xd0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4815      	ldr	r0, [pc, #84]	; (8002680 <_WiFi_RequestConn+0xc4>)
 800262a:	f000 fd07 	bl	800303c <NET_ConnectToWiFi>
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 8002632:	f7fe ff37 	bl	80014a4 <LCD_ClearScreen>

	if (result == 0) {
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10b      	bne.n	8002654 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 800263c:	2101      	movs	r1, #1
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe ff42 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 8002644:	4812      	ldr	r0, [pc, #72]	; (8002690 <_WiFi_RequestConn+0xd4>)
 8002646:	f7ff f801 	bl	800164c <LCD_PrintCentered>

		HAL_Delay(1000);
 800264a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264e:	f005 fb73 	bl	8007d38 <HAL_Delay>
 8002652:	e00d      	b.n	8002670 <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 8002654:	2101      	movs	r1, #1
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe ff36 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <_WiFi_RequestConn+0xd8>)
 800265e:	f7fe fff5 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 8002662:	2102      	movs	r1, #2
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe ff2f 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 800266a:	480b      	ldr	r0, [pc, #44]	; (8002698 <_WiFi_RequestConn+0xdc>)
 800266c:	f7fe ffee 	bl	800164c <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 8002670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002674:	f005 fb60 	bl	8007d38 <HAL_Delay>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000494 	.word	0x20000494
 8002684:	0800dfa4 	.word	0x0800dfa4
 8002688:	0800dfb0 	.word	0x0800dfb0
 800268c:	2000048d 	.word	0x2000048d
 8002690:	0800dfc0 	.word	0x0800dfc0
 8002694:	0800dfcc 	.word	0x0800dfcc
 8002698:	0800dfe0 	.word	0x0800dfe0

0800269c <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <MENU_OptionsWifiList+0xac>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d049      	beq.n	800273e <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 80026aa:	4b27      	ldr	r3, [pc, #156]	; (8002748 <MENU_OptionsWifiList+0xac>)
 80026ac:	2202      	movs	r2, #2
 80026ae:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80026b0:	f7fe fef8 	bl	80014a4 <LCD_ClearScreen>
		LCD_DisableBlink();
 80026b4:	f7fe ff7a 	bl	80015ac <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 80026b8:	4824      	ldr	r0, [pc, #144]	; (800274c <MENU_OptionsWifiList+0xb0>)
 80026ba:	f7fe ffc7 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 80026be:	2102      	movs	r1, #2
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe ff01 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 80026c6:	4822      	ldr	r0, [pc, #136]	; (8002750 <MENU_OptionsWifiList+0xb4>)
 80026c8:	f7fe ffc0 	bl	800164c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 80026cc:	2103      	movs	r1, #3
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fefa 	bl	80014c8 <LCD_SetCursor>
		LCD_PrintCentered("please wait :)");
 80026d4:	481f      	ldr	r0, [pc, #124]	; (8002754 <MENU_OptionsWifiList+0xb8>)
 80026d6:	f7fe ffb9 	bl	800164c <LCD_PrintCentered>

		_optionsRow = 0;
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <MENU_OptionsWifiList+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 80026e0:	f000 fb78 	bl	8002dd4 <NET_RequestNetworkList>
 80026e4:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff41 	bl	8002574 <_WiFi_NofNetworks>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <MENU_OptionsWifiList+0xc0>)
 80026f8:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <MENU_OptionsWifiList+0xc4>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <MENU_OptionsWifiList+0xc8>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 8002706:	4b16      	ldr	r3, [pc, #88]	; (8002760 <MENU_OptionsWifiList+0xc4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fa03 	bl	8001b18 <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 8002712:	f7fe ff61 	bl	80015d8 <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 8002716:	2100      	movs	r1, #0
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe fed5 	bl	80014c8 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 800271e:	e00e      	b.n	800273e <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 8002720:	f7fe fec0 	bl	80014a4 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 8002724:	2101      	movs	r1, #1
 8002726:	2000      	movs	r0, #0
 8002728:	f7fe fece 	bl	80014c8 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 800272c:	480e      	ldr	r0, [pc, #56]	; (8002768 <MENU_OptionsWifiList+0xcc>)
 800272e:	f7fe ff8d 	bl	800164c <LCD_PrintCentered>
			HAL_Delay(1000);
 8002732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002736:	f005 faff 	bl	8007d38 <HAL_Delay>
			MENU_Options();
 800273a:	f7ff fe9f 	bl	800247c <MENU_Options>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20003355 	.word	0x20003355
 800274c:	0800dff4 	.word	0x0800dff4
 8002750:	0800e008 	.word	0x0800e008
 8002754:	0800e018 	.word	0x0800e018
 8002758:	2000048c 	.word	0x2000048c
 800275c:	200004bc 	.word	0x200004bc
 8002760:	2000048d 	.word	0x2000048d
 8002764:	20000490 	.word	0x20000490
 8002768:	0800e028 	.word	0x0800e028

0800276c <MENU_Clock>:

void MENU_Clock(void) {
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <MENU_Clock+0x88>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <MENU_Clock+0x1c>
		State = ST_Clock;
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MENU_Clock+0x88>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 8002780:	f7fe fe90 	bl	80014a4 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002784:	f7fe ff12 	bl	80015ac <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 8002788:	f001 f99a 	bl	8003ac0 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 800278c:	f107 0208 	add.w	r2, r7, #8
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fa10 	bl	8003bbc <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f98a 	bl	8001ac0 <LCD_PrintDateTime>

	/* update jsona do wyslania dla strony, nie przeszkadzac */
	NET_AbortIT();
 80027ac:	f000 fa74 	bl	8002c98 <NET_AbortIT>

	if (THS_ReadData(THS_In, data)) {
 80027b0:	463b      	mov	r3, r7
 80027b2:	4619      	mov	r1, r3
 80027b4:	2000      	movs	r0, #0
 80027b6:	f001 fc65 	bl	8004084 <THS_ReadData>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00c      	beq.n	80027da <MENU_Clock+0x6e>
		LCD_PrintTempInfo(data, NULL);
 80027c0:	463b      	mov	r3, r7
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe ff6b 	bl	80016a0 <LCD_PrintTempInfo>
		SD_CreateJson(true, data, date, time);
 80027ca:	f107 0308 	add.w	r3, r7, #8
 80027ce:	f107 0214 	add.w	r2, r7, #20
 80027d2:	4639      	mov	r1, r7
 80027d4:	2001      	movs	r0, #1
 80027d6:	f001 fad7 	bl	8003d88 <SD_CreateJson>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <MENU_Clock+0x8c>)
 80027dc:	781c      	ldrb	r4, [r3, #0]
 80027de:	f000 fcbd 	bl	800315c <NET_GetConnInfo>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fa4e 	bl	8001c88 <LCD_PrintNetworkStatus>
}
 80027ec:	bf00      	nop
 80027ee:	3724      	adds	r7, #36	; 0x24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}
 80027f4:	20003355 	.word	0x20003355
 80027f8:	20003354 	.word	0x20003354

080027fc <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	48b0      	ldr	r0, [pc, #704]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 8002804:	f005 fd88 	bl	8008318 <HAL_GPIO_ReadPin>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 808e 	beq.w	800292c <MENU_HandleKeys+0x130>
 8002810:	200a      	movs	r0, #10
 8002812:	f005 fa91 	bl	8007d38 <HAL_Delay>
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	48aa      	ldr	r0, [pc, #680]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 800281a:	f005 fd7d 	bl	8008318 <HAL_GPIO_ReadPin>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 81e5 	beq.w	8002bf0 <MENU_HandleKeys+0x3f4>
 8002826:	bf00      	nop
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	48a6      	ldr	r0, [pc, #664]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 800282c:	f005 fd74 	bl	8008318 <HAL_GPIO_ReadPin>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f8      	bne.n	8002828 <MENU_HandleKeys+0x2c>
		LCD_WakeScreen();
 8002836:	f7fe fe11 	bl	800145c <LCD_WakeScreen>

		if (State == ST_Clock) {
 800283a:	4ba3      	ldr	r3, [pc, #652]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <MENU_HandleKeys+0x4c>
			/* Przejdz w ekran opcji */
			MENU_Options();
 8002842:	f7ff fe1b 	bl	800247c <MENU_Options>
 8002846:	e06a      	b.n	800291e <MENU_HandleKeys+0x122>
		} else if (State == ST_Options) {
 8002848:	4b9f      	ldr	r3, [pc, #636]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d125      	bne.n	800289c <MENU_HandleKeys+0xa0>
			if (_optionsRow > 1) {
 8002850:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <MENU_HandleKeys+0x2d0>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d90c      	bls.n	8002872 <MENU_HandleKeys+0x76>
				_optionsRow = LCD_CursorUp();
 8002858:	f7ff f874 	bl	8001944 <LCD_CursorUp>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b9a      	ldr	r3, [pc, #616]	; (8002acc <MENU_HandleKeys+0x2d0>)
 8002862:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002864:	4b9a      	ldr	r3, [pc, #616]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e055      	b.n	800291e <MENU_HandleKeys+0x122>
			} else if (_currentOption != 1) {
 8002872:	4b97      	ldr	r3, [pc, #604]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d051      	beq.n	800291e <MENU_HandleKeys+0x122>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 800287a:	4b95      	ldr	r3, [pc, #596]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3b01      	subs	r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b93      	ldr	r3, [pc, #588]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4891      	ldr	r0, [pc, #580]	; (8002ad4 <MENU_HandleKeys+0x2d8>)
 800288e:	f7ff f9af 	bl	8001bf0 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 8002892:	2101      	movs	r1, #1
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fe17 	bl	80014c8 <LCD_SetCursor>
 800289a:	e040      	b.n	800291e <MENU_HandleKeys+0x122>
			}
		} else if (State == ST_PassInput) {
 800289c:	4b8a      	ldr	r3, [pc, #552]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d106      	bne.n	80028b2 <MENU_HandleKeys+0xb6>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 80028a4:	f7ff fa80 	bl	8001da8 <_PWD_NextChar>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fa94 	bl	8001dd8 <_PWD_SaveAndWrite>
 80028b0:	e035      	b.n	800291e <MENU_HandleKeys+0x122>
		} else if (State == ST_SetDateTime) {
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d102      	bne.n	80028c0 <MENU_HandleKeys+0xc4>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 80028ba:	f7ff faa9 	bl	8001e10 <_CLK_HandleDateTimeInput>
 80028be:	e02e      	b.n	800291e <MENU_HandleKeys+0x122>
		} else if (State == ST_WiFi) {
 80028c0:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d12a      	bne.n	800291e <MENU_HandleKeys+0x122>
			if (_optionsRow > 0) {
 80028c8:	4b80      	ldr	r3, [pc, #512]	; (8002acc <MENU_HandleKeys+0x2d0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <MENU_HandleKeys+0xee>
				_optionsRow = LCD_CursorUp();
 80028d0:	f7ff f838 	bl	8001944 <LCD_CursorUp>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <MENU_HandleKeys+0x2d0>)
 80028da:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 80028dc:	4b7c      	ldr	r3, [pc, #496]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e019      	b.n	800291e <MENU_HandleKeys+0x122>
			} else if (_networksIn > 4 && _currentOption != 1) {
 80028ea:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <MENU_HandleKeys+0x2dc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d915      	bls.n	800291e <MENU_HandleKeys+0x122>
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d011      	beq.n	800291e <MENU_HandleKeys+0x122>
				LCD_PrintNetworks(_networksList, --_currentOption);
 80028fa:	4b78      	ldr	r3, [pc, #480]	; (8002adc <MENU_HandleKeys+0x2e0>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	b2d9      	uxtb	r1, r3
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002908:	7019      	strb	r1, [r3, #0]
 800290a:	4b71      	ldr	r3, [pc, #452]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f7ff f901 	bl	8001b18 <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 8002916:	2100      	movs	r1, #0
 8002918:	2000      	movs	r0, #0
 800291a:	f7fe fdd5 	bl	80014c8 <LCD_SetCursor>
			}
		}

		LED_T(Red);
 800291e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002922:	486f      	ldr	r0, [pc, #444]	; (8002ae0 <MENU_HandleKeys+0x2e4>)
 8002924:	f005 fd29 	bl	800837a <HAL_GPIO_TogglePin>
		return 1;
 8002928:	2301      	movs	r3, #1
 800292a:	e162      	b.n	8002bf2 <MENU_HandleKeys+0x3f6>

	} Or (DOWN) {
 800292c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002930:	4864      	ldr	r0, [pc, #400]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 8002932:	f005 fcf1 	bl	8008318 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 8093 	beq.w	8002a64 <MENU_HandleKeys+0x268>
 800293e:	200a      	movs	r0, #10
 8002940:	f005 f9fa 	bl	8007d38 <HAL_Delay>
 8002944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002948:	485e      	ldr	r0, [pc, #376]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 800294a:	f005 fce5 	bl	8008318 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 814d 	beq.w	8002bf0 <MENU_HandleKeys+0x3f4>
 8002956:	bf00      	nop
 8002958:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295c:	4859      	ldr	r0, [pc, #356]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 800295e:	f005 fcdb 	bl	8008318 <HAL_GPIO_ReadPin>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f7      	bne.n	8002958 <MENU_HandleKeys+0x15c>
		LCD_WakeScreen();
 8002968:	f7fe fd78 	bl	800145c <LCD_WakeScreen>

		if (State == ST_Options) {
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d126      	bne.n	80029c2 <MENU_HandleKeys+0x1c6>
			if (_optionsRow < 3) {
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <MENU_HandleKeys+0x2d0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d80c      	bhi.n	8002996 <MENU_HandleKeys+0x19a>
				_optionsRow = LCD_CursorDown();
 800297c:	f7fe fffe 	bl	800197c <LCD_CursorDown>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b51      	ldr	r3, [pc, #324]	; (8002acc <MENU_HandleKeys+0x2d0>)
 8002986:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e05f      	b.n	8002a56 <MENU_HandleKeys+0x25a>
			} else if (_currentOption != NOF_OPTIONS) {
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d05b      	beq.n	8002a56 <MENU_HandleKeys+0x25a>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3b02      	subs	r3, #2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4848      	ldr	r0, [pc, #288]	; (8002ad4 <MENU_HandleKeys+0x2d8>)
 80029b4:	f7ff f91c 	bl	8001bf0 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 80029b8:	2103      	movs	r1, #3
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7fe fd84 	bl	80014c8 <LCD_SetCursor>
 80029c0:	e049      	b.n	8002a56 <MENU_HandleKeys+0x25a>
			}
		} else if (State == ST_PassInput) {
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d104      	bne.n	80029d4 <MENU_HandleKeys+0x1d8>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 80029ca:	f7ff fdf7 	bl	80025bc <_WiFi_RequestConn>
			MENU_Clock();
 80029ce:	f7ff fecd 	bl	800276c <MENU_Clock>
 80029d2:	e040      	b.n	8002a56 <MENU_HandleKeys+0x25a>
		} else if (State == ST_SetDateTime) {
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d104      	bne.n	80029e6 <MENU_HandleKeys+0x1ea>
			_CLK_ParseAndSetDateTime();
 80029dc:	f7ff fc36 	bl	800224c <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 80029e0:	f7ff fec4 	bl	800276c <MENU_Clock>
 80029e4:	e037      	b.n	8002a56 <MENU_HandleKeys+0x25a>
		} else if (State == ST_WiFi) {
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d133      	bne.n	8002a56 <MENU_HandleKeys+0x25a>
			//TODO DEBUG n TESTING
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <MENU_HandleKeys+0x2d0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d814      	bhi.n	8002a20 <MENU_HandleKeys+0x224>
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <MENU_HandleKeys+0x2d0>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <MENU_HandleKeys+0x2dc>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	429a      	cmp	r2, r3
 8002a04:	da0c      	bge.n	8002a20 <MENU_HandleKeys+0x224>
				_optionsRow = LCD_CursorDown();
 8002a06:	f7fe ffb9 	bl	800197c <LCD_CursorDown>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <MENU_HandleKeys+0x2d0>)
 8002a10:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e01a      	b.n	8002a56 <MENU_HandleKeys+0x25a>
			} else if (_networksIn > 4 && _currentOption != 4) {
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <MENU_HandleKeys+0x2dc>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d916      	bls.n	8002a56 <MENU_HandleKeys+0x25a>
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d012      	beq.n	8002a56 <MENU_HandleKeys+0x25a>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <MENU_HandleKeys+0x2e0>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a3e:	7019      	strb	r1, [r3, #0]
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <MENU_HandleKeys+0x2d4>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3b04      	subs	r3, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f7ff f865 	bl	8001b18 <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 8002a4e:	2103      	movs	r1, #3
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fd39 	bl	80014c8 <LCD_SetCursor>
			}
		}

		LED_T(Green);
 8002a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5a:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <MENU_HandleKeys+0x2e4>)
 8002a5c:	f005 fc8d 	bl	800837a <HAL_GPIO_TogglePin>
		return 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0c6      	b.n	8002bf2 <MENU_HandleKeys+0x3f6>

	} Or (LEFT) {
 8002a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a68:	4816      	ldr	r0, [pc, #88]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 8002a6a:	f005 fc55 	bl	8008318 <HAL_GPIO_ReadPin>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d054      	beq.n	8002b1e <MENU_HandleKeys+0x322>
 8002a74:	200a      	movs	r0, #10
 8002a76:	f005 f95f 	bl	8007d38 <HAL_Delay>
 8002a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a7e:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 8002a80:	f005 fc4a 	bl	8008318 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80b2 	beq.w	8002bf0 <MENU_HandleKeys+0x3f4>
 8002a8c:	bf00      	nop
 8002a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a92:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <MENU_HandleKeys+0x2c8>)
 8002a94:	f005 fc40 	bl	8008318 <HAL_GPIO_ReadPin>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f7      	bne.n	8002a8e <MENU_HandleKeys+0x292>
		LCD_WakeScreen();
 8002a9e:	f7fe fcdd 	bl	800145c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MENU_HandleKeys+0x2cc>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d11e      	bne.n	8002ae8 <MENU_HandleKeys+0x2ec>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <MENU_HandleKeys+0x2e8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02e      	beq.n	8002b10 <MENU_HandleKeys+0x314>
				--_PWD_index;
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <MENU_HandleKeys+0x2e8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <MENU_HandleKeys+0x2e8>)
 8002abc:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 8002abe:	f7fe ff79 	bl	80019b4 <LCD_CursorLeft>
 8002ac2:	e025      	b.n	8002b10 <MENU_HandleKeys+0x314>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	20003355 	.word	0x20003355
 8002acc:	2000048c 	.word	0x2000048c
 8002ad0:	2000048d 	.word	0x2000048d
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	200004bc 	.word	0x200004bc
 8002adc:	20000490 	.word	0x20000490
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	200004d3 	.word	0x200004d3
			}
		} else if (State == ST_Options) {
 8002ae8:	4b43      	ldr	r3, [pc, #268]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d102      	bne.n	8002af6 <MENU_HandleKeys+0x2fa>
			MENU_Clock();
 8002af0:	f7ff fe3c 	bl	800276c <MENU_Clock>
 8002af4:	e00c      	b.n	8002b10 <MENU_HandleKeys+0x314>
		} else if (State == ST_SetDateTime) {
 8002af6:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d102      	bne.n	8002b04 <MENU_HandleKeys+0x308>
			_CLK_MoveInputLeft();
 8002afe:	f7ff fb45 	bl	800218c <_CLK_MoveInputLeft>
 8002b02:	e005      	b.n	8002b10 <MENU_HandleKeys+0x314>
		} else if (State == ST_WiFi) {
 8002b04:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d101      	bne.n	8002b10 <MENU_HandleKeys+0x314>
			MENU_Options();
 8002b0c:	f7ff fcb6 	bl	800247c <MENU_Options>
		}

		LED_T(Blue);
 8002b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b14:	4839      	ldr	r0, [pc, #228]	; (8002bfc <MENU_HandleKeys+0x400>)
 8002b16:	f005 fc30 	bl	800837a <HAL_GPIO_TogglePin>
		return 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e069      	b.n	8002bf2 <MENU_HandleKeys+0x3f6>

	} Or (RIGHT) {
 8002b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b22:	4837      	ldr	r0, [pc, #220]	; (8002c00 <MENU_HandleKeys+0x404>)
 8002b24:	f005 fbf8 	bl	8008318 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d060      	beq.n	8002bf0 <MENU_HandleKeys+0x3f4>
 8002b2e:	200a      	movs	r0, #10
 8002b30:	f005 f902 	bl	8007d38 <HAL_Delay>
 8002b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b38:	4831      	ldr	r0, [pc, #196]	; (8002c00 <MENU_HandleKeys+0x404>)
 8002b3a:	f005 fbed 	bl	8008318 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d055      	beq.n	8002bf0 <MENU_HandleKeys+0x3f4>
 8002b44:	bf00      	nop
 8002b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b4a:	482d      	ldr	r0, [pc, #180]	; (8002c00 <MENU_HandleKeys+0x404>)
 8002b4c:	f005 fbe4 	bl	8008318 <HAL_GPIO_ReadPin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f7      	bne.n	8002b46 <MENU_HandleKeys+0x34a>
		LCD_WakeScreen();
 8002b56:	f7fe fc81 	bl	800145c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d113      	bne.n	8002b8a <MENU_HandleKeys+0x38e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <MENU_HandleKeys+0x408>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <MENU_HandleKeys+0x40c>)
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d038      	beq.n	8002be2 <MENU_HandleKeys+0x3e6>
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <MENU_HandleKeys+0x408>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b26      	cmp	r3, #38	; 0x26
 8002b76:	d834      	bhi.n	8002be2 <MENU_HandleKeys+0x3e6>
				++_PWD_index;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <MENU_HandleKeys+0x408>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <MENU_HandleKeys+0x408>)
 8002b82:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 8002b84:	f7fe ff44 	bl	8001a10 <LCD_CursorRight>
 8002b88:	e02b      	b.n	8002be2 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_Options) {
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d11a      	bne.n	8002bc8 <MENU_HandleKeys+0x3cc>
			if (_currentOption == 1) {
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <MENU_HandleKeys+0x410>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <MENU_HandleKeys+0x3a4>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 8002b9a:	f7ff fd7f 	bl	800269c <MENU_OptionsWifiList>
 8002b9e:	e020      	b.n	8002be2 <MENU_HandleKeys+0x3e6>
			} else if (_currentOption == 2) {
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <MENU_HandleKeys+0x410>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d104      	bne.n	8002bb2 <MENU_HandleKeys+0x3b6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 8002ba8:	f000 fb36 	bl	8003218 <NET_WiFiDisconnect>
				MENU_Clock();
 8002bac:	f7ff fdde 	bl	800276c <MENU_Clock>
 8002bb0:	e017      	b.n	8002be2 <MENU_HandleKeys+0x3e6>

			} else if (_currentOption == 3) {
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <MENU_HandleKeys+0x410>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d013      	beq.n	8002be2 <MENU_HandleKeys+0x3e6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MENU_HandleKeys+0x410>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d10f      	bne.n	8002be2 <MENU_HandleKeys+0x3e6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 8002bc2:	f7ff fc83 	bl	80024cc <MENU_OptionsSetDateTime>
 8002bc6:	e00c      	b.n	8002be2 <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_SetDateTime) {
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d102      	bne.n	8002bd6 <MENU_HandleKeys+0x3da>
			_CLK_MoveInputRight();
 8002bd0:	f7ff fa7c 	bl	80020cc <_CLK_MoveInputRight>
 8002bd4:	e005      	b.n	8002be2 <MENU_HandleKeys+0x3e6>
		} else if (State == ST_WiFi) {
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MENU_HandleKeys+0x3fc>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <MENU_HandleKeys+0x3e6>
			MENU_PasswdInput();
 8002bde:	f7ff fc25 	bl	800242c <MENU_PasswdInput>
		}

		LED_T(Orange);
 8002be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MENU_HandleKeys+0x400>)
 8002be8:	f005 fbc7 	bl	800837a <HAL_GPIO_TogglePin>
		return 1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <MENU_HandleKeys+0x3f6>

	} IfEnd;
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20003355 	.word	0x20003355
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	200004d3 	.word	0x200004d3
 8002c08:	20000494 	.word	0x20000494
 8002c0c:	2000048d 	.word	0x2000048d

08002c10 <_NET_ResetBuffer>:
extern ModeEnum Mode;

char _receive[RECEIVE_BUFFER_SIZE];
char _currentIP[IP_SIZE];

void _NET_ResetBuffer(void) {
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	e007      	b.n	8002c2c <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 8002c1c:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <_NET_ResetBuffer+0x30>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c32:	dbf3      	blt.n	8002c1c <_NET_ResetBuffer+0xc>
	}
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	200004e4 	.word	0x200004e4

08002c44 <_NET_ResetIP>:

void _NET_ResetIP(void) {
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
	for (int i = 0; i < IP_SIZE; i++) {
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e007      	b.n	8002c60 <_NET_ResetIP+0x1c>
		_currentIP[i] = 0;
 8002c50:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <_NET_ResetIP+0x30>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IP_SIZE; i++) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b0e      	cmp	r3, #14
 8002c64:	ddf4      	ble.n	8002c50 <_NET_ResetIP+0xc>
	}
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	200004d4 	.word	0x200004d4

08002c78 <NET_StartIT>:

void NET_StartIT(void) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	_NET_ResetBuffer();
 8002c7c:	f7ff ffc8 	bl	8002c10 <_NET_ResetBuffer>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &(_receive[0]), 1);
 8002c80:	2201      	movs	r2, #1
 8002c82:	4903      	ldr	r1, [pc, #12]	; (8002c90 <NET_StartIT+0x18>)
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <NET_StartIT+0x1c>)
 8002c86:	f008 f917 	bl	800aeb8 <HAL_UART_Receive_IT>
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200004e4 	.word	0x200004e4
 8002c94:	200032d4 	.word	0x200032d4

08002c98 <NET_AbortIT>:

void NET_AbortIT(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT(&huart3);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <NET_AbortIT+0x10>)
 8002c9e:	f008 f961 	bl	800af64 <HAL_UART_AbortReceive_IT>
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200032d4 	.word	0x200032d4

08002cac <NET_GetIndexForPattern>:

int NET_GetIndexForPattern(char pattern[]) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	int find = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
	int patternLen = strlen(pattern);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd fa93 	bl	80001e4 <strlen>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]

	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e018      	b.n	8002cfa <NET_GetIndexForPattern+0x4e>
		if (find == patternLen) {
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d101      	bne.n	8002cd4 <NET_GetIndexForPattern+0x28>
			return cursor;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	e018      	b.n	8002d06 <NET_GetIndexForPattern+0x5a>
		}

		if (_receive[cursor] == pattern[find]) {
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <NET_GetIndexForPattern+0x64>)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	440b      	add	r3, r1
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d103      	bne.n	8002cf0 <NET_GetIndexForPattern+0x44>
			find++;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	3301      	adds	r3, #1
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e001      	b.n	8002cf4 <NET_GetIndexForPattern+0x48>
		} else {
			find = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d00:	dbe2      	blt.n	8002cc8 <NET_GetIndexForPattern+0x1c>
		}
	}
	return -1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200004e4 	.word	0x200004e4

08002d14 <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 8002d20:	f7ff ff76 	bl	8002c10 <_NET_ResetBuffer>
	size_t len = strlen(command);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7fd fa5d 	bl	80001e4 <strlen>
 8002d2a:	6178      	str	r0, [r7, #20]

	NET_AbortIT();
 8002d2c:	f7ff ffb4 	bl	8002c98 <NET_AbortIT>

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	480e      	ldr	r0, [pc, #56]	; (8002d74 <_NET_SendCommand+0x60>)
 8002d3a:	f007 ff7e 	bl	800ac3a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 8002d3e:	2301      	movs	r3, #1
 8002d40:	2202      	movs	r2, #2
 8002d42:	490d      	ldr	r1, [pc, #52]	; (8002d78 <_NET_SendCommand+0x64>)
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <_NET_SendCommand+0x60>)
 8002d46:	f007 ff78 	bl	800ac3a <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d50:	490a      	ldr	r1, [pc, #40]	; (8002d7c <_NET_SendCommand+0x68>)
 8002d52:	4808      	ldr	r0, [pc, #32]	; (8002d74 <_NET_SendCommand+0x60>)
 8002d54:	f008 f80a 	bl	800ad6c <HAL_UART_Receive>
			rTimeout);

	/* szukaj odpowiedzi 'OK\r\n' */
	if (NET_GetIndexForPattern(OK_PATTERN) != -1) {
 8002d58:	4809      	ldr	r0, [pc, #36]	; (8002d80 <_NET_SendCommand+0x6c>)
 8002d5a:	f7ff ffa7 	bl	8002cac <NET_GetIndexForPattern>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d001      	beq.n	8002d6a <_NET_SendCommand+0x56>
		return 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <_NET_SendCommand+0x58>
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200032d4 	.word	0x200032d4
 8002d78:	0800e03c 	.word	0x0800e03c
 8002d7c:	200004e4 	.word	0x200004e4
 8002d80:	0800e040 	.word	0x0800e040

08002d84 <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002d88:	e002      	b.n	8002d90 <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f004 ffd4 	bl	8007d38 <HAL_Delay>
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002d90:	2232      	movs	r2, #50	; 0x32
 8002d92:	2101      	movs	r1, #1
 8002d94:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <_NET_SetClientDConnMode+0x3c>)
 8002d96:	f7ff ffbd 	bl	8002d14 <_NET_SendCommand>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f4      	bne.n	8002d8a <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002da0:	e002      	b.n	8002da8 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f004 ffc8 	bl	8007d38 <HAL_Delay>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002da8:	2264      	movs	r2, #100	; 0x64
 8002daa:	2105      	movs	r1, #5
 8002dac:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <_NET_SetClientDConnMode+0x40>)
 8002dae:	f7ff ffb1 	bl	8002d14 <_NET_SendCommand>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f4      	bne.n	8002da2 <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8002db8:	f000 fa2e 	bl	8003218 <NET_WiFiDisconnect>
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	0800e048 	.word	0x0800e048
 8002dc4:	0800e050 	.word	0x0800e050

08002dc8 <NET_Init>:

void NET_Init(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8002dcc:	f7ff ffda 	bl	8002d84 <_NET_SetClientDConnMode>
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8002dda:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002dde:	2101      	movs	r1, #1
 8002de0:	4894      	ldr	r0, [pc, #592]	; (8003034 <NET_RequestNetworkList+0x260>)
 8002de2:	f7ff ff97 	bl	8002d14 <_NET_SendCommand>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f040 811e 	bne.w	800302a <NET_RequestNetworkList+0x256>
		int index = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	e0f8      	b.n	8002fea <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8002df8:	4a8f      	ldr	r2, [pc, #572]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b28      	cmp	r3, #40	; 0x28
 8002e02:	f040 80e4 	bne.w	8002fce <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	60ba      	str	r2, [r7, #8]
 8002e0c:	4a8a      	ldr	r2, [pc, #552]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e0e:	2101      	movs	r1, #1
 8002e10:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 8002e12:	4a89      	ldr	r2, [pc, #548]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3b30      	subs	r3, #48	; 0x30
 8002e1c:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	f000 80e8 	beq.w	8002ff6 <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 8002e26:	e005      	b.n	8002e34 <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	60ba      	str	r2, [r7, #8]
 8002e2e:	4a82      	ldr	r2, [pc, #520]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002e34:	4a80      	ldr	r2, [pc, #512]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b22      	cmp	r3, #34	; 0x22
 8002e3e:	d1f3      	bne.n	8002e28 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	60ba      	str	r2, [r7, #8]
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 8002e4c:	e00e      	b.n	8002e6c <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	60fa      	str	r2, [r7, #12]
 8002e54:	4978      	ldr	r1, [pc, #480]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	440a      	add	r2, r1
 8002e5a:	7811      	ldrb	r1, [r2, #0]
 8002e5c:	4a76      	ldr	r2, [pc, #472]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e5e:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	60ba      	str	r2, [r7, #8]
 8002e66:	4a74      	ldr	r2, [pc, #464]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002e6c:	4a72      	ldr	r2, [pc, #456]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4413      	add	r3, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b22      	cmp	r3, #34	; 0x22
 8002e76:	d1ea      	bne.n	8002e4e <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 8002e78:	e005      	b.n	8002e86 <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	60ba      	str	r2, [r7, #8]
 8002e80:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 8002e86:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b29      	cmp	r3, #41	; 0x29
 8002e90:	d1f3      	bne.n	8002e7a <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = '-';
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	4a67      	ldr	r2, [pc, #412]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002e9a:	212d      	movs	r1, #45	; 0x2d
 8002e9c:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	60ba      	str	r2, [r7, #8]
 8002ea4:	4a64      	ldr	r2, [pc, #400]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d118      	bne.n	8002ee2 <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60fa      	str	r2, [r7, #12]
 8002eb6:	4a60      	ldr	r2, [pc, #384]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002eb8:	214f      	movs	r1, #79	; 0x4f
 8002eba:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60fa      	str	r2, [r7, #12]
 8002ec2:	4a5d      	ldr	r2, [pc, #372]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002ec4:	2150      	movs	r1, #80	; 0x50
 8002ec6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60fa      	str	r2, [r7, #12]
 8002ece:	4a5a      	ldr	r2, [pc, #360]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002ed0:	2145      	movs	r1, #69	; 0x45
 8002ed2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	4a57      	ldr	r2, [pc, #348]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002edc:	214e      	movs	r1, #78	; 0x4e
 8002ede:	54d1      	strb	r1, [r2, r3]
 8002ee0:	e06e      	b.n	8002fc0 <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d118      	bne.n	8002f1a <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	60fa      	str	r2, [r7, #12]
 8002eee:	4a52      	ldr	r2, [pc, #328]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002ef0:	2157      	movs	r1, #87	; 0x57
 8002ef2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60fa      	str	r2, [r7, #12]
 8002efa:	4a4f      	ldr	r2, [pc, #316]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002efc:	2145      	movs	r1, #69	; 0x45
 8002efe:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60fa      	str	r2, [r7, #12]
 8002f06:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f08:	2150      	movs	r1, #80	; 0x50
 8002f0a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60fa      	str	r2, [r7, #12]
 8002f12:	4a49      	ldr	r2, [pc, #292]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f14:	2120      	movs	r1, #32
 8002f16:	54d1      	strb	r1, [r2, r3]
 8002f18:	e052      	b.n	8002fc0 <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d118      	bne.n	8002f52 <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	60fa      	str	r2, [r7, #12]
 8002f26:	4a44      	ldr	r2, [pc, #272]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f28:	2157      	movs	r1, #87	; 0x57
 8002f2a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60fa      	str	r2, [r7, #12]
 8002f32:	4a41      	ldr	r2, [pc, #260]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f34:	2150      	movs	r1, #80	; 0x50
 8002f36:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	60fa      	str	r2, [r7, #12]
 8002f3e:	4a3e      	ldr	r2, [pc, #248]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f40:	2141      	movs	r1, #65	; 0x41
 8002f42:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60fa      	str	r2, [r7, #12]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	54d1      	strb	r1, [r2, r3]
 8002f50:	e036      	b.n	8002fc0 <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d118      	bne.n	8002f8a <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	60fa      	str	r2, [r7, #12]
 8002f5e:	4a36      	ldr	r2, [pc, #216]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f60:	2157      	movs	r1, #87	; 0x57
 8002f62:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	60fa      	str	r2, [r7, #12]
 8002f6a:	4a33      	ldr	r2, [pc, #204]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f6c:	2150      	movs	r1, #80	; 0x50
 8002f6e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	60fa      	str	r2, [r7, #12]
 8002f76:	4a30      	ldr	r2, [pc, #192]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f78:	2141      	movs	r1, #65	; 0x41
 8002f7a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	60fa      	str	r2, [r7, #12]
 8002f82:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f84:	2132      	movs	r1, #50	; 0x32
 8002f86:	54d1      	strb	r1, [r2, r3]
 8002f88:	e01a      	b.n	8002fc0 <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d117      	bne.n	8002fc0 <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60fa      	str	r2, [r7, #12]
 8002f96:	4a28      	ldr	r2, [pc, #160]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002f98:	214d      	movs	r1, #77	; 0x4d
 8002f9a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	60fa      	str	r2, [r7, #12]
 8002fa2:	4a25      	ldr	r2, [pc, #148]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fa4:	2149      	movs	r1, #73	; 0x49
 8002fa6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60fa      	str	r2, [r7, #12]
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fb0:	2158      	movs	r1, #88	; 0x58
 8002fb2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	60fa      	str	r2, [r7, #12]
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fbc:	2144      	movs	r1, #68	; 0x44
 8002fbe:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	60fa      	str	r2, [r7, #12]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fc8:	213b      	movs	r1, #59	; 0x3b
 8002fca:	54d1      	strb	r1, [r2, r3]
				continue;
 8002fcc:	e00a      	b.n	8002fe4 <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00f      	beq.n	8002ffa <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <NET_RequestNetworkList+0x264>)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ff0:	f6ff af02 	blt.w	8002df8 <NET_RequestNetworkList+0x24>
 8002ff4:	e002      	b.n	8002ffc <NET_RequestNetworkList+0x228>
					break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <NET_RequestNetworkList+0x228>
				break;
 8002ffa:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002ffc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e007      	b.n	8003014 <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <NET_RequestNetworkList+0x264>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3b01      	subs	r3, #1
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	daf3      	bge.n	8003004 <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <NET_RequestNetworkList+0x252>
			return NULL;
 8003022:	2300      	movs	r3, #0
 8003024:	e002      	b.n	800302c <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <NET_RequestNetworkList+0x264>)
 8003028:	e000      	b.n	800302c <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800e05c 	.word	0x0800e05c
 8003038:	200004e4 	.word	0x200004e4

0800303c <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b0a0      	sub	sp, #128	; 0x80
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	int ssidIndex = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	67fb      	str	r3, [r7, #124]	; 0x7c
	int cmdIndex = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	67bb      	str	r3, [r7, #120]	; 0x78
	char cmd[100] = { 0 };
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	2264      	movs	r2, #100	; 0x64
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f008 fe20 	bl	800bc9c <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 800305c:	2300      	movs	r3, #0
 800305e:	677b      	str	r3, [r7, #116]	; 0x74
 8003060:	e00a      	b.n	8003078 <NET_ConnectToWiFi+0x3c>
		while (_receive[ssidIndex++] != ';')
 8003062:	bf00      	nop
 8003064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	67fa      	str	r2, [r7, #124]	; 0x7c
 800306a:	4a37      	ldr	r2, [pc, #220]	; (8003148 <NET_ConnectToWiFi+0x10c>)
 800306c:	5cd3      	ldrb	r3, [r2, r3]
 800306e:	2b3b      	cmp	r3, #59	; 0x3b
 8003070:	d1f8      	bne.n	8003064 <NET_ConnectToWiFi+0x28>
	for (int i = 0; i < network - 1; i++) {
 8003072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003074:	3301      	adds	r3, #1
 8003076:	677b      	str	r3, [r7, #116]	; 0x74
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800307e:	429a      	cmp	r2, r3
 8003080:	dbef      	blt.n	8003062 <NET_ConnectToWiFi+0x26>
			;
	}

	strcpy(cmd, CONN_TO_NETWORK);
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4a31      	ldr	r2, [pc, #196]	; (800314c <NET_ConnectToWiFi+0x110>)
 8003088:	ca07      	ldmia	r2, {r0, r1, r2}
 800308a:	c303      	stmia	r3!, {r0, r1}
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	3302      	adds	r3, #2
 8003090:	0c12      	lsrs	r2, r2, #16
 8003092:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(CONN_TO_NETWORK);
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	330a      	adds	r3, #10
 8003098:	67bb      	str	r3, [r7, #120]	; 0x78

	for (int i = 0;; i++) {
 800309a:	2300      	movs	r3, #0
 800309c:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <NET_ConnectToWiFi+0x10c>)
 80030a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b2d      	cmp	r3, #45	; 0x2d
 80030a8:	d010      	beq.n	80030cc <NET_ConnectToWiFi+0x90>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 80030aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80030ac:	1c53      	adds	r3, r2, #1
 80030ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	67b9      	str	r1, [r7, #120]	; 0x78
 80030b6:	4924      	ldr	r1, [pc, #144]	; (8003148 <NET_ConnectToWiFi+0x10c>)
 80030b8:	5c8a      	ldrb	r2, [r1, r2]
 80030ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80030be:	440b      	add	r3, r1
 80030c0:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0;; i++) {
 80030c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c6:	3301      	adds	r3, #1
 80030c8:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 80030ca:	e7e8      	b.n	800309e <NET_ConnectToWiFi+0x62>
			break;
 80030cc:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd f886 	bl	80001e4 <strlen>
 80030d8:	4603      	mov	r3, r0
 80030da:	461a      	mov	r2, r3
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4413      	add	r3, r2
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <NET_ConnectToWiFi+0x114>)
 80030e4:	6810      	ldr	r0, [r2, #0]
 80030e6:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f009 fa58 	bl	800c5a4 <strcat>
	strcat(cmd, "\"");
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f873 	bl	80001e4 <strlen>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	4413      	add	r3, r2
 8003108:	4912      	ldr	r1, [pc, #72]	; (8003154 <NET_ConnectToWiFi+0x118>)
 800310a:	461a      	mov	r2, r3
 800310c:	460b      	mov	r3, r1
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800311a:	210a      	movs	r1, #10
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fdf9 	bl	8002d14 <_NET_SendCommand>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <NET_ConnectToWiFi+0xfa>
		Mode = MD_ClientConn;
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <NET_ConnectToWiFi+0x11c>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
		NET_HTTPSetup();
 800312e:	f000 f88b 	bl	8003248 <NET_HTTPSetup>

		return 0;
 8003132:	2300      	movs	r3, #0
 8003134:	e003      	b.n	800313e <NET_ConnectToWiFi+0x102>
	}
	Mode = MD_LostHost;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <NET_ConnectToWiFi+0x11c>)
 8003138:	2203      	movs	r2, #3
 800313a:	701a      	strb	r2, [r3, #0]
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	3780      	adds	r7, #128	; 0x80
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200004e4 	.word	0x200004e4
 800314c:	0800e068 	.word	0x0800e068
 8003150:	0800e074 	.word	0x0800e074
 8003154:	0800e078 	.word	0x0800e078
 8003158:	20003354 	.word	0x20003354

0800315c <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost)
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <NET_GetConnInfo+0xa4>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <NET_GetConnInfo+0x16>
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <NET_GetConnInfo+0xa4>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d13e      	bne.n	80031f0 <NET_GetConnInfo+0x94>
			&& _NET_SendCommand(SHOW_IP, 5, 100) == 0) {
 8003172:	2264      	movs	r2, #100	; 0x64
 8003174:	2105      	movs	r1, #5
 8003176:	4823      	ldr	r0, [pc, #140]	; (8003204 <NET_GetConnInfo+0xa8>)
 8003178:	f7ff fdcc 	bl	8002d14 <_NET_SendCommand>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d136      	bne.n	80031f0 <NET_GetConnInfo+0x94>
		int cursor = NET_GetIndexForPattern(CLIENT_IP_PATTERN);
 8003182:	4821      	ldr	r0, [pc, #132]	; (8003208 <NET_GetConnInfo+0xac>)
 8003184:	f7ff fd92 	bl	8002cac <NET_GetIndexForPattern>
 8003188:	6078      	str	r0, [r7, #4]
		int index = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]

		_NET_ResetIP();
 800318e:	f7ff fd59 	bl	8002c44 <_NET_ResetIP>
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 8003192:	e012      	b.n	80031ba <NET_GetConnInfo+0x5e>
			_currentIP[index++] = _receive[cursor++];
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	1c53      	adds	r3, r2, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	1c59      	adds	r1, r3, #1
 800319e:	6039      	str	r1, [r7, #0]
 80031a0:	491a      	ldr	r1, [pc, #104]	; (800320c <NET_GetConnInfo+0xb0>)
 80031a2:	5c89      	ldrb	r1, [r1, r2]
 80031a4:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <NET_GetConnInfo+0xb4>)
 80031a6:	54d1      	strb	r1, [r2, r3]

			if (index - 1 > 15) {
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	dd04      	ble.n	80031ba <NET_GetConnInfo+0x5e>
				Mode = MD_LostHost;
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <NET_GetConnInfo+0xa4>)
 80031b2:	2203      	movs	r2, #3
 80031b4:	701a      	strb	r2, [r3, #0]
				return NULL; /* to nie jest adres ip */
 80031b6:	2300      	movs	r3, #0
 80031b8:	e01d      	b.n	80031f6 <NET_GetConnInfo+0x9a>
		while (_receive[cursor] != '"') {
 80031ba:	4a14      	ldr	r2, [pc, #80]	; (800320c <NET_GetConnInfo+0xb0>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	d1e6      	bne.n	8003194 <NET_GetConnInfo+0x38>
			}
		}

		if (strcmp("0.0.0.0", _receive) == 0) {
 80031c6:	4911      	ldr	r1, [pc, #68]	; (800320c <NET_GetConnInfo+0xb0>)
 80031c8:	4812      	ldr	r0, [pc, #72]	; (8003214 <NET_GetConnInfo+0xb8>)
 80031ca:	f7fd f801 	bl	80001d0 <strcmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <NET_GetConnInfo+0x82>
			Mode = MD_LostHost;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <NET_GetConnInfo+0xa4>)
 80031d6:	2203      	movs	r2, #3
 80031d8:	701a      	strb	r2, [r3, #0]
			return NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	e00b      	b.n	80031f6 <NET_GetConnInfo+0x9a>
		}
		/* jesli uda sie nawiazac polaczenie pozniej, ustaw serwer */
		if (Mode == MD_LostHost) {
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <NET_GetConnInfo+0xa4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d104      	bne.n	80031f0 <NET_GetConnInfo+0x94>
			NET_HTTPSetup();
 80031e6:	f000 f82f 	bl	8003248 <NET_HTTPSetup>
			Mode = MD_ClientConn;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <NET_GetConnInfo+0xa4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
		}
	}

	/* wznow nasluchiwanie */
	NET_StartIT();
 80031f0:	f7ff fd42 	bl	8002c78 <NET_StartIT>
	return (char*) _currentIP;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <NET_GetConnInfo+0xb4>)
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20003354 	.word	0x20003354
 8003204:	0800e07c 	.word	0x0800e07c
 8003208:	0800e088 	.word	0x0800e088
 800320c:	200004e4 	.word	0x200004e4
 8003210:	200004d4 	.word	0x200004d4
 8003214:	0800e090 	.word	0x0800e090

08003218 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 800321c:	e002      	b.n	8003224 <NET_WiFiDisconnect+0xc>
		HAL_Delay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f004 fd8a 	bl	8007d38 <HAL_Delay>
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 8003224:	2264      	movs	r2, #100	; 0x64
 8003226:	2105      	movs	r1, #5
 8003228:	4805      	ldr	r0, [pc, #20]	; (8003240 <NET_WiFiDisconnect+0x28>)
 800322a:	f7ff fd73 	bl	8002d14 <_NET_SendCommand>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f4      	bne.n	800321e <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <NET_WiFiDisconnect+0x2c>)
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
	return 0;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	0800e098 	.word	0x0800e098
 8003244:	20003354 	.word	0x20003354

08003248 <NET_HTTPSetup>:

uint8_t NET_HTTPSetup(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 800324c:	e002      	b.n	8003254 <NET_HTTPSetup+0xc>
		HAL_Delay(1);
 800324e:	2001      	movs	r0, #1
 8003250:	f004 fd72 	bl	8007d38 <HAL_Delay>
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 8003254:	2264      	movs	r2, #100	; 0x64
 8003256:	2105      	movs	r1, #5
 8003258:	480a      	ldr	r0, [pc, #40]	; (8003284 <NET_HTTPSetup+0x3c>)
 800325a:	f7ff fd5b 	bl	8002d14 <_NET_SendCommand>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f4      	bne.n	800324e <NET_HTTPSetup+0x6>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 8003264:	e002      	b.n	800326c <NET_HTTPSetup+0x24>
		HAL_Delay(1);
 8003266:	2001      	movs	r0, #1
 8003268:	f004 fd66 	bl	8007d38 <HAL_Delay>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 800326c:	2264      	movs	r2, #100	; 0x64
 800326e:	2105      	movs	r1, #5
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <NET_HTTPSetup+0x40>)
 8003272:	f7ff fd4f 	bl	8002d14 <_NET_SendCommand>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f4      	bne.n	8003266 <NET_HTTPSetup+0x1e>

	return 0;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	0800e0a4 	.word	0x0800e0a4
 8003288:	0800e0b0 	.word	0x0800e0b0

0800328c <NET_HandleUART_IT>:

void NET_HandleUART_IT(void) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
	/* pobierz caly bufor */
	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE, REQUEST_RECEIVE_TIMEOUT);
 8003292:	2364      	movs	r3, #100	; 0x64
 8003294:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003298:	4924      	ldr	r1, [pc, #144]	; (800332c <NET_HandleUART_IT+0xa0>)
 800329a:	4825      	ldr	r0, [pc, #148]	; (8003330 <NET_HandleUART_IT+0xa4>)
 800329c:	f007 fd66 	bl	800ad6c <HAL_UART_Receive>

	int index = NET_GetIndexForPattern(REQUEST_RECIEVED_PATTERN);
 80032a0:	4824      	ldr	r0, [pc, #144]	; (8003334 <NET_HandleUART_IT+0xa8>)
 80032a2:	f7ff fd03 	bl	8002cac <NET_GetIndexForPattern>
 80032a6:	60f8      	str	r0, [r7, #12]
	if (index != -1) {
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d036      	beq.n	800331e <NET_HandleUART_IT+0x92>
		char connID = _receive[index++];
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60fa      	str	r2, [r7, #12]
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	71fb      	strb	r3, [r7, #7]
		/* przesun zadanie o przeanalizowane znaki */
		while (_receive[index++] != ':')
 80032bc:	bf00      	nop
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	60fa      	str	r2, [r7, #12]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	2b3a      	cmp	r3, #58	; 0x3a
 80032ca:	d1f8      	bne.n	80032be <NET_HandleUART_IT+0x32>
			;
		/* sformuluj zadanie http i podaj wyzej */
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	e01c      	b.n	800330c <NET_HandleUART_IT+0x80>
			if (index > RECEIVE_BUFFER_SIZE || _receive[index] == 0) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032d8:	dc05      	bgt.n	80032e6 <NET_HandleUART_IT+0x5a>
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <NET_HandleUART_IT+0x66>
				_receive[i] = 0;
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4413      	add	r3, r2
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e009      	b.n	8003306 <NET_HandleUART_IT+0x7a>
			} else {
				_receive[i] = _receive[index++];
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	60fa      	str	r2, [r7, #12]
 80032f8:	4a0c      	ldr	r2, [pc, #48]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032fa:	5cd1      	ldrb	r1, [r2, r3]
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <NET_HandleUART_IT+0xa0>)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4413      	add	r3, r2
 8003302:	460a      	mov	r2, r1
 8003304:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3301      	adds	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003312:	dbde      	blt.n	80032d2 <NET_HandleUART_IT+0x46>
			}
		}

		HTTP_HandleRequest((char*) _receive, connID);
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4619      	mov	r1, r3
 8003318:	4804      	ldr	r0, [pc, #16]	; (800332c <NET_HandleUART_IT+0xa0>)
 800331a:	f7fd fe93 	bl	8001044 <HTTP_HandleRequest>
	}

	NET_StartIT();
 800331e:	f7ff fcab 	bl	8002c78 <NET_StartIT>
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200004e4 	.word	0x200004e4
 8003330:	200032d4 	.word	0x200032d4
 8003334:	0800e0c4 	.word	0x0800e0c4

08003338 <NET_SendTCPData>:

#define __CMD_SIZE 20
#define __resetCmd() for(int i=0;i<__CMD_SIZE;i++)cmd[i]=0

void NET_SendTCPData(char connID, char *data) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b08c      	sub	sp, #48	; 0x30
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE ];
	uint32_t len = strlen(data), index = 0;
 8003344:	6838      	ldr	r0, [r7, #0]
 8003346:	f7fc ff4d 	bl	80001e4 <strlen>
 800334a:	6238      	str	r0, [r7, #32]
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (len > index) {
 8003350:	e046      	b.n	80033e0 <NET_SendTCPData+0xa8>
		/* dziel dane na paczki i odsylaj dokument */
		int toSend = (len - index > PACKET_SIZE) ? PACKET_SIZE : len - index;
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800335c:	bf28      	it	cs
 800335e:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8003362:	61fb      	str	r3, [r7, #28]

		__resetCmd();
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
 8003368:	e008      	b.n	800337c <NET_SendTCPData+0x44>
 800336a:	f107 0208 	add.w	r2, r7, #8
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	4413      	add	r3, r2
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	3301      	adds	r3, #1
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b13      	cmp	r3, #19
 8003380:	ddf3      	ble.n	800336a <NET_SendTCPData+0x32>
		sprintf(cmd, SEND_DATA_TO_CONN("%c", "%d"), connID, toSend);
 8003382:	79fa      	ldrb	r2, [r7, #7]
 8003384:	f107 0008 	add.w	r0, r7, #8
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4919      	ldr	r1, [pc, #100]	; (80033f0 <NET_SendTCPData+0xb8>)
 800338c:	f009 f8ea 	bl	800c564 <siprintf>
		if (_NET_SendCommand(cmd, 5, 100) != 0) {
 8003390:	f107 0308 	add.w	r3, r7, #8
 8003394:	2264      	movs	r2, #100	; 0x64
 8003396:	2105      	movs	r1, #5
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fcbb 	bl	8002d14 <_NET_SendCommand>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <NET_SendTCPData+0x72>
			HAL_Delay(10 * PACKET_INTERVAL);
 80033a4:	20c8      	movs	r0, #200	; 0xc8
 80033a6:	f004 fcc7 	bl	8007d38 <HAL_Delay>
		}

		HAL_Delay(5 * PACKET_INTERVAL);
 80033aa:	2064      	movs	r0, #100	; 0x64
 80033ac:	f004 fcc4 	bl	8007d38 <HAL_Delay>

		for (int i = 0; i < toSend; i++) {
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e00c      	b.n	80033d0 <NET_SendTCPData+0x98>
			HAL_UART_Transmit(&huart3, (uint8_t*) &(data[index++]), 1, 100);
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	18d1      	adds	r1, r2, r3
 80033c0:	2364      	movs	r3, #100	; 0x64
 80033c2:	2201      	movs	r2, #1
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <NET_SendTCPData+0xbc>)
 80033c6:	f007 fc38 	bl	800ac3a <HAL_UART_Transmit>
		for (int i = 0; i < toSend; i++) {
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	3301      	adds	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbee      	blt.n	80033b6 <NET_SendTCPData+0x7e>
		}

		HAL_Delay(20 * PACKET_INTERVAL);
 80033d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033dc:	f004 fcac 	bl	8007d38 <HAL_Delay>
	while (len > index) {
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8b4      	bhi.n	8003352 <NET_SendTCPData+0x1a>
	}
}
 80033e8:	bf00      	nop
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0800e0cc 	.word	0x0800e0cc
 80033f4:	200032d4 	.word	0x200032d4

080033f8 <NET_CloseConnSignal>:

void NET_CloseConnSignal(char connID) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE] = {0};
 8003402:	f107 030c 	add.w	r3, r7, #12
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	611a      	str	r2, [r3, #16]

	sprintf(cmd, CLOSE_CONN("%c"), connID);
 8003412:	79fa      	ldrb	r2, [r7, #7]
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <NET_CloseConnSignal+0x40>)
 800341a:	4618      	mov	r0, r3
 800341c:	f009 f8a2 	bl	800c564 <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	2264      	movs	r2, #100	; 0x64
 8003426:	2105      	movs	r1, #5
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fc73 	bl	8002d14 <_NET_SendCommand>
}
 800342e:	bf00      	nop
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	0800e0e0 	.word	0x0800e0e0

0800343c <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <RGB_Init+0x2c>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <RGB_Init+0x30>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <RGB_Init+0x34>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
	_state = 0;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <RGB_Init+0x38>)
 8003454:	2200      	movs	r2, #0
 8003456:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <RGB_Init+0x3c>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	200006e0 	.word	0x200006e0
 800346c:	200006d8 	.word	0x200006d8
 8003470:	200006e4 	.word	0x200006e4
 8003474:	200006dc 	.word	0x200006dc
 8003478:	200006e8 	.word	0x200006e8

0800347c <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 8003480:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <_RGB_UpdateRegisters+0x80>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003488:	d303      	bcc.n	8003492 <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 800348a:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <_RGB_UpdateRegisters+0x80>)
 800348c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003490:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <_RGB_UpdateRegisters+0x84>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800349a:	d303      	bcc.n	80034a4 <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <_RGB_UpdateRegisters+0x84>)
 800349e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034a2:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 80034a4:	4b17      	ldr	r3, [pc, #92]	; (8003504 <_RGB_UpdateRegisters+0x88>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ac:	d303      	bcc.n	80034b6 <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <_RGB_UpdateRegisters+0x88>)
 80034b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b4:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 80034b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <_RGB_UpdateRegisters+0x80>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 80034c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <_RGB_UpdateRegisters+0x84>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 80034ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <_RGB_UpdateRegisters+0x88>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <_RGB_UpdateRegisters+0x8c>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <_RGB_UpdateRegisters+0x8c>)
 80034de:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <_RGB_UpdateRegisters+0x8c>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 80034e8:	d902      	bls.n	80034f0 <_RGB_UpdateRegisters+0x74>
		_state = 0;
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <_RGB_UpdateRegisters+0x8c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	801a      	strh	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	200006e0 	.word	0x200006e0
 8003500:	200006d8 	.word	0x200006d8
 8003504:	200006e4 	.word	0x200006e4
 8003508:	200006dc 	.word	0x200006dc

0800350c <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <_RGB_SetWhite+0x2c>)
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <_RGB_SetWhite+0x30>)
 8003518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800351c:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_RGB_SetWhite+0x34>)
 8003520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003524:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <_RGB_SetWhite+0x38>)
 8003528:	f240 32e7 	movw	r2, #999	; 0x3e7
 800352c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800352e:	f7ff ffa5 	bl	800347c <_RGB_UpdateRegisters>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200006e8 	.word	0x200006e8
 800353c:	200006e0 	.word	0x200006e0
 8003540:	200006d8 	.word	0x200006d8
 8003544:	200006e4 	.word	0x200006e4

08003548 <_RGB_SetRed>:

void _RGB_SetRed(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <_RGB_SetRed+0x28>)
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <_RGB_SetRed+0x2c>)
 8003554:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003558:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <_RGB_SetRed+0x30>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <_RGB_SetRed+0x34>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003566:	f7ff ff89 	bl	800347c <_RGB_UpdateRegisters>
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200006e8 	.word	0x200006e8
 8003574:	200006e0 	.word	0x200006e0
 8003578:	200006d8 	.word	0x200006d8
 800357c:	200006e4 	.word	0x200006e4

08003580 <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <_RGB_SetGreen+0x28>)
 8003586:	2203      	movs	r2, #3
 8003588:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <_RGB_SetGreen+0x2c>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003590:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <_RGB_SetGreen+0x30>)
 8003592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003596:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <_RGB_SetGreen+0x34>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800359e:	f7ff ff6d 	bl	800347c <_RGB_UpdateRegisters>
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200006e8 	.word	0x200006e8
 80035ac:	200006e0 	.word	0x200006e0
 80035b0:	200006d8 	.word	0x200006d8
 80035b4:	200006e4 	.word	0x200006e4

080035b8 <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <_RGB_SetBlue+0x28>)
 80035be:	2204      	movs	r2, #4
 80035c0:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <_RGB_SetBlue+0x2c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <_RGB_SetBlue+0x30>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <_RGB_SetBlue+0x34>)
 80035d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035d4:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80035d6:	f7ff ff51 	bl	800347c <_RGB_UpdateRegisters>
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200006e8 	.word	0x200006e8
 80035e4:	200006e0 	.word	0x200006e0
 80035e8:	200006d8 	.word	0x200006d8
 80035ec:	200006e4 	.word	0x200006e4

080035f0 <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <_RGB_SetBlack+0x24>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <_RGB_SetBlack+0x28>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <_RGB_SetBlack+0x2c>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <_RGB_SetBlack+0x30>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800360c:	f7ff ff36 	bl	800347c <_RGB_UpdateRegisters>
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200006e8 	.word	0x200006e8
 8003618:	200006e0 	.word	0x200006e0
 800361c:	200006d8 	.word	0x200006d8
 8003620:	200006e4 	.word	0x200006e4

08003624 <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 8003628:	4b41      	ldr	r3, [pc, #260]	; (8003730 <_RGB_Rainbow+0x10c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d002      	beq.n	8003636 <_RGB_Rainbow+0x12>
		_state = 0;
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <_RGB_Rainbow+0x110>)
 8003632:	2200      	movs	r2, #0
 8003634:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <_RGB_Rainbow+0x10c>)
 8003638:	2209      	movs	r2, #9
 800363a:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 800363c:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <_RGB_Rainbow+0x110>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	f240 124d 	movw	r2, #333	; 0x14d
 8003644:	4293      	cmp	r3, r2
 8003646:	d010      	beq.n	800366a <_RGB_Rainbow+0x46>
 8003648:	f240 229a 	movw	r2, #666	; 0x29a
 800364c:	4293      	cmp	r3, r2
 800364e:	d017      	beq.n	8003680 <_RGB_Rainbow+0x5c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d120      	bne.n	8003696 <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <_RGB_Rainbow+0x114>)
 8003656:	f240 32e7 	movw	r2, #999	; 0x3e7
 800365a:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <_RGB_Rainbow+0x118>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <_RGB_Rainbow+0x11c>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
		break;
 8003668:	e05e      	b.n	8003728 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 800366a:	4b33      	ldr	r3, [pc, #204]	; (8003738 <_RGB_Rainbow+0x114>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <_RGB_Rainbow+0x118>)
 8003672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003676:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <_RGB_Rainbow+0x11c>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
		break;
 800367e:	e053      	b.n	8003728 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <_RGB_Rainbow+0x114>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <_RGB_Rainbow+0x118>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 800368c:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <_RGB_Rainbow+0x11c>)
 800368e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003692:	601a      	str	r2, [r3, #0]
		break;
 8003694:	e048      	b.n	8003728 <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <_RGB_Rainbow+0x110>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <_RGB_Rainbow+0xa0>
 800369e:	4b25      	ldr	r3, [pc, #148]	; (8003734 <_RGB_Rainbow+0x110>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 80036a6:	d80d      	bhi.n	80036c4 <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <_RGB_Rainbow+0x114>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3b03      	subs	r3, #3
 80036ae:	4a22      	ldr	r2, [pc, #136]	; (8003738 <_RGB_Rainbow+0x114>)
 80036b0:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <_RGB_Rainbow+0x118>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3303      	adds	r3, #3
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <_RGB_Rainbow+0x118>)
 80036ba:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <_RGB_Rainbow+0x11c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e031      	b.n	8003728 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <_RGB_Rainbow+0x110>)
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 80036cc:	d313      	bcc.n	80036f6 <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <_RGB_Rainbow+0x110>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	f240 2299 	movw	r2, #665	; 0x299
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d80d      	bhi.n	80036f6 <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <_RGB_Rainbow+0x114>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <_RGB_Rainbow+0x118>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <_RGB_Rainbow+0x118>)
 80036e8:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <_RGB_Rainbow+0x11c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3303      	adds	r3, #3
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <_RGB_Rainbow+0x11c>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e018      	b.n	8003728 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <_RGB_Rainbow+0x110>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	f240 229a 	movw	r2, #666	; 0x29a
 80036fe:	4293      	cmp	r3, r2
 8003700:	d912      	bls.n	8003728 <_RGB_Rainbow+0x104>
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <_RGB_Rainbow+0x110>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	f240 32e6 	movw	r2, #998	; 0x3e6
 800370a:	4293      	cmp	r3, r2
 800370c:	d80c      	bhi.n	8003728 <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <_RGB_Rainbow+0x114>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3303      	adds	r3, #3
 8003714:	4a08      	ldr	r2, [pc, #32]	; (8003738 <_RGB_Rainbow+0x114>)
 8003716:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <_RGB_Rainbow+0x118>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <_RGB_Rainbow+0x11c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b03      	subs	r3, #3
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <_RGB_Rainbow+0x11c>)
 8003726:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 8003728:	f7ff fea8 	bl	800347c <_RGB_UpdateRegisters>
}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200006e8 	.word	0x200006e8
 8003734:	200006dc 	.word	0x200006dc
 8003738:	200006e0 	.word	0x200006e0
 800373c:	200006d8 	.word	0x200006d8
 8003740:	200006e4 	.word	0x200006e4

08003744 <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 8003748:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <_RGB_BlinkRed+0x5c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d002      	beq.n	8003756 <_RGB_BlinkRed+0x12>
		_state = 0;
 8003750:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <_RGB_BlinkRed+0x60>)
 8003752:	2200      	movs	r2, #0
 8003754:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <_RGB_BlinkRed+0x5c>)
 8003758:	2206      	movs	r2, #6
 800375a:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <_RGB_BlinkRed+0x64>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <_RGB_BlinkRed+0x68>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <_RGB_BlinkRed+0x60>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <_RGB_BlinkRed+0x6c>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e00f      	b.n	8003798 <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <_RGB_BlinkRed+0x60>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003780:	d805      	bhi.n	800378e <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <_RGB_BlinkRed+0x6c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3302      	adds	r3, #2
 8003788:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <_RGB_BlinkRed+0x6c>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e004      	b.n	8003798 <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <_RGB_BlinkRed+0x6c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3b02      	subs	r3, #2
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <_RGB_BlinkRed+0x6c>)
 8003796:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003798:	f7ff fe70 	bl	800347c <_RGB_UpdateRegisters>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200006e8 	.word	0x200006e8
 80037a4:	200006dc 	.word	0x200006dc
 80037a8:	200006d8 	.word	0x200006d8
 80037ac:	200006e4 	.word	0x200006e4
 80037b0:	200006e0 	.word	0x200006e0

080037b4 <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <_RGB_BlinkGreen+0x5c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d002      	beq.n	80037c6 <_RGB_BlinkGreen+0x12>
		_state = 0;
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <_RGB_BlinkGreen+0x60>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 80037c6:	4b12      	ldr	r3, [pc, #72]	; (8003810 <_RGB_BlinkGreen+0x5c>)
 80037c8:	2207      	movs	r2, #7
 80037ca:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <_RGB_BlinkGreen+0x64>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <_RGB_BlinkGreen+0x68>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <_RGB_BlinkGreen+0x60>)
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <_RGB_BlinkGreen+0x6c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00f      	b.n	8003808 <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <_RGB_BlinkGreen+0x60>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80037f0:	d805      	bhi.n	80037fe <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <_RGB_BlinkGreen+0x6c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3302      	adds	r3, #2
 80037f8:	4a09      	ldr	r2, [pc, #36]	; (8003820 <_RGB_BlinkGreen+0x6c>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	e004      	b.n	8003808 <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <_RGB_BlinkGreen+0x6c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3b02      	subs	r3, #2
 8003804:	4a06      	ldr	r2, [pc, #24]	; (8003820 <_RGB_BlinkGreen+0x6c>)
 8003806:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003808:	f7ff fe38 	bl	800347c <_RGB_UpdateRegisters>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200006e8 	.word	0x200006e8
 8003814:	200006dc 	.word	0x200006dc
 8003818:	200006e0 	.word	0x200006e0
 800381c:	200006e4 	.word	0x200006e4
 8003820:	200006d8 	.word	0x200006d8

08003824 <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <_RGB_BlinkBlue+0x5c>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d002      	beq.n	8003836 <_RGB_BlinkBlue+0x12>
		_state = 0;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <_RGB_BlinkBlue+0x60>)
 8003832:	2200      	movs	r2, #0
 8003834:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <_RGB_BlinkBlue+0x5c>)
 8003838:	2208      	movs	r2, #8
 800383a:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <_RGB_BlinkBlue+0x64>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <_RGB_BlinkBlue+0x68>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003848:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <_RGB_BlinkBlue+0x60>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <_RGB_BlinkBlue+0x6c>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00f      	b.n	8003878 <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <_RGB_BlinkBlue+0x60>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003860:	d805      	bhi.n	800386e <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <_RGB_BlinkBlue+0x6c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3302      	adds	r3, #2
 8003868:	4a09      	ldr	r2, [pc, #36]	; (8003890 <_RGB_BlinkBlue+0x6c>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	e004      	b.n	8003878 <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <_RGB_BlinkBlue+0x6c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b02      	subs	r3, #2
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <_RGB_BlinkBlue+0x6c>)
 8003876:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003878:	f7ff fe00 	bl	800347c <_RGB_UpdateRegisters>
}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}
 8003880:	200006e8 	.word	0x200006e8
 8003884:	200006dc 	.word	0x200006dc
 8003888:	200006e0 	.word	0x200006e0
 800388c:	200006d8 	.word	0x200006d8
 8003890:	200006e4 	.word	0x200006e4

08003894 <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <_RGB_BlinkWhite+0x84>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b05      	cmp	r3, #5
 800389e:	d002      	beq.n	80038a6 <_RGB_BlinkWhite+0x12>
		_state = 0;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <_RGB_BlinkWhite+0x88>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <_RGB_BlinkWhite+0x84>)
 80038a8:	2205      	movs	r2, #5
 80038aa:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 80038ac:	4b1b      	ldr	r3, [pc, #108]	; (800391c <_RGB_BlinkWhite+0x88>)
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <_RGB_BlinkWhite+0x8c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <_RGB_BlinkWhite+0x90>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <_RGB_BlinkWhite+0x94>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e023      	b.n	8003910 <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <_RGB_BlinkWhite+0x88>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80038d0:	d80f      	bhi.n	80038f2 <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_RGB_BlinkWhite+0x8c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3302      	adds	r3, #2
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <_RGB_BlinkWhite+0x8c>)
 80038da:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 80038dc:	4b11      	ldr	r3, [pc, #68]	; (8003924 <_RGB_BlinkWhite+0x90>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3302      	adds	r3, #2
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <_RGB_BlinkWhite+0x90>)
 80038e4:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <_RGB_BlinkWhite+0x94>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3302      	adds	r3, #2
 80038ec:	4a0e      	ldr	r2, [pc, #56]	; (8003928 <_RGB_BlinkWhite+0x94>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e00e      	b.n	8003910 <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <_RGB_BlinkWhite+0x8c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3b02      	subs	r3, #2
 80038f8:	4a09      	ldr	r2, [pc, #36]	; (8003920 <_RGB_BlinkWhite+0x8c>)
 80038fa:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <_RGB_BlinkWhite+0x90>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b02      	subs	r3, #2
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <_RGB_BlinkWhite+0x90>)
 8003904:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <_RGB_BlinkWhite+0x94>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3b02      	subs	r3, #2
 800390c:	4a06      	ldr	r2, [pc, #24]	; (8003928 <_RGB_BlinkWhite+0x94>)
 800390e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003910:	f7ff fdb4 	bl	800347c <_RGB_UpdateRegisters>
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200006e8 	.word	0x200006e8
 800391c:	200006dc 	.word	0x200006dc
 8003920:	200006e0 	.word	0x200006e0
 8003924:	200006d8 	.word	0x200006d8
 8003928:	200006e4 	.word	0x200006e4

0800392c <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	2b09      	cmp	r3, #9
 800393a:	d835      	bhi.n	80039a8 <RGB_SetMode+0x7c>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <RGB_SetMode+0x18>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003973 	.word	0x08003973
 800394c:	08003979 	.word	0x08003979
 8003950:	0800397f 	.word	0x0800397f
 8003954:	08003985 	.word	0x08003985
 8003958:	0800399d 	.word	0x0800399d
 800395c:	0800398b 	.word	0x0800398b
 8003960:	08003991 	.word	0x08003991
 8003964:	08003997 	.word	0x08003997
 8003968:	080039a3 	.word	0x080039a3
	case RGB_Disabled:
		_RGB_SetBlack();
 800396c:	f7ff fe40 	bl	80035f0 <_RGB_SetBlack>
		break;
 8003970:	e01a      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 8003972:	f7ff fdcb 	bl	800350c <_RGB_SetWhite>
		break;
 8003976:	e017      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 8003978:	f7ff fde6 	bl	8003548 <_RGB_SetRed>
		break;
 800397c:	e014      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 800397e:	f7ff fdff 	bl	8003580 <_RGB_SetGreen>
		break;
 8003982:	e011      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 8003984:	f7ff fe18 	bl	80035b8 <_RGB_SetBlue>
		break;
 8003988:	e00e      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 800398a:	f7ff fedb 	bl	8003744 <_RGB_BlinkRed>
		break;
 800398e:	e00b      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 8003990:	f7ff ff10 	bl	80037b4 <_RGB_BlinkGreen>
		break;
 8003994:	e008      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 8003996:	f7ff ff45 	bl	8003824 <_RGB_BlinkBlue>
		break;
 800399a:	e005      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 800399c:	f7ff ff7a 	bl	8003894 <_RGB_BlinkWhite>
		break;
 80039a0:	e002      	b.n	80039a8 <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 80039a2:	f7ff fe3f 	bl	8003624 <_RGB_Rainbow>
		break;
 80039a6:	bf00      	nop
	}
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_SD_ResetBuffer>:
UINT _writtenB;
UINT _readB;

BYTE _buffer[MAX_FILESIZE];

void _SD_ResetBuffer(void) {
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_FILESIZE; i++) {
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	e007      	b.n	80039cc <_SD_ResetBuffer+0x1c>
		_buffer[i] = 0;
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <_SD_ResetBuffer+0x34>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FILESIZE; i++) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3301      	adds	r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f242 720f 	movw	r2, #9999	; 0x270f
 80039d2:	4293      	cmp	r3, r2
 80039d4:	ddf2      	ble.n	80039bc <_SD_ResetBuffer+0xc>
	}
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000934 	.word	0x20000934

080039e8 <_SD_GetDiskSpace>:

uint32_t _SD_GetDiskSpace(void) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
	FATFS *ptr;
	uint32_t fre_clust = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	603b      	str	r3, [r7, #0]

	if (f_getfree("", &fre_clust, &ptr) != FR_OK) {
 80039f2:	1d3a      	adds	r2, r7, #4
 80039f4:	463b      	mov	r3, r7
 80039f6:	4619      	mov	r1, r3
 80039f8:	480e      	ldr	r0, [pc, #56]	; (8003a34 <_SD_GetDiskSpace+0x4c>)
 80039fa:	f003 fa3a 	bl	8006e72 <f_getfree>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <_SD_GetDiskSpace+0x20>
		return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e010      	b.n	8003a2a <_SD_GetDiskSpace+0x42>
	}

	DISK_LEFT = (fre_clust * ptr->csize) / 2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	895b      	ldrh	r3, [r3, #10]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	fb03 f302 	mul.w	r3, r3, r2
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <_SD_GetDiskSpace+0x50>)
 8003a18:	6013      	str	r3, [r2, #0]
	return ((ptr->n_fatent - 2) * ptr->csize) / 2; /* kilobajty */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	3b02      	subs	r3, #2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	8952      	ldrh	r2, [r2, #10]
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	085b      	lsrs	r3, r3, #1
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	0800e0f0 	.word	0x0800e0f0
 8003a38:	20000920 	.word	0x20000920

08003a3c <SD_Init>:
	while (f_mkfs("", FM_FAT32, (DWORD) 0, NULL, FF_MAX_SS) != FR_OK)
		HAL_Delay(1);
	_SD_GetDiskSpace();
}

void SD_Init(void) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	if (f_mount(&_ff, "", 1) == FR_NO_FILESYSTEM) {
 8003a40:	2201      	movs	r2, #1
 8003a42:	4905      	ldr	r1, [pc, #20]	; (8003a58 <SD_Init+0x1c>)
 8003a44:	4805      	ldr	r0, [pc, #20]	; (8003a5c <SD_Init+0x20>)
 8003a46:	f002 fd17 	bl	8006478 <f_mount>
		//TODO Fatal
	}

	SD_RefreshDateTime();
 8003a4a:	f000 f839 	bl	8003ac0 <SD_RefreshDateTime>
	_SD_GetDiskSpace();
 8003a4e:	f7ff ffcb 	bl	80039e8 <_SD_GetDiskSpace>
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	0800e0f0 	.word	0x0800e0f0
 8003a5c:	200006f0 	.word	0x200006f0

08003a60 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <_SD_ClearDateTimeRegisters+0x58>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <_SD_ClearDateTimeRegisters+0x5c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <_SD_ClearDateTimeRegisters+0x5c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <_SD_ClearDateTimeRegisters+0x5c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <_SD_ClearDateTimeRegisters+0x5c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	70da      	strb	r2, [r3, #3]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20003044 	.word	0x20003044
 8003abc:	20000930 	.word	0x20000930

08003ac0 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8003ac4:	f7ff ffcc 	bl	8003a60 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4938      	ldr	r1, [pc, #224]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003acc:	4838      	ldr	r0, [pc, #224]	; (8003bb0 <SD_RefreshDateTime+0xf0>)
 8003ace:	f005 fb19 	bl	8009104 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4937      	ldr	r1, [pc, #220]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003ad6:	4836      	ldr	r0, [pc, #216]	; (8003bb0 <SD_RefreshDateTime+0xf0>)
 8003ad8:	f005 fc19 	bl	800930e <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 8003adc:	4b33      	ldr	r3, [pc, #204]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3330      	adds	r3, #48	; 0x30
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003aea:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3330      	adds	r3, #48	; 0x30
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003afc:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 8003afe:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003b00:	785b      	ldrb	r3, [r3, #1]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3330      	adds	r3, #48	; 0x30
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b0c:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	3330      	adds	r3, #48	; 0x30
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	4b26      	ldr	r3, [pc, #152]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b1e:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3330      	adds	r3, #48	; 0x30
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b2e:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <SD_RefreshDateTime+0xec>)
 8003b32:	789b      	ldrb	r3, [r3, #2]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3330      	adds	r3, #48	; 0x30
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b40:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b44:	789b      	ldrb	r3, [r3, #2]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3330      	adds	r3, #48	; 0x30
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b50:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b54:	789b      	ldrb	r3, [r3, #2]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3330      	adds	r3, #48	; 0x30
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b62:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 8003b64:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3330      	adds	r3, #48	; 0x30
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b72:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	3330      	adds	r3, #48	; 0x30
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b84:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3330      	adds	r3, #48	; 0x30
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003b94:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <SD_RefreshDateTime+0xf4>)
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3330      	adds	r3, #48	; 0x30
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SD_RefreshDateTime+0xf8>)
 8003ba6:	715a      	strb	r2, [r3, #5]
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20003044 	.word	0x20003044
 8003bb0:	20003358 	.word	0x20003358
 8003bb4:	20000930 	.word	0x20000930
 8003bb8:	20000924 	.word	0x20000924

08003bbc <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af04      	add	r7, sp, #16
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <SD_GetDateTime+0x80>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	461c      	mov	r4, r3
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <SD_GetDateTime+0x80>)
 8003bce:	785b      	ldrb	r3, [r3, #1]
 8003bd0:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <SD_GetDateTime+0x80>)
 8003bd4:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003bd6:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <SD_GetDateTime+0x80>)
 8003bda:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003bdc:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <SD_GetDateTime+0x80>)
 8003be0:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003be2:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <SD_GetDateTime+0x80>)
 8003be6:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	9002      	str	r0, [sp, #8]
 8003bec:	9101      	str	r1, [sp, #4]
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	4912      	ldr	r1, [pc, #72]	; (8003c40 <SD_GetDateTime+0x84>)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f008 fcb4 	bl	800c564 <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <SD_GetDateTime+0x80>)
 8003bfe:	799b      	ldrb	r3, [r3, #6]
 8003c00:	461c      	mov	r4, r3
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <SD_GetDateTime+0x80>)
 8003c04:	79db      	ldrb	r3, [r3, #7]
 8003c06:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <SD_GetDateTime+0x80>)
 8003c0a:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c0c:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <SD_GetDateTime+0x80>)
 8003c10:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c12:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <SD_GetDateTime+0x80>)
 8003c16:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c18:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <SD_GetDateTime+0x80>)
 8003c1c:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003c1e:	9303      	str	r3, [sp, #12]
 8003c20:	9002      	str	r0, [sp, #8]
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	9200      	str	r2, [sp, #0]
 8003c26:	462b      	mov	r3, r5
 8003c28:	4622      	mov	r2, r4
 8003c2a:	4906      	ldr	r1, [pc, #24]	; (8003c44 <SD_GetDateTime+0x88>)
 8003c2c:	6838      	ldr	r0, [r7, #0]
 8003c2e:	f008 fc99 	bl	800c564 <siprintf>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bdb0      	pop	{r4, r5, r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000924 	.word	0x20000924
 8003c40:	0800e0f4 	.word	0x0800e0f4
 8003c44:	0800e104 	.word	0x0800e104

08003c48 <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 8003c52:	f7ff ff05 	bl	8003a60 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3301      	adds	r3, #1
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <SD_SetDateTime+0xb8>)
 8003c6a:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3303      	adds	r3, #3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <SD_SetDateTime+0xb8>)
 8003c82:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3305      	adds	r3, #5
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <SD_SetDateTime+0xb8>)
 8003c9a:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <SD_SetDateTime+0xbc>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	3303      	adds	r3, #3
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <SD_SetDateTime+0xbc>)
 8003cc8:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	4413      	add	r3, r2
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <SD_SetDateTime+0xbc>)
 8003ce0:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <SD_SetDateTime+0xbc>)
 8003ce6:	4808      	ldr	r0, [pc, #32]	; (8003d08 <SD_SetDateTime+0xc0>)
 8003ce8:	f005 f94f 	bl	8008f8a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003cec:	2201      	movs	r2, #1
 8003cee:	4904      	ldr	r1, [pc, #16]	; (8003d00 <SD_SetDateTime+0xb8>)
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <SD_SetDateTime+0xc0>)
 8003cf2:	f005 fa65 	bl	80091c0 <HAL_RTC_SetDate>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000930 	.word	0x20000930
 8003d04:	20003044 	.word	0x20003044
 8003d08:	20003358 	.word	0x20003358

08003d0c <SD_ReadFile>:

char* SD_ReadFile(char *filename, uint32_t *size) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	if (f_open(&_fileH, filename, FA_READ) != FR_OK) {
 8003d16:	2201      	movs	r2, #1
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4817      	ldr	r0, [pc, #92]	; (8003d78 <SD_ReadFile+0x6c>)
 8003d1c:	f002 fbec 	bl	80064f8 <f_open>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <SD_ReadFile+0x24>
		*size = 0;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
		return NULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e01f      	b.n	8003d70 <SD_ReadFile+0x64>
	}

	_SD_ResetBuffer();
 8003d30:	f7ff fe3e 	bl	80039b0 <_SD_ResetBuffer>
	uint32_t index = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

	while (!f_eof(&_fileH)) {
 8003d38:	e00d      	b.n	8003d56 <SD_ReadFile+0x4a>
		_res = f_read(&_fileH, &_buffer[index++], 1, &_readB);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <SD_ReadFile+0x70>)
 8003d42:	1899      	adds	r1, r3, r2
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <SD_ReadFile+0x74>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	480b      	ldr	r0, [pc, #44]	; (8003d78 <SD_ReadFile+0x6c>)
 8003d4a:	f002 fd58 	bl	80067fe <f_read>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <SD_ReadFile+0x78>)
 8003d54:	701a      	strb	r2, [r3, #0]
	while (!f_eof(&_fileH)) {
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <SD_ReadFile+0x6c>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <SD_ReadFile+0x6c>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d1eb      	bne.n	8003d3a <SD_ReadFile+0x2e>
	}

	f_close(&_fileH);
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <SD_ReadFile+0x6c>)
 8003d64:	f003 f865 	bl	8006e32 <f_close>
	*size = index;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]
	return (char*) _buffer;
 8003d6e:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <SD_ReadFile+0x70>)
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20003060 	.word	0x20003060
 8003d7c:	20000934 	.word	0x20000934
 8003d80:	20003058 	.word	0x20003058
 8003d84:	2000305c 	.word	0x2000305c

08003d88 <SD_CreateJson>:
 * 		"hum" : 35,
 * 		"date"   : "03.30.20",
 * 		"time"	 : "12:03:30"
 * }
 */
uint8_t SD_CreateJson(bool innTHS, float data[], char date[], char time[]) {
 8003d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d8a:	b08d      	sub	sp, #52	; 0x34
 8003d8c:	af06      	add	r7, sp, #24
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]
	_SD_ResetBuffer();
 8003d98:	f7ff fe0a 	bl	80039b0 <_SD_ResetBuffer>
	/* oof */
	uint32_t len =
			sprintf((char*) _buffer,
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <SD_CreateJson+0x1e>
 8003da2:	4e21      	ldr	r6, [pc, #132]	; (8003e28 <SD_CreateJson+0xa0>)
 8003da4:	e000      	b.n	8003da8 <SD_CreateJson+0x20>
 8003da6:	4e21      	ldr	r6, [pc, #132]	; (8003e2c <SD_CreateJson+0xa4>)
					"{\r\n\"inn\":%s,\r\n\"temp\":%.0f,\r\n\"hum\":%.0f,\r\n\"date\":\"%s\",\r\n\"time\":\"%s\"\r\n}",
					innTHS ? "true" : "false", data[0], data[1], date, time);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) _buffer,
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fc fbdb 	bl	8000568 <__aeabi_f2d>
 8003db2:	4604      	mov	r4, r0
 8003db4:	460d      	mov	r5, r1
					innTHS ? "true" : "false", data[0], data[1], date, time);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3304      	adds	r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
			sprintf((char*) _buffer,
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fbd3 	bl	8000568 <__aeabi_f2d>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	9105      	str	r1, [sp, #20]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	9104      	str	r1, [sp, #16]
 8003dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dd2:	e9cd 4500 	strd	r4, r5, [sp]
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4915      	ldr	r1, [pc, #84]	; (8003e30 <SD_CreateJson+0xa8>)
 8003dda:	4816      	ldr	r0, [pc, #88]	; (8003e34 <SD_CreateJson+0xac>)
 8003ddc:	f008 fbc2 	bl	800c564 <siprintf>
 8003de0:	4603      	mov	r3, r0
	uint32_t len =
 8003de2:	617b      	str	r3, [r7, #20]

	_SD_GetDiskSpace();
 8003de4:	f7ff fe00 	bl	80039e8 <_SD_GetDiskSpace>

	if (len > DISK_LEFT) {
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <SD_CreateJson+0xb0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d901      	bls.n	8003df6 <SD_CreateJson+0x6e>
		return 1;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e013      	b.n	8003e1e <SD_CreateJson+0x96>
	}

	if (f_open(&_fileH, "wynik.jso", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) {
 8003df6:	2212      	movs	r2, #18
 8003df8:	4910      	ldr	r1, [pc, #64]	; (8003e3c <SD_CreateJson+0xb4>)
 8003dfa:	4811      	ldr	r0, [pc, #68]	; (8003e40 <SD_CreateJson+0xb8>)
 8003dfc:	f002 fb7c 	bl	80064f8 <f_open>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <SD_CreateJson+0x82>
		return 2;
 8003e06:	2302      	movs	r3, #2
 8003e08:	e009      	b.n	8003e1e <SD_CreateJson+0x96>
	}

	f_write(&_fileH, _buffer, len, &_writtenB);
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <SD_CreateJson+0xbc>)
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4909      	ldr	r1, [pc, #36]	; (8003e34 <SD_CreateJson+0xac>)
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <SD_CreateJson+0xb8>)
 8003e12:	f002 fe27 	bl	8006a64 <f_write>

	f_close(&_fileH);
 8003e16:	480a      	ldr	r0, [pc, #40]	; (8003e40 <SD_CreateJson+0xb8>)
 8003e18:	f003 f80b 	bl	8006e32 <f_close>
	return 0;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	0800e114 	.word	0x0800e114
 8003e2c:	0800e11c 	.word	0x0800e11c
 8003e30:	0800e124 	.word	0x0800e124
 8003e34:	20000934 	.word	0x20000934
 8003e38:	20000920 	.word	0x20000920
 8003e3c:	0800e16c 	.word	0x0800e16c
 8003e40:	20003060 	.word	0x20003060
 8003e44:	200006ec 	.word	0x200006ec

08003e48 <THS_Init>:

bool _ready;
uint8_t _readyData[5];
uint32_t _clockCounter;

void THS_Init() {
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <THS_Init+0x1c>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

	_ready = true;
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <THS_Init+0x20>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	2000328c 	.word	0x2000328c
 8003e68:	20003288 	.word	0x20003288

08003e6c <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <THS_Delay+0x2c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8003e7e:	bf00      	nop
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <THS_Delay+0x2c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3f9      	bcc.n	8003e80 <THS_Delay+0x14>
		;
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20003294 	.word	0x20003294

08003e9c <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003ea6:	f107 030c 	add.w	r3, r7, #12
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <_THS_SetPinOutput+0x3c>)
 8003eca:	f004 f88b 	bl	8007fe4 <HAL_GPIO_Init>
}
 8003ece:	bf00      	nop
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40020800 	.word	0x40020800

08003edc <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003f02:	f107 030c 	add.w	r3, r7, #12
 8003f06:	4619      	mov	r1, r3
 8003f08:	4803      	ldr	r0, [pc, #12]	; (8003f18 <_THS_SetPinInput+0x3c>)
 8003f0a:	f004 f86b 	bl	8007fe4 <HAL_GPIO_Init>
}
 8003f0e:	bf00      	nop
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40020800 	.word	0x40020800

08003f1c <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 8003f26:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <_THS_InitConn+0x9c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f083 0301 	eor.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <_THS_InitConn+0x1c>
		return 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e03b      	b.n	8003fb0 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ffae 	bl	8003e9c <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	2200      	movs	r2, #0
 8003f44:	4619      	mov	r1, r3
 8003f46:	481d      	ldr	r0, [pc, #116]	; (8003fbc <_THS_InitConn+0xa0>)
 8003f48:	f004 f9fe 	bl	8008348 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8003f4c:	2012      	movs	r0, #18
 8003f4e:	f003 fef3 	bl	8007d38 <HAL_Delay>
	Write(1);
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4619      	mov	r1, r3
 8003f58:	4818      	ldr	r0, [pc, #96]	; (8003fbc <_THS_InitConn+0xa0>)
 8003f5a:	f004 f9f5 	bl	8008348 <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 8003f5e:	2014      	movs	r0, #20
 8003f60:	f7ff ff84 	bl	8003e6c <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ffb8 	bl	8003edc <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 8003f6c:	2028      	movs	r0, #40	; 0x28
 8003f6e:	f7ff ff7d 	bl	8003e6c <THS_Delay>

	if (!Read()) {
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4811      	ldr	r0, [pc, #68]	; (8003fbc <_THS_InitConn+0xa0>)
 8003f78:	f004 f9ce 	bl	8008318 <HAL_GPIO_ReadPin>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 8003f82:	2050      	movs	r0, #80	; 0x50
 8003f84:	f7ff ff72 	bl	8003e6c <THS_Delay>
		if (!Read()) {
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480b      	ldr	r0, [pc, #44]	; (8003fbc <_THS_InitConn+0xa0>)
 8003f8e:	f004 f9c3 	bl	8008318 <HAL_GPIO_ReadPin>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e009      	b.n	8003fb0 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 8003f9c:	bf00      	nop
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4806      	ldr	r0, [pc, #24]	; (8003fbc <_THS_InitConn+0xa0>)
 8003fa4:	f004 f9b8 	bl	8008318 <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d0f7      	beq.n	8003f9e <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20003288 	.word	0x20003288
 8003fbc:	40020800 	.word	0x40020800

08003fc0 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73bb      	strb	r3, [r7, #14]
 8003fd2:	e02f      	b.n	8004034 <_THS_ReadByte+0x74>
		_clockCounter = 0;
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <_THS_ReadByte+0x84>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8003fda:	e005      	b.n	8003fe8 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <_THS_ReadByte+0x84>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2bc8      	cmp	r3, #200	; 0xc8
 8003fe2:	d901      	bls.n	8003fe8 <_THS_ReadByte+0x28>
				return 255;
 8003fe4:	23ff      	movs	r3, #255	; 0xff
 8003fe6:	e029      	b.n	800403c <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4816      	ldr	r0, [pc, #88]	; (8004048 <_THS_ReadByte+0x88>)
 8003fee:	f004 f993 	bl	8008318 <HAL_GPIO_ReadPin>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f1      	beq.n	8003fdc <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8003ff8:	203c      	movs	r0, #60	; 0x3c
 8003ffa:	f7ff ff37 	bl	8003e6c <THS_Delay>

		byte <<= 1;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	4619      	mov	r1, r3
 8004008:	480f      	ldr	r0, [pc, #60]	; (8004048 <_THS_ReadByte+0x88>)
 800400a:	f004 f985 	bl	8008318 <HAL_GPIO_ReadPin>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 800401c:	bf00      	nop
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4619      	mov	r1, r3
 8004022:	4809      	ldr	r0, [pc, #36]	; (8004048 <_THS_ReadByte+0x88>)
 8004024:	f004 f978 	bl	8008318 <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d0f7      	beq.n	800401e <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 800402e:	7bbb      	ldrb	r3, [r7, #14]
 8004030:	3301      	adds	r3, #1
 8004032:	73bb      	strb	r3, [r7, #14]
 8004034:	7bbb      	ldrb	r3, [r7, #14]
 8004036:	2b07      	cmp	r3, #7
 8004038:	d9cc      	bls.n	8003fd4 <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000328c 	.word	0x2000328c
 8004048:	40020800 	.word	0x40020800

0800404c <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	460a      	mov	r2, r1
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	4613      	mov	r3, r2
 800405a:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 800405c:	79bb      	ldrb	r3, [r7, #6]
 800405e:	f1a3 020a 	sub.w	r2, r3, #10
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	dc06      	bgt.n	8004076 <_THS_CCR_Acceptable+0x2a>
 8004068:	79fa      	ldrb	r2, [r7, #7]
 800406a:	79bb      	ldrb	r3, [r7, #6]
 800406c:	330a      	adds	r3, #10
 800406e:	429a      	cmp	r2, r3
 8004070:	dc01      	bgt.n	8004076 <_THS_CCR_Acceptable+0x2a>
		return 1;
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <_THS_CCR_Acceptable+0x2c>
	return 0;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	6039      	str	r1, [r7, #0]
 800408e:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <THS_ReadData+0x16>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <THS_ReadData+0x18>
 800409a:	2302      	movs	r3, #2
 800409c:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 800409e:	8bfb      	ldrh	r3, [r7, #30]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff3b 	bl	8003f1c <_THS_InitConn>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <THS_ReadData+0x2c>
		return 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e091      	b.n	80041d4 <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff84 	bl	8003fc0 <_THS_ReadByte>
 80040b8:	4603      	mov	r3, r0
 80040ba:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 80040bc:	8bfb      	ldrh	r3, [r7, #30]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ff7e 	bl	8003fc0 <_THS_ReadByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 80040c8:	8bfb      	ldrh	r3, [r7, #30]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ff78 	bl	8003fc0 <_THS_ReadByte>
 80040d0:	4603      	mov	r3, r0
 80040d2:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 80040d4:	8bfb      	ldrh	r3, [r7, #30]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ff72 	bl	8003fc0 <_THS_ReadByte>
 80040dc:	4603      	mov	r3, r0
 80040de:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 80040e0:	8bfb      	ldrh	r3, [r7, #30]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff6c 	bl	8003fc0 <_THS_ReadByte>
 80040e8:	4603      	mov	r3, r0
 80040ea:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 80040ec:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <THS_ReadData+0x158>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 80040f2:	8bbb      	ldrh	r3, [r7, #28]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	b25a      	sxtb	r2, r3
 80040fe:	8b3b      	ldrh	r3, [r7, #24]
 8004100:	b25b      	sxtb	r3, r3
 8004102:	4313      	orrs	r3, r2
 8004104:	b25a      	sxtb	r2, r3
 8004106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800410a:	4313      	orrs	r3, r2
 800410c:	b25b      	sxtb	r3, r3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	7dbb      	ldrb	r3, [r7, #22]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff99 	bl	800404c <_THS_CCR_Acceptable>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d04f      	beq.n	80041c0 <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 8004120:	8b3b      	ldrh	r3, [r7, #24]
 8004122:	021a      	lsls	r2, r3, #8
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	4313      	orrs	r3, r2
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004130:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80041e0 <THS_ReadData+0x15c>
 8004134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004138:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 800413c:	8bbb      	ldrh	r3, [r7, #28]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	7efb      	ldrb	r3, [r7, #27]
 8004142:	4313      	orrs	r3, r2
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80041e0 <THS_ReadData+0x15c>
 8004150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004154:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8004158:	edd7 7a04 	vldr	s15, [r7, #16]
 800415c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	d418      	bmi.n	8004198 <THS_ReadData+0x114>
 8004166:	edd7 7a04 	vldr	s15, [r7, #16]
 800416a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80041e4 <THS_ReadData+0x160>
 800416e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	dc0f      	bgt.n	8004198 <THS_ReadData+0x114>
 8004178:	edd7 7a03 	vldr	s15, [r7, #12]
 800417c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004184:	d408      	bmi.n	8004198 <THS_ReadData+0x114>
 8004186:	edd7 7a03 	vldr	s15, [r7, #12]
 800418a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80041e8 <THS_ReadData+0x164>
 800418e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	dd0a      	ble.n	80041ae <THS_ReadData+0x12a>
			data[0] = 0.f;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	3304      	adds	r3, #4
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
			return 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e012      	b.n	80041d4 <THS_ReadData+0x150>
		}
		data[0] = t;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	601a      	str	r2, [r3, #0]
		data[1] = r;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	3304      	adds	r3, #4
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]
		return 1;
 80041bc:	2301      	movs	r3, #1
 80041be:	e009      	b.n	80041d4 <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3304      	adds	r3, #4
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	return 0;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20003288 	.word	0x20003288
 80041e0:	43800000 	.word	0x43800000
 80041e4:	42480000 	.word	0x42480000
 80041e8:	42c80000 	.word	0x42c80000

080041ec <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <THS_ErrorClock+0x30>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f8:	d905      	bls.n	8004206 <THS_ErrorClock+0x1a>
		_ready = true;
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <THS_ErrorClock+0x34>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <THS_ErrorClock+0x30>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <THS_ErrorClock+0x30>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <THS_ErrorClock+0x30>)
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	2000328c 	.word	0x2000328c
 8004220:	20003288 	.word	0x20003288

08004224 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0

}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <DESELECT>:

static
inline void DESELECT(void)
{
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0

}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800424a:	bf00      	nop
 800424c:	4808      	ldr	r0, [pc, #32]	; (8004270 <xmit_spi+0x30>)
 800424e:	f005 fcb9 	bl	8009bc4 <HAL_SPI_GetState>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d1f9      	bne.n	800424c <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8004258:	1df9      	adds	r1, r7, #7
 800425a:	f241 3388 	movw	r3, #5000	; 0x1388
 800425e:	2201      	movs	r2, #1
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <xmit_spi+0x30>)
 8004262:	f005 f9d9 	bl	8009618 <HAL_SPI_Transmit>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20003378 	.word	0x20003378

08004274 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 800427a:	23ff      	movs	r3, #255	; 0xff
 800427c:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004282:	bf00      	nop
 8004284:	4809      	ldr	r0, [pc, #36]	; (80042ac <rcvr_spi+0x38>)
 8004286:	f005 fc9d 	bl	8009bc4 <HAL_SPI_GetState>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d1f9      	bne.n	8004284 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8004290:	1dba      	adds	r2, r7, #6
 8004292:	1df9      	adds	r1, r7, #7
 8004294:	f241 3388 	movw	r3, #5000	; 0x1388
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2301      	movs	r3, #1
 800429c:	4803      	ldr	r0, [pc, #12]	; (80042ac <rcvr_spi+0x38>)
 800429e:	f005 faef 	bl	8009880 <HAL_SPI_TransmitReceive>

	return Data;
 80042a2:	79bb      	ldrb	r3, [r7, #6]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20003378 	.word	0x20003378

080042b0 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 80042b8:	f7ff ffdc 	bl	8004274 <rcvr_spi>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	701a      	strb	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <wait_ready+0x34>)
 80042d4:	2232      	movs	r2, #50	; 0x32
 80042d6:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 80042d8:	f7ff ffcc 	bl	8004274 <rcvr_spi>
	do
		res = rcvr_spi();
 80042dc:	f7ff ffca 	bl	8004274 <rcvr_spi>
 80042e0:	4603      	mov	r3, r0
 80042e2:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	d004      	beq.n	80042f4 <wait_ready+0x28>
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <wait_ready+0x34>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f3      	bne.n	80042dc <wait_ready+0x10>

	return res;
 80042f4:	79fb      	ldrb	r3, [r7, #7]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000255 	.word	0x20000255

08004304 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 800430a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800430e:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8004310:	f7ff ff8f 	bl	8004232 <DESELECT>

	for (i = 0; i < 10; i++)
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
 8004318:	e005      	b.n	8004326 <power_on+0x22>
		xmit_spi(0xFF);
 800431a:	20ff      	movs	r0, #255	; 0xff
 800431c:	f7ff ff90 	bl	8004240 <xmit_spi>
	for (i = 0; i < 10; i++)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	3301      	adds	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d9f6      	bls.n	800431a <power_on+0x16>

	SELECT();
 800432c:	f7ff ff7a 	bl	8004224 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8004344:	2395      	movs	r3, #149	; 0x95
 8004346:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e00b      	b.n	8004366 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	f107 0210 	add.w	r2, r7, #16
 8004354:	4413      	add	r3, r2
 8004356:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff70 	bl	8004240 <xmit_spi>
	for (i = 0; i < 6; i++)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	3301      	adds	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d9f0      	bls.n	800434e <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 800436c:	e002      	b.n	8004374 <power_on+0x70>
		Count--;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3b01      	subs	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8004374:	f7ff ff7e 	bl	8004274 <rcvr_spi>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d002      	beq.n	8004384 <power_on+0x80>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f4      	bne.n	800436e <power_on+0x6a>

	DESELECT();
 8004384:	f7ff ff55 	bl	8004232 <DESELECT>
	xmit_spi(0XFF);
 8004388:	20ff      	movs	r0, #255	; 0xff
 800438a:	f7ff ff59 	bl	8004240 <xmit_spi>

	PowerFlag = 1;
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <power_on+0x98>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000257 	.word	0x20000257

080043a0 <power_off>:

static
void power_off(void) {
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <power_off+0x14>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	20000257 	.word	0x20000257

080043b8 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
	return PowerFlag;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <chk_power+0x14>)
 80043be:	781b      	ldrb	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000257 	.word	0x20000257

080043d0 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <rcvr_datablock+0x68>)
 80043dc:	220a      	movs	r2, #10
 80043de:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 80043e0:	f7ff ff48 	bl	8004274 <rcvr_spi>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2bff      	cmp	r3, #255	; 0xff
 80043ec:	d104      	bne.n	80043f8 <rcvr_datablock+0x28>
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <rcvr_datablock+0x68>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f3      	bne.n	80043e0 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2bfe      	cmp	r3, #254	; 0xfe
 80043fc:	d001      	beq.n	8004402 <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80043fe:	2300      	movs	r3, #0
 8004400:	e016      	b.n	8004430 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff51 	bl	80042b0 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff4b 	bl	80042b0 <rcvr_spi_m>
	} while (btr -= 2);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3b02      	subs	r3, #2
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ed      	bne.n	8004402 <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8004426:	f7ff ff25 	bl	8004274 <rcvr_spi>
	rcvr_spi();
 800442a:	f7ff ff23 	bl	8004274 <rcvr_spi>

	return TRUE; /* Return with success */
 800442e:	2301      	movs	r3, #1
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000254 	.word	0x20000254

0800443c <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 800444c:	f7ff ff3e 	bl	80042cc <wait_ready>
 8004450:	4603      	mov	r3, r0
 8004452:	2bff      	cmp	r3, #255	; 0xff
 8004454:	d001      	beq.n	800445a <xmit_datablock+0x1e>
		return FALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	e040      	b.n	80044dc <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff feef 	bl	8004240 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	2bfd      	cmp	r3, #253	; 0xfd
 8004466:	d031      	beq.n	80044cc <xmit_datablock+0x90>
		wc = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fee3 	bl	8004240 <xmit_spi>
			xmit_spi(*buff++);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fedc 	bl	8004240 <xmit_spi>
		} while (--wc);
 8004488:	7bbb      	ldrb	r3, [r7, #14]
 800448a:	3b01      	subs	r3, #1
 800448c:	73bb      	strb	r3, [r7, #14]
 800448e:	7bbb      	ldrb	r3, [r7, #14]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1eb      	bne.n	800446c <xmit_datablock+0x30>

		rcvr_spi();
 8004494:	f7ff feee 	bl	8004274 <rcvr_spi>
		rcvr_spi();
 8004498:	f7ff feec 	bl	8004274 <rcvr_spi>

		while (i <= 64) {
 800449c:	e00b      	b.n	80044b6 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 800449e:	f7ff fee9 	bl	8004274 <rcvr_spi>
 80044a2:	4603      	mov	r3, r0
 80044a4:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d006      	beq.n	80044be <xmit_datablock+0x82>
				break;
			i++;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d9f0      	bls.n	800449e <xmit_datablock+0x62>
 80044bc:	e000      	b.n	80044c0 <xmit_datablock+0x84>
				break;
 80044be:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 80044c0:	bf00      	nop
 80044c2:	f7ff fed7 	bl	8004274 <rcvr_spi>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0fa      	beq.n	80044c2 <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d101      	bne.n	80044da <xmit_datablock+0x9e>
		return TRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xmit_datablock+0xa0>
	else
		return FALSE;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	6039      	str	r1, [r7, #0]
 80044ee:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80044f0:	f7ff feec 	bl	80042cc <wait_ready>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2bff      	cmp	r3, #255	; 0xff
 80044f8:	d001      	beq.n	80044fe <send_cmd+0x1a>
		return 0xFF;
 80044fa:	23ff      	movs	r3, #255	; 0xff
 80044fc:	e040      	b.n	8004580 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fe9d 	bl	8004240 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	0e1b      	lsrs	r3, r3, #24
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe97 	bl	8004240 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fe91 	bl	8004240 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe8b 	bl	8004240 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fe86 	bl	8004240 <xmit_spi>
	n = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d101      	bne.n	8004542 <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800453e:	2395      	movs	r3, #149	; 0x95
 8004540:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b48      	cmp	r3, #72	; 0x48
 8004546:	d101      	bne.n	800454c <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8004548:	2387      	movs	r3, #135	; 0x87
 800454a:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fe76 	bl	8004240 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	2b4c      	cmp	r3, #76	; 0x4c
 8004558:	d101      	bne.n	800455e <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 800455a:	f7ff fe8b 	bl	8004274 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 800455e:	230a      	movs	r3, #10
 8004560:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8004562:	f7ff fe87 	bl	8004274 <rcvr_spi>
 8004566:	4603      	mov	r3, r0
 8004568:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 800456a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800456e:	2b00      	cmp	r3, #0
 8004570:	da05      	bge.n	800457e <send_cmd+0x9a>
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	3b01      	subs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f1      	bne.n	8004562 <send_cmd+0x7e>

	return res; /* Return with the response value */
 800457e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004598:	2301      	movs	r3, #1
 800459a:	e0d5      	b.n	8004748 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 800459c:	4b6c      	ldr	r3, [pc, #432]	; (8004750 <disk_initialize+0x1c8>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80045aa:	4b69      	ldr	r3, [pc, #420]	; (8004750 <disk_initialize+0x1c8>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	e0ca      	b.n	8004748 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80045b2:	f7ff fea7 	bl	8004304 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80045b6:	f7ff fe35 	bl	8004224 <SELECT>
	ty = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80045be:	2100      	movs	r1, #0
 80045c0:	2040      	movs	r0, #64	; 0x40
 80045c2:	f7ff ff8f 	bl	80044e4 <send_cmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f040 80a5 	bne.w	8004718 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80045ce:	4b61      	ldr	r3, [pc, #388]	; (8004754 <disk_initialize+0x1cc>)
 80045d0:	2264      	movs	r2, #100	; 0x64
 80045d2:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 80045d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045d8:	2048      	movs	r0, #72	; 0x48
 80045da:	f7ff ff83 	bl	80044e4 <send_cmd>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d158      	bne.n	8004696 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
 80045e8:	e00c      	b.n	8004604 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 80045ea:	7bfc      	ldrb	r4, [r7, #15]
 80045ec:	f7ff fe42 	bl	8004274 <rcvr_spi>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	4423      	add	r3, r4
 80045fa:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	3301      	adds	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b03      	cmp	r3, #3
 8004608:	d9ef      	bls.n	80045ea <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 800460a:	7abb      	ldrb	r3, [r7, #10]
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 8083 	bne.w	8004718 <disk_initialize+0x190>
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	2baa      	cmp	r3, #170	; 0xaa
 8004616:	d17f      	bne.n	8004718 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8004618:	2100      	movs	r1, #0
 800461a:	2077      	movs	r0, #119	; 0x77
 800461c:	f7ff ff62 	bl	80044e4 <send_cmd>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d807      	bhi.n	8004636 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8004626:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800462a:	2069      	movs	r0, #105	; 0x69
 800462c:	f7ff ff5a 	bl	80044e4 <send_cmd>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <disk_initialize+0x1cc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1eb      	bne.n	8004618 <disk_initialize+0x90>
 8004640:	e000      	b.n	8004644 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8004642:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8004644:	4b43      	ldr	r3, [pc, #268]	; (8004754 <disk_initialize+0x1cc>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d064      	beq.n	8004718 <disk_initialize+0x190>
 800464e:	2100      	movs	r1, #0
 8004650:	207a      	movs	r0, #122	; 0x7a
 8004652:	f7ff ff47 	bl	80044e4 <send_cmd>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d15d      	bne.n	8004718 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e00c      	b.n	800467c <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 8004662:	7bfc      	ldrb	r4, [r7, #15]
 8004664:	f7ff fe06 	bl	8004274 <rcvr_spi>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4423      	add	r3, r4
 8004672:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	3301      	adds	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d9ef      	bls.n	8004662 <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 8004682:	7a3b      	ldrb	r3, [r7, #8]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <disk_initialize+0x108>
 800468c:	2306      	movs	r3, #6
 800468e:	e000      	b.n	8004692 <disk_initialize+0x10a>
 8004690:	2302      	movs	r3, #2
 8004692:	73bb      	strb	r3, [r7, #14]
 8004694:	e040      	b.n	8004718 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8004696:	2100      	movs	r1, #0
 8004698:	2077      	movs	r0, #119	; 0x77
 800469a:	f7ff ff23 	bl	80044e4 <send_cmd>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d808      	bhi.n	80046b6 <disk_initialize+0x12e>
 80046a4:	2100      	movs	r1, #0
 80046a6:	2069      	movs	r0, #105	; 0x69
 80046a8:	f7ff ff1c 	bl	80044e4 <send_cmd>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d801      	bhi.n	80046b6 <disk_initialize+0x12e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e000      	b.n	80046b8 <disk_initialize+0x130>
 80046b6:	2301      	movs	r3, #1
 80046b8:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d10e      	bne.n	80046de <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80046c0:	2100      	movs	r1, #0
 80046c2:	2077      	movs	r0, #119	; 0x77
 80046c4:	f7ff ff0e 	bl	80044e4 <send_cmd>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d80e      	bhi.n	80046ec <disk_initialize+0x164>
 80046ce:	2100      	movs	r1, #0
 80046d0:	2069      	movs	r0, #105	; 0x69
 80046d2:	f7ff ff07 	bl	80044e4 <send_cmd>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d107      	bne.n	80046ec <disk_initialize+0x164>
						break; /* ACMD41 */
 80046dc:	e00d      	b.n	80046fa <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 80046de:	2100      	movs	r1, #0
 80046e0:	2041      	movs	r0, #65	; 0x41
 80046e2:	f7ff feff 	bl	80044e4 <send_cmd>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80046ec:	4b19      	ldr	r3, [pc, #100]	; (8004754 <disk_initialize+0x1cc>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e1      	bne.n	80046ba <disk_initialize+0x132>
 80046f6:	e000      	b.n	80046fa <disk_initialize+0x172>
						break; /* CMD1 */
 80046f8:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <disk_initialize+0x1cc>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <disk_initialize+0x18c>
 8004704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004708:	2050      	movs	r0, #80	; 0x50
 800470a:	f7ff feeb 	bl	80044e4 <send_cmd>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <disk_initialize+0x190>
				ty = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8004718:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <disk_initialize+0x1d0>)
 800471a:	7bbb      	ldrb	r3, [r7, #14]
 800471c:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800471e:	f7ff fd88 	bl	8004232 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004722:	f7ff fda7 	bl	8004274 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8004726:	7bbb      	ldrb	r3, [r7, #14]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 800472c:	4b08      	ldr	r3, [pc, #32]	; (8004750 <disk_initialize+0x1c8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <disk_initialize+0x1c8>)
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e001      	b.n	8004742 <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800473e:	f7ff fe2f 	bl	80043a0 <power_off>

	return Stat;
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <disk_initialize+0x1c8>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	20000058 	.word	0x20000058
 8004754:	20000254 	.word	0x20000254
 8004758:	20000256 	.word	0x20000256

0800475c <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 800476c:	2301      	movs	r3, #1
 800476e:	e002      	b.n	8004776 <disk_status+0x1a>
	return Stat;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <disk_status+0x28>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000058 	.word	0x20000058

08004788 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <disk_read+0x1c>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <disk_read+0x20>
		return RES_PARERR;
 80047a4:	2304      	movs	r3, #4
 80047a6:	e051      	b.n	800484c <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80047a8:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <disk_read+0xcc>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <disk_read+0x32>
		return RES_NOTRDY;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e048      	b.n	800484c <disk_read+0xc4>

	if (!(CardType & 4))
 80047ba:	4b27      	ldr	r3, [pc, #156]	; (8004858 <disk_read+0xd0>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	025b      	lsls	r3, r3, #9
 80047ca:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80047cc:	f7ff fd2a 	bl	8004224 <SELECT>

	if (count == 1) { /* Single block read */
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d111      	bne.n	80047fa <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	2051      	movs	r0, #81	; 0x51
 80047da:	f7ff fe83 	bl	80044e4 <send_cmd>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d129      	bne.n	8004838 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 80047e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f7ff fdf1 	bl	80043d0 <rcvr_datablock>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d021      	beq.n	8004838 <disk_read+0xb0>
			count = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	e01e      	b.n	8004838 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	2052      	movs	r0, #82	; 0x52
 80047fe:	f7ff fe71 	bl	80044e4 <send_cmd>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d117      	bne.n	8004838 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8004808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	f7ff fddf 	bl	80043d0 <rcvr_datablock>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <disk_read+0xa6>
					break;
				buff += 512;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800481e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1ed      	bne.n	8004808 <disk_read+0x80>
 800482c:	e000      	b.n	8004830 <disk_read+0xa8>
					break;
 800482e:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8004830:	2100      	movs	r1, #0
 8004832:	204c      	movs	r0, #76	; 0x4c
 8004834:	f7ff fe56 	bl	80044e4 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8004838:	f7ff fcfb 	bl	8004232 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800483c:	f7ff fd1a 	bl	8004274 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf14      	ite	ne
 8004846:	2301      	movne	r3, #1
 8004848:	2300      	moveq	r3, #0
 800484a:	b2db      	uxtb	r3, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000058 	.word	0x20000058
 8004858:	20000256 	.word	0x20000256

0800485c <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <disk_write+0x1c>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <disk_write+0x20>
		return RES_PARERR;
 8004878:	2304      	movs	r3, #4
 800487a:	e06b      	b.n	8004954 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 800487c:	4b37      	ldr	r3, [pc, #220]	; (800495c <disk_write+0x100>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <disk_write+0x32>
		return RES_NOTRDY;
 800488a:	2303      	movs	r3, #3
 800488c:	e062      	b.n	8004954 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 800488e:	4b33      	ldr	r3, [pc, #204]	; (800495c <disk_write+0x100>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <disk_write+0x44>
		return RES_WRPRT;
 800489c:	2302      	movs	r3, #2
 800489e:	e059      	b.n	8004954 <disk_write+0xf8>

	if (!(CardType & 4))
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <disk_write+0x104>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d102      	bne.n	80048b2 <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	025b      	lsls	r3, r3, #9
 80048b0:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80048b2:	f7ff fcb7 	bl	8004224 <SELECT>

	if (count == 1) { /* Single block write */
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d110      	bne.n	80048de <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	2058      	movs	r0, #88	; 0x58
 80048c0:	f7ff fe10 	bl	80044e4 <send_cmd>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d13a      	bne.n	8004940 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80048ca:	21fe      	movs	r1, #254	; 0xfe
 80048cc:	68b8      	ldr	r0, [r7, #8]
 80048ce:	f7ff fdb5 	bl	800443c <xmit_datablock>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d033      	beq.n	8004940 <disk_write+0xe4>
			count = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	e030      	b.n	8004940 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <disk_write+0x104>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <disk_write+0x9e>
			send_cmd(CMD55, 0);
 80048ea:	2100      	movs	r1, #0
 80048ec:	2077      	movs	r0, #119	; 0x77
 80048ee:	f7ff fdf9 	bl	80044e4 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	2057      	movs	r0, #87	; 0x57
 80048f6:	f7ff fdf5 	bl	80044e4 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	2059      	movs	r0, #89	; 0x59
 80048fe:	f7ff fdf1 	bl	80044e4 <send_cmd>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11b      	bne.n	8004940 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8004908:	21fc      	movs	r1, #252	; 0xfc
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f7ff fd96 	bl	800443c <xmit_datablock>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <disk_write+0xd0>
					break;
				buff += 512;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800491c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ee      	bne.n	8004908 <disk_write+0xac>
 800492a:	e000      	b.n	800492e <disk_write+0xd2>
					break;
 800492c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800492e:	21fd      	movs	r1, #253	; 0xfd
 8004930:	2000      	movs	r0, #0
 8004932:	f7ff fd83 	bl	800443c <xmit_datablock>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <disk_write+0xe4>
				count = 1;
 800493c:	2301      	movs	r3, #1
 800493e:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8004940:	f7ff fc77 	bl	8004232 <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004944:	f7ff fc96 	bl	8004274 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20000058 	.word	0x20000058
 8004960:	20000256 	.word	0x20000256

08004964 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08b      	sub	sp, #44	; 0x2c
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	603a      	str	r2, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
 8004970:	460b      	mov	r3, r1
 8004972:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <disk_ioctl+0x1e>
		return RES_PARERR;
 800497e:	2304      	movs	r3, #4
 8004980:	e16a      	b.n	8004c58 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8004988:	79bb      	ldrb	r3, [r7, #6]
 800498a:	2b07      	cmp	r3, #7
 800498c:	d127      	bne.n	80049de <disk_ioctl+0x7a>
		switch (*ptr) {
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d00e      	beq.n	80049b4 <disk_ioctl+0x50>
 8004996:	2b02      	cmp	r3, #2
 8004998:	d012      	beq.n	80049c0 <disk_ioctl+0x5c>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11b      	bne.n	80049d6 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 800499e:	f7ff fd0b 	bl	80043b8 <chk_power>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <disk_ioctl+0x48>
				power_off(); /* Power off */
 80049a8:	f7ff fcfa 	bl	80043a0 <power_off>
			res = RES_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80049b2:	e14f      	b.n	8004c54 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80049b4:	f7ff fca6 	bl	8004304 <power_on>
			res = RES_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80049be:	e149      	b.n	8004c54 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 80049c0:	f7ff fcfa 	bl	80043b8 <chk_power>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	3301      	adds	r3, #1
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80049d4:	e13e      	b.n	8004c54 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 80049d6:	2304      	movs	r3, #4
 80049d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049dc:	e13a      	b.n	8004c54 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 80049de:	4ba0      	ldr	r3, [pc, #640]	; (8004c60 <disk_ioctl+0x2fc>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e133      	b.n	8004c58 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 80049f0:	f7ff fc18 	bl	8004224 <SELECT>

		switch (ctrl) {
 80049f4:	79bb      	ldrb	r3, [r7, #6]
 80049f6:	2b35      	cmp	r3, #53	; 0x35
 80049f8:	f200 811d 	bhi.w	8004c36 <disk_ioctl+0x2d2>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <disk_ioctl+0xa0>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004b9f 	.word	0x08004b9f
 8004a08:	08004add 	.word	0x08004add
 8004a0c:	08004b8f 	.word	0x08004b8f
 8004a10:	08004c37 	.word	0x08004c37
 8004a14:	08004c37 	.word	0x08004c37
 8004a18:	08004c37 	.word	0x08004c37
 8004a1c:	08004c37 	.word	0x08004c37
 8004a20:	08004c37 	.word	0x08004c37
 8004a24:	08004c37 	.word	0x08004c37
 8004a28:	08004c37 	.word	0x08004c37
 8004a2c:	08004c37 	.word	0x08004c37
 8004a30:	08004c37 	.word	0x08004c37
 8004a34:	08004c37 	.word	0x08004c37
 8004a38:	08004c37 	.word	0x08004c37
 8004a3c:	08004c37 	.word	0x08004c37
 8004a40:	08004c37 	.word	0x08004c37
 8004a44:	08004c37 	.word	0x08004c37
 8004a48:	08004c37 	.word	0x08004c37
 8004a4c:	08004c37 	.word	0x08004c37
 8004a50:	08004c37 	.word	0x08004c37
 8004a54:	08004c37 	.word	0x08004c37
 8004a58:	08004c37 	.word	0x08004c37
 8004a5c:	08004c37 	.word	0x08004c37
 8004a60:	08004c37 	.word	0x08004c37
 8004a64:	08004c37 	.word	0x08004c37
 8004a68:	08004c37 	.word	0x08004c37
 8004a6c:	08004c37 	.word	0x08004c37
 8004a70:	08004c37 	.word	0x08004c37
 8004a74:	08004c37 	.word	0x08004c37
 8004a78:	08004c37 	.word	0x08004c37
 8004a7c:	08004c37 	.word	0x08004c37
 8004a80:	08004c37 	.word	0x08004c37
 8004a84:	08004c37 	.word	0x08004c37
 8004a88:	08004c37 	.word	0x08004c37
 8004a8c:	08004c37 	.word	0x08004c37
 8004a90:	08004c37 	.word	0x08004c37
 8004a94:	08004c37 	.word	0x08004c37
 8004a98:	08004c37 	.word	0x08004c37
 8004a9c:	08004c37 	.word	0x08004c37
 8004aa0:	08004c37 	.word	0x08004c37
 8004aa4:	08004c37 	.word	0x08004c37
 8004aa8:	08004c37 	.word	0x08004c37
 8004aac:	08004c37 	.word	0x08004c37
 8004ab0:	08004c37 	.word	0x08004c37
 8004ab4:	08004c37 	.word	0x08004c37
 8004ab8:	08004c37 	.word	0x08004c37
 8004abc:	08004c37 	.word	0x08004c37
 8004ac0:	08004c37 	.word	0x08004c37
 8004ac4:	08004c37 	.word	0x08004c37
 8004ac8:	08004c37 	.word	0x08004c37
 8004acc:	08004c37 	.word	0x08004c37
 8004ad0:	08004bb1 	.word	0x08004bb1
 8004ad4:	08004bd5 	.word	0x08004bd5
 8004ad8:	08004bf9 	.word	0x08004bf9
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004adc:	2100      	movs	r1, #0
 8004ade:	2049      	movs	r0, #73	; 0x49
 8004ae0:	f7ff fd00 	bl	80044e4 <send_cmd>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80a9 	bne.w	8004c3e <disk_ioctl+0x2da>
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	2110      	movs	r1, #16
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fc6c 	bl	80043d0 <rcvr_datablock>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 809f 	beq.w	8004c3e <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8004b00:	7b3b      	ldrb	r3, [r7, #12]
 8004b02:	099b      	lsrs	r3, r3, #6
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d10e      	bne.n	8004b28 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004b0a:	7d7b      	ldrb	r3, [r7, #21]
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	7d3b      	ldrb	r3, [r7, #20]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004b1e:	8bfb      	ldrh	r3, [r7, #30]
 8004b20:	029a      	lsls	r2, r3, #10
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e02e      	b.n	8004b86 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8004b28:	7c7b      	ldrb	r3, [r7, #17]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	7dbb      	ldrb	r3, [r7, #22]
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8004b3a:	7d7b      	ldrb	r3, [r7, #21]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 0306 	and.w	r3, r3, #6
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8004b50:	7d3b      	ldrb	r3, [r7, #20]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8004b64:	7cbb      	ldrb	r3, [r7, #18]
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8004b74:	3301      	adds	r3, #1
 8004b76:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004b78:	8bfa      	ldrh	r2, [r7, #30]
 8004b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b7e:	3b09      	subs	r3, #9
 8004b80:	409a      	lsls	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004b8c:	e057      	b.n	8004c3e <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b94:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004b9c:	e056      	b.n	8004c4c <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8004b9e:	f7ff fb95 	bl	80042cc <wait_ready>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2bff      	cmp	r3, #255	; 0xff
 8004ba6:	d14c      	bne.n	8004c42 <disk_ioctl+0x2de>
				res = RES_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bae:	e048      	b.n	8004c42 <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2049      	movs	r0, #73	; 0x49
 8004bb4:	f7ff fc96 	bl	80044e4 <send_cmd>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d143      	bne.n	8004c46 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8004bbe:	2110      	movs	r1, #16
 8004bc0:	6a38      	ldr	r0, [r7, #32]
 8004bc2:	f7ff fc05 	bl	80043d0 <rcvr_datablock>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d03c      	beq.n	8004c46 <disk_ioctl+0x2e2>
				res = RES_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bd2:	e038      	b.n	8004c46 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	204a      	movs	r0, #74	; 0x4a
 8004bd8:	f7ff fc84 	bl	80044e4 <send_cmd>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d133      	bne.n	8004c4a <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8004be2:	2110      	movs	r1, #16
 8004be4:	6a38      	ldr	r0, [r7, #32]
 8004be6:	f7ff fbf3 	bl	80043d0 <rcvr_datablock>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d02c      	beq.n	8004c4a <disk_ioctl+0x2e6>
				res = RES_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bf6:	e028      	b.n	8004c4a <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	207a      	movs	r0, #122	; 0x7a
 8004bfc:	f7ff fc72 	bl	80044e4 <send_cmd>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d117      	bne.n	8004c36 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c0c:	e00b      	b.n	8004c26 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8004c0e:	6a3c      	ldr	r4, [r7, #32]
 8004c10:	1c63      	adds	r3, r4, #1
 8004c12:	623b      	str	r3, [r7, #32]
 8004c14:	f7ff fb2e 	bl	8004274 <rcvr_spi>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c20:	3301      	adds	r3, #1
 8004c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d9ef      	bls.n	8004c0e <disk_ioctl+0x2aa>
				res = RES_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8004c34:	e00a      	b.n	8004c4c <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8004c36:	2304      	movs	r3, #4
 8004c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c3c:	e006      	b.n	8004c4c <disk_ioctl+0x2e8>
			break;
 8004c3e:	bf00      	nop
 8004c40:	e004      	b.n	8004c4c <disk_ioctl+0x2e8>
			break;
 8004c42:	bf00      	nop
 8004c44:	e002      	b.n	8004c4c <disk_ioctl+0x2e8>
			break;
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <disk_ioctl+0x2e8>
			break;
 8004c4a:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8004c4c:	f7ff faf1 	bl	8004232 <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8004c50:	f7ff fb10 	bl	8004274 <rcvr_spi>
	}

	return res;
 8004c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	372c      	adds	r7, #44	; 0x2c
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd90      	pop	{r4, r7, pc}
 8004c60:	20000058 	.word	0x20000058

08004c64 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <disk_timerproc+0x44>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <disk_timerproc+0x1e>
		Timer1 = --n;
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	71fb      	strb	r3, [r7, #7]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <disk_timerproc+0x44>)
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <disk_timerproc+0x48>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <disk_timerproc+0x36>
		Timer2 = --n;
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	71fb      	strb	r3, [r7, #7]
 8004c94:	4a05      	ldr	r2, [pc, #20]	; (8004cac <disk_timerproc+0x48>)
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	7013      	strb	r3, [r2, #0]

}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000254 	.word	0x20000254
 8004cac:	20000255 	.word	0x20000255

08004cb0 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <sdcard_systick_timerproc+0x2c>)
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <sdcard_systick_timerproc+0x2c>)
 8004cc0:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <sdcard_systick_timerproc+0x2c>)
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	d904      	bls.n	8004cd6 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <sdcard_systick_timerproc+0x2c>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8004cd2:	f7ff ffc7 	bl	8004c64 <disk_timerproc>
	}
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20003290 	.word	0x20003290

08004ce0 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8004ce4:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	36c55cc0 	.word	0x36c55cc0

08004cf4 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d04:	89fb      	ldrh	r3, [r7, #14]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	b21a      	sxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b21b      	sxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b21b      	sxth	r3, r3
 8004d14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d16:	89fb      	ldrh	r3, [r7, #14]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3303      	adds	r3, #3
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	3202      	adds	r2, #2
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	3201      	adds	r2, #1
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	7812      	ldrb	r2, [r2, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	887b      	ldrh	r3, [r7, #2]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	1c53      	adds	r3, r2, #1
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	6179      	str	r1, [r7, #20]
 8004e1e:	7812      	ldrb	r2, [r2, #0]
 8004e20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f1      	bne.n	8004e12 <mem_cpy+0x1a>
	}
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	617a      	str	r2, [r7, #20]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f3      	bne.n	8004e4a <mem_set+0x10>
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b089      	sub	sp, #36	; 0x24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	61fa      	str	r2, [r7, #28]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	61ba      	str	r2, [r7, #24]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	1acb      	subs	r3, r1, r3
 8004e9a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <mem_cmp+0x40>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0eb      	beq.n	8004e86 <mem_cmp+0x18>

	return r;
 8004eae:	697b      	ldr	r3, [r7, #20]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3724      	adds	r7, #36	; 0x24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ec6:	e002      	b.n	8004ece <chk_chr+0x12>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <chk_chr+0x26>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d1f2      	bne.n	8004ec8 <chk_chr+0xc>
	return *str;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8004efc:	2281      	movs	r2, #129	; 0x81
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d30f      	bcc.n	8004f24 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8004f04:	229f      	movs	r2, #159	; 0x9f
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d801      	bhi.n	8004f10 <dbc_1st+0x1e>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e00a      	b.n	8004f26 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8004f10:	22e0      	movs	r2, #224	; 0xe0
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d305      	bcc.n	8004f24 <dbc_1st+0x32>
 8004f18:	22fc      	movs	r2, #252	; 0xfc
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d801      	bhi.n	8004f24 <dbc_1st+0x32>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	4603      	mov	r3, r0
 8004f3a:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d319      	bcc.n	8004f78 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8004f44:	227e      	movs	r2, #126	; 0x7e
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d801      	bhi.n	8004f50 <dbc_2nd+0x1e>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e014      	b.n	8004f7a <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d305      	bcc.n	8004f64 <dbc_2nd+0x32>
 8004f58:	22fc      	movs	r2, #252	; 0xfc
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d801      	bhi.n	8004f64 <dbc_2nd+0x32>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e00a      	b.n	8004f7a <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8004f64:	2200      	movs	r2, #0
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d305      	bcc.n	8004f78 <dbc_2nd+0x46>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d801      	bhi.n	8004f78 <dbc_2nd+0x46>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d02c      	beq.n	8004ff4 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7858      	ldrb	r0, [r3, #1]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f7ff fc57 	bl	800485c <disk_write>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11d      	bne.n	8004ff0 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d213      	bcs.n	8004ff4 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	789b      	ldrb	r3, [r3, #2]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d10f      	bne.n	8004ff4 <sync_window+0x6e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7858      	ldrb	r0, [r3, #1]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f7ff fc37 	bl	800485c <disk_write>
 8004fee:	e001      	b.n	8004ff4 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d01b      	beq.n	800504e <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ffb5 	bl	8004f86 <sync_window>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d113      	bne.n	800504e <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7858      	ldrb	r0, [r3, #1]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005030:	2301      	movs	r3, #1
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	f7ff fba8 	bl	8004788 <disk_read>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff90 	bl	8004f86 <sync_window>
 8005066:	4603      	mov	r3, r0
 8005068:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d158      	bne.n	8005122 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d148      	bne.n	800510a <sync_fs+0xb2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d144      	bne.n	800510a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3330      	adds	r3, #48	; 0x30
 8005084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fed5 	bl	8004e3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3330      	adds	r3, #48	; 0x30
 8005094:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005098:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fe64 	bl	8004d6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3330      	adds	r3, #48	; 0x30
 80050a6:	4921      	ldr	r1, [pc, #132]	; (800512c <sync_fs+0xd4>)
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fe79 	bl	8004da0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3330      	adds	r3, #48	; 0x30
 80050b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80050b6:	491e      	ldr	r1, [pc, #120]	; (8005130 <sync_fs+0xd8>)
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fe71 	bl	8004da0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3330      	adds	r3, #48	; 0x30
 80050c2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7ff fe67 	bl	8004da0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3330      	adds	r3, #48	; 0x30
 80050d6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7ff fe5d 	bl	8004da0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7858      	ldrb	r0, [r3, #1]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	2301      	movs	r3, #1
 8005100:	f7ff fbac 	bl	800485c <disk_write>
			fs->fsi_flag = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fc26 	bl	8004964 <disk_ioctl>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <sync_fs+0xca>
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	41615252 	.word	0x41615252
 8005130:	61417272 	.word	0x61417272

08005134 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3b02      	subs	r3, #2
 8005142:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	3b02      	subs	r3, #2
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d301      	bcc.n	8005154 <clst2sect+0x20>
 8005150:	2300      	movs	r3, #0
 8005152:	e008      	b.n	8005166 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	895b      	ldrh	r3, [r3, #10]
 800515c:	4619      	mov	r1, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	fb03 f301 	mul.w	r3, r3, r1
 8005164:	4413      	add	r3, r2
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d904      	bls.n	8005192 <get_fat+0x20>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e08c      	b.n	80052b2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005198:	f04f 33ff 	mov.w	r3, #4294967295
 800519c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d045      	beq.n	8005232 <get_fat+0xc0>
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d05d      	beq.n	8005266 <get_fat+0xf4>
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d177      	bne.n	800529e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0a5b      	lsrs	r3, r3, #9
 80051c4:	4413      	add	r3, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	6938      	ldr	r0, [r7, #16]
 80051ca:	f7ff ff18 	bl	8004ffe <move_window>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d167      	bne.n	80052a4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	60fa      	str	r2, [r7, #12]
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051e6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	0a5b      	lsrs	r3, r3, #9
 80051f0:	4413      	add	r3, r2
 80051f2:	4619      	mov	r1, r3
 80051f4:	6938      	ldr	r0, [r7, #16]
 80051f6:	f7ff ff02 	bl	8004ffe <move_window>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d153      	bne.n	80052a8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	461a      	mov	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <get_fat+0xb6>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	e002      	b.n	800522e <get_fat+0xbc>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800522e:	617b      	str	r3, [r7, #20]
			break;
 8005230:	e03f      	b.n	80052b2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	0a1b      	lsrs	r3, r3, #8
 800523a:	4413      	add	r3, r2
 800523c:	4619      	mov	r1, r3
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	f7ff fedd 	bl	8004ffe <move_window>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d130      	bne.n	80052ac <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005258:	4413      	add	r3, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fd4a 	bl	8004cf4 <ld_word>
 8005260:	4603      	mov	r3, r0
 8005262:	617b      	str	r3, [r7, #20]
			break;
 8005264:	e025      	b.n	80052b2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	09db      	lsrs	r3, r3, #7
 800526e:	4413      	add	r3, r2
 8005270:	4619      	mov	r1, r3
 8005272:	6938      	ldr	r0, [r7, #16]
 8005274:	f7ff fec3 	bl	8004ffe <move_window>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d118      	bne.n	80052b0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800528c:	4413      	add	r3, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fd48 	bl	8004d24 <ld_dword>
 8005294:	4603      	mov	r3, r0
 8005296:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800529a:	617b      	str	r3, [r7, #20]
			break;
 800529c:	e009      	b.n	80052b2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e006      	b.n	80052b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052b0:	bf00      	nop
		}
	}

	return val;
 80052b2:	697b      	ldr	r3, [r7, #20]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80052c8:	2302      	movs	r3, #2
 80052ca:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f240 80d6 	bls.w	8005480 <put_fat+0x1c4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	429a      	cmp	r2, r3
 80052dc:	f080 80d0 	bcs.w	8005480 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d073      	beq.n	80053d0 <put_fat+0x114>
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	f000 8091 	beq.w	8005410 <put_fat+0x154>
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	f040 80c6 	bne.w	8005480 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4413      	add	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	0a5b      	lsrs	r3, r3, #9
 800530a:	4413      	add	r3, r2
 800530c:	4619      	mov	r1, r3
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fe75 	bl	8004ffe <move_window>
 8005314:	4603      	mov	r3, r0
 8005316:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005318:	7ffb      	ldrb	r3, [r7, #31]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 80a9 	bne.w	8005472 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	61b9      	str	r1, [r7, #24]
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	4413      	add	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <put_fat+0x9e>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b25b      	sxtb	r3, r3
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	b25a      	sxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	b25b      	sxtb	r3, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	b25b      	sxtb	r3, r3
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e001      	b.n	800535e <put_fat+0xa2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	0a5b      	lsrs	r3, r3, #9
 8005370:	4413      	add	r3, r2
 8005372:	4619      	mov	r1, r3
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fe42 	bl	8004ffe <move_window>
 800537a:	4603      	mov	r3, r0
 800537c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800537e:	7ffb      	ldrb	r3, [r7, #31]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d178      	bne.n	8005476 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005390:	4413      	add	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <put_fat+0xea>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	e00e      	b.n	80053c4 <put_fat+0x108>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f023 030f 	bic.w	r3, r3, #15
 80053b0:	b25a      	sxtb	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2201      	movs	r2, #1
 80053cc:	70da      	strb	r2, [r3, #3]
			break;
 80053ce:	e057      	b.n	8005480 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	4413      	add	r3, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f7ff fe0e 	bl	8004ffe <move_window>
 80053e2:	4603      	mov	r3, r0
 80053e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d146      	bne.n	800547a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80053fa:	4413      	add	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	b292      	uxth	r2, r2
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fcb1 	bl	8004d6a <st_word>
			fs->wflag = 1;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	70da      	strb	r2, [r3, #3]
			break;
 800540e:	e037      	b.n	8005480 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1a      	ldr	r2, [r3, #32]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	4413      	add	r3, r2
 800541a:	4619      	mov	r1, r3
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff fdee 	bl	8004ffe <move_window>
 8005422:	4603      	mov	r3, r0
 8005424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005426:	7ffb      	ldrb	r3, [r7, #31]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d128      	bne.n	800547e <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005440:	4413      	add	r3, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fc6e 	bl	8004d24 <ld_dword>
 8005448:	4603      	mov	r3, r0
 800544a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800544e:	4323      	orrs	r3, r4
 8005450:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005460:	4413      	add	r3, r2
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fc9b 	bl	8004da0 <st_dword>
			fs->wflag = 1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	70da      	strb	r2, [r3, #3]
			break;
 8005470:	e006      	b.n	8005480 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005472:	bf00      	nop
 8005474:	e004      	b.n	8005480 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005476:	bf00      	nop
 8005478:	e002      	b.n	8005480 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800547e:	bf00      	nop
		}
	}
	return res;
 8005480:	7ffb      	ldrb	r3, [r7, #31]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3724      	adds	r7, #36	; 0x24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}

0800548a <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b088      	sub	sp, #32
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d904      	bls.n	80054b0 <remove_chain+0x26>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d301      	bcc.n	80054b4 <remove_chain+0x2a>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e04b      	b.n	800554c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00c      	beq.n	80054d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80054ba:	f04f 32ff 	mov.w	r2, #4294967295
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f7ff fefb 	bl	80052bc <put_fat>
 80054c6:	4603      	mov	r3, r0
 80054c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80054ca:	7ffb      	ldrb	r3, [r7, #31]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <remove_chain+0x4a>
 80054d0:	7ffb      	ldrb	r3, [r7, #31]
 80054d2:	e03b      	b.n	800554c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff fe4b 	bl	8005172 <get_fat>
 80054dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d031      	beq.n	8005548 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <remove_chain+0x64>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e02e      	b.n	800554c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d101      	bne.n	80054fa <remove_chain+0x70>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e028      	b.n	800554c <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80054fa:	2200      	movs	r2, #0
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	69b8      	ldr	r0, [r7, #24]
 8005500:	f7ff fedc 	bl	80052bc <put_fat>
 8005504:	4603      	mov	r3, r0
 8005506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <remove_chain+0x88>
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	e01c      	b.n	800554c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	3b02      	subs	r3, #2
 800551c:	429a      	cmp	r2, r3
 800551e:	d20b      	bcs.n	8005538 <remove_chain+0xae>
			fs->free_clst++;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	791b      	ldrb	r3, [r3, #4]
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3c6      	bcc.n	80054d4 <remove_chain+0x4a>
 8005546:	e000      	b.n	800554a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005548:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10d      	bne.n	8005586 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <create_chain+0x2c>
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d31b      	bcc.n	80055b8 <create_chain+0x64>
 8005580:	2301      	movs	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e018      	b.n	80055b8 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fdf2 	bl	8005172 <get_fat>
 800558e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d801      	bhi.n	800559a <create_chain+0x46>
 8005596:	2301      	movs	r3, #1
 8005598:	e0a9      	b.n	80056ee <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d101      	bne.n	80055a6 <create_chain+0x52>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	e0a3      	b.n	80056ee <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d201      	bcs.n	80055b4 <create_chain+0x60>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e09c      	b.n	80056ee <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <create_chain+0x70>
 80055c0:	2300      	movs	r3, #0
 80055c2:	e094      	b.n	80056ee <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d129      	bne.n	8005624 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d301      	bcc.n	80055e4 <create_chain+0x90>
 80055e0:	2302      	movs	r3, #2
 80055e2:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff fdc3 	bl	8005172 <get_fat>
 80055ec:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d003      	beq.n	80055fc <create_chain+0xa8>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d101      	bne.n	8005600 <create_chain+0xac>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	e076      	b.n	80056ee <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d906      	bls.n	8005620 <create_chain+0xcc>
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d201      	bcs.n	8005620 <create_chain+0xcc>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d129      	bne.n	800567e <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3301      	adds	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	429a      	cmp	r2, r3
 800563c:	d307      	bcc.n	800564e <create_chain+0xfa>
					ncl = 2;
 800563e:	2302      	movs	r3, #2
 8005640:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	429a      	cmp	r2, r3
 8005648:	d901      	bls.n	800564e <create_chain+0xfa>
 800564a:	2300      	movs	r3, #0
 800564c:	e04f      	b.n	80056ee <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff fd8e 	bl	8005172 <get_fat>
 8005656:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d003      	beq.n	800566c <create_chain+0x118>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d101      	bne.n	8005670 <create_chain+0x11c>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e03e      	b.n	80056ee <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	429a      	cmp	r2, r3
 8005676:	d1da      	bne.n	800562e <create_chain+0xda>
 8005678:	2300      	movs	r3, #0
 800567a:	e038      	b.n	80056ee <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800567c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800567e:	f04f 32ff 	mov.w	r2, #4294967295
 8005682:	69f9      	ldr	r1, [r7, #28]
 8005684:	6938      	ldr	r0, [r7, #16]
 8005686:	f7ff fe19 	bl	80052bc <put_fat>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <create_chain+0x154>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d006      	beq.n	80056a8 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6938      	ldr	r0, [r7, #16]
 80056a0:	f7ff fe0c 	bl	80052bc <put_fat>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d116      	bne.n	80056dc <create_chain+0x188>
		fs->last_clst = ncl;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	3b02      	subs	r3, #2
 80056be:	429a      	cmp	r2, r3
 80056c0:	d804      	bhi.n	80056cc <create_chain+0x178>
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	791b      	ldrb	r3, [r3, #4]
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	711a      	strb	r2, [r3, #4]
 80056da:	e007      	b.n	80056ec <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d102      	bne.n	80056e8 <create_chain+0x194>
 80056e2:	f04f 33ff 	mov.w	r3, #4294967295
 80056e6:	e000      	b.n	80056ea <create_chain+0x196>
 80056e8:	2301      	movs	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80056ec:	69fb      	ldr	r3, [r7, #28]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b086      	sub	sp, #24
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fc40 	bl	8004f86 <sync_window>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <dir_clear+0x1a>
 800570c:	2301      	movs	r3, #1
 800570e:	e036      	b.n	800577e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fd0e 	bl	8005134 <clst2sect>
 8005718:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3330      	adds	r3, #48	; 0x30
 8005724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fb85 	bl	8004e3a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3330      	adds	r3, #48	; 0x30
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	2301      	movs	r3, #1
 8005738:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e003      	b.n	8005748 <dir_clear+0x52>
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4413      	add	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	895b      	ldrh	r3, [r3, #10]
 800574c:	461a      	mov	r2, r3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4293      	cmp	r3, r2
 8005752:	d20b      	bcs.n	800576c <dir_clear+0x76>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7858      	ldrb	r0, [r3, #1]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	441a      	add	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	f7ff f87b 	bl	800485c <disk_write>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0e9      	beq.n	8005740 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	895b      	ldrh	r3, [r3, #10]
 8005770:	461a      	mov	r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4293      	cmp	r3, r2
 8005776:	bf14      	ite	ne
 8005778:	2301      	movne	r3, #1
 800577a:	2300      	moveq	r3, #0
 800577c:	b2db      	uxtb	r3, r3
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800579c:	d204      	bcs.n	80057a8 <dir_sdi+0x22>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <dir_sdi+0x26>
		return FR_INT_ERR;
 80057a8:	2302      	movs	r3, #2
 80057aa:	e063      	b.n	8005874 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <dir_sdi+0x46>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d902      	bls.n	80057cc <dir_sdi+0x46>
		clst = fs->dirbase;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	8912      	ldrh	r2, [r2, #8]
 80057da:	4293      	cmp	r3, r2
 80057dc:	d301      	bcc.n	80057e2 <dir_sdi+0x5c>
 80057de:	2302      	movs	r3, #2
 80057e0:	e048      	b.n	8005874 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	619a      	str	r2, [r3, #24]
 80057ea:	e029      	b.n	8005840 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	895b      	ldrh	r3, [r3, #10]
 80057f0:	025b      	lsls	r3, r3, #9
 80057f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80057f4:	e019      	b.n	800582a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fcb9 	bl	8005172 <get_fat>
 8005800:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d101      	bne.n	800580e <dir_sdi+0x88>
 800580a:	2301      	movs	r3, #1
 800580c:	e032      	b.n	8005874 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d904      	bls.n	800581e <dir_sdi+0x98>
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	429a      	cmp	r2, r3
 800581c:	d301      	bcc.n	8005822 <dir_sdi+0x9c>
 800581e:	2302      	movs	r3, #2
 8005820:	e028      	b.n	8005874 <dir_sdi+0xee>
			ofs -= csz;
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	429a      	cmp	r2, r3
 8005830:	d2e1      	bcs.n	80057f6 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8005832:	6979      	ldr	r1, [r7, #20]
 8005834:	6938      	ldr	r0, [r7, #16]
 8005836:	f7ff fc7d 	bl	8005134 <clst2sect>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <dir_sdi+0xcc>
 800584e:	2302      	movs	r3, #2
 8005850:	e010      	b.n	8005874 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	0a5b      	lsrs	r3, r3, #9
 800585a:	441a      	add	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	441a      	add	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	3320      	adds	r3, #32
 8005892:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800589a:	d302      	bcc.n	80058a2 <dir_next+0x26>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <dir_next+0x32>
 80058aa:	2304      	movs	r3, #4
 80058ac:	e078      	b.n	80059a0 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d166      	bne.n	8005986 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	8912      	ldrh	r2, [r2, #8]
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d357      	bcc.n	8005986 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]
 80058dc:	2304      	movs	r3, #4
 80058de:	e05f      	b.n	80059a0 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	0a5b      	lsrs	r3, r3, #9
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	8952      	ldrh	r2, [r2, #10]
 80058e8:	3a01      	subs	r2, #1
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d14a      	bne.n	8005986 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7ff fc3a 	bl	8005172 <get_fat>
 80058fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d801      	bhi.n	800590a <dir_next+0x8e>
 8005906:	2302      	movs	r3, #2
 8005908:	e04a      	b.n	80059a0 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d101      	bne.n	8005916 <dir_next+0x9a>
 8005912:	2301      	movs	r3, #1
 8005914:	e044      	b.n	80059a0 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	d328      	bcc.n	8005972 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	619a      	str	r2, [r3, #24]
 800592c:	2304      	movs	r3, #4
 800592e:	e037      	b.n	80059a0 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7ff fe0b 	bl	8005554 <create_chain>
 800593e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <dir_next+0xce>
 8005946:	2307      	movs	r3, #7
 8005948:	e02a      	b.n	80059a0 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <dir_next+0xd8>
 8005950:	2302      	movs	r3, #2
 8005952:	e025      	b.n	80059a0 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d101      	bne.n	8005960 <dir_next+0xe4>
 800595c:	2301      	movs	r3, #1
 800595e:	e01f      	b.n	80059a0 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005960:	6979      	ldr	r1, [r7, #20]
 8005962:	6938      	ldr	r0, [r7, #16]
 8005964:	f7ff fec7 	bl	80056f6 <dir_clear>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <dir_next+0xf6>
 800596e:	2301      	movs	r3, #1
 8005970:	e016      	b.n	80059a0 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	6938      	ldr	r0, [r7, #16]
 800597c:	f7ff fbda 	bl	8005134 <clst2sect>
 8005980:	4602      	mov	r2, r0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80059b8:	2100      	movs	r1, #0
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fee3 	bl	8005786 <dir_sdi>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d12b      	bne.n	8005a22 <dir_alloc+0x7a>
		n = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	4619      	mov	r1, r3
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff fb12 	bl	8004ffe <move_window>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11d      	bne.n	8005a20 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2be5      	cmp	r3, #229	; 0xe5
 80059ec:	d004      	beq.n	80059f8 <dir_alloc+0x50>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	3301      	adds	r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d102      	bne.n	8005a0c <dir_alloc+0x64>
 8005a06:	e00c      	b.n	8005a22 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff34 	bl	800587c <dir_next>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0d7      	beq.n	80059ce <dir_alloc+0x26>
 8005a1e:	e000      	b.n	8005a22 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005a20:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d101      	bne.n	8005a2c <dir_alloc+0x84>
 8005a28:	2307      	movs	r3, #7
 8005a2a:	75fb      	strb	r3, [r7, #23]
	return res;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	331a      	adds	r3, #26
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff f955 	bl	8004cf4 <ld_word>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d109      	bne.n	8005a6a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	3314      	adds	r3, #20
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff f94a 	bl	8004cf4 <ld_word>
 8005a60:	4603      	mov	r3, r0
 8005a62:	041b      	lsls	r3, r3, #16
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	331a      	adds	r3, #26
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	b292      	uxth	r2, r2
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff f96d 	bl	8004d6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d109      	bne.n	8005aac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f103 0214 	add.w	r2, r3, #20
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f7ff f95f 	bl	8004d6a <st_word>
	}
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fe5e 	bl	8005786 <dir_sdi>
 8005aca:	4603      	mov	r3, r0
 8005acc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <dir_find+0x24>
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	e03e      	b.n	8005b56 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	4619      	mov	r1, r3
 8005ade:	6938      	ldr	r0, [r7, #16]
 8005ae0:	f7ff fa8d 	bl	8004ffe <move_window>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d12f      	bne.n	8005b4e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <dir_find+0x4e>
 8005afc:	2304      	movs	r3, #4
 8005afe:	75fb      	strb	r3, [r7, #23]
 8005b00:	e028      	b.n	8005b54 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	330b      	adds	r3, #11
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	330b      	adds	r3, #11
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <dir_find+0x86>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69d8      	ldr	r0, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3320      	adds	r3, #32
 8005b2c:	220b      	movs	r2, #11
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f7ff f99d 	bl	8004e6e <mem_cmp>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fe9d 	bl	800587c <dir_next>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0c5      	beq.n	8005ad8 <dir_find+0x24>
 8005b4c:	e002      	b.n	8005b54 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005b4e:	bf00      	nop
 8005b50:	e000      	b.n	8005b54 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005b52:	bf00      	nop

	return res;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff ff1a 	bl	80059a8 <dir_alloc>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11c      	bne.n	8005bb8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	4619      	mov	r1, r3
 8005b84:	68b8      	ldr	r0, [r7, #8]
 8005b86:	f7ff fa3a 	bl	8004ffe <move_window>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d111      	bne.n	8005bb8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff f94c 	bl	8004e3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69d8      	ldr	r0, [r3, #28]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3320      	adds	r3, #32
 8005baa:	220b      	movs	r2, #11
 8005bac:	4619      	mov	r1, r3
 8005bae:	f7ff f923 	bl	8004df8 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3320      	adds	r3, #32
 8005bd8:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8005bda:	220b      	movs	r2, #11
 8005bdc:	2120      	movs	r1, #32
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f7ff f92b 	bl	8004e3a <mem_set>
	si = i = 0; ni = 8;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	2308      	movs	r3, #8
 8005bee:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	61fa      	str	r2, [r7, #28]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d97c      	bls.n	8005d02 <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c0e:	d007      	beq.n	8005c20 <create_name+0x5c>
 8005c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c14:	2b5c      	cmp	r3, #92	; 0x5c
 8005c16:	d110      	bne.n	8005c3a <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005c18:	e002      	b.n	8005c20 <create_name+0x5c>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b2f      	cmp	r3, #47	; 0x2f
 8005c2a:	d0f6      	beq.n	8005c1a <create_name+0x56>
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b5c      	cmp	r3, #92	; 0x5c
 8005c36:	d0f0      	beq.n	8005c1a <create_name+0x56>
			break;
 8005c38:	e064      	b.n	8005d04 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8005c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c40:	d003      	beq.n	8005c4a <create_name+0x86>
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d30d      	bcc.n	8005c66 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b0b      	cmp	r3, #11
 8005c4e:	d003      	beq.n	8005c58 <create_name+0x94>
 8005c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c54:	2b2e      	cmp	r3, #46	; 0x2e
 8005c56:	d001      	beq.n	8005c5c <create_name+0x98>
 8005c58:	2306      	movs	r3, #6
 8005c5a:	e06f      	b.n	8005d3c <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	230b      	movs	r3, #11
 8005c62:	623b      	str	r3, [r7, #32]
			continue;
 8005c64:	e04c      	b.n	8005d00 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8005c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f941 	bl	8004ef2 <dbc_1st>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d024      	beq.n	8005cc0 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	61fa      	str	r2, [r7, #28]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff f953 	bl	8004f32 <dbc_2nd>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <create_name+0xd8>
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d301      	bcc.n	8005ca0 <create_name+0xdc>
 8005c9c:	2306      	movs	r3, #6
 8005c9e:	e04d      	b.n	8005d3c <create_name+0x178>
			sfn[i++] = c;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	61ba      	str	r2, [r7, #24]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cae:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	61ba      	str	r2, [r7, #24]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e797      	b.n	8005bf0 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	481f      	ldr	r0, [pc, #124]	; (8005d44 <create_name+0x180>)
 8005cc8:	f7ff f8f8 	bl	8004ebc <chk_chr>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <create_name+0x112>
 8005cd2:	2306      	movs	r3, #6
 8005cd4:	e032      	b.n	8005d3c <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cda:	2b60      	cmp	r3, #96	; 0x60
 8005cdc:	d908      	bls.n	8005cf0 <create_name+0x12c>
 8005cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce2:	2b7a      	cmp	r3, #122	; 0x7a
 8005ce4:	d804      	bhi.n	8005cf0 <create_name+0x12c>
 8005ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cea:	3b20      	subs	r3, #32
 8005cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	61ba      	str	r2, [r7, #24]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cfe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8005d00:	e776      	b.n	8005bf0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005d02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	441a      	add	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <create_name+0x154>
 8005d14:	2306      	movs	r3, #6
 8005d16:	e011      	b.n	8005d3c <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2be5      	cmp	r3, #229	; 0xe5
 8005d1e:	d102      	bne.n	8005d26 <create_name+0x162>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2205      	movs	r2, #5
 8005d24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d801      	bhi.n	8005d32 <create_name+0x16e>
 8005d2e:	2204      	movs	r2, #4
 8005d30:	e000      	b.n	8005d34 <create_name+0x170>
 8005d32:	2200      	movs	r2, #0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	330b      	adds	r3, #11
 8005d38:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005d3a:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0800e178 	.word	0x0800e178

08005d48 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005d58:	e002      	b.n	8005d60 <follow_path+0x18>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b2f      	cmp	r3, #47	; 0x2f
 8005d66:	d0f8      	beq.n	8005d5a <follow_path+0x12>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b5c      	cmp	r3, #92	; 0x5c
 8005d6e:	d0f4      	beq.n	8005d5a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b1f      	cmp	r3, #31
 8005d7c:	d80a      	bhi.n	8005d94 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2280      	movs	r2, #128	; 0x80
 8005d82:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8005d86:	2100      	movs	r1, #0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fcfc 	bl	8005786 <dir_sdi>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]
 8005d92:	e043      	b.n	8005e1c <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d94:	463b      	mov	r3, r7
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff13 	bl	8005bc4 <create_name>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d134      	bne.n	8005e12 <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fe83 	bl	8005ab4 <dir_find>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005db8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d127      	bne.n	8005e16 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d122      	bne.n	8005e16 <follow_path+0xce>
 8005dd0:	2305      	movs	r3, #5
 8005dd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005dd4:	e01f      	b.n	8005e16 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d11c      	bne.n	8005e1a <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	799b      	ldrb	r3, [r3, #6]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8005dec:	2305      	movs	r3, #5
 8005dee:	75fb      	strb	r3, [r7, #23]
 8005df0:	e014      	b.n	8005e1c <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e00:	4413      	add	r3, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	6938      	ldr	r0, [r7, #16]
 8005e06:	f7ff fe16 	bl	8005a36 <ld_clust>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e10:	e7c0      	b.n	8005d94 <follow_path+0x4c>
			if (res != FR_OK) break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <follow_path+0xd4>
				break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e1a:	bf00      	nop
			}
		}
	}

	return res;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b089      	sub	sp, #36	; 0x24
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <get_ldnumber+0x22>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	e02d      	b.n	8005ea4 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	61fa      	str	r2, [r7, #28]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d902      	bls.n	8005e5e <get_ldnumber+0x38>
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b3a      	cmp	r3, #58	; 0x3a
 8005e5c:	d1f4      	bne.n	8005e48 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b3a      	cmp	r3, #58	; 0x3a
 8005e62:	d11c      	bne.n	8005e9e <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8005e64:	2301      	movs	r3, #1
 8005e66:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e6e:	d90c      	bls.n	8005e8a <get_ldnumber+0x64>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b39      	cmp	r3, #57	; 0x39
 8005e76:	d808      	bhi.n	8005e8a <get_ldnumber+0x64>
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d103      	bne.n	8005e8a <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	3b30      	subs	r3, #48	; 0x30
 8005e88:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dc04      	bgt.n	8005e9a <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	e002      	b.n	8005ea4 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8005ea2:	697b      	ldr	r3, [r7, #20]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3724      	adds	r7, #36	; 0x24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	70da      	strb	r2, [r3, #3]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff f897 	bl	8004ffe <move_window>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <check_fs+0x2a>
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	e038      	b.n	8005f4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3330      	adds	r3, #48	; 0x30
 8005ede:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe ff06 	bl	8004cf4 <ld_word>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <check_fs+0x48>
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e029      	b.n	8005f4c <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005efe:	2be9      	cmp	r3, #233	; 0xe9
 8005f00:	d009      	beq.n	8005f16 <check_fs+0x66>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f08:	2beb      	cmp	r3, #235	; 0xeb
 8005f0a:	d004      	beq.n	8005f16 <check_fs+0x66>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f12:	2be8      	cmp	r3, #232	; 0xe8
 8005f14:	d119      	bne.n	8005f4a <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3330      	adds	r3, #48	; 0x30
 8005f1a:	3336      	adds	r3, #54	; 0x36
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	490d      	ldr	r1, [pc, #52]	; (8005f54 <check_fs+0xa4>)
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe ffa4 	bl	8004e6e <mem_cmp>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <check_fs+0x80>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e00d      	b.n	8005f4c <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3330      	adds	r3, #48	; 0x30
 8005f34:	3352      	adds	r3, #82	; 0x52
 8005f36:	2205      	movs	r2, #5
 8005f38:	4907      	ldr	r1, [pc, #28]	; (8005f58 <check_fs+0xa8>)
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe ff97 	bl	8004e6e <mem_cmp>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <check_fs+0x9a>
 8005f46:	2300      	movs	r3, #0
 8005f48:	e000      	b.n	8005f4c <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8005f4a:	2302      	movs	r3, #2
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	0800e188 	.word	0x0800e188
 8005f58:	0800e18c 	.word	0x0800e18c

08005f5c <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b096      	sub	sp, #88	; 0x58
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff ff58 	bl	8005e26 <get_ldnumber>
 8005f76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da01      	bge.n	8005f82 <find_volume+0x26>
 8005f7e:	230b      	movs	r3, #11
 8005f80:	e238      	b.n	80063f4 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005f82:	4aa8      	ldr	r2, [pc, #672]	; (8006224 <find_volume+0x2c8>)
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <find_volume+0x3a>
 8005f92:	230c      	movs	r3, #12
 8005f94:	e22e      	b.n	80063f4 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01a      	beq.n	8005fe2 <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fbd3 	bl	800475c <disk_status>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10c      	bne.n	8005fe2 <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <find_volume+0x82>
 8005fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005fda:	230a      	movs	r3, #10
 8005fdc:	e20a      	b.n	80063f4 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e208      	b.n	80063f4 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fe fac7 	bl	8004588 <disk_initialize>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800600c:	2303      	movs	r3, #3
 800600e:	e1f1      	b.n	80063f4 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <find_volume+0xca>
 8006016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006022:	230a      	movs	r3, #10
 8006024:	e1e6      	b.n	80063f4 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800602a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800602c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800602e:	f7ff ff3f 	bl	8005eb0 <check_fs>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800603c:	2b02      	cmp	r3, #2
 800603e:	d14b      	bne.n	80060d8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006040:	2300      	movs	r3, #0
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
 8006044:	e01f      	b.n	8006086 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006054:	4413      	add	r3, r2
 8006056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	3304      	adds	r3, #4
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d006      	beq.n	8006070 <find_volume+0x114>
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	3308      	adds	r3, #8
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fe5c 	bl	8004d24 <ld_dword>
 800606c:	4602      	mov	r2, r0
 800606e:	e000      	b.n	8006072 <find_volume+0x116>
 8006070:	2200      	movs	r2, #0
 8006072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800607a:	440b      	add	r3, r1
 800607c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006082:	3301      	adds	r3, #1
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
 8006086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006088:	2b03      	cmp	r3, #3
 800608a:	d9dc      	bls.n	8006046 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800608c:	2300      	movs	r3, #0
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8006090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <find_volume+0x140>
 8006096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006098:	3b01      	subs	r3, #1
 800609a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800609c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80060a4:	4413      	add	r3, r2
 80060a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80060aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <find_volume+0x162>
 80060b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060b6:	f7ff fefb 	bl	8005eb0 <check_fs>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e000      	b.n	80060c0 <find_volume+0x164>
 80060be:	2303      	movs	r3, #3
 80060c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80060c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d905      	bls.n	80060d8 <find_volume+0x17c>
 80060cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ce:	3301      	adds	r3, #1
 80060d0:	643b      	str	r3, [r7, #64]	; 0x40
 80060d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d9e1      	bls.n	800609c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d101      	bne.n	80060e4 <find_volume+0x188>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e187      	b.n	80063f4 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d901      	bls.n	80060f0 <find_volume+0x194>
 80060ec:	230d      	movs	r3, #13
 80060ee:	e181      	b.n	80063f4 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	3330      	adds	r3, #48	; 0x30
 80060f4:	330b      	adds	r3, #11
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fdfc 	bl	8004cf4 <ld_word>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006102:	d001      	beq.n	8006108 <find_volume+0x1ac>
 8006104:	230d      	movs	r3, #13
 8006106:	e175      	b.n	80063f4 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	3330      	adds	r3, #48	; 0x30
 800610c:	3316      	adds	r3, #22
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fdf0 	bl	8004cf4 <ld_word>
 8006114:	4603      	mov	r3, r0
 8006116:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <find_volume+0x1d0>
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	3330      	adds	r3, #48	; 0x30
 8006122:	3324      	adds	r3, #36	; 0x24
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fdfd 	bl	8004d24 <ld_dword>
 800612a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006130:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	789b      	ldrb	r3, [r3, #2]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d005      	beq.n	8006150 <find_volume+0x1f4>
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	789b      	ldrb	r3, [r3, #2]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d001      	beq.n	8006150 <find_volume+0x1f4>
 800614c:	230d      	movs	r3, #13
 800614e:	e151      	b.n	80063f4 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	789b      	ldrb	r3, [r3, #2]
 8006154:	461a      	mov	r2, r3
 8006156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b29a      	uxth	r2, r3
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	895b      	ldrh	r3, [r3, #10]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d008      	beq.n	8006184 <find_volume+0x228>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	895b      	ldrh	r3, [r3, #10]
 8006176:	461a      	mov	r2, r3
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	3b01      	subs	r3, #1
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <find_volume+0x22c>
 8006184:	230d      	movs	r3, #13
 8006186:	e135      	b.n	80063f4 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	3330      	adds	r3, #48	; 0x30
 800618c:	3311      	adds	r3, #17
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fdb0 	bl	8004cf4 <ld_word>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	891b      	ldrh	r3, [r3, #8]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <find_volume+0x252>
 80061aa:	230d      	movs	r3, #13
 80061ac:	e122      	b.n	80063f4 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	3330      	adds	r3, #48	; 0x30
 80061b2:	3313      	adds	r3, #19
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fd9d 	bl	8004cf4 <ld_word>
 80061ba:	4603      	mov	r3, r0
 80061bc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <find_volume+0x276>
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	3330      	adds	r3, #48	; 0x30
 80061c8:	3320      	adds	r3, #32
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fdaa 	bl	8004d24 <ld_dword>
 80061d0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	3330      	adds	r3, #48	; 0x30
 80061d6:	330e      	adds	r3, #14
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fd8b 	bl	8004cf4 <ld_word>
 80061de:	4603      	mov	r3, r0
 80061e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <find_volume+0x290>
 80061e8:	230d      	movs	r3, #13
 80061ea:	e103      	b.n	80063f4 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	4413      	add	r3, r2
 80061f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f4:	8912      	ldrh	r2, [r2, #8]
 80061f6:	0912      	lsrs	r2, r2, #4
 80061f8:	b292      	uxth	r2, r2
 80061fa:	4413      	add	r3, r2
 80061fc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	429a      	cmp	r2, r3
 8006204:	d201      	bcs.n	800620a <find_volume+0x2ae>
 8006206:	230d      	movs	r3, #13
 8006208:	e0f4      	b.n	80063f4 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800620a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006212:	8952      	ldrh	r2, [r2, #10]
 8006214:	fbb3 f3f2 	udiv	r3, r3, r2
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <find_volume+0x2cc>
 8006220:	230d      	movs	r3, #13
 8006222:	e0e7      	b.n	80063f4 <find_volume+0x498>
 8006224:	20000258 	.word	0x20000258
		fmt = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	4a72      	ldr	r2, [pc, #456]	; (80063fc <find_volume+0x4a0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d802      	bhi.n	800623c <find_volume+0x2e0>
 8006236:	2303      	movs	r3, #3
 8006238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006242:	4293      	cmp	r3, r2
 8006244:	d802      	bhi.n	800624c <find_volume+0x2f0>
 8006246:	2302      	movs	r3, #2
 8006248:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006252:	4293      	cmp	r3, r2
 8006254:	d802      	bhi.n	800625c <find_volume+0x300>
 8006256:	2301      	movs	r3, #1
 8006258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800625c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <find_volume+0x30c>
 8006264:	230d      	movs	r3, #13
 8006266:	e0c5      	b.n	80063f4 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006274:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627a:	441a      	add	r2, r3
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	441a      	add	r2, r3
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800628a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800628e:	2b03      	cmp	r3, #3
 8006290:	d11e      	bne.n	80062d0 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	3330      	adds	r3, #48	; 0x30
 8006296:	332a      	adds	r3, #42	; 0x2a
 8006298:	4618      	mov	r0, r3
 800629a:	f7fe fd2b 	bl	8004cf4 <ld_word>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <find_volume+0x34c>
 80062a4:	230d      	movs	r3, #13
 80062a6:	e0a5      	b.n	80063f4 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	891b      	ldrh	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <find_volume+0x358>
 80062b0:	230d      	movs	r3, #13
 80062b2:	e09f      	b.n	80063f4 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	3330      	adds	r3, #48	; 0x30
 80062b8:	332c      	adds	r3, #44	; 0x2c
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fd32 	bl	8004d24 <ld_dword>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
 80062ce:	e01f      	b.n	8006310 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	891b      	ldrh	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <find_volume+0x380>
 80062d8:	230d      	movs	r3, #13
 80062da:	e08b      	b.n	80063f4 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e2:	441a      	add	r2, r3
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d103      	bne.n	80062f8 <find_volume+0x39c>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	e00a      	b.n	800630e <find_volume+0x3b2>
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	4613      	mov	r3, r2
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4413      	add	r3, r2
 8006302:	085a      	lsrs	r2, r3, #1
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006316:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800631a:	0a5b      	lsrs	r3, r3, #9
 800631c:	429a      	cmp	r2, r3
 800631e:	d201      	bcs.n	8006324 <find_volume+0x3c8>
 8006320:	230d      	movs	r3, #13
 8006322:	e067      	b.n	80063f4 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	f04f 32ff 	mov.w	r2, #4294967295
 800632a:	611a      	str	r2, [r3, #16]
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800633a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800633e:	2b03      	cmp	r3, #3
 8006340:	d149      	bne.n	80063d6 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	3330      	adds	r3, #48	; 0x30
 8006346:	3330      	adds	r3, #48	; 0x30
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fcd3 	bl	8004cf4 <ld_word>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d140      	bne.n	80063d6 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006356:	3301      	adds	r3, #1
 8006358:	4619      	mov	r1, r3
 800635a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800635c:	f7fe fe4f 	bl	8004ffe <move_window>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d137      	bne.n	80063d6 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2200      	movs	r2, #0
 800636a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	3330      	adds	r3, #48	; 0x30
 8006370:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe fcbd 	bl	8004cf4 <ld_word>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006382:	429a      	cmp	r2, r3
 8006384:	d127      	bne.n	80063d6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	3330      	adds	r3, #48	; 0x30
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fcca 	bl	8004d24 <ld_dword>
 8006390:	4602      	mov	r2, r0
 8006392:	4b1b      	ldr	r3, [pc, #108]	; (8006400 <find_volume+0x4a4>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d11e      	bne.n	80063d6 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	3330      	adds	r3, #48	; 0x30
 800639c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fe fcbf 	bl	8004d24 <ld_dword>
 80063a6:	4602      	mov	r2, r0
 80063a8:	4b16      	ldr	r3, [pc, #88]	; (8006404 <find_volume+0x4a8>)
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d113      	bne.n	80063d6 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	3330      	adds	r3, #48	; 0x30
 80063b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fcb4 	bl	8004d24 <ld_dword>
 80063bc:	4602      	mov	r2, r0
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	3330      	adds	r3, #48	; 0x30
 80063c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fcaa 	bl	8004d24 <ld_dword>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <find_volume+0x4ac>)
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	4b08      	ldr	r3, [pc, #32]	; (8006408 <find_volume+0x4ac>)
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <find_volume+0x4ac>)
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3758      	adds	r7, #88	; 0x58
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	0ffffff5 	.word	0x0ffffff5
 8006400:	41615252 	.word	0x41615252
 8006404:	61417272 	.word	0x61417272
 8006408:	2000025c 	.word	0x2000025c

0800640c <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006416:	2309      	movs	r3, #9
 8006418:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d01c      	beq.n	800645a <validate+0x4e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d018      	beq.n	800645a <validate+0x4e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <validate+0x4e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	889a      	ldrh	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	429a      	cmp	r2, r3
 800643e:	d10c      	bne.n	800645a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe f988 	bl	800475c <disk_status>
 800644c:	4603      	mov	r3, r0
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <validate+0x4e>
			res = FR_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <validate+0x5a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	e000      	b.n	8006468 <validate+0x5c>
 8006466:	2300      	movs	r3, #0
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	6013      	str	r3, [r2, #0]
	return res;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800648a:	f107 0310 	add.w	r3, r7, #16
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fcc9 	bl	8005e26 <get_ldnumber>
 8006494:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da01      	bge.n	80064a0 <f_mount+0x28>
 800649c:	230b      	movs	r3, #11
 800649e:	e025      	b.n	80064ec <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80064a0:	4a14      	ldr	r2, [pc, #80]	; (80064f4 <f_mount+0x7c>)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	490b      	ldr	r1, [pc, #44]	; (80064f4 <f_mount+0x7c>)
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <f_mount+0x5e>
 80064d2:	2300      	movs	r3, #0
 80064d4:	e00a      	b.n	80064ec <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80064d6:	f107 010c 	add.w	r1, r7, #12
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	2200      	movs	r2, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fd3b 	bl	8005f5c <find_volume>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3720      	adds	r7, #32
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000258 	.word	0x20000258

080064f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b099      	sub	sp, #100	; 0x64
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <f_open+0x18>
 800650c:	2309      	movs	r3, #9
 800650e:	e172      	b.n	80067f6 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006518:	79fa      	ldrb	r2, [r7, #7]
 800651a:	f107 0114 	add.w	r1, r7, #20
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fd1a 	bl	8005f5c <find_volume>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800652e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 8156 	bne.w	80067e4 <f_open+0x2ec>
		dj.obj.fs = fs;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fbff 	bl	8005d48 <follow_path>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006558:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800655c:	b25b      	sxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	da02      	bge.n	8006568 <f_open+0x70>
				res = FR_INVALID_NAME;
 8006562:	2306      	movs	r3, #6
 8006564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	f003 031c 	and.w	r3, r3, #28
 800656e:	2b00      	cmp	r3, #0
 8006570:	d073      	beq.n	800665a <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8006572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800657a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800657e:	2b04      	cmp	r3, #4
 8006580:	d107      	bne.n	8006592 <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006582:	f107 0318 	add.w	r3, r7, #24
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fae9 	bl	8005b5e <dir_register>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	71fb      	strb	r3, [r7, #7]
 800659a:	e010      	b.n	80065be <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800659c:	7fbb      	ldrb	r3, [r7, #30]
 800659e:	f003 0311 	and.w	r3, r3, #17
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <f_open+0xb6>
					res = FR_DENIED;
 80065a6:	2307      	movs	r3, #7
 80065a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065ac:	e007      	b.n	80065be <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <f_open+0xc6>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80065be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d163      	bne.n	800668e <f_open+0x196>
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d05e      	beq.n	800668e <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fa2d 	bl	8005a36 <ld_clust>
 80065dc:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80065de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e0:	f103 040e 	add.w	r4, r3, #14
 80065e4:	f7fe fb7c 	bl	8004ce0 <get_fattime>
 80065e8:	4603      	mov	r3, r0
 80065ea:	4619      	mov	r1, r3
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7fe fbd7 	bl	8004da0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	330b      	adds	r3, #11
 80065f6:	2220      	movs	r2, #32
 80065f8:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065fe:	2200      	movs	r2, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fa37 	bl	8005a74 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	331c      	adds	r3, #28
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fbc7 	bl	8004da0 <st_dword>
					fs->wflag = 1;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2201      	movs	r2, #1
 8006616:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661a:	2b00      	cmp	r3, #0
 800661c:	d037      	beq.n	800668e <f_open+0x196>
						dw = fs->winsect;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8006624:	f107 0318 	add.w	r3, r7, #24
 8006628:	2200      	movs	r2, #0
 800662a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe ff2c 	bl	800548a <remove_chain>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800663c:	2b00      	cmp	r3, #0
 800663e:	d126      	bne.n	800668e <f_open+0x196>
							res = move_window(fs, dw);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fcda 	bl	8004ffe <move_window>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006654:	3a01      	subs	r2, #1
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	e019      	b.n	800668e <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800665a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800665e:	2b00      	cmp	r3, #0
 8006660:	d115      	bne.n	800668e <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006662:	7fbb      	ldrb	r3, [r7, #30]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <f_open+0x17c>
					res = FR_NO_FILE;
 800666c:	2304      	movs	r3, #4
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006672:	e00c      	b.n	800668e <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <f_open+0x196>
 800667e:	7fbb      	ldrb	r3, [r7, #30]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <f_open+0x196>
						res = FR_DENIED;
 8006688:	2307      	movs	r3, #7
 800668a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800668e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <f_open+0x1b0>
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80066b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80066b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 8092 	bne.w	80067e4 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff f9b5 	bl	8005a36 <ld_clust>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	331c      	adds	r3, #28
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fb24 	bl	8004d24 <ld_dword>
 80066dc:	4602      	mov	r2, r0
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	88da      	ldrh	r2, [r3, #6]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	79fa      	ldrb	r2, [r7, #7]
 80066f4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3328      	adds	r3, #40	; 0x28
 800670c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f7fe fb91 	bl	8004e3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d060      	beq.n	80067e4 <f_open+0x2ec>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d05c      	beq.n	80067e4 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	895b      	ldrh	r3, [r3, #10]
 8006736:	025b      	lsls	r3, r3, #9
 8006738:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	657b      	str	r3, [r7, #84]	; 0x54
 8006746:	e016      	b.n	8006776 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fd10 	bl	8005172 <get_fat>
 8006752:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006756:	2b01      	cmp	r3, #1
 8006758:	d802      	bhi.n	8006760 <f_open+0x268>
 800675a:	2302      	movs	r3, #2
 800675c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <f_open+0x276>
 8006768:	2301      	movs	r3, #1
 800676a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800676e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	657b      	str	r3, [r7, #84]	; 0x54
 8006776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <f_open+0x28e>
 800677e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006782:	429a      	cmp	r2, r3
 8006784:	d8e0      	bhi.n	8006748 <f_open+0x250>
				}
				fp->clust = clst;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800678a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800678c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d127      	bne.n	80067e4 <f_open+0x2ec>
 8006794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800679a:	2b00      	cmp	r3, #0
 800679c:	d022      	beq.n	80067e4 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fe fcc6 	bl	8005134 <clst2sect>
 80067a8:	6478      	str	r0, [r7, #68]	; 0x44
 80067aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d103      	bne.n	80067b8 <f_open+0x2c0>
						res = FR_INT_ERR;
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80067b6:	e015      	b.n	80067e4 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80067b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ba:	0a5a      	lsrs	r2, r3, #9
 80067bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067be:	441a      	add	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	7858      	ldrb	r0, [r3, #1]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	69da      	ldr	r2, [r3, #28]
 80067d2:	2301      	movs	r3, #1
 80067d4:	f7fd ffd8 	bl	8004788 <disk_read>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <f_open+0x2ec>
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80067e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <f_open+0x2fa>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80067f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3764      	adds	r7, #100	; 0x64
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd90      	pop	{r4, r7, pc}

080067fe <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08e      	sub	sp, #56	; 0x38
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f107 0214 	add.w	r2, r7, #20
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fdf4 	bl	800640c <validate>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800682a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800682e:	2b00      	cmp	r3, #0
 8006830:	d107      	bne.n	8006842 <f_read+0x44>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	7c5b      	ldrb	r3, [r3, #17]
 8006836:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800683a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <f_read+0x4a>
 8006842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006846:	e109      	b.n	8006a5c <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	7c1b      	ldrb	r3, [r3, #16]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <f_read+0x5a>
 8006854:	2307      	movs	r3, #7
 8006856:	e101      	b.n	8006a5c <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	429a      	cmp	r2, r3
 800686a:	f240 80f2 	bls.w	8006a52 <f_read+0x254>
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8006872:	e0ee      	b.n	8006a52 <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 80ba 	bne.w	80069f6 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	0a5b      	lsrs	r3, r3, #9
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	8952      	ldrh	r2, [r2, #10]
 800688c:	3a01      	subs	r2, #1
 800688e:	4013      	ands	r3, r2
 8006890:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d123      	bne.n	80068e0 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
 80068a6:	e007      	b.n	80068b8 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fe fc5e 	bl	8005172 <get_fat>
 80068b6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d804      	bhi.n	80068c8 <f_read+0xca>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2202      	movs	r2, #2
 80068c2:	745a      	strb	r2, [r3, #17]
 80068c4:	2302      	movs	r3, #2
 80068c6:	e0c9      	b.n	8006a5c <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d104      	bne.n	80068da <f_read+0xdc>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	745a      	strb	r2, [r3, #17]
 80068d6:	2301      	movs	r3, #1
 80068d8:	e0c0      	b.n	8006a5c <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068de:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe fc23 	bl	8005134 <clst2sect>
 80068ee:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <f_read+0x102>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	745a      	strb	r2, [r3, #17]
 80068fc:	2302      	movs	r3, #2
 80068fe:	e0ad      	b.n	8006a5c <f_read+0x25e>
			sect += csect;
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0a5b      	lsrs	r3, r3, #9
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d039      	beq.n	8006988 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	4413      	add	r3, r2
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	8952      	ldrh	r2, [r2, #10]
 800691e:	4293      	cmp	r3, r2
 8006920:	d905      	bls.n	800692e <f_read+0x130>
					cc = fs->csize - csect;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	895b      	ldrh	r3, [r3, #10]
 8006926:	461a      	mov	r2, r3
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	7858      	ldrb	r0, [r3, #1]
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006938:	f7fd ff26 	bl	8004788 <disk_read>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <f_read+0x14e>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	745a      	strb	r2, [r3, #17]
 8006948:	2301      	movs	r3, #1
 800694a:	e087      	b.n	8006a5c <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	7c1b      	ldrb	r3, [r3, #16]
 8006950:	b25b      	sxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	da14      	bge.n	8006980 <f_read+0x182>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	69da      	ldr	r2, [r3, #28]
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006960:	429a      	cmp	r2, r3
 8006962:	d90d      	bls.n	8006980 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	025b      	lsls	r3, r3, #9
 800696e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006970:	18d0      	adds	r0, r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3328      	adds	r3, #40	; 0x28
 8006976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800697a:	4619      	mov	r1, r3
 800697c:	f7fe fa3c 	bl	8004df8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	025b      	lsls	r3, r3, #9
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006986:	e050      	b.n	8006a2a <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	429a      	cmp	r2, r3
 8006990:	d02e      	beq.n	80069f0 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	7c1b      	ldrb	r3, [r3, #16]
 8006996:	b25b      	sxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	da18      	bge.n	80069ce <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	7858      	ldrb	r0, [r3, #1]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	69da      	ldr	r2, [r3, #28]
 80069aa:	2301      	movs	r3, #1
 80069ac:	f7fd ff56 	bl	800485c <disk_write>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <f_read+0x1c2>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	745a      	strb	r2, [r3, #17]
 80069bc:	2301      	movs	r3, #1
 80069be:	e04d      	b.n	8006a5c <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	7c1b      	ldrb	r3, [r3, #16]
 80069c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	7858      	ldrb	r0, [r3, #1]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80069d8:	2301      	movs	r3, #1
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	f7fd fed4 	bl	8004788 <disk_read>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <f_read+0x1f2>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	745a      	strb	r2, [r3, #17]
 80069ec:	2301      	movs	r3, #1
 80069ee:	e035      	b.n	8006a5c <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d901      	bls.n	8006a10 <f_read+0x212>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	4413      	add	r3, r2
 8006a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a22:	4619      	mov	r1, r3
 8006a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a26:	f7fe f9e7 	bl	8004df8 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	441a      	add	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	4413      	add	r3, r2
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	695a      	ldr	r2, [r3, #20]
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	441a      	add	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f47f af0d 	bne.w	8006874 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3738      	adds	r7, #56	; 0x38
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08c      	sub	sp, #48	; 0x30
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f107 0210 	add.w	r2, r7, #16
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fcc1 	bl	800640c <validate>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d107      	bne.n	8006aa8 <f_write+0x44>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	7c5b      	ldrb	r3, [r3, #17]
 8006a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <f_write+0x4a>
 8006aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aac:	e13f      	b.n	8006d2e <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	7c1b      	ldrb	r3, [r3, #16]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <f_write+0x5a>
 8006aba:	2307      	movs	r3, #7
 8006abc:	e137      	b.n	8006d2e <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	695a      	ldr	r2, [r3, #20]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	441a      	add	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	f080 8121 	bcs.w	8006d12 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006ad8:	e11b      	b.n	8006d12 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 80d7 	bne.w	8006c96 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	0a5b      	lsrs	r3, r3, #9
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	8952      	ldrh	r2, [r2, #10]
 8006af2:	3a01      	subs	r2, #1
 8006af4:	4013      	ands	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d137      	bne.n	8006b6e <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10c      	bne.n	8006b20 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10e      	bne.n	8006b30 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fd1c 	bl	8005554 <create_chain>
 8006b1c:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b1e:	e007      	b.n	8006b30 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fe fd13 	bl	8005554 <create_chain>
 8006b2e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80f2 	beq.w	8006d1c <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d104      	bne.n	8006b48 <f_write+0xe4>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2202      	movs	r2, #2
 8006b42:	745a      	strb	r2, [r3, #17]
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0f2      	b.n	8006d2e <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d104      	bne.n	8006b5a <f_write+0xf6>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	745a      	strb	r2, [r3, #17]
 8006b56:	2301      	movs	r3, #1
 8006b58:	e0e9      	b.n	8006d2e <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5e:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <f_write+0x10a>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6c:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	7c1b      	ldrb	r3, [r3, #16]
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da18      	bge.n	8006baa <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	7858      	ldrb	r0, [r3, #1]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	69da      	ldr	r2, [r3, #28]
 8006b86:	2301      	movs	r3, #1
 8006b88:	f7fd fe68 	bl	800485c <disk_write>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <f_write+0x138>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	745a      	strb	r2, [r3, #17]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0c8      	b.n	8006d2e <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7fe fabe 	bl	8005134 <clst2sect>
 8006bb8:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <f_write+0x166>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	745a      	strb	r2, [r3, #17]
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0b1      	b.n	8006d2e <f_write+0x2ca>
			sect += csect;
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	4413      	add	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d03c      	beq.n	8006c58 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	4413      	add	r3, r2
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	8952      	ldrh	r2, [r2, #10]
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d905      	bls.n	8006bf8 <f_write+0x194>
					cc = fs->csize - csect;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	895b      	ldrh	r3, [r3, #10]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	7858      	ldrb	r0, [r3, #1]
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	69f9      	ldr	r1, [r7, #28]
 8006c02:	f7fd fe2b 	bl	800485c <disk_write>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <f_write+0x1b2>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	745a      	strb	r2, [r3, #17]
 8006c12:	2301      	movs	r3, #1
 8006c14:	e08b      	b.n	8006d2e <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d915      	bls.n	8006c50 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	025b      	lsls	r3, r3, #9
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	f7fe f8db 	bl	8004df8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	7c1b      	ldrb	r3, [r3, #16]
 8006c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	025b      	lsls	r3, r3, #9
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006c56:	e03f      	b.n	8006cd8 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d016      	beq.n	8006c90 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d210      	bcs.n	8006c90 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	7858      	ldrb	r0, [r3, #1]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006c78:	2301      	movs	r3, #1
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	f7fd fd84 	bl	8004788 <disk_read>
 8006c80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	745a      	strb	r2, [r3, #17]
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e04e      	b.n	8006d2e <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d901      	bls.n	8006cb0 <f_write+0x24c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbe:	4413      	add	r3, r2
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	69f9      	ldr	r1, [r7, #28]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fe f897 	bl	8004df8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	7c1b      	ldrb	r3, [r3, #16]
 8006cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	441a      	add	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	4413      	add	r3, r2
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	615a      	str	r2, [r3, #20]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	bf38      	it	cc
 8006d0c:	461a      	movcc	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f47f aee0 	bne.w	8006ada <f_write+0x76>
 8006d1a:	e000      	b.n	8006d1e <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d1c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	7c1b      	ldrb	r3, [r3, #16]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3730      	adds	r7, #48	; 0x30
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f107 0208 	add.w	r2, r7, #8
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fb60 	bl	800640c <validate>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d168      	bne.n	8006e28 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7c1b      	ldrb	r3, [r3, #16]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d062      	beq.n	8006e28 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	7c1b      	ldrb	r3, [r3, #16]
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da15      	bge.n	8006d98 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	7858      	ldrb	r0, [r3, #1]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69da      	ldr	r2, [r3, #28]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f7fd fd6e 	bl	800485c <disk_write>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <f_sync+0x54>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e04f      	b.n	8006e2a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	7c1b      	ldrb	r3, [r3, #16]
 8006d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006d98:	f7fd ffa2 	bl	8004ce0 <get_fattime>
 8006d9c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7fe f929 	bl	8004ffe <move_window>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d138      	bne.n	8006e28 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	330b      	adds	r3, #11
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	330b      	adds	r3, #11
 8006dc6:	f042 0220 	orr.w	r2, r2, #32
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	f7fe fe4b 	bl	8005a74 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f103 021c 	add.w	r2, r3, #28
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f7fd ffd8 	bl	8004da0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3316      	adds	r3, #22
 8006df4:	6939      	ldr	r1, [r7, #16]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fd ffd2 	bl	8004da0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3312      	adds	r3, #18
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fd ffb1 	bl	8004d6a <st_word>
					fs->wflag = 1;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe f921 	bl	8005058 <sync_fs>
 8006e16:	4603      	mov	r3, r0
 8006e18:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7c1b      	ldrb	r3, [r3, #16]
 8006e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ff7b 	bl	8006d36 <f_sync>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f107 0208 	add.w	r2, r7, #8
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fada 	bl	800640c <validate>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b090      	sub	sp, #64	; 0x40
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006e7e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006e82:	f107 030c 	add.w	r3, r7, #12
 8006e86:	2200      	movs	r2, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff f867 	bl	8005f5c <find_volume>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8006e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 8099 	bne.w	8006fd0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	3b02      	subs	r3, #2
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d804      	bhi.n	8006ebc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e089      	b.n	8006fd0 <f_getfree+0x15e>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d128      	bne.n	8006f1a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006ed0:	f107 0314 	add.w	r3, r7, #20
 8006ed4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe f94b 	bl	8005172 <get_fat>
 8006edc:	62b8      	str	r0, [r7, #40]	; 0x28
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d103      	bne.n	8006eee <f_getfree+0x7c>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006eec:	e063      	b.n	8006fb6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d103      	bne.n	8006efc <f_getfree+0x8a>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006efa:	e05c      	b.n	8006fb6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <f_getfree+0x96>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	3301      	adds	r3, #1
 8006f06:	63bb      	str	r3, [r7, #56]	; 0x38
				} while (++clst < fs->n_fatent);
 8006f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3db      	bcc.n	8006ed0 <f_getfree+0x5e>
 8006f18:	e04d      	b.n	8006fb6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
					sect = fs->fatbase;		/* Top of the FAT */
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
					i = 0;					/* Offset in the sector */
 8006f26:	2300      	movs	r3, #0
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10d      	bne.n	8006f4c <f_getfree+0xda>
							res = move_window(fs, sect++);
 8006f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	633a      	str	r2, [r7, #48]	; 0x30
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7fe f860 	bl	8004ffe <move_window>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							if (res != FR_OK) break;
 8006f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d133      	bne.n	8006fb4 <f_getfree+0x142>
						}
						if (fs->fs_type == FS_FAT16) {
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d111      	bne.n	8006f78 <f_getfree+0x106>
							if (ld_word(fs->win + i) == 0) nfree++;
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fd fec8 	bl	8004cf4 <ld_word>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <f_getfree+0xfe>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 2;
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	3302      	adds	r3, #2
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f76:	e012      	b.n	8006f9e <f_getfree+0x12c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	4413      	add	r3, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd fece 	bl	8004d24 <ld_dword>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <f_getfree+0x126>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	3301      	adds	r3, #1
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 4;
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
						}
						i %= SS(fs);
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
					} while (--clst);
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1bb      	bne.n	8006f2a <f_getfree+0xb8>
 8006fb2:	e000      	b.n	8006fb6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006fb4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fba:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	791a      	ldrb	r2, [r3, #4]
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	f042 0201 	orr.w	r2, r2, #1
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3740      	adds	r7, #64	; 0x40
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006fe0:	f000 fe38 	bl	8007c54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006fe4:	f000 f852 	bl	800708c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006fe8:	f000 fabc 	bl	8007564 <MX_GPIO_Init>
	MX_RTC_Init();
 8006fec:	f000 f8ce 	bl	800718c <MX_RTC_Init>
	MX_SPI1_Init();
 8006ff0:	f000 f930 	bl	8007254 <MX_SPI1_Init>
	MX_TIM2_Init();
 8006ff4:	f000 f964 	bl	80072c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8006ff8:	f000 f9ee 	bl	80073d8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8006ffc:	f000 fa3a 	bl	8007474 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8007000:	f000 fa86 	bl	8007510 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8007004:	481c      	ldr	r0, [pc, #112]	; (8007078 <main+0x9c>)
 8007006:	f002 fee6 	bl	8009dd6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800700a:	2100      	movs	r1, #0
 800700c:	481a      	ldr	r0, [pc, #104]	; (8007078 <main+0x9c>)
 800700e:	f002 ff3b 	bl	8009e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8007012:	2104      	movs	r1, #4
 8007014:	4818      	ldr	r0, [pc, #96]	; (8007078 <main+0x9c>)
 8007016:	f002 ff37 	bl	8009e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800701a:	2108      	movs	r1, #8
 800701c:	4816      	ldr	r0, [pc, #88]	; (8007078 <main+0x9c>)
 800701e:	f002 ff33 	bl	8009e88 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8007022:	4816      	ldr	r0, [pc, #88]	; (800707c <main+0xa0>)
 8007024:	f002 fed7 	bl	8009dd6 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8007028:	4815      	ldr	r0, [pc, #84]	; (8007080 <main+0xa4>)
 800702a:	f002 feb0 	bl	8009d8e <HAL_TIM_Base_Start>

	RGB_Init();
 800702e:	f7fc fa05 	bl	800343c <RGB_Init>
	LCD_Init();
 8007032:	f7fa f951 	bl	80012d8 <LCD_Init>
	THS_Init();
 8007036:	f7fc ff07 	bl	8003e48 <THS_Init>
	SD_Init();
 800703a:	f7fc fcff 	bl	8003a3c <SD_Init>
	NET_Init();
 800703e:	f7fb fec3 	bl	8002dc8 <NET_Init>
	MENU_Init();
 8007042:	f7fa fe81 	bl	8001d48 <MENU_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8007046:	f7fa fa2d 	bl	80014a4 <LCD_ClearScreen>

	while (1) {
		if (Update && State == ST_Clock) {
 800704a:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <main+0xa8>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d008      	beq.n	8007064 <main+0x88>
 8007052:	4b0d      	ldr	r3, [pc, #52]	; (8007088 <main+0xac>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <main+0x88>
			MENU_Clock();
 800705a:	f7fb fb87 	bl	800276c <MENU_Clock>
			Update = false;
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <main+0xa8>)
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
		}

		if (MENU_HandleKeys()) {
 8007064:	f7fb fbca 	bl	80027fc <MENU_HandleKeys>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0ed      	beq.n	800704a <main+0x6e>
			Update = true;
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <main+0xa8>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
		if (Update && State == ST_Clock) {
 8007074:	e7e9      	b.n	800704a <main+0x6e>
 8007076:	bf00      	nop
 8007078:	200033d0 	.word	0x200033d0
 800707c:	20003314 	.word	0x20003314
 8007080:	20003294 	.word	0x20003294
 8007084:	20000059 	.word	0x20000059
 8007088:	20003355 	.word	0x20003355

0800708c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b098      	sub	sp, #96	; 0x60
 8007090:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007096:	2230      	movs	r2, #48	; 0x30
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f004 fdfe 	bl	800bc9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80070a0:	f107 031c 	add.w	r3, r7, #28
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	605a      	str	r2, [r3, #4]
 80070ba:	609a      	str	r2, [r3, #8]
 80070bc:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	4b2f      	ldr	r3, [pc, #188]	; (8007180 <SystemClock_Config+0xf4>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	4a2e      	ldr	r2, [pc, #184]	; (8007180 <SystemClock_Config+0xf4>)
 80070c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070cc:	6413      	str	r3, [r2, #64]	; 0x40
 80070ce:	4b2c      	ldr	r3, [pc, #176]	; (8007180 <SystemClock_Config+0xf4>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	60bb      	str	r3, [r7, #8]
 80070d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80070da:	2300      	movs	r3, #0
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <SystemClock_Config+0xf8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a28      	ldr	r2, [pc, #160]	; (8007184 <SystemClock_Config+0xf8>)
 80070e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4b26      	ldr	r3, [pc, #152]	; (8007184 <SystemClock_Config+0xf8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f2:	607b      	str	r3, [r7, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80070fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007100:	2302      	movs	r3, #2
 8007102:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007108:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800710a:	2304      	movs	r3, #4
 800710c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 800710e:	2348      	movs	r3, #72	; 0x48
 8007110:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007112:	2302      	movs	r3, #2
 8007114:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8007116:	2303      	movs	r3, #3
 8007118:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800711a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f95e 	bl	80083e0 <HAL_RCC_OscConfig>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <SystemClock_Config+0xa2>
		Error_Handler();
 800712a:	f000 fb5d 	bl	80077e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800712e:	230f      	movs	r3, #15
 8007130:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007132:	2302      	movs	r3, #2
 8007134:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007136:	2300      	movs	r3, #0
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800713a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007140:	2300      	movs	r3, #0
 8007142:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8007144:	f107 031c 	add.w	r3, r7, #28
 8007148:	2102      	movs	r1, #2
 800714a:	4618      	mov	r0, r3
 800714c:	f001 fbb8 	bl	80088c0 <HAL_RCC_ClockConfig>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <SystemClock_Config+0xce>
		Error_Handler();
 8007156:	f000 fb47 	bl	80077e8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800715a:	2302      	movs	r3, #2
 800715c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <SystemClock_Config+0xfc>)
 8007160:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007162:	f107 030c 	add.w	r3, r7, #12
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fd9c 	bl	8008ca4 <HAL_RCCEx_PeriphCLKConfig>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <SystemClock_Config+0xea>
		Error_Handler();
 8007172:	f000 fb39 	bl	80077e8 <Error_Handler>
	}
}
 8007176:	bf00      	nop
 8007178:	3760      	adds	r7, #96	; 0x60
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800
 8007184:	40007000 	.word	0x40007000
 8007188:	00100300 	.word	0x00100300

0800718c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8007192:	1d3b      	adds	r3, r7, #4
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80071a0:	2300      	movs	r3, #0
 80071a2:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <MX_RTC_Init+0xc0>)
 80071a6:	4a2a      	ldr	r2, [pc, #168]	; (8007250 <MX_RTC_Init+0xc4>)
 80071a8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80071aa:	4b28      	ldr	r3, [pc, #160]	; (800724c <MX_RTC_Init+0xc0>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 80071b0:	4b26      	ldr	r3, [pc, #152]	; (800724c <MX_RTC_Init+0xc0>)
 80071b2:	227d      	movs	r2, #125	; 0x7d
 80071b4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 4000;
 80071b6:	4b25      	ldr	r3, [pc, #148]	; (800724c <MX_RTC_Init+0xc0>)
 80071b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80071bc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80071be:	4b23      	ldr	r3, [pc, #140]	; (800724c <MX_RTC_Init+0xc0>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <MX_RTC_Init+0xc0>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80071ca:	4b20      	ldr	r3, [pc, #128]	; (800724c <MX_RTC_Init+0xc0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80071d0:	481e      	ldr	r0, [pc, #120]	; (800724c <MX_RTC_Init+0xc0>)
 80071d2:	f001 fe49 	bl	8008e68 <HAL_RTC_Init>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <MX_RTC_Init+0x54>
		Error_Handler();
 80071dc:	f000 fb04 	bl	80077e8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80071f4:	1d3b      	adds	r3, r7, #4
 80071f6:	2201      	movs	r2, #1
 80071f8:	4619      	mov	r1, r3
 80071fa:	4814      	ldr	r0, [pc, #80]	; (800724c <MX_RTC_Init+0xc0>)
 80071fc:	f001 fec5 	bl	8008f8a <HAL_RTC_SetTime>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <MX_RTC_Init+0x7e>
		Error_Handler();
 8007206:	f000 faef 	bl	80077e8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800720a:	2303      	movs	r3, #3
 800720c:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 800720e:	2304      	movs	r3, #4
 8007210:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x8;
 8007212:	2308      	movs	r3, #8
 8007214:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8007216:	2320      	movs	r3, #32
 8007218:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800721a:	463b      	mov	r3, r7
 800721c:	2201      	movs	r2, #1
 800721e:	4619      	mov	r1, r3
 8007220:	480a      	ldr	r0, [pc, #40]	; (800724c <MX_RTC_Init+0xc0>)
 8007222:	f001 ffcd 	bl	80091c0 <HAL_RTC_SetDate>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <MX_RTC_Init+0xa4>
		Error_Handler();
 800722c:	f000 fadc 	bl	80077e8 <Error_Handler>
	}
	/** Enable Calibrartion
	 */
	if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK) {
 8007230:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007234:	4805      	ldr	r0, [pc, #20]	; (800724c <MX_RTC_Init+0xc0>)
 8007236:	f002 f949 	bl	80094cc <HAL_RTCEx_SetCalibrationOutPut>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <MX_RTC_Init+0xb8>
		Error_Handler();
 8007240:	f000 fad2 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8007244:	bf00      	nop
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20003358 	.word	0x20003358
 8007250:	40002800 	.word	0x40002800

08007254 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8007258:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <MX_SPI1_Init+0x64>)
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <MX_SPI1_Init+0x68>)
 800725c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800725e:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007264:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007268:	2200      	movs	r2, #0
 800726a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800726c:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <MX_SPI1_Init+0x64>)
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <MX_SPI1_Init+0x64>)
 800727a:	2200      	movs	r2, #0
 800727c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800727e:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007284:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007288:	2218      	movs	r2, #24
 800728a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <MX_SPI1_Init+0x64>)
 800728e:	2200      	movs	r2, #0
 8007290:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007292:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <MX_SPI1_Init+0x64>)
 8007294:	2200      	movs	r2, #0
 8007296:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <MX_SPI1_Init+0x64>)
 800729a:	2200      	movs	r2, #0
 800729c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <MX_SPI1_Init+0x64>)
 80072a0:	220a      	movs	r2, #10
 80072a2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80072a4:	4804      	ldr	r0, [pc, #16]	; (80072b8 <MX_SPI1_Init+0x64>)
 80072a6:	f002 f953 	bl	8009550 <HAL_SPI_Init>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80072b0:	f000 fa9a 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20003378 	.word	0x20003378
 80072bc:	40013000 	.word	0x40013000

080072c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	; 0x38
 80072c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80072c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	605a      	str	r2, [r3, #4]
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80072d4:	f107 0320 	add.w	r3, r7, #32
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	609a      	str	r2, [r3, #8]
 80072e8:	60da      	str	r2, [r3, #12]
 80072ea:	611a      	str	r2, [r3, #16]
 80072ec:	615a      	str	r2, [r3, #20]
 80072ee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80072f0:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <MX_TIM2_Init+0x114>)
 80072f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 80072f8:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <MX_TIM2_Init+0x114>)
 80072fa:	2247      	movs	r2, #71	; 0x47
 80072fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072fe:	4b35      	ldr	r3, [pc, #212]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007300:	2200      	movs	r2, #0
 8007302:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8007304:	4b33      	ldr	r3, [pc, #204]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800730a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800730c:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <MX_TIM2_Init+0x114>)
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007312:	4b30      	ldr	r3, [pc, #192]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007314:	2200      	movs	r2, #0
 8007316:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8007318:	482e      	ldr	r0, [pc, #184]	; (80073d4 <MX_TIM2_Init+0x114>)
 800731a:	f002 fd0d 	bl	8009d38 <HAL_TIM_Base_Init>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_TIM2_Init+0x68>
		Error_Handler();
 8007324:	f000 fa60 	bl	80077e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800732e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007332:	4619      	mov	r1, r3
 8007334:	4827      	ldr	r0, [pc, #156]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007336:	f002 ffb3 	bl	800a2a0 <HAL_TIM_ConfigClockSource>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <MX_TIM2_Init+0x84>
		Error_Handler();
 8007340:	f000 fa52 	bl	80077e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8007344:	4823      	ldr	r0, [pc, #140]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007346:	f002 fd6a 	bl	8009e1e <HAL_TIM_PWM_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <MX_TIM2_Init+0x94>
		Error_Handler();
 8007350:	f000 fa4a 	bl	80077e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007354:	2300      	movs	r3, #0
 8007356:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007358:	2300      	movs	r3, #0
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800735c:	f107 0320 	add.w	r3, r7, #32
 8007360:	4619      	mov	r1, r3
 8007362:	481c      	ldr	r0, [pc, #112]	; (80073d4 <MX_TIM2_Init+0x114>)
 8007364:	f003 fb8c 	bl	800aa80 <HAL_TIMEx_MasterConfigSynchronization>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 800736e:	f000 fa3b 	bl	80077e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007372:	2360      	movs	r3, #96	; 0x60
 8007374:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	2200      	movs	r2, #0
 8007386:	4619      	mov	r1, r3
 8007388:	4812      	ldr	r0, [pc, #72]	; (80073d4 <MX_TIM2_Init+0x114>)
 800738a:	f002 fec3 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8007394:	f000 fa28 	bl	80077e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	2204      	movs	r2, #4
 800739c:	4619      	mov	r1, r3
 800739e:	480d      	ldr	r0, [pc, #52]	; (80073d4 <MX_TIM2_Init+0x114>)
 80073a0:	f002 feb8 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80073aa:	f000 fa1d 	bl	80077e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80073ae:	1d3b      	adds	r3, r7, #4
 80073b0:	2208      	movs	r2, #8
 80073b2:	4619      	mov	r1, r3
 80073b4:	4807      	ldr	r0, [pc, #28]	; (80073d4 <MX_TIM2_Init+0x114>)
 80073b6:	f002 fead 	bl	800a114 <HAL_TIM_PWM_ConfigChannel>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 80073c0:	f000 fa12 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80073c4:	4803      	ldr	r0, [pc, #12]	; (80073d4 <MX_TIM2_Init+0x114>)
 80073c6:	f000 faf7 	bl	80079b8 <HAL_TIM_MspPostInit>

}
 80073ca:	bf00      	nop
 80073cc:	3738      	adds	r7, #56	; 0x38
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200033d0 	.word	0x200033d0

080073d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80073de:	f107 0308 	add.w	r3, r7, #8
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80073ec:	463b      	mov	r3, r7
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <MX_TIM3_Init+0x94>)
 80073f6:	4a1e      	ldr	r2, [pc, #120]	; (8007470 <MX_TIM3_Init+0x98>)
 80073f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <MX_TIM3_Init+0x94>)
 80073fc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007400:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007402:	4b1a      	ldr	r3, [pc, #104]	; (800746c <MX_TIM3_Init+0x94>)
 8007404:	2200      	movs	r2, #0
 8007406:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 8007408:	4b18      	ldr	r3, [pc, #96]	; (800746c <MX_TIM3_Init+0x94>)
 800740a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800740e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007410:	4b16      	ldr	r3, [pc, #88]	; (800746c <MX_TIM3_Init+0x94>)
 8007412:	2200      	movs	r2, #0
 8007414:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007416:	4b15      	ldr	r3, [pc, #84]	; (800746c <MX_TIM3_Init+0x94>)
 8007418:	2200      	movs	r2, #0
 800741a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800741c:	4813      	ldr	r0, [pc, #76]	; (800746c <MX_TIM3_Init+0x94>)
 800741e:	f002 fc8b 	bl	8009d38 <HAL_TIM_Base_Init>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <MX_TIM3_Init+0x54>
		Error_Handler();
 8007428:	f000 f9de 	bl	80077e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800742c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007430:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	4619      	mov	r1, r3
 8007438:	480c      	ldr	r0, [pc, #48]	; (800746c <MX_TIM3_Init+0x94>)
 800743a:	f002 ff31 	bl	800a2a0 <HAL_TIM_ConfigClockSource>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_TIM3_Init+0x70>
		Error_Handler();
 8007444:	f000 f9d0 	bl	80077e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007448:	2300      	movs	r3, #0
 800744a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800744c:	2300      	movs	r3, #0
 800744e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8007450:	463b      	mov	r3, r7
 8007452:	4619      	mov	r1, r3
 8007454:	4805      	ldr	r0, [pc, #20]	; (800746c <MX_TIM3_Init+0x94>)
 8007456:	f003 fb13 	bl	800aa80 <HAL_TIMEx_MasterConfigSynchronization>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8007460:	f000 f9c2 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8007464:	bf00      	nop
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20003314 	.word	0x20003314
 8007470:	40000400 	.word	0x40000400

08007474 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800747a:	f107 0308 	add.w	r3, r7, #8
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	605a      	str	r2, [r3, #4]
 8007484:	609a      	str	r2, [r3, #8]
 8007486:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007488:	463b      	mov	r3, r7
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8007490:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <MX_TIM4_Init+0x94>)
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <MX_TIM4_Init+0x98>)
 8007494:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <MX_TIM4_Init+0x94>)
 8007498:	2247      	movs	r2, #71	; 0x47
 800749a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800749c:	4b1a      	ldr	r3, [pc, #104]	; (8007508 <MX_TIM4_Init+0x94>)
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 80074a2:	4b19      	ldr	r3, [pc, #100]	; (8007508 <MX_TIM4_Init+0x94>)
 80074a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80074a8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074aa:	4b17      	ldr	r3, [pc, #92]	; (8007508 <MX_TIM4_Init+0x94>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074b0:	4b15      	ldr	r3, [pc, #84]	; (8007508 <MX_TIM4_Init+0x94>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80074b6:	4814      	ldr	r0, [pc, #80]	; (8007508 <MX_TIM4_Init+0x94>)
 80074b8:	f002 fc3e 	bl	8009d38 <HAL_TIM_Base_Init>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_TIM4_Init+0x52>
		Error_Handler();
 80074c2:	f000 f991 	bl	80077e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80074cc:	f107 0308 	add.w	r3, r7, #8
 80074d0:	4619      	mov	r1, r3
 80074d2:	480d      	ldr	r0, [pc, #52]	; (8007508 <MX_TIM4_Init+0x94>)
 80074d4:	f002 fee4 	bl	800a2a0 <HAL_TIM_ConfigClockSource>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <MX_TIM4_Init+0x6e>
		Error_Handler();
 80074de:	f000 f983 	bl	80077e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074e2:	2300      	movs	r3, #0
 80074e4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80074ea:	463b      	mov	r3, r7
 80074ec:	4619      	mov	r1, r3
 80074ee:	4806      	ldr	r0, [pc, #24]	; (8007508 <MX_TIM4_Init+0x94>)
 80074f0:	f003 fac6 	bl	800aa80 <HAL_TIMEx_MasterConfigSynchronization>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80074fa:	f000 f975 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80074fe:	bf00      	nop
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20003294 	.word	0x20003294
 800750c:	40000800 	.word	0x40000800

08007510 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8007514:	4b11      	ldr	r3, [pc, #68]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <MX_USART3_UART_Init+0x50>)
 8007518:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800751a:	4b10      	ldr	r3, [pc, #64]	; (800755c <MX_USART3_UART_Init+0x4c>)
 800751c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007520:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007524:	2200      	movs	r2, #0
 8007526:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <MX_USART3_UART_Init+0x4c>)
 800752a:	2200      	movs	r2, #0
 800752c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007530:	2200      	movs	r2, #0
 8007532:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007536:	220c      	movs	r2, #12
 8007538:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <MX_USART3_UART_Init+0x4c>)
 800753c:	2200      	movs	r2, #0
 800753e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007542:	2200      	movs	r2, #0
 8007544:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8007546:	4805      	ldr	r0, [pc, #20]	; (800755c <MX_USART3_UART_Init+0x4c>)
 8007548:	f003 fb2a 	bl	800aba0 <HAL_UART_Init>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8007552:	f000 f949 	bl	80077e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200032d4 	.word	0x200032d4
 8007560:	40004800 	.word	0x40004800

08007564 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	; 0x30
 8007568:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800756a:	f107 031c 	add.w	r3, r7, #28
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	605a      	str	r2, [r3, #4]
 8007574:	609a      	str	r2, [r3, #8]
 8007576:	60da      	str	r2, [r3, #12]
 8007578:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
 800757e:	4b67      	ldr	r3, [pc, #412]	; (800771c <MX_GPIO_Init+0x1b8>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	4a66      	ldr	r2, [pc, #408]	; (800771c <MX_GPIO_Init+0x1b8>)
 8007584:	f043 0310 	orr.w	r3, r3, #16
 8007588:	6313      	str	r3, [r2, #48]	; 0x30
 800758a:	4b64      	ldr	r3, [pc, #400]	; (800771c <MX_GPIO_Init+0x1b8>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	4b60      	ldr	r3, [pc, #384]	; (800771c <MX_GPIO_Init+0x1b8>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	4a5f      	ldr	r2, [pc, #380]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075a0:	f043 0304 	orr.w	r3, r3, #4
 80075a4:	6313      	str	r3, [r2, #48]	; 0x30
 80075a6:	4b5d      	ldr	r3, [pc, #372]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	4b59      	ldr	r3, [pc, #356]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	4a58      	ldr	r2, [pc, #352]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c0:	6313      	str	r3, [r2, #48]	; 0x30
 80075c2:	4b56      	ldr	r3, [pc, #344]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	4b52      	ldr	r3, [pc, #328]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	4a51      	ldr	r2, [pc, #324]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	6313      	str	r3, [r2, #48]	; 0x30
 80075de:	4b4f      	ldr	r3, [pc, #316]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	4b4b      	ldr	r3, [pc, #300]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	4a4a      	ldr	r2, [pc, #296]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075f4:	f043 0308 	orr.w	r3, r3, #8
 80075f8:	6313      	str	r3, [r2, #48]	; 0x30
 80075fa:	4b48      	ldr	r3, [pc, #288]	; (800771c <MX_GPIO_Init+0x1b8>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]
 800760a:	4b44      	ldr	r3, [pc, #272]	; (800771c <MX_GPIO_Init+0x1b8>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	4a43      	ldr	r2, [pc, #268]	; (800771c <MX_GPIO_Init+0x1b8>)
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	6313      	str	r3, [r2, #48]	; 0x30
 8007616:	4b41      	ldr	r3, [pc, #260]	; (800771c <MX_GPIO_Init+0x1b8>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8007622:	2200      	movs	r2, #0
 8007624:	217f      	movs	r1, #127	; 0x7f
 8007626:	483e      	ldr	r0, [pc, #248]	; (8007720 <MX_GPIO_Init+0x1bc>)
 8007628:	f000 fe8e 	bl	8008348 <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 800762c:	2200      	movs	r2, #0
 800762e:	f248 0103 	movw	r1, #32771	; 0x8003
 8007632:	483c      	ldr	r0, [pc, #240]	; (8007724 <MX_GPIO_Init+0x1c0>)
 8007634:	f000 fe88 	bl	8008348 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8007638:	2200      	movs	r2, #0
 800763a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800763e:	483a      	ldr	r0, [pc, #232]	; (8007728 <MX_GPIO_Init+0x1c4>)
 8007640:	f000 fe82 	bl	8008348 <HAL_GPIO_WritePin>
	STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 8007644:	237f      	movs	r3, #127	; 0x7f
 8007646:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007648:	2301      	movs	r3, #1
 800764a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800764c:	2302      	movs	r3, #2
 800764e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007650:	2300      	movs	r3, #0
 8007652:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007654:	f107 031c 	add.w	r3, r7, #28
 8007658:	4619      	mov	r1, r3
 800765a:	4831      	ldr	r0, [pc, #196]	; (8007720 <MX_GPIO_Init+0x1bc>)
 800765c:	f000 fcc2 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8007660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007664:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007666:	2301      	movs	r3, #1
 8007668:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800766a:	2302      	movs	r3, #2
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800766e:	2300      	movs	r3, #0
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 8007672:	f107 031c 	add.w	r3, r7, #28
 8007676:	4619      	mov	r1, r3
 8007678:	482a      	ldr	r0, [pc, #168]	; (8007724 <MX_GPIO_Init+0x1c0>)
 800767a:	f000 fcb3 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 800767e:	2303      	movs	r3, #3
 8007680:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007682:	2301      	movs	r3, #1
 8007684:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007686:	2301      	movs	r3, #1
 8007688:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800768a:	2300      	movs	r3, #0
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800768e:	f107 031c 	add.w	r3, r7, #28
 8007692:	4619      	mov	r1, r3
 8007694:	4823      	ldr	r0, [pc, #140]	; (8007724 <MX_GPIO_Init+0x1c0>)
 8007696:	f000 fca5 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 800769a:	2301      	movs	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <MX_GPIO_Init+0x1c8>)
 80076a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80076a2:	2302      	movs	r3, #2
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 80076a6:	f107 031c 	add.w	r3, r7, #28
 80076aa:	4619      	mov	r1, r3
 80076ac:	4820      	ldr	r0, [pc, #128]	; (8007730 <MX_GPIO_Init+0x1cc>)
 80076ae:	f000 fc99 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MENU_Btn1_Pin */
	GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076b6:	2300      	movs	r3, #0
 80076b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ba:	2301      	movs	r3, #1
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 80076be:	f107 031c 	add.w	r3, r7, #28
 80076c2:	4619      	mov	r1, r3
 80076c4:	4816      	ldr	r0, [pc, #88]	; (8007720 <MX_GPIO_Init+0x1bc>)
 80076c6:	f000 fc8d 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
	GPIO_InitStruct.Pin = MENU_Btn2_Pin | MENU_Btn3_Pin | MENU_Btn4_Pin;
 80076ca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80076ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076d0:	2300      	movs	r3, #0
 80076d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80076d4:	2302      	movs	r3, #2
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076d8:	f107 031c 	add.w	r3, r7, #28
 80076dc:	4619      	mov	r1, r3
 80076de:	4810      	ldr	r0, [pc, #64]	; (8007720 <MX_GPIO_Init+0x1bc>)
 80076e0:	f000 fc80 	bl	8007fe4 <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 80076e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80076e8:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ea:	2301      	movs	r3, #1
 80076ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f2:	2300      	movs	r3, #0
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076f6:	f107 031c 	add.w	r3, r7, #28
 80076fa:	4619      	mov	r1, r3
 80076fc:	480a      	ldr	r0, [pc, #40]	; (8007728 <MX_GPIO_Init+0x1c4>)
 80076fe:	f000 fc71 	bl	8007fe4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8007702:	2200      	movs	r2, #0
 8007704:	2101      	movs	r1, #1
 8007706:	2006      	movs	r0, #6
 8007708:	f000 fc13 	bl	8007f32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800770c:	2006      	movs	r0, #6
 800770e:	f000 fc2c 	bl	8007f6a <HAL_NVIC_EnableIRQ>

}
 8007712:	bf00      	nop
 8007714:	3730      	adds	r7, #48	; 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40023800 	.word	0x40023800
 8007720:	40021000 	.word	0x40021000
 8007724:	40020800 	.word	0x40020800
 8007728:	40020c00 	.word	0x40020c00
 800772c:	10110000 	.word	0x10110000
 8007730:	40020000 	.word	0x40020000

08007734 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007744:	d107      	bne.n	8007756 <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	4618      	mov	r0, r3
 800774c:	f7fc f8ee 	bl	800392c <RGB_SetMode>
		THS_ErrorClock();
 8007750:	f7fc fd4c 	bl	80041ec <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
		Update = true;
	}
}
 8007754:	e00d      	b.n	8007772 <HAL_TIM_PeriodElapsedCallback+0x3e>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a09      	ldr	r2, [pc, #36]	; (8007780 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d108      	bne.n	8007772 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8007760:	4b08      	ldr	r3, [pc, #32]	; (8007784 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_TIM_PeriodElapsedCallback+0x3e>
		LCD_BackgroundOff();
 8007768:	f7f9 fe90 	bl	800148c <LCD_BackgroundOff>
		Update = true;
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	2000025e 	.word	0x2000025e
 8007780:	40000400 	.word	0x40000400
 8007784:	20003355 	.word	0x20003355
 8007788:	20000059 	.word	0x20000059

0800778c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d113      	bne.n	80077c4 <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 800779c:	2101      	movs	r1, #1
 800779e:	480b      	ldr	r0, [pc, #44]	; (80077cc <HAL_GPIO_EXTI_Callback+0x40>)
 80077a0:	f000 fdba 	bl	8008318 <HAL_GPIO_ReadPin>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d10c      	bne.n	80077c4 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9) {
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	d902      	bls.n	80077c4 <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40020000 	.word	0x40020000
 80077d0:	2000025e 	.word	0x2000025e

080077d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	NET_HandleUART_IT();
 80077dc:	f7fb fd56 	bl	800328c <NET_HandleUART_IT>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
	...

080077f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <HAL_MspInit+0x4c>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	4a0f      	ldr	r2, [pc, #60]	; (8007844 <HAL_MspInit+0x4c>)
 8007808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800780c:	6453      	str	r3, [r2, #68]	; 0x44
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <HAL_MspInit+0x4c>)
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800781a:	2300      	movs	r3, #0
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	4b09      	ldr	r3, [pc, #36]	; (8007844 <HAL_MspInit+0x4c>)
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	4a08      	ldr	r2, [pc, #32]	; (8007844 <HAL_MspInit+0x4c>)
 8007824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007828:	6413      	str	r3, [r2, #64]	; 0x40
 800782a:	4b06      	ldr	r3, [pc, #24]	; (8007844 <HAL_MspInit+0x4c>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40023800 	.word	0x40023800

08007848 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a05      	ldr	r2, [pc, #20]	; (800786c <HAL_RTC_MspInit+0x24>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d102      	bne.n	8007860 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <HAL_RTC_MspInit+0x28>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	40002800 	.word	0x40002800
 8007870:	42470e3c 	.word	0x42470e3c

08007874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b08a      	sub	sp, #40	; 0x28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <HAL_SPI_MspInit+0x84>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d12b      	bne.n	80078ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	4b18      	ldr	r3, [pc, #96]	; (80078fc <HAL_SPI_MspInit+0x88>)
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <HAL_SPI_MspInit+0x88>)
 80078a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078a4:	6453      	str	r3, [r2, #68]	; 0x44
 80078a6:	4b15      	ldr	r3, [pc, #84]	; (80078fc <HAL_SPI_MspInit+0x88>)
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078ae:	613b      	str	r3, [r7, #16]
 80078b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	4b11      	ldr	r3, [pc, #68]	; (80078fc <HAL_SPI_MspInit+0x88>)
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	4a10      	ldr	r2, [pc, #64]	; (80078fc <HAL_SPI_MspInit+0x88>)
 80078bc:	f043 0302 	orr.w	r3, r3, #2
 80078c0:	6313      	str	r3, [r2, #48]	; 0x30
 80078c2:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <HAL_SPI_MspInit+0x88>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80078ce:	2338      	movs	r3, #56	; 0x38
 80078d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d2:	2302      	movs	r3, #2
 80078d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078da:	2303      	movs	r3, #3
 80078dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80078de:	2305      	movs	r3, #5
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078e2:	f107 0314 	add.w	r3, r7, #20
 80078e6:	4619      	mov	r1, r3
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <HAL_SPI_MspInit+0x8c>)
 80078ea:	f000 fb7b 	bl	8007fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80078ee:	bf00      	nop
 80078f0:	3728      	adds	r7, #40	; 0x28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40013000 	.word	0x40013000
 80078fc:	40023800 	.word	0x40023800
 8007900:	40020400 	.word	0x40020400

08007904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007914:	d116      	bne.n	8007944 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	4a23      	ldr	r2, [pc, #140]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	6413      	str	r3, [r2, #64]	; 0x40
 8007926:	4b21      	ldr	r3, [pc, #132]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	2102      	movs	r1, #2
 8007936:	201c      	movs	r0, #28
 8007938:	f000 fafb 	bl	8007f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800793c:	201c      	movs	r0, #28
 800793e:	f000 fb14 	bl	8007f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007942:	e02e      	b.n	80079a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a19      	ldr	r2, [pc, #100]	; (80079b0 <HAL_TIM_Base_MspInit+0xac>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d116      	bne.n	800797c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4a15      	ldr	r2, [pc, #84]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007958:	f043 0302 	orr.w	r3, r3, #2
 800795c:	6413      	str	r3, [r2, #64]	; 0x40
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800796a:	2200      	movs	r2, #0
 800796c:	2103      	movs	r1, #3
 800796e:	201d      	movs	r0, #29
 8007970:	f000 fadf 	bl	8007f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007974:	201d      	movs	r0, #29
 8007976:	f000 faf8 	bl	8007f6a <HAL_NVIC_EnableIRQ>
}
 800797a:	e012      	b.n	80079a2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <HAL_TIM_Base_MspInit+0xb0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10d      	bne.n	80079a2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	4b08      	ldr	r3, [pc, #32]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	4a07      	ldr	r2, [pc, #28]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6413      	str	r3, [r2, #64]	; 0x40
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <HAL_TIM_Base_MspInit+0xa8>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	40023800 	.word	0x40023800
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800

080079b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c0:	f107 030c 	add.w	r3, r7, #12
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d11d      	bne.n	8007a16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079da:	2300      	movs	r3, #0
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <HAL_TIM_MspPostInit+0x68>)
 80079e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e2:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <HAL_TIM_MspPostInit+0x68>)
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ea:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <HAL_TIM_MspPostInit+0x68>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	60bb      	str	r3, [r7, #8]
 80079f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 80079f6:	2326      	movs	r3, #38	; 0x26
 80079f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fa:	2302      	movs	r3, #2
 80079fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007a06:	2301      	movs	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4804      	ldr	r0, [pc, #16]	; (8007a24 <HAL_TIM_MspPostInit+0x6c>)
 8007a12:	f000 fae7 	bl	8007fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007a16:	bf00      	nop
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40020000 	.word	0x40020000

08007a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_UART_MspInit+0x94>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d134      	bne.n	8007ab4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a58:	6413      	str	r3, [r2, #64]	; 0x40
 8007a5a:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a70:	f043 0304 	orr.w	r3, r3, #4
 8007a74:	6313      	str	r3, [r2, #48]	; 0x30
 8007a76:	4b12      	ldr	r3, [pc, #72]	; (8007ac0 <HAL_UART_MspInit+0x98>)
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	f003 0304 	and.w	r3, r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 8007a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a88:	2302      	movs	r3, #2
 8007a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a90:	2303      	movs	r3, #3
 8007a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007a94:	2307      	movs	r3, #7
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a98:	f107 0314 	add.w	r3, r7, #20
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4809      	ldr	r0, [pc, #36]	; (8007ac4 <HAL_UART_MspInit+0x9c>)
 8007aa0:	f000 faa0 	bl	8007fe4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	2027      	movs	r0, #39	; 0x27
 8007aaa:	f000 fa42 	bl	8007f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007aae:	2027      	movs	r0, #39	; 0x27
 8007ab0:	f000 fa5b 	bl	8007f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007ab4:	bf00      	nop
 8007ab6:	3728      	adds	r7, #40	; 0x28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	40004800 	.word	0x40004800
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	40020800 	.word	0x40020800

08007ac8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007acc:	bf00      	nop
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8007ad6:	b480      	push	{r7}
 8007ad8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		return;
 8007ada:	bf00      	nop
		/* USER CODE END W1_HardFault_IRQn 0 */
	}
}
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8007ae8:	e7fe      	b.n	8007ae8 <MemManage_Handler+0x4>

08007aea <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8007aea:	b480      	push	{r7}
 8007aec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8007aee:	e7fe      	b.n	8007aee <BusFault_Handler+0x4>

08007af0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8007af4:	e7fe      	b.n	8007af4 <UsageFault_Handler+0x4>

08007af6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8007af6:	b480      	push	{r7}
 8007af8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8007afa:	bf00      	nop
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b08:	bf00      	nop
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8007b12:	b480      	push	{r7}
 8007b14:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8007b16:	bf00      	nop
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8007b24:	f7fd f8c4 	bl	8004cb0 <sdcard_systick_timerproc>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007b28:	f000 f8e6 	bl	8007cf8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8007b2c:	bf00      	nop
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007b34:	2001      	movs	r0, #1
 8007b36:	f000 fc3b 	bl	80083b0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8007b3a:	bf00      	nop
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8007b44:	4802      	ldr	r0, [pc, #8]	; (8007b50 <TIM2_IRQHandler+0x10>)
 8007b46:	f002 f9dd 	bl	8009f04 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8007b4a:	bf00      	nop
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	200033d0 	.word	0x200033d0

08007b54 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8007b58:	4802      	ldr	r0, [pc, #8]	; (8007b64 <TIM3_IRQHandler+0x10>)
 8007b5a:	f002 f9d3 	bl	8009f04 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8007b5e:	bf00      	nop
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20003314 	.word	0x20003314

08007b68 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8007b6c:	4802      	ldr	r0, [pc, #8]	; (8007b78 <USART3_IRQHandler+0x10>)
 8007b6e:	f003 fa51 	bl	800b014 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8007b72:	bf00      	nop
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200032d4 	.word	0x200032d4

08007b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b84:	4b11      	ldr	r3, [pc, #68]	; (8007bcc <_sbrk+0x50>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <_sbrk+0x16>
		heap_end = &end;
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <_sbrk+0x50>)
 8007b8e:	4a10      	ldr	r2, [pc, #64]	; (8007bd0 <_sbrk+0x54>)
 8007b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007b92:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <_sbrk+0x50>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <_sbrk+0x50>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	466a      	mov	r2, sp
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d907      	bls.n	8007bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007ba6:	f004 f84f 	bl	800bc48 <__errno>
 8007baa:	4602      	mov	r2, r0
 8007bac:	230c      	movs	r3, #12
 8007bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb4:	e006      	b.n	8007bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <_sbrk+0x50>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	4a03      	ldr	r2, [pc, #12]	; (8007bcc <_sbrk+0x50>)
 8007bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000260 	.word	0x20000260
 8007bd0:	20003418 	.word	0x20003418

08007bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bd8:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <SystemInit+0x28>)
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bde:	4a07      	ldr	r2, [pc, #28]	; (8007bfc <SystemInit+0x28>)
 8007be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <SystemInit+0x28>)
 8007bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bee:	609a      	str	r2, [r3, #8]
#endif
}
 8007bf0:	bf00      	nop
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	e000ed00 	.word	0xe000ed00

08007c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c06:	e003      	b.n	8007c10 <LoopCopyDataInit>

08007c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c0e:	3104      	adds	r1, #4

08007c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c10:	480b      	ldr	r0, [pc, #44]	; (8007c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c12:	4b0c      	ldr	r3, [pc, #48]	; (8007c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c18:	d3f6      	bcc.n	8007c08 <CopyDataInit>
  ldr  r2, =_sbss
 8007c1a:	4a0b      	ldr	r2, [pc, #44]	; (8007c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c1c:	e002      	b.n	8007c24 <LoopFillZerobss>

08007c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c20:	f842 3b04 	str.w	r3, [r2], #4

08007c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c24:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c28:	d3f9      	bcc.n	8007c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c2a:	f7ff ffd3 	bl	8007bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c2e:	f004 f811 	bl	800bc54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c32:	f7ff f9d3 	bl	8006fdc <main>
  bx  lr    
 8007c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007c3c:	0800e450 	.word	0x0800e450
  ldr  r0, =_sdata
 8007c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c44:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8007c48:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8007c4c:	20003418 	.word	0x20003418

08007c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c50:	e7fe      	b.n	8007c50 <ADC_IRQHandler>
	...

08007c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <HAL_Init+0x40>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <HAL_Init+0x40>)
 8007c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <HAL_Init+0x40>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <HAL_Init+0x40>)
 8007c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c70:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <HAL_Init+0x40>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a07      	ldr	r2, [pc, #28]	; (8007c94 <HAL_Init+0x40>)
 8007c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c7c:	2003      	movs	r0, #3
 8007c7e:	f000 f94d 	bl	8007f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c82:	2000      	movs	r0, #0
 8007c84:	f000 f808 	bl	8007c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c88:	f7ff fdb6 	bl	80077f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40023c00 	.word	0x40023c00

08007c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ca0:	4b12      	ldr	r3, [pc, #72]	; (8007cec <HAL_InitTick+0x54>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <HAL_InitTick+0x58>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f965 	bl	8007f86 <HAL_SYSTICK_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e00e      	b.n	8007ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b0f      	cmp	r3, #15
 8007cca:	d80a      	bhi.n	8007ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	f000 f92d 	bl	8007f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cd8:	4a06      	ldr	r2, [pc, #24]	; (8007cf4 <HAL_InitTick+0x5c>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	2000005c 	.word	0x2000005c
 8007cf0:	20000064 	.word	0x20000064
 8007cf4:	20000060 	.word	0x20000060

08007cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <HAL_IncTick+0x20>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <HAL_IncTick+0x24>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4413      	add	r3, r2
 8007d08:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <HAL_IncTick+0x24>)
 8007d0a:	6013      	str	r3, [r2, #0]
}
 8007d0c:	bf00      	nop
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20000064 	.word	0x20000064
 8007d1c:	20003410 	.word	0x20003410

08007d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return uwTick;
 8007d24:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <HAL_GetTick+0x14>)
 8007d26:	681b      	ldr	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20003410 	.word	0x20003410

08007d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d40:	f7ff ffee 	bl	8007d20 <HAL_GetTick>
 8007d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d005      	beq.n	8007d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <HAL_Delay+0x40>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d5e:	bf00      	nop
 8007d60:	f7ff ffde 	bl	8007d20 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d8f7      	bhi.n	8007d60 <HAL_Delay+0x28>
  {
  }
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	20000064 	.word	0x20000064

08007d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d8c:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dae:	4a04      	ldr	r2, [pc, #16]	; (8007dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	60d3      	str	r3, [r2, #12]
}
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	e000ed00 	.word	0xe000ed00

08007dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <__NVIC_GetPriorityGrouping+0x18>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	f003 0307 	and.w	r3, r3, #7
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	db0b      	blt.n	8007e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	f003 021f 	and.w	r2, r3, #31
 8007df8:	4907      	ldr	r1, [pc, #28]	; (8007e18 <__NVIC_EnableIRQ+0x38>)
 8007dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	2001      	movs	r0, #1
 8007e02:	fa00 f202 	lsl.w	r2, r0, r2
 8007e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	e000e100 	.word	0xe000e100

08007e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db0a      	blt.n	8007e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	490c      	ldr	r1, [pc, #48]	; (8007e68 <__NVIC_SetPriority+0x4c>)
 8007e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3a:	0112      	lsls	r2, r2, #4
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e44:	e00a      	b.n	8007e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4908      	ldr	r1, [pc, #32]	; (8007e6c <__NVIC_SetPriority+0x50>)
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	3b04      	subs	r3, #4
 8007e54:	0112      	lsls	r2, r2, #4
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	440b      	add	r3, r1
 8007e5a:	761a      	strb	r2, [r3, #24]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	e000e100 	.word	0xe000e100
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b089      	sub	sp, #36	; 0x24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f1c3 0307 	rsb	r3, r3, #7
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	bf28      	it	cs
 8007e8e:	2304      	movcs	r3, #4
 8007e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3304      	adds	r3, #4
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d902      	bls.n	8007ea0 <NVIC_EncodePriority+0x30>
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	3b03      	subs	r3, #3
 8007e9e:	e000      	b.n	8007ea2 <NVIC_EncodePriority+0x32>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec2:	43d9      	mvns	r1, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ec8:	4313      	orrs	r3, r2
         );
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3724      	adds	r7, #36	; 0x24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ee8:	d301      	bcc.n	8007eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007eea:	2301      	movs	r3, #1
 8007eec:	e00f      	b.n	8007f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007eee:	4a0a      	ldr	r2, [pc, #40]	; (8007f18 <SysTick_Config+0x40>)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007ef6:	210f      	movs	r1, #15
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	f7ff ff8e 	bl	8007e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f00:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <SysTick_Config+0x40>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f06:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <SysTick_Config+0x40>)
 8007f08:	2207      	movs	r2, #7
 8007f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	e000e010 	.word	0xe000e010

08007f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff ff29 	bl	8007d7c <__NVIC_SetPriorityGrouping>
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	4603      	mov	r3, r0
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f44:	f7ff ff3e 	bl	8007dc4 <__NVIC_GetPriorityGrouping>
 8007f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	f7ff ff8e 	bl	8007e70 <NVIC_EncodePriority>
 8007f54:	4602      	mov	r2, r0
 8007f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff ff5d 	bl	8007e1c <__NVIC_SetPriority>
}
 8007f62:	bf00      	nop
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	4603      	mov	r3, r0
 8007f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ff31 	bl	8007de0 <__NVIC_EnableIRQ>
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff ffa2 	bl	8007ed8 <SysTick_Config>
 8007f94:	4603      	mov	r3, r0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b083      	sub	sp, #12
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d004      	beq.n	8007fbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2280      	movs	r2, #128	; 0x80
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e00c      	b.n	8007fd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2205      	movs	r2, #5
 8007fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b089      	sub	sp, #36	; 0x24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	e16b      	b.n	80082d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008000:	2201      	movs	r2, #1
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4013      	ands	r3, r2
 8008012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	f040 815a 	bne.w	80082d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d00b      	beq.n	800803e <HAL_GPIO_Init+0x5a>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d007      	beq.n	800803e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008032:	2b11      	cmp	r3, #17
 8008034:	d003      	beq.n	800803e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b12      	cmp	r3, #18
 800803c:	d130      	bne.n	80080a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	2203      	movs	r2, #3
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43db      	mvns	r3, r3
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	4013      	ands	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	4313      	orrs	r3, r2
 8008066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008074:	2201      	movs	r2, #1
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	43db      	mvns	r3, r3
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	4013      	ands	r3, r2
 8008082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	091b      	lsrs	r3, r3, #4
 800808a:	f003 0201 	and.w	r2, r3, #1
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	4313      	orrs	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	2203      	movs	r2, #3
 80080ac:	fa02 f303 	lsl.w	r3, r2, r3
 80080b0:	43db      	mvns	r3, r3
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	4013      	ands	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d003      	beq.n	80080e0 <HAL_GPIO_Init+0xfc>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b12      	cmp	r3, #18
 80080de:	d123      	bne.n	8008128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	08da      	lsrs	r2, r3, #3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3208      	adds	r2, #8
 80080e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	220f      	movs	r2, #15
 80080f8:	fa02 f303 	lsl.w	r3, r2, r3
 80080fc:	43db      	mvns	r3, r3
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	4013      	ands	r3, r2
 8008102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	4313      	orrs	r3, r2
 8008118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	08da      	lsrs	r2, r3, #3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3208      	adds	r2, #8
 8008122:	69b9      	ldr	r1, [r7, #24]
 8008124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	2203      	movs	r2, #3
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4013      	ands	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f003 0203 	and.w	r2, r3, #3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	fa02 f303 	lsl.w	r3, r2, r3
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4313      	orrs	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 80b4 	beq.w	80082d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	4b5f      	ldr	r3, [pc, #380]	; (80082ec <HAL_GPIO_Init+0x308>)
 8008170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008172:	4a5e      	ldr	r2, [pc, #376]	; (80082ec <HAL_GPIO_Init+0x308>)
 8008174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008178:	6453      	str	r3, [r2, #68]	; 0x44
 800817a:	4b5c      	ldr	r3, [pc, #368]	; (80082ec <HAL_GPIO_Init+0x308>)
 800817c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008186:	4a5a      	ldr	r2, [pc, #360]	; (80082f0 <HAL_GPIO_Init+0x30c>)
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	3302      	adds	r3, #2
 800818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	220f      	movs	r2, #15
 800819e:	fa02 f303 	lsl.w	r3, r2, r3
 80081a2:	43db      	mvns	r3, r3
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	4013      	ands	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a51      	ldr	r2, [pc, #324]	; (80082f4 <HAL_GPIO_Init+0x310>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d02b      	beq.n	800820a <HAL_GPIO_Init+0x226>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a50      	ldr	r2, [pc, #320]	; (80082f8 <HAL_GPIO_Init+0x314>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d025      	beq.n	8008206 <HAL_GPIO_Init+0x222>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a4f      	ldr	r2, [pc, #316]	; (80082fc <HAL_GPIO_Init+0x318>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01f      	beq.n	8008202 <HAL_GPIO_Init+0x21e>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a4e      	ldr	r2, [pc, #312]	; (8008300 <HAL_GPIO_Init+0x31c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d019      	beq.n	80081fe <HAL_GPIO_Init+0x21a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a4d      	ldr	r2, [pc, #308]	; (8008304 <HAL_GPIO_Init+0x320>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <HAL_GPIO_Init+0x216>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a4c      	ldr	r2, [pc, #304]	; (8008308 <HAL_GPIO_Init+0x324>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00d      	beq.n	80081f6 <HAL_GPIO_Init+0x212>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a4b      	ldr	r2, [pc, #300]	; (800830c <HAL_GPIO_Init+0x328>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <HAL_GPIO_Init+0x20e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a4a      	ldr	r2, [pc, #296]	; (8008310 <HAL_GPIO_Init+0x32c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d101      	bne.n	80081ee <HAL_GPIO_Init+0x20a>
 80081ea:	2307      	movs	r3, #7
 80081ec:	e00e      	b.n	800820c <HAL_GPIO_Init+0x228>
 80081ee:	2308      	movs	r3, #8
 80081f0:	e00c      	b.n	800820c <HAL_GPIO_Init+0x228>
 80081f2:	2306      	movs	r3, #6
 80081f4:	e00a      	b.n	800820c <HAL_GPIO_Init+0x228>
 80081f6:	2305      	movs	r3, #5
 80081f8:	e008      	b.n	800820c <HAL_GPIO_Init+0x228>
 80081fa:	2304      	movs	r3, #4
 80081fc:	e006      	b.n	800820c <HAL_GPIO_Init+0x228>
 80081fe:	2303      	movs	r3, #3
 8008200:	e004      	b.n	800820c <HAL_GPIO_Init+0x228>
 8008202:	2302      	movs	r3, #2
 8008204:	e002      	b.n	800820c <HAL_GPIO_Init+0x228>
 8008206:	2301      	movs	r3, #1
 8008208:	e000      	b.n	800820c <HAL_GPIO_Init+0x228>
 800820a:	2300      	movs	r3, #0
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	f002 0203 	and.w	r2, r2, #3
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	4093      	lsls	r3, r2
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	4313      	orrs	r3, r2
 800821a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800821c:	4934      	ldr	r1, [pc, #208]	; (80082f0 <HAL_GPIO_Init+0x30c>)
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	089b      	lsrs	r3, r3, #2
 8008222:	3302      	adds	r3, #2
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800822a:	4b3a      	ldr	r3, [pc, #232]	; (8008314 <HAL_GPIO_Init+0x330>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	43db      	mvns	r3, r3
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4013      	ands	r3, r2
 8008238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800824e:	4a31      	ldr	r2, [pc, #196]	; (8008314 <HAL_GPIO_Init+0x330>)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008254:	4b2f      	ldr	r3, [pc, #188]	; (8008314 <HAL_GPIO_Init+0x330>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	43db      	mvns	r3, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4013      	ands	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008278:	4a26      	ldr	r2, [pc, #152]	; (8008314 <HAL_GPIO_Init+0x330>)
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800827e:	4b25      	ldr	r3, [pc, #148]	; (8008314 <HAL_GPIO_Init+0x330>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80082a2:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_GPIO_Init+0x330>)
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <HAL_GPIO_Init+0x330>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	4013      	ands	r3, r2
 80082b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80082cc:	4a11      	ldr	r2, [pc, #68]	; (8008314 <HAL_GPIO_Init+0x330>)
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	3301      	adds	r3, #1
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	f67f ae90 	bls.w	8008000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80082e0:	bf00      	nop
 80082e2:	3724      	adds	r7, #36	; 0x24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40013800 	.word	0x40013800
 80082f4:	40020000 	.word	0x40020000
 80082f8:	40020400 	.word	0x40020400
 80082fc:	40020800 	.word	0x40020800
 8008300:	40020c00 	.word	0x40020c00
 8008304:	40021000 	.word	0x40021000
 8008308:	40021400 	.word	0x40021400
 800830c:	40021800 	.word	0x40021800
 8008310:	40021c00 	.word	0x40021c00
 8008314:	40013c00 	.word	0x40013c00

08008318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	887b      	ldrh	r3, [r7, #2]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008330:	2301      	movs	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
 8008334:	e001      	b.n	800833a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
 8008354:	4613      	mov	r3, r2
 8008356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008358:	787b      	ldrb	r3, [r7, #1]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800835e:	887a      	ldrh	r2, [r7, #2]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008364:	e003      	b.n	800836e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008366:	887b      	ldrh	r3, [r7, #2]
 8008368:	041a      	lsls	r2, r3, #16
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	619a      	str	r2, [r3, #24]
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695a      	ldr	r2, [r3, #20]
 800838a:	887b      	ldrh	r3, [r7, #2]
 800838c:	401a      	ands	r2, r3
 800838e:	887b      	ldrh	r3, [r7, #2]
 8008390:	429a      	cmp	r2, r3
 8008392:	d104      	bne.n	800839e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008394:	887b      	ldrh	r3, [r7, #2]
 8008396:	041a      	lsls	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800839c:	e002      	b.n	80083a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800839e:	887a      	ldrh	r2, [r7, #2]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	619a      	str	r2, [r3, #24]
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083c6:	4a05      	ldr	r2, [pc, #20]	; (80083dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083c8:	88fb      	ldrh	r3, [r7, #6]
 80083ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff f9dc 	bl	800778c <HAL_GPIO_EXTI_Callback>
  }
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40013c00 	.word	0x40013c00

080083e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e25b      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d075      	beq.n	80084ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083fe:	4ba3      	ldr	r3, [pc, #652]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 030c 	and.w	r3, r3, #12
 8008406:	2b04      	cmp	r3, #4
 8008408:	d00c      	beq.n	8008424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800840a:	4ba0      	ldr	r3, [pc, #640]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008412:	2b08      	cmp	r3, #8
 8008414:	d112      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008416:	4b9d      	ldr	r3, [pc, #628]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008422:	d10b      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008424:	4b99      	ldr	r3, [pc, #612]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05b      	beq.n	80084e8 <HAL_RCC_OscConfig+0x108>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d157      	bne.n	80084e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e236      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008444:	d106      	bne.n	8008454 <HAL_RCC_OscConfig+0x74>
 8008446:	4b91      	ldr	r3, [pc, #580]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a90      	ldr	r2, [pc, #576]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800844c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e01d      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800845c:	d10c      	bne.n	8008478 <HAL_RCC_OscConfig+0x98>
 800845e:	4b8b      	ldr	r3, [pc, #556]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a8a      	ldr	r2, [pc, #552]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4b88      	ldr	r3, [pc, #544]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a87      	ldr	r2, [pc, #540]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e00b      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008478:	4b84      	ldr	r3, [pc, #528]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a83      	ldr	r2, [pc, #524]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800847e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	4b81      	ldr	r3, [pc, #516]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a80      	ldr	r2, [pc, #512]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800848a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800848e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7ff fc42 	bl	8007d20 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a0:	f7ff fc3e 	bl	8007d20 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	; 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e1fb      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b2:	4b76      	ldr	r3, [pc, #472]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0xc0>
 80084be:	e014      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c0:	f7ff fc2e 	bl	8007d20 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084c8:	f7ff fc2a 	bl	8007d20 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b64      	cmp	r3, #100	; 0x64
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e1e7      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084da:	4b6c      	ldr	r3, [pc, #432]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0xe8>
 80084e6:	e000      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d063      	beq.n	80085be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084f6:	4b65      	ldr	r3, [pc, #404]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 030c 	and.w	r3, r3, #12
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008502:	4b62      	ldr	r3, [pc, #392]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800850a:	2b08      	cmp	r3, #8
 800850c:	d11c      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800850e:	4b5f      	ldr	r3, [pc, #380]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d116      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851a:	4b5c      	ldr	r3, [pc, #368]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d001      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e1bb      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008532:	4b56      	ldr	r3, [pc, #344]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4952      	ldr	r1, [pc, #328]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008546:	e03a      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008550:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <HAL_RCC_OscConfig+0x2b0>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008556:	f7ff fbe3 	bl	8007d20 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800855e:	f7ff fbdf 	bl	8007d20 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e19c      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008570:	4b46      	ldr	r3, [pc, #280]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857c:	4b43      	ldr	r3, [pc, #268]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	00db      	lsls	r3, r3, #3
 800858a:	4940      	ldr	r1, [pc, #256]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]
 8008590:	e015      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008592:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <HAL_RCC_OscConfig+0x2b0>)
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008598:	f7ff fbc2 	bl	8007d20 <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800859e:	e008      	b.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085a0:	f7ff fbbe 	bl	8007d20 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e17b      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b2:	4b36      	ldr	r3, [pc, #216]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f0      	bne.n	80085a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d030      	beq.n	800862c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d016      	beq.n	8008600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085d2:	4b30      	ldr	r3, [pc, #192]	; (8008694 <HAL_RCC_OscConfig+0x2b4>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d8:	f7ff fba2 	bl	8007d20 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085e0:	f7ff fb9e 	bl	8007d20 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e15b      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f0      	beq.n	80085e0 <HAL_RCC_OscConfig+0x200>
 80085fe:	e015      	b.n	800862c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008600:	4b24      	ldr	r3, [pc, #144]	; (8008694 <HAL_RCC_OscConfig+0x2b4>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008606:	f7ff fb8b 	bl	8007d20 <HAL_GetTick>
 800860a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800860c:	e008      	b.n	8008620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800860e:	f7ff fb87 	bl	8007d20 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e144      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f0      	bne.n	800860e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0304 	and.w	r3, r3, #4
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80a0 	beq.w	800877a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800863a:	2300      	movs	r3, #0
 800863c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10f      	bne.n	800866a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800864a:	2300      	movs	r3, #0
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	4b0f      	ldr	r3, [pc, #60]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	4a0e      	ldr	r2, [pc, #56]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 8008654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008658:	6413      	str	r3, [r2, #64]	; 0x40
 800865a:	4b0c      	ldr	r3, [pc, #48]	; (800868c <HAL_RCC_OscConfig+0x2ac>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008666:	2301      	movs	r3, #1
 8008668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800866a:	4b0b      	ldr	r3, [pc, #44]	; (8008698 <HAL_RCC_OscConfig+0x2b8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d121      	bne.n	80086ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008676:	4b08      	ldr	r3, [pc, #32]	; (8008698 <HAL_RCC_OscConfig+0x2b8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a07      	ldr	r2, [pc, #28]	; (8008698 <HAL_RCC_OscConfig+0x2b8>)
 800867c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008682:	f7ff fb4d 	bl	8007d20 <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008688:	e011      	b.n	80086ae <HAL_RCC_OscConfig+0x2ce>
 800868a:	bf00      	nop
 800868c:	40023800 	.word	0x40023800
 8008690:	42470000 	.word	0x42470000
 8008694:	42470e80 	.word	0x42470e80
 8008698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800869c:	f7ff fb40 	bl	8007d20 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e0fd      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ae:	4b81      	ldr	r3, [pc, #516]	; (80088b4 <HAL_RCC_OscConfig+0x4d4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d106      	bne.n	80086d0 <HAL_RCC_OscConfig+0x2f0>
 80086c2:	4b7d      	ldr	r3, [pc, #500]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	4a7c      	ldr	r2, [pc, #496]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	6713      	str	r3, [r2, #112]	; 0x70
 80086ce:	e01c      	b.n	800870a <HAL_RCC_OscConfig+0x32a>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	2b05      	cmp	r3, #5
 80086d6:	d10c      	bne.n	80086f2 <HAL_RCC_OscConfig+0x312>
 80086d8:	4b77      	ldr	r3, [pc, #476]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086dc:	4a76      	ldr	r2, [pc, #472]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086de:	f043 0304 	orr.w	r3, r3, #4
 80086e2:	6713      	str	r3, [r2, #112]	; 0x70
 80086e4:	4b74      	ldr	r3, [pc, #464]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	4a73      	ldr	r2, [pc, #460]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086ea:	f043 0301 	orr.w	r3, r3, #1
 80086ee:	6713      	str	r3, [r2, #112]	; 0x70
 80086f0:	e00b      	b.n	800870a <HAL_RCC_OscConfig+0x32a>
 80086f2:	4b71      	ldr	r3, [pc, #452]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	4a70      	ldr	r2, [pc, #448]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	6713      	str	r3, [r2, #112]	; 0x70
 80086fe:	4b6e      	ldr	r3, [pc, #440]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	4a6d      	ldr	r2, [pc, #436]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008704:	f023 0304 	bic.w	r3, r3, #4
 8008708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d015      	beq.n	800873e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008712:	f7ff fb05 	bl	8007d20 <HAL_GetTick>
 8008716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008718:	e00a      	b.n	8008730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7ff fb01 	bl	8007d20 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	4293      	cmp	r3, r2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e0bc      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008730:	4b61      	ldr	r3, [pc, #388]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ee      	beq.n	800871a <HAL_RCC_OscConfig+0x33a>
 800873c:	e014      	b.n	8008768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800873e:	f7ff faef 	bl	8007d20 <HAL_GetTick>
 8008742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008744:	e00a      	b.n	800875c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008746:	f7ff faeb 	bl	8007d20 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	f241 3288 	movw	r2, #5000	; 0x1388
 8008754:	4293      	cmp	r3, r2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e0a6      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800875c:	4b56      	ldr	r3, [pc, #344]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 800875e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1ee      	bne.n	8008746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d105      	bne.n	800877a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800876e:	4b52      	ldr	r3, [pc, #328]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	4a51      	ldr	r2, [pc, #324]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 8092 	beq.w	80088a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008784:	4b4c      	ldr	r3, [pc, #304]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 030c 	and.w	r3, r3, #12
 800878c:	2b08      	cmp	r3, #8
 800878e:	d05c      	beq.n	800884a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d141      	bne.n	800881c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008798:	4b48      	ldr	r3, [pc, #288]	; (80088bc <HAL_RCC_OscConfig+0x4dc>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879e:	f7ff fabf 	bl	8007d20 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a6:	f7ff fabb 	bl	8007d20 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e078      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b8:	4b3f      	ldr	r3, [pc, #252]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f0      	bne.n	80087a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	019b      	lsls	r3, r3, #6
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	085b      	lsrs	r3, r3, #1
 80087dc:	3b01      	subs	r3, #1
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	061b      	lsls	r3, r3, #24
 80087e8:	4933      	ldr	r1, [pc, #204]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087ee:	4b33      	ldr	r3, [pc, #204]	; (80088bc <HAL_RCC_OscConfig+0x4dc>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f4:	f7ff fa94 	bl	8007d20 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087fc:	f7ff fa90 	bl	8007d20 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e04d      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800880e:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x41c>
 800881a:	e045      	b.n	80088a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800881c:	4b27      	ldr	r3, [pc, #156]	; (80088bc <HAL_RCC_OscConfig+0x4dc>)
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008822:	f7ff fa7d 	bl	8007d20 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008828:	e008      	b.n	800883c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800882a:	f7ff fa79 	bl	8007d20 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e036      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883c:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f0      	bne.n	800882a <HAL_RCC_OscConfig+0x44a>
 8008848:	e02e      	b.n	80088a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d101      	bne.n	8008856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e029      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <HAL_RCC_OscConfig+0x4d8>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	429a      	cmp	r2, r3
 8008868:	d11c      	bne.n	80088a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008874:	429a      	cmp	r2, r3
 8008876:	d115      	bne.n	80088a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800887e:	4013      	ands	r3, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008884:	4293      	cmp	r3, r2
 8008886:	d10d      	bne.n	80088a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008892:	429a      	cmp	r2, r3
 8008894:	d106      	bne.n	80088a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d001      	beq.n	80088a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	40007000 	.word	0x40007000
 80088b8:	40023800 	.word	0x40023800
 80088bc:	42470060 	.word	0x42470060

080088c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0cc      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088d4:	4b68      	ldr	r3, [pc, #416]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d90c      	bls.n	80088fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e2:	4b65      	ldr	r3, [pc, #404]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	b2d2      	uxtb	r2, r2
 80088e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ea:	4b63      	ldr	r3, [pc, #396]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 030f 	and.w	r3, r3, #15
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d001      	beq.n	80088fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0b8      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008914:	4b59      	ldr	r3, [pc, #356]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	4a58      	ldr	r2, [pc, #352]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800891a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800891e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800892c:	4b53      	ldr	r3, [pc, #332]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	4a52      	ldr	r2, [pc, #328]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008938:	4b50      	ldr	r3, [pc, #320]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	494d      	ldr	r1, [pc, #308]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d044      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d107      	bne.n	800896e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800895e:	4b47      	ldr	r3, [pc, #284]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d119      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e07f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d003      	beq.n	800897e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800897a:	2b03      	cmp	r3, #3
 800897c:	d107      	bne.n	800898e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e06f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898e:	4b3b      	ldr	r3, [pc, #236]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e067      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899e:	4b37      	ldr	r3, [pc, #220]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 0203 	bic.w	r2, r3, #3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4934      	ldr	r1, [pc, #208]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b0:	f7ff f9b6 	bl	8007d20 <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b6:	e00a      	b.n	80089ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7ff f9b2 	bl	8007d20 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e04f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 020c 	and.w	r2, r3, #12
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	429a      	cmp	r2, r3
 80089de:	d1eb      	bne.n	80089b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20c      	bcs.n	8008a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e032      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a14:	4b19      	ldr	r3, [pc, #100]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	4916      	ldr	r1, [pc, #88]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	490e      	ldr	r1, [pc, #56]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a46:	f000 f821 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <HAL_RCC_ClockConfig+0x1c0>)
 8008a58:	5cd3      	ldrb	r3, [r2, r3]
 8008a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 8008a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff f916 	bl	8007c98 <HAL_InitTick>

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40023c00 	.word	0x40023c00
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	0800e1c8 	.word	0x0800e1c8
 8008a84:	2000005c 	.word	0x2000005c
 8008a88:	20000060 	.word	0x20000060

08008a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	607b      	str	r3, [r7, #4]
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aa2:	4b63      	ldr	r3, [pc, #396]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d007      	beq.n	8008abe <HAL_RCC_GetSysClockFreq+0x32>
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d008      	beq.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x38>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 80b4 	bne.w	8008c20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ab8:	4b5e      	ldr	r3, [pc, #376]	; (8008c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008aba:	60bb      	str	r3, [r7, #8]
       break;
 8008abc:	e0b3      	b.n	8008c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008abe:	4b5e      	ldr	r3, [pc, #376]	; (8008c38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008ac0:	60bb      	str	r3, [r7, #8]
      break;
 8008ac2:	e0b0      	b.n	8008c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ac4:	4b5a      	ldr	r3, [pc, #360]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ace:	4b58      	ldr	r3, [pc, #352]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04a      	beq.n	8008b70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ada:	4b55      	ldr	r3, [pc, #340]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	099b      	lsrs	r3, r3, #6
 8008ae0:	f04f 0400 	mov.w	r4, #0
 8008ae4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	ea03 0501 	and.w	r5, r3, r1
 8008af0:	ea04 0602 	and.w	r6, r4, r2
 8008af4:	4629      	mov	r1, r5
 8008af6:	4632      	mov	r2, r6
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	f04f 0400 	mov.w	r4, #0
 8008b00:	0154      	lsls	r4, r2, #5
 8008b02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b06:	014b      	lsls	r3, r1, #5
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	1b49      	subs	r1, r1, r5
 8008b0e:	eb62 0206 	sbc.w	r2, r2, r6
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	f04f 0400 	mov.w	r4, #0
 8008b1a:	0194      	lsls	r4, r2, #6
 8008b1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b20:	018b      	lsls	r3, r1, #6
 8008b22:	1a5b      	subs	r3, r3, r1
 8008b24:	eb64 0402 	sbc.w	r4, r4, r2
 8008b28:	f04f 0100 	mov.w	r1, #0
 8008b2c:	f04f 0200 	mov.w	r2, #0
 8008b30:	00e2      	lsls	r2, r4, #3
 8008b32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b36:	00d9      	lsls	r1, r3, #3
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	195b      	adds	r3, r3, r5
 8008b3e:	eb44 0406 	adc.w	r4, r4, r6
 8008b42:	f04f 0100 	mov.w	r1, #0
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	0262      	lsls	r2, r4, #9
 8008b4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008b50:	0259      	lsls	r1, r3, #9
 8008b52:	460b      	mov	r3, r1
 8008b54:	4614      	mov	r4, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	4621      	mov	r1, r4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f04f 0400 	mov.w	r4, #0
 8008b60:	461a      	mov	r2, r3
 8008b62:	4623      	mov	r3, r4
 8008b64:	f7f8 f830 	bl	8000bc8 <__aeabi_uldivmod>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	e049      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b70:	4b2f      	ldr	r3, [pc, #188]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	099b      	lsrs	r3, r3, #6
 8008b76:	f04f 0400 	mov.w	r4, #0
 8008b7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	ea03 0501 	and.w	r5, r3, r1
 8008b86:	ea04 0602 	and.w	r6, r4, r2
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	f04f 0300 	mov.w	r3, #0
 8008b92:	f04f 0400 	mov.w	r4, #0
 8008b96:	0154      	lsls	r4, r2, #5
 8008b98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b9c:	014b      	lsls	r3, r1, #5
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	1b49      	subs	r1, r1, r5
 8008ba4:	eb62 0206 	sbc.w	r2, r2, r6
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	f04f 0400 	mov.w	r4, #0
 8008bb0:	0194      	lsls	r4, r2, #6
 8008bb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008bb6:	018b      	lsls	r3, r1, #6
 8008bb8:	1a5b      	subs	r3, r3, r1
 8008bba:	eb64 0402 	sbc.w	r4, r4, r2
 8008bbe:	f04f 0100 	mov.w	r1, #0
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	00e2      	lsls	r2, r4, #3
 8008bc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008bcc:	00d9      	lsls	r1, r3, #3
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	195b      	adds	r3, r3, r5
 8008bd4:	eb44 0406 	adc.w	r4, r4, r6
 8008bd8:	f04f 0100 	mov.w	r1, #0
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	02a2      	lsls	r2, r4, #10
 8008be2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008be6:	0299      	lsls	r1, r3, #10
 8008be8:	460b      	mov	r3, r1
 8008bea:	4614      	mov	r4, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	4621      	mov	r1, r4
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 0400 	mov.w	r4, #0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	4623      	mov	r3, r4
 8008bfa:	f7f7 ffe5 	bl	8000bc8 <__aeabi_uldivmod>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	460c      	mov	r4, r1
 8008c02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	0c1b      	lsrs	r3, r3, #16
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	3301      	adds	r3, #1
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1c:	60bb      	str	r3, [r7, #8]
      break;
 8008c1e:	e002      	b.n	8008c26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c20:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008c22:	60bb      	str	r3, [r7, #8]
      break;
 8008c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c26:	68bb      	ldr	r3, [r7, #8]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c30:	40023800 	.word	0x40023800
 8008c34:	00f42400 	.word	0x00f42400
 8008c38:	007a1200 	.word	0x007a1200

08008c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c40:	4b03      	ldr	r3, [pc, #12]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c42:	681b      	ldr	r3, [r3, #0]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	2000005c 	.word	0x2000005c

08008c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c58:	f7ff fff0 	bl	8008c3c <HAL_RCC_GetHCLKFreq>
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	0a9b      	lsrs	r3, r3, #10
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	4a03      	ldr	r2, [pc, #12]	; (8008c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	40023800 	.word	0x40023800
 8008c78:	0800e1d8 	.word	0x0800e1d8

08008c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c80:	f7ff ffdc 	bl	8008c3c <HAL_RCC_GetHCLKFreq>
 8008c84:	4601      	mov	r1, r0
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	0b5b      	lsrs	r3, r3, #13
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	4a03      	ldr	r2, [pc, #12]	; (8008ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c92:	5cd3      	ldrb	r3, [r2, r3]
 8008c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	0800e1d8 	.word	0x0800e1d8

08008ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d035      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ccc:	4b62      	ldr	r3, [pc, #392]	; (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cd2:	f7ff f825 	bl	8007d20 <HAL_GetTick>
 8008cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cd8:	e008      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cda:	f7ff f821 	bl	8007d20 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d901      	bls.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e0b0      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cec:	4b5b      	ldr	r3, [pc, #364]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1f0      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	019a      	lsls	r2, r3, #6
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	071b      	lsls	r3, r3, #28
 8008d04:	4955      	ldr	r1, [pc, #340]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008d0c:	4b52      	ldr	r3, [pc, #328]	; (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d12:	f7ff f805 	bl	8007d20 <HAL_GetTick>
 8008d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d18:	e008      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d1a:	f7ff f801 	bl	8007d20 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d901      	bls.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e090      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0f0      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 8083 	beq.w	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	4b44      	ldr	r3, [pc, #272]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	4a43      	ldr	r2, [pc, #268]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	6413      	str	r3, [r2, #64]	; 0x40
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008d62:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a3e      	ldr	r2, [pc, #248]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d6e:	f7fe ffd7 	bl	8007d20 <HAL_GetTick>
 8008d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d74:	e008      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d76:	f7fe ffd3 	bl	8007d20 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d901      	bls.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e062      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d88:	4b35      	ldr	r3, [pc, #212]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0f0      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d94:	4b31      	ldr	r3, [pc, #196]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d02f      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d028      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008db2:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008dc2:	4b28      	ldr	r3, [pc, #160]	; (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008dc8:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008dce:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d114      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008dda:	f7fe ffa1 	bl	8007d20 <HAL_GetTick>
 8008dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008de0:	e00a      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008de2:	f7fe ff9d 	bl	8007d20 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e02a      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0ee      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e10:	d10d      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e26:	490d      	ldr	r1, [pc, #52]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	608b      	str	r3, [r1, #8]
 8008e2c:	e005      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e38:	6093      	str	r3, [r2, #8]
 8008e3a:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e46:	4905      	ldr	r1, [pc, #20]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	42470068 	.word	0x42470068
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40007000 	.word	0x40007000
 8008e64:	42470e40 	.word	0x42470e40

08008e68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e083      	b.n	8008f82 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	7f5b      	ldrb	r3, [r3, #29]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fe fcdc 	bl	8007848 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	22ca      	movs	r2, #202	; 0xca
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2253      	movs	r2, #83	; 0x53
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 faa8 	bl	80093fc <RTC_EnterInitMode>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	22ff      	movs	r2, #255	; 0xff
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e05e      	b.n	8008f82 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6899      	ldr	r1, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	68d2      	ldr	r2, [r2, #12]
 8008efe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6919      	ldr	r1, [r3, #16]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	041a      	lsls	r2, r3, #16
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10e      	bne.n	8008f50 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa3a 	bl	80093ac <HAL_RTC_WaitForSynchro>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	22ff      	movs	r2, #255	; 0xff
 8008f44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e018      	b.n	8008f82 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f5e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	22ff      	movs	r2, #255	; 0xff
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008f80:	2300      	movs	r3, #0
  }
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f8a:	b590      	push	{r4, r7, lr}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	7f1b      	ldrb	r3, [r3, #28]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_RTC_SetTime+0x1c>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e0aa      	b.n	80090fc <HAL_RTC_SetTime+0x172>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d126      	bne.n	8009006 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fa3f 	bl	8009454 <RTC_ByteToBcd2>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	785b      	ldrb	r3, [r3, #1]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fa38 	bl	8009454 <RTC_ByteToBcd2>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008fe8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	789b      	ldrb	r3, [r3, #2]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fa30 	bl	8009454 <RTC_ByteToBcd2>
 8008ff4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008ff6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	78db      	ldrb	r3, [r3, #3]
 8008ffe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	e018      	b.n	8009038 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009026:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800902c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	78db      	ldrb	r3, [r3, #3]
 8009032:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	22ca      	movs	r2, #202	; 0xca
 800903e:	625a      	str	r2, [r3, #36]	; 0x24
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2253      	movs	r2, #83	; 0x53
 8009046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f9d7 	bl	80093fc <RTC_EnterInitMode>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	22ff      	movs	r2, #255	; 0xff
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2204      	movs	r2, #4
 8009060:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e047      	b.n	80090fc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009076:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800907a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800908a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6899      	ldr	r1, [r3, #8]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	431a      	orrs	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d111      	bne.n	80090e6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 f972 	bl	80093ac <HAL_RTC_WaitForSynchro>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	22ff      	movs	r2, #255	; 0xff
 80090d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2204      	movs	r2, #4
 80090da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e00a      	b.n	80090fc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	22ff      	movs	r2, #255	; 0xff
 80090ec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2200      	movs	r2, #0
 80090f8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80090fa:	2300      	movs	r3, #0
  }
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	bd90      	pop	{r4, r7, pc}

08009104 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009136:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800913a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	0c1b      	lsrs	r3, r3, #16
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009146:	b2da      	uxtb	r2, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	0a1b      	lsrs	r3, r3, #8
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009164:	b2da      	uxtb	r2, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	0c1b      	lsrs	r3, r3, #16
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009174:	b2da      	uxtb	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11a      	bne.n	80091b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f983 	bl	8009490 <RTC_Bcd2ToByte>
 800918a:	4603      	mov	r3, r0
 800918c:	461a      	mov	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	785b      	ldrb	r3, [r3, #1]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 f97a 	bl	8009490 <RTC_Bcd2ToByte>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	789b      	ldrb	r3, [r3, #2]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 f971 	bl	8009490 <RTC_Bcd2ToByte>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	7f1b      	ldrb	r3, [r3, #28]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d101      	bne.n	80091dc <HAL_RTC_SetDate+0x1c>
 80091d8:	2302      	movs	r3, #2
 80091da:	e094      	b.n	8009306 <HAL_RTC_SetDate+0x146>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2202      	movs	r2, #2
 80091e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10e      	bne.n	800920c <HAL_RTC_SetDate+0x4c>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d008      	beq.n	800920c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	b2db      	uxtb	r3, r3
 8009204:	330a      	adds	r3, #10
 8009206:	b2da      	uxtb	r2, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d11c      	bne.n	800924c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	78db      	ldrb	r3, [r3, #3]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f91c 	bl	8009454 <RTC_ByteToBcd2>
 800921c:	4603      	mov	r3, r0
 800921e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	785b      	ldrb	r3, [r3, #1]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f915 	bl	8009454 <RTC_ByteToBcd2>
 800922a:	4603      	mov	r3, r0
 800922c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800922e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 f90d 	bl	8009454 <RTC_ByteToBcd2>
 800923a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800923c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	e00e      	b.n	800926a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	78db      	ldrb	r3, [r3, #3]
 8009250:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009258:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800925e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	22ca      	movs	r2, #202	; 0xca
 8009270:	625a      	str	r2, [r3, #36]	; 0x24
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2253      	movs	r2, #83	; 0x53
 8009278:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f8be 	bl	80093fc <RTC_EnterInitMode>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00b      	beq.n	800929e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	22ff      	movs	r2, #255	; 0xff
 800928c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2204      	movs	r2, #4
 8009292:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e033      	b.n	8009306 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d111      	bne.n	80092f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f000 f86d 	bl	80093ac <HAL_RTC_WaitForSynchro>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	22ff      	movs	r2, #255	; 0xff
 80092de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2204      	movs	r2, #4
 80092e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e00a      	b.n	8009306 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009304:	2300      	movs	r3, #0
  }
}
 8009306:	4618      	mov	r0, r3
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	bd90      	pop	{r4, r7, pc}

0800930e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	60f8      	str	r0, [r7, #12]
 8009316:	60b9      	str	r1, [r7, #8]
 8009318:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800932c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	b2da      	uxtb	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	0a1b      	lsrs	r3, r3, #8
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	b2da      	uxtb	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	0b5b      	lsrs	r3, r3, #13
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	b2da      	uxtb	r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d11a      	bne.n	80093a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	78db      	ldrb	r3, [r3, #3]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f88d 	bl	8009490 <RTC_Bcd2ToByte>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	785b      	ldrb	r3, [r3, #1]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f884 	bl	8009490 <RTC_Bcd2ToByte>
 8009388:	4603      	mov	r3, r0
 800938a:	461a      	mov	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	789b      	ldrb	r3, [r3, #2]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f87b 	bl	8009490 <RTC_Bcd2ToByte>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80093c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093c8:	f7fe fcaa 	bl	8007d20 <HAL_GetTick>
 80093cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80093ce:	e009      	b.n	80093e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80093d0:	f7fe fca6 	bl	8007d20 <HAL_GetTick>
 80093d4:	4602      	mov	r2, r0
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093de:	d901      	bls.n	80093e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e007      	b.n	80093f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f003 0320 	and.w	r3, r3, #32
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0ee      	beq.n	80093d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d119      	bne.n	800944a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f04f 32ff 	mov.w	r2, #4294967295
 800941e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009420:	f7fe fc7e 	bl	8007d20 <HAL_GetTick>
 8009424:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009426:	e009      	b.n	800943c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009428:	f7fe fc7a 	bl	8007d20 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009436:	d901      	bls.n	800943c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e007      	b.n	800944c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0ee      	beq.n	8009428 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8009462:	e005      	b.n	8009470 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	3b0a      	subs	r3, #10
 800946e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b09      	cmp	r3, #9
 8009474:	d8f6      	bhi.n	8009464 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	b2db      	uxtb	r3, r3
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	b2da      	uxtb	r2, r3
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	4313      	orrs	r3, r2
 8009482:	b2db      	uxtb	r3, r3
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	091b      	lsrs	r3, r3, #4
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	f003 030f 	and.w	r3, r3, #15
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	4413      	add	r3, r2
 80094be:	b2db      	uxtb	r3, r3
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	7f1b      	ldrb	r3, [r3, #28]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 80094de:	2302      	movs	r3, #2
 80094e0:	e030      	b.n	8009544 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	22ca      	movs	r2, #202	; 0xca
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2253      	movs	r2, #83	; 0x53
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800950c:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6899      	ldr	r1, [r3, #8]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800952c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	22ff      	movs	r2, #255	; 0xff
 8009534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e056      	b.n	8009610 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d106      	bne.n	8009582 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7fe f979 	bl	8007874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009598:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095be:	431a      	orrs	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	ea42 0103 	orr.w	r1, r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	0c1b      	lsrs	r3, r3, #16
 80095e0:	f003 0104 	and.w	r1, r3, #4
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	4613      	mov	r3, r2
 8009626:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_SPI_Transmit+0x22>
 8009636:	2302      	movs	r3, #2
 8009638:	e11e      	b.n	8009878 <HAL_SPI_Transmit+0x260>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009642:	f7fe fb6d 	bl	8007d20 <HAL_GetTick>
 8009646:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b01      	cmp	r3, #1
 8009656:	d002      	beq.n	800965e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009658:	2302      	movs	r3, #2
 800965a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800965c:	e103      	b.n	8009866 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d002      	beq.n	800966a <HAL_SPI_Transmit+0x52>
 8009664:	88fb      	ldrh	r3, [r7, #6]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800966e:	e0fa      	b.n	8009866 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2203      	movs	r2, #3
 8009674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	88fa      	ldrh	r2, [r7, #6]
 8009688:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b6:	d107      	bne.n	80096c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d2:	2b40      	cmp	r3, #64	; 0x40
 80096d4:	d007      	beq.n	80096e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ee:	d14b      	bne.n	8009788 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <HAL_SPI_Transmit+0xe6>
 80096f8:	8afb      	ldrh	r3, [r7, #22]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d13e      	bne.n	800977c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009702:	881a      	ldrh	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	1c9a      	adds	r2, r3, #2
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009718:	b29b      	uxth	r3, r3
 800971a:	3b01      	subs	r3, #1
 800971c:	b29a      	uxth	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009722:	e02b      	b.n	800977c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b02      	cmp	r3, #2
 8009730:	d112      	bne.n	8009758 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	881a      	ldrh	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009742:	1c9a      	adds	r2, r3, #2
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974c:	b29b      	uxth	r3, r3
 800974e:	3b01      	subs	r3, #1
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	86da      	strh	r2, [r3, #54]	; 0x36
 8009756:	e011      	b.n	800977c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009758:	f7fe fae2 	bl	8007d20 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d803      	bhi.n	8009770 <HAL_SPI_Transmit+0x158>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d102      	bne.n	8009776 <HAL_SPI_Transmit+0x15e>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d102      	bne.n	800977c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800977a:	e074      	b.n	8009866 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009780:	b29b      	uxth	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1ce      	bne.n	8009724 <HAL_SPI_Transmit+0x10c>
 8009786:	e04c      	b.n	8009822 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <HAL_SPI_Transmit+0x17e>
 8009790:	8afb      	ldrh	r3, [r7, #22]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d140      	bne.n	8009818 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	330c      	adds	r3, #12
 80097a0:	7812      	ldrb	r2, [r2, #0]
 80097a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80097bc:	e02c      	b.n	8009818 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d113      	bne.n	80097f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	7812      	ldrb	r2, [r2, #0]
 80097d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80097f2:	e011      	b.n	8009818 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097f4:	f7fe fa94 	bl	8007d20 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d803      	bhi.n	800980c <HAL_SPI_Transmit+0x1f4>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d102      	bne.n	8009812 <HAL_SPI_Transmit+0x1fa>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009816:	e026      	b.n	8009866 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1cd      	bne.n	80097be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fa44 	bl	8009cb4 <SPI_EndRxTxTransaction>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d002      	beq.n	8009838 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2220      	movs	r2, #32
 8009836:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009840:	2300      	movs	r3, #0
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800985a:	2b00      	cmp	r3, #0
 800985c:	d002      	beq.n	8009864 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	77fb      	strb	r3, [r7, #31]
 8009862:	e000      	b.n	8009866 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009864:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009876:	7ffb      	ldrb	r3, [r7, #31]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3720      	adds	r7, #32
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800988e:	2301      	movs	r3, #1
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x26>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e18a      	b.n	8009bbc <HAL_SPI_TransmitReceive+0x33c>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ae:	f7fe fa37 	bl	8007d20 <HAL_GetTick>
 80098b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80098c4:	887b      	ldrh	r3, [r7, #2]
 80098c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d00f      	beq.n	80098f0 <HAL_SPI_TransmitReceive+0x70>
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098d6:	d107      	bne.n	80098e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <HAL_SPI_TransmitReceive+0x68>
 80098e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d003      	beq.n	80098f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
 80098ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80098ee:	e15b      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d005      	beq.n	8009902 <HAL_SPI_TransmitReceive+0x82>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_SPI_TransmitReceive+0x82>
 80098fc:	887b      	ldrh	r3, [r7, #2]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d103      	bne.n	800990a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009908:	e14e      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b04      	cmp	r3, #4
 8009914:	d003      	beq.n	800991e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2205      	movs	r2, #5
 800991a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	887a      	ldrh	r2, [r7, #2]
 800992e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	887a      	ldrh	r2, [r7, #2]
 8009934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	887a      	ldrh	r2, [r7, #2]
 8009940:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	887a      	ldrh	r2, [r7, #2]
 8009946:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995e:	2b40      	cmp	r3, #64	; 0x40
 8009960:	d007      	beq.n	8009972 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800997a:	d178      	bne.n	8009a6e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <HAL_SPI_TransmitReceive+0x10a>
 8009984:	8b7b      	ldrh	r3, [r7, #26]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d166      	bne.n	8009a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998e:	881a      	ldrh	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999a:	1c9a      	adds	r2, r3, #2
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099ae:	e053      	b.n	8009a58 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d11b      	bne.n	80099f6 <HAL_SPI_TransmitReceive+0x176>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d016      	beq.n	80099f6 <HAL_SPI_TransmitReceive+0x176>
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d113      	bne.n	80099f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d2:	881a      	ldrh	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099de:	1c9a      	adds	r2, r3, #2
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d119      	bne.n	8009a38 <HAL_SPI_TransmitReceive+0x1b8>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d014      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68da      	ldr	r2, [r3, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	b292      	uxth	r2, r2
 8009a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a20:	1c9a      	adds	r2, r3, #2
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a34:	2301      	movs	r3, #1
 8009a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a38:	f7fe f972 	bl	8007d20 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d807      	bhi.n	8009a58 <HAL_SPI_TransmitReceive+0x1d8>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d003      	beq.n	8009a58 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a56:	e0a7      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1a6      	bne.n	80099b0 <HAL_SPI_TransmitReceive+0x130>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1a1      	bne.n	80099b0 <HAL_SPI_TransmitReceive+0x130>
 8009a6c:	e07c      	b.n	8009b68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_SPI_TransmitReceive+0x1fc>
 8009a76:	8b7b      	ldrh	r3, [r7, #26]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d16b      	bne.n	8009b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	330c      	adds	r3, #12
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aa2:	e057      	b.n	8009b54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d11c      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x26c>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d017      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x26c>
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d114      	bne.n	8009aec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	330c      	adds	r3, #12
 8009acc:	7812      	ldrb	r2, [r2, #0]
 8009ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d119      	bne.n	8009b2e <HAL_SPI_TransmitReceive+0x2ae>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d014      	beq.n	8009b2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b2e:	f7fe f8f7 	bl	8007d20 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d803      	bhi.n	8009b46 <HAL_SPI_TransmitReceive+0x2c6>
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b44:	d102      	bne.n	8009b4c <HAL_SPI_TransmitReceive+0x2cc>
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d103      	bne.n	8009b54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b52:	e029      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1a2      	bne.n	8009aa4 <HAL_SPI_TransmitReceive+0x224>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d19d      	bne.n	8009aa4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 f8a1 	bl	8009cb4 <SPI_EndRxTxTransaction>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2220      	movs	r2, #32
 8009b82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009b84:	e010      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	e000      	b.n	8009ba8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009ba6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3730      	adds	r7, #48	; 0x30
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bd2:	b2db      	uxtb	r3, r3
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	4613      	mov	r3, r2
 8009bee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bf0:	e04c      	b.n	8009c8c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf8:	d048      	beq.n	8009c8c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009bfa:	f7fe f891 	bl	8007d20 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d902      	bls.n	8009c10 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d13d      	bne.n	8009c8c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c28:	d111      	bne.n	8009c4e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c32:	d004      	beq.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c3c:	d107      	bne.n	8009c4e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c56:	d10f      	bne.n	8009c78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e00f      	b.n	8009cac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4013      	ands	r3, r2
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d1a3      	bne.n	8009bf2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <SPI_EndRxTxTransaction+0x7c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a1b      	ldr	r2, [pc, #108]	; (8009d34 <SPI_EndRxTxTransaction+0x80>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	0d5b      	lsrs	r3, r3, #21
 8009ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cd0:	fb02 f303 	mul.w	r3, r2, r3
 8009cd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cde:	d112      	bne.n	8009d06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2180      	movs	r1, #128	; 0x80
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f7ff ff78 	bl	8009be0 <SPI_WaitFlagStateUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d016      	beq.n	8009d24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfa:	f043 0220 	orr.w	r2, r3, #32
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d02:	2303      	movs	r3, #3
 8009d04:	e00f      	b.n	8009d26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	d0f2      	beq.n	8009d06 <SPI_EndRxTxTransaction+0x52>
 8009d20:	e000      	b.n	8009d24 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d22:	bf00      	nop
  }

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	2000005c 	.word	0x2000005c
 8009d34:	165e9f81 	.word	0x165e9f81

08009d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e01d      	b.n	8009d86 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d106      	bne.n	8009d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7fd fdd0 	bl	8007904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f000 fb72 	bl	800a460 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b06      	cmp	r3, #6
 8009dae:	d007      	beq.n	8009dc0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0201 	orr.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f042 0201 	orr.w	r2, r2, #1
 8009dec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b06      	cmp	r3, #6
 8009dfe:	d007      	beq.n	8009e10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f042 0201 	orr.w	r2, r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e01d      	b.n	8009e6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f815 	bl	8009e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f000 faff 	bl	800a460 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2201      	movs	r2, #1
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fdca 	bl	800aa34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a15      	ldr	r2, [pc, #84]	; (8009efc <HAL_TIM_PWM_Start+0x74>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d004      	beq.n	8009eb4 <HAL_TIM_PWM_Start+0x2c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a14      	ldr	r2, [pc, #80]	; (8009f00 <HAL_TIM_PWM_Start+0x78>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIM_PWM_Start+0x30>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e000      	b.n	8009eba <HAL_TIM_PWM_Start+0x32>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b06      	cmp	r3, #6
 8009ede:	d007      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40010000 	.word	0x40010000
 8009f00:	40010400 	.word	0x40010400

08009f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d122      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	2b02      	cmp	r3, #2
 8009f26:	d11b      	bne.n	8009f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f06f 0202 	mvn.w	r2, #2
 8009f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa6b 	bl	800a422 <HAL_TIM_IC_CaptureCallback>
 8009f4c:	e005      	b.n	8009f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa5d 	bl	800a40e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa6e 	bl	800a436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d122      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d11b      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f06f 0204 	mvn.w	r2, #4
 8009f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa41 	bl	800a422 <HAL_TIM_IC_CaptureCallback>
 8009fa0:	e005      	b.n	8009fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fa33 	bl	800a40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fa44 	bl	800a436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0308 	and.w	r3, r3, #8
 8009fbe:	2b08      	cmp	r3, #8
 8009fc0:	d122      	bne.n	800a008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f003 0308 	and.w	r3, r3, #8
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d11b      	bne.n	800a008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0208 	mvn.w	r2, #8
 8009fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2204      	movs	r2, #4
 8009fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f003 0303 	and.w	r3, r3, #3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa17 	bl	800a422 <HAL_TIM_IC_CaptureCallback>
 8009ff4:	e005      	b.n	800a002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fa09 	bl	800a40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fa1a 	bl	800a436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	2b10      	cmp	r3, #16
 800a014:	d122      	bne.n	800a05c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b10      	cmp	r3, #16
 800a022:	d11b      	bne.n	800a05c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f06f 0210 	mvn.w	r2, #16
 800a02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2208      	movs	r2, #8
 800a032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d003      	beq.n	800a04a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f9ed 	bl	800a422 <HAL_TIM_IC_CaptureCallback>
 800a048:	e005      	b.n	800a056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f9df 	bl	800a40e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f9f0 	bl	800a436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b01      	cmp	r3, #1
 800a068:	d10e      	bne.n	800a088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b01      	cmp	r3, #1
 800a076:	d107      	bne.n	800a088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f06f 0201 	mvn.w	r2, #1
 800a080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7fd fb56 	bl	8007734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a092:	2b80      	cmp	r3, #128	; 0x80
 800a094:	d10e      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a0:	2b80      	cmp	r3, #128	; 0x80
 800a0a2:	d107      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fd6c 	bl	800ab8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d10e      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	d107      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f9b5 	bl	800a44a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b20      	cmp	r3, #32
 800a0ec:	d10e      	bne.n	800a10c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d107      	bne.n	800a10c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0220 	mvn.w	r2, #32
 800a104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fd36 	bl	800ab78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a10c:	bf00      	nop
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e0b4      	b.n	800a298 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b0c      	cmp	r3, #12
 800a142:	f200 809f 	bhi.w	800a284 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a181 	.word	0x0800a181
 800a150:	0800a285 	.word	0x0800a285
 800a154:	0800a285 	.word	0x0800a285
 800a158:	0800a285 	.word	0x0800a285
 800a15c:	0800a1c1 	.word	0x0800a1c1
 800a160:	0800a285 	.word	0x0800a285
 800a164:	0800a285 	.word	0x0800a285
 800a168:	0800a285 	.word	0x0800a285
 800a16c:	0800a203 	.word	0x0800a203
 800a170:	0800a285 	.word	0x0800a285
 800a174:	0800a285 	.word	0x0800a285
 800a178:	0800a285 	.word	0x0800a285
 800a17c:	0800a243 	.word	0x0800a243
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fa0a 	bl	800a5a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0208 	orr.w	r2, r2, #8
 800a19a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699a      	ldr	r2, [r3, #24]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f022 0204 	bic.w	r2, r2, #4
 800a1aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6999      	ldr	r1, [r3, #24]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	691a      	ldr	r2, [r3, #16]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	619a      	str	r2, [r3, #24]
      break;
 800a1be:	e062      	b.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fa5a 	bl	800a680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	699a      	ldr	r2, [r3, #24]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	699a      	ldr	r2, [r3, #24]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6999      	ldr	r1, [r3, #24]
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	021a      	lsls	r2, r3, #8
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	619a      	str	r2, [r3, #24]
      break;
 800a200:	e041      	b.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 faaf 	bl	800a76c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0208 	orr.w	r2, r2, #8
 800a21c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69da      	ldr	r2, [r3, #28]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0204 	bic.w	r2, r2, #4
 800a22c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	69d9      	ldr	r1, [r3, #28]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	430a      	orrs	r2, r1
 800a23e:	61da      	str	r2, [r3, #28]
      break;
 800a240:	e021      	b.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fb03 	bl	800a854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a25c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a26c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69d9      	ldr	r1, [r3, #28]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	021a      	lsls	r2, r3, #8
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	61da      	str	r2, [r3, #28]
      break;
 800a282:	e000      	b.n	800a286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a284:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_TIM_ConfigClockSource+0x18>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e0a6      	b.n	800a406 <HAL_TIM_ConfigClockSource+0x166>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	d067      	beq.n	800a3c0 <HAL_TIM_ConfigClockSource+0x120>
 800a2f0:	2b40      	cmp	r3, #64	; 0x40
 800a2f2:	d80b      	bhi.n	800a30c <HAL_TIM_ConfigClockSource+0x6c>
 800a2f4:	2b10      	cmp	r3, #16
 800a2f6:	d073      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x140>
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	d802      	bhi.n	800a302 <HAL_TIM_ConfigClockSource+0x62>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d06f      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a300:	e078      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a302:	2b20      	cmp	r3, #32
 800a304:	d06c      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x140>
 800a306:	2b30      	cmp	r3, #48	; 0x30
 800a308:	d06a      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a30a:	e073      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a30c:	2b70      	cmp	r3, #112	; 0x70
 800a30e:	d00d      	beq.n	800a32c <HAL_TIM_ConfigClockSource+0x8c>
 800a310:	2b70      	cmp	r3, #112	; 0x70
 800a312:	d804      	bhi.n	800a31e <HAL_TIM_ConfigClockSource+0x7e>
 800a314:	2b50      	cmp	r3, #80	; 0x50
 800a316:	d033      	beq.n	800a380 <HAL_TIM_ConfigClockSource+0xe0>
 800a318:	2b60      	cmp	r3, #96	; 0x60
 800a31a:	d041      	beq.n	800a3a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a31c:	e06a      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a322:	d066      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x152>
 800a324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a328:	d017      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a32a:	e063      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	6899      	ldr	r1, [r3, #8]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f000 fb5a 	bl	800a9f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a34e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	609a      	str	r2, [r3, #8]
      break;
 800a358:	e04c      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6899      	ldr	r1, [r3, #8]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f000 fb43 	bl	800a9f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a37c:	609a      	str	r2, [r3, #8]
      break;
 800a37e:	e039      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	6859      	ldr	r1, [r3, #4]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	461a      	mov	r2, r3
 800a38e:	f000 fab7 	bl	800a900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2150      	movs	r1, #80	; 0x50
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fb10 	bl	800a9be <TIM_ITRx_SetConfig>
      break;
 800a39e:	e029      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	6859      	ldr	r1, [r3, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f000 fad6 	bl	800a95e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2160      	movs	r1, #96	; 0x60
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 fb00 	bl	800a9be <TIM_ITRx_SetConfig>
      break;
 800a3be:	e019      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	6859      	ldr	r1, [r3, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	f000 fa97 	bl	800a900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2140      	movs	r1, #64	; 0x40
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 faf0 	bl	800a9be <TIM_ITRx_SetConfig>
      break;
 800a3de:	e009      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4610      	mov	r0, r2
 800a3ec:	f000 fae7 	bl	800a9be <TIM_ITRx_SetConfig>
      break;
 800a3f0:	e000      	b.n	800a3f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a3f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a42a:	bf00      	nop
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a43e:	bf00      	nop
 800a440:	370c      	adds	r7, #12
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b083      	sub	sp, #12
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a40      	ldr	r2, [pc, #256]	; (800a574 <TIM_Base_SetConfig+0x114>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d013      	beq.n	800a4a0 <TIM_Base_SetConfig+0x40>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a47e:	d00f      	beq.n	800a4a0 <TIM_Base_SetConfig+0x40>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a3d      	ldr	r2, [pc, #244]	; (800a578 <TIM_Base_SetConfig+0x118>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00b      	beq.n	800a4a0 <TIM_Base_SetConfig+0x40>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a3c      	ldr	r2, [pc, #240]	; (800a57c <TIM_Base_SetConfig+0x11c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d007      	beq.n	800a4a0 <TIM_Base_SetConfig+0x40>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a3b      	ldr	r2, [pc, #236]	; (800a580 <TIM_Base_SetConfig+0x120>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_Base_SetConfig+0x40>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a3a      	ldr	r2, [pc, #232]	; (800a584 <TIM_Base_SetConfig+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d108      	bne.n	800a4b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a2f      	ldr	r2, [pc, #188]	; (800a574 <TIM_Base_SetConfig+0x114>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d02b      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c0:	d027      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a2c      	ldr	r2, [pc, #176]	; (800a578 <TIM_Base_SetConfig+0x118>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d023      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <TIM_Base_SetConfig+0x11c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d01f      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a2a      	ldr	r2, [pc, #168]	; (800a580 <TIM_Base_SetConfig+0x120>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d01b      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a29      	ldr	r2, [pc, #164]	; (800a584 <TIM_Base_SetConfig+0x124>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d017      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a28      	ldr	r2, [pc, #160]	; (800a588 <TIM_Base_SetConfig+0x128>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d013      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a27      	ldr	r2, [pc, #156]	; (800a58c <TIM_Base_SetConfig+0x12c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00f      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a26      	ldr	r2, [pc, #152]	; (800a590 <TIM_Base_SetConfig+0x130>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00b      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a25      	ldr	r2, [pc, #148]	; (800a594 <TIM_Base_SetConfig+0x134>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d007      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a24      	ldr	r2, [pc, #144]	; (800a598 <TIM_Base_SetConfig+0x138>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d003      	beq.n	800a512 <TIM_Base_SetConfig+0xb2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a23      	ldr	r2, [pc, #140]	; (800a59c <TIM_Base_SetConfig+0x13c>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d108      	bne.n	800a524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	4313      	orrs	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a0a      	ldr	r2, [pc, #40]	; (800a574 <TIM_Base_SetConfig+0x114>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d003      	beq.n	800a558 <TIM_Base_SetConfig+0xf8>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a0c      	ldr	r2, [pc, #48]	; (800a584 <TIM_Base_SetConfig+0x124>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d103      	bne.n	800a560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	691a      	ldr	r2, [r3, #16]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	615a      	str	r2, [r3, #20]
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	40010000 	.word	0x40010000
 800a578:	40000400 	.word	0x40000400
 800a57c:	40000800 	.word	0x40000800
 800a580:	40000c00 	.word	0x40000c00
 800a584:	40010400 	.word	0x40010400
 800a588:	40014000 	.word	0x40014000
 800a58c:	40014400 	.word	0x40014400
 800a590:	40014800 	.word	0x40014800
 800a594:	40001800 	.word	0x40001800
 800a598:	40001c00 	.word	0x40001c00
 800a59c:	40002000 	.word	0x40002000

0800a5a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0303 	bic.w	r3, r3, #3
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f023 0302 	bic.w	r3, r3, #2
 800a5e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a20      	ldr	r2, [pc, #128]	; (800a678 <TIM_OC1_SetConfig+0xd8>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_OC1_SetConfig+0x64>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a1f      	ldr	r2, [pc, #124]	; (800a67c <TIM_OC1_SetConfig+0xdc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d10c      	bne.n	800a61e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f023 0308 	bic.w	r3, r3, #8
 800a60a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f023 0304 	bic.w	r3, r3, #4
 800a61c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a15      	ldr	r2, [pc, #84]	; (800a678 <TIM_OC1_SetConfig+0xd8>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d003      	beq.n	800a62e <TIM_OC1_SetConfig+0x8e>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a14      	ldr	r2, [pc, #80]	; (800a67c <TIM_OC1_SetConfig+0xdc>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d111      	bne.n	800a652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a63c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	4313      	orrs	r3, r2
 800a650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	621a      	str	r2, [r3, #32]
}
 800a66c:	bf00      	nop
 800a66e:	371c      	adds	r7, #28
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	40010000 	.word	0x40010000
 800a67c:	40010400 	.word	0x40010400

0800a680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f023 0210 	bic.w	r2, r3, #16
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	f023 0320 	bic.w	r3, r3, #32
 800a6ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a22      	ldr	r2, [pc, #136]	; (800a764 <TIM_OC2_SetConfig+0xe4>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d003      	beq.n	800a6e8 <TIM_OC2_SetConfig+0x68>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a21      	ldr	r2, [pc, #132]	; (800a768 <TIM_OC2_SetConfig+0xe8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d10d      	bne.n	800a704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a17      	ldr	r2, [pc, #92]	; (800a764 <TIM_OC2_SetConfig+0xe4>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d003      	beq.n	800a714 <TIM_OC2_SetConfig+0x94>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a16      	ldr	r2, [pc, #88]	; (800a768 <TIM_OC2_SetConfig+0xe8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d113      	bne.n	800a73c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a71a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	4313      	orrs	r3, r2
 800a73a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	621a      	str	r2, [r3, #32]
}
 800a756:	bf00      	nop
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40010000 	.word	0x40010000
 800a768:	40010400 	.word	0x40010400

0800a76c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	021b      	lsls	r3, r3, #8
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a21      	ldr	r2, [pc, #132]	; (800a84c <TIM_OC3_SetConfig+0xe0>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d003      	beq.n	800a7d2 <TIM_OC3_SetConfig+0x66>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a20      	ldr	r2, [pc, #128]	; (800a850 <TIM_OC3_SetConfig+0xe4>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d10d      	bne.n	800a7ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a16      	ldr	r2, [pc, #88]	; (800a84c <TIM_OC3_SetConfig+0xe0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d003      	beq.n	800a7fe <TIM_OC3_SetConfig+0x92>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a15      	ldr	r2, [pc, #84]	; (800a850 <TIM_OC3_SetConfig+0xe4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d113      	bne.n	800a826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a80c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	621a      	str	r2, [r3, #32]
}
 800a840:	bf00      	nop
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	40010000 	.word	0x40010000
 800a850:	40010400 	.word	0x40010400

0800a854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4313      	orrs	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a89e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	031b      	lsls	r3, r3, #12
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a12      	ldr	r2, [pc, #72]	; (800a8f8 <TIM_OC4_SetConfig+0xa4>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d003      	beq.n	800a8bc <TIM_OC4_SetConfig+0x68>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a11      	ldr	r2, [pc, #68]	; (800a8fc <TIM_OC4_SetConfig+0xa8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d109      	bne.n	800a8d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	019b      	lsls	r3, r3, #6
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	bf00      	nop
 800a8ec:	371c      	adds	r7, #28
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400

0800a900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0201 	bic.w	r2, r3, #1
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a92a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4313      	orrs	r3, r2
 800a934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f023 030a 	bic.w	r3, r3, #10
 800a93c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	621a      	str	r2, [r3, #32]
}
 800a952:	bf00      	nop
 800a954:	371c      	adds	r7, #28
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a95e:	b480      	push	{r7}
 800a960:	b087      	sub	sp, #28
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	f023 0210 	bic.w	r2, r3, #16
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	031b      	lsls	r3, r3, #12
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	4313      	orrs	r3, r2
 800a992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a99a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	f043 0307 	orr.w	r3, r3, #7
 800a9e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	609a      	str	r2, [r3, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	021a      	lsls	r2, r3, #8
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	431a      	orrs	r2, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	609a      	str	r2, [r3, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	371c      	adds	r7, #28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	f003 031f 	and.w	r3, r3, #31
 800aa46:	2201      	movs	r2, #1
 800aa48:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6a1a      	ldr	r2, [r3, #32]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	43db      	mvns	r3, r3
 800aa56:	401a      	ands	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1a      	ldr	r2, [r3, #32]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f003 031f 	and.w	r3, r3, #31
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	621a      	str	r2, [r3, #32]
}
 800aa72:	bf00      	nop
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e05a      	b.n	800ab4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a21      	ldr	r2, [pc, #132]	; (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d022      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae4:	d01d      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a1d      	ldr	r2, [pc, #116]	; (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d018      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a1b      	ldr	r2, [pc, #108]	; (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d013      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1a      	ldr	r2, [pc, #104]	; (800ab68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d00e      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a18      	ldr	r2, [pc, #96]	; (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d009      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d004      	beq.n	800ab22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a15      	ldr	r2, [pc, #84]	; (800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d10c      	bne.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	40010000 	.word	0x40010000
 800ab60:	40000400 	.word	0x40000400
 800ab64:	40000800 	.word	0x40000800
 800ab68:	40000c00 	.word	0x40000c00
 800ab6c:	40010400 	.word	0x40010400
 800ab70:	40014000 	.word	0x40014000
 800ab74:	40001800 	.word	0x40001800

0800ab78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e03f      	b.n	800ac32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fc ff2e 	bl	8007a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	; 0x24
 800abd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fcb3 	bl	800b550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	695a      	ldr	r2, [r3, #20]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68da      	ldr	r2, [r3, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2220      	movs	r2, #32
 800ac24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b088      	sub	sp, #32
 800ac3e:	af02      	add	r7, sp, #8
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	603b      	str	r3, [r7, #0]
 800ac46:	4613      	mov	r3, r2
 800ac48:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	f040 8083 	bne.w	800ad62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <HAL_UART_Transmit+0x2e>
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e07b      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <HAL_UART_Transmit+0x40>
 800ac76:	2302      	movs	r3, #2
 800ac78:	e074      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2221      	movs	r2, #33	; 0x21
 800ac8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ac90:	f7fd f846 	bl	8007d20 <HAL_GetTick>
 800ac94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	88fa      	ldrh	r2, [r7, #6]
 800ac9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	88fa      	ldrh	r2, [r7, #6]
 800aca0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800acaa:	e042      	b.n	800ad32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc2:	d122      	bne.n	800ad0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2200      	movs	r2, #0
 800accc:	2180      	movs	r1, #128	; 0x80
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f000 fabe 	bl	800b250 <UART_WaitOnFlagUntilTimeout>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e042      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acf0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d103      	bne.n	800ad02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3302      	adds	r3, #2
 800acfe:	60bb      	str	r3, [r7, #8]
 800ad00:	e017      	b.n	800ad32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60bb      	str	r3, [r7, #8]
 800ad08:	e013      	b.n	800ad32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2200      	movs	r2, #0
 800ad12:	2180      	movs	r1, #128	; 0x80
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 fa9b 	bl	800b250 <UART_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e01f      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	60ba      	str	r2, [r7, #8]
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1b7      	bne.n	800acac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2200      	movs	r2, #0
 800ad44:	2140      	movs	r1, #64	; 0x40
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 fa82 	bl	800b250 <UART_WaitOnFlagUntilTimeout>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e006      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e000      	b.n	800ad64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ad62:	2302      	movs	r3, #2
  }
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af02      	add	r7, sp, #8
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	603b      	str	r3, [r7, #0]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	f040 8090 	bne.w	800aeae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <HAL_UART_Receive+0x2e>
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e088      	b.n	800aeb0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d101      	bne.n	800adac <HAL_UART_Receive+0x40>
 800ada8:	2302      	movs	r3, #2
 800adaa:	e081      	b.n	800aeb0 <HAL_UART_Receive+0x144>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2222      	movs	r2, #34	; 0x22
 800adbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800adc2:	f7fc ffad 	bl	8007d20 <HAL_GetTick>
 800adc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	88fa      	ldrh	r2, [r7, #6]
 800adcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	88fa      	ldrh	r2, [r7, #6]
 800add2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800addc:	e05c      	b.n	800ae98 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf4:	d12b      	bne.n	800ae4e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2200      	movs	r2, #0
 800adfe:	2120      	movs	r1, #32
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fa25 	bl	800b250 <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e04f      	b.n	800aeb0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10c      	bne.n	800ae36 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3302      	adds	r3, #2
 800ae32:	60bb      	str	r3, [r7, #8]
 800ae34:	e030      	b.n	800ae98 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	60bb      	str	r3, [r7, #8]
 800ae4c:	e024      	b.n	800ae98 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2200      	movs	r2, #0
 800ae56:	2120      	movs	r1, #32
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 f9f9 	bl	800b250 <UART_WaitOnFlagUntilTimeout>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e023      	b.n	800aeb0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6859      	ldr	r1, [r3, #4]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	60ba      	str	r2, [r7, #8]
 800ae7c:	b2ca      	uxtb	r2, r1
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	e00a      	b.n	800ae98 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	1c59      	adds	r1, r3, #1
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ae94:	b2d2      	uxtb	r2, r2
 800ae96:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d19d      	bne.n	800adde <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e000      	b.n	800aeb0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800aeae:	2302      	movs	r3, #2
  }
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4613      	mov	r3, r2
 800aec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d140      	bne.n	800af54 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <HAL_UART_Receive_IT+0x26>
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e039      	b.n	800af56 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_UART_Receive_IT+0x38>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e032      	b.n	800af56 <HAL_UART_Receive_IT+0x9e>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	88fa      	ldrh	r2, [r7, #6]
 800af02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2222      	movs	r2, #34	; 0x22
 800af14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af2e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	695a      	ldr	r2, [r3, #20]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0201 	orr.w	r2, r2, #1
 800af3e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68da      	ldr	r2, [r3, #12]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0220 	orr.w	r2, r2, #32
 800af4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	e000      	b.n	800af56 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800af54:	2302      	movs	r3, #2
  }
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
	...

0800af64 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68da      	ldr	r2, [r3, #12]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695a      	ldr	r2, [r3, #20]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f022 0201 	bic.w	r2, r2, #1
 800af8a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af96:	2b40      	cmp	r3, #64	; 0x40
 800af98:	d12a      	bne.n	800aff0 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	695a      	ldr	r2, [r3, #20]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afa8:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d013      	beq.n	800afda <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb6:	4a16      	ldr	r2, [pc, #88]	; (800b010 <HAL_UART_AbortReceive_IT+0xac>)
 800afb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fc ffed 	bl	8007f9e <HAL_DMA_Abort_IT>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01c      	beq.n	800b004 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	e014      	b.n	800b004 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f927 	bl	800b23c <HAL_UART_AbortReceiveCpltCallback>
 800afee:	e009      	b.n	800b004 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2220      	movs	r2, #32
 800affa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f91c 	bl	800b23c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	0800b349 	.word	0x0800b349

0800b014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b034:	2300      	movs	r3, #0
 800b036:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b038:	2300      	movs	r3, #0
 800b03a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	f003 030f 	and.w	r3, r3, #15
 800b042:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10d      	bne.n	800b066 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	f003 0320 	and.w	r3, r3, #32
 800b050:	2b00      	cmp	r3, #0
 800b052:	d008      	beq.n	800b066 <HAL_UART_IRQHandler+0x52>
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 f9f5 	bl	800b44e <UART_Receive_IT>
      return;
 800b064:	e0d1      	b.n	800b20a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 80b0 	beq.w	800b1ce <HAL_UART_IRQHandler+0x1ba>
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <HAL_UART_IRQHandler+0x70>
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 80a5 	beq.w	800b1ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <HAL_UART_IRQHandler+0x90>
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09c:	f043 0201 	orr.w	r2, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00a      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xb0>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d005      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0bc:	f043 0202 	orr.w	r2, r3, #2
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	f003 0302 	and.w	r3, r3, #2
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <HAL_UART_IRQHandler+0xd0>
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0dc:	f043 0204 	orr.w	r2, r3, #4
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00f      	beq.n	800b10e <HAL_UART_IRQHandler+0xfa>
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	f003 0320 	and.w	r3, r3, #32
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d104      	bne.n	800b102 <HAL_UART_IRQHandler+0xee>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b106:	f043 0208 	orr.w	r2, r3, #8
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b112:	2b00      	cmp	r3, #0
 800b114:	d078      	beq.n	800b208 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	f003 0320 	and.w	r3, r3, #32
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d007      	beq.n	800b130 <HAL_UART_IRQHandler+0x11c>
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f98f 	bl	800b44e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13a:	2b40      	cmp	r3, #64	; 0x40
 800b13c:	bf0c      	ite	eq
 800b13e:	2301      	moveq	r3, #1
 800b140:	2300      	movne	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b14a:	f003 0308 	and.w	r3, r3, #8
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <HAL_UART_IRQHandler+0x144>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d031      	beq.n	800b1bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 f8c3 	bl	800b2e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b168:	2b40      	cmp	r3, #64	; 0x40
 800b16a:	d123      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	695a      	ldr	r2, [r3, #20]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b17a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b180:	2b00      	cmp	r3, #0
 800b182:	d013      	beq.n	800b1ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b188:	4a21      	ldr	r2, [pc, #132]	; (800b210 <HAL_UART_IRQHandler+0x1fc>)
 800b18a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b190:	4618      	mov	r0, r3
 800b192:	f7fc ff04 	bl	8007f9e <HAL_DMA_Abort_IT>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d016      	beq.n	800b1ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1aa:	e00e      	b.n	800b1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f83b 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b2:	e00a      	b.n	800b1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f837 	bl	800b228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ba:	e006      	b.n	800b1ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 f833 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b1c8:	e01e      	b.n	800b208 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ca:	bf00      	nop
    return;
 800b1cc:	e01c      	b.n	800b208 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <HAL_UART_IRQHandler+0x1d6>
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f8c5 	bl	800b372 <UART_Transmit_IT>
    return;
 800b1e8:	e00f      	b.n	800b20a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <HAL_UART_IRQHandler+0x1f6>
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d005      	beq.n	800b20a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f90d 	bl	800b41e <UART_EndTransmit_IT>
    return;
 800b204:	bf00      	nop
 800b206:	e000      	b.n	800b20a <HAL_UART_IRQHandler+0x1f6>
    return;
 800b208:	bf00      	nop
  }
}
 800b20a:	3720      	adds	r7, #32
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	0800b321 	.word	0x0800b321

0800b214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	4613      	mov	r3, r2
 800b25e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b260:	e02c      	b.n	800b2bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b268:	d028      	beq.n	800b2bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d007      	beq.n	800b280 <UART_WaitOnFlagUntilTimeout+0x30>
 800b270:	f7fc fd56 	bl	8007d20 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d21d      	bcs.n	800b2bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68da      	ldr	r2, [r3, #12]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b28e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0201 	bic.w	r2, r2, #1
 800b29e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e00f      	b.n	800b2dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	bf0c      	ite	eq
 800b2cc:	2301      	moveq	r3, #1
 800b2ce:	2300      	movne	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	79fb      	ldrb	r3, [r7, #7]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d0c3      	beq.n	800b262 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695a      	ldr	r2, [r3, #20]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f022 0201 	bic.w	r2, r2, #1
 800b30a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2220      	movs	r2, #32
 800b310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff ff74 	bl	800b228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b340:	bf00      	nop
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b354:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2220      	movs	r2, #32
 800b360:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff ff69 	bl	800b23c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b21      	cmp	r3, #33	; 0x21
 800b384:	d144      	bne.n	800b410 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d11a      	bne.n	800b3c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d105      	bne.n	800b3ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	1c9a      	adds	r2, r3, #2
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	621a      	str	r2, [r3, #32]
 800b3b8:	e00e      	b.n	800b3d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	621a      	str	r2, [r3, #32]
 800b3c4:	e008      	b.n	800b3d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	1c59      	adds	r1, r3, #1
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	6211      	str	r1, [r2, #32]
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10f      	bne.n	800b40c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68da      	ldr	r2, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b40a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e000      	b.n	800b412 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b410:	2302      	movs	r3, #2
  }
}
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b434:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2220      	movs	r2, #32
 800b43a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7ff fee8 	bl	800b214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b22      	cmp	r3, #34	; 0x22
 800b460:	d171      	bne.n	800b546 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46a:	d123      	bne.n	800b4b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10e      	bne.n	800b498 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	b29b      	uxth	r3, r3
 800b482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b486:	b29a      	uxth	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	1c9a      	adds	r2, r3, #2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	629a      	str	r2, [r3, #40]	; 0x28
 800b496:	e029      	b.n	800b4ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	629a      	str	r2, [r3, #40]	; 0x28
 800b4b2:	e01b      	b.n	800b4ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6858      	ldr	r0, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	1c59      	adds	r1, r3, #1
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6291      	str	r1, [r2, #40]	; 0x28
 800b4cc:	b2c2      	uxtb	r2, r0
 800b4ce:	701a      	strb	r2, [r3, #0]
 800b4d0:	e00c      	b.n	800b4ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4de:	1c58      	adds	r0, r3, #1
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	6288      	str	r0, [r1, #40]	; 0x28
 800b4e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d120      	bne.n	800b542 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 0220 	bic.w	r2, r2, #32
 800b50e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b51e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	695a      	ldr	r2, [r3, #20]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f022 0201 	bic.w	r2, r2, #1
 800b52e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2220      	movs	r2, #32
 800b534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7fc f94b 	bl	80077d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	e002      	b.n	800b548 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b542:	2300      	movs	r3, #0
 800b544:	e000      	b.n	800b548 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b546:	2302      	movs	r3, #2
  }
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	b085      	sub	sp, #20
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68da      	ldr	r2, [r3, #12]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	430a      	orrs	r2, r1
 800b56e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	4313      	orrs	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b592:	f023 030c 	bic.w	r3, r3, #12
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6812      	ldr	r2, [r2, #0]
 800b59a:	68f9      	ldr	r1, [r7, #12]
 800b59c:	430b      	orrs	r3, r1
 800b59e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5be:	f040 818b 	bne.w	800b8d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4ac1      	ldr	r2, [pc, #772]	; (800b8cc <UART_SetConfig+0x37c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d005      	beq.n	800b5d8 <UART_SetConfig+0x88>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4abf      	ldr	r2, [pc, #764]	; (800b8d0 <UART_SetConfig+0x380>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	f040 80bd 	bne.w	800b752 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b5d8:	f7fd fb50 	bl	8008c7c <HAL_RCC_GetPCLK2Freq>
 800b5dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	461d      	mov	r5, r3
 800b5e2:	f04f 0600 	mov.w	r6, #0
 800b5e6:	46a8      	mov	r8, r5
 800b5e8:	46b1      	mov	r9, r6
 800b5ea:	eb18 0308 	adds.w	r3, r8, r8
 800b5ee:	eb49 0409 	adc.w	r4, r9, r9
 800b5f2:	4698      	mov	r8, r3
 800b5f4:	46a1      	mov	r9, r4
 800b5f6:	eb18 0805 	adds.w	r8, r8, r5
 800b5fa:	eb49 0906 	adc.w	r9, r9, r6
 800b5fe:	f04f 0100 	mov.w	r1, #0
 800b602:	f04f 0200 	mov.w	r2, #0
 800b606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b60a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b60e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b612:	4688      	mov	r8, r1
 800b614:	4691      	mov	r9, r2
 800b616:	eb18 0005 	adds.w	r0, r8, r5
 800b61a:	eb49 0106 	adc.w	r1, r9, r6
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	461d      	mov	r5, r3
 800b624:	f04f 0600 	mov.w	r6, #0
 800b628:	196b      	adds	r3, r5, r5
 800b62a:	eb46 0406 	adc.w	r4, r6, r6
 800b62e:	461a      	mov	r2, r3
 800b630:	4623      	mov	r3, r4
 800b632:	f7f5 fac9 	bl	8000bc8 <__aeabi_uldivmod>
 800b636:	4603      	mov	r3, r0
 800b638:	460c      	mov	r4, r1
 800b63a:	461a      	mov	r2, r3
 800b63c:	4ba5      	ldr	r3, [pc, #660]	; (800b8d4 <UART_SetConfig+0x384>)
 800b63e:	fba3 2302 	umull	r2, r3, r3, r2
 800b642:	095b      	lsrs	r3, r3, #5
 800b644:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	461d      	mov	r5, r3
 800b64c:	f04f 0600 	mov.w	r6, #0
 800b650:	46a9      	mov	r9, r5
 800b652:	46b2      	mov	sl, r6
 800b654:	eb19 0309 	adds.w	r3, r9, r9
 800b658:	eb4a 040a 	adc.w	r4, sl, sl
 800b65c:	4699      	mov	r9, r3
 800b65e:	46a2      	mov	sl, r4
 800b660:	eb19 0905 	adds.w	r9, r9, r5
 800b664:	eb4a 0a06 	adc.w	sl, sl, r6
 800b668:	f04f 0100 	mov.w	r1, #0
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b67c:	4689      	mov	r9, r1
 800b67e:	4692      	mov	sl, r2
 800b680:	eb19 0005 	adds.w	r0, r9, r5
 800b684:	eb4a 0106 	adc.w	r1, sl, r6
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	461d      	mov	r5, r3
 800b68e:	f04f 0600 	mov.w	r6, #0
 800b692:	196b      	adds	r3, r5, r5
 800b694:	eb46 0406 	adc.w	r4, r6, r6
 800b698:	461a      	mov	r2, r3
 800b69a:	4623      	mov	r3, r4
 800b69c:	f7f5 fa94 	bl	8000bc8 <__aeabi_uldivmod>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	4b8b      	ldr	r3, [pc, #556]	; (800b8d4 <UART_SetConfig+0x384>)
 800b6a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ac:	095b      	lsrs	r3, r3, #5
 800b6ae:	2164      	movs	r1, #100	; 0x64
 800b6b0:	fb01 f303 	mul.w	r3, r1, r3
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	3332      	adds	r3, #50	; 0x32
 800b6ba:	4a86      	ldr	r2, [pc, #536]	; (800b8d4 <UART_SetConfig+0x384>)
 800b6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c0:	095b      	lsrs	r3, r3, #5
 800b6c2:	005b      	lsls	r3, r3, #1
 800b6c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6c8:	4498      	add	r8, r3
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	461d      	mov	r5, r3
 800b6ce:	f04f 0600 	mov.w	r6, #0
 800b6d2:	46a9      	mov	r9, r5
 800b6d4:	46b2      	mov	sl, r6
 800b6d6:	eb19 0309 	adds.w	r3, r9, r9
 800b6da:	eb4a 040a 	adc.w	r4, sl, sl
 800b6de:	4699      	mov	r9, r3
 800b6e0:	46a2      	mov	sl, r4
 800b6e2:	eb19 0905 	adds.w	r9, r9, r5
 800b6e6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b6ea:	f04f 0100 	mov.w	r1, #0
 800b6ee:	f04f 0200 	mov.w	r2, #0
 800b6f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b6f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b6fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b6fe:	4689      	mov	r9, r1
 800b700:	4692      	mov	sl, r2
 800b702:	eb19 0005 	adds.w	r0, r9, r5
 800b706:	eb4a 0106 	adc.w	r1, sl, r6
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	461d      	mov	r5, r3
 800b710:	f04f 0600 	mov.w	r6, #0
 800b714:	196b      	adds	r3, r5, r5
 800b716:	eb46 0406 	adc.w	r4, r6, r6
 800b71a:	461a      	mov	r2, r3
 800b71c:	4623      	mov	r3, r4
 800b71e:	f7f5 fa53 	bl	8000bc8 <__aeabi_uldivmod>
 800b722:	4603      	mov	r3, r0
 800b724:	460c      	mov	r4, r1
 800b726:	461a      	mov	r2, r3
 800b728:	4b6a      	ldr	r3, [pc, #424]	; (800b8d4 <UART_SetConfig+0x384>)
 800b72a:	fba3 1302 	umull	r1, r3, r3, r2
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	2164      	movs	r1, #100	; 0x64
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	3332      	adds	r3, #50	; 0x32
 800b73c:	4a65      	ldr	r2, [pc, #404]	; (800b8d4 <UART_SetConfig+0x384>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	095b      	lsrs	r3, r3, #5
 800b744:	f003 0207 	and.w	r2, r3, #7
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4442      	add	r2, r8
 800b74e:	609a      	str	r2, [r3, #8]
 800b750:	e26f      	b.n	800bc32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b752:	f7fd fa7f 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800b756:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	461d      	mov	r5, r3
 800b75c:	f04f 0600 	mov.w	r6, #0
 800b760:	46a8      	mov	r8, r5
 800b762:	46b1      	mov	r9, r6
 800b764:	eb18 0308 	adds.w	r3, r8, r8
 800b768:	eb49 0409 	adc.w	r4, r9, r9
 800b76c:	4698      	mov	r8, r3
 800b76e:	46a1      	mov	r9, r4
 800b770:	eb18 0805 	adds.w	r8, r8, r5
 800b774:	eb49 0906 	adc.w	r9, r9, r6
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b78c:	4688      	mov	r8, r1
 800b78e:	4691      	mov	r9, r2
 800b790:	eb18 0005 	adds.w	r0, r8, r5
 800b794:	eb49 0106 	adc.w	r1, r9, r6
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	461d      	mov	r5, r3
 800b79e:	f04f 0600 	mov.w	r6, #0
 800b7a2:	196b      	adds	r3, r5, r5
 800b7a4:	eb46 0406 	adc.w	r4, r6, r6
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	f7f5 fa0c 	bl	8000bc8 <__aeabi_uldivmod>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4b47      	ldr	r3, [pc, #284]	; (800b8d4 <UART_SetConfig+0x384>)
 800b7b8:	fba3 2302 	umull	r2, r3, r3, r2
 800b7bc:	095b      	lsrs	r3, r3, #5
 800b7be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	461d      	mov	r5, r3
 800b7c6:	f04f 0600 	mov.w	r6, #0
 800b7ca:	46a9      	mov	r9, r5
 800b7cc:	46b2      	mov	sl, r6
 800b7ce:	eb19 0309 	adds.w	r3, r9, r9
 800b7d2:	eb4a 040a 	adc.w	r4, sl, sl
 800b7d6:	4699      	mov	r9, r3
 800b7d8:	46a2      	mov	sl, r4
 800b7da:	eb19 0905 	adds.w	r9, r9, r5
 800b7de:	eb4a 0a06 	adc.w	sl, sl, r6
 800b7e2:	f04f 0100 	mov.w	r1, #0
 800b7e6:	f04f 0200 	mov.w	r2, #0
 800b7ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	4692      	mov	sl, r2
 800b7fa:	eb19 0005 	adds.w	r0, r9, r5
 800b7fe:	eb4a 0106 	adc.w	r1, sl, r6
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	461d      	mov	r5, r3
 800b808:	f04f 0600 	mov.w	r6, #0
 800b80c:	196b      	adds	r3, r5, r5
 800b80e:	eb46 0406 	adc.w	r4, r6, r6
 800b812:	461a      	mov	r2, r3
 800b814:	4623      	mov	r3, r4
 800b816:	f7f5 f9d7 	bl	8000bc8 <__aeabi_uldivmod>
 800b81a:	4603      	mov	r3, r0
 800b81c:	460c      	mov	r4, r1
 800b81e:	461a      	mov	r2, r3
 800b820:	4b2c      	ldr	r3, [pc, #176]	; (800b8d4 <UART_SetConfig+0x384>)
 800b822:	fba3 1302 	umull	r1, r3, r3, r2
 800b826:	095b      	lsrs	r3, r3, #5
 800b828:	2164      	movs	r1, #100	; 0x64
 800b82a:	fb01 f303 	mul.w	r3, r1, r3
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	00db      	lsls	r3, r3, #3
 800b832:	3332      	adds	r3, #50	; 0x32
 800b834:	4a27      	ldr	r2, [pc, #156]	; (800b8d4 <UART_SetConfig+0x384>)
 800b836:	fba2 2303 	umull	r2, r3, r2, r3
 800b83a:	095b      	lsrs	r3, r3, #5
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b842:	4498      	add	r8, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	461d      	mov	r5, r3
 800b848:	f04f 0600 	mov.w	r6, #0
 800b84c:	46a9      	mov	r9, r5
 800b84e:	46b2      	mov	sl, r6
 800b850:	eb19 0309 	adds.w	r3, r9, r9
 800b854:	eb4a 040a 	adc.w	r4, sl, sl
 800b858:	4699      	mov	r9, r3
 800b85a:	46a2      	mov	sl, r4
 800b85c:	eb19 0905 	adds.w	r9, r9, r5
 800b860:	eb4a 0a06 	adc.w	sl, sl, r6
 800b864:	f04f 0100 	mov.w	r1, #0
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b878:	4689      	mov	r9, r1
 800b87a:	4692      	mov	sl, r2
 800b87c:	eb19 0005 	adds.w	r0, r9, r5
 800b880:	eb4a 0106 	adc.w	r1, sl, r6
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	461d      	mov	r5, r3
 800b88a:	f04f 0600 	mov.w	r6, #0
 800b88e:	196b      	adds	r3, r5, r5
 800b890:	eb46 0406 	adc.w	r4, r6, r6
 800b894:	461a      	mov	r2, r3
 800b896:	4623      	mov	r3, r4
 800b898:	f7f5 f996 	bl	8000bc8 <__aeabi_uldivmod>
 800b89c:	4603      	mov	r3, r0
 800b89e:	460c      	mov	r4, r1
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4b0c      	ldr	r3, [pc, #48]	; (800b8d4 <UART_SetConfig+0x384>)
 800b8a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	2164      	movs	r1, #100	; 0x64
 800b8ac:	fb01 f303 	mul.w	r3, r1, r3
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	00db      	lsls	r3, r3, #3
 800b8b4:	3332      	adds	r3, #50	; 0x32
 800b8b6:	4a07      	ldr	r2, [pc, #28]	; (800b8d4 <UART_SetConfig+0x384>)
 800b8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8bc:	095b      	lsrs	r3, r3, #5
 800b8be:	f003 0207 	and.w	r2, r3, #7
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4442      	add	r2, r8
 800b8c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b8ca:	e1b2      	b.n	800bc32 <UART_SetConfig+0x6e2>
 800b8cc:	40011000 	.word	0x40011000
 800b8d0:	40011400 	.word	0x40011400
 800b8d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4ad7      	ldr	r2, [pc, #860]	; (800bc3c <UART_SetConfig+0x6ec>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d005      	beq.n	800b8ee <UART_SetConfig+0x39e>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4ad6      	ldr	r2, [pc, #856]	; (800bc40 <UART_SetConfig+0x6f0>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	f040 80d1 	bne.w	800ba90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8ee:	f7fd f9c5 	bl	8008c7c <HAL_RCC_GetPCLK2Freq>
 800b8f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	469a      	mov	sl, r3
 800b8f8:	f04f 0b00 	mov.w	fp, #0
 800b8fc:	46d0      	mov	r8, sl
 800b8fe:	46d9      	mov	r9, fp
 800b900:	eb18 0308 	adds.w	r3, r8, r8
 800b904:	eb49 0409 	adc.w	r4, r9, r9
 800b908:	4698      	mov	r8, r3
 800b90a:	46a1      	mov	r9, r4
 800b90c:	eb18 080a 	adds.w	r8, r8, sl
 800b910:	eb49 090b 	adc.w	r9, r9, fp
 800b914:	f04f 0100 	mov.w	r1, #0
 800b918:	f04f 0200 	mov.w	r2, #0
 800b91c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b920:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b924:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b928:	4688      	mov	r8, r1
 800b92a:	4691      	mov	r9, r2
 800b92c:	eb1a 0508 	adds.w	r5, sl, r8
 800b930:	eb4b 0609 	adc.w	r6, fp, r9
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4619      	mov	r1, r3
 800b93a:	f04f 0200 	mov.w	r2, #0
 800b93e:	f04f 0300 	mov.w	r3, #0
 800b942:	f04f 0400 	mov.w	r4, #0
 800b946:	0094      	lsls	r4, r2, #2
 800b948:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b94c:	008b      	lsls	r3, r1, #2
 800b94e:	461a      	mov	r2, r3
 800b950:	4623      	mov	r3, r4
 800b952:	4628      	mov	r0, r5
 800b954:	4631      	mov	r1, r6
 800b956:	f7f5 f937 	bl	8000bc8 <__aeabi_uldivmod>
 800b95a:	4603      	mov	r3, r0
 800b95c:	460c      	mov	r4, r1
 800b95e:	461a      	mov	r2, r3
 800b960:	4bb8      	ldr	r3, [pc, #736]	; (800bc44 <UART_SetConfig+0x6f4>)
 800b962:	fba3 2302 	umull	r2, r3, r3, r2
 800b966:	095b      	lsrs	r3, r3, #5
 800b968:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	469b      	mov	fp, r3
 800b970:	f04f 0c00 	mov.w	ip, #0
 800b974:	46d9      	mov	r9, fp
 800b976:	46e2      	mov	sl, ip
 800b978:	eb19 0309 	adds.w	r3, r9, r9
 800b97c:	eb4a 040a 	adc.w	r4, sl, sl
 800b980:	4699      	mov	r9, r3
 800b982:	46a2      	mov	sl, r4
 800b984:	eb19 090b 	adds.w	r9, r9, fp
 800b988:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b98c:	f04f 0100 	mov.w	r1, #0
 800b990:	f04f 0200 	mov.w	r2, #0
 800b994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b99c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9a0:	4689      	mov	r9, r1
 800b9a2:	4692      	mov	sl, r2
 800b9a4:	eb1b 0509 	adds.w	r5, fp, r9
 800b9a8:	eb4c 060a 	adc.w	r6, ip, sl
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f04f 0200 	mov.w	r2, #0
 800b9b6:	f04f 0300 	mov.w	r3, #0
 800b9ba:	f04f 0400 	mov.w	r4, #0
 800b9be:	0094      	lsls	r4, r2, #2
 800b9c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b9c4:	008b      	lsls	r3, r1, #2
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	f7f5 f8fb 	bl	8000bc8 <__aeabi_uldivmod>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	4b9a      	ldr	r3, [pc, #616]	; (800bc44 <UART_SetConfig+0x6f4>)
 800b9da:	fba3 1302 	umull	r1, r3, r3, r2
 800b9de:	095b      	lsrs	r3, r3, #5
 800b9e0:	2164      	movs	r1, #100	; 0x64
 800b9e2:	fb01 f303 	mul.w	r3, r1, r3
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	011b      	lsls	r3, r3, #4
 800b9ea:	3332      	adds	r3, #50	; 0x32
 800b9ec:	4a95      	ldr	r2, [pc, #596]	; (800bc44 <UART_SetConfig+0x6f4>)
 800b9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f2:	095b      	lsrs	r3, r3, #5
 800b9f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9f8:	4498      	add	r8, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	469b      	mov	fp, r3
 800b9fe:	f04f 0c00 	mov.w	ip, #0
 800ba02:	46d9      	mov	r9, fp
 800ba04:	46e2      	mov	sl, ip
 800ba06:	eb19 0309 	adds.w	r3, r9, r9
 800ba0a:	eb4a 040a 	adc.w	r4, sl, sl
 800ba0e:	4699      	mov	r9, r3
 800ba10:	46a2      	mov	sl, r4
 800ba12:	eb19 090b 	adds.w	r9, r9, fp
 800ba16:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ba1a:	f04f 0100 	mov.w	r1, #0
 800ba1e:	f04f 0200 	mov.w	r2, #0
 800ba22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba2e:	4689      	mov	r9, r1
 800ba30:	4692      	mov	sl, r2
 800ba32:	eb1b 0509 	adds.w	r5, fp, r9
 800ba36:	eb4c 060a 	adc.w	r6, ip, sl
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	f04f 0200 	mov.w	r2, #0
 800ba44:	f04f 0300 	mov.w	r3, #0
 800ba48:	f04f 0400 	mov.w	r4, #0
 800ba4c:	0094      	lsls	r4, r2, #2
 800ba4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ba52:	008b      	lsls	r3, r1, #2
 800ba54:	461a      	mov	r2, r3
 800ba56:	4623      	mov	r3, r4
 800ba58:	4628      	mov	r0, r5
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	f7f5 f8b4 	bl	8000bc8 <__aeabi_uldivmod>
 800ba60:	4603      	mov	r3, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	461a      	mov	r2, r3
 800ba66:	4b77      	ldr	r3, [pc, #476]	; (800bc44 <UART_SetConfig+0x6f4>)
 800ba68:	fba3 1302 	umull	r1, r3, r3, r2
 800ba6c:	095b      	lsrs	r3, r3, #5
 800ba6e:	2164      	movs	r1, #100	; 0x64
 800ba70:	fb01 f303 	mul.w	r3, r1, r3
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	011b      	lsls	r3, r3, #4
 800ba78:	3332      	adds	r3, #50	; 0x32
 800ba7a:	4a72      	ldr	r2, [pc, #456]	; (800bc44 <UART_SetConfig+0x6f4>)
 800ba7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba80:	095b      	lsrs	r3, r3, #5
 800ba82:	f003 020f 	and.w	r2, r3, #15
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4442      	add	r2, r8
 800ba8c:	609a      	str	r2, [r3, #8]
 800ba8e:	e0d0      	b.n	800bc32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba90:	f7fd f8e0 	bl	8008c54 <HAL_RCC_GetPCLK1Freq>
 800ba94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	469a      	mov	sl, r3
 800ba9a:	f04f 0b00 	mov.w	fp, #0
 800ba9e:	46d0      	mov	r8, sl
 800baa0:	46d9      	mov	r9, fp
 800baa2:	eb18 0308 	adds.w	r3, r8, r8
 800baa6:	eb49 0409 	adc.w	r4, r9, r9
 800baaa:	4698      	mov	r8, r3
 800baac:	46a1      	mov	r9, r4
 800baae:	eb18 080a 	adds.w	r8, r8, sl
 800bab2:	eb49 090b 	adc.w	r9, r9, fp
 800bab6:	f04f 0100 	mov.w	r1, #0
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bac2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bac6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800baca:	4688      	mov	r8, r1
 800bacc:	4691      	mov	r9, r2
 800bace:	eb1a 0508 	adds.w	r5, sl, r8
 800bad2:	eb4b 0609 	adc.w	r6, fp, r9
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	4619      	mov	r1, r3
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	f04f 0300 	mov.w	r3, #0
 800bae4:	f04f 0400 	mov.w	r4, #0
 800bae8:	0094      	lsls	r4, r2, #2
 800baea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800baee:	008b      	lsls	r3, r1, #2
 800baf0:	461a      	mov	r2, r3
 800baf2:	4623      	mov	r3, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	4631      	mov	r1, r6
 800baf8:	f7f5 f866 	bl	8000bc8 <__aeabi_uldivmod>
 800bafc:	4603      	mov	r3, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	461a      	mov	r2, r3
 800bb02:	4b50      	ldr	r3, [pc, #320]	; (800bc44 <UART_SetConfig+0x6f4>)
 800bb04:	fba3 2302 	umull	r2, r3, r3, r2
 800bb08:	095b      	lsrs	r3, r3, #5
 800bb0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	469b      	mov	fp, r3
 800bb12:	f04f 0c00 	mov.w	ip, #0
 800bb16:	46d9      	mov	r9, fp
 800bb18:	46e2      	mov	sl, ip
 800bb1a:	eb19 0309 	adds.w	r3, r9, r9
 800bb1e:	eb4a 040a 	adc.w	r4, sl, sl
 800bb22:	4699      	mov	r9, r3
 800bb24:	46a2      	mov	sl, r4
 800bb26:	eb19 090b 	adds.w	r9, r9, fp
 800bb2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bb2e:	f04f 0100 	mov.w	r1, #0
 800bb32:	f04f 0200 	mov.w	r2, #0
 800bb36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb42:	4689      	mov	r9, r1
 800bb44:	4692      	mov	sl, r2
 800bb46:	eb1b 0509 	adds.w	r5, fp, r9
 800bb4a:	eb4c 060a 	adc.w	r6, ip, sl
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4619      	mov	r1, r3
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	f04f 0300 	mov.w	r3, #0
 800bb5c:	f04f 0400 	mov.w	r4, #0
 800bb60:	0094      	lsls	r4, r2, #2
 800bb62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bb66:	008b      	lsls	r3, r1, #2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	4631      	mov	r1, r6
 800bb70:	f7f5 f82a 	bl	8000bc8 <__aeabi_uldivmod>
 800bb74:	4603      	mov	r3, r0
 800bb76:	460c      	mov	r4, r1
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4b32      	ldr	r3, [pc, #200]	; (800bc44 <UART_SetConfig+0x6f4>)
 800bb7c:	fba3 1302 	umull	r1, r3, r3, r2
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	2164      	movs	r1, #100	; 0x64
 800bb84:	fb01 f303 	mul.w	r3, r1, r3
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	3332      	adds	r3, #50	; 0x32
 800bb8e:	4a2d      	ldr	r2, [pc, #180]	; (800bc44 <UART_SetConfig+0x6f4>)
 800bb90:	fba2 2303 	umull	r2, r3, r2, r3
 800bb94:	095b      	lsrs	r3, r3, #5
 800bb96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb9a:	4498      	add	r8, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	469b      	mov	fp, r3
 800bba0:	f04f 0c00 	mov.w	ip, #0
 800bba4:	46d9      	mov	r9, fp
 800bba6:	46e2      	mov	sl, ip
 800bba8:	eb19 0309 	adds.w	r3, r9, r9
 800bbac:	eb4a 040a 	adc.w	r4, sl, sl
 800bbb0:	4699      	mov	r9, r3
 800bbb2:	46a2      	mov	sl, r4
 800bbb4:	eb19 090b 	adds.w	r9, r9, fp
 800bbb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bbbc:	f04f 0100 	mov.w	r1, #0
 800bbc0:	f04f 0200 	mov.w	r2, #0
 800bbc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbd0:	4689      	mov	r9, r1
 800bbd2:	4692      	mov	sl, r2
 800bbd4:	eb1b 0509 	adds.w	r5, fp, r9
 800bbd8:	eb4c 060a 	adc.w	r6, ip, sl
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	f04f 0300 	mov.w	r3, #0
 800bbea:	f04f 0400 	mov.w	r4, #0
 800bbee:	0094      	lsls	r4, r2, #2
 800bbf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bbf4:	008b      	lsls	r3, r1, #2
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	f7f4 ffe3 	bl	8000bc8 <__aeabi_uldivmod>
 800bc02:	4603      	mov	r3, r0
 800bc04:	460c      	mov	r4, r1
 800bc06:	461a      	mov	r2, r3
 800bc08:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <UART_SetConfig+0x6f4>)
 800bc0a:	fba3 1302 	umull	r1, r3, r3, r2
 800bc0e:	095b      	lsrs	r3, r3, #5
 800bc10:	2164      	movs	r1, #100	; 0x64
 800bc12:	fb01 f303 	mul.w	r3, r1, r3
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	3332      	adds	r3, #50	; 0x32
 800bc1c:	4a09      	ldr	r2, [pc, #36]	; (800bc44 <UART_SetConfig+0x6f4>)
 800bc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc22:	095b      	lsrs	r3, r3, #5
 800bc24:	f003 020f 	and.w	r2, r3, #15
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4442      	add	r2, r8
 800bc2e:	609a      	str	r2, [r3, #8]
}
 800bc30:	e7ff      	b.n	800bc32 <UART_SetConfig+0x6e2>
 800bc32:	bf00      	nop
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	40011000 	.word	0x40011000
 800bc40:	40011400 	.word	0x40011400
 800bc44:	51eb851f 	.word	0x51eb851f

0800bc48 <__errno>:
 800bc48:	4b01      	ldr	r3, [pc, #4]	; (800bc50 <__errno+0x8>)
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	20000068 	.word	0x20000068

0800bc54 <__libc_init_array>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	4e0d      	ldr	r6, [pc, #52]	; (800bc8c <__libc_init_array+0x38>)
 800bc58:	4c0d      	ldr	r4, [pc, #52]	; (800bc90 <__libc_init_array+0x3c>)
 800bc5a:	1ba4      	subs	r4, r4, r6
 800bc5c:	10a4      	asrs	r4, r4, #2
 800bc5e:	2500      	movs	r5, #0
 800bc60:	42a5      	cmp	r5, r4
 800bc62:	d109      	bne.n	800bc78 <__libc_init_array+0x24>
 800bc64:	4e0b      	ldr	r6, [pc, #44]	; (800bc94 <__libc_init_array+0x40>)
 800bc66:	4c0c      	ldr	r4, [pc, #48]	; (800bc98 <__libc_init_array+0x44>)
 800bc68:	f002 f876 	bl	800dd58 <_init>
 800bc6c:	1ba4      	subs	r4, r4, r6
 800bc6e:	10a4      	asrs	r4, r4, #2
 800bc70:	2500      	movs	r5, #0
 800bc72:	42a5      	cmp	r5, r4
 800bc74:	d105      	bne.n	800bc82 <__libc_init_array+0x2e>
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc7c:	4798      	blx	r3
 800bc7e:	3501      	adds	r5, #1
 800bc80:	e7ee      	b.n	800bc60 <__libc_init_array+0xc>
 800bc82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc86:	4798      	blx	r3
 800bc88:	3501      	adds	r5, #1
 800bc8a:	e7f2      	b.n	800bc72 <__libc_init_array+0x1e>
 800bc8c:	0800e448 	.word	0x0800e448
 800bc90:	0800e448 	.word	0x0800e448
 800bc94:	0800e448 	.word	0x0800e448
 800bc98:	0800e44c 	.word	0x0800e44c

0800bc9c <memset>:
 800bc9c:	4402      	add	r2, r0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d100      	bne.n	800bca6 <memset+0xa>
 800bca4:	4770      	bx	lr
 800bca6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcaa:	e7f9      	b.n	800bca0 <memset+0x4>

0800bcac <__cvt>:
 800bcac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb0:	ec55 4b10 	vmov	r4, r5, d0
 800bcb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bcb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	460e      	mov	r6, r1
 800bcbe:	4691      	mov	r9, r2
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	bfb8      	it	lt
 800bcc4:	4622      	movlt	r2, r4
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	f027 0720 	bic.w	r7, r7, #32
 800bccc:	bfbb      	ittet	lt
 800bcce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcd2:	461d      	movlt	r5, r3
 800bcd4:	2300      	movge	r3, #0
 800bcd6:	232d      	movlt	r3, #45	; 0x2d
 800bcd8:	bfb8      	it	lt
 800bcda:	4614      	movlt	r4, r2
 800bcdc:	2f46      	cmp	r7, #70	; 0x46
 800bcde:	700b      	strb	r3, [r1, #0]
 800bce0:	d004      	beq.n	800bcec <__cvt+0x40>
 800bce2:	2f45      	cmp	r7, #69	; 0x45
 800bce4:	d100      	bne.n	800bce8 <__cvt+0x3c>
 800bce6:	3601      	adds	r6, #1
 800bce8:	2102      	movs	r1, #2
 800bcea:	e000      	b.n	800bcee <__cvt+0x42>
 800bcec:	2103      	movs	r1, #3
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	ab02      	add	r3, sp, #8
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	4632      	mov	r2, r6
 800bcf8:	4653      	mov	r3, sl
 800bcfa:	ec45 4b10 	vmov	d0, r4, r5
 800bcfe:	f000 fcf7 	bl	800c6f0 <_dtoa_r>
 800bd02:	2f47      	cmp	r7, #71	; 0x47
 800bd04:	4680      	mov	r8, r0
 800bd06:	d102      	bne.n	800bd0e <__cvt+0x62>
 800bd08:	f019 0f01 	tst.w	r9, #1
 800bd0c:	d026      	beq.n	800bd5c <__cvt+0xb0>
 800bd0e:	2f46      	cmp	r7, #70	; 0x46
 800bd10:	eb08 0906 	add.w	r9, r8, r6
 800bd14:	d111      	bne.n	800bd3a <__cvt+0x8e>
 800bd16:	f898 3000 	ldrb.w	r3, [r8]
 800bd1a:	2b30      	cmp	r3, #48	; 0x30
 800bd1c:	d10a      	bne.n	800bd34 <__cvt+0x88>
 800bd1e:	2200      	movs	r2, #0
 800bd20:	2300      	movs	r3, #0
 800bd22:	4620      	mov	r0, r4
 800bd24:	4629      	mov	r1, r5
 800bd26:	f7f4 fedf 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd2a:	b918      	cbnz	r0, 800bd34 <__cvt+0x88>
 800bd2c:	f1c6 0601 	rsb	r6, r6, #1
 800bd30:	f8ca 6000 	str.w	r6, [sl]
 800bd34:	f8da 3000 	ldr.w	r3, [sl]
 800bd38:	4499      	add	r9, r3
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 fed1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd46:	b938      	cbnz	r0, 800bd58 <__cvt+0xac>
 800bd48:	2230      	movs	r2, #48	; 0x30
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	454b      	cmp	r3, r9
 800bd4e:	d205      	bcs.n	800bd5c <__cvt+0xb0>
 800bd50:	1c59      	adds	r1, r3, #1
 800bd52:	9103      	str	r1, [sp, #12]
 800bd54:	701a      	strb	r2, [r3, #0]
 800bd56:	e7f8      	b.n	800bd4a <__cvt+0x9e>
 800bd58:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd60:	eba3 0308 	sub.w	r3, r3, r8
 800bd64:	4640      	mov	r0, r8
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	b004      	add	sp, #16
 800bd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bd6e <__exponent>:
 800bd6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd70:	2900      	cmp	r1, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	bfba      	itte	lt
 800bd76:	4249      	neglt	r1, r1
 800bd78:	232d      	movlt	r3, #45	; 0x2d
 800bd7a:	232b      	movge	r3, #43	; 0x2b
 800bd7c:	2909      	cmp	r1, #9
 800bd7e:	f804 2b02 	strb.w	r2, [r4], #2
 800bd82:	7043      	strb	r3, [r0, #1]
 800bd84:	dd20      	ble.n	800bdc8 <__exponent+0x5a>
 800bd86:	f10d 0307 	add.w	r3, sp, #7
 800bd8a:	461f      	mov	r7, r3
 800bd8c:	260a      	movs	r6, #10
 800bd8e:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd92:	fb06 1115 	mls	r1, r6, r5, r1
 800bd96:	3130      	adds	r1, #48	; 0x30
 800bd98:	2d09      	cmp	r5, #9
 800bd9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd9e:	f103 32ff 	add.w	r2, r3, #4294967295
 800bda2:	4629      	mov	r1, r5
 800bda4:	dc09      	bgt.n	800bdba <__exponent+0x4c>
 800bda6:	3130      	adds	r1, #48	; 0x30
 800bda8:	3b02      	subs	r3, #2
 800bdaa:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bdae:	42bb      	cmp	r3, r7
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	d304      	bcc.n	800bdbe <__exponent+0x50>
 800bdb4:	1a10      	subs	r0, r2, r0
 800bdb6:	b003      	add	sp, #12
 800bdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdba:	4613      	mov	r3, r2
 800bdbc:	e7e7      	b.n	800bd8e <__exponent+0x20>
 800bdbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc2:	f804 2b01 	strb.w	r2, [r4], #1
 800bdc6:	e7f2      	b.n	800bdae <__exponent+0x40>
 800bdc8:	2330      	movs	r3, #48	; 0x30
 800bdca:	4419      	add	r1, r3
 800bdcc:	7083      	strb	r3, [r0, #2]
 800bdce:	1d02      	adds	r2, r0, #4
 800bdd0:	70c1      	strb	r1, [r0, #3]
 800bdd2:	e7ef      	b.n	800bdb4 <__exponent+0x46>

0800bdd4 <_printf_float>:
 800bdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd8:	b08d      	sub	sp, #52	; 0x34
 800bdda:	460c      	mov	r4, r1
 800bddc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bde0:	4616      	mov	r6, r2
 800bde2:	461f      	mov	r7, r3
 800bde4:	4605      	mov	r5, r0
 800bde6:	f001 fa3b 	bl	800d260 <_localeconv_r>
 800bdea:	6803      	ldr	r3, [r0, #0]
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f4 f9f8 	bl	80001e4 <strlen>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	930a      	str	r3, [sp, #40]	; 0x28
 800bdf8:	f8d8 3000 	ldr.w	r3, [r8]
 800bdfc:	9005      	str	r0, [sp, #20]
 800bdfe:	3307      	adds	r3, #7
 800be00:	f023 0307 	bic.w	r3, r3, #7
 800be04:	f103 0208 	add.w	r2, r3, #8
 800be08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be0c:	f8d4 b000 	ldr.w	fp, [r4]
 800be10:	f8c8 2000 	str.w	r2, [r8]
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be24:	9307      	str	r3, [sp, #28]
 800be26:	f8cd 8018 	str.w	r8, [sp, #24]
 800be2a:	f04f 32ff 	mov.w	r2, #4294967295
 800be2e:	4ba7      	ldr	r3, [pc, #668]	; (800c0cc <_printf_float+0x2f8>)
 800be30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be34:	f7f4 fe8a 	bl	8000b4c <__aeabi_dcmpun>
 800be38:	bb70      	cbnz	r0, 800be98 <_printf_float+0xc4>
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	4ba3      	ldr	r3, [pc, #652]	; (800c0cc <_printf_float+0x2f8>)
 800be40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be44:	f7f4 fe64 	bl	8000b10 <__aeabi_dcmple>
 800be48:	bb30      	cbnz	r0, 800be98 <_printf_float+0xc4>
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4640      	mov	r0, r8
 800be50:	4649      	mov	r1, r9
 800be52:	f7f4 fe53 	bl	8000afc <__aeabi_dcmplt>
 800be56:	b110      	cbz	r0, 800be5e <_printf_float+0x8a>
 800be58:	232d      	movs	r3, #45	; 0x2d
 800be5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be5e:	4a9c      	ldr	r2, [pc, #624]	; (800c0d0 <_printf_float+0x2fc>)
 800be60:	4b9c      	ldr	r3, [pc, #624]	; (800c0d4 <_printf_float+0x300>)
 800be62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800be66:	bf8c      	ite	hi
 800be68:	4690      	movhi	r8, r2
 800be6a:	4698      	movls	r8, r3
 800be6c:	2303      	movs	r3, #3
 800be6e:	f02b 0204 	bic.w	r2, fp, #4
 800be72:	6123      	str	r3, [r4, #16]
 800be74:	6022      	str	r2, [r4, #0]
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	9700      	str	r7, [sp, #0]
 800be7c:	4633      	mov	r3, r6
 800be7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f9e6 	bl	800c254 <_printf_common>
 800be88:	3001      	adds	r0, #1
 800be8a:	f040 808d 	bne.w	800bfa8 <_printf_float+0x1d4>
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	b00d      	add	sp, #52	; 0x34
 800be94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be98:	4642      	mov	r2, r8
 800be9a:	464b      	mov	r3, r9
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 fe54 	bl	8000b4c <__aeabi_dcmpun>
 800bea4:	b110      	cbz	r0, 800beac <_printf_float+0xd8>
 800bea6:	4a8c      	ldr	r2, [pc, #560]	; (800c0d8 <_printf_float+0x304>)
 800bea8:	4b8c      	ldr	r3, [pc, #560]	; (800c0dc <_printf_float+0x308>)
 800beaa:	e7da      	b.n	800be62 <_printf_float+0x8e>
 800beac:	6861      	ldr	r1, [r4, #4]
 800beae:	1c4b      	adds	r3, r1, #1
 800beb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800beb4:	a80a      	add	r0, sp, #40	; 0x28
 800beb6:	d13e      	bne.n	800bf36 <_printf_float+0x162>
 800beb8:	2306      	movs	r3, #6
 800beba:	6063      	str	r3, [r4, #4]
 800bebc:	2300      	movs	r3, #0
 800bebe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bec2:	ab09      	add	r3, sp, #36	; 0x24
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	ec49 8b10 	vmov	d0, r8, r9
 800beca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bece:	6022      	str	r2, [r4, #0]
 800bed0:	f8cd a004 	str.w	sl, [sp, #4]
 800bed4:	6861      	ldr	r1, [r4, #4]
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7ff fee8 	bl	800bcac <__cvt>
 800bedc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bee0:	2b47      	cmp	r3, #71	; 0x47
 800bee2:	4680      	mov	r8, r0
 800bee4:	d109      	bne.n	800befa <_printf_float+0x126>
 800bee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee8:	1cd8      	adds	r0, r3, #3
 800beea:	db02      	blt.n	800bef2 <_printf_float+0x11e>
 800beec:	6862      	ldr	r2, [r4, #4]
 800beee:	4293      	cmp	r3, r2
 800bef0:	dd47      	ble.n	800bf82 <_printf_float+0x1ae>
 800bef2:	f1aa 0a02 	sub.w	sl, sl, #2
 800bef6:	fa5f fa8a 	uxtb.w	sl, sl
 800befa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800befe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf00:	d824      	bhi.n	800bf4c <_printf_float+0x178>
 800bf02:	3901      	subs	r1, #1
 800bf04:	4652      	mov	r2, sl
 800bf06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf0a:	9109      	str	r1, [sp, #36]	; 0x24
 800bf0c:	f7ff ff2f 	bl	800bd6e <__exponent>
 800bf10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf12:	1813      	adds	r3, r2, r0
 800bf14:	2a01      	cmp	r2, #1
 800bf16:	4681      	mov	r9, r0
 800bf18:	6123      	str	r3, [r4, #16]
 800bf1a:	dc02      	bgt.n	800bf22 <_printf_float+0x14e>
 800bf1c:	6822      	ldr	r2, [r4, #0]
 800bf1e:	07d1      	lsls	r1, r2, #31
 800bf20:	d501      	bpl.n	800bf26 <_printf_float+0x152>
 800bf22:	3301      	adds	r3, #1
 800bf24:	6123      	str	r3, [r4, #16]
 800bf26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0a5      	beq.n	800be7a <_printf_float+0xa6>
 800bf2e:	232d      	movs	r3, #45	; 0x2d
 800bf30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf34:	e7a1      	b.n	800be7a <_printf_float+0xa6>
 800bf36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bf3a:	f000 8177 	beq.w	800c22c <_printf_float+0x458>
 800bf3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bf42:	d1bb      	bne.n	800bebc <_printf_float+0xe8>
 800bf44:	2900      	cmp	r1, #0
 800bf46:	d1b9      	bne.n	800bebc <_printf_float+0xe8>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e7b6      	b.n	800beba <_printf_float+0xe6>
 800bf4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bf50:	d119      	bne.n	800bf86 <_printf_float+0x1b2>
 800bf52:	2900      	cmp	r1, #0
 800bf54:	6863      	ldr	r3, [r4, #4]
 800bf56:	dd0c      	ble.n	800bf72 <_printf_float+0x19e>
 800bf58:	6121      	str	r1, [r4, #16]
 800bf5a:	b913      	cbnz	r3, 800bf62 <_printf_float+0x18e>
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	07d2      	lsls	r2, r2, #31
 800bf60:	d502      	bpl.n	800bf68 <_printf_float+0x194>
 800bf62:	3301      	adds	r3, #1
 800bf64:	440b      	add	r3, r1
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6a:	65a3      	str	r3, [r4, #88]	; 0x58
 800bf6c:	f04f 0900 	mov.w	r9, #0
 800bf70:	e7d9      	b.n	800bf26 <_printf_float+0x152>
 800bf72:	b913      	cbnz	r3, 800bf7a <_printf_float+0x1a6>
 800bf74:	6822      	ldr	r2, [r4, #0]
 800bf76:	07d0      	lsls	r0, r2, #31
 800bf78:	d501      	bpl.n	800bf7e <_printf_float+0x1aa>
 800bf7a:	3302      	adds	r3, #2
 800bf7c:	e7f3      	b.n	800bf66 <_printf_float+0x192>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e7f1      	b.n	800bf66 <_printf_float+0x192>
 800bf82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bf86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	db05      	blt.n	800bf9a <_printf_float+0x1c6>
 800bf8e:	6822      	ldr	r2, [r4, #0]
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	07d1      	lsls	r1, r2, #31
 800bf94:	d5e8      	bpl.n	800bf68 <_printf_float+0x194>
 800bf96:	3301      	adds	r3, #1
 800bf98:	e7e5      	b.n	800bf66 <_printf_float+0x192>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bfd4      	ite	le
 800bf9e:	f1c3 0302 	rsble	r3, r3, #2
 800bfa2:	2301      	movgt	r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	e7de      	b.n	800bf66 <_printf_float+0x192>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	055a      	lsls	r2, r3, #21
 800bfac:	d407      	bmi.n	800bfbe <_printf_float+0x1ea>
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d12b      	bne.n	800c014 <_printf_float+0x240>
 800bfbc:	e767      	b.n	800be8e <_printf_float+0xba>
 800bfbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bfc2:	f240 80dc 	bls.w	800c17e <_printf_float+0x3aa>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfce:	f7f4 fd8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d033      	beq.n	800c03e <_printf_float+0x26a>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4a41      	ldr	r2, [pc, #260]	; (800c0e0 <_printf_float+0x30c>)
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4628      	mov	r0, r5
 800bfde:	47b8      	blx	r7
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	f43f af54 	beq.w	800be8e <_printf_float+0xba>
 800bfe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfea:	429a      	cmp	r2, r3
 800bfec:	db02      	blt.n	800bff4 <_printf_float+0x220>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	07d8      	lsls	r0, r3, #31
 800bff2:	d50f      	bpl.n	800c014 <_printf_float+0x240>
 800bff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bff8:	4631      	mov	r1, r6
 800bffa:	4628      	mov	r0, r5
 800bffc:	47b8      	blx	r7
 800bffe:	3001      	adds	r0, #1
 800c000:	f43f af45 	beq.w	800be8e <_printf_float+0xba>
 800c004:	f04f 0800 	mov.w	r8, #0
 800c008:	f104 091a 	add.w	r9, r4, #26
 800c00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00e:	3b01      	subs	r3, #1
 800c010:	4543      	cmp	r3, r8
 800c012:	dc09      	bgt.n	800c028 <_printf_float+0x254>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	079b      	lsls	r3, r3, #30
 800c018:	f100 8103 	bmi.w	800c222 <_printf_float+0x44e>
 800c01c:	68e0      	ldr	r0, [r4, #12]
 800c01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c020:	4298      	cmp	r0, r3
 800c022:	bfb8      	it	lt
 800c024:	4618      	movlt	r0, r3
 800c026:	e734      	b.n	800be92 <_printf_float+0xbe>
 800c028:	2301      	movs	r3, #1
 800c02a:	464a      	mov	r2, r9
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f af2b 	beq.w	800be8e <_printf_float+0xba>
 800c038:	f108 0801 	add.w	r8, r8, #1
 800c03c:	e7e6      	b.n	800c00c <_printf_float+0x238>
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	2b00      	cmp	r3, #0
 800c042:	dc2b      	bgt.n	800c09c <_printf_float+0x2c8>
 800c044:	2301      	movs	r3, #1
 800c046:	4a26      	ldr	r2, [pc, #152]	; (800c0e0 <_printf_float+0x30c>)
 800c048:	4631      	mov	r1, r6
 800c04a:	4628      	mov	r0, r5
 800c04c:	47b8      	blx	r7
 800c04e:	3001      	adds	r0, #1
 800c050:	f43f af1d 	beq.w	800be8e <_printf_float+0xba>
 800c054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c056:	b923      	cbnz	r3, 800c062 <_printf_float+0x28e>
 800c058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05a:	b913      	cbnz	r3, 800c062 <_printf_float+0x28e>
 800c05c:	6823      	ldr	r3, [r4, #0]
 800c05e:	07d9      	lsls	r1, r3, #31
 800c060:	d5d8      	bpl.n	800c014 <_printf_float+0x240>
 800c062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c066:	4631      	mov	r1, r6
 800c068:	4628      	mov	r0, r5
 800c06a:	47b8      	blx	r7
 800c06c:	3001      	adds	r0, #1
 800c06e:	f43f af0e 	beq.w	800be8e <_printf_float+0xba>
 800c072:	f04f 0900 	mov.w	r9, #0
 800c076:	f104 0a1a 	add.w	sl, r4, #26
 800c07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07c:	425b      	negs	r3, r3
 800c07e:	454b      	cmp	r3, r9
 800c080:	dc01      	bgt.n	800c086 <_printf_float+0x2b2>
 800c082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c084:	e794      	b.n	800bfb0 <_printf_float+0x1dc>
 800c086:	2301      	movs	r3, #1
 800c088:	4652      	mov	r2, sl
 800c08a:	4631      	mov	r1, r6
 800c08c:	4628      	mov	r0, r5
 800c08e:	47b8      	blx	r7
 800c090:	3001      	adds	r0, #1
 800c092:	f43f aefc 	beq.w	800be8e <_printf_float+0xba>
 800c096:	f109 0901 	add.w	r9, r9, #1
 800c09a:	e7ee      	b.n	800c07a <_printf_float+0x2a6>
 800c09c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c09e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	bfa8      	it	ge
 800c0a4:	461a      	movge	r2, r3
 800c0a6:	2a00      	cmp	r2, #0
 800c0a8:	4691      	mov	r9, r2
 800c0aa:	dd07      	ble.n	800c0bc <_printf_float+0x2e8>
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	4631      	mov	r1, r6
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	47b8      	blx	r7
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f43f aee9 	beq.w	800be8e <_printf_float+0xba>
 800c0bc:	f104 031a 	add.w	r3, r4, #26
 800c0c0:	f04f 0b00 	mov.w	fp, #0
 800c0c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0c8:	9306      	str	r3, [sp, #24]
 800c0ca:	e015      	b.n	800c0f8 <_printf_float+0x324>
 800c0cc:	7fefffff 	.word	0x7fefffff
 800c0d0:	0800e1e4 	.word	0x0800e1e4
 800c0d4:	0800e1e0 	.word	0x0800e1e0
 800c0d8:	0800e1ec 	.word	0x0800e1ec
 800c0dc:	0800e1e8 	.word	0x0800e1e8
 800c0e0:	0800e1f0 	.word	0x0800e1f0
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	9a06      	ldr	r2, [sp, #24]
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f aecd 	beq.w	800be8e <_printf_float+0xba>
 800c0f4:	f10b 0b01 	add.w	fp, fp, #1
 800c0f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c0fc:	ebaa 0309 	sub.w	r3, sl, r9
 800c100:	455b      	cmp	r3, fp
 800c102:	dcef      	bgt.n	800c0e4 <_printf_float+0x310>
 800c104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c108:	429a      	cmp	r2, r3
 800c10a:	44d0      	add	r8, sl
 800c10c:	db15      	blt.n	800c13a <_printf_float+0x366>
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	07da      	lsls	r2, r3, #31
 800c112:	d412      	bmi.n	800c13a <_printf_float+0x366>
 800c114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c116:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c118:	eba3 020a 	sub.w	r2, r3, sl
 800c11c:	eba3 0a01 	sub.w	sl, r3, r1
 800c120:	4592      	cmp	sl, r2
 800c122:	bfa8      	it	ge
 800c124:	4692      	movge	sl, r2
 800c126:	f1ba 0f00 	cmp.w	sl, #0
 800c12a:	dc0e      	bgt.n	800c14a <_printf_float+0x376>
 800c12c:	f04f 0800 	mov.w	r8, #0
 800c130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c134:	f104 091a 	add.w	r9, r4, #26
 800c138:	e019      	b.n	800c16e <_printf_float+0x39a>
 800c13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c13e:	4631      	mov	r1, r6
 800c140:	4628      	mov	r0, r5
 800c142:	47b8      	blx	r7
 800c144:	3001      	adds	r0, #1
 800c146:	d1e5      	bne.n	800c114 <_printf_float+0x340>
 800c148:	e6a1      	b.n	800be8e <_printf_float+0xba>
 800c14a:	4653      	mov	r3, sl
 800c14c:	4642      	mov	r2, r8
 800c14e:	4631      	mov	r1, r6
 800c150:	4628      	mov	r0, r5
 800c152:	47b8      	blx	r7
 800c154:	3001      	adds	r0, #1
 800c156:	d1e9      	bne.n	800c12c <_printf_float+0x358>
 800c158:	e699      	b.n	800be8e <_printf_float+0xba>
 800c15a:	2301      	movs	r3, #1
 800c15c:	464a      	mov	r2, r9
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	f43f ae92 	beq.w	800be8e <_printf_float+0xba>
 800c16a:	f108 0801 	add.w	r8, r8, #1
 800c16e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c172:	1a9b      	subs	r3, r3, r2
 800c174:	eba3 030a 	sub.w	r3, r3, sl
 800c178:	4543      	cmp	r3, r8
 800c17a:	dcee      	bgt.n	800c15a <_printf_float+0x386>
 800c17c:	e74a      	b.n	800c014 <_printf_float+0x240>
 800c17e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c180:	2a01      	cmp	r2, #1
 800c182:	dc01      	bgt.n	800c188 <_printf_float+0x3b4>
 800c184:	07db      	lsls	r3, r3, #31
 800c186:	d53a      	bpl.n	800c1fe <_printf_float+0x42a>
 800c188:	2301      	movs	r3, #1
 800c18a:	4642      	mov	r2, r8
 800c18c:	4631      	mov	r1, r6
 800c18e:	4628      	mov	r0, r5
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	f43f ae7b 	beq.w	800be8e <_printf_float+0xba>
 800c198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f108 0801 	add.w	r8, r8, #1
 800c1a8:	f43f ae71 	beq.w	800be8e <_printf_float+0xba>
 800c1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f103 3aff 	add.w	sl, r3, #4294967295
 800c1b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f7f4 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1be:	b9c8      	cbnz	r0, 800c1f4 <_printf_float+0x420>
 800c1c0:	4653      	mov	r3, sl
 800c1c2:	4642      	mov	r2, r8
 800c1c4:	4631      	mov	r1, r6
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	47b8      	blx	r7
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	d10e      	bne.n	800c1ec <_printf_float+0x418>
 800c1ce:	e65e      	b.n	800be8e <_printf_float+0xba>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f ae57 	beq.w	800be8e <_printf_float+0xba>
 800c1e0:	f108 0801 	add.w	r8, r8, #1
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	dcf1      	bgt.n	800c1d0 <_printf_float+0x3fc>
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1f2:	e6de      	b.n	800bfb2 <_printf_float+0x1de>
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	f104 0a1a 	add.w	sl, r4, #26
 800c1fc:	e7f2      	b.n	800c1e4 <_printf_float+0x410>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e7df      	b.n	800c1c2 <_printf_float+0x3ee>
 800c202:	2301      	movs	r3, #1
 800c204:	464a      	mov	r2, r9
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	f43f ae3e 	beq.w	800be8e <_printf_float+0xba>
 800c212:	f108 0801 	add.w	r8, r8, #1
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	4543      	cmp	r3, r8
 800c21e:	dcf0      	bgt.n	800c202 <_printf_float+0x42e>
 800c220:	e6fc      	b.n	800c01c <_printf_float+0x248>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	f104 0919 	add.w	r9, r4, #25
 800c22a:	e7f4      	b.n	800c216 <_printf_float+0x442>
 800c22c:	2900      	cmp	r1, #0
 800c22e:	f43f ae8b 	beq.w	800bf48 <_printf_float+0x174>
 800c232:	2300      	movs	r3, #0
 800c234:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c238:	ab09      	add	r3, sp, #36	; 0x24
 800c23a:	9300      	str	r3, [sp, #0]
 800c23c:	ec49 8b10 	vmov	d0, r8, r9
 800c240:	6022      	str	r2, [r4, #0]
 800c242:	f8cd a004 	str.w	sl, [sp, #4]
 800c246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c24a:	4628      	mov	r0, r5
 800c24c:	f7ff fd2e 	bl	800bcac <__cvt>
 800c250:	4680      	mov	r8, r0
 800c252:	e648      	b.n	800bee6 <_printf_float+0x112>

0800c254 <_printf_common>:
 800c254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c258:	4691      	mov	r9, r2
 800c25a:	461f      	mov	r7, r3
 800c25c:	688a      	ldr	r2, [r1, #8]
 800c25e:	690b      	ldr	r3, [r1, #16]
 800c260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c264:	4293      	cmp	r3, r2
 800c266:	bfb8      	it	lt
 800c268:	4613      	movlt	r3, r2
 800c26a:	f8c9 3000 	str.w	r3, [r9]
 800c26e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c272:	4606      	mov	r6, r0
 800c274:	460c      	mov	r4, r1
 800c276:	b112      	cbz	r2, 800c27e <_printf_common+0x2a>
 800c278:	3301      	adds	r3, #1
 800c27a:	f8c9 3000 	str.w	r3, [r9]
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	0699      	lsls	r1, r3, #26
 800c282:	bf42      	ittt	mi
 800c284:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c288:	3302      	addmi	r3, #2
 800c28a:	f8c9 3000 	strmi.w	r3, [r9]
 800c28e:	6825      	ldr	r5, [r4, #0]
 800c290:	f015 0506 	ands.w	r5, r5, #6
 800c294:	d107      	bne.n	800c2a6 <_printf_common+0x52>
 800c296:	f104 0a19 	add.w	sl, r4, #25
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	f8d9 2000 	ldr.w	r2, [r9]
 800c2a0:	1a9b      	subs	r3, r3, r2
 800c2a2:	42ab      	cmp	r3, r5
 800c2a4:	dc28      	bgt.n	800c2f8 <_printf_common+0xa4>
 800c2a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c2aa:	6822      	ldr	r2, [r4, #0]
 800c2ac:	3300      	adds	r3, #0
 800c2ae:	bf18      	it	ne
 800c2b0:	2301      	movne	r3, #1
 800c2b2:	0692      	lsls	r2, r2, #26
 800c2b4:	d42d      	bmi.n	800c312 <_printf_common+0xbe>
 800c2b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	4630      	mov	r0, r6
 800c2be:	47c0      	blx	r8
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	d020      	beq.n	800c306 <_printf_common+0xb2>
 800c2c4:	6823      	ldr	r3, [r4, #0]
 800c2c6:	68e5      	ldr	r5, [r4, #12]
 800c2c8:	f8d9 2000 	ldr.w	r2, [r9]
 800c2cc:	f003 0306 	and.w	r3, r3, #6
 800c2d0:	2b04      	cmp	r3, #4
 800c2d2:	bf08      	it	eq
 800c2d4:	1aad      	subeq	r5, r5, r2
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	6922      	ldr	r2, [r4, #16]
 800c2da:	bf0c      	ite	eq
 800c2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e0:	2500      	movne	r5, #0
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	bfc4      	itt	gt
 800c2e6:	1a9b      	subgt	r3, r3, r2
 800c2e8:	18ed      	addgt	r5, r5, r3
 800c2ea:	f04f 0900 	mov.w	r9, #0
 800c2ee:	341a      	adds	r4, #26
 800c2f0:	454d      	cmp	r5, r9
 800c2f2:	d11a      	bne.n	800c32a <_printf_common+0xd6>
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e008      	b.n	800c30a <_printf_common+0xb6>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4630      	mov	r0, r6
 800c300:	47c0      	blx	r8
 800c302:	3001      	adds	r0, #1
 800c304:	d103      	bne.n	800c30e <_printf_common+0xba>
 800c306:	f04f 30ff 	mov.w	r0, #4294967295
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	3501      	adds	r5, #1
 800c310:	e7c3      	b.n	800c29a <_printf_common+0x46>
 800c312:	18e1      	adds	r1, r4, r3
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	2030      	movs	r0, #48	; 0x30
 800c318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c31c:	4422      	add	r2, r4
 800c31e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c326:	3302      	adds	r3, #2
 800c328:	e7c5      	b.n	800c2b6 <_printf_common+0x62>
 800c32a:	2301      	movs	r3, #1
 800c32c:	4622      	mov	r2, r4
 800c32e:	4639      	mov	r1, r7
 800c330:	4630      	mov	r0, r6
 800c332:	47c0      	blx	r8
 800c334:	3001      	adds	r0, #1
 800c336:	d0e6      	beq.n	800c306 <_printf_common+0xb2>
 800c338:	f109 0901 	add.w	r9, r9, #1
 800c33c:	e7d8      	b.n	800c2f0 <_printf_common+0x9c>
	...

0800c340 <_printf_i>:
 800c340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c344:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c348:	460c      	mov	r4, r1
 800c34a:	7e09      	ldrb	r1, [r1, #24]
 800c34c:	b085      	sub	sp, #20
 800c34e:	296e      	cmp	r1, #110	; 0x6e
 800c350:	4617      	mov	r7, r2
 800c352:	4606      	mov	r6, r0
 800c354:	4698      	mov	r8, r3
 800c356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c358:	f000 80b3 	beq.w	800c4c2 <_printf_i+0x182>
 800c35c:	d822      	bhi.n	800c3a4 <_printf_i+0x64>
 800c35e:	2963      	cmp	r1, #99	; 0x63
 800c360:	d036      	beq.n	800c3d0 <_printf_i+0x90>
 800c362:	d80a      	bhi.n	800c37a <_printf_i+0x3a>
 800c364:	2900      	cmp	r1, #0
 800c366:	f000 80b9 	beq.w	800c4dc <_printf_i+0x19c>
 800c36a:	2958      	cmp	r1, #88	; 0x58
 800c36c:	f000 8083 	beq.w	800c476 <_printf_i+0x136>
 800c370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c374:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c378:	e032      	b.n	800c3e0 <_printf_i+0xa0>
 800c37a:	2964      	cmp	r1, #100	; 0x64
 800c37c:	d001      	beq.n	800c382 <_printf_i+0x42>
 800c37e:	2969      	cmp	r1, #105	; 0x69
 800c380:	d1f6      	bne.n	800c370 <_printf_i+0x30>
 800c382:	6820      	ldr	r0, [r4, #0]
 800c384:	6813      	ldr	r3, [r2, #0]
 800c386:	0605      	lsls	r5, r0, #24
 800c388:	f103 0104 	add.w	r1, r3, #4
 800c38c:	d52a      	bpl.n	800c3e4 <_printf_i+0xa4>
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6011      	str	r1, [r2, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	da03      	bge.n	800c39e <_printf_i+0x5e>
 800c396:	222d      	movs	r2, #45	; 0x2d
 800c398:	425b      	negs	r3, r3
 800c39a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c39e:	486f      	ldr	r0, [pc, #444]	; (800c55c <_printf_i+0x21c>)
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	e039      	b.n	800c418 <_printf_i+0xd8>
 800c3a4:	2973      	cmp	r1, #115	; 0x73
 800c3a6:	f000 809d 	beq.w	800c4e4 <_printf_i+0x1a4>
 800c3aa:	d808      	bhi.n	800c3be <_printf_i+0x7e>
 800c3ac:	296f      	cmp	r1, #111	; 0x6f
 800c3ae:	d020      	beq.n	800c3f2 <_printf_i+0xb2>
 800c3b0:	2970      	cmp	r1, #112	; 0x70
 800c3b2:	d1dd      	bne.n	800c370 <_printf_i+0x30>
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	f043 0320 	orr.w	r3, r3, #32
 800c3ba:	6023      	str	r3, [r4, #0]
 800c3bc:	e003      	b.n	800c3c6 <_printf_i+0x86>
 800c3be:	2975      	cmp	r1, #117	; 0x75
 800c3c0:	d017      	beq.n	800c3f2 <_printf_i+0xb2>
 800c3c2:	2978      	cmp	r1, #120	; 0x78
 800c3c4:	d1d4      	bne.n	800c370 <_printf_i+0x30>
 800c3c6:	2378      	movs	r3, #120	; 0x78
 800c3c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3cc:	4864      	ldr	r0, [pc, #400]	; (800c560 <_printf_i+0x220>)
 800c3ce:	e055      	b.n	800c47c <_printf_i+0x13c>
 800c3d0:	6813      	ldr	r3, [r2, #0]
 800c3d2:	1d19      	adds	r1, r3, #4
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6011      	str	r1, [r2, #0]
 800c3d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e08c      	b.n	800c4fe <_printf_i+0x1be>
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6011      	str	r1, [r2, #0]
 800c3e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3ec:	bf18      	it	ne
 800c3ee:	b21b      	sxthne	r3, r3
 800c3f0:	e7cf      	b.n	800c392 <_printf_i+0x52>
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	6825      	ldr	r5, [r4, #0]
 800c3f6:	1d18      	adds	r0, r3, #4
 800c3f8:	6010      	str	r0, [r2, #0]
 800c3fa:	0628      	lsls	r0, r5, #24
 800c3fc:	d501      	bpl.n	800c402 <_printf_i+0xc2>
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	e002      	b.n	800c408 <_printf_i+0xc8>
 800c402:	0668      	lsls	r0, r5, #25
 800c404:	d5fb      	bpl.n	800c3fe <_printf_i+0xbe>
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	4854      	ldr	r0, [pc, #336]	; (800c55c <_printf_i+0x21c>)
 800c40a:	296f      	cmp	r1, #111	; 0x6f
 800c40c:	bf14      	ite	ne
 800c40e:	220a      	movne	r2, #10
 800c410:	2208      	moveq	r2, #8
 800c412:	2100      	movs	r1, #0
 800c414:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c418:	6865      	ldr	r5, [r4, #4]
 800c41a:	60a5      	str	r5, [r4, #8]
 800c41c:	2d00      	cmp	r5, #0
 800c41e:	f2c0 8095 	blt.w	800c54c <_printf_i+0x20c>
 800c422:	6821      	ldr	r1, [r4, #0]
 800c424:	f021 0104 	bic.w	r1, r1, #4
 800c428:	6021      	str	r1, [r4, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d13d      	bne.n	800c4aa <_printf_i+0x16a>
 800c42e:	2d00      	cmp	r5, #0
 800c430:	f040 808e 	bne.w	800c550 <_printf_i+0x210>
 800c434:	4665      	mov	r5, ip
 800c436:	2a08      	cmp	r2, #8
 800c438:	d10b      	bne.n	800c452 <_printf_i+0x112>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	07db      	lsls	r3, r3, #31
 800c43e:	d508      	bpl.n	800c452 <_printf_i+0x112>
 800c440:	6923      	ldr	r3, [r4, #16]
 800c442:	6862      	ldr	r2, [r4, #4]
 800c444:	429a      	cmp	r2, r3
 800c446:	bfde      	ittt	le
 800c448:	2330      	movle	r3, #48	; 0x30
 800c44a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c44e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c452:	ebac 0305 	sub.w	r3, ip, r5
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	f8cd 8000 	str.w	r8, [sp]
 800c45c:	463b      	mov	r3, r7
 800c45e:	aa03      	add	r2, sp, #12
 800c460:	4621      	mov	r1, r4
 800c462:	4630      	mov	r0, r6
 800c464:	f7ff fef6 	bl	800c254 <_printf_common>
 800c468:	3001      	adds	r0, #1
 800c46a:	d14d      	bne.n	800c508 <_printf_i+0x1c8>
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b005      	add	sp, #20
 800c472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c476:	4839      	ldr	r0, [pc, #228]	; (800c55c <_printf_i+0x21c>)
 800c478:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c47c:	6813      	ldr	r3, [r2, #0]
 800c47e:	6821      	ldr	r1, [r4, #0]
 800c480:	1d1d      	adds	r5, r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6015      	str	r5, [r2, #0]
 800c486:	060a      	lsls	r2, r1, #24
 800c488:	d50b      	bpl.n	800c4a2 <_printf_i+0x162>
 800c48a:	07ca      	lsls	r2, r1, #31
 800c48c:	bf44      	itt	mi
 800c48e:	f041 0120 	orrmi.w	r1, r1, #32
 800c492:	6021      	strmi	r1, [r4, #0]
 800c494:	b91b      	cbnz	r3, 800c49e <_printf_i+0x15e>
 800c496:	6822      	ldr	r2, [r4, #0]
 800c498:	f022 0220 	bic.w	r2, r2, #32
 800c49c:	6022      	str	r2, [r4, #0]
 800c49e:	2210      	movs	r2, #16
 800c4a0:	e7b7      	b.n	800c412 <_printf_i+0xd2>
 800c4a2:	064d      	lsls	r5, r1, #25
 800c4a4:	bf48      	it	mi
 800c4a6:	b29b      	uxthmi	r3, r3
 800c4a8:	e7ef      	b.n	800c48a <_printf_i+0x14a>
 800c4aa:	4665      	mov	r5, ip
 800c4ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4b0:	fb02 3311 	mls	r3, r2, r1, r3
 800c4b4:	5cc3      	ldrb	r3, [r0, r3]
 800c4b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	d1f5      	bne.n	800c4ac <_printf_i+0x16c>
 800c4c0:	e7b9      	b.n	800c436 <_printf_i+0xf6>
 800c4c2:	6813      	ldr	r3, [r2, #0]
 800c4c4:	6825      	ldr	r5, [r4, #0]
 800c4c6:	6961      	ldr	r1, [r4, #20]
 800c4c8:	1d18      	adds	r0, r3, #4
 800c4ca:	6010      	str	r0, [r2, #0]
 800c4cc:	0628      	lsls	r0, r5, #24
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	d501      	bpl.n	800c4d6 <_printf_i+0x196>
 800c4d2:	6019      	str	r1, [r3, #0]
 800c4d4:	e002      	b.n	800c4dc <_printf_i+0x19c>
 800c4d6:	066a      	lsls	r2, r5, #25
 800c4d8:	d5fb      	bpl.n	800c4d2 <_printf_i+0x192>
 800c4da:	8019      	strh	r1, [r3, #0]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	4665      	mov	r5, ip
 800c4e2:	e7b9      	b.n	800c458 <_printf_i+0x118>
 800c4e4:	6813      	ldr	r3, [r2, #0]
 800c4e6:	1d19      	adds	r1, r3, #4
 800c4e8:	6011      	str	r1, [r2, #0]
 800c4ea:	681d      	ldr	r5, [r3, #0]
 800c4ec:	6862      	ldr	r2, [r4, #4]
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	f7f3 fe85 	bl	8000200 <memchr>
 800c4f6:	b108      	cbz	r0, 800c4fc <_printf_i+0x1bc>
 800c4f8:	1b40      	subs	r0, r0, r5
 800c4fa:	6060      	str	r0, [r4, #4]
 800c4fc:	6863      	ldr	r3, [r4, #4]
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	2300      	movs	r3, #0
 800c502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c506:	e7a7      	b.n	800c458 <_printf_i+0x118>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	462a      	mov	r2, r5
 800c50c:	4639      	mov	r1, r7
 800c50e:	4630      	mov	r0, r6
 800c510:	47c0      	blx	r8
 800c512:	3001      	adds	r0, #1
 800c514:	d0aa      	beq.n	800c46c <_printf_i+0x12c>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	079b      	lsls	r3, r3, #30
 800c51a:	d413      	bmi.n	800c544 <_printf_i+0x204>
 800c51c:	68e0      	ldr	r0, [r4, #12]
 800c51e:	9b03      	ldr	r3, [sp, #12]
 800c520:	4298      	cmp	r0, r3
 800c522:	bfb8      	it	lt
 800c524:	4618      	movlt	r0, r3
 800c526:	e7a3      	b.n	800c470 <_printf_i+0x130>
 800c528:	2301      	movs	r3, #1
 800c52a:	464a      	mov	r2, r9
 800c52c:	4639      	mov	r1, r7
 800c52e:	4630      	mov	r0, r6
 800c530:	47c0      	blx	r8
 800c532:	3001      	adds	r0, #1
 800c534:	d09a      	beq.n	800c46c <_printf_i+0x12c>
 800c536:	3501      	adds	r5, #1
 800c538:	68e3      	ldr	r3, [r4, #12]
 800c53a:	9a03      	ldr	r2, [sp, #12]
 800c53c:	1a9b      	subs	r3, r3, r2
 800c53e:	42ab      	cmp	r3, r5
 800c540:	dcf2      	bgt.n	800c528 <_printf_i+0x1e8>
 800c542:	e7eb      	b.n	800c51c <_printf_i+0x1dc>
 800c544:	2500      	movs	r5, #0
 800c546:	f104 0919 	add.w	r9, r4, #25
 800c54a:	e7f5      	b.n	800c538 <_printf_i+0x1f8>
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1ac      	bne.n	800c4aa <_printf_i+0x16a>
 800c550:	7803      	ldrb	r3, [r0, #0]
 800c552:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c556:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c55a:	e76c      	b.n	800c436 <_printf_i+0xf6>
 800c55c:	0800e1f2 	.word	0x0800e1f2
 800c560:	0800e203 	.word	0x0800e203

0800c564 <siprintf>:
 800c564:	b40e      	push	{r1, r2, r3}
 800c566:	b500      	push	{lr}
 800c568:	b09c      	sub	sp, #112	; 0x70
 800c56a:	ab1d      	add	r3, sp, #116	; 0x74
 800c56c:	9002      	str	r0, [sp, #8]
 800c56e:	9006      	str	r0, [sp, #24]
 800c570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c574:	4809      	ldr	r0, [pc, #36]	; (800c59c <siprintf+0x38>)
 800c576:	9107      	str	r1, [sp, #28]
 800c578:	9104      	str	r1, [sp, #16]
 800c57a:	4909      	ldr	r1, [pc, #36]	; (800c5a0 <siprintf+0x3c>)
 800c57c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c580:	9105      	str	r1, [sp, #20]
 800c582:	6800      	ldr	r0, [r0, #0]
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	a902      	add	r1, sp, #8
 800c588:	f001 fa76 	bl	800da78 <_svfiprintf_r>
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	2200      	movs	r2, #0
 800c590:	701a      	strb	r2, [r3, #0]
 800c592:	b01c      	add	sp, #112	; 0x70
 800c594:	f85d eb04 	ldr.w	lr, [sp], #4
 800c598:	b003      	add	sp, #12
 800c59a:	4770      	bx	lr
 800c59c:	20000068 	.word	0x20000068
 800c5a0:	ffff0208 	.word	0xffff0208

0800c5a4 <strcat>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	781a      	ldrb	r2, [r3, #0]
 800c5aa:	1c5c      	adds	r4, r3, #1
 800c5ac:	b93a      	cbnz	r2, 800c5be <strcat+0x1a>
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5b8:	2a00      	cmp	r2, #0
 800c5ba:	d1f9      	bne.n	800c5b0 <strcat+0xc>
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	4623      	mov	r3, r4
 800c5c0:	e7f2      	b.n	800c5a8 <strcat+0x4>

0800c5c2 <strcpy>:
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c8:	f803 2b01 	strb.w	r2, [r3], #1
 800c5cc:	2a00      	cmp	r2, #0
 800c5ce:	d1f9      	bne.n	800c5c4 <strcpy+0x2>
 800c5d0:	4770      	bx	lr

0800c5d2 <quorem>:
 800c5d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d6:	6903      	ldr	r3, [r0, #16]
 800c5d8:	690c      	ldr	r4, [r1, #16]
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	4680      	mov	r8, r0
 800c5de:	f2c0 8082 	blt.w	800c6e6 <quorem+0x114>
 800c5e2:	3c01      	subs	r4, #1
 800c5e4:	f101 0714 	add.w	r7, r1, #20
 800c5e8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c5ec:	f100 0614 	add.w	r6, r0, #20
 800c5f0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c5f4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c5f8:	eb06 030c 	add.w	r3, r6, ip
 800c5fc:	3501      	adds	r5, #1
 800c5fe:	eb07 090c 	add.w	r9, r7, ip
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	fbb0 f5f5 	udiv	r5, r0, r5
 800c608:	b395      	cbz	r5, 800c670 <quorem+0x9e>
 800c60a:	f04f 0a00 	mov.w	sl, #0
 800c60e:	4638      	mov	r0, r7
 800c610:	46b6      	mov	lr, r6
 800c612:	46d3      	mov	fp, sl
 800c614:	f850 2b04 	ldr.w	r2, [r0], #4
 800c618:	b293      	uxth	r3, r2
 800c61a:	fb05 a303 	mla	r3, r5, r3, sl
 800c61e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c622:	b29b      	uxth	r3, r3
 800c624:	ebab 0303 	sub.w	r3, fp, r3
 800c628:	0c12      	lsrs	r2, r2, #16
 800c62a:	f8de b000 	ldr.w	fp, [lr]
 800c62e:	fb05 a202 	mla	r2, r5, r2, sl
 800c632:	fa13 f38b 	uxtah	r3, r3, fp
 800c636:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c63a:	fa1f fb82 	uxth.w	fp, r2
 800c63e:	f8de 2000 	ldr.w	r2, [lr]
 800c642:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c650:	4581      	cmp	r9, r0
 800c652:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c656:	f84e 3b04 	str.w	r3, [lr], #4
 800c65a:	d2db      	bcs.n	800c614 <quorem+0x42>
 800c65c:	f856 300c 	ldr.w	r3, [r6, ip]
 800c660:	b933      	cbnz	r3, 800c670 <quorem+0x9e>
 800c662:	9b01      	ldr	r3, [sp, #4]
 800c664:	3b04      	subs	r3, #4
 800c666:	429e      	cmp	r6, r3
 800c668:	461a      	mov	r2, r3
 800c66a:	d330      	bcc.n	800c6ce <quorem+0xfc>
 800c66c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c670:	4640      	mov	r0, r8
 800c672:	f001 f82b 	bl	800d6cc <__mcmp>
 800c676:	2800      	cmp	r0, #0
 800c678:	db25      	blt.n	800c6c6 <quorem+0xf4>
 800c67a:	3501      	adds	r5, #1
 800c67c:	4630      	mov	r0, r6
 800c67e:	f04f 0c00 	mov.w	ip, #0
 800c682:	f857 2b04 	ldr.w	r2, [r7], #4
 800c686:	f8d0 e000 	ldr.w	lr, [r0]
 800c68a:	b293      	uxth	r3, r2
 800c68c:	ebac 0303 	sub.w	r3, ip, r3
 800c690:	0c12      	lsrs	r2, r2, #16
 800c692:	fa13 f38e 	uxtah	r3, r3, lr
 800c696:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c69a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6a4:	45b9      	cmp	r9, r7
 800c6a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6aa:	f840 3b04 	str.w	r3, [r0], #4
 800c6ae:	d2e8      	bcs.n	800c682 <quorem+0xb0>
 800c6b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c6b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c6b8:	b92a      	cbnz	r2, 800c6c6 <quorem+0xf4>
 800c6ba:	3b04      	subs	r3, #4
 800c6bc:	429e      	cmp	r6, r3
 800c6be:	461a      	mov	r2, r3
 800c6c0:	d30b      	bcc.n	800c6da <quorem+0x108>
 800c6c2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	b003      	add	sp, #12
 800c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	3b04      	subs	r3, #4
 800c6d2:	2a00      	cmp	r2, #0
 800c6d4:	d1ca      	bne.n	800c66c <quorem+0x9a>
 800c6d6:	3c01      	subs	r4, #1
 800c6d8:	e7c5      	b.n	800c666 <quorem+0x94>
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	3b04      	subs	r3, #4
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	d1ef      	bne.n	800c6c2 <quorem+0xf0>
 800c6e2:	3c01      	subs	r4, #1
 800c6e4:	e7ea      	b.n	800c6bc <quorem+0xea>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	e7ee      	b.n	800c6c8 <quorem+0xf6>
 800c6ea:	0000      	movs	r0, r0
 800c6ec:	0000      	movs	r0, r0
	...

0800c6f0 <_dtoa_r>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	ec57 6b10 	vmov	r6, r7, d0
 800c6f8:	b097      	sub	sp, #92	; 0x5c
 800c6fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6fc:	9106      	str	r1, [sp, #24]
 800c6fe:	4604      	mov	r4, r0
 800c700:	920b      	str	r2, [sp, #44]	; 0x2c
 800c702:	9312      	str	r3, [sp, #72]	; 0x48
 800c704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c708:	e9cd 6700 	strd	r6, r7, [sp]
 800c70c:	b93d      	cbnz	r5, 800c71e <_dtoa_r+0x2e>
 800c70e:	2010      	movs	r0, #16
 800c710:	f000 fdb4 	bl	800d27c <malloc>
 800c714:	6260      	str	r0, [r4, #36]	; 0x24
 800c716:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c71a:	6005      	str	r5, [r0, #0]
 800c71c:	60c5      	str	r5, [r0, #12]
 800c71e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c720:	6819      	ldr	r1, [r3, #0]
 800c722:	b151      	cbz	r1, 800c73a <_dtoa_r+0x4a>
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	604a      	str	r2, [r1, #4]
 800c728:	2301      	movs	r3, #1
 800c72a:	4093      	lsls	r3, r2
 800c72c:	608b      	str	r3, [r1, #8]
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 fdeb 	bl	800d30a <_Bfree>
 800c734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	1e3b      	subs	r3, r7, #0
 800c73c:	bfbb      	ittet	lt
 800c73e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c742:	9301      	strlt	r3, [sp, #4]
 800c744:	2300      	movge	r3, #0
 800c746:	2201      	movlt	r2, #1
 800c748:	bfac      	ite	ge
 800c74a:	f8c8 3000 	strge.w	r3, [r8]
 800c74e:	f8c8 2000 	strlt.w	r2, [r8]
 800c752:	4baf      	ldr	r3, [pc, #700]	; (800ca10 <_dtoa_r+0x320>)
 800c754:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c758:	ea33 0308 	bics.w	r3, r3, r8
 800c75c:	d114      	bne.n	800c788 <_dtoa_r+0x98>
 800c75e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c760:	f242 730f 	movw	r3, #9999	; 0x270f
 800c764:	6013      	str	r3, [r2, #0]
 800c766:	9b00      	ldr	r3, [sp, #0]
 800c768:	b923      	cbnz	r3, 800c774 <_dtoa_r+0x84>
 800c76a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c76e:	2800      	cmp	r0, #0
 800c770:	f000 8542 	beq.w	800d1f8 <_dtoa_r+0xb08>
 800c774:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c776:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ca24 <_dtoa_r+0x334>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 8544 	beq.w	800d208 <_dtoa_r+0xb18>
 800c780:	f10b 0303 	add.w	r3, fp, #3
 800c784:	f000 bd3e 	b.w	800d204 <_dtoa_r+0xb14>
 800c788:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c78c:	2200      	movs	r2, #0
 800c78e:	2300      	movs	r3, #0
 800c790:	4630      	mov	r0, r6
 800c792:	4639      	mov	r1, r7
 800c794:	f7f4 f9a8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c798:	4681      	mov	r9, r0
 800c79a:	b168      	cbz	r0, 800c7b8 <_dtoa_r+0xc8>
 800c79c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c79e:	2301      	movs	r3, #1
 800c7a0:	6013      	str	r3, [r2, #0]
 800c7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 8524 	beq.w	800d1f2 <_dtoa_r+0xb02>
 800c7aa:	4b9a      	ldr	r3, [pc, #616]	; (800ca14 <_dtoa_r+0x324>)
 800c7ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ae:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	f000 bd28 	b.w	800d208 <_dtoa_r+0xb18>
 800c7b8:	aa14      	add	r2, sp, #80	; 0x50
 800c7ba:	a915      	add	r1, sp, #84	; 0x54
 800c7bc:	ec47 6b10 	vmov	d0, r6, r7
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fffa 	bl	800d7ba <__d2b>
 800c7c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c7ca:	9004      	str	r0, [sp, #16]
 800c7cc:	2d00      	cmp	r5, #0
 800c7ce:	d07c      	beq.n	800c8ca <_dtoa_r+0x1da>
 800c7d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c7d8:	46b2      	mov	sl, r6
 800c7da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c7de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c7e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4b8b      	ldr	r3, [pc, #556]	; (800ca18 <_dtoa_r+0x328>)
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	4659      	mov	r1, fp
 800c7ee:	f7f3 fd5b 	bl	80002a8 <__aeabi_dsub>
 800c7f2:	a381      	add	r3, pc, #516	; (adr r3, 800c9f8 <_dtoa_r+0x308>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	f7f3 ff0e 	bl	8000618 <__aeabi_dmul>
 800c7fc:	a380      	add	r3, pc, #512	; (adr r3, 800ca00 <_dtoa_r+0x310>)
 800c7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c802:	f7f3 fd53 	bl	80002ac <__adddf3>
 800c806:	4606      	mov	r6, r0
 800c808:	4628      	mov	r0, r5
 800c80a:	460f      	mov	r7, r1
 800c80c:	f7f3 fe9a 	bl	8000544 <__aeabi_i2d>
 800c810:	a37d      	add	r3, pc, #500	; (adr r3, 800ca08 <_dtoa_r+0x318>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f3 feff 	bl	8000618 <__aeabi_dmul>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	4630      	mov	r0, r6
 800c820:	4639      	mov	r1, r7
 800c822:	f7f3 fd43 	bl	80002ac <__adddf3>
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	f7f4 f9a5 	bl	8000b78 <__aeabi_d2iz>
 800c82e:	2200      	movs	r2, #0
 800c830:	4682      	mov	sl, r0
 800c832:	2300      	movs	r3, #0
 800c834:	4630      	mov	r0, r6
 800c836:	4639      	mov	r1, r7
 800c838:	f7f4 f960 	bl	8000afc <__aeabi_dcmplt>
 800c83c:	b148      	cbz	r0, 800c852 <_dtoa_r+0x162>
 800c83e:	4650      	mov	r0, sl
 800c840:	f7f3 fe80 	bl	8000544 <__aeabi_i2d>
 800c844:	4632      	mov	r2, r6
 800c846:	463b      	mov	r3, r7
 800c848:	f7f4 f94e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c84c:	b908      	cbnz	r0, 800c852 <_dtoa_r+0x162>
 800c84e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c852:	f1ba 0f16 	cmp.w	sl, #22
 800c856:	d859      	bhi.n	800c90c <_dtoa_r+0x21c>
 800c858:	4970      	ldr	r1, [pc, #448]	; (800ca1c <_dtoa_r+0x32c>)
 800c85a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c862:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c866:	f7f4 f967 	bl	8000b38 <__aeabi_dcmpgt>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d050      	beq.n	800c910 <_dtoa_r+0x220>
 800c86e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c872:	2300      	movs	r3, #0
 800c874:	930f      	str	r3, [sp, #60]	; 0x3c
 800c876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c878:	1b5d      	subs	r5, r3, r5
 800c87a:	f1b5 0801 	subs.w	r8, r5, #1
 800c87e:	bf49      	itett	mi
 800c880:	f1c5 0301 	rsbmi	r3, r5, #1
 800c884:	2300      	movpl	r3, #0
 800c886:	9305      	strmi	r3, [sp, #20]
 800c888:	f04f 0800 	movmi.w	r8, #0
 800c88c:	bf58      	it	pl
 800c88e:	9305      	strpl	r3, [sp, #20]
 800c890:	f1ba 0f00 	cmp.w	sl, #0
 800c894:	db3e      	blt.n	800c914 <_dtoa_r+0x224>
 800c896:	2300      	movs	r3, #0
 800c898:	44d0      	add	r8, sl
 800c89a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c89e:	9307      	str	r3, [sp, #28]
 800c8a0:	9b06      	ldr	r3, [sp, #24]
 800c8a2:	2b09      	cmp	r3, #9
 800c8a4:	f200 8090 	bhi.w	800c9c8 <_dtoa_r+0x2d8>
 800c8a8:	2b05      	cmp	r3, #5
 800c8aa:	bfc4      	itt	gt
 800c8ac:	3b04      	subgt	r3, #4
 800c8ae:	9306      	strgt	r3, [sp, #24]
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	f1a3 0302 	sub.w	r3, r3, #2
 800c8b6:	bfcc      	ite	gt
 800c8b8:	2500      	movgt	r5, #0
 800c8ba:	2501      	movle	r5, #1
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	f200 808f 	bhi.w	800c9e0 <_dtoa_r+0x2f0>
 800c8c2:	e8df f003 	tbb	[pc, r3]
 800c8c6:	7f7d      	.short	0x7f7d
 800c8c8:	7131      	.short	0x7131
 800c8ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c8ce:	441d      	add	r5, r3
 800c8d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c8d4:	2820      	cmp	r0, #32
 800c8d6:	dd13      	ble.n	800c900 <_dtoa_r+0x210>
 800c8d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	fa08 f800 	lsl.w	r8, r8, r0
 800c8e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c8e6:	fa23 f000 	lsr.w	r0, r3, r0
 800c8ea:	ea48 0000 	orr.w	r0, r8, r0
 800c8ee:	f7f3 fe19 	bl	8000524 <__aeabi_ui2d>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	4682      	mov	sl, r0
 800c8f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c8fa:	3d01      	subs	r5, #1
 800c8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c8fe:	e772      	b.n	800c7e6 <_dtoa_r+0xf6>
 800c900:	9b00      	ldr	r3, [sp, #0]
 800c902:	f1c0 0020 	rsb	r0, r0, #32
 800c906:	fa03 f000 	lsl.w	r0, r3, r0
 800c90a:	e7f0      	b.n	800c8ee <_dtoa_r+0x1fe>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e7b1      	b.n	800c874 <_dtoa_r+0x184>
 800c910:	900f      	str	r0, [sp, #60]	; 0x3c
 800c912:	e7b0      	b.n	800c876 <_dtoa_r+0x186>
 800c914:	9b05      	ldr	r3, [sp, #20]
 800c916:	eba3 030a 	sub.w	r3, r3, sl
 800c91a:	9305      	str	r3, [sp, #20]
 800c91c:	f1ca 0300 	rsb	r3, sl, #0
 800c920:	9307      	str	r3, [sp, #28]
 800c922:	2300      	movs	r3, #0
 800c924:	930e      	str	r3, [sp, #56]	; 0x38
 800c926:	e7bb      	b.n	800c8a0 <_dtoa_r+0x1b0>
 800c928:	2301      	movs	r3, #1
 800c92a:	930a      	str	r3, [sp, #40]	; 0x28
 800c92c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dd59      	ble.n	800c9e6 <_dtoa_r+0x2f6>
 800c932:	9302      	str	r3, [sp, #8]
 800c934:	4699      	mov	r9, r3
 800c936:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c938:	2200      	movs	r2, #0
 800c93a:	6072      	str	r2, [r6, #4]
 800c93c:	2204      	movs	r2, #4
 800c93e:	f102 0014 	add.w	r0, r2, #20
 800c942:	4298      	cmp	r0, r3
 800c944:	6871      	ldr	r1, [r6, #4]
 800c946:	d953      	bls.n	800c9f0 <_dtoa_r+0x300>
 800c948:	4620      	mov	r0, r4
 800c94a:	f000 fcaa 	bl	800d2a2 <_Balloc>
 800c94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c950:	6030      	str	r0, [r6, #0]
 800c952:	f1b9 0f0e 	cmp.w	r9, #14
 800c956:	f8d3 b000 	ldr.w	fp, [r3]
 800c95a:	f200 80e6 	bhi.w	800cb2a <_dtoa_r+0x43a>
 800c95e:	2d00      	cmp	r5, #0
 800c960:	f000 80e3 	beq.w	800cb2a <_dtoa_r+0x43a>
 800c964:	ed9d 7b00 	vldr	d7, [sp]
 800c968:	f1ba 0f00 	cmp.w	sl, #0
 800c96c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c970:	dd74      	ble.n	800ca5c <_dtoa_r+0x36c>
 800c972:	4a2a      	ldr	r2, [pc, #168]	; (800ca1c <_dtoa_r+0x32c>)
 800c974:	f00a 030f 	and.w	r3, sl, #15
 800c978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c97c:	ed93 7b00 	vldr	d7, [r3]
 800c980:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c984:	06f0      	lsls	r0, r6, #27
 800c986:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c98a:	d565      	bpl.n	800ca58 <_dtoa_r+0x368>
 800c98c:	4b24      	ldr	r3, [pc, #144]	; (800ca20 <_dtoa_r+0x330>)
 800c98e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c992:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c996:	f7f3 ff69 	bl	800086c <__aeabi_ddiv>
 800c99a:	e9cd 0100 	strd	r0, r1, [sp]
 800c99e:	f006 060f 	and.w	r6, r6, #15
 800c9a2:	2503      	movs	r5, #3
 800c9a4:	4f1e      	ldr	r7, [pc, #120]	; (800ca20 <_dtoa_r+0x330>)
 800c9a6:	e04c      	b.n	800ca42 <_dtoa_r+0x352>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9ae:	4453      	add	r3, sl
 800c9b0:	f103 0901 	add.w	r9, r3, #1
 800c9b4:	9302      	str	r3, [sp, #8]
 800c9b6:	464b      	mov	r3, r9
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	bfb8      	it	lt
 800c9bc:	2301      	movlt	r3, #1
 800c9be:	e7ba      	b.n	800c936 <_dtoa_r+0x246>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e7b2      	b.n	800c92a <_dtoa_r+0x23a>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e7f0      	b.n	800c9aa <_dtoa_r+0x2ba>
 800c9c8:	2501      	movs	r5, #1
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9306      	str	r3, [sp, #24]
 800c9ce:	950a      	str	r5, [sp, #40]	; 0x28
 800c9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d4:	9302      	str	r3, [sp, #8]
 800c9d6:	4699      	mov	r9, r3
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2312      	movs	r3, #18
 800c9dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9de:	e7aa      	b.n	800c936 <_dtoa_r+0x246>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e4:	e7f4      	b.n	800c9d0 <_dtoa_r+0x2e0>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	9302      	str	r3, [sp, #8]
 800c9ea:	4699      	mov	r9, r3
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	e7f5      	b.n	800c9dc <_dtoa_r+0x2ec>
 800c9f0:	3101      	adds	r1, #1
 800c9f2:	6071      	str	r1, [r6, #4]
 800c9f4:	0052      	lsls	r2, r2, #1
 800c9f6:	e7a2      	b.n	800c93e <_dtoa_r+0x24e>
 800c9f8:	636f4361 	.word	0x636f4361
 800c9fc:	3fd287a7 	.word	0x3fd287a7
 800ca00:	8b60c8b3 	.word	0x8b60c8b3
 800ca04:	3fc68a28 	.word	0x3fc68a28
 800ca08:	509f79fb 	.word	0x509f79fb
 800ca0c:	3fd34413 	.word	0x3fd34413
 800ca10:	7ff00000 	.word	0x7ff00000
 800ca14:	0800e1f1 	.word	0x0800e1f1
 800ca18:	3ff80000 	.word	0x3ff80000
 800ca1c:	0800e250 	.word	0x0800e250
 800ca20:	0800e228 	.word	0x0800e228
 800ca24:	0800e21d 	.word	0x0800e21d
 800ca28:	07f1      	lsls	r1, r6, #31
 800ca2a:	d508      	bpl.n	800ca3e <_dtoa_r+0x34e>
 800ca2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca34:	f7f3 fdf0 	bl	8000618 <__aeabi_dmul>
 800ca38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca3c:	3501      	adds	r5, #1
 800ca3e:	1076      	asrs	r6, r6, #1
 800ca40:	3708      	adds	r7, #8
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	d1f0      	bne.n	800ca28 <_dtoa_r+0x338>
 800ca46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ca4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca4e:	f7f3 ff0d 	bl	800086c <__aeabi_ddiv>
 800ca52:	e9cd 0100 	strd	r0, r1, [sp]
 800ca56:	e01a      	b.n	800ca8e <_dtoa_r+0x39e>
 800ca58:	2502      	movs	r5, #2
 800ca5a:	e7a3      	b.n	800c9a4 <_dtoa_r+0x2b4>
 800ca5c:	f000 80a0 	beq.w	800cba0 <_dtoa_r+0x4b0>
 800ca60:	f1ca 0600 	rsb	r6, sl, #0
 800ca64:	4b9f      	ldr	r3, [pc, #636]	; (800cce4 <_dtoa_r+0x5f4>)
 800ca66:	4fa0      	ldr	r7, [pc, #640]	; (800cce8 <_dtoa_r+0x5f8>)
 800ca68:	f006 020f 	and.w	r2, r6, #15
 800ca6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca78:	f7f3 fdce 	bl	8000618 <__aeabi_dmul>
 800ca7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ca80:	1136      	asrs	r6, r6, #4
 800ca82:	2300      	movs	r3, #0
 800ca84:	2502      	movs	r5, #2
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	d17f      	bne.n	800cb8a <_dtoa_r+0x49a>
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e1      	bne.n	800ca52 <_dtoa_r+0x362>
 800ca8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	f000 8087 	beq.w	800cba4 <_dtoa_r+0x4b4>
 800ca96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	4b93      	ldr	r3, [pc, #588]	; (800ccec <_dtoa_r+0x5fc>)
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f4 f82b 	bl	8000afc <__aeabi_dcmplt>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d07c      	beq.n	800cba4 <_dtoa_r+0x4b4>
 800caaa:	f1b9 0f00 	cmp.w	r9, #0
 800caae:	d079      	beq.n	800cba4 <_dtoa_r+0x4b4>
 800cab0:	9b02      	ldr	r3, [sp, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	dd35      	ble.n	800cb22 <_dtoa_r+0x432>
 800cab6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800caba:	9308      	str	r3, [sp, #32]
 800cabc:	4639      	mov	r1, r7
 800cabe:	2200      	movs	r2, #0
 800cac0:	4b8b      	ldr	r3, [pc, #556]	; (800ccf0 <_dtoa_r+0x600>)
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7f3 fda8 	bl	8000618 <__aeabi_dmul>
 800cac8:	e9cd 0100 	strd	r0, r1, [sp]
 800cacc:	9f02      	ldr	r7, [sp, #8]
 800cace:	3501      	adds	r5, #1
 800cad0:	4628      	mov	r0, r5
 800cad2:	f7f3 fd37 	bl	8000544 <__aeabi_i2d>
 800cad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cada:	f7f3 fd9d 	bl	8000618 <__aeabi_dmul>
 800cade:	2200      	movs	r2, #0
 800cae0:	4b84      	ldr	r3, [pc, #528]	; (800ccf4 <_dtoa_r+0x604>)
 800cae2:	f7f3 fbe3 	bl	80002ac <__adddf3>
 800cae6:	4605      	mov	r5, r0
 800cae8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800caec:	2f00      	cmp	r7, #0
 800caee:	d15d      	bne.n	800cbac <_dtoa_r+0x4bc>
 800caf0:	2200      	movs	r2, #0
 800caf2:	4b81      	ldr	r3, [pc, #516]	; (800ccf8 <_dtoa_r+0x608>)
 800caf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caf8:	f7f3 fbd6 	bl	80002a8 <__aeabi_dsub>
 800cafc:	462a      	mov	r2, r5
 800cafe:	4633      	mov	r3, r6
 800cb00:	e9cd 0100 	strd	r0, r1, [sp]
 800cb04:	f7f4 f818 	bl	8000b38 <__aeabi_dcmpgt>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	f040 8288 	bne.w	800d01e <_dtoa_r+0x92e>
 800cb0e:	462a      	mov	r2, r5
 800cb10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb18:	f7f3 fff0 	bl	8000afc <__aeabi_dcmplt>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f040 827c 	bne.w	800d01a <_dtoa_r+0x92a>
 800cb22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb26:	e9cd 2300 	strd	r2, r3, [sp]
 800cb2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f2c0 8150 	blt.w	800cdd2 <_dtoa_r+0x6e2>
 800cb32:	f1ba 0f0e 	cmp.w	sl, #14
 800cb36:	f300 814c 	bgt.w	800cdd2 <_dtoa_r+0x6e2>
 800cb3a:	4b6a      	ldr	r3, [pc, #424]	; (800cce4 <_dtoa_r+0x5f4>)
 800cb3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb40:	ed93 7b00 	vldr	d7, [r3]
 800cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb4c:	f280 80d8 	bge.w	800cd00 <_dtoa_r+0x610>
 800cb50:	f1b9 0f00 	cmp.w	r9, #0
 800cb54:	f300 80d4 	bgt.w	800cd00 <_dtoa_r+0x610>
 800cb58:	f040 825e 	bne.w	800d018 <_dtoa_r+0x928>
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4b66      	ldr	r3, [pc, #408]	; (800ccf8 <_dtoa_r+0x608>)
 800cb60:	ec51 0b17 	vmov	r0, r1, d7
 800cb64:	f7f3 fd58 	bl	8000618 <__aeabi_dmul>
 800cb68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb6c:	f7f3 ffda 	bl	8000b24 <__aeabi_dcmpge>
 800cb70:	464f      	mov	r7, r9
 800cb72:	464e      	mov	r6, r9
 800cb74:	2800      	cmp	r0, #0
 800cb76:	f040 8234 	bne.w	800cfe2 <_dtoa_r+0x8f2>
 800cb7a:	2331      	movs	r3, #49	; 0x31
 800cb7c:	f10b 0501 	add.w	r5, fp, #1
 800cb80:	f88b 3000 	strb.w	r3, [fp]
 800cb84:	f10a 0a01 	add.w	sl, sl, #1
 800cb88:	e22f      	b.n	800cfea <_dtoa_r+0x8fa>
 800cb8a:	07f2      	lsls	r2, r6, #31
 800cb8c:	d505      	bpl.n	800cb9a <_dtoa_r+0x4aa>
 800cb8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb92:	f7f3 fd41 	bl	8000618 <__aeabi_dmul>
 800cb96:	3501      	adds	r5, #1
 800cb98:	2301      	movs	r3, #1
 800cb9a:	1076      	asrs	r6, r6, #1
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	e772      	b.n	800ca86 <_dtoa_r+0x396>
 800cba0:	2502      	movs	r5, #2
 800cba2:	e774      	b.n	800ca8e <_dtoa_r+0x39e>
 800cba4:	f8cd a020 	str.w	sl, [sp, #32]
 800cba8:	464f      	mov	r7, r9
 800cbaa:	e791      	b.n	800cad0 <_dtoa_r+0x3e0>
 800cbac:	4b4d      	ldr	r3, [pc, #308]	; (800cce4 <_dtoa_r+0x5f4>)
 800cbae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d047      	beq.n	800cc4c <_dtoa_r+0x55c>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	494e      	ldr	r1, [pc, #312]	; (800ccfc <_dtoa_r+0x60c>)
 800cbc4:	f7f3 fe52 	bl	800086c <__aeabi_ddiv>
 800cbc8:	462a      	mov	r2, r5
 800cbca:	4633      	mov	r3, r6
 800cbcc:	f7f3 fb6c 	bl	80002a8 <__aeabi_dsub>
 800cbd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cbd4:	465d      	mov	r5, fp
 800cbd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbda:	f7f3 ffcd 	bl	8000b78 <__aeabi_d2iz>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	f7f3 fcb0 	bl	8000544 <__aeabi_i2d>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbec:	f7f3 fb5c 	bl	80002a8 <__aeabi_dsub>
 800cbf0:	3630      	adds	r6, #48	; 0x30
 800cbf2:	f805 6b01 	strb.w	r6, [r5], #1
 800cbf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cbfa:	e9cd 0100 	strd	r0, r1, [sp]
 800cbfe:	f7f3 ff7d 	bl	8000afc <__aeabi_dcmplt>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d163      	bne.n	800ccce <_dtoa_r+0x5de>
 800cc06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	4937      	ldr	r1, [pc, #220]	; (800ccec <_dtoa_r+0x5fc>)
 800cc0e:	f7f3 fb4b 	bl	80002a8 <__aeabi_dsub>
 800cc12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc16:	f7f3 ff71 	bl	8000afc <__aeabi_dcmplt>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f040 80b7 	bne.w	800cd8e <_dtoa_r+0x69e>
 800cc20:	eba5 030b 	sub.w	r3, r5, fp
 800cc24:	429f      	cmp	r7, r3
 800cc26:	f77f af7c 	ble.w	800cb22 <_dtoa_r+0x432>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	4b30      	ldr	r3, [pc, #192]	; (800ccf0 <_dtoa_r+0x600>)
 800cc2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc32:	f7f3 fcf1 	bl	8000618 <__aeabi_dmul>
 800cc36:	2200      	movs	r2, #0
 800cc38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc3c:	4b2c      	ldr	r3, [pc, #176]	; (800ccf0 <_dtoa_r+0x600>)
 800cc3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc42:	f7f3 fce9 	bl	8000618 <__aeabi_dmul>
 800cc46:	e9cd 0100 	strd	r0, r1, [sp]
 800cc4a:	e7c4      	b.n	800cbd6 <_dtoa_r+0x4e6>
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4633      	mov	r3, r6
 800cc50:	f7f3 fce2 	bl	8000618 <__aeabi_dmul>
 800cc54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc58:	eb0b 0507 	add.w	r5, fp, r7
 800cc5c:	465e      	mov	r6, fp
 800cc5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc62:	f7f3 ff89 	bl	8000b78 <__aeabi_d2iz>
 800cc66:	4607      	mov	r7, r0
 800cc68:	f7f3 fc6c 	bl	8000544 <__aeabi_i2d>
 800cc6c:	3730      	adds	r7, #48	; 0x30
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc76:	f7f3 fb17 	bl	80002a8 <__aeabi_dsub>
 800cc7a:	f806 7b01 	strb.w	r7, [r6], #1
 800cc7e:	42ae      	cmp	r6, r5
 800cc80:	e9cd 0100 	strd	r0, r1, [sp]
 800cc84:	f04f 0200 	mov.w	r2, #0
 800cc88:	d126      	bne.n	800ccd8 <_dtoa_r+0x5e8>
 800cc8a:	4b1c      	ldr	r3, [pc, #112]	; (800ccfc <_dtoa_r+0x60c>)
 800cc8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc90:	f7f3 fb0c 	bl	80002ac <__adddf3>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc9c:	f7f3 ff4c 	bl	8000b38 <__aeabi_dcmpgt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d174      	bne.n	800cd8e <_dtoa_r+0x69e>
 800cca4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cca8:	2000      	movs	r0, #0
 800ccaa:	4914      	ldr	r1, [pc, #80]	; (800ccfc <_dtoa_r+0x60c>)
 800ccac:	f7f3 fafc 	bl	80002a8 <__aeabi_dsub>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb8:	f7f3 ff20 	bl	8000afc <__aeabi_dcmplt>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	f43f af30 	beq.w	800cb22 <_dtoa_r+0x432>
 800ccc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccc6:	2b30      	cmp	r3, #48	; 0x30
 800ccc8:	f105 32ff 	add.w	r2, r5, #4294967295
 800cccc:	d002      	beq.n	800ccd4 <_dtoa_r+0x5e4>
 800ccce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ccd2:	e04a      	b.n	800cd6a <_dtoa_r+0x67a>
 800ccd4:	4615      	mov	r5, r2
 800ccd6:	e7f4      	b.n	800ccc2 <_dtoa_r+0x5d2>
 800ccd8:	4b05      	ldr	r3, [pc, #20]	; (800ccf0 <_dtoa_r+0x600>)
 800ccda:	f7f3 fc9d 	bl	8000618 <__aeabi_dmul>
 800ccde:	e9cd 0100 	strd	r0, r1, [sp]
 800cce2:	e7bc      	b.n	800cc5e <_dtoa_r+0x56e>
 800cce4:	0800e250 	.word	0x0800e250
 800cce8:	0800e228 	.word	0x0800e228
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	40240000 	.word	0x40240000
 800ccf4:	401c0000 	.word	0x401c0000
 800ccf8:	40140000 	.word	0x40140000
 800ccfc:	3fe00000 	.word	0x3fe00000
 800cd00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd04:	465d      	mov	r5, fp
 800cd06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	f7f3 fdad 	bl	800086c <__aeabi_ddiv>
 800cd12:	f7f3 ff31 	bl	8000b78 <__aeabi_d2iz>
 800cd16:	4680      	mov	r8, r0
 800cd18:	f7f3 fc14 	bl	8000544 <__aeabi_i2d>
 800cd1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd20:	f7f3 fc7a 	bl	8000618 <__aeabi_dmul>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cd30:	f7f3 faba 	bl	80002a8 <__aeabi_dsub>
 800cd34:	f805 6b01 	strb.w	r6, [r5], #1
 800cd38:	eba5 060b 	sub.w	r6, r5, fp
 800cd3c:	45b1      	cmp	r9, r6
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	d139      	bne.n	800cdb8 <_dtoa_r+0x6c8>
 800cd44:	f7f3 fab2 	bl	80002ac <__adddf3>
 800cd48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd4c:	4606      	mov	r6, r0
 800cd4e:	460f      	mov	r7, r1
 800cd50:	f7f3 fef2 	bl	8000b38 <__aeabi_dcmpgt>
 800cd54:	b9c8      	cbnz	r0, 800cd8a <_dtoa_r+0x69a>
 800cd56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd62:	b110      	cbz	r0, 800cd6a <_dtoa_r+0x67a>
 800cd64:	f018 0f01 	tst.w	r8, #1
 800cd68:	d10f      	bne.n	800cd8a <_dtoa_r+0x69a>
 800cd6a:	9904      	ldr	r1, [sp, #16]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f000 facc 	bl	800d30a <_Bfree>
 800cd72:	2300      	movs	r3, #0
 800cd74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd76:	702b      	strb	r3, [r5, #0]
 800cd78:	f10a 0301 	add.w	r3, sl, #1
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 8241 	beq.w	800d208 <_dtoa_r+0xb18>
 800cd86:	601d      	str	r5, [r3, #0]
 800cd88:	e23e      	b.n	800d208 <_dtoa_r+0xb18>
 800cd8a:	f8cd a020 	str.w	sl, [sp, #32]
 800cd8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd92:	2a39      	cmp	r2, #57	; 0x39
 800cd94:	f105 33ff 	add.w	r3, r5, #4294967295
 800cd98:	d108      	bne.n	800cdac <_dtoa_r+0x6bc>
 800cd9a:	459b      	cmp	fp, r3
 800cd9c:	d10a      	bne.n	800cdb4 <_dtoa_r+0x6c4>
 800cd9e:	9b08      	ldr	r3, [sp, #32]
 800cda0:	3301      	adds	r3, #1
 800cda2:	9308      	str	r3, [sp, #32]
 800cda4:	2330      	movs	r3, #48	; 0x30
 800cda6:	f88b 3000 	strb.w	r3, [fp]
 800cdaa:	465b      	mov	r3, fp
 800cdac:	781a      	ldrb	r2, [r3, #0]
 800cdae:	3201      	adds	r2, #1
 800cdb0:	701a      	strb	r2, [r3, #0]
 800cdb2:	e78c      	b.n	800ccce <_dtoa_r+0x5de>
 800cdb4:	461d      	mov	r5, r3
 800cdb6:	e7ea      	b.n	800cd8e <_dtoa_r+0x69e>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	4b9b      	ldr	r3, [pc, #620]	; (800d028 <_dtoa_r+0x938>)
 800cdbc:	f7f3 fc2c 	bl	8000618 <__aeabi_dmul>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	f7f3 fe8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d09a      	beq.n	800cd06 <_dtoa_r+0x616>
 800cdd0:	e7cb      	b.n	800cd6a <_dtoa_r+0x67a>
 800cdd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdd4:	2a00      	cmp	r2, #0
 800cdd6:	f000 808b 	beq.w	800cef0 <_dtoa_r+0x800>
 800cdda:	9a06      	ldr	r2, [sp, #24]
 800cddc:	2a01      	cmp	r2, #1
 800cdde:	dc6e      	bgt.n	800cebe <_dtoa_r+0x7ce>
 800cde0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cde2:	2a00      	cmp	r2, #0
 800cde4:	d067      	beq.n	800ceb6 <_dtoa_r+0x7c6>
 800cde6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdea:	9f07      	ldr	r7, [sp, #28]
 800cdec:	9d05      	ldr	r5, [sp, #20]
 800cdee:	9a05      	ldr	r2, [sp, #20]
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	441a      	add	r2, r3
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	9205      	str	r2, [sp, #20]
 800cdf8:	4498      	add	r8, r3
 800cdfa:	f000 fb26 	bl	800d44a <__i2b>
 800cdfe:	4606      	mov	r6, r0
 800ce00:	2d00      	cmp	r5, #0
 800ce02:	dd0c      	ble.n	800ce1e <_dtoa_r+0x72e>
 800ce04:	f1b8 0f00 	cmp.w	r8, #0
 800ce08:	dd09      	ble.n	800ce1e <_dtoa_r+0x72e>
 800ce0a:	4545      	cmp	r5, r8
 800ce0c:	9a05      	ldr	r2, [sp, #20]
 800ce0e:	462b      	mov	r3, r5
 800ce10:	bfa8      	it	ge
 800ce12:	4643      	movge	r3, r8
 800ce14:	1ad2      	subs	r2, r2, r3
 800ce16:	9205      	str	r2, [sp, #20]
 800ce18:	1aed      	subs	r5, r5, r3
 800ce1a:	eba8 0803 	sub.w	r8, r8, r3
 800ce1e:	9b07      	ldr	r3, [sp, #28]
 800ce20:	b1eb      	cbz	r3, 800ce5e <_dtoa_r+0x76e>
 800ce22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d067      	beq.n	800cef8 <_dtoa_r+0x808>
 800ce28:	b18f      	cbz	r7, 800ce4e <_dtoa_r+0x75e>
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	463a      	mov	r2, r7
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 fbaa 	bl	800d588 <__pow5mult>
 800ce34:	9a04      	ldr	r2, [sp, #16]
 800ce36:	4601      	mov	r1, r0
 800ce38:	4606      	mov	r6, r0
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fb0e 	bl	800d45c <__multiply>
 800ce40:	9904      	ldr	r1, [sp, #16]
 800ce42:	9008      	str	r0, [sp, #32]
 800ce44:	4620      	mov	r0, r4
 800ce46:	f000 fa60 	bl	800d30a <_Bfree>
 800ce4a:	9b08      	ldr	r3, [sp, #32]
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	9b07      	ldr	r3, [sp, #28]
 800ce50:	1bda      	subs	r2, r3, r7
 800ce52:	d004      	beq.n	800ce5e <_dtoa_r+0x76e>
 800ce54:	9904      	ldr	r1, [sp, #16]
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fb96 	bl	800d588 <__pow5mult>
 800ce5c:	9004      	str	r0, [sp, #16]
 800ce5e:	2101      	movs	r1, #1
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 faf2 	bl	800d44a <__i2b>
 800ce66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce68:	4607      	mov	r7, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 81d0 	beq.w	800d210 <_dtoa_r+0xb20>
 800ce70:	461a      	mov	r2, r3
 800ce72:	4601      	mov	r1, r0
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 fb87 	bl	800d588 <__pow5mult>
 800ce7a:	9b06      	ldr	r3, [sp, #24]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	4607      	mov	r7, r0
 800ce80:	dc40      	bgt.n	800cf04 <_dtoa_r+0x814>
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d139      	bne.n	800cefc <_dtoa_r+0x80c>
 800ce88:	9b01      	ldr	r3, [sp, #4]
 800ce8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d136      	bne.n	800cf00 <_dtoa_r+0x810>
 800ce92:	9b01      	ldr	r3, [sp, #4]
 800ce94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce98:	0d1b      	lsrs	r3, r3, #20
 800ce9a:	051b      	lsls	r3, r3, #20
 800ce9c:	b12b      	cbz	r3, 800ceaa <_dtoa_r+0x7ba>
 800ce9e:	9b05      	ldr	r3, [sp, #20]
 800cea0:	3301      	adds	r3, #1
 800cea2:	9305      	str	r3, [sp, #20]
 800cea4:	f108 0801 	add.w	r8, r8, #1
 800cea8:	2301      	movs	r3, #1
 800ceaa:	9307      	str	r3, [sp, #28]
 800ceac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d12a      	bne.n	800cf08 <_dtoa_r+0x818>
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	e030      	b.n	800cf18 <_dtoa_r+0x828>
 800ceb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ceb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cebc:	e795      	b.n	800cdea <_dtoa_r+0x6fa>
 800cebe:	9b07      	ldr	r3, [sp, #28]
 800cec0:	f109 37ff 	add.w	r7, r9, #4294967295
 800cec4:	42bb      	cmp	r3, r7
 800cec6:	bfbf      	itttt	lt
 800cec8:	9b07      	ldrlt	r3, [sp, #28]
 800ceca:	9707      	strlt	r7, [sp, #28]
 800cecc:	1afa      	sublt	r2, r7, r3
 800cece:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ced0:	bfbb      	ittet	lt
 800ced2:	189b      	addlt	r3, r3, r2
 800ced4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ced6:	1bdf      	subge	r7, r3, r7
 800ced8:	2700      	movlt	r7, #0
 800ceda:	f1b9 0f00 	cmp.w	r9, #0
 800cede:	bfb5      	itete	lt
 800cee0:	9b05      	ldrlt	r3, [sp, #20]
 800cee2:	9d05      	ldrge	r5, [sp, #20]
 800cee4:	eba3 0509 	sublt.w	r5, r3, r9
 800cee8:	464b      	movge	r3, r9
 800ceea:	bfb8      	it	lt
 800ceec:	2300      	movlt	r3, #0
 800ceee:	e77e      	b.n	800cdee <_dtoa_r+0x6fe>
 800cef0:	9f07      	ldr	r7, [sp, #28]
 800cef2:	9d05      	ldr	r5, [sp, #20]
 800cef4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cef6:	e783      	b.n	800ce00 <_dtoa_r+0x710>
 800cef8:	9a07      	ldr	r2, [sp, #28]
 800cefa:	e7ab      	b.n	800ce54 <_dtoa_r+0x764>
 800cefc:	2300      	movs	r3, #0
 800cefe:	e7d4      	b.n	800ceaa <_dtoa_r+0x7ba>
 800cf00:	9b00      	ldr	r3, [sp, #0]
 800cf02:	e7d2      	b.n	800ceaa <_dtoa_r+0x7ba>
 800cf04:	2300      	movs	r3, #0
 800cf06:	9307      	str	r3, [sp, #28]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf0e:	6918      	ldr	r0, [r3, #16]
 800cf10:	f000 fa4d 	bl	800d3ae <__hi0bits>
 800cf14:	f1c0 0020 	rsb	r0, r0, #32
 800cf18:	4440      	add	r0, r8
 800cf1a:	f010 001f 	ands.w	r0, r0, #31
 800cf1e:	d047      	beq.n	800cfb0 <_dtoa_r+0x8c0>
 800cf20:	f1c0 0320 	rsb	r3, r0, #32
 800cf24:	2b04      	cmp	r3, #4
 800cf26:	dd3b      	ble.n	800cfa0 <_dtoa_r+0x8b0>
 800cf28:	9b05      	ldr	r3, [sp, #20]
 800cf2a:	f1c0 001c 	rsb	r0, r0, #28
 800cf2e:	4403      	add	r3, r0
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	4405      	add	r5, r0
 800cf34:	4480      	add	r8, r0
 800cf36:	9b05      	ldr	r3, [sp, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dd05      	ble.n	800cf48 <_dtoa_r+0x858>
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	9904      	ldr	r1, [sp, #16]
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fb6f 	bl	800d624 <__lshift>
 800cf46:	9004      	str	r0, [sp, #16]
 800cf48:	f1b8 0f00 	cmp.w	r8, #0
 800cf4c:	dd05      	ble.n	800cf5a <_dtoa_r+0x86a>
 800cf4e:	4639      	mov	r1, r7
 800cf50:	4642      	mov	r2, r8
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 fb66 	bl	800d624 <__lshift>
 800cf58:	4607      	mov	r7, r0
 800cf5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf5c:	b353      	cbz	r3, 800cfb4 <_dtoa_r+0x8c4>
 800cf5e:	4639      	mov	r1, r7
 800cf60:	9804      	ldr	r0, [sp, #16]
 800cf62:	f000 fbb3 	bl	800d6cc <__mcmp>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	da24      	bge.n	800cfb4 <_dtoa_r+0x8c4>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	220a      	movs	r2, #10
 800cf6e:	9904      	ldr	r1, [sp, #16]
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 f9e1 	bl	800d338 <__multadd>
 800cf76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf78:	9004      	str	r0, [sp, #16]
 800cf7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f000 814d 	beq.w	800d21e <_dtoa_r+0xb2e>
 800cf84:	2300      	movs	r3, #0
 800cf86:	4631      	mov	r1, r6
 800cf88:	220a      	movs	r2, #10
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 f9d4 	bl	800d338 <__multadd>
 800cf90:	9b02      	ldr	r3, [sp, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	4606      	mov	r6, r0
 800cf96:	dc4f      	bgt.n	800d038 <_dtoa_r+0x948>
 800cf98:	9b06      	ldr	r3, [sp, #24]
 800cf9a:	2b02      	cmp	r3, #2
 800cf9c:	dd4c      	ble.n	800d038 <_dtoa_r+0x948>
 800cf9e:	e011      	b.n	800cfc4 <_dtoa_r+0x8d4>
 800cfa0:	d0c9      	beq.n	800cf36 <_dtoa_r+0x846>
 800cfa2:	9a05      	ldr	r2, [sp, #20]
 800cfa4:	331c      	adds	r3, #28
 800cfa6:	441a      	add	r2, r3
 800cfa8:	9205      	str	r2, [sp, #20]
 800cfaa:	441d      	add	r5, r3
 800cfac:	4498      	add	r8, r3
 800cfae:	e7c2      	b.n	800cf36 <_dtoa_r+0x846>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	e7f6      	b.n	800cfa2 <_dtoa_r+0x8b2>
 800cfb4:	f1b9 0f00 	cmp.w	r9, #0
 800cfb8:	dc38      	bgt.n	800d02c <_dtoa_r+0x93c>
 800cfba:	9b06      	ldr	r3, [sp, #24]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	dd35      	ble.n	800d02c <_dtoa_r+0x93c>
 800cfc0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfc4:	9b02      	ldr	r3, [sp, #8]
 800cfc6:	b963      	cbnz	r3, 800cfe2 <_dtoa_r+0x8f2>
 800cfc8:	4639      	mov	r1, r7
 800cfca:	2205      	movs	r2, #5
 800cfcc:	4620      	mov	r0, r4
 800cfce:	f000 f9b3 	bl	800d338 <__multadd>
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	4607      	mov	r7, r0
 800cfd6:	9804      	ldr	r0, [sp, #16]
 800cfd8:	f000 fb78 	bl	800d6cc <__mcmp>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	f73f adcc 	bgt.w	800cb7a <_dtoa_r+0x48a>
 800cfe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfe4:	465d      	mov	r5, fp
 800cfe6:	ea6f 0a03 	mvn.w	sl, r3
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	4639      	mov	r1, r7
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 f98a 	bl	800d30a <_Bfree>
 800cff6:	2e00      	cmp	r6, #0
 800cff8:	f43f aeb7 	beq.w	800cd6a <_dtoa_r+0x67a>
 800cffc:	f1b9 0f00 	cmp.w	r9, #0
 800d000:	d005      	beq.n	800d00e <_dtoa_r+0x91e>
 800d002:	45b1      	cmp	r9, r6
 800d004:	d003      	beq.n	800d00e <_dtoa_r+0x91e>
 800d006:	4649      	mov	r1, r9
 800d008:	4620      	mov	r0, r4
 800d00a:	f000 f97e 	bl	800d30a <_Bfree>
 800d00e:	4631      	mov	r1, r6
 800d010:	4620      	mov	r0, r4
 800d012:	f000 f97a 	bl	800d30a <_Bfree>
 800d016:	e6a8      	b.n	800cd6a <_dtoa_r+0x67a>
 800d018:	2700      	movs	r7, #0
 800d01a:	463e      	mov	r6, r7
 800d01c:	e7e1      	b.n	800cfe2 <_dtoa_r+0x8f2>
 800d01e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d022:	463e      	mov	r6, r7
 800d024:	e5a9      	b.n	800cb7a <_dtoa_r+0x48a>
 800d026:	bf00      	nop
 800d028:	40240000 	.word	0x40240000
 800d02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d02e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	f000 80fa 	beq.w	800d22c <_dtoa_r+0xb3c>
 800d038:	2d00      	cmp	r5, #0
 800d03a:	dd05      	ble.n	800d048 <_dtoa_r+0x958>
 800d03c:	4631      	mov	r1, r6
 800d03e:	462a      	mov	r2, r5
 800d040:	4620      	mov	r0, r4
 800d042:	f000 faef 	bl	800d624 <__lshift>
 800d046:	4606      	mov	r6, r0
 800d048:	9b07      	ldr	r3, [sp, #28]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d04c      	beq.n	800d0e8 <_dtoa_r+0x9f8>
 800d04e:	6871      	ldr	r1, [r6, #4]
 800d050:	4620      	mov	r0, r4
 800d052:	f000 f926 	bl	800d2a2 <_Balloc>
 800d056:	6932      	ldr	r2, [r6, #16]
 800d058:	3202      	adds	r2, #2
 800d05a:	4605      	mov	r5, r0
 800d05c:	0092      	lsls	r2, r2, #2
 800d05e:	f106 010c 	add.w	r1, r6, #12
 800d062:	300c      	adds	r0, #12
 800d064:	f000 f912 	bl	800d28c <memcpy>
 800d068:	2201      	movs	r2, #1
 800d06a:	4629      	mov	r1, r5
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 fad9 	bl	800d624 <__lshift>
 800d072:	9b00      	ldr	r3, [sp, #0]
 800d074:	f8cd b014 	str.w	fp, [sp, #20]
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	46b1      	mov	r9, r6
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	4606      	mov	r6, r0
 800d082:	4639      	mov	r1, r7
 800d084:	9804      	ldr	r0, [sp, #16]
 800d086:	f7ff faa4 	bl	800c5d2 <quorem>
 800d08a:	4649      	mov	r1, r9
 800d08c:	4605      	mov	r5, r0
 800d08e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d092:	9804      	ldr	r0, [sp, #16]
 800d094:	f000 fb1a 	bl	800d6cc <__mcmp>
 800d098:	4632      	mov	r2, r6
 800d09a:	9000      	str	r0, [sp, #0]
 800d09c:	4639      	mov	r1, r7
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 fb2e 	bl	800d700 <__mdiff>
 800d0a4:	68c3      	ldr	r3, [r0, #12]
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	bb03      	cbnz	r3, 800d0ec <_dtoa_r+0x9fc>
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	9008      	str	r0, [sp, #32]
 800d0ae:	9804      	ldr	r0, [sp, #16]
 800d0b0:	f000 fb0c 	bl	800d6cc <__mcmp>
 800d0b4:	9a08      	ldr	r2, [sp, #32]
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	9308      	str	r3, [sp, #32]
 800d0be:	f000 f924 	bl	800d30a <_Bfree>
 800d0c2:	9b08      	ldr	r3, [sp, #32]
 800d0c4:	b9a3      	cbnz	r3, 800d0f0 <_dtoa_r+0xa00>
 800d0c6:	9a06      	ldr	r2, [sp, #24]
 800d0c8:	b992      	cbnz	r2, 800d0f0 <_dtoa_r+0xa00>
 800d0ca:	9a07      	ldr	r2, [sp, #28]
 800d0cc:	b982      	cbnz	r2, 800d0f0 <_dtoa_r+0xa00>
 800d0ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0d2:	d029      	beq.n	800d128 <_dtoa_r+0xa38>
 800d0d4:	9b00      	ldr	r3, [sp, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	dd01      	ble.n	800d0de <_dtoa_r+0x9ee>
 800d0da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d0de:	9b05      	ldr	r3, [sp, #20]
 800d0e0:	1c5d      	adds	r5, r3, #1
 800d0e2:	f883 8000 	strb.w	r8, [r3]
 800d0e6:	e782      	b.n	800cfee <_dtoa_r+0x8fe>
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	e7c2      	b.n	800d072 <_dtoa_r+0x982>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e7e3      	b.n	800d0b8 <_dtoa_r+0x9c8>
 800d0f0:	9a00      	ldr	r2, [sp, #0]
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	db04      	blt.n	800d100 <_dtoa_r+0xa10>
 800d0f6:	d125      	bne.n	800d144 <_dtoa_r+0xa54>
 800d0f8:	9a06      	ldr	r2, [sp, #24]
 800d0fa:	bb1a      	cbnz	r2, 800d144 <_dtoa_r+0xa54>
 800d0fc:	9a07      	ldr	r2, [sp, #28]
 800d0fe:	bb0a      	cbnz	r2, 800d144 <_dtoa_r+0xa54>
 800d100:	2b00      	cmp	r3, #0
 800d102:	ddec      	ble.n	800d0de <_dtoa_r+0x9ee>
 800d104:	2201      	movs	r2, #1
 800d106:	9904      	ldr	r1, [sp, #16]
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fa8b 	bl	800d624 <__lshift>
 800d10e:	4639      	mov	r1, r7
 800d110:	9004      	str	r0, [sp, #16]
 800d112:	f000 fadb 	bl	800d6cc <__mcmp>
 800d116:	2800      	cmp	r0, #0
 800d118:	dc03      	bgt.n	800d122 <_dtoa_r+0xa32>
 800d11a:	d1e0      	bne.n	800d0de <_dtoa_r+0x9ee>
 800d11c:	f018 0f01 	tst.w	r8, #1
 800d120:	d0dd      	beq.n	800d0de <_dtoa_r+0x9ee>
 800d122:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d126:	d1d8      	bne.n	800d0da <_dtoa_r+0x9ea>
 800d128:	9b05      	ldr	r3, [sp, #20]
 800d12a:	9a05      	ldr	r2, [sp, #20]
 800d12c:	1c5d      	adds	r5, r3, #1
 800d12e:	2339      	movs	r3, #57	; 0x39
 800d130:	7013      	strb	r3, [r2, #0]
 800d132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d136:	2b39      	cmp	r3, #57	; 0x39
 800d138:	f105 32ff 	add.w	r2, r5, #4294967295
 800d13c:	d04f      	beq.n	800d1de <_dtoa_r+0xaee>
 800d13e:	3301      	adds	r3, #1
 800d140:	7013      	strb	r3, [r2, #0]
 800d142:	e754      	b.n	800cfee <_dtoa_r+0x8fe>
 800d144:	9a05      	ldr	r2, [sp, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	f102 0501 	add.w	r5, r2, #1
 800d14c:	dd06      	ble.n	800d15c <_dtoa_r+0xa6c>
 800d14e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d152:	d0e9      	beq.n	800d128 <_dtoa_r+0xa38>
 800d154:	f108 0801 	add.w	r8, r8, #1
 800d158:	9b05      	ldr	r3, [sp, #20]
 800d15a:	e7c2      	b.n	800d0e2 <_dtoa_r+0x9f2>
 800d15c:	9a02      	ldr	r2, [sp, #8]
 800d15e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d162:	eba5 030b 	sub.w	r3, r5, fp
 800d166:	4293      	cmp	r3, r2
 800d168:	d021      	beq.n	800d1ae <_dtoa_r+0xabe>
 800d16a:	2300      	movs	r3, #0
 800d16c:	220a      	movs	r2, #10
 800d16e:	9904      	ldr	r1, [sp, #16]
 800d170:	4620      	mov	r0, r4
 800d172:	f000 f8e1 	bl	800d338 <__multadd>
 800d176:	45b1      	cmp	r9, r6
 800d178:	9004      	str	r0, [sp, #16]
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	f04f 020a 	mov.w	r2, #10
 800d182:	4649      	mov	r1, r9
 800d184:	4620      	mov	r0, r4
 800d186:	d105      	bne.n	800d194 <_dtoa_r+0xaa4>
 800d188:	f000 f8d6 	bl	800d338 <__multadd>
 800d18c:	4681      	mov	r9, r0
 800d18e:	4606      	mov	r6, r0
 800d190:	9505      	str	r5, [sp, #20]
 800d192:	e776      	b.n	800d082 <_dtoa_r+0x992>
 800d194:	f000 f8d0 	bl	800d338 <__multadd>
 800d198:	4631      	mov	r1, r6
 800d19a:	4681      	mov	r9, r0
 800d19c:	2300      	movs	r3, #0
 800d19e:	220a      	movs	r2, #10
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 f8c9 	bl	800d338 <__multadd>
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	e7f2      	b.n	800d190 <_dtoa_r+0xaa0>
 800d1aa:	f04f 0900 	mov.w	r9, #0
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	9904      	ldr	r1, [sp, #16]
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fa36 	bl	800d624 <__lshift>
 800d1b8:	4639      	mov	r1, r7
 800d1ba:	9004      	str	r0, [sp, #16]
 800d1bc:	f000 fa86 	bl	800d6cc <__mcmp>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	dcb6      	bgt.n	800d132 <_dtoa_r+0xa42>
 800d1c4:	d102      	bne.n	800d1cc <_dtoa_r+0xadc>
 800d1c6:	f018 0f01 	tst.w	r8, #1
 800d1ca:	d1b2      	bne.n	800d132 <_dtoa_r+0xa42>
 800d1cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1d0:	2b30      	cmp	r3, #48	; 0x30
 800d1d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1d6:	f47f af0a 	bne.w	800cfee <_dtoa_r+0x8fe>
 800d1da:	4615      	mov	r5, r2
 800d1dc:	e7f6      	b.n	800d1cc <_dtoa_r+0xadc>
 800d1de:	4593      	cmp	fp, r2
 800d1e0:	d105      	bne.n	800d1ee <_dtoa_r+0xafe>
 800d1e2:	2331      	movs	r3, #49	; 0x31
 800d1e4:	f10a 0a01 	add.w	sl, sl, #1
 800d1e8:	f88b 3000 	strb.w	r3, [fp]
 800d1ec:	e6ff      	b.n	800cfee <_dtoa_r+0x8fe>
 800d1ee:	4615      	mov	r5, r2
 800d1f0:	e79f      	b.n	800d132 <_dtoa_r+0xa42>
 800d1f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d258 <_dtoa_r+0xb68>
 800d1f6:	e007      	b.n	800d208 <_dtoa_r+0xb18>
 800d1f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d25c <_dtoa_r+0xb6c>
 800d1fe:	b11b      	cbz	r3, 800d208 <_dtoa_r+0xb18>
 800d200:	f10b 0308 	add.w	r3, fp, #8
 800d204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	4658      	mov	r0, fp
 800d20a:	b017      	add	sp, #92	; 0x5c
 800d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d210:	9b06      	ldr	r3, [sp, #24]
 800d212:	2b01      	cmp	r3, #1
 800d214:	f77f ae35 	ble.w	800ce82 <_dtoa_r+0x792>
 800d218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d21a:	9307      	str	r3, [sp, #28]
 800d21c:	e649      	b.n	800ceb2 <_dtoa_r+0x7c2>
 800d21e:	9b02      	ldr	r3, [sp, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	dc03      	bgt.n	800d22c <_dtoa_r+0xb3c>
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	2b02      	cmp	r3, #2
 800d228:	f73f aecc 	bgt.w	800cfc4 <_dtoa_r+0x8d4>
 800d22c:	465d      	mov	r5, fp
 800d22e:	4639      	mov	r1, r7
 800d230:	9804      	ldr	r0, [sp, #16]
 800d232:	f7ff f9ce 	bl	800c5d2 <quorem>
 800d236:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d23a:	f805 8b01 	strb.w	r8, [r5], #1
 800d23e:	9a02      	ldr	r2, [sp, #8]
 800d240:	eba5 030b 	sub.w	r3, r5, fp
 800d244:	429a      	cmp	r2, r3
 800d246:	ddb0      	ble.n	800d1aa <_dtoa_r+0xaba>
 800d248:	2300      	movs	r3, #0
 800d24a:	220a      	movs	r2, #10
 800d24c:	9904      	ldr	r1, [sp, #16]
 800d24e:	4620      	mov	r0, r4
 800d250:	f000 f872 	bl	800d338 <__multadd>
 800d254:	9004      	str	r0, [sp, #16]
 800d256:	e7ea      	b.n	800d22e <_dtoa_r+0xb3e>
 800d258:	0800e1f0 	.word	0x0800e1f0
 800d25c:	0800e214 	.word	0x0800e214

0800d260 <_localeconv_r>:
 800d260:	4b04      	ldr	r3, [pc, #16]	; (800d274 <_localeconv_r+0x14>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6a18      	ldr	r0, [r3, #32]
 800d266:	4b04      	ldr	r3, [pc, #16]	; (800d278 <_localeconv_r+0x18>)
 800d268:	2800      	cmp	r0, #0
 800d26a:	bf08      	it	eq
 800d26c:	4618      	moveq	r0, r3
 800d26e:	30f0      	adds	r0, #240	; 0xf0
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	20000068 	.word	0x20000068
 800d278:	200000cc 	.word	0x200000cc

0800d27c <malloc>:
 800d27c:	4b02      	ldr	r3, [pc, #8]	; (800d288 <malloc+0xc>)
 800d27e:	4601      	mov	r1, r0
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	f000 bb45 	b.w	800d910 <_malloc_r>
 800d286:	bf00      	nop
 800d288:	20000068 	.word	0x20000068

0800d28c <memcpy>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	1e43      	subs	r3, r0, #1
 800d290:	440a      	add	r2, r1
 800d292:	4291      	cmp	r1, r2
 800d294:	d100      	bne.n	800d298 <memcpy+0xc>
 800d296:	bd10      	pop	{r4, pc}
 800d298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d29c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2a0:	e7f7      	b.n	800d292 <memcpy+0x6>

0800d2a2 <_Balloc>:
 800d2a2:	b570      	push	{r4, r5, r6, lr}
 800d2a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	460e      	mov	r6, r1
 800d2aa:	b93d      	cbnz	r5, 800d2bc <_Balloc+0x1a>
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	f7ff ffe5 	bl	800d27c <malloc>
 800d2b2:	6260      	str	r0, [r4, #36]	; 0x24
 800d2b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2b8:	6005      	str	r5, [r0, #0]
 800d2ba:	60c5      	str	r5, [r0, #12]
 800d2bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d2be:	68eb      	ldr	r3, [r5, #12]
 800d2c0:	b183      	cbz	r3, 800d2e4 <_Balloc+0x42>
 800d2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d2ca:	b9b8      	cbnz	r0, 800d2fc <_Balloc+0x5a>
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	fa01 f506 	lsl.w	r5, r1, r6
 800d2d2:	1d6a      	adds	r2, r5, #5
 800d2d4:	0092      	lsls	r2, r2, #2
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fabe 	bl	800d858 <_calloc_r>
 800d2dc:	b160      	cbz	r0, 800d2f8 <_Balloc+0x56>
 800d2de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d2e2:	e00e      	b.n	800d302 <_Balloc+0x60>
 800d2e4:	2221      	movs	r2, #33	; 0x21
 800d2e6:	2104      	movs	r1, #4
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fab5 	bl	800d858 <_calloc_r>
 800d2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f0:	60e8      	str	r0, [r5, #12]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e4      	bne.n	800d2c2 <_Balloc+0x20>
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	6802      	ldr	r2, [r0, #0]
 800d2fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d302:	2300      	movs	r3, #0
 800d304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d308:	e7f7      	b.n	800d2fa <_Balloc+0x58>

0800d30a <_Bfree>:
 800d30a:	b570      	push	{r4, r5, r6, lr}
 800d30c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d30e:	4606      	mov	r6, r0
 800d310:	460d      	mov	r5, r1
 800d312:	b93c      	cbnz	r4, 800d324 <_Bfree+0x1a>
 800d314:	2010      	movs	r0, #16
 800d316:	f7ff ffb1 	bl	800d27c <malloc>
 800d31a:	6270      	str	r0, [r6, #36]	; 0x24
 800d31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d320:	6004      	str	r4, [r0, #0]
 800d322:	60c4      	str	r4, [r0, #12]
 800d324:	b13d      	cbz	r5, 800d336 <_Bfree+0x2c>
 800d326:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d328:	686a      	ldr	r2, [r5, #4]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d330:	6029      	str	r1, [r5, #0]
 800d332:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d336:	bd70      	pop	{r4, r5, r6, pc}

0800d338 <__multadd>:
 800d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33c:	690d      	ldr	r5, [r1, #16]
 800d33e:	461f      	mov	r7, r3
 800d340:	4606      	mov	r6, r0
 800d342:	460c      	mov	r4, r1
 800d344:	f101 0c14 	add.w	ip, r1, #20
 800d348:	2300      	movs	r3, #0
 800d34a:	f8dc 0000 	ldr.w	r0, [ip]
 800d34e:	b281      	uxth	r1, r0
 800d350:	fb02 7101 	mla	r1, r2, r1, r7
 800d354:	0c0f      	lsrs	r7, r1, #16
 800d356:	0c00      	lsrs	r0, r0, #16
 800d358:	fb02 7000 	mla	r0, r2, r0, r7
 800d35c:	b289      	uxth	r1, r1
 800d35e:	3301      	adds	r3, #1
 800d360:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d364:	429d      	cmp	r5, r3
 800d366:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d36a:	f84c 1b04 	str.w	r1, [ip], #4
 800d36e:	dcec      	bgt.n	800d34a <__multadd+0x12>
 800d370:	b1d7      	cbz	r7, 800d3a8 <__multadd+0x70>
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	42ab      	cmp	r3, r5
 800d376:	dc12      	bgt.n	800d39e <__multadd+0x66>
 800d378:	6861      	ldr	r1, [r4, #4]
 800d37a:	4630      	mov	r0, r6
 800d37c:	3101      	adds	r1, #1
 800d37e:	f7ff ff90 	bl	800d2a2 <_Balloc>
 800d382:	6922      	ldr	r2, [r4, #16]
 800d384:	3202      	adds	r2, #2
 800d386:	f104 010c 	add.w	r1, r4, #12
 800d38a:	4680      	mov	r8, r0
 800d38c:	0092      	lsls	r2, r2, #2
 800d38e:	300c      	adds	r0, #12
 800d390:	f7ff ff7c 	bl	800d28c <memcpy>
 800d394:	4621      	mov	r1, r4
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ffb7 	bl	800d30a <_Bfree>
 800d39c:	4644      	mov	r4, r8
 800d39e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3a2:	3501      	adds	r5, #1
 800d3a4:	615f      	str	r7, [r3, #20]
 800d3a6:	6125      	str	r5, [r4, #16]
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d3ae <__hi0bits>:
 800d3ae:	0c02      	lsrs	r2, r0, #16
 800d3b0:	0412      	lsls	r2, r2, #16
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	b9b2      	cbnz	r2, 800d3e4 <__hi0bits+0x36>
 800d3b6:	0403      	lsls	r3, r0, #16
 800d3b8:	2010      	movs	r0, #16
 800d3ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d3be:	bf04      	itt	eq
 800d3c0:	021b      	lsleq	r3, r3, #8
 800d3c2:	3008      	addeq	r0, #8
 800d3c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d3c8:	bf04      	itt	eq
 800d3ca:	011b      	lsleq	r3, r3, #4
 800d3cc:	3004      	addeq	r0, #4
 800d3ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d3d2:	bf04      	itt	eq
 800d3d4:	009b      	lsleq	r3, r3, #2
 800d3d6:	3002      	addeq	r0, #2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	db06      	blt.n	800d3ea <__hi0bits+0x3c>
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	d503      	bpl.n	800d3e8 <__hi0bits+0x3a>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	4770      	bx	lr
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e7e8      	b.n	800d3ba <__hi0bits+0xc>
 800d3e8:	2020      	movs	r0, #32
 800d3ea:	4770      	bx	lr

0800d3ec <__lo0bits>:
 800d3ec:	6803      	ldr	r3, [r0, #0]
 800d3ee:	f013 0207 	ands.w	r2, r3, #7
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	d00b      	beq.n	800d40e <__lo0bits+0x22>
 800d3f6:	07da      	lsls	r2, r3, #31
 800d3f8:	d423      	bmi.n	800d442 <__lo0bits+0x56>
 800d3fa:	0798      	lsls	r0, r3, #30
 800d3fc:	bf49      	itett	mi
 800d3fe:	085b      	lsrmi	r3, r3, #1
 800d400:	089b      	lsrpl	r3, r3, #2
 800d402:	2001      	movmi	r0, #1
 800d404:	600b      	strmi	r3, [r1, #0]
 800d406:	bf5c      	itt	pl
 800d408:	600b      	strpl	r3, [r1, #0]
 800d40a:	2002      	movpl	r0, #2
 800d40c:	4770      	bx	lr
 800d40e:	b298      	uxth	r0, r3
 800d410:	b9a8      	cbnz	r0, 800d43e <__lo0bits+0x52>
 800d412:	0c1b      	lsrs	r3, r3, #16
 800d414:	2010      	movs	r0, #16
 800d416:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d41a:	bf04      	itt	eq
 800d41c:	0a1b      	lsreq	r3, r3, #8
 800d41e:	3008      	addeq	r0, #8
 800d420:	071a      	lsls	r2, r3, #28
 800d422:	bf04      	itt	eq
 800d424:	091b      	lsreq	r3, r3, #4
 800d426:	3004      	addeq	r0, #4
 800d428:	079a      	lsls	r2, r3, #30
 800d42a:	bf04      	itt	eq
 800d42c:	089b      	lsreq	r3, r3, #2
 800d42e:	3002      	addeq	r0, #2
 800d430:	07da      	lsls	r2, r3, #31
 800d432:	d402      	bmi.n	800d43a <__lo0bits+0x4e>
 800d434:	085b      	lsrs	r3, r3, #1
 800d436:	d006      	beq.n	800d446 <__lo0bits+0x5a>
 800d438:	3001      	adds	r0, #1
 800d43a:	600b      	str	r3, [r1, #0]
 800d43c:	4770      	bx	lr
 800d43e:	4610      	mov	r0, r2
 800d440:	e7e9      	b.n	800d416 <__lo0bits+0x2a>
 800d442:	2000      	movs	r0, #0
 800d444:	4770      	bx	lr
 800d446:	2020      	movs	r0, #32
 800d448:	4770      	bx	lr

0800d44a <__i2b>:
 800d44a:	b510      	push	{r4, lr}
 800d44c:	460c      	mov	r4, r1
 800d44e:	2101      	movs	r1, #1
 800d450:	f7ff ff27 	bl	800d2a2 <_Balloc>
 800d454:	2201      	movs	r2, #1
 800d456:	6144      	str	r4, [r0, #20]
 800d458:	6102      	str	r2, [r0, #16]
 800d45a:	bd10      	pop	{r4, pc}

0800d45c <__multiply>:
 800d45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d460:	4614      	mov	r4, r2
 800d462:	690a      	ldr	r2, [r1, #16]
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	429a      	cmp	r2, r3
 800d468:	bfb8      	it	lt
 800d46a:	460b      	movlt	r3, r1
 800d46c:	4688      	mov	r8, r1
 800d46e:	bfbc      	itt	lt
 800d470:	46a0      	movlt	r8, r4
 800d472:	461c      	movlt	r4, r3
 800d474:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d478:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d47c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d484:	eb07 0609 	add.w	r6, r7, r9
 800d488:	42b3      	cmp	r3, r6
 800d48a:	bfb8      	it	lt
 800d48c:	3101      	addlt	r1, #1
 800d48e:	f7ff ff08 	bl	800d2a2 <_Balloc>
 800d492:	f100 0514 	add.w	r5, r0, #20
 800d496:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d49a:	462b      	mov	r3, r5
 800d49c:	2200      	movs	r2, #0
 800d49e:	4573      	cmp	r3, lr
 800d4a0:	d316      	bcc.n	800d4d0 <__multiply+0x74>
 800d4a2:	f104 0214 	add.w	r2, r4, #20
 800d4a6:	f108 0114 	add.w	r1, r8, #20
 800d4aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d4ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	9b00      	ldr	r3, [sp, #0]
 800d4b6:	9201      	str	r2, [sp, #4]
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d80c      	bhi.n	800d4d6 <__multiply+0x7a>
 800d4bc:	2e00      	cmp	r6, #0
 800d4be:	dd03      	ble.n	800d4c8 <__multiply+0x6c>
 800d4c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d05d      	beq.n	800d584 <__multiply+0x128>
 800d4c8:	6106      	str	r6, [r0, #16]
 800d4ca:	b003      	add	sp, #12
 800d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d0:	f843 2b04 	str.w	r2, [r3], #4
 800d4d4:	e7e3      	b.n	800d49e <__multiply+0x42>
 800d4d6:	f8b2 b000 	ldrh.w	fp, [r2]
 800d4da:	f1bb 0f00 	cmp.w	fp, #0
 800d4de:	d023      	beq.n	800d528 <__multiply+0xcc>
 800d4e0:	4689      	mov	r9, r1
 800d4e2:	46ac      	mov	ip, r5
 800d4e4:	f04f 0800 	mov.w	r8, #0
 800d4e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d4ec:	f8dc a000 	ldr.w	sl, [ip]
 800d4f0:	b2a3      	uxth	r3, r4
 800d4f2:	fa1f fa8a 	uxth.w	sl, sl
 800d4f6:	fb0b a303 	mla	r3, fp, r3, sl
 800d4fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4fe:	f8dc 4000 	ldr.w	r4, [ip]
 800d502:	4443      	add	r3, r8
 800d504:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d508:	fb0b 840a 	mla	r4, fp, sl, r8
 800d50c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d510:	46e2      	mov	sl, ip
 800d512:	b29b      	uxth	r3, r3
 800d514:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d518:	454f      	cmp	r7, r9
 800d51a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d51e:	f84a 3b04 	str.w	r3, [sl], #4
 800d522:	d82b      	bhi.n	800d57c <__multiply+0x120>
 800d524:	f8cc 8004 	str.w	r8, [ip, #4]
 800d528:	9b01      	ldr	r3, [sp, #4]
 800d52a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d52e:	3204      	adds	r2, #4
 800d530:	f1ba 0f00 	cmp.w	sl, #0
 800d534:	d020      	beq.n	800d578 <__multiply+0x11c>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	4689      	mov	r9, r1
 800d53a:	46a8      	mov	r8, r5
 800d53c:	f04f 0b00 	mov.w	fp, #0
 800d540:	f8b9 c000 	ldrh.w	ip, [r9]
 800d544:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d548:	fb0a 440c 	mla	r4, sl, ip, r4
 800d54c:	445c      	add	r4, fp
 800d54e:	46c4      	mov	ip, r8
 800d550:	b29b      	uxth	r3, r3
 800d552:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d556:	f84c 3b04 	str.w	r3, [ip], #4
 800d55a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d55e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d562:	0c1b      	lsrs	r3, r3, #16
 800d564:	fb0a b303 	mla	r3, sl, r3, fp
 800d568:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d56c:	454f      	cmp	r7, r9
 800d56e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d572:	d805      	bhi.n	800d580 <__multiply+0x124>
 800d574:	f8c8 3004 	str.w	r3, [r8, #4]
 800d578:	3504      	adds	r5, #4
 800d57a:	e79b      	b.n	800d4b4 <__multiply+0x58>
 800d57c:	46d4      	mov	ip, sl
 800d57e:	e7b3      	b.n	800d4e8 <__multiply+0x8c>
 800d580:	46e0      	mov	r8, ip
 800d582:	e7dd      	b.n	800d540 <__multiply+0xe4>
 800d584:	3e01      	subs	r6, #1
 800d586:	e799      	b.n	800d4bc <__multiply+0x60>

0800d588 <__pow5mult>:
 800d588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d58c:	4615      	mov	r5, r2
 800d58e:	f012 0203 	ands.w	r2, r2, #3
 800d592:	4606      	mov	r6, r0
 800d594:	460f      	mov	r7, r1
 800d596:	d007      	beq.n	800d5a8 <__pow5mult+0x20>
 800d598:	3a01      	subs	r2, #1
 800d59a:	4c21      	ldr	r4, [pc, #132]	; (800d620 <__pow5mult+0x98>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5a2:	f7ff fec9 	bl	800d338 <__multadd>
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	10ad      	asrs	r5, r5, #2
 800d5aa:	d035      	beq.n	800d618 <__pow5mult+0x90>
 800d5ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5ae:	b93c      	cbnz	r4, 800d5c0 <__pow5mult+0x38>
 800d5b0:	2010      	movs	r0, #16
 800d5b2:	f7ff fe63 	bl	800d27c <malloc>
 800d5b6:	6270      	str	r0, [r6, #36]	; 0x24
 800d5b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5bc:	6004      	str	r4, [r0, #0]
 800d5be:	60c4      	str	r4, [r0, #12]
 800d5c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d5c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5c8:	b94c      	cbnz	r4, 800d5de <__pow5mult+0x56>
 800d5ca:	f240 2171 	movw	r1, #625	; 0x271
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7ff ff3b 	bl	800d44a <__i2b>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5da:	4604      	mov	r4, r0
 800d5dc:	6003      	str	r3, [r0, #0]
 800d5de:	f04f 0800 	mov.w	r8, #0
 800d5e2:	07eb      	lsls	r3, r5, #31
 800d5e4:	d50a      	bpl.n	800d5fc <__pow5mult+0x74>
 800d5e6:	4639      	mov	r1, r7
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f7ff ff36 	bl	800d45c <__multiply>
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	4681      	mov	r9, r0
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff fe88 	bl	800d30a <_Bfree>
 800d5fa:	464f      	mov	r7, r9
 800d5fc:	106d      	asrs	r5, r5, #1
 800d5fe:	d00b      	beq.n	800d618 <__pow5mult+0x90>
 800d600:	6820      	ldr	r0, [r4, #0]
 800d602:	b938      	cbnz	r0, 800d614 <__pow5mult+0x8c>
 800d604:	4622      	mov	r2, r4
 800d606:	4621      	mov	r1, r4
 800d608:	4630      	mov	r0, r6
 800d60a:	f7ff ff27 	bl	800d45c <__multiply>
 800d60e:	6020      	str	r0, [r4, #0]
 800d610:	f8c0 8000 	str.w	r8, [r0]
 800d614:	4604      	mov	r4, r0
 800d616:	e7e4      	b.n	800d5e2 <__pow5mult+0x5a>
 800d618:	4638      	mov	r0, r7
 800d61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d61e:	bf00      	nop
 800d620:	0800e318 	.word	0x0800e318

0800d624 <__lshift>:
 800d624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d628:	460c      	mov	r4, r1
 800d62a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	6849      	ldr	r1, [r1, #4]
 800d632:	eb0a 0903 	add.w	r9, sl, r3
 800d636:	68a3      	ldr	r3, [r4, #8]
 800d638:	4607      	mov	r7, r0
 800d63a:	4616      	mov	r6, r2
 800d63c:	f109 0501 	add.w	r5, r9, #1
 800d640:	42ab      	cmp	r3, r5
 800d642:	db32      	blt.n	800d6aa <__lshift+0x86>
 800d644:	4638      	mov	r0, r7
 800d646:	f7ff fe2c 	bl	800d2a2 <_Balloc>
 800d64a:	2300      	movs	r3, #0
 800d64c:	4680      	mov	r8, r0
 800d64e:	f100 0114 	add.w	r1, r0, #20
 800d652:	461a      	mov	r2, r3
 800d654:	4553      	cmp	r3, sl
 800d656:	db2b      	blt.n	800d6b0 <__lshift+0x8c>
 800d658:	6920      	ldr	r0, [r4, #16]
 800d65a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d65e:	f104 0314 	add.w	r3, r4, #20
 800d662:	f016 021f 	ands.w	r2, r6, #31
 800d666:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d66a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d66e:	d025      	beq.n	800d6bc <__lshift+0x98>
 800d670:	f1c2 0e20 	rsb	lr, r2, #32
 800d674:	2000      	movs	r0, #0
 800d676:	681e      	ldr	r6, [r3, #0]
 800d678:	468a      	mov	sl, r1
 800d67a:	4096      	lsls	r6, r2
 800d67c:	4330      	orrs	r0, r6
 800d67e:	f84a 0b04 	str.w	r0, [sl], #4
 800d682:	f853 0b04 	ldr.w	r0, [r3], #4
 800d686:	459c      	cmp	ip, r3
 800d688:	fa20 f00e 	lsr.w	r0, r0, lr
 800d68c:	d814      	bhi.n	800d6b8 <__lshift+0x94>
 800d68e:	6048      	str	r0, [r1, #4]
 800d690:	b108      	cbz	r0, 800d696 <__lshift+0x72>
 800d692:	f109 0502 	add.w	r5, r9, #2
 800d696:	3d01      	subs	r5, #1
 800d698:	4638      	mov	r0, r7
 800d69a:	f8c8 5010 	str.w	r5, [r8, #16]
 800d69e:	4621      	mov	r1, r4
 800d6a0:	f7ff fe33 	bl	800d30a <_Bfree>
 800d6a4:	4640      	mov	r0, r8
 800d6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6aa:	3101      	adds	r1, #1
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	e7c7      	b.n	800d640 <__lshift+0x1c>
 800d6b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	e7cd      	b.n	800d654 <__lshift+0x30>
 800d6b8:	4651      	mov	r1, sl
 800d6ba:	e7dc      	b.n	800d676 <__lshift+0x52>
 800d6bc:	3904      	subs	r1, #4
 800d6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6c6:	459c      	cmp	ip, r3
 800d6c8:	d8f9      	bhi.n	800d6be <__lshift+0x9a>
 800d6ca:	e7e4      	b.n	800d696 <__lshift+0x72>

0800d6cc <__mcmp>:
 800d6cc:	6903      	ldr	r3, [r0, #16]
 800d6ce:	690a      	ldr	r2, [r1, #16]
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	b530      	push	{r4, r5, lr}
 800d6d4:	d10c      	bne.n	800d6f0 <__mcmp+0x24>
 800d6d6:	0092      	lsls	r2, r2, #2
 800d6d8:	3014      	adds	r0, #20
 800d6da:	3114      	adds	r1, #20
 800d6dc:	1884      	adds	r4, r0, r2
 800d6de:	4411      	add	r1, r2
 800d6e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6e8:	4295      	cmp	r5, r2
 800d6ea:	d003      	beq.n	800d6f4 <__mcmp+0x28>
 800d6ec:	d305      	bcc.n	800d6fa <__mcmp+0x2e>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	bd30      	pop	{r4, r5, pc}
 800d6f4:	42a0      	cmp	r0, r4
 800d6f6:	d3f3      	bcc.n	800d6e0 <__mcmp+0x14>
 800d6f8:	e7fa      	b.n	800d6f0 <__mcmp+0x24>
 800d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fe:	e7f7      	b.n	800d6f0 <__mcmp+0x24>

0800d700 <__mdiff>:
 800d700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d704:	460d      	mov	r5, r1
 800d706:	4607      	mov	r7, r0
 800d708:	4611      	mov	r1, r2
 800d70a:	4628      	mov	r0, r5
 800d70c:	4614      	mov	r4, r2
 800d70e:	f7ff ffdd 	bl	800d6cc <__mcmp>
 800d712:	1e06      	subs	r6, r0, #0
 800d714:	d108      	bne.n	800d728 <__mdiff+0x28>
 800d716:	4631      	mov	r1, r6
 800d718:	4638      	mov	r0, r7
 800d71a:	f7ff fdc2 	bl	800d2a2 <_Balloc>
 800d71e:	2301      	movs	r3, #1
 800d720:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d728:	bfa4      	itt	ge
 800d72a:	4623      	movge	r3, r4
 800d72c:	462c      	movge	r4, r5
 800d72e:	4638      	mov	r0, r7
 800d730:	6861      	ldr	r1, [r4, #4]
 800d732:	bfa6      	itte	ge
 800d734:	461d      	movge	r5, r3
 800d736:	2600      	movge	r6, #0
 800d738:	2601      	movlt	r6, #1
 800d73a:	f7ff fdb2 	bl	800d2a2 <_Balloc>
 800d73e:	692b      	ldr	r3, [r5, #16]
 800d740:	60c6      	str	r6, [r0, #12]
 800d742:	6926      	ldr	r6, [r4, #16]
 800d744:	f105 0914 	add.w	r9, r5, #20
 800d748:	f104 0214 	add.w	r2, r4, #20
 800d74c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d750:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d754:	f100 0514 	add.w	r5, r0, #20
 800d758:	f04f 0e00 	mov.w	lr, #0
 800d75c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d760:	f859 4b04 	ldr.w	r4, [r9], #4
 800d764:	fa1e f18a 	uxtah	r1, lr, sl
 800d768:	b2a3      	uxth	r3, r4
 800d76a:	1ac9      	subs	r1, r1, r3
 800d76c:	0c23      	lsrs	r3, r4, #16
 800d76e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d772:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d776:	b289      	uxth	r1, r1
 800d778:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d77c:	45c8      	cmp	r8, r9
 800d77e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d782:	4694      	mov	ip, r2
 800d784:	f845 3b04 	str.w	r3, [r5], #4
 800d788:	d8e8      	bhi.n	800d75c <__mdiff+0x5c>
 800d78a:	45bc      	cmp	ip, r7
 800d78c:	d304      	bcc.n	800d798 <__mdiff+0x98>
 800d78e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d792:	b183      	cbz	r3, 800d7b6 <__mdiff+0xb6>
 800d794:	6106      	str	r6, [r0, #16]
 800d796:	e7c5      	b.n	800d724 <__mdiff+0x24>
 800d798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d79c:	fa1e f381 	uxtah	r3, lr, r1
 800d7a0:	141a      	asrs	r2, r3, #16
 800d7a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d7b0:	f845 3b04 	str.w	r3, [r5], #4
 800d7b4:	e7e9      	b.n	800d78a <__mdiff+0x8a>
 800d7b6:	3e01      	subs	r6, #1
 800d7b8:	e7e9      	b.n	800d78e <__mdiff+0x8e>

0800d7ba <__d2b>:
 800d7ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7be:	460e      	mov	r6, r1
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	ec59 8b10 	vmov	r8, r9, d0
 800d7c6:	4615      	mov	r5, r2
 800d7c8:	f7ff fd6b 	bl	800d2a2 <_Balloc>
 800d7cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7d6:	bb34      	cbnz	r4, 800d826 <__d2b+0x6c>
 800d7d8:	9301      	str	r3, [sp, #4]
 800d7da:	f1b8 0300 	subs.w	r3, r8, #0
 800d7de:	d027      	beq.n	800d830 <__d2b+0x76>
 800d7e0:	a802      	add	r0, sp, #8
 800d7e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d7e6:	f7ff fe01 	bl	800d3ec <__lo0bits>
 800d7ea:	9900      	ldr	r1, [sp, #0]
 800d7ec:	b1f0      	cbz	r0, 800d82c <__d2b+0x72>
 800d7ee:	9a01      	ldr	r2, [sp, #4]
 800d7f0:	f1c0 0320 	rsb	r3, r0, #32
 800d7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f8:	430b      	orrs	r3, r1
 800d7fa:	40c2      	lsrs	r2, r0
 800d7fc:	617b      	str	r3, [r7, #20]
 800d7fe:	9201      	str	r2, [sp, #4]
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	61bb      	str	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	bf14      	ite	ne
 800d808:	2102      	movne	r1, #2
 800d80a:	2101      	moveq	r1, #1
 800d80c:	6139      	str	r1, [r7, #16]
 800d80e:	b1c4      	cbz	r4, 800d842 <__d2b+0x88>
 800d810:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d814:	4404      	add	r4, r0
 800d816:	6034      	str	r4, [r6, #0]
 800d818:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d81c:	6028      	str	r0, [r5, #0]
 800d81e:	4638      	mov	r0, r7
 800d820:	b003      	add	sp, #12
 800d822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d82a:	e7d5      	b.n	800d7d8 <__d2b+0x1e>
 800d82c:	6179      	str	r1, [r7, #20]
 800d82e:	e7e7      	b.n	800d800 <__d2b+0x46>
 800d830:	a801      	add	r0, sp, #4
 800d832:	f7ff fddb 	bl	800d3ec <__lo0bits>
 800d836:	9b01      	ldr	r3, [sp, #4]
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	2101      	movs	r1, #1
 800d83c:	6139      	str	r1, [r7, #16]
 800d83e:	3020      	adds	r0, #32
 800d840:	e7e5      	b.n	800d80e <__d2b+0x54>
 800d842:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d846:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d84a:	6030      	str	r0, [r6, #0]
 800d84c:	6918      	ldr	r0, [r3, #16]
 800d84e:	f7ff fdae 	bl	800d3ae <__hi0bits>
 800d852:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d856:	e7e1      	b.n	800d81c <__d2b+0x62>

0800d858 <_calloc_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	fb02 f401 	mul.w	r4, r2, r1
 800d85e:	4621      	mov	r1, r4
 800d860:	f000 f856 	bl	800d910 <_malloc_r>
 800d864:	4605      	mov	r5, r0
 800d866:	b118      	cbz	r0, 800d870 <_calloc_r+0x18>
 800d868:	4622      	mov	r2, r4
 800d86a:	2100      	movs	r1, #0
 800d86c:	f7fe fa16 	bl	800bc9c <memset>
 800d870:	4628      	mov	r0, r5
 800d872:	bd38      	pop	{r3, r4, r5, pc}

0800d874 <_free_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4605      	mov	r5, r0
 800d878:	2900      	cmp	r1, #0
 800d87a:	d045      	beq.n	800d908 <_free_r+0x94>
 800d87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d880:	1f0c      	subs	r4, r1, #4
 800d882:	2b00      	cmp	r3, #0
 800d884:	bfb8      	it	lt
 800d886:	18e4      	addlt	r4, r4, r3
 800d888:	f000 fa29 	bl	800dcde <__malloc_lock>
 800d88c:	4a1f      	ldr	r2, [pc, #124]	; (800d90c <_free_r+0x98>)
 800d88e:	6813      	ldr	r3, [r2, #0]
 800d890:	4610      	mov	r0, r2
 800d892:	b933      	cbnz	r3, 800d8a2 <_free_r+0x2e>
 800d894:	6063      	str	r3, [r4, #4]
 800d896:	6014      	str	r4, [r2, #0]
 800d898:	4628      	mov	r0, r5
 800d89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d89e:	f000 ba1f 	b.w	800dce0 <__malloc_unlock>
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	d90c      	bls.n	800d8c0 <_free_r+0x4c>
 800d8a6:	6821      	ldr	r1, [r4, #0]
 800d8a8:	1862      	adds	r2, r4, r1
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	bf04      	itt	eq
 800d8ae:	681a      	ldreq	r2, [r3, #0]
 800d8b0:	685b      	ldreq	r3, [r3, #4]
 800d8b2:	6063      	str	r3, [r4, #4]
 800d8b4:	bf04      	itt	eq
 800d8b6:	1852      	addeq	r2, r2, r1
 800d8b8:	6022      	streq	r2, [r4, #0]
 800d8ba:	6004      	str	r4, [r0, #0]
 800d8bc:	e7ec      	b.n	800d898 <_free_r+0x24>
 800d8be:	4613      	mov	r3, r2
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	b10a      	cbz	r2, 800d8c8 <_free_r+0x54>
 800d8c4:	42a2      	cmp	r2, r4
 800d8c6:	d9fa      	bls.n	800d8be <_free_r+0x4a>
 800d8c8:	6819      	ldr	r1, [r3, #0]
 800d8ca:	1858      	adds	r0, r3, r1
 800d8cc:	42a0      	cmp	r0, r4
 800d8ce:	d10b      	bne.n	800d8e8 <_free_r+0x74>
 800d8d0:	6820      	ldr	r0, [r4, #0]
 800d8d2:	4401      	add	r1, r0
 800d8d4:	1858      	adds	r0, r3, r1
 800d8d6:	4282      	cmp	r2, r0
 800d8d8:	6019      	str	r1, [r3, #0]
 800d8da:	d1dd      	bne.n	800d898 <_free_r+0x24>
 800d8dc:	6810      	ldr	r0, [r2, #0]
 800d8de:	6852      	ldr	r2, [r2, #4]
 800d8e0:	605a      	str	r2, [r3, #4]
 800d8e2:	4401      	add	r1, r0
 800d8e4:	6019      	str	r1, [r3, #0]
 800d8e6:	e7d7      	b.n	800d898 <_free_r+0x24>
 800d8e8:	d902      	bls.n	800d8f0 <_free_r+0x7c>
 800d8ea:	230c      	movs	r3, #12
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	e7d3      	b.n	800d898 <_free_r+0x24>
 800d8f0:	6820      	ldr	r0, [r4, #0]
 800d8f2:	1821      	adds	r1, r4, r0
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	bf04      	itt	eq
 800d8f8:	6811      	ldreq	r1, [r2, #0]
 800d8fa:	6852      	ldreq	r2, [r2, #4]
 800d8fc:	6062      	str	r2, [r4, #4]
 800d8fe:	bf04      	itt	eq
 800d900:	1809      	addeq	r1, r1, r0
 800d902:	6021      	streq	r1, [r4, #0]
 800d904:	605c      	str	r4, [r3, #4]
 800d906:	e7c7      	b.n	800d898 <_free_r+0x24>
 800d908:	bd38      	pop	{r3, r4, r5, pc}
 800d90a:	bf00      	nop
 800d90c:	20000264 	.word	0x20000264

0800d910 <_malloc_r>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	1ccd      	adds	r5, r1, #3
 800d914:	f025 0503 	bic.w	r5, r5, #3
 800d918:	3508      	adds	r5, #8
 800d91a:	2d0c      	cmp	r5, #12
 800d91c:	bf38      	it	cc
 800d91e:	250c      	movcc	r5, #12
 800d920:	2d00      	cmp	r5, #0
 800d922:	4606      	mov	r6, r0
 800d924:	db01      	blt.n	800d92a <_malloc_r+0x1a>
 800d926:	42a9      	cmp	r1, r5
 800d928:	d903      	bls.n	800d932 <_malloc_r+0x22>
 800d92a:	230c      	movs	r3, #12
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	2000      	movs	r0, #0
 800d930:	bd70      	pop	{r4, r5, r6, pc}
 800d932:	f000 f9d4 	bl	800dcde <__malloc_lock>
 800d936:	4a21      	ldr	r2, [pc, #132]	; (800d9bc <_malloc_r+0xac>)
 800d938:	6814      	ldr	r4, [r2, #0]
 800d93a:	4621      	mov	r1, r4
 800d93c:	b991      	cbnz	r1, 800d964 <_malloc_r+0x54>
 800d93e:	4c20      	ldr	r4, [pc, #128]	; (800d9c0 <_malloc_r+0xb0>)
 800d940:	6823      	ldr	r3, [r4, #0]
 800d942:	b91b      	cbnz	r3, 800d94c <_malloc_r+0x3c>
 800d944:	4630      	mov	r0, r6
 800d946:	f000 f98f 	bl	800dc68 <_sbrk_r>
 800d94a:	6020      	str	r0, [r4, #0]
 800d94c:	4629      	mov	r1, r5
 800d94e:	4630      	mov	r0, r6
 800d950:	f000 f98a 	bl	800dc68 <_sbrk_r>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	d124      	bne.n	800d9a2 <_malloc_r+0x92>
 800d958:	230c      	movs	r3, #12
 800d95a:	6033      	str	r3, [r6, #0]
 800d95c:	4630      	mov	r0, r6
 800d95e:	f000 f9bf 	bl	800dce0 <__malloc_unlock>
 800d962:	e7e4      	b.n	800d92e <_malloc_r+0x1e>
 800d964:	680b      	ldr	r3, [r1, #0]
 800d966:	1b5b      	subs	r3, r3, r5
 800d968:	d418      	bmi.n	800d99c <_malloc_r+0x8c>
 800d96a:	2b0b      	cmp	r3, #11
 800d96c:	d90f      	bls.n	800d98e <_malloc_r+0x7e>
 800d96e:	600b      	str	r3, [r1, #0]
 800d970:	50cd      	str	r5, [r1, r3]
 800d972:	18cc      	adds	r4, r1, r3
 800d974:	4630      	mov	r0, r6
 800d976:	f000 f9b3 	bl	800dce0 <__malloc_unlock>
 800d97a:	f104 000b 	add.w	r0, r4, #11
 800d97e:	1d23      	adds	r3, r4, #4
 800d980:	f020 0007 	bic.w	r0, r0, #7
 800d984:	1ac3      	subs	r3, r0, r3
 800d986:	d0d3      	beq.n	800d930 <_malloc_r+0x20>
 800d988:	425a      	negs	r2, r3
 800d98a:	50e2      	str	r2, [r4, r3]
 800d98c:	e7d0      	b.n	800d930 <_malloc_r+0x20>
 800d98e:	428c      	cmp	r4, r1
 800d990:	684b      	ldr	r3, [r1, #4]
 800d992:	bf16      	itet	ne
 800d994:	6063      	strne	r3, [r4, #4]
 800d996:	6013      	streq	r3, [r2, #0]
 800d998:	460c      	movne	r4, r1
 800d99a:	e7eb      	b.n	800d974 <_malloc_r+0x64>
 800d99c:	460c      	mov	r4, r1
 800d99e:	6849      	ldr	r1, [r1, #4]
 800d9a0:	e7cc      	b.n	800d93c <_malloc_r+0x2c>
 800d9a2:	1cc4      	adds	r4, r0, #3
 800d9a4:	f024 0403 	bic.w	r4, r4, #3
 800d9a8:	42a0      	cmp	r0, r4
 800d9aa:	d005      	beq.n	800d9b8 <_malloc_r+0xa8>
 800d9ac:	1a21      	subs	r1, r4, r0
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f000 f95a 	bl	800dc68 <_sbrk_r>
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d0cf      	beq.n	800d958 <_malloc_r+0x48>
 800d9b8:	6025      	str	r5, [r4, #0]
 800d9ba:	e7db      	b.n	800d974 <_malloc_r+0x64>
 800d9bc:	20000264 	.word	0x20000264
 800d9c0:	20000268 	.word	0x20000268

0800d9c4 <__ssputs_r>:
 800d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c8:	688e      	ldr	r6, [r1, #8]
 800d9ca:	429e      	cmp	r6, r3
 800d9cc:	4682      	mov	sl, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	4690      	mov	r8, r2
 800d9d2:	4699      	mov	r9, r3
 800d9d4:	d837      	bhi.n	800da46 <__ssputs_r+0x82>
 800d9d6:	898a      	ldrh	r2, [r1, #12]
 800d9d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9dc:	d031      	beq.n	800da42 <__ssputs_r+0x7e>
 800d9de:	6825      	ldr	r5, [r4, #0]
 800d9e0:	6909      	ldr	r1, [r1, #16]
 800d9e2:	1a6f      	subs	r7, r5, r1
 800d9e4:	6965      	ldr	r5, [r4, #20]
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9ec:	fb95 f5f3 	sdiv	r5, r5, r3
 800d9f0:	f109 0301 	add.w	r3, r9, #1
 800d9f4:	443b      	add	r3, r7
 800d9f6:	429d      	cmp	r5, r3
 800d9f8:	bf38      	it	cc
 800d9fa:	461d      	movcc	r5, r3
 800d9fc:	0553      	lsls	r3, r2, #21
 800d9fe:	d530      	bpl.n	800da62 <__ssputs_r+0x9e>
 800da00:	4629      	mov	r1, r5
 800da02:	f7ff ff85 	bl	800d910 <_malloc_r>
 800da06:	4606      	mov	r6, r0
 800da08:	b950      	cbnz	r0, 800da20 <__ssputs_r+0x5c>
 800da0a:	230c      	movs	r3, #12
 800da0c:	f8ca 3000 	str.w	r3, [sl]
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	f04f 30ff 	mov.w	r0, #4294967295
 800da1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da20:	463a      	mov	r2, r7
 800da22:	6921      	ldr	r1, [r4, #16]
 800da24:	f7ff fc32 	bl	800d28c <memcpy>
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da32:	81a3      	strh	r3, [r4, #12]
 800da34:	6126      	str	r6, [r4, #16]
 800da36:	6165      	str	r5, [r4, #20]
 800da38:	443e      	add	r6, r7
 800da3a:	1bed      	subs	r5, r5, r7
 800da3c:	6026      	str	r6, [r4, #0]
 800da3e:	60a5      	str	r5, [r4, #8]
 800da40:	464e      	mov	r6, r9
 800da42:	454e      	cmp	r6, r9
 800da44:	d900      	bls.n	800da48 <__ssputs_r+0x84>
 800da46:	464e      	mov	r6, r9
 800da48:	4632      	mov	r2, r6
 800da4a:	4641      	mov	r1, r8
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	f000 f92d 	bl	800dcac <memmove>
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	1b9b      	subs	r3, r3, r6
 800da56:	60a3      	str	r3, [r4, #8]
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	441e      	add	r6, r3
 800da5c:	6026      	str	r6, [r4, #0]
 800da5e:	2000      	movs	r0, #0
 800da60:	e7dc      	b.n	800da1c <__ssputs_r+0x58>
 800da62:	462a      	mov	r2, r5
 800da64:	f000 f93d 	bl	800dce2 <_realloc_r>
 800da68:	4606      	mov	r6, r0
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d1e2      	bne.n	800da34 <__ssputs_r+0x70>
 800da6e:	6921      	ldr	r1, [r4, #16]
 800da70:	4650      	mov	r0, sl
 800da72:	f7ff feff 	bl	800d874 <_free_r>
 800da76:	e7c8      	b.n	800da0a <__ssputs_r+0x46>

0800da78 <_svfiprintf_r>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	461d      	mov	r5, r3
 800da7e:	898b      	ldrh	r3, [r1, #12]
 800da80:	061f      	lsls	r7, r3, #24
 800da82:	b09d      	sub	sp, #116	; 0x74
 800da84:	4680      	mov	r8, r0
 800da86:	460c      	mov	r4, r1
 800da88:	4616      	mov	r6, r2
 800da8a:	d50f      	bpl.n	800daac <_svfiprintf_r+0x34>
 800da8c:	690b      	ldr	r3, [r1, #16]
 800da8e:	b96b      	cbnz	r3, 800daac <_svfiprintf_r+0x34>
 800da90:	2140      	movs	r1, #64	; 0x40
 800da92:	f7ff ff3d 	bl	800d910 <_malloc_r>
 800da96:	6020      	str	r0, [r4, #0]
 800da98:	6120      	str	r0, [r4, #16]
 800da9a:	b928      	cbnz	r0, 800daa8 <_svfiprintf_r+0x30>
 800da9c:	230c      	movs	r3, #12
 800da9e:	f8c8 3000 	str.w	r3, [r8]
 800daa2:	f04f 30ff 	mov.w	r0, #4294967295
 800daa6:	e0c8      	b.n	800dc3a <_svfiprintf_r+0x1c2>
 800daa8:	2340      	movs	r3, #64	; 0x40
 800daaa:	6163      	str	r3, [r4, #20]
 800daac:	2300      	movs	r3, #0
 800daae:	9309      	str	r3, [sp, #36]	; 0x24
 800dab0:	2320      	movs	r3, #32
 800dab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dab6:	2330      	movs	r3, #48	; 0x30
 800dab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dabc:	9503      	str	r5, [sp, #12]
 800dabe:	f04f 0b01 	mov.w	fp, #1
 800dac2:	4637      	mov	r7, r6
 800dac4:	463d      	mov	r5, r7
 800dac6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800daca:	b10b      	cbz	r3, 800dad0 <_svfiprintf_r+0x58>
 800dacc:	2b25      	cmp	r3, #37	; 0x25
 800dace:	d13e      	bne.n	800db4e <_svfiprintf_r+0xd6>
 800dad0:	ebb7 0a06 	subs.w	sl, r7, r6
 800dad4:	d00b      	beq.n	800daee <_svfiprintf_r+0x76>
 800dad6:	4653      	mov	r3, sl
 800dad8:	4632      	mov	r2, r6
 800dada:	4621      	mov	r1, r4
 800dadc:	4640      	mov	r0, r8
 800dade:	f7ff ff71 	bl	800d9c4 <__ssputs_r>
 800dae2:	3001      	adds	r0, #1
 800dae4:	f000 80a4 	beq.w	800dc30 <_svfiprintf_r+0x1b8>
 800dae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daea:	4453      	add	r3, sl
 800daec:	9309      	str	r3, [sp, #36]	; 0x24
 800daee:	783b      	ldrb	r3, [r7, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 809d 	beq.w	800dc30 <_svfiprintf_r+0x1b8>
 800daf6:	2300      	movs	r3, #0
 800daf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	9307      	str	r3, [sp, #28]
 800db04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db08:	931a      	str	r3, [sp, #104]	; 0x68
 800db0a:	462f      	mov	r7, r5
 800db0c:	2205      	movs	r2, #5
 800db0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800db12:	4850      	ldr	r0, [pc, #320]	; (800dc54 <_svfiprintf_r+0x1dc>)
 800db14:	f7f2 fb74 	bl	8000200 <memchr>
 800db18:	9b04      	ldr	r3, [sp, #16]
 800db1a:	b9d0      	cbnz	r0, 800db52 <_svfiprintf_r+0xda>
 800db1c:	06d9      	lsls	r1, r3, #27
 800db1e:	bf44      	itt	mi
 800db20:	2220      	movmi	r2, #32
 800db22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db26:	071a      	lsls	r2, r3, #28
 800db28:	bf44      	itt	mi
 800db2a:	222b      	movmi	r2, #43	; 0x2b
 800db2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db30:	782a      	ldrb	r2, [r5, #0]
 800db32:	2a2a      	cmp	r2, #42	; 0x2a
 800db34:	d015      	beq.n	800db62 <_svfiprintf_r+0xea>
 800db36:	9a07      	ldr	r2, [sp, #28]
 800db38:	462f      	mov	r7, r5
 800db3a:	2000      	movs	r0, #0
 800db3c:	250a      	movs	r5, #10
 800db3e:	4639      	mov	r1, r7
 800db40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db44:	3b30      	subs	r3, #48	; 0x30
 800db46:	2b09      	cmp	r3, #9
 800db48:	d94d      	bls.n	800dbe6 <_svfiprintf_r+0x16e>
 800db4a:	b1b8      	cbz	r0, 800db7c <_svfiprintf_r+0x104>
 800db4c:	e00f      	b.n	800db6e <_svfiprintf_r+0xf6>
 800db4e:	462f      	mov	r7, r5
 800db50:	e7b8      	b.n	800dac4 <_svfiprintf_r+0x4c>
 800db52:	4a40      	ldr	r2, [pc, #256]	; (800dc54 <_svfiprintf_r+0x1dc>)
 800db54:	1a80      	subs	r0, r0, r2
 800db56:	fa0b f000 	lsl.w	r0, fp, r0
 800db5a:	4318      	orrs	r0, r3
 800db5c:	9004      	str	r0, [sp, #16]
 800db5e:	463d      	mov	r5, r7
 800db60:	e7d3      	b.n	800db0a <_svfiprintf_r+0x92>
 800db62:	9a03      	ldr	r2, [sp, #12]
 800db64:	1d11      	adds	r1, r2, #4
 800db66:	6812      	ldr	r2, [r2, #0]
 800db68:	9103      	str	r1, [sp, #12]
 800db6a:	2a00      	cmp	r2, #0
 800db6c:	db01      	blt.n	800db72 <_svfiprintf_r+0xfa>
 800db6e:	9207      	str	r2, [sp, #28]
 800db70:	e004      	b.n	800db7c <_svfiprintf_r+0x104>
 800db72:	4252      	negs	r2, r2
 800db74:	f043 0302 	orr.w	r3, r3, #2
 800db78:	9207      	str	r2, [sp, #28]
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	783b      	ldrb	r3, [r7, #0]
 800db7e:	2b2e      	cmp	r3, #46	; 0x2e
 800db80:	d10c      	bne.n	800db9c <_svfiprintf_r+0x124>
 800db82:	787b      	ldrb	r3, [r7, #1]
 800db84:	2b2a      	cmp	r3, #42	; 0x2a
 800db86:	d133      	bne.n	800dbf0 <_svfiprintf_r+0x178>
 800db88:	9b03      	ldr	r3, [sp, #12]
 800db8a:	1d1a      	adds	r2, r3, #4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	9203      	str	r2, [sp, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	bfb8      	it	lt
 800db94:	f04f 33ff 	movlt.w	r3, #4294967295
 800db98:	3702      	adds	r7, #2
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	4d2e      	ldr	r5, [pc, #184]	; (800dc58 <_svfiprintf_r+0x1e0>)
 800db9e:	7839      	ldrb	r1, [r7, #0]
 800dba0:	2203      	movs	r2, #3
 800dba2:	4628      	mov	r0, r5
 800dba4:	f7f2 fb2c 	bl	8000200 <memchr>
 800dba8:	b138      	cbz	r0, 800dbba <_svfiprintf_r+0x142>
 800dbaa:	2340      	movs	r3, #64	; 0x40
 800dbac:	1b40      	subs	r0, r0, r5
 800dbae:	fa03 f000 	lsl.w	r0, r3, r0
 800dbb2:	9b04      	ldr	r3, [sp, #16]
 800dbb4:	4303      	orrs	r3, r0
 800dbb6:	3701      	adds	r7, #1
 800dbb8:	9304      	str	r3, [sp, #16]
 800dbba:	7839      	ldrb	r1, [r7, #0]
 800dbbc:	4827      	ldr	r0, [pc, #156]	; (800dc5c <_svfiprintf_r+0x1e4>)
 800dbbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbc2:	2206      	movs	r2, #6
 800dbc4:	1c7e      	adds	r6, r7, #1
 800dbc6:	f7f2 fb1b 	bl	8000200 <memchr>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d038      	beq.n	800dc40 <_svfiprintf_r+0x1c8>
 800dbce:	4b24      	ldr	r3, [pc, #144]	; (800dc60 <_svfiprintf_r+0x1e8>)
 800dbd0:	bb13      	cbnz	r3, 800dc18 <_svfiprintf_r+0x1a0>
 800dbd2:	9b03      	ldr	r3, [sp, #12]
 800dbd4:	3307      	adds	r3, #7
 800dbd6:	f023 0307 	bic.w	r3, r3, #7
 800dbda:	3308      	adds	r3, #8
 800dbdc:	9303      	str	r3, [sp, #12]
 800dbde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe0:	444b      	add	r3, r9
 800dbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe4:	e76d      	b.n	800dac2 <_svfiprintf_r+0x4a>
 800dbe6:	fb05 3202 	mla	r2, r5, r2, r3
 800dbea:	2001      	movs	r0, #1
 800dbec:	460f      	mov	r7, r1
 800dbee:	e7a6      	b.n	800db3e <_svfiprintf_r+0xc6>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	3701      	adds	r7, #1
 800dbf4:	9305      	str	r3, [sp, #20]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	250a      	movs	r5, #10
 800dbfa:	4638      	mov	r0, r7
 800dbfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc00:	3a30      	subs	r2, #48	; 0x30
 800dc02:	2a09      	cmp	r2, #9
 800dc04:	d903      	bls.n	800dc0e <_svfiprintf_r+0x196>
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0c8      	beq.n	800db9c <_svfiprintf_r+0x124>
 800dc0a:	9105      	str	r1, [sp, #20]
 800dc0c:	e7c6      	b.n	800db9c <_svfiprintf_r+0x124>
 800dc0e:	fb05 2101 	mla	r1, r5, r1, r2
 800dc12:	2301      	movs	r3, #1
 800dc14:	4607      	mov	r7, r0
 800dc16:	e7f0      	b.n	800dbfa <_svfiprintf_r+0x182>
 800dc18:	ab03      	add	r3, sp, #12
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	4622      	mov	r2, r4
 800dc1e:	4b11      	ldr	r3, [pc, #68]	; (800dc64 <_svfiprintf_r+0x1ec>)
 800dc20:	a904      	add	r1, sp, #16
 800dc22:	4640      	mov	r0, r8
 800dc24:	f7fe f8d6 	bl	800bdd4 <_printf_float>
 800dc28:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc2c:	4681      	mov	r9, r0
 800dc2e:	d1d6      	bne.n	800dbde <_svfiprintf_r+0x166>
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	065b      	lsls	r3, r3, #25
 800dc34:	f53f af35 	bmi.w	800daa2 <_svfiprintf_r+0x2a>
 800dc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc3a:	b01d      	add	sp, #116	; 0x74
 800dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	ab03      	add	r3, sp, #12
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	4622      	mov	r2, r4
 800dc46:	4b07      	ldr	r3, [pc, #28]	; (800dc64 <_svfiprintf_r+0x1ec>)
 800dc48:	a904      	add	r1, sp, #16
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	f7fe fb78 	bl	800c340 <_printf_i>
 800dc50:	e7ea      	b.n	800dc28 <_svfiprintf_r+0x1b0>
 800dc52:	bf00      	nop
 800dc54:	0800e324 	.word	0x0800e324
 800dc58:	0800e32a 	.word	0x0800e32a
 800dc5c:	0800e32e 	.word	0x0800e32e
 800dc60:	0800bdd5 	.word	0x0800bdd5
 800dc64:	0800d9c5 	.word	0x0800d9c5

0800dc68 <_sbrk_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4c06      	ldr	r4, [pc, #24]	; (800dc84 <_sbrk_r+0x1c>)
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4605      	mov	r5, r0
 800dc70:	4608      	mov	r0, r1
 800dc72:	6023      	str	r3, [r4, #0]
 800dc74:	f7f9 ff82 	bl	8007b7c <_sbrk>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_sbrk_r+0x1a>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_sbrk_r+0x1a>
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	20003414 	.word	0x20003414

0800dc88 <__ascii_mbtowc>:
 800dc88:	b082      	sub	sp, #8
 800dc8a:	b901      	cbnz	r1, 800dc8e <__ascii_mbtowc+0x6>
 800dc8c:	a901      	add	r1, sp, #4
 800dc8e:	b142      	cbz	r2, 800dca2 <__ascii_mbtowc+0x1a>
 800dc90:	b14b      	cbz	r3, 800dca6 <__ascii_mbtowc+0x1e>
 800dc92:	7813      	ldrb	r3, [r2, #0]
 800dc94:	600b      	str	r3, [r1, #0]
 800dc96:	7812      	ldrb	r2, [r2, #0]
 800dc98:	1c10      	adds	r0, r2, #0
 800dc9a:	bf18      	it	ne
 800dc9c:	2001      	movne	r0, #1
 800dc9e:	b002      	add	sp, #8
 800dca0:	4770      	bx	lr
 800dca2:	4610      	mov	r0, r2
 800dca4:	e7fb      	b.n	800dc9e <__ascii_mbtowc+0x16>
 800dca6:	f06f 0001 	mvn.w	r0, #1
 800dcaa:	e7f8      	b.n	800dc9e <__ascii_mbtowc+0x16>

0800dcac <memmove>:
 800dcac:	4288      	cmp	r0, r1
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	eb01 0302 	add.w	r3, r1, r2
 800dcb4:	d807      	bhi.n	800dcc6 <memmove+0x1a>
 800dcb6:	1e42      	subs	r2, r0, #1
 800dcb8:	4299      	cmp	r1, r3
 800dcba:	d00a      	beq.n	800dcd2 <memmove+0x26>
 800dcbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dcc4:	e7f8      	b.n	800dcb8 <memmove+0xc>
 800dcc6:	4283      	cmp	r3, r0
 800dcc8:	d9f5      	bls.n	800dcb6 <memmove+0xa>
 800dcca:	1881      	adds	r1, r0, r2
 800dccc:	1ad2      	subs	r2, r2, r3
 800dcce:	42d3      	cmn	r3, r2
 800dcd0:	d100      	bne.n	800dcd4 <memmove+0x28>
 800dcd2:	bd10      	pop	{r4, pc}
 800dcd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dcdc:	e7f7      	b.n	800dcce <memmove+0x22>

0800dcde <__malloc_lock>:
 800dcde:	4770      	bx	lr

0800dce0 <__malloc_unlock>:
 800dce0:	4770      	bx	lr

0800dce2 <_realloc_r>:
 800dce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce4:	4607      	mov	r7, r0
 800dce6:	4614      	mov	r4, r2
 800dce8:	460e      	mov	r6, r1
 800dcea:	b921      	cbnz	r1, 800dcf6 <_realloc_r+0x14>
 800dcec:	4611      	mov	r1, r2
 800dcee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcf2:	f7ff be0d 	b.w	800d910 <_malloc_r>
 800dcf6:	b922      	cbnz	r2, 800dd02 <_realloc_r+0x20>
 800dcf8:	f7ff fdbc 	bl	800d874 <_free_r>
 800dcfc:	4625      	mov	r5, r4
 800dcfe:	4628      	mov	r0, r5
 800dd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd02:	f000 f821 	bl	800dd48 <_malloc_usable_size_r>
 800dd06:	42a0      	cmp	r0, r4
 800dd08:	d20f      	bcs.n	800dd2a <_realloc_r+0x48>
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7ff fdff 	bl	800d910 <_malloc_r>
 800dd12:	4605      	mov	r5, r0
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d0f2      	beq.n	800dcfe <_realloc_r+0x1c>
 800dd18:	4631      	mov	r1, r6
 800dd1a:	4622      	mov	r2, r4
 800dd1c:	f7ff fab6 	bl	800d28c <memcpy>
 800dd20:	4631      	mov	r1, r6
 800dd22:	4638      	mov	r0, r7
 800dd24:	f7ff fda6 	bl	800d874 <_free_r>
 800dd28:	e7e9      	b.n	800dcfe <_realloc_r+0x1c>
 800dd2a:	4635      	mov	r5, r6
 800dd2c:	e7e7      	b.n	800dcfe <_realloc_r+0x1c>

0800dd2e <__ascii_wctomb>:
 800dd2e:	b149      	cbz	r1, 800dd44 <__ascii_wctomb+0x16>
 800dd30:	2aff      	cmp	r2, #255	; 0xff
 800dd32:	bf85      	ittet	hi
 800dd34:	238a      	movhi	r3, #138	; 0x8a
 800dd36:	6003      	strhi	r3, [r0, #0]
 800dd38:	700a      	strbls	r2, [r1, #0]
 800dd3a:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd3e:	bf98      	it	ls
 800dd40:	2001      	movls	r0, #1
 800dd42:	4770      	bx	lr
 800dd44:	4608      	mov	r0, r1
 800dd46:	4770      	bx	lr

0800dd48 <_malloc_usable_size_r>:
 800dd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd4c:	1f18      	subs	r0, r3, #4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bfbc      	itt	lt
 800dd52:	580b      	ldrlt	r3, [r1, r0]
 800dd54:	18c0      	addlt	r0, r0, r3
 800dd56:	4770      	bx	lr

0800dd58 <_init>:
 800dd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5a:	bf00      	nop
 800dd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5e:	bc08      	pop	{r3}
 800dd60:	469e      	mov	lr, r3
 800dd62:	4770      	bx	lr

0800dd64 <_fini>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr
