
sp-ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800d978  0800d978  0001d978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfc8  0800dfc8  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfc8  0800dfc8  0001dfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfd0  0800dfd0  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfd0  0800dfd0  0001dfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dfd4  0800dfd4  0001dfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800dfd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031e0  20000238  0800e210  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003418  0800e210  00023418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186c5  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003651  00000000  00000000  0003892d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016c0  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001578  00000000  00000000  0003d640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247cf  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140a1  00000000  00000000  00063387  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7ba7  00000000  00000000  00077428  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014efcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  0014f04c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d960 	.word	0x0800d960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800d960 	.word	0x0800d960

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_HTTP_ParseHeader>:
#define CHECK_CONNECTION(a1,a2) arg=(NET_GetIndexForPattern(a2)!=-1)?false:true
#define IF_GET(arg) if(strcmp(req,arg)==0)
#define OR_GET(arg) else if(strcmp(req,arg)==0)

char* _HTTP_ParseHeader(char *response, char *contentType, uint32_t length,
		char *connection) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	__resetResponse();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	e007      	b.n	8000eec <_HTTP_ParseHeader+0x24>
 8000edc:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ef2:	dbf3      	blt.n	8000edc <_HTTP_ParseHeader+0x14>
	__resetLine();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
 8000ef8:	e007      	b.n	8000f0a <_HTTP_ParseHeader+0x42>
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	4413      	add	r3, r2
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	3301      	adds	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	2b63      	cmp	r3, #99	; 0x63
 8000f0e:	ddf4      	ble.n	8000efa <_HTTP_ParseHeader+0x32>

	sprintf(_line, "HTTP/1.1 %s\r\n", response);
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	492b      	ldr	r1, [pc, #172]	; (8000fc0 <_HTTP_ParseHeader+0xf8>)
 8000f14:	4829      	ldr	r0, [pc, #164]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f16:	f00b f929 	bl	800c16c <siprintf>
	strcpy(_response, _line);
 8000f1a:	4928      	ldr	r1, [pc, #160]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f1c:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f1e:	f00b f954 	bl	800c1ca <strcpy>
	__resetLine();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e007      	b.n	8000f38 <_HTTP_ParseHeader+0x70>
 8000f28:	4a24      	ldr	r2, [pc, #144]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b63      	cmp	r3, #99	; 0x63
 8000f3c:	ddf4      	ble.n	8000f28 <_HTTP_ParseHeader+0x60>

	sprintf(_line, "Content-Type: %s\r\n", contentType);
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	4920      	ldr	r1, [pc, #128]	; (8000fc4 <_HTTP_ParseHeader+0xfc>)
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f44:	f00b f912 	bl	800c16c <siprintf>
	strcat(_response, _line);
 8000f48:	491c      	ldr	r1, [pc, #112]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f4a:	481b      	ldr	r0, [pc, #108]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f4c:	f00b f92e 	bl	800c1ac <strcat>
	__resetLine();
 8000f50:	2300      	movs	r3, #0
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	e007      	b.n	8000f66 <_HTTP_ParseHeader+0x9e>
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b63      	cmp	r3, #99	; 0x63
 8000f6a:	ddf4      	ble.n	8000f56 <_HTTP_ParseHeader+0x8e>

	sprintf(_line, "Content-Lenght: %ld\r\n", length);
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <_HTTP_ParseHeader+0x100>)
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f72:	f00b f8fb 	bl	800c16c <siprintf>
	strcat(_response, _line);
 8000f76:	4911      	ldr	r1, [pc, #68]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f78:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000f7a:	f00b f917 	bl	800c1ac <strcat>
	__resetLine();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e007      	b.n	8000f94 <_HTTP_ParseHeader+0xcc>
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b63      	cmp	r3, #99	; 0x63
 8000f98:	ddf4      	ble.n	8000f84 <_HTTP_ParseHeader+0xbc>

	sprintf(_line, "Connection: %s\r\n\r\n", connection);
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	490b      	ldr	r1, [pc, #44]	; (8000fcc <_HTTP_ParseHeader+0x104>)
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000fa0:	f00b f8e4 	bl	800c16c <siprintf>
	strcat(_response, _line);
 8000fa4:	4905      	ldr	r1, [pc, #20]	; (8000fbc <_HTTP_ParseHeader+0xf4>)
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
 8000fa8:	f00b f900 	bl	800c1ac <strcat>

	return (char*) _response;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <_HTTP_ParseHeader+0xf0>)
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002e4 	.word	0x200002e4
 8000fbc:	2000026c 	.word	0x2000026c
 8000fc0:	0800d978 	.word	0x0800d978
 8000fc4:	0800d988 	.word	0x0800d988
 8000fc8:	0800d99c 	.word	0x0800d99c
 8000fcc:	0800d9b4 	.word	0x0800d9b4

08000fd0 <_NET_GetRequest>:

char* _NET_GetRequest(char *request) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	int cursor = NET_GetIndexForPattern(GET_FILE_PATTERN);
 8000fd8:	4818      	ldr	r0, [pc, #96]	; (800103c <_NET_GetRequest+0x6c>)
 8000fda:	f001 fe33 	bl	8002c44 <NET_GetIndexForPattern>
 8000fde:	6178      	str	r0, [r7, #20]
	int index = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]

	__resetRequest();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e007      	b.n	8000ffa <_NET_GetRequest+0x2a>
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <_NET_GetRequest+0x70>)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b13      	cmp	r3, #19
 8000ffe:	ddf4      	ble.n	8000fea <_NET_GetRequest+0x1a>
	if (cursor != -1) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d014      	beq.n	8001032 <_NET_GetRequest+0x62>
		while (request[cursor] != ' ') {
 8001008:	e00b      	b.n	8001022 <_NET_GetRequest+0x52>
			_request[index++] = request[cursor++];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	617a      	str	r2, [r7, #20]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	441a      	add	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1c59      	adds	r1, r3, #1
 800101a:	6139      	str	r1, [r7, #16]
 800101c:	7811      	ldrb	r1, [r2, #0]
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <_NET_GetRequest+0x70>)
 8001020:	54d1      	strb	r1, [r2, r3]
		while (request[cursor] != ' ') {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b20      	cmp	r3, #32
 800102c:	d1ed      	bne.n	800100a <_NET_GetRequest+0x3a>
		}
		return (char*) _request;
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <_NET_GetRequest+0x70>)
 8001030:	e000      	b.n	8001034 <_NET_GetRequest+0x64>
	}
	return NULL;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	0800d9c8 	.word	0x0800d9c8
 8001040:	200002d0 	.word	0x200002d0

08001044 <HTTP_HandleRequest>:

void HTTP_HandleRequest(char *request, char connID) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	char *req = _NET_GetRequest(request);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ffbd 	bl	8000fd0 <_NET_GetRequest>
 8001056:	6178      	str	r0, [r7, #20]
	char *header;
	char *file;
	uint32_t size;

	IF_GET("/") {
 8001058:	491f      	ldr	r1, [pc, #124]	; (80010d8 <HTTP_HandleRequest+0x94>)
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff f8b8 	bl	80001d0 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11c      	bne.n	80010a0 <HTTP_HandleRequest+0x5c>
		file = SD_ReadFile("index.htm", &size);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4619      	mov	r1, r3
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <HTTP_HandleRequest+0x98>)
 800106e:	f002 fe19 	bl	8003ca4 <SD_ReadFile>
 8001072:	60f8      	str	r0, [r7, #12]
		header = _HTTP_ParseHeader(RSP_OK, CT_HTML, size, CN_CLOSE);
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HTTP_HandleRequest+0x9c>)
 8001078:	491a      	ldr	r1, [pc, #104]	; (80010e4 <HTTP_HandleRequest+0xa0>)
 800107a:	481b      	ldr	r0, [pc, #108]	; (80010e8 <HTTP_HandleRequest+0xa4>)
 800107c:	f7ff ff24 	bl	8000ec8 <_HTTP_ParseHeader>
 8001080:	6138      	str	r0, [r7, #16]

		NET_SendTCPData(connID, header);
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	6939      	ldr	r1, [r7, #16]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 f924 	bl	80032d4 <NET_SendTCPData>
		NET_SendTCPData(connID, file);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f91f 	bl	80032d4 <NET_SendTCPData>

		NET_CloseConnSignal(connID);
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f979 	bl	8003390 <NET_CloseConnSignal>
		/* nieobslugiwane zadanie */
		header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, 0, CN_CLOSE);
		NET_SendTCPData(connID, header);
		NET_CloseConnSignal(connID);
	}
}
 800109e:	e016      	b.n	80010ce <HTTP_HandleRequest+0x8a>
	OR_GET("/#about") {
 80010a0:	4912      	ldr	r1, [pc, #72]	; (80010ec <HTTP_HandleRequest+0xa8>)
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff f894 	bl	80001d0 <strcmp>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00f      	beq.n	80010ce <HTTP_HandleRequest+0x8a>
		header = _HTTP_ParseHeader(RSP_NOT_FOUND, CT_HTML, 0, CN_CLOSE);
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HTTP_HandleRequest+0x9c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	490c      	ldr	r1, [pc, #48]	; (80010e4 <HTTP_HandleRequest+0xa0>)
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <HTTP_HandleRequest+0xac>)
 80010b6:	f7ff ff07 	bl	8000ec8 <_HTTP_ParseHeader>
 80010ba:	6138      	str	r0, [r7, #16]
		NET_SendTCPData(connID, header);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f907 	bl	80032d4 <NET_SendTCPData>
		NET_CloseConnSignal(connID);
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 f961 	bl	8003390 <NET_CloseConnSignal>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800d9d0 	.word	0x0800d9d0
 80010dc:	0800d9d4 	.word	0x0800d9d4
 80010e0:	0800d9e0 	.word	0x0800d9e0
 80010e4:	0800d9e8 	.word	0x0800d9e8
 80010e8:	0800d9f4 	.word	0x0800d9f4
 80010ec:	0800d9fc 	.word	0x0800d9fc
 80010f0:	0800da04 	.word	0x0800da04

080010f4 <_LCD_SetRowOffsets>:
uint8_t _displayMode;

uint8_t _currentRow;
uint8_t _currentCol;

void _LCD_SetRowOffsets(int row0, int row1, int row2, int row3) {
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
 8001100:	603b      	str	r3, [r7, #0]
	_rowOffsets[0] = row0;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <_LCD_SetRowOffsets+0x3c>)
 8001108:	701a      	strb	r2, [r3, #0]
	_rowOffsets[1] = row1;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_LCD_SetRowOffsets+0x3c>)
 8001110:	705a      	strb	r2, [r3, #1]
	_rowOffsets[2] = row2;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <_LCD_SetRowOffsets+0x3c>)
 8001118:	709a      	strb	r2, [r3, #2]
	_rowOffsets[3] = row3;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <_LCD_SetRowOffsets+0x3c>)
 8001120:	70da      	strb	r2, [r3, #3]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000484 	.word	0x20000484

08001134 <_LCD_EnableSignal>:

void _LCD_EnableSignal(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <_LCD_EnableSignal+0x38>)
 800113e:	f006 ff07 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f006 fbfc 	bl	8007940 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <_LCD_EnableSignal+0x38>)
 800114e:	f006 feff 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f006 fbf4 	bl	8007940 <HAL_Delay>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2140      	movs	r1, #64	; 0x40
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <_LCD_EnableSignal+0x38>)
 800115e:	f006 fef7 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f006 fbec 	bl	8007940 <HAL_Delay>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000

08001170 <_LCD_WriteData>:

void _LCD_WriteData(uint8_t value) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	e012      	b.n	80011a6 <_LCD_WriteData+0x36>
		/* Little Endian */
		HAL_GPIO_WritePin(PORT, _readyData[i],
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <_LCD_WriteData+0x48>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
				((value >> i) & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001188:	79fa      	ldrb	r2, [r7, #7]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	fa42 f303 	asr.w	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(PORT, _readyData[i],
 8001198:	461a      	mov	r2, r3
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <_LCD_WriteData+0x4c>)
 800119c:	f006 fed8 	bl	8007f50 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	dde9      	ble.n	8001180 <_LCD_WriteData+0x10>
	}

	_LCD_EnableSignal();
 80011ac:	f7ff ffc2 	bl	8001134 <_LCD_EnableSignal>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000478 	.word	0x20000478
 80011bc:	40021000 	.word	0x40021000

080011c0 <_LCD_SendByteWithState>:

void _LCD_SendByteWithState(uint8_t value, GPIO_PinState mode) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(PORT, RS_PIN, mode);
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	461a      	mov	r2, r3
 80011d4:	2110      	movs	r1, #16
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <_LCD_SendByteWithState+0x44>)
 80011d8:	f006 feba 	bl	8007f50 <HAL_GPIO_WritePin>

	if (RW_PIN != 255) {
		HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2120      	movs	r1, #32
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <_LCD_SendByteWithState+0x44>)
 80011e2:	f006 feb5 	bl	8007f50 <HAL_GPIO_WritePin>
	}

	_LCD_WriteData(value >> 4);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffbf 	bl	8001170 <_LCD_WriteData>
	_LCD_WriteData(value);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffbb 	bl	8001170 <_LCD_WriteData>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <_LCD_SendCommand>:

void _LCD_SendCommand(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	_LCD_SendByteWithState(value, GPIO_PIN_RESET);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffd2 	bl	80011c0 <_LCD_SendByteWithState>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_LCD_SendData>:

void _LCD_SendData(uint8_t value, bool moveCursor) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	_LCD_SendByteWithState(value, GPIO_PIN_SET);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ffc1 	bl	80011c0 <_LCD_SendByteWithState>

	if (moveCursor) {
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d021      	beq.n	8001288 <_LCD_SendData+0x64>
		++_currentCol;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <_LCD_SendData+0x6c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_LCD_SendData+0x6c>)
 800124e:	701a      	strb	r2, [r3, #0]
		if (_currentCol >= COLUMNS) {
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <_LCD_SendData+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b13      	cmp	r3, #19
 8001256:	d917      	bls.n	8001288 <_LCD_SendData+0x64>
			_currentCol = 0;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <_LCD_SendData+0x6c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
			++_currentRow;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <_LCD_SendData+0x70>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <_LCD_SendData+0x70>)
 8001268:	701a      	strb	r2, [r3, #0]

			if (_currentRow >= ROWS) {
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <_LCD_SendData+0x70>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d902      	bls.n	8001278 <_LCD_SendData+0x54>
				_currentRow = 0;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_LCD_SendData+0x70>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
			}
			LCD_SetCursor(_currentCol, _currentRow);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <_LCD_SendData+0x6c>)
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <_LCD_SendData+0x70>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4610      	mov	r0, r2
 8001284:	f000 f900 	bl	8001488 <LCD_SetCursor>
		}
	}
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000489 	.word	0x20000489
 8001294:	20000474 	.word	0x20000474

08001298 <LCD_Init>:

void LCD_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
	/* Piny danych */
	_readyData[0] = D4_PIN;
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <LCD_Init+0x150>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	801a      	strh	r2, [r3, #0]
	_readyData[1] = D5_PIN;
 80012a4:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <LCD_Init+0x150>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	805a      	strh	r2, [r3, #2]
	_readyData[2] = D6_PIN;
 80012aa:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <LCD_Init+0x150>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	809a      	strh	r2, [r3, #4]
	_readyData[3] = D7_PIN;
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <LCD_Init+0x150>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	80da      	strh	r2, [r3, #6]

	_displayFunction = FOUR_BIT_MODE | TWO_LINE | TWENTY_DOTS;
 80012b6:	4b4d      	ldr	r3, [pc, #308]	; (80013ec <LCD_Init+0x154>)
 80012b8:	2208      	movs	r2, #8
 80012ba:	701a      	strb	r2, [r3, #0]

	/* Start z wlaczonym podswietleniem */
	LCD_BackgroundOn();
 80012bc:	f000 f8ba 	bl	8001434 <LCD_BackgroundOn>
	_LCD_SetRowOffsets(0x00, 0x40, 0x00 + COLUMNS, 0x40 + COLUMNS);
 80012c0:	2354      	movs	r3, #84	; 0x54
 80012c2:	2214      	movs	r2, #20
 80012c4:	2140      	movs	r1, #64	; 0x40
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ff14 	bl	80010f4 <_LCD_SetRowOffsets>

	/* Opoznienia sa w celu ustablizowania napiec na diodach ekranu */
	HAL_Delay(50);
 80012cc:	2032      	movs	r0, #50	; 0x32
 80012ce:	f006 fb37 	bl	8007940 <HAL_Delay>

	HAL_GPIO_WritePin(PORT, RS_PIN, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2110      	movs	r1, #16
 80012d6:	4846      	ldr	r0, [pc, #280]	; (80013f0 <LCD_Init+0x158>)
 80012d8:	f006 fe3a 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, EN_PIN, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	4843      	ldr	r0, [pc, #268]	; (80013f0 <LCD_Init+0x158>)
 80012e2:	f006 fe35 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT, RW_PIN, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2120      	movs	r1, #32
 80012ea:	4841      	ldr	r0, [pc, #260]	; (80013f0 <LCD_Init+0x158>)
 80012ec:	f006 fe30 	bl	8007f50 <HAL_GPIO_WritePin>

	/* procedura inicjalizacji dzialania na 4 bitach danych */
	_LCD_WriteData(0x03);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f7ff ff3d 	bl	8001170 <_LCD_WriteData>
	HAL_Delay(5);
 80012f6:	2005      	movs	r0, #5
 80012f8:	f006 fb22 	bl	8007940 <HAL_Delay>

	_LCD_WriteData(0x03);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff ff37 	bl	8001170 <_LCD_WriteData>
	HAL_Delay(5);
 8001302:	2005      	movs	r0, #5
 8001304:	f006 fb1c 	bl	8007940 <HAL_Delay>

	_LCD_WriteData(0x03);
 8001308:	2003      	movs	r0, #3
 800130a:	f7ff ff31 	bl	8001170 <_LCD_WriteData>
	HAL_Delay(1);
 800130e:	2001      	movs	r0, #1
 8001310:	f006 fb16 	bl	8007940 <HAL_Delay>

	_LCD_WriteData(0x02);
 8001314:	2002      	movs	r0, #2
 8001316:	f7ff ff2b 	bl	8001170 <_LCD_WriteData>
	_LCD_SendCommand(FUNCTION_SET | _displayFunction);
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <LCD_Init+0x154>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff6f 	bl	8001208 <_LCD_SendCommand>
	_displayControl = DISPLAY_ON | CURSOR_OFF | BLINK_OFF;
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <LCD_Init+0x15c>)
 800132c:	2204      	movs	r2, #4
 800132e:	701a      	strb	r2, [r3, #0]

	LCD_DisplayOn();
 8001330:	f000 f8da 	bl	80014e8 <LCD_DisplayOn>
	LCD_ClearScreen();
 8001334:	f000 f896 	bl	8001464 <LCD_ClearScreen>

	/* Domyslna forma tekstu */
	_displayMode = ENTRY_LEFT | ENTRY_SHIFT_DECREMENT;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <LCD_Init+0x160>)
 800133a:	2202      	movs	r2, #2
 800133c:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <LCD_Init+0x160>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <_LCD_SendCommand>

	_currentRow = 0;
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <LCD_Init+0x164>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
	_currentCol = 0;
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <LCD_Init+0x168>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

	LCD_PrintCentered("booting...");
 800135a:	482a      	ldr	r0, [pc, #168]	; (8001404 <LCD_Init+0x16c>)
 800135c:	f000 f956 	bl	800160c <LCD_PrintCentered>

	uint8_t char7[8] = { 0b11000, 0b11000, 0b00110, 0b01001, 0b01000, 0b01000,
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <LCD_Init+0x170>)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800136a:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01001, 0b00110 };
	LCD_DefineCustomChar(DEG_CHAR, char7); /* Stopnie */
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4619      	mov	r1, r3
 8001374:	2007      	movs	r0, #7
 8001376:	f000 fb59 	bl	8001a2c <LCD_DefineCustomChar>

	uint8_t char6[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b01001,
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <LCD_Init+0x174>)
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001384:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(TIN_CHAR, char6); /* Temp IN */
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4619      	mov	r1, r3
 800138e:	2006      	movs	r0, #6
 8001390:	f000 fb4c 	bl	8001a2c <LCD_DefineCustomChar>

	uint8_t char5[8] = { 0b11100, 0b01000, 0b01001, 0b00000, 0b01000, 0b11101,
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <LCD_Init+0x178>)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800139e:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(TOUT_CHAR, char5); /* Temp OUT */
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	2005      	movs	r0, #5
 80013aa:	f000 fb3f 	bl	8001a2c <LCD_DefineCustomChar>

	uint8_t char4[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b01001,
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <LCD_Init+0x17c>)
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b8:	e883 0003 	stmia.w	r3, {r0, r1}
			0b11100, 0b01000 };
	LCD_DefineCustomChar(HIN_CHAR, char4); /* Humid IN */
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4619      	mov	r1, r3
 80013c2:	2004      	movs	r0, #4
 80013c4:	f000 fb32 	bl	8001a2c <LCD_DefineCustomChar>

	uint8_t char3[8] = { 0b10100, 0b11100, 0b10101, 0b00000, 0b01000, 0b11101,
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <LCD_Init+0x180>)
 80013ca:	463b      	mov	r3, r7
 80013cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d0:	e883 0003 	stmia.w	r3, {r0, r1}
			0b01000, 0b01000 };
	LCD_DefineCustomChar(HOUT_CHAR, char3); /* Humid OUT */
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fb27 	bl	8001a2c <LCD_DefineCustomChar>
}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000478 	.word	0x20000478
 80013ec:	20000480 	.word	0x20000480
 80013f0:	40021000 	.word	0x40021000
 80013f4:	20000488 	.word	0x20000488
 80013f8:	2000048a 	.word	0x2000048a
 80013fc:	20000474 	.word	0x20000474
 8001400:	20000489 	.word	0x20000489
 8001404:	0800da14 	.word	0x0800da14
 8001408:	0800da20 	.word	0x0800da20
 800140c:	0800da28 	.word	0x0800da28
 8001410:	0800da30 	.word	0x0800da30
 8001414:	0800da38 	.word	0x0800da38
 8001418:	0800da40 	.word	0x0800da40

0800141c <LCD_WakeScreen>:

void LCD_WakeScreen(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	LCD_BackgroundOn();
 8001420:	f000 f808 	bl	8001434 <LCD_BackgroundOn>
	ResetTIM(3);
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <LCD_WakeScreen+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20003314 	.word	0x20003314

08001434 <LCD_BackgroundOn>:

void LCD_BackgroundOn(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <LCD_BackgroundOn+0x14>)
 8001440:	f006 fd86 	bl	8007f50 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020800 	.word	0x40020800

0800144c <LCD_BackgroundOff>:

void LCD_BackgroundOff(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BG_PORT, BG_PIN, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <LCD_BackgroundOff+0x14>)
 8001458:	f006 fd7a 	bl	8007f50 <HAL_GPIO_WritePin>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40020800 	.word	0x40020800

08001464 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	_LCD_SendCommand(CLEAR_DISPLAY);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff fecd 	bl	8001208 <_LCD_SendCommand>
	LCD_ResetCursor();
 800146e:	f000 f802 	bl	8001476 <LCD_ResetCursor>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}

08001476 <LCD_ResetCursor>:

void LCD_ResetCursor(void) {
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
	LCD_SetCursor(0, 0);
 800147a:	2100      	movs	r1, #0
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f803 	bl	8001488 <LCD_SetCursor>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	71bb      	strb	r3, [r7, #6]
	if (row >= ROWS) {
 8001498:	79bb      	ldrb	r3, [r7, #6]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d901      	bls.n	80014a2 <LCD_SetCursor+0x1a>
		row = ROWS - 1;
 800149e:	2303      	movs	r3, #3
 80014a0:	71bb      	strb	r3, [r7, #6]
	}
	if (col >= COLUMNS) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b13      	cmp	r3, #19
 80014a6:	d901      	bls.n	80014ac <LCD_SetCursor+0x24>
		col = COLUMNS - 1;
 80014a8:	2313      	movs	r3, #19
 80014aa:	71fb      	strb	r3, [r7, #7]
	}

	_LCD_SendCommand(SET_DDRAM_ADDR | (col + _rowOffsets[row]));
 80014ac:	79bb      	ldrb	r3, [r7, #6]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LCD_SetCursor+0x54>)
 80014b0:	5cd2      	ldrb	r2, [r2, r3]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fea0 	bl	8001208 <_LCD_SendCommand>
	_currentRow = row;
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <LCD_SetCursor+0x58>)
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	7013      	strb	r3, [r2, #0]
	_currentCol = col;
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <LCD_SetCursor+0x5c>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	7013      	strb	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000484 	.word	0x20000484
 80014e0:	20000474 	.word	0x20000474
 80014e4:	20000489 	.word	0x20000489

080014e8 <LCD_DisplayOn>:

void LCD_DisplayOff(void) {
	_displayControl &= ~DISPLAY_ON;
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
}
void LCD_DisplayOn(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	_displayControl |= DISPLAY_ON;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <LCD_DisplayOn+0x28>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <LCD_DisplayOn+0x28>)
 80014f8:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <LCD_DisplayOn+0x28>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe7f 	bl	8001208 <_LCD_SendCommand>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000488 	.word	0x20000488

08001514 <LCD_DisableCursor>:

void LCD_DisableCursor(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	_displayControl &= ~CURSOR_ON;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <LCD_DisableCursor+0x28>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f023 0302 	bic.w	r3, r3, #2
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <LCD_DisableCursor+0x28>)
 8001524:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <LCD_DisableCursor+0x28>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fe69 	bl	8001208 <_LCD_SendCommand>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000488 	.word	0x20000488

08001540 <LCD_EnableCursor>:
void LCD_EnableCursor(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	_displayControl |= CURSOR_ON;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <LCD_EnableCursor+0x28>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <LCD_EnableCursor+0x28>)
 8001550:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <LCD_EnableCursor+0x28>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe53 	bl	8001208 <_LCD_SendCommand>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000488 	.word	0x20000488

0800156c <LCD_DisableBlink>:

void LCD_DisableBlink(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	_displayControl &= ~BLINK_ON;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <LCD_DisableBlink+0x28>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <LCD_DisableBlink+0x28>)
 800157c:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <LCD_DisableBlink+0x28>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fe3d 	bl	8001208 <_LCD_SendCommand>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000488 	.word	0x20000488

08001598 <LCD_EnableBlink>:
void LCD_EnableBlink(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	_displayControl |= BLINK_ON;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <LCD_EnableBlink+0x28>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <LCD_EnableBlink+0x28>)
 80015a8:	701a      	strb	r2, [r3, #0]
	_LCD_SendCommand(DISPLAY_CONTROL | _displayControl);
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <LCD_EnableBlink+0x28>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f043 0308 	orr.w	r3, r3, #8
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe27 	bl	8001208 <_LCD_SendCommand>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000488 	.word	0x20000488

080015c4 <LCD_Print>:
void LCD_DisableAutoscroll(void) {
	_displayMode &= ~ENTRY_SHIFT_INCREMENT;
	_LCD_SendCommand(ENTRY_MODESET | _displayMode);
}

void LCD_Print(const char str[]) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if (str == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d018      	beq.n	8001604 <LCD_Print+0x40>
		return;

	const uint8_t *buffer = (const uint8_t*) str;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	613b      	str	r3, [r7, #16]
	size_t size = strlen(str);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe fe04 	bl	80001e4 <strlen>
 80015dc:	60f8      	str	r0, [r7, #12]

	for (int i = 0; i < size; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e00a      	b.n	80015fa <LCD_Print+0x36>
		_LCD_SendData(buffer[i], true);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fe18 	bl	8001224 <_LCD_SendData>
	for (int i = 0; i < size; i++) {
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8f0      	bhi.n	80015e4 <LCD_Print+0x20>
 8001602:	e000      	b.n	8001606 <LCD_Print+0x42>
		return;
 8001604:	bf00      	nop
	}
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <LCD_PrintCentered>:
		_LCD_SendData(((const uint8_t*) str)[i], true);
		HAL_Delay(delay);
	}
}

void LCD_PrintCentered(const char str[]) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	const int size = strlen(str);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7fe fde5 	bl	80001e4 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]
	if (size > 20)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b14      	cmp	r3, #20
 8001622:	dc14      	bgt.n	800164e <LCD_PrintCentered+0x42>
		return;

	_currentCol = (int) ((COLUMNS - size) / 2);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f1c3 0314 	rsb	r3, r3, #20
 800162a:	0fda      	lsrs	r2, r3, #31
 800162c:	4413      	add	r3, r2
 800162e:	105b      	asrs	r3, r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <LCD_PrintCentered+0x4c>)
 8001634:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LCD_PrintCentered+0x4c>)
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <LCD_PrintCentered+0x50>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4610      	mov	r0, r2
 8001642:	f7ff ff21 	bl	8001488 <LCD_SetCursor>
	LCD_Print(str);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffbc 	bl	80015c4 <LCD_Print>
 800164c:	e000      	b.n	8001650 <LCD_PrintCentered+0x44>
		return;
 800164e:	bf00      	nop
}
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000489 	.word	0x20000489
 800165c:	20000474 	.word	0x20000474

08001660 <LCD_PrintTempInfo>:

void LCD_PrintTempInfo(float *data1, float *data2) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	if (data1 == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8104 	beq.w	800187a <LCD_PrintTempInfo+0x21a>
		return;

	char temp[10], rh[10];

	/* 1 sensor */
	if (data1[0] < 10.f)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800167c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d50e      	bpl.n	80016a4 <LCD_PrintTempInfo+0x44>
		sprintf(temp, "\6 %.0f\7", data1[0]);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff6c 	bl	8000568 <__aeabi_f2d>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	f107 0014 	add.w	r0, r7, #20
 8001698:	461a      	mov	r2, r3
 800169a:	4623      	mov	r3, r4
 800169c:	4979      	ldr	r1, [pc, #484]	; (8001884 <LCD_PrintTempInfo+0x224>)
 800169e:	f00a fd65 	bl	800c16c <siprintf>
 80016a2:	e00d      	b.n	80016c0 <LCD_PrintTempInfo+0x60>
	else
		sprintf(temp, "\6%.0f\7", data1[0]);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff5d 	bl	8000568 <__aeabi_f2d>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	f107 0014 	add.w	r0, r7, #20
 80016b6:	461a      	mov	r2, r3
 80016b8:	4623      	mov	r3, r4
 80016ba:	4973      	ldr	r1, [pc, #460]	; (8001888 <LCD_PrintTempInfo+0x228>)
 80016bc:	f00a fd56 	bl	800c16c <siprintf>

	if (data1[1] < 10.f)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3304      	adds	r3, #4
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	d50f      	bpl.n	80016f6 <LCD_PrintTempInfo+0x96>
		sprintf(rh, "\4 %.0f%%", data1[1]);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff43 	bl	8000568 <__aeabi_f2d>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	f107 0008 	add.w	r0, r7, #8
 80016ea:	461a      	mov	r2, r3
 80016ec:	4623      	mov	r3, r4
 80016ee:	4967      	ldr	r1, [pc, #412]	; (800188c <LCD_PrintTempInfo+0x22c>)
 80016f0:	f00a fd3c 	bl	800c16c <siprintf>
 80016f4:	e020      	b.n	8001738 <LCD_PrintTempInfo+0xd8>
	else if (data1[1] == 100.f)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001890 <LCD_PrintTempInfo+0x230>
 8001702:	eef4 7a47 	vcmp.f32	s15, s14
 8001706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170a:	d106      	bne.n	800171a <LCD_PrintTempInfo+0xba>
		sprintf(rh, "\499%%");
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4960      	ldr	r1, [pc, #384]	; (8001894 <LCD_PrintTempInfo+0x234>)
 8001712:	4618      	mov	r0, r3
 8001714:	f00a fd2a 	bl	800c16c <siprintf>
 8001718:	e00e      	b.n	8001738 <LCD_PrintTempInfo+0xd8>
	else
		sprintf(rh, "\4%.0f%%", data1[1]);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff21 	bl	8000568 <__aeabi_f2d>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	f107 0008 	add.w	r0, r7, #8
 800172e:	461a      	mov	r2, r3
 8001730:	4623      	mov	r3, r4
 8001732:	4959      	ldr	r1, [pc, #356]	; (8001898 <LCD_PrintTempInfo+0x238>)
 8001734:	f00a fd1a 	bl	800c16c <siprintf>

	if (data2 != NULL) {
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 8088 	beq.w	8001850 <LCD_PrintTempInfo+0x1f0>
		LCD_SetCursor(0, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fea0 	bl	8001488 <LCD_SetCursor>
		LCD_Print(temp);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff39 	bl	80015c4 <LCD_Print>
		LCD_SetCursor(0, 2);
 8001752:	2102      	movs	r1, #2
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff fe97 	bl	8001488 <LCD_SetCursor>
		LCD_Print(rh);
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff30 	bl	80015c4 <LCD_Print>
		/* 2 sensor */
		if (data2[0] < 10.f)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d50e      	bpl.n	8001796 <LCD_PrintTempInfo+0x136>
			sprintf(temp, "\5 %.0f\7", data2[0]);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fef3 	bl	8000568 <__aeabi_f2d>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	f107 0014 	add.w	r0, r7, #20
 800178a:	461a      	mov	r2, r3
 800178c:	4623      	mov	r3, r4
 800178e:	4943      	ldr	r1, [pc, #268]	; (800189c <LCD_PrintTempInfo+0x23c>)
 8001790:	f00a fcec 	bl	800c16c <siprintf>
 8001794:	e00d      	b.n	80017b2 <LCD_PrintTempInfo+0x152>
		else
			sprintf(temp, "\5%.0f\7", data2[0]);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fee4 	bl	8000568 <__aeabi_f2d>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	f107 0014 	add.w	r0, r7, #20
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	493c      	ldr	r1, [pc, #240]	; (80018a0 <LCD_PrintTempInfo+0x240>)
 80017ae:	f00a fcdd 	bl	800c16c <siprintf>

		if (data2[1] < 10.f)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	3304      	adds	r3, #4
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c6:	d50f      	bpl.n	80017e8 <LCD_PrintTempInfo+0x188>
			sprintf(rh, "\3 %.0f%%", data2[1]);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3304      	adds	r3, #4
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feca 	bl	8000568 <__aeabi_f2d>
 80017d4:	4603      	mov	r3, r0
 80017d6:	460c      	mov	r4, r1
 80017d8:	f107 0008 	add.w	r0, r7, #8
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	4930      	ldr	r1, [pc, #192]	; (80018a4 <LCD_PrintTempInfo+0x244>)
 80017e2:	f00a fcc3 	bl	800c16c <siprintf>
 80017e6:	e020      	b.n	800182a <LCD_PrintTempInfo+0x1ca>
		else if (data2[1] == 100.f)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3304      	adds	r3, #4
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001890 <LCD_PrintTempInfo+0x230>
 80017f4:	eef4 7a47 	vcmp.f32	s15, s14
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d106      	bne.n	800180c <LCD_PrintTempInfo+0x1ac>
			sprintf(rh, "\399%%");
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4929      	ldr	r1, [pc, #164]	; (80018a8 <LCD_PrintTempInfo+0x248>)
 8001804:	4618      	mov	r0, r3
 8001806:	f00a fcb1 	bl	800c16c <siprintf>
 800180a:	e00e      	b.n	800182a <LCD_PrintTempInfo+0x1ca>
		else
			sprintf(rh, "\3%.0f%%", data2[1]);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea8 	bl	8000568 <__aeabi_f2d>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	f107 0008 	add.w	r0, r7, #8
 8001820:	461a      	mov	r2, r3
 8001822:	4623      	mov	r3, r4
 8001824:	4921      	ldr	r1, [pc, #132]	; (80018ac <LCD_PrintTempInfo+0x24c>)
 8001826:	f00a fca1 	bl	800c16c <siprintf>

		LCD_SetCursor(16, 1);
 800182a:	2101      	movs	r1, #1
 800182c:	2010      	movs	r0, #16
 800182e:	f7ff fe2b 	bl	8001488 <LCD_SetCursor>
		LCD_Print(temp);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fec4 	bl	80015c4 <LCD_Print>
		LCD_SetCursor(16, 2);
 800183c:	2102      	movs	r1, #2
 800183e:	2010      	movs	r0, #16
 8001840:	f7ff fe22 	bl	8001488 <LCD_SetCursor>
		LCD_Print(rh);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff febb 	bl	80015c4 <LCD_Print>
 800184e:	e010      	b.n	8001872 <LCD_PrintTempInfo+0x212>
	} else {
		LCD_SetCursor(0, 1);
 8001850:	2101      	movs	r1, #1
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fe18 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered(temp);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fed5 	bl	800160c <LCD_PrintCentered>
		LCD_NextLine("");
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <LCD_PrintTempInfo+0x250>)
 8001864:	f000 f826 	bl	80018b4 <LCD_NextLine>
		LCD_PrintCentered(rh);
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fecd 	bl	800160c <LCD_PrintCentered>
	}
	LCD_NextLine("");
 8001872:	480f      	ldr	r0, [pc, #60]	; (80018b0 <LCD_PrintTempInfo+0x250>)
 8001874:	f000 f81e 	bl	80018b4 <LCD_NextLine>
 8001878:	e000      	b.n	800187c <LCD_PrintTempInfo+0x21c>
		return;
 800187a:	bf00      	nop
}
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	0800da48 	.word	0x0800da48
 8001888:	0800da50 	.word	0x0800da50
 800188c:	0800da58 	.word	0x0800da58
 8001890:	42c80000 	.word	0x42c80000
 8001894:	0800da64 	.word	0x0800da64
 8001898:	0800da6c 	.word	0x0800da6c
 800189c:	0800da74 	.word	0x0800da74
 80018a0:	0800da7c 	.word	0x0800da7c
 80018a4:	0800da84 	.word	0x0800da84
 80018a8:	0800da90 	.word	0x0800da90
 80018ac:	0800da98 	.word	0x0800da98
 80018b0:	0800daa0 	.word	0x0800daa0

080018b4 <LCD_NextLine>:

void LCD_NextLine(const char text[]) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	LCD_Print(text);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe81 	bl	80015c4 <LCD_Print>

	_currentCol = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <LCD_NextLine+0x48>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
	++_currentRow;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <LCD_NextLine+0x4c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <LCD_NextLine+0x4c>)
 80018d2:	701a      	strb	r2, [r3, #0]

	if (_currentRow >= ROWS) {
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <LCD_NextLine+0x4c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d902      	bls.n	80018e2 <LCD_NextLine+0x2e>
		_currentRow = 0;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <LCD_NextLine+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetCursor(_currentCol, _currentRow);
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <LCD_NextLine+0x48>)
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <LCD_NextLine+0x4c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	4610      	mov	r0, r2
 80018ee:	f7ff fdcb 	bl	8001488 <LCD_SetCursor>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000489 	.word	0x20000489
 8001900:	20000474 	.word	0x20000474

08001904 <LCD_CursorUp>:

uint8_t LCD_CursorUp(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if (_currentRow > 0)
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <LCD_CursorUp+0x30>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <LCD_CursorUp+0x18>
		--_currentRow;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <LCD_CursorUp+0x30>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <LCD_CursorUp+0x30>)
 800191a:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LCD_CursorUp+0x34>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <LCD_CursorUp+0x30>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f7ff fdae 	bl	8001488 <LCD_SetCursor>
	return _currentRow;
 800192c:	4b01      	ldr	r3, [pc, #4]	; (8001934 <LCD_CursorUp+0x30>)
 800192e:	781b      	ldrb	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000474 	.word	0x20000474
 8001938:	20000489 	.word	0x20000489

0800193c <LCD_CursorDown>:
uint8_t LCD_CursorDown(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	if (_currentRow < ROWS)
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <LCD_CursorDown+0x30>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d805      	bhi.n	8001954 <LCD_CursorDown+0x18>
		++_currentRow;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LCD_CursorDown+0x30>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <LCD_CursorDown+0x30>)
 8001952:	701a      	strb	r2, [r3, #0]

	LCD_SetCursor(_currentCol, _currentRow);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <LCD_CursorDown+0x34>)
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <LCD_CursorDown+0x30>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f7ff fd92 	bl	8001488 <LCD_SetCursor>
	return _currentRow;
 8001964:	4b01      	ldr	r3, [pc, #4]	; (800196c <LCD_CursorDown+0x30>)
 8001966:	781b      	ldrb	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000474 	.word	0x20000474
 8001970:	20000489 	.word	0x20000489

08001974 <LCD_CursorLeft>:
uint8_t LCD_CursorLeft(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	if (_currentCol > 0) {
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <LCD_CursorLeft+0x54>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <LCD_CursorLeft+0x1a>
		--_currentCol;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <LCD_CursorLeft+0x54>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <LCD_CursorLeft+0x54>)
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	e010      	b.n	80019b0 <LCD_CursorLeft+0x3c>
	} else {
		_currentCol = COLUMNS - 1;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <LCD_CursorLeft+0x54>)
 8001990:	2213      	movs	r2, #19
 8001992:	701a      	strb	r2, [r3, #0]
		if (_currentRow == 0) {
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <LCD_CursorLeft+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <LCD_CursorLeft+0x30>
			_currentRow = ROWS - 1;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <LCD_CursorLeft+0x58>)
 800199e:	2203      	movs	r2, #3
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e005      	b.n	80019b0 <LCD_CursorLeft+0x3c>
		} else {
			--_currentRow;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LCD_CursorLeft+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <LCD_CursorLeft+0x58>)
 80019ae:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LCD_CursorLeft+0x54>)
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <LCD_CursorLeft+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f7ff fd64 	bl	8001488 <LCD_SetCursor>
	return _currentCol;
 80019c0:	4b01      	ldr	r3, [pc, #4]	; (80019c8 <LCD_CursorLeft+0x54>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000489 	.word	0x20000489
 80019cc:	20000474 	.word	0x20000474

080019d0 <LCD_CursorRight>:
uint8_t LCD_CursorRight(void) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	if (_currentCol < COLUMNS - 1) {
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <LCD_CursorRight+0x54>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b12      	cmp	r3, #18
 80019da:	d806      	bhi.n	80019ea <LCD_CursorRight+0x1a>
		++_currentCol;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LCD_CursorRight+0x54>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <LCD_CursorRight+0x54>)
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e010      	b.n	8001a0c <LCD_CursorRight+0x3c>
	} else {
		_currentCol = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <LCD_CursorRight+0x54>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
		if (_currentRow == ROWS - 1) {
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <LCD_CursorRight+0x58>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d103      	bne.n	8001a00 <LCD_CursorRight+0x30>
			_currentRow = 0;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <LCD_CursorRight+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e005      	b.n	8001a0c <LCD_CursorRight+0x3c>
		} else {
			++_currentRow;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LCD_CursorRight+0x58>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LCD_CursorRight+0x58>)
 8001a0a:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_SetCursor(_currentCol, _currentRow);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LCD_CursorRight+0x54>)
 8001a0e:	781a      	ldrb	r2, [r3, #0]
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <LCD_CursorRight+0x58>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f7ff fd36 	bl	8001488 <LCD_SetCursor>
	return _currentCol;
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <LCD_CursorRight+0x54>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000489 	.word	0x20000489
 8001a28:	20000474 	.word	0x20000474

08001a2c <LCD_DefineCustomChar>:

void LCD_DefineCustomChar(uint8_t location, uint8_t bytes[]) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
	/* 8 miejsc do zapisu 0-7 */
	location &= 0x7; /* zawsze bezpieczny adres */
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	71fb      	strb	r3, [r7, #7]
	_LCD_SendCommand(SET_CGRAM_ADDR | (location << 3));
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fbda 	bl	8001208 <_LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e00a      	b.n	8001a70 <LCD_DefineCustomChar+0x44>
		_LCD_SendData(bytes[i], false);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fbdd 	bl	8001224 <_LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b07      	cmp	r3, #7
 8001a74:	ddf1      	ble.n	8001a5a <LCD_DefineCustomChar+0x2e>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <LCD_PrintDateTime>:

void LCD_PrintDateTime(const char date[], const char time[]) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	LCD_SetCursor(0, 0);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fcfb 	bl	8001488 <LCD_SetCursor>
	LCD_Print(date);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fd96 	bl	80015c4 <LCD_Print>
	LCD_SetCursor(12, 0);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	200c      	movs	r0, #12
 8001a9c:	f7ff fcf4 	bl	8001488 <LCD_SetCursor>
	LCD_Print(time);
 8001aa0:	6838      	ldr	r0, [r7, #0]
 8001aa2:	f7ff fd8f 	bl	80015c4 <LCD_Print>
	LCD_NextLine("");
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <LCD_PrintDateTime+0x34>)
 8001aa8:	f7ff ff04 	bl	80018b4 <LCD_NextLine>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800daa0 	.word	0x0800daa0

08001ab8 <LCD_WriteChar>:

void LCD_WriteChar(char character) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	_LCD_SendData((uint8_t) character, true);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fbac 	bl	8001224 <_LCD_SendData>
	LCD_CursorLeft();
 8001acc:	f7ff ff52 	bl	8001974 <LCD_CursorLeft>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <LCD_PrintNetworks>:

void LCD_PrintNetworks(char *data, int from) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
	int column = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
	char number = from + '0';
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3330      	adds	r3, #48	; 0x30
 8001af0:	75fb      	strb	r3, [r7, #23]

	/* ustaw indeks na pozadanej pozycji */
	for (int i = 0; i < from - 1; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e00c      	b.n	8001b12 <LCD_PrintNetworks+0x3a>
		while (data[index++] != ';')
 8001af8:	bf00      	nop
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	61fa      	str	r2, [r7, #28]
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b3b      	cmp	r3, #59	; 0x3b
 8001b0a:	d1f6      	bne.n	8001afa <LCD_PrintNetworks+0x22>
	for (int i = 0; i < from - 1; i++) {
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbed      	blt.n	8001af8 <LCD_PrintNetworks+0x20>
			;
	}

	LCD_ClearScreen();
 8001b1c:	f7ff fca2 	bl	8001464 <LCD_ClearScreen>

	/* wypisujemy maks 4 */
	for (int i = 1; i <= 4; i++) {
 8001b20:	2301      	movs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e037      	b.n	8001b96 <LCD_PrintNetworks+0xbe>
		LCD_WriteChar(number++);
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	75fa      	strb	r2, [r7, #23]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ffc3 	bl	8001ab8 <LCD_WriteChar>
		column = LCD_CursorRight();
 8001b32:	f7ff ff4d 	bl	80019d0 <LCD_CursorRight>
 8001b36:	4603      	mov	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]
		LCD_Print(":");
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <LCD_PrintNetworks+0xd0>)
 8001b3c:	f7ff fd42 	bl	80015c4 <LCD_Print>

		while (data[index] != ';') {
 8001b40:	e010      	b.n	8001b64 <LCD_PrintNetworks+0x8c>
			if (column > 0) { /* kursor skoczyl do nowej linii */
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dd0a      	ble.n	8001b5e <LCD_PrintNetworks+0x86>
				LCD_WriteChar(data[index]);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ffb1 	bl	8001ab8 <LCD_WriteChar>
				column = LCD_CursorRight();
 8001b56:	f7ff ff3b 	bl	80019d0 <LCD_CursorRight>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	61bb      	str	r3, [r7, #24]
			}
			index++;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
		while (data[index] != ';') {
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b3b      	cmp	r3, #59	; 0x3b
 8001b6e:	d1e8      	bne.n	8001b42 <LCD_PrintNetworks+0x6a>
		}

		if (data[index + 1] == 0) {
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00f      	beq.n	8001b9e <LCD_PrintNetworks+0xc6>
			break;
		} else {
			if (column != 0)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <LCD_PrintNetworks+0xb2>
				LCD_NextLine("");
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <LCD_PrintNetworks+0xd4>)
 8001b86:	f7ff fe95 	bl	80018b4 <LCD_NextLine>
			index++;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= 4; i++) {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	ddc4      	ble.n	8001b26 <LCD_PrintNetworks+0x4e>
		}
	}
}
 8001b9c:	e000      	b.n	8001ba0 <LCD_PrintNetworks+0xc8>
			break;
 8001b9e:	bf00      	nop
}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	0800daa4 	.word	0x0800daa4
 8001bac:	0800daa0 	.word	0x0800daa0

08001bb0 <LCD_PrintOptionsScreen>:

void LCD_PrintOptionsScreen(const char string[], int from) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
	int index = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < from - 1; i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	e00c      	b.n	8001bde <LCD_PrintOptionsScreen+0x2e>
		while (string[index++] != ';')
 8001bc4:	bf00      	nop
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	617a      	str	r2, [r7, #20]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b3b      	cmp	r3, #59	; 0x3b
 8001bd6:	d1f6      	bne.n	8001bc6 <LCD_PrintOptionsScreen+0x16>
	for (int i = 0; i < from - 1; i++) {
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbed      	blt.n	8001bc4 <LCD_PrintOptionsScreen+0x14>
			;
	}

	LCD_ClearScreen();
 8001be8:	f7ff fc3c 	bl	8001464 <LCD_ClearScreen>
	LCD_PrintCentered("Options:");
 8001bec:	4815      	ldr	r0, [pc, #84]	; (8001c44 <LCD_PrintOptionsScreen+0x94>)
 8001bee:	f7ff fd0d 	bl	800160c <LCD_PrintCentered>

	for (int i = 1; i <= 3; i++) {
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e01e      	b.n	8001c36 <LCD_PrintOptionsScreen+0x86>
		LCD_SetCursor(0, i);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fc42 	bl	8001488 <LCD_SetCursor>

		while (string[index] != ';') {
 8001c04:	e00b      	b.n	8001c1e <LCD_PrintOptionsScreen+0x6e>
			LCD_WriteChar(string[index++]);
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	617a      	str	r2, [r7, #20]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff4f 	bl	8001ab8 <LCD_WriteChar>
			LCD_CursorRight();
 8001c1a:	f7ff fed9 	bl	80019d0 <LCD_CursorRight>
		while (string[index] != ';') {
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b3b      	cmp	r3, #59	; 0x3b
 8001c28:	d1ed      	bne.n	8001c06 <LCD_PrintOptionsScreen+0x56>
		}
		index++;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
	for (int i = 1; i <= 3; i++) {
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3301      	adds	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	dddd      	ble.n	8001bf8 <LCD_PrintOptionsScreen+0x48>
	}
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800daa8 	.word	0x0800daa8

08001c48 <LCD_PrintNetworkStatus>:

void LCD_PrintNetworkStatus(ModeEnum mode, char *data) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
	/* wyczysc linie */
	LCD_SetCursor(0, 3);
 8001c54:	2103      	movs	r1, #3
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fc16 	bl	8001488 <LCD_SetCursor>
	LCD_Print("                    ");
 8001c5c:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <LCD_PrintNetworkStatus+0xac>)
 8001c5e:	f7ff fcb1 	bl	80015c4 <LCD_Print>
	LCD_SetCursor(0, 3);
 8001c62:	2103      	movs	r1, #3
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff fc0f 	bl	8001488 <LCD_SetCursor>

	if (mode == MD_ClientDConn) {
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d103      	bne.n	8001c78 <LCD_PrintNetworkStatus+0x30>
		LCD_PrintCentered("No WiFi Connection");
 8001c70:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <LCD_PrintNetworkStatus+0xb0>)
 8001c72:	f7ff fccb 	bl	800160c <LCD_PrintCentered>
 8001c76:	e03a      	b.n	8001cee <LCD_PrintNetworkStatus+0xa6>
	} else if (mode == MD_ClientConn) {
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12c      	bne.n	8001cd8 <LCD_PrintNetworkStatus+0x90>
		if (data == NULL) return;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d033      	beq.n	8001cec <LCD_PrintNetworkStatus+0xa4>

		int size = strlen(data);
 8001c84:	6838      	ldr	r0, [r7, #0]
 8001c86:	f7fe faad 	bl	80001e4 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60bb      	str	r3, [r7, #8]
		_currentCol = (int) ((COLUMNS - size) / 2);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f1c3 0314 	rsb	r3, r3, #20
 8001c94:	0fda      	lsrs	r2, r3, #31
 8001c96:	4413      	add	r3, r2
 8001c98:	105b      	asrs	r3, r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <LCD_PrintNetworkStatus+0xb4>)
 8001c9e:	701a      	strb	r2, [r3, #0]

		LCD_SetCursor(_currentCol, _currentRow);
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <LCD_PrintNetworkStatus+0xb4>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <LCD_PrintNetworkStatus+0xb8>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4610      	mov	r0, r2
 8001cac:	f7ff fbec 	bl	8001488 <LCD_SetCursor>
		for (int i = 0; i < size; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e00b      	b.n	8001cce <LCD_PrintNetworkStatus+0x86>
			LCD_WriteChar(data[i]);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fefa 	bl	8001ab8 <LCD_WriteChar>
			LCD_CursorRight();
 8001cc4:	f7ff fe84 	bl	80019d0 <LCD_CursorRight>
		for (int i = 0; i < size; i++) {
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbef      	blt.n	8001cb6 <LCD_PrintNetworkStatus+0x6e>
 8001cd6:	e00a      	b.n	8001cee <LCD_PrintNetworkStatus+0xa6>
		}
	} else if (mode == MD_AccessPoint) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d007      	beq.n	8001cee <LCD_PrintNetworkStatus+0xa6>

	} else if (mode == MD_LostHost) {
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d104      	bne.n	8001cee <LCD_PrintNetworkStatus+0xa6>
		LCD_PrintCentered("Network unavailable!");
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <LCD_PrintNetworkStatus+0xbc>)
 8001ce6:	f7ff fc91 	bl	800160c <LCD_PrintCentered>
 8001cea:	e000      	b.n	8001cee <LCD_PrintNetworkStatus+0xa6>
		if (data == NULL) return;
 8001cec:	bf00      	nop
	}
}
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0800dab4 	.word	0x0800dab4
 8001cf8:	0800dacc 	.word	0x0800dacc
 8001cfc:	20000489 	.word	0x20000489
 8001d00:	20000474 	.word	0x20000474
 8001d04:	0800dae0 	.word	0x0800dae0

08001d08 <MENU_Init>:

uint8_t _networksIn;
uint8_t _currentOption;
char* _networksList;

void MENU_Init(void) {
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	State = ST_Clock;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <MENU_Init+0x14>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	20003355 	.word	0x20003355

08001d20 <_PWD_ResetPasswd>:

void _PWD_ResetPasswd(void) {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	e007      	b.n	8001d3c <_PWD_ResetPasswd+0x1c>
		WiFiPassword[i] = 0;
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <_PWD_ResetPasswd+0x3c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b27      	cmp	r3, #39	; 0x27
 8001d40:	ddf4      	ble.n	8001d2c <_PWD_ResetPasswd+0xc>
	}

	_PWD_index = 0;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_PWD_ResetPasswd+0x40>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
	_optionsChar = BEGIN_PWD_CHAR;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <_PWD_ResetPasswd+0x44>)
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	701a      	strb	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000494 	.word	0x20000494
 8001d60:	200004d3 	.word	0x200004d3
 8001d64:	2000048f 	.word	0x2000048f

08001d68 <_PWD_NextChar>:

char _PWD_NextChar(void) {
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
	if (++_optionsChar > MAX_PWD_CHAR) _optionsChar = MIN_PWD_CHAR;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <_PWD_NextChar+0x2c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_PWD_NextChar+0x2c>)
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <_PWD_NextChar+0x2c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b7e      	cmp	r3, #126	; 0x7e
 8001d7e:	d902      	bls.n	8001d86 <_PWD_NextChar+0x1e>
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <_PWD_NextChar+0x2c>)
 8001d82:	2220      	movs	r2, #32
 8001d84:	701a      	strb	r2, [r3, #0]
	return _optionsChar;
 8001d86:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <_PWD_NextChar+0x2c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	2000048f 	.word	0x2000048f

08001d98 <_PWD_SaveAndWrite>:

void _PWD_SaveAndWrite(char c) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	WiFiPassword[_PWD_index] = (c == ' ') ? 0 : c;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	d001      	beq.n	8001dac <_PWD_SaveAndWrite+0x14>
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	e000      	b.n	8001dae <_PWD_SaveAndWrite+0x16>
 8001dac:	2300      	movs	r3, #0
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <_PWD_SaveAndWrite+0x30>)
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_PWD_SaveAndWrite+0x34>)
 8001db6:	5453      	strb	r3, [r2, r1]
	LCD_WriteChar(c);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fe7c 	bl	8001ab8 <LCD_WriteChar>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200004d3 	.word	0x200004d3
 8001dcc:	20000494 	.word	0x20000494

08001dd0 <_CLK_HandleDateTimeInput>:

void _CLK_HandleDateTimeInput(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	; (800204c <_CLK_HandleDateTimeInput+0x27c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	2b11      	cmp	r3, #17
 8001ddc:	f200 8141 	bhi.w	8002062 <_CLK_HandleDateTimeInput+0x292>
 8001de0:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <_CLK_HandleDateTimeInput+0x18>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001e31 	.word	0x08001e31
 8001dec:	08001e5f 	.word	0x08001e5f
 8001df0:	08002063 	.word	0x08002063
 8001df4:	08001e8d 	.word	0x08001e8d
 8001df8:	08001ebb 	.word	0x08001ebb
 8001dfc:	08002063 	.word	0x08002063
 8001e00:	08001ee9 	.word	0x08001ee9
 8001e04:	08001f17 	.word	0x08001f17
 8001e08:	08002063 	.word	0x08002063
 8001e0c:	08002063 	.word	0x08002063
 8001e10:	08001f45 	.word	0x08001f45
 8001e14:	08001f73 	.word	0x08001f73
 8001e18:	08002063 	.word	0x08002063
 8001e1c:	08001fa1 	.word	0x08001fa1
 8001e20:	08001fcf 	.word	0x08001fcf
 8001e24:	08002063 	.word	0x08002063
 8001e28:	08001ffd 	.word	0x08001ffd
 8001e2c:	0800202b 	.word	0x0800202b
		ColIs(1)
			SetBetween('0', '3');
 8001e30:	4b87      	ldr	r3, [pc, #540]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b32      	cmp	r3, #50	; 0x32
 8001e36:	d903      	bls.n	8001e40 <_CLK_HandleDateTimeInput+0x70>
 8001e38:	4b85      	ldr	r3, [pc, #532]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e3a:	2230      	movs	r2, #48	; 0x30
 8001e3c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e3e:	e110      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e40:	4b83      	ldr	r3, [pc, #524]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b2f      	cmp	r3, #47	; 0x2f
 8001e46:	d803      	bhi.n	8001e50 <_CLK_HandleDateTimeInput+0x80>
 8001e48:	4b81      	ldr	r3, [pc, #516]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e4e:	e108      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '3');
 8001e50:	4b7f      	ldr	r3, [pc, #508]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b7d      	ldr	r3, [pc, #500]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e5a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e5c:	e101      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(2)
			SetBetween('0', '9');
 8001e5e:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b38      	cmp	r3, #56	; 0x38
 8001e64:	d903      	bls.n	8001e6e <_CLK_HandleDateTimeInput+0x9e>
 8001e66:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e68:	2230      	movs	r2, #48	; 0x30
 8001e6a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e6c:	e0f9      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e6e:	4b78      	ldr	r3, [pc, #480]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b2f      	cmp	r3, #47	; 0x2f
 8001e74:	d803      	bhi.n	8001e7e <_CLK_HandleDateTimeInput+0xae>
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e78:	2230      	movs	r2, #48	; 0x30
 8001e7a:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e7c:	e0f1      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001e7e:	4b74      	ldr	r3, [pc, #464]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e88:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e8a:	e0ea      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>

		ColIs(4)
			SetBetween('0', '1');
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b30      	cmp	r3, #48	; 0x30
 8001e92:	d903      	bls.n	8001e9c <_CLK_HandleDateTimeInput+0xcc>
 8001e94:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e96:	2230      	movs	r2, #48	; 0x30
 8001e98:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001e9a:	e0e2      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b2f      	cmp	r3, #47	; 0x2f
 8001ea2:	d803      	bhi.n	8001eac <_CLK_HandleDateTimeInput+0xdc>
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ea6:	2230      	movs	r2, #48	; 0x30
 8001ea8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eaa:	e0da      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '1');
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001eb6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001eb8:	e0d3      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(5)
			SetBetween('0', '9');
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b38      	cmp	r3, #56	; 0x38
 8001ec0:	d903      	bls.n	8001eca <_CLK_HandleDateTimeInput+0xfa>
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ec4:	2230      	movs	r2, #48	; 0x30
 8001ec6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ec8:	e0cb      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b2f      	cmp	r3, #47	; 0x2f
 8001ed0:	d803      	bhi.n	8001eda <_CLK_HandleDateTimeInput+0x10a>
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ed4:	2230      	movs	r2, #48	; 0x30
 8001ed6:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ed8:	e0c3      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ee4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ee6:	e0bc      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>

		ColIs(7)
			SetBetween('2', '9');
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b38      	cmp	r3, #56	; 0x38
 8001eee:	d903      	bls.n	8001ef8 <_CLK_HandleDateTimeInput+0x128>
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ef2:	2232      	movs	r2, #50	; 0x32
 8001ef4:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ef6:	e0b4      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001ef8:	4b55      	ldr	r3, [pc, #340]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b31      	cmp	r3, #49	; 0x31
 8001efe:	d803      	bhi.n	8001f08 <_CLK_HandleDateTimeInput+0x138>
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f02:	2232      	movs	r2, #50	; 0x32
 8001f04:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f06:	e0ac      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('2', '9');
 8001f08:	4b51      	ldr	r3, [pc, #324]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f12:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f14:	e0a5      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(8)
			SetBetween('0', '9');
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b38      	cmp	r3, #56	; 0x38
 8001f1c:	d903      	bls.n	8001f26 <_CLK_HandleDateTimeInput+0x156>
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f20:	2230      	movs	r2, #48	; 0x30
 8001f22:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f24:	e09d      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b2f      	cmp	r3, #47	; 0x2f
 8001f2c:	d803      	bhi.n	8001f36 <_CLK_HandleDateTimeInput+0x166>
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f30:	2230      	movs	r2, #48	; 0x30
 8001f32:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f34:	e095      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f40:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f42:	e08e      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>

		ColIs(11)
			SetBetween('0', '2');
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b31      	cmp	r3, #49	; 0x31
 8001f4a:	d903      	bls.n	8001f54 <_CLK_HandleDateTimeInput+0x184>
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f4e:	2230      	movs	r2, #48	; 0x30
 8001f50:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f52:	e086      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001f54:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b2f      	cmp	r3, #47	; 0x2f
 8001f5a:	d803      	bhi.n	8001f64 <_CLK_HandleDateTimeInput+0x194>
 8001f5c:	4b3c      	ldr	r3, [pc, #240]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f5e:	2230      	movs	r2, #48	; 0x30
 8001f60:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f62:	e07e      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '2');
 8001f64:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b38      	ldr	r3, [pc, #224]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f6e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f70:	e077      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(12)
			SetBetween('0', '9');
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b38      	cmp	r3, #56	; 0x38
 8001f78:	d903      	bls.n	8001f82 <_CLK_HandleDateTimeInput+0x1b2>
 8001f7a:	4b35      	ldr	r3, [pc, #212]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f7c:	2230      	movs	r2, #48	; 0x30
 8001f7e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f80:	e06f      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f82:	4b33      	ldr	r3, [pc, #204]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b2f      	cmp	r3, #47	; 0x2f
 8001f88:	d803      	bhi.n	8001f92 <_CLK_HandleDateTimeInput+0x1c2>
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f8c:	2230      	movs	r2, #48	; 0x30
 8001f8e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f90:	e067      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001f9c:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001f9e:	e060      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>

		ColIs(14)
			SetBetween('0', '5');
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b34      	cmp	r3, #52	; 0x34
 8001fa6:	d903      	bls.n	8001fb0 <_CLK_HandleDateTimeInput+0x1e0>
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001faa:	2230      	movs	r2, #48	; 0x30
 8001fac:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fae:	e058      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8001fb6:	d803      	bhi.n	8001fc0 <_CLK_HandleDateTimeInput+0x1f0>
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fba:	2230      	movs	r2, #48	; 0x30
 8001fbc:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fbe:	e050      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fca:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fcc:	e049      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(15)
			SetBetween('0', '9');
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b38      	cmp	r3, #56	; 0x38
 8001fd4:	d903      	bls.n	8001fde <_CLK_HandleDateTimeInput+0x20e>
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fd8:	2230      	movs	r2, #48	; 0x30
 8001fda:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fdc:	e041      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b2f      	cmp	r3, #47	; 0x2f
 8001fe4:	d803      	bhi.n	8001fee <_CLK_HandleDateTimeInput+0x21e>
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001fe8:	2230      	movs	r2, #48	; 0x30
 8001fea:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001fec:	e039      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '9');
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ff8:	701a      	strb	r2, [r3, #0]
		ColEnd
 8001ffa:	e032      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>

		ColIs(17)
			SetBetween('0', '5');
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b34      	cmp	r3, #52	; 0x34
 8002002:	d903      	bls.n	800200c <_CLK_HandleDateTimeInput+0x23c>
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8002006:	2230      	movs	r2, #48	; 0x30
 8002008:	701a      	strb	r2, [r3, #0]
		ColEnd
 800200a:	e02a      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b2f      	cmp	r3, #47	; 0x2f
 8002012:	d803      	bhi.n	800201c <_CLK_HandleDateTimeInput+0x24c>
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8002016:	2230      	movs	r2, #48	; 0x30
 8002018:	701a      	strb	r2, [r3, #0]
		ColEnd
 800201a:	e022      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
			SetBetween('0', '5');
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8002026:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002028:	e01b      	b.n	8002062 <_CLK_HandleDateTimeInput+0x292>
		ColIs(18)
			SetBetween('0', '9');
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b38      	cmp	r3, #56	; 0x38
 8002030:	d903      	bls.n	800203a <_CLK_HandleDateTimeInput+0x26a>
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8002034:	2230      	movs	r2, #48	; 0x30
 8002036:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002038:	e012      	b.n	8002060 <_CLK_HandleDateTimeInput+0x290>
			SetBetween('0', '9');
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b2f      	cmp	r3, #47	; 0x2f
 8002040:	d808      	bhi.n	8002054 <_CLK_HandleDateTimeInput+0x284>
 8002042:	4b03      	ldr	r3, [pc, #12]	; (8002050 <_CLK_HandleDateTimeInput+0x280>)
 8002044:	2230      	movs	r2, #48	; 0x30
 8002046:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002048:	e00a      	b.n	8002060 <_CLK_HandleDateTimeInput+0x290>
 800204a:	bf00      	nop
 800204c:	2000048e 	.word	0x2000048e
 8002050:	2000048f 	.word	0x2000048f
			SetBetween('0', '9');
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <_CLK_HandleDateTimeInput+0x2b0>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_CLK_HandleDateTimeInput+0x2b0>)
 800205e:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002060:	bf00      	nop
	}

	LCD_WriteChar(_optionsChar);
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_CLK_HandleDateTimeInput+0x2b0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fd26 	bl	8001ab8 <LCD_WriteChar>
	UserDateTime[_optionsCol] = _optionsChar;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <_CLK_HandleDateTimeInput+0x2b4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b03      	ldr	r3, [pc, #12]	; (8002080 <_CLK_HandleDateTimeInput+0x2b0>)
 8002074:	7819      	ldrb	r1, [r3, #0]
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <_CLK_HandleDateTimeInput+0x2b8>)
 8002078:	5499      	strb	r1, [r3, r2]
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000048f 	.word	0x2000048f
 8002084:	2000048e 	.word	0x2000048e
 8002088:	200004c0 	.word	0x200004c0

0800208c <_CLK_MoveInputRight>:

void _CLK_MoveInputRight(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3b02      	subs	r3, #2
 8002096:	2b10      	cmp	r3, #16
 8002098:	d84c      	bhi.n	8002134 <_CLK_MoveInputRight+0xa8>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <_CLK_MoveInputRight+0x14>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	08002125 	.word	0x08002125
 80020a4:	08002135 	.word	0x08002135
 80020a8:	08002135 	.word	0x08002135
 80020ac:	08002115 	.word	0x08002115
 80020b0:	08002135 	.word	0x08002135
 80020b4:	08002135 	.word	0x08002135
 80020b8:	08002105 	.word	0x08002105
 80020bc:	08002135 	.word	0x08002135
 80020c0:	08002135 	.word	0x08002135
 80020c4:	08002135 	.word	0x08002135
 80020c8:	080020f5 	.word	0x080020f5
 80020cc:	08002135 	.word	0x08002135
 80020d0:	08002135 	.word	0x08002135
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	08002135 	.word	0x08002135
 80020dc:	08002135 	.word	0x08002135
 80020e0:	08002143 	.word	0x08002143
		ColIs(18)
		ColEnd

		ColIs(15)
			LCD_SetCursor(17, 1);
 80020e4:	2101      	movs	r1, #1
 80020e6:	2011      	movs	r0, #17
 80020e8:	f7ff f9ce 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 17;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 80020ee:	2211      	movs	r2, #17
 80020f0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80020f2:	e027      	b.n	8002144 <_CLK_MoveInputRight+0xb8>

		ColIs(12)
			LCD_SetCursor(14, 1);
 80020f4:	2101      	movs	r1, #1
 80020f6:	200e      	movs	r0, #14
 80020f8:	f7ff f9c6 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 14;
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 80020fe:	220e      	movs	r2, #14
 8002100:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002102:	e01f      	b.n	8002144 <_CLK_MoveInputRight+0xb8>

		ColIs(8)
			LCD_SetCursor(11, 1);
 8002104:	2101      	movs	r1, #1
 8002106:	200b      	movs	r0, #11
 8002108:	f7ff f9be 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 11;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 800210e:	220b      	movs	r2, #11
 8002110:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002112:	e017      	b.n	8002144 <_CLK_MoveInputRight+0xb8>

		ColIs(5)
			LCD_SetCursor(7, 1);
 8002114:	2101      	movs	r1, #1
 8002116:	2007      	movs	r0, #7
 8002118:	f7ff f9b6 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 7;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 800211e:	2207      	movs	r2, #7
 8002120:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002122:	e00f      	b.n	8002144 <_CLK_MoveInputRight+0xb8>

		ColIs(2)
			LCD_SetCursor(4, 1);
 8002124:	2101      	movs	r1, #1
 8002126:	2004      	movs	r0, #4
 8002128:	f7ff f9ae 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 4;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 800212e:	2204      	movs	r2, #4
 8002130:	701a      	strb	r2, [r3, #0]
		ColEnd
 8002132:	e007      	b.n	8002144 <_CLK_MoveInputRight+0xb8>

		default:
			_optionsCol = LCD_CursorRight();
 8002134:	f7ff fc4c 	bl	80019d0 <LCD_CursorRight>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <_CLK_MoveInputRight+0xbc>)
 800213e:	701a      	strb	r2, [r3, #0]
	}
}
 8002140:	e000      	b.n	8002144 <_CLK_MoveInputRight+0xb8>
		ColEnd
 8002142:	bf00      	nop
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000048e 	.word	0x2000048e

0800214c <_CLK_MoveInputLeft>:

void _CLK_MoveInputLeft(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	switch (_optionsCol) {
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3b01      	subs	r3, #1
 8002156:	2b10      	cmp	r3, #16
 8002158:	d84c      	bhi.n	80021f4 <_CLK_MoveInputLeft+0xa8>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <_CLK_MoveInputLeft+0x14>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002203 	.word	0x08002203
 8002164:	080021f5 	.word	0x080021f5
 8002168:	080021f5 	.word	0x080021f5
 800216c:	080021a5 	.word	0x080021a5
 8002170:	080021f5 	.word	0x080021f5
 8002174:	080021f5 	.word	0x080021f5
 8002178:	080021b5 	.word	0x080021b5
 800217c:	080021f5 	.word	0x080021f5
 8002180:	080021f5 	.word	0x080021f5
 8002184:	080021f5 	.word	0x080021f5
 8002188:	080021c5 	.word	0x080021c5
 800218c:	080021f5 	.word	0x080021f5
 8002190:	080021f5 	.word	0x080021f5
 8002194:	080021d5 	.word	0x080021d5
 8002198:	080021f5 	.word	0x080021f5
 800219c:	080021f5 	.word	0x080021f5
 80021a0:	080021e5 	.word	0x080021e5
		ColIs(1)
		ColEnd

		ColIs(4)
			LCD_SetCursor(2, 1);
 80021a4:	2101      	movs	r1, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff f96e 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 2;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021b2:	e027      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>

		ColIs(7)
			LCD_SetCursor(5, 1);
 80021b4:	2101      	movs	r1, #1
 80021b6:	2005      	movs	r0, #5
 80021b8:	f7ff f966 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 5;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021be:	2205      	movs	r2, #5
 80021c0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021c2:	e01f      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>

		ColIs(11)
			LCD_SetCursor(8, 1);
 80021c4:	2101      	movs	r1, #1
 80021c6:	2008      	movs	r0, #8
 80021c8:	f7ff f95e 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 8;
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021ce:	2208      	movs	r2, #8
 80021d0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021d2:	e017      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>

		ColIs(14)
			LCD_SetCursor(12, 1);
 80021d4:	2101      	movs	r1, #1
 80021d6:	200c      	movs	r0, #12
 80021d8:	f7ff f956 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 12;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021de:	220c      	movs	r2, #12
 80021e0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021e2:	e00f      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>

		ColIs(17)
			LCD_SetCursor(15, 1);
 80021e4:	2101      	movs	r1, #1
 80021e6:	200f      	movs	r0, #15
 80021e8:	f7ff f94e 	bl	8001488 <LCD_SetCursor>
			_optionsCol = 15;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021ee:	220f      	movs	r2, #15
 80021f0:	701a      	strb	r2, [r3, #0]
		ColEnd
 80021f2:	e007      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>

		default:
			_optionsCol = LCD_CursorLeft();
 80021f4:	f7ff fbbe 	bl	8001974 <LCD_CursorLeft>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <_CLK_MoveInputLeft+0xbc>)
 80021fe:	701a      	strb	r2, [r3, #0]
	}
}
 8002200:	e000      	b.n	8002204 <_CLK_MoveInputLeft+0xb8>
		ColEnd
 8002202:	bf00      	nop
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000048e 	.word	0x2000048e

0800220c <_CLK_ParseAndSetDateTime>:

void _CLK_ParseAndSetDateTime(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
	uint8_t date[6], time[6];
	bool error = false;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]

	date[0] = UserDateTime[1] - '0';
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	3b30      	subs	r3, #48	; 0x30
 800221c:	b2db      	uxtb	r3, r3
 800221e:	723b      	strb	r3, [r7, #8]
	date[1] = UserDateTime[2] - '0';
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	3b30      	subs	r3, #48	; 0x30
 8002226:	b2db      	uxtb	r3, r3
 8002228:	727b      	strb	r3, [r7, #9]
	date[2] = UserDateTime[4] - '0';
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800222c:	791b      	ldrb	r3, [r3, #4]
 800222e:	3b30      	subs	r3, #48	; 0x30
 8002230:	b2db      	uxtb	r3, r3
 8002232:	72bb      	strb	r3, [r7, #10]
	date[3] = UserDateTime[5] - '0';
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002236:	795b      	ldrb	r3, [r3, #5]
 8002238:	3b30      	subs	r3, #48	; 0x30
 800223a:	b2db      	uxtb	r3, r3
 800223c:	72fb      	strb	r3, [r7, #11]
	date[4] = UserDateTime[7] - '0';
 800223e:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002240:	79db      	ldrb	r3, [r3, #7]
 8002242:	3b30      	subs	r3, #48	; 0x30
 8002244:	b2db      	uxtb	r3, r3
 8002246:	733b      	strb	r3, [r7, #12]
	date[5] = UserDateTime[8] - '0';
 8002248:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800224a:	7a1b      	ldrb	r3, [r3, #8]
 800224c:	3b30      	subs	r3, #48	; 0x30
 800224e:	b2db      	uxtb	r3, r3
 8002250:	737b      	strb	r3, [r7, #13]

	time[0] = UserDateTime[11] - '0';
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002254:	7adb      	ldrb	r3, [r3, #11]
 8002256:	3b30      	subs	r3, #48	; 0x30
 8002258:	b2db      	uxtb	r3, r3
 800225a:	703b      	strb	r3, [r7, #0]
	time[1] = UserDateTime[12] - '0';
 800225c:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800225e:	7b1b      	ldrb	r3, [r3, #12]
 8002260:	3b30      	subs	r3, #48	; 0x30
 8002262:	b2db      	uxtb	r3, r3
 8002264:	707b      	strb	r3, [r7, #1]
	time[2] = UserDateTime[14] - '0';
 8002266:	4b5e      	ldr	r3, [pc, #376]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002268:	7b9b      	ldrb	r3, [r3, #14]
 800226a:	3b30      	subs	r3, #48	; 0x30
 800226c:	b2db      	uxtb	r3, r3
 800226e:	70bb      	strb	r3, [r7, #2]
	time[3] = UserDateTime[15] - '0';
 8002270:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002272:	7bdb      	ldrb	r3, [r3, #15]
 8002274:	3b30      	subs	r3, #48	; 0x30
 8002276:	b2db      	uxtb	r3, r3
 8002278:	70fb      	strb	r3, [r7, #3]
	time[4] = UserDateTime[17] - '0';
 800227a:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 800227c:	7c5b      	ldrb	r3, [r3, #17]
 800227e:	3b30      	subs	r3, #48	; 0x30
 8002280:	b2db      	uxtb	r3, r3
 8002282:	713b      	strb	r3, [r7, #4]
	time[5] = UserDateTime[18] - '0';
 8002284:	4b56      	ldr	r3, [pc, #344]	; (80023e0 <_CLK_ParseAndSetDateTime+0x1d4>)
 8002286:	7c9b      	ldrb	r3, [r3, #18]
 8002288:	3b30      	subs	r3, #48	; 0x30
 800228a:	b2db      	uxtb	r3, r3
 800228c:	717b      	strb	r3, [r7, #5]

	/* Odrzucenie błędnych danych */
	if (date[2] == 1 && date[3] > 2) {
 800228e:	7abb      	ldrb	r3, [r7, #10]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d104      	bne.n	800229e <_CLK_ParseAndSetDateTime+0x92>
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <_CLK_ParseAndSetDateTime+0x92>
		/* ponad 12 miesięcy */
		error = true;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,0)) {
 800229e:	7abb      	ldrb	r3, [r7, #10]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <_CLK_ParseAndSetDateTime+0xa2>
 80022a4:	7afb      	ldrb	r3, [r7, #11]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <_CLK_ParseAndSetDateTime+0xa2>
		/* zerowy miesiac */
		error = true;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
	}
	if (time[0] == 2 && time[1] > 3) {
 80022ae:	783b      	ldrb	r3, [r7, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d104      	bne.n	80022be <_CLK_ParseAndSetDateTime+0xb2>
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d901      	bls.n	80022be <_CLK_ParseAndSetDateTime+0xb2>
		/* ponad 23 godziny */
		error = true;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
	}
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80022be:	7abb      	ldrb	r3, [r7, #10]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <_CLK_ParseAndSetDateTime+0xbe>
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d023      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
 80022ca:	7abb      	ldrb	r3, [r7, #10]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_CLK_ParseAndSetDateTime+0xca>
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d01d      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
 80022d6:	7abb      	ldrb	r3, [r7, #10]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_CLK_ParseAndSetDateTime+0xd6>
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d017      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80022e2:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,1)||Month(0,3)||Month(0,5)||
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_CLK_ParseAndSetDateTime+0xe2>
		Month(0,7)||Month(0,8)||Month(1,0)||
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	2b07      	cmp	r3, #7
 80022ec:	d011      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_CLK_ParseAndSetDateTime+0xee>
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d00b      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
 80022fa:	7abb      	ldrb	r3, [r7, #10]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d102      	bne.n	8002306 <_CLK_ParseAndSetDateTime+0xfa>
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <_CLK_ParseAndSetDateTime+0x106>
		Month(1,2)) {
 8002306:	7abb      	ldrb	r3, [r7, #10]
		Month(0,7)||Month(0,8)||Month(1,0)||
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10a      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x116>
		Month(1,2)) {
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d107      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x116>
		/* miesiac 31 dniowy */
		if (date[0] == 3 && date[1] > 1) {
 8002312:	7a3b      	ldrb	r3, [r7, #8]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d104      	bne.n	8002322 <_CLK_ParseAndSetDateTime+0x116>
 8002318:	7a7b      	ldrb	r3, [r7, #9]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d901      	bls.n	8002322 <_CLK_ParseAndSetDateTime+0x116>
			error = true;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002322:	7abb      	ldrb	r3, [r7, #10]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_CLK_ParseAndSetDateTime+0x122>
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	2b04      	cmp	r3, #4
 800232c:	d011      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x146>
 800232e:	7abb      	ldrb	r3, [r7, #10]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <_CLK_ParseAndSetDateTime+0x12e>
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00b      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x146>
 800233a:	7abb      	ldrb	r3, [r7, #10]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <_CLK_ParseAndSetDateTime+0x13a>
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d005      	beq.n	8002352 <_CLK_ParseAndSetDateTime+0x146>
		Month(0,4)) {
 8002346:	7abb      	ldrb	r3, [r7, #10]
	if (Month(0,4)||Month(0,4)||Month(0,4)||
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x156>
		Month(0,4)) {
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	2b04      	cmp	r3, #4
 8002350:	d107      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x156>
		/* miesiac 30 dniowy */
		if (date[0] == 3 && date[1] != 0) {
 8002352:	7a3b      	ldrb	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d104      	bne.n	8002362 <_CLK_ParseAndSetDateTime+0x156>
 8002358:	7a7b      	ldrb	r3, [r7, #9]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_CLK_ParseAndSetDateTime+0x156>
			error = true;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (Month(0,2)) {
 8002362:	7abb      	ldrb	r3, [r7, #10]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d115      	bne.n	8002394 <_CLK_ParseAndSetDateTime+0x188>
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d112      	bne.n	8002394 <_CLK_ParseAndSetDateTime+0x188>
		/* luty */
		if (date[0] > 2) {
 800236e:	7a3b      	ldrb	r3, [r7, #8]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <_CLK_ParseAndSetDateTime+0x16c>
			error = true;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
		}
		if (date[5] % 4 != 0) {
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <_CLK_ParseAndSetDateTime+0x188>
			/* rok zwykly */
			if (date[0] == 2 && date[1] == 9) {
 8002384:	7a3b      	ldrb	r3, [r7, #8]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d104      	bne.n	8002394 <_CLK_ParseAndSetDateTime+0x188>
 800238a:	7a7b      	ldrb	r3, [r7, #9]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d101      	bne.n	8002394 <_CLK_ParseAndSetDateTime+0x188>
				error = true;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	LCD_DisableCursor();
 8002394:	f7ff f8be 	bl	8001514 <LCD_DisableCursor>

	if (error) {
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d014      	beq.n	80023c8 <_CLK_ParseAndSetDateTime+0x1bc>
		/* handluj z tym */
		LCD_ClearScreen();
 800239e:	f7ff f861 	bl	8001464 <LCD_ClearScreen>

		LCD_SetCursor(0, 1);
 80023a2:	2101      	movs	r1, #1
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff f86f 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("Invalid data");
 80023aa:	480e      	ldr	r0, [pc, #56]	; (80023e4 <_CLK_ParseAndSetDateTime+0x1d8>)
 80023ac:	f7ff f92e 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 80023b0:	2102      	movs	r1, #2
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff f868 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("Ommiting update!");
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <_CLK_ParseAndSetDateTime+0x1dc>)
 80023ba:	f7ff f927 	bl	800160c <LCD_PrintCentered>

		HAL_Delay(1000);
 80023be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023c2:	f005 fabd 	bl	8007940 <HAL_Delay>
	}
	else {
		SD_SetDateTime(date, time);
	}
}
 80023c6:	e006      	b.n	80023d6 <_CLK_ParseAndSetDateTime+0x1ca>
		SD_SetDateTime(date, time);
 80023c8:	463a      	mov	r2, r7
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fc05 	bl	8003be0 <SD_SetDateTime>
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200004c0 	.word	0x200004c0
 80023e4:	0800daf8 	.word	0x0800daf8
 80023e8:	0800db08 	.word	0x0800db08

080023ec <MENU_PasswdInput>:

void MENU_PasswdInput(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	if (State != ST_PassInput) {
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MENU_PasswdInput+0x44>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d018      	beq.n	800242a <MENU_PasswdInput+0x3e>
		State = ST_PassInput;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <MENU_PasswdInput+0x44>)
 80023fa:	2203      	movs	r2, #3
 80023fc:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80023fe:	f7ff f831 	bl	8001464 <LCD_ClearScreen>

		LCD_PrintCentered("Enter WiFi password:");
 8002402:	480c      	ldr	r0, [pc, #48]	; (8002434 <MENU_PasswdInput+0x48>)
 8002404:	f7ff f902 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 8002408:	2103      	movs	r1, #3
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff f83c 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("Press DOWN to accept");
 8002410:	4809      	ldr	r0, [pc, #36]	; (8002438 <MENU_PasswdInput+0x4c>)
 8002412:	f7ff f8fb 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0, 1);
 8002416:	2101      	movs	r1, #1
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff f835 	bl	8001488 <LCD_SetCursor>

		_PWD_ResetPasswd();
 800241e:	f7ff fc7f 	bl	8001d20 <_PWD_ResetPasswd>

		LCD_DisableBlink();
 8002422:	f7ff f8a3 	bl	800156c <LCD_DisableBlink>
		LCD_EnableCursor();
 8002426:	f7ff f88b 	bl	8001540 <LCD_EnableCursor>
	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20003355 	.word	0x20003355
 8002434:	0800db1c 	.word	0x0800db1c
 8002438:	0800db34 	.word	0x0800db34

0800243c <MENU_Options>:

void MENU_Options(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	if (State != ST_Options) {
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MENU_Options+0x40>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d016      	beq.n	8002476 <MENU_Options+0x3a>
		State = ST_Options;
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MENU_Options+0x40>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 800244e:	f7ff f809 	bl	8001464 <LCD_ClearScreen>

		_currentOption = 1;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <MENU_Options+0x44>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
		LCD_PrintOptionsScreen(_optionsString, _currentOption);
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MENU_Options+0x44>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4809      	ldr	r0, [pc, #36]	; (8002484 <MENU_Options+0x48>)
 8002460:	f7ff fba6 	bl	8001bb0 <LCD_PrintOptionsScreen>
		LCD_SetCursor(0, 1);
 8002464:	2101      	movs	r1, #1
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff f80e 	bl	8001488 <LCD_SetCursor>
		_optionsRow = 1;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MENU_Options+0x4c>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]

		LCD_EnableBlink();
 8002472:	f7ff f891 	bl	8001598 <LCD_EnableBlink>
	}
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20003355 	.word	0x20003355
 8002480:	2000048d 	.word	0x2000048d
 8002484:	20000000 	.word	0x20000000
 8002488:	2000048c 	.word	0x2000048c

0800248c <MENU_OptionsSetDateTime>:

void MENU_OptionsSetDateTime(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
	if (State != ST_SetDateTime) {
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <MENU_OptionsSetDateTime+0x88>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d038      	beq.n	800250c <MENU_OptionsSetDateTime+0x80>
		State = ST_SetDateTime;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <MENU_OptionsSetDateTime+0x88>)
 800249c:	2204      	movs	r2, #4
 800249e:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 80024a0:	f7fe ffe0 	bl	8001464 <LCD_ClearScreen>

		LCD_Print("---Date------Time---");
 80024a4:	481c      	ldr	r0, [pc, #112]	; (8002518 <MENU_OptionsSetDateTime+0x8c>)
 80024a6:	f7ff f88d 	bl	80015c4 <LCD_Print>
		LCD_SetCursor(0, 1);
 80024aa:	2101      	movs	r1, #1
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe ffeb 	bl	8001488 <LCD_SetCursor>
		LCD_Print("|00.00.00||00.00.00|");
 80024b2:	481a      	ldr	r0, [pc, #104]	; (800251c <MENU_OptionsSetDateTime+0x90>)
 80024b4:	f7ff f886 	bl	80015c4 <LCD_Print>
		LCD_SetCursor(0, 2);
 80024b8:	2102      	movs	r1, #2
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe ffe4 	bl	8001488 <LCD_SetCursor>
		LCD_Print("--------------------");
 80024c0:	4817      	ldr	r0, [pc, #92]	; (8002520 <MENU_OptionsSetDateTime+0x94>)
 80024c2:	f7ff f87f 	bl	80015c4 <LCD_Print>
		LCD_SetCursor(0, 3);
 80024c6:	2103      	movs	r1, #3
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe ffdd 	bl	8001488 <LCD_SetCursor>
		LCD_Print("Press DOWN to accept");
 80024ce:	4815      	ldr	r0, [pc, #84]	; (8002524 <MENU_OptionsSetDateTime+0x98>)
 80024d0:	f7ff f878 	bl	80015c4 <LCD_Print>

		LCD_SetCursor(1, 1);
 80024d4:	2101      	movs	r1, #1
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe ffd6 	bl	8001488 <LCD_SetCursor>
		_optionsCol = 1;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MENU_OptionsSetDateTime+0x9c>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]

		LCD_DisableBlink();
 80024e2:	f7ff f843 	bl	800156c <LCD_DisableBlink>
		LCD_EnableCursor();
 80024e6:	f7ff f82b 	bl	8001540 <LCD_EnableCursor>

		for (int i = 0; i < DT_LEN; i++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	e007      	b.n	8002500 <MENU_OptionsSetDateTime+0x74>
			UserDateTime[i] = MIN_DT_CHAR;
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <MENU_OptionsSetDateTime+0xa0>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	2230      	movs	r2, #48	; 0x30
 80024f8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DT_LEN; i++) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3301      	adds	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b12      	cmp	r3, #18
 8002504:	ddf4      	ble.n	80024f0 <MENU_OptionsSetDateTime+0x64>
		}

		_optionsChar = MIN_DT_CHAR;
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <MENU_OptionsSetDateTime+0xa4>)
 8002508:	2230      	movs	r2, #48	; 0x30
 800250a:	701a      	strb	r2, [r3, #0]
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20003355 	.word	0x20003355
 8002518:	0800db4c 	.word	0x0800db4c
 800251c:	0800db64 	.word	0x0800db64
 8002520:	0800db7c 	.word	0x0800db7c
 8002524:	0800db34 	.word	0x0800db34
 8002528:	2000048e 	.word	0x2000048e
 800252c:	200004c0 	.word	0x200004c0
 8002530:	2000048f 	.word	0x2000048f

08002534 <_WiFi_NofNetworks>:

uint8_t _WiFi_NofNetworks(char* data) {
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	int amount = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <_WiFi_NofNetworks+0x22>
			return amount;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e00c      	b.n	8002570 <_WiFi_NofNetworks+0x3c>
		}

		if (data[i] == ';'){
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b3b      	cmp	r3, #59	; 0x3b
 8002560:	d102      	bne.n	8002568 <_WiFi_NofNetworks+0x34>
			amount++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
	for (int i = 0;; i++) {
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
		if (data[i] == 0) {
 800256e:	e7e9      	b.n	8002544 <_WiFi_NofNetworks+0x10>
		}
	}
	return amount;
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_WiFi_RequestConn>:

void _WiFi_RequestConn(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
	int clearRest = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	e015      	b.n	80025b8 <_WiFi_RequestConn+0x3c>
			if (!clearRest && WiFiPassword[i] == 0) clearRest = i;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d107      	bne.n	80025a2 <_WiFi_RequestConn+0x26>
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <_WiFi_RequestConn+0xc4>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <_WiFi_RequestConn+0x26>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	60fb      	str	r3, [r7, #12]
			if (clearRest) WiFiPassword[i] = 0;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <_WiFi_RequestConn+0x36>
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <_WiFi_RequestConn+0xc4>)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_PASSWD_LEN; i++) {
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b27      	cmp	r3, #39	; 0x27
 80025bc:	dde6      	ble.n	800258c <_WiFi_RequestConn+0x10>
	}

	LCD_ClearScreen();
 80025be:	f7fe ff51 	bl	8001464 <LCD_ClearScreen>
	LCD_DisableCursor();
 80025c2:	f7fe ffa7 	bl	8001514 <LCD_DisableCursor>

	LCD_SetCursor(0, 1);
 80025c6:	2101      	movs	r1, #1
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe ff5d 	bl	8001488 <LCD_SetCursor>
	LCD_PrintCentered("Connecting");
 80025ce:	481d      	ldr	r0, [pc, #116]	; (8002644 <_WiFi_RequestConn+0xc8>)
 80025d0:	f7ff f81c 	bl	800160c <LCD_PrintCentered>
	LCD_SetCursor(0, 3);
 80025d4:	2103      	movs	r1, #3
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe ff56 	bl	8001488 <LCD_SetCursor>
	LCD_PrintCentered("please wait xD");
 80025dc:	481a      	ldr	r0, [pc, #104]	; (8002648 <_WiFi_RequestConn+0xcc>)
 80025de:	f7ff f815 	bl	800160c <LCD_PrintCentered>

	uint8_t result = NET_ConnectToWiFi((char*)WiFiPassword, _currentOption);
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <_WiFi_RequestConn+0xd0>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4815      	ldr	r0, [pc, #84]	; (8002640 <_WiFi_RequestConn+0xc4>)
 80025ea:	f000 fcf5 	bl	8002fd8 <NET_ConnectToWiFi>
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
	LCD_ClearScreen();
 80025f2:	f7fe ff37 	bl	8001464 <LCD_ClearScreen>

	if (result == 0) {
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <_WiFi_RequestConn+0x98>
		LCD_SetCursor(0,1);
 80025fc:	2101      	movs	r1, #1
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe ff42 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("Connected!");
 8002604:	4812      	ldr	r0, [pc, #72]	; (8002650 <_WiFi_RequestConn+0xd4>)
 8002606:	f7ff f801 	bl	800160c <LCD_PrintCentered>

		HAL_Delay(1000);
 800260a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260e:	f005 f997 	bl	8007940 <HAL_Delay>
 8002612:	e00d      	b.n	8002630 <_WiFi_RequestConn+0xb4>
	} else {
		LCD_SetCursor(0,1);
 8002614:	2101      	movs	r1, #1
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe ff36 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("Couldn't connect");
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <_WiFi_RequestConn+0xd8>)
 800261e:	f7fe fff5 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0,2);
 8002622:	2102      	movs	r1, #2
 8002624:	2000      	movs	r0, #0
 8002626:	f7fe ff2f 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("to chosen network.");
 800262a:	480b      	ldr	r0, [pc, #44]	; (8002658 <_WiFi_RequestConn+0xdc>)
 800262c:	f7fe ffee 	bl	800160c <LCD_PrintCentered>
	}
	HAL_Delay(1000);
 8002630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002634:	f005 f984 	bl	8007940 <HAL_Delay>
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000494 	.word	0x20000494
 8002644:	0800db94 	.word	0x0800db94
 8002648:	0800dba0 	.word	0x0800dba0
 800264c:	2000048d 	.word	0x2000048d
 8002650:	0800dbb0 	.word	0x0800dbb0
 8002654:	0800dbbc 	.word	0x0800dbbc
 8002658:	0800dbd0 	.word	0x0800dbd0

0800265c <MENU_OptionsWifiList>:

void MENU_OptionsWifiList(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
	if (State != ST_WiFi) {
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <MENU_OptionsWifiList+0xac>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d049      	beq.n	80026fe <MENU_OptionsWifiList+0xa2>
		State = ST_WiFi;
 800266a:	4b27      	ldr	r3, [pc, #156]	; (8002708 <MENU_OptionsWifiList+0xac>)
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
		LCD_ClearScreen();
 8002670:	f7fe fef8 	bl	8001464 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002674:	f7fe ff7a 	bl	800156c <LCD_DisableBlink>

		LCD_PrintCentered("Select a network");
 8002678:	4824      	ldr	r0, [pc, #144]	; (800270c <MENU_OptionsWifiList+0xb0>)
 800267a:	f7fe ffc7 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0, 2);
 800267e:	2102      	movs	r1, #2
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe ff01 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("searching...");
 8002686:	4822      	ldr	r0, [pc, #136]	; (8002710 <MENU_OptionsWifiList+0xb4>)
 8002688:	f7fe ffc0 	bl	800160c <LCD_PrintCentered>
		LCD_SetCursor(0, 3);
 800268c:	2103      	movs	r1, #3
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe fefa 	bl	8001488 <LCD_SetCursor>
		LCD_PrintCentered("please wait :)");
 8002694:	481f      	ldr	r0, [pc, #124]	; (8002714 <MENU_OptionsWifiList+0xb8>)
 8002696:	f7fe ffb9 	bl	800160c <LCD_PrintCentered>

		_optionsRow = 0;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MENU_OptionsWifiList+0xbc>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]

		char* data = NET_RequestNetworkList();
 80026a0:	f000 fb66 	bl	8002d70 <NET_RequestNetworkList>
 80026a4:	6078      	str	r0, [r7, #4]
		if (data != NULL) {
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d019      	beq.n	80026e0 <MENU_OptionsWifiList+0x84>
			/* liczba rzedow do poruszania sie */
			_networksIn = _WiFi_NofNetworks(data);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff41 	bl	8002534 <_WiFi_NofNetworks>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b19      	ldr	r3, [pc, #100]	; (800271c <MENU_OptionsWifiList+0xc0>)
 80026b8:	701a      	strb	r2, [r3, #0]
			_currentOption = 1;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <MENU_OptionsWifiList+0xc4>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
			_networksList = data;
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <MENU_OptionsWifiList+0xc8>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]

			LCD_PrintNetworks(data, _currentOption);
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <MENU_OptionsWifiList+0xc4>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fa03 	bl	8001ad8 <LCD_PrintNetworks>

			/* przygotuj sie na wybor */
			LCD_EnableBlink();
 80026d2:	f7fe ff61 	bl	8001598 <LCD_EnableBlink>
			LCD_SetCursor(0, 0);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fed5 	bl	8001488 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
			HAL_Delay(1000);
			MENU_Options();
		}
	}
}
 80026de:	e00e      	b.n	80026fe <MENU_OptionsWifiList+0xa2>
			LCD_ClearScreen();
 80026e0:	f7fe fec0 	bl	8001464 <LCD_ClearScreen>
			LCD_SetCursor(0, 1);
 80026e4:	2101      	movs	r1, #1
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fece 	bl	8001488 <LCD_SetCursor>
			LCD_PrintCentered("No networks found!");
 80026ec:	480e      	ldr	r0, [pc, #56]	; (8002728 <MENU_OptionsWifiList+0xcc>)
 80026ee:	f7fe ff8d 	bl	800160c <LCD_PrintCentered>
			HAL_Delay(1000);
 80026f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f6:	f005 f923 	bl	8007940 <HAL_Delay>
			MENU_Options();
 80026fa:	f7ff fe9f 	bl	800243c <MENU_Options>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20003355 	.word	0x20003355
 800270c:	0800dbe4 	.word	0x0800dbe4
 8002710:	0800dbf8 	.word	0x0800dbf8
 8002714:	0800dc08 	.word	0x0800dc08
 8002718:	2000048c 	.word	0x2000048c
 800271c:	200004bc 	.word	0x200004bc
 8002720:	2000048d 	.word	0x2000048d
 8002724:	20000490 	.word	0x20000490
 8002728:	0800dc18 	.word	0x0800dc18

0800272c <MENU_Clock>:

void MENU_Clock(void) {
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
	if (State != ST_Clock) {
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MENU_Clock+0x74>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <MENU_Clock+0x1c>
		State = ST_Clock;
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <MENU_Clock+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]

		LCD_ClearScreen();
 8002740:	f7fe fe90 	bl	8001464 <LCD_ClearScreen>
		LCD_DisableBlink();
 8002744:	f7fe ff12 	bl	800156c <LCD_DisableBlink>
	}

	char date[9], time[9];
	float data[2];

	SD_RefreshDateTime();
 8002748:	f001 f986 	bl	8003a58 <SD_RefreshDateTime>
	SD_GetDateTime(date, time);
 800274c:	f107 0208 	add.w	r2, r7, #8
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f001 f9fc 	bl	8003b54 <SD_GetDateTime>

	LCD_PrintDateTime(date, time);
 800275c:	f107 0208 	add.w	r2, r7, #8
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff f98a 	bl	8001a80 <LCD_PrintDateTime>

	if (THS_ReadData(THS_In, data)) {
 800276c:	463b      	mov	r3, r7
 800276e:	4619      	mov	r1, r3
 8002770:	2000      	movs	r0, #0
 8002772:	f001 fbf3 	bl	8003f5c <THS_ReadData>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <MENU_Clock+0x5a>
		LCD_PrintTempInfo(data, NULL);
 800277c:	463b      	mov	r3, r7
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ff6d 	bl	8001660 <LCD_PrintTempInfo>
	}

	LCD_PrintNetworkStatus(Mode, NET_GetConnInfo());
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <MENU_Clock+0x78>)
 8002788:	781c      	ldrb	r4, [r3, #0]
 800278a:	f000 fcb5 	bl	80030f8 <NET_GetConnInfo>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fa58 	bl	8001c48 <LCD_PrintNetworkStatus>
}
 8002798:	bf00      	nop
 800279a:	3724      	adds	r7, #36	; 0x24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	20003355 	.word	0x20003355
 80027a4:	20003354 	.word	0x20003354

080027a8 <MENU_HandleKeys>:

uint8_t MENU_HandleKeys(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	IfPressed (UP) {
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	48b0      	ldr	r0, [pc, #704]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 80027b0:	f005 fbb6 	bl	8007f20 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 808e 	beq.w	80028d8 <MENU_HandleKeys+0x130>
 80027bc:	200a      	movs	r0, #10
 80027be:	f005 f8bf 	bl	8007940 <HAL_Delay>
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	48aa      	ldr	r0, [pc, #680]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 80027c6:	f005 fbab 	bl	8007f20 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 81e5 	beq.w	8002b9c <MENU_HandleKeys+0x3f4>
 80027d2:	bf00      	nop
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	48a6      	ldr	r0, [pc, #664]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 80027d8:	f005 fba2 	bl	8007f20 <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f8      	bne.n	80027d4 <MENU_HandleKeys+0x2c>
		LCD_WakeScreen();
 80027e2:	f7fe fe1b 	bl	800141c <LCD_WakeScreen>

		if (State == ST_Clock) {
 80027e6:	4ba3      	ldr	r3, [pc, #652]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <MENU_HandleKeys+0x4c>
			/* Przejdz w ekran opcji */
			MENU_Options();
 80027ee:	f7ff fe25 	bl	800243c <MENU_Options>
 80027f2:	e06a      	b.n	80028ca <MENU_HandleKeys+0x122>
		} else if (State == ST_Options) {
 80027f4:	4b9f      	ldr	r3, [pc, #636]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d125      	bne.n	8002848 <MENU_HandleKeys+0xa0>
			if (_optionsRow > 1) {
 80027fc:	4b9e      	ldr	r3, [pc, #632]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d90c      	bls.n	800281e <MENU_HandleKeys+0x76>
				_optionsRow = LCD_CursorUp();
 8002804:	f7ff f87e 	bl	8001904 <LCD_CursorUp>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b9a      	ldr	r3, [pc, #616]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 800280e:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b98      	ldr	r3, [pc, #608]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e055      	b.n	80028ca <MENU_HandleKeys+0x122>
			} else if (_currentOption != 1) {
 800281e:	4b97      	ldr	r3, [pc, #604]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d051      	beq.n	80028ca <MENU_HandleKeys+0x122>
				LCD_PrintOptionsScreen(_optionsString, --_currentOption);
 8002826:	4b95      	ldr	r3, [pc, #596]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3b01      	subs	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b93      	ldr	r3, [pc, #588]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	4891      	ldr	r0, [pc, #580]	; (8002a80 <MENU_HandleKeys+0x2d8>)
 800283a:	f7ff f9b9 	bl	8001bb0 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 1);
 800283e:	2101      	movs	r1, #1
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fe21 	bl	8001488 <LCD_SetCursor>
 8002846:	e040      	b.n	80028ca <MENU_HandleKeys+0x122>
			}
		} else if (State == ST_PassInput) {
 8002848:	4b8a      	ldr	r3, [pc, #552]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d106      	bne.n	800285e <MENU_HandleKeys+0xb6>
			/* Dopasuj kolejny znak ASCII */
			_PWD_SaveAndWrite(_PWD_NextChar());
 8002850:	f7ff fa8a 	bl	8001d68 <_PWD_NextChar>
 8002854:	4603      	mov	r3, r0
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fa9e 	bl	8001d98 <_PWD_SaveAndWrite>
 800285c:	e035      	b.n	80028ca <MENU_HandleKeys+0x122>
		} else if (State == ST_SetDateTime) {
 800285e:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d102      	bne.n	800286c <MENU_HandleKeys+0xc4>
			/* wstepne ograniczenie inputu */
			_CLK_HandleDateTimeInput();
 8002866:	f7ff fab3 	bl	8001dd0 <_CLK_HandleDateTimeInput>
 800286a:	e02e      	b.n	80028ca <MENU_HandleKeys+0x122>
		} else if (State == ST_WiFi) {
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d12a      	bne.n	80028ca <MENU_HandleKeys+0x122>
			if (_optionsRow > 0) {
 8002874:	4b80      	ldr	r3, [pc, #512]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <MENU_HandleKeys+0xee>
				_optionsRow = LCD_CursorUp();
 800287c:	f7ff f842 	bl	8001904 <LCD_CursorUp>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 8002886:	701a      	strb	r2, [r3, #0]
				_currentOption--;
 8002888:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002892:	701a      	strb	r2, [r3, #0]
 8002894:	e019      	b.n	80028ca <MENU_HandleKeys+0x122>
			} else if (_networksIn > 4 && _currentOption != 1) {
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <MENU_HandleKeys+0x2dc>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b04      	cmp	r3, #4
 800289c:	d915      	bls.n	80028ca <MENU_HandleKeys+0x122>
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d011      	beq.n	80028ca <MENU_HandleKeys+0x122>
				LCD_PrintNetworks(_networksList, --_currentOption);
 80028a6:	4b78      	ldr	r3, [pc, #480]	; (8002a88 <MENU_HandleKeys+0x2e0>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b2d9      	uxtb	r1, r3
 80028b2:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80028b4:	7019      	strb	r1, [r3, #0]
 80028b6:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7ff f90b 	bl	8001ad8 <LCD_PrintNetworks>
				LCD_SetCursor(0, 0);
 80028c2:	2100      	movs	r1, #0
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fddf 	bl	8001488 <LCD_SetCursor>
			}
		}

		LED_T(Red);
 80028ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ce:	486f      	ldr	r0, [pc, #444]	; (8002a8c <MENU_HandleKeys+0x2e4>)
 80028d0:	f005 fb57 	bl	8007f82 <HAL_GPIO_TogglePin>
		return 1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e162      	b.n	8002b9e <MENU_HandleKeys+0x3f6>

	} Or (DOWN) {
 80028d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028dc:	4864      	ldr	r0, [pc, #400]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 80028de:	f005 fb1f 	bl	8007f20 <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8093 	beq.w	8002a10 <MENU_HandleKeys+0x268>
 80028ea:	200a      	movs	r0, #10
 80028ec:	f005 f828 	bl	8007940 <HAL_Delay>
 80028f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f4:	485e      	ldr	r0, [pc, #376]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 80028f6:	f005 fb13 	bl	8007f20 <HAL_GPIO_ReadPin>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 814d 	beq.w	8002b9c <MENU_HandleKeys+0x3f4>
 8002902:	bf00      	nop
 8002904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002908:	4859      	ldr	r0, [pc, #356]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 800290a:	f005 fb09 	bl	8007f20 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f7      	bne.n	8002904 <MENU_HandleKeys+0x15c>
		LCD_WakeScreen();
 8002914:	f7fe fd82 	bl	800141c <LCD_WakeScreen>

		if (State == ST_Options) {
 8002918:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d126      	bne.n	800296e <MENU_HandleKeys+0x1c6>
			if (_optionsRow < 3) {
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d80c      	bhi.n	8002942 <MENU_HandleKeys+0x19a>
				_optionsRow = LCD_CursorDown();
 8002928:	f7ff f808 	bl	800193c <LCD_CursorDown>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 8002932:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2da      	uxtb	r2, r3
 800293c:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e05f      	b.n	8002a02 <MENU_HandleKeys+0x25a>
			} else if (_currentOption != NOF_OPTIONS) {
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d05b      	beq.n	8002a02 <MENU_HandleKeys+0x25a>
				LCD_PrintOptionsScreen(_optionsString, ++_currentOption - 2);
 800294a:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3b02      	subs	r3, #2
 800295c:	4619      	mov	r1, r3
 800295e:	4848      	ldr	r0, [pc, #288]	; (8002a80 <MENU_HandleKeys+0x2d8>)
 8002960:	f7ff f926 	bl	8001bb0 <LCD_PrintOptionsScreen>
				LCD_SetCursor(0, 3);
 8002964:	2103      	movs	r1, #3
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fd8e 	bl	8001488 <LCD_SetCursor>
 800296c:	e049      	b.n	8002a02 <MENU_HandleKeys+0x25a>
			}
		} else if (State == ST_PassInput) {
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d104      	bne.n	8002980 <MENU_HandleKeys+0x1d8>
			/* Powrot do trybu zegara */
			_WiFi_RequestConn();
 8002976:	f7ff fe01 	bl	800257c <_WiFi_RequestConn>
			MENU_Clock();
 800297a:	f7ff fed7 	bl	800272c <MENU_Clock>
 800297e:	e040      	b.n	8002a02 <MENU_HandleKeys+0x25a>
		} else if (State == ST_SetDateTime) {
 8002980:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d104      	bne.n	8002992 <MENU_HandleKeys+0x1ea>
			_CLK_ParseAndSetDateTime();
 8002988:	f7ff fc40 	bl	800220c <_CLK_ParseAndSetDateTime>
			MENU_Clock();
 800298c:	f7ff fece 	bl	800272c <MENU_Clock>
 8002990:	e037      	b.n	8002a02 <MENU_HandleKeys+0x25a>
		} else if (State == ST_WiFi) {
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d133      	bne.n	8002a02 <MENU_HandleKeys+0x25a>
			//TODO DEBUG n TESTING
			if (_optionsRow < 4 && _optionsRow < _networksIn - 1) {
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d814      	bhi.n	80029cc <MENU_HandleKeys+0x224>
 80029a2:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <MENU_HandleKeys+0x2dc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da0c      	bge.n	80029cc <MENU_HandleKeys+0x224>
				_optionsRow = LCD_CursorDown();
 80029b2:	f7fe ffc3 	bl	800193c <LCD_CursorDown>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <MENU_HandleKeys+0x2d0>)
 80029bc:	701a      	strb	r2, [r3, #0]
				_currentOption++;
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e01a      	b.n	8002a02 <MENU_HandleKeys+0x25a>
			} else if (_networksIn > 4 && _currentOption != 4) {
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <MENU_HandleKeys+0x2dc>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d916      	bls.n	8002a02 <MENU_HandleKeys+0x25a>
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d012      	beq.n	8002a02 <MENU_HandleKeys+0x25a>
				LCD_PrintNetworks(_networksList, ++_currentOption - 4);
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <MENU_HandleKeys+0x2e0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029ea:	7019      	strb	r1, [r3, #0]
 80029ec:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <MENU_HandleKeys+0x2d4>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	3b04      	subs	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7ff f86f 	bl	8001ad8 <LCD_PrintNetworks>
				LCD_SetCursor(0, 3);
 80029fa:	2103      	movs	r1, #3
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fd43 	bl	8001488 <LCD_SetCursor>
			}
		}

		LED_T(Green);
 8002a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a06:	4821      	ldr	r0, [pc, #132]	; (8002a8c <MENU_HandleKeys+0x2e4>)
 8002a08:	f005 fabb 	bl	8007f82 <HAL_GPIO_TogglePin>
		return 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0c6      	b.n	8002b9e <MENU_HandleKeys+0x3f6>

	} Or (LEFT) {
 8002a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a14:	4816      	ldr	r0, [pc, #88]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 8002a16:	f005 fa83 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d054      	beq.n	8002aca <MENU_HandleKeys+0x322>
 8002a20:	200a      	movs	r0, #10
 8002a22:	f004 ff8d 	bl	8007940 <HAL_Delay>
 8002a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a2a:	4811      	ldr	r0, [pc, #68]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 8002a2c:	f005 fa78 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80b2 	beq.w	8002b9c <MENU_HandleKeys+0x3f4>
 8002a38:	bf00      	nop
 8002a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <MENU_HandleKeys+0x2c8>)
 8002a40:	f005 fa6e 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f7      	bne.n	8002a3a <MENU_HandleKeys+0x292>
		LCD_WakeScreen();
 8002a4a:	f7fe fce7 	bl	800141c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MENU_HandleKeys+0x2cc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d11e      	bne.n	8002a94 <MENU_HandleKeys+0x2ec>
			/* Poprzedni znak w jednej z dwoch kolumn */
			if (_PWD_index > 0) {
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MENU_HandleKeys+0x2e8>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <MENU_HandleKeys+0x314>
				--_PWD_index;
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <MENU_HandleKeys+0x2e8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <MENU_HandleKeys+0x2e8>)
 8002a68:	701a      	strb	r2, [r3, #0]
				LCD_CursorLeft();
 8002a6a:	f7fe ff83 	bl	8001974 <LCD_CursorLeft>
 8002a6e:	e025      	b.n	8002abc <MENU_HandleKeys+0x314>
 8002a70:	40021000 	.word	0x40021000
 8002a74:	20003355 	.word	0x20003355
 8002a78:	2000048c 	.word	0x2000048c
 8002a7c:	2000048d 	.word	0x2000048d
 8002a80:	20000000 	.word	0x20000000
 8002a84:	200004bc 	.word	0x200004bc
 8002a88:	20000490 	.word	0x20000490
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	200004d3 	.word	0x200004d3
			}
		} else if (State == ST_Options) {
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <MENU_HandleKeys+0x2fa>
			MENU_Clock();
 8002a9c:	f7ff fe46 	bl	800272c <MENU_Clock>
 8002aa0:	e00c      	b.n	8002abc <MENU_HandleKeys+0x314>
		} else if (State == ST_SetDateTime) {
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d102      	bne.n	8002ab0 <MENU_HandleKeys+0x308>
			_CLK_MoveInputLeft();
 8002aaa:	f7ff fb4f 	bl	800214c <_CLK_MoveInputLeft>
 8002aae:	e005      	b.n	8002abc <MENU_HandleKeys+0x314>
		} else if (State == ST_WiFi) {
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d101      	bne.n	8002abc <MENU_HandleKeys+0x314>
			MENU_Options();
 8002ab8:	f7ff fcc0 	bl	800243c <MENU_Options>
		}

		LED_T(Blue);
 8002abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac0:	4839      	ldr	r0, [pc, #228]	; (8002ba8 <MENU_HandleKeys+0x400>)
 8002ac2:	f005 fa5e 	bl	8007f82 <HAL_GPIO_TogglePin>
		return 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e069      	b.n	8002b9e <MENU_HandleKeys+0x3f6>

	} Or (RIGHT) {
 8002aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ace:	4837      	ldr	r0, [pc, #220]	; (8002bac <MENU_HandleKeys+0x404>)
 8002ad0:	f005 fa26 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d060      	beq.n	8002b9c <MENU_HandleKeys+0x3f4>
 8002ada:	200a      	movs	r0, #10
 8002adc:	f004 ff30 	bl	8007940 <HAL_Delay>
 8002ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae4:	4831      	ldr	r0, [pc, #196]	; (8002bac <MENU_HandleKeys+0x404>)
 8002ae6:	f005 fa1b 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d055      	beq.n	8002b9c <MENU_HandleKeys+0x3f4>
 8002af0:	bf00      	nop
 8002af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002af6:	482d      	ldr	r0, [pc, #180]	; (8002bac <MENU_HandleKeys+0x404>)
 8002af8:	f005 fa12 	bl	8007f20 <HAL_GPIO_ReadPin>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f7      	bne.n	8002af2 <MENU_HandleKeys+0x34a>
		LCD_WakeScreen();
 8002b02:	f7fe fc8b 	bl	800141c <LCD_WakeScreen>

		if (State == ST_PassInput) {
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d113      	bne.n	8002b36 <MENU_HandleKeys+0x38e>
			/* Kolejny znak w jednej z dwoch kolumn */
			if (WiFiPassword[_PWD_index] != 0 && _PWD_index < MAX_PASSWD_LEN - 1) {
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <MENU_HandleKeys+0x408>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <MENU_HandleKeys+0x40c>)
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d038      	beq.n	8002b8e <MENU_HandleKeys+0x3e6>
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <MENU_HandleKeys+0x408>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b26      	cmp	r3, #38	; 0x26
 8002b22:	d834      	bhi.n	8002b8e <MENU_HandleKeys+0x3e6>
				++_PWD_index;
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <MENU_HandleKeys+0x408>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <MENU_HandleKeys+0x408>)
 8002b2e:	701a      	strb	r2, [r3, #0]
				LCD_CursorRight();
 8002b30:	f7fe ff4e 	bl	80019d0 <LCD_CursorRight>
 8002b34:	e02b      	b.n	8002b8e <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_Options) {
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11a      	bne.n	8002b74 <MENU_HandleKeys+0x3cc>
			if (_currentOption == 1) {
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <MENU_HandleKeys+0x410>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <MENU_HandleKeys+0x3a4>
				/* Polacz z wifi */
				MENU_OptionsWifiList();
 8002b46:	f7ff fd89 	bl	800265c <MENU_OptionsWifiList>
 8002b4a:	e020      	b.n	8002b8e <MENU_HandleKeys+0x3e6>
			} else if (_currentOption == 2) {
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MENU_HandleKeys+0x410>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d104      	bne.n	8002b5e <MENU_HandleKeys+0x3b6>
				/* rozlacz wifi */
				NET_WiFiDisconnect();
 8002b54:	f000 fb2e 	bl	80031b4 <NET_WiFiDisconnect>
				MENU_Clock();
 8002b58:	f7ff fde8 	bl	800272c <MENU_Clock>
 8002b5c:	e017      	b.n	8002b8e <MENU_HandleKeys+0x3e6>

			} else if (_currentOption == 3) {
 8002b5e:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <MENU_HandleKeys+0x410>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d013      	beq.n	8002b8e <MENU_HandleKeys+0x3e6>
				/* Przelacz w tryb ap */

			} else if (_currentOption == 4) {
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MENU_HandleKeys+0x410>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d10f      	bne.n	8002b8e <MENU_HandleKeys+0x3e6>
				/* Ustaw date */
				MENU_OptionsSetDateTime();
 8002b6e:	f7ff fc8d 	bl	800248c <MENU_OptionsSetDateTime>
 8002b72:	e00c      	b.n	8002b8e <MENU_HandleKeys+0x3e6>
			}
		} else if (State == ST_SetDateTime) {
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d102      	bne.n	8002b82 <MENU_HandleKeys+0x3da>
			_CLK_MoveInputRight();
 8002b7c:	f7ff fa86 	bl	800208c <_CLK_MoveInputRight>
 8002b80:	e005      	b.n	8002b8e <MENU_HandleKeys+0x3e6>
		} else if (State == ST_WiFi) {
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MENU_HandleKeys+0x3fc>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d101      	bne.n	8002b8e <MENU_HandleKeys+0x3e6>
			MENU_PasswdInput();
 8002b8a:	f7ff fc2f 	bl	80023ec <MENU_PasswdInput>
		}

		LED_T(Orange);
 8002b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b92:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MENU_HandleKeys+0x400>)
 8002b94:	f005 f9f5 	bl	8007f82 <HAL_GPIO_TogglePin>
		return 1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <MENU_HandleKeys+0x3f6>

	} IfEnd;
	return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20003355 	.word	0x20003355
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	200004d3 	.word	0x200004d3
 8002bb4:	20000494 	.word	0x20000494
 8002bb8:	2000048d 	.word	0x2000048d

08002bbc <_NET_ResetBuffer>:
extern ModeEnum Mode;

char _receive[RECEIVE_BUFFER_SIZE];
char _currentIP[IP_SIZE];

void _NET_ResetBuffer(void) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	e007      	b.n	8002bd8 <_NET_ResetBuffer+0x1c>
		_receive[i] = 0;
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <_NET_ResetBuffer+0x30>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bde:	dbf3      	blt.n	8002bc8 <_NET_ResetBuffer+0xc>
	}
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200004e4 	.word	0x200004e4

08002bf0 <_NET_ResetIP>:

void _NET_ResetIP(void) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
	for (int i = 0; i < IP_SIZE; i++) {
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	e007      	b.n	8002c0c <_NET_ResetIP+0x1c>
		_currentIP[i] = 0;
 8002bfc:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <_NET_ResetIP+0x30>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IP_SIZE; i++) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b0e      	cmp	r3, #14
 8002c10:	ddf4      	ble.n	8002bfc <_NET_ResetIP+0xc>
	}
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	200004d4 	.word	0x200004d4

08002c24 <_NET_StartReceiveIT>:

void _NET_StartReceiveIT(void) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	_NET_ResetBuffer();
 8002c28:	f7ff ffc8 	bl	8002bbc <_NET_ResetBuffer>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &(_receive[0]), 1);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4903      	ldr	r1, [pc, #12]	; (8002c3c <_NET_StartReceiveIT+0x18>)
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <_NET_StartReceiveIT+0x1c>)
 8002c32:	f007 ff45 	bl	800aac0 <HAL_UART_Receive_IT>
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004e4 	.word	0x200004e4
 8002c40:	200032d4 	.word	0x200032d4

08002c44 <NET_GetIndexForPattern>:

int NET_GetIndexForPattern(char pattern[]) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	int find = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
	int patternLen = strlen(pattern);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fd fac7 	bl	80001e4 <strlen>
 8002c56:	4603      	mov	r3, r0
 8002c58:	60fb      	str	r3, [r7, #12]

	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e018      	b.n	8002c92 <NET_GetIndexForPattern+0x4e>
		if (find == patternLen) {
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d101      	bne.n	8002c6c <NET_GetIndexForPattern+0x28>
			return cursor;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	e018      	b.n	8002c9e <NET_GetIndexForPattern+0x5a>
		}

		if (_receive[cursor] == pattern[find]) {
 8002c6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ca8 <NET_GetIndexForPattern+0x64>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4413      	add	r3, r2
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	440b      	add	r3, r1
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d103      	bne.n	8002c88 <NET_GetIndexForPattern+0x44>
			find++;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e001      	b.n	8002c8c <NET_GetIndexForPattern+0x48>
		} else {
			find = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
	for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c98:	dbe2      	blt.n	8002c60 <NET_GetIndexForPattern+0x1c>
		}
	}
	return -1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200004e4 	.word	0x200004e4

08002cac <_NET_SendCommand>:

uint8_t _NET_SendCommand(char command[], uint32_t tTimeout, uint32_t rTimeout) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
	_NET_ResetBuffer();
 8002cb8:	f7ff ff80 	bl	8002bbc <_NET_ResetBuffer>
	size_t len = strlen(command);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7fd fa91 	bl	80001e4 <strlen>
 8002cc2:	6178      	str	r0, [r7, #20]

	HAL_UART_AbortReceive_IT(&huart3);
 8002cc4:	4812      	ldr	r0, [pc, #72]	; (8002d10 <_NET_SendCommand+0x64>)
 8002cc6:	f007 ff51 	bl	800ab6c <HAL_UART_AbortReceive_IT>

	HAL_UART_Transmit(&huart3, (uint8_t*) command, len, tTimeout);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	480f      	ldr	r0, [pc, #60]	; (8002d10 <_NET_SendCommand+0x64>)
 8002cd4:	f007 fdb5 	bl	800a842 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) "\r\n", 2, 1);
 8002cd8:	2301      	movs	r3, #1
 8002cda:	2202      	movs	r2, #2
 8002cdc:	490d      	ldr	r1, [pc, #52]	; (8002d14 <_NET_SendCommand+0x68>)
 8002cde:	480c      	ldr	r0, [pc, #48]	; (8002d10 <_NET_SendCommand+0x64>)
 8002ce0:	f007 fdaf 	bl	800a842 <HAL_UART_Transmit>

	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cea:	490b      	ldr	r1, [pc, #44]	; (8002d18 <_NET_SendCommand+0x6c>)
 8002cec:	4808      	ldr	r0, [pc, #32]	; (8002d10 <_NET_SendCommand+0x64>)
 8002cee:	f007 fe41 	bl	800a974 <HAL_UART_Receive>
			rTimeout);

	/* szukaj odpowiedzi 'OK\r\n' */
	if (NET_GetIndexForPattern(OK_PATTERN) != -1) {
 8002cf2:	480a      	ldr	r0, [pc, #40]	; (8002d1c <_NET_SendCommand+0x70>)
 8002cf4:	f7ff ffa6 	bl	8002c44 <NET_GetIndexForPattern>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d001      	beq.n	8002d04 <_NET_SendCommand+0x58>
		return 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <_NET_SendCommand+0x5a>
	}
	/* komunikat niekompletny lub niepoprawny */
	return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200032d4 	.word	0x200032d4
 8002d14:	0800dc2c 	.word	0x0800dc2c
 8002d18:	200004e4 	.word	0x200004e4
 8002d1c:	0800dc30 	.word	0x0800dc30

08002d20 <_NET_SetClientDConnMode>:

void _NET_SetClientDConnMode(void) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002d24:	e002      	b.n	8002d2c <_NET_SetClientDConnMode+0xc>
		HAL_Delay(1);
 8002d26:	2001      	movs	r0, #1
 8002d28:	f004 fe0a 	bl	8007940 <HAL_Delay>
	while (_NET_SendCommand(RESET, 1, 50) != 0)
 8002d2c:	2232      	movs	r2, #50	; 0x32
 8002d2e:	2101      	movs	r1, #1
 8002d30:	480a      	ldr	r0, [pc, #40]	; (8002d5c <_NET_SetClientDConnMode+0x3c>)
 8002d32:	f7ff ffbb 	bl	8002cac <_NET_SendCommand>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f4      	bne.n	8002d26 <_NET_SetClientDConnMode+0x6>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002d3c:	e002      	b.n	8002d44 <_NET_SetClientDConnMode+0x24>
		HAL_Delay(1);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f004 fdfe 	bl	8007940 <HAL_Delay>
	while (_NET_SendCommand(SET_MODE(MIXED), 5, 100) != 0)
 8002d44:	2264      	movs	r2, #100	; 0x64
 8002d46:	2105      	movs	r1, #5
 8002d48:	4805      	ldr	r0, [pc, #20]	; (8002d60 <_NET_SetClientDConnMode+0x40>)
 8002d4a:	f7ff ffaf 	bl	8002cac <_NET_SendCommand>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f4      	bne.n	8002d3e <_NET_SetClientDConnMode+0x1e>
	NET_WiFiDisconnect();
 8002d54:	f000 fa2e 	bl	80031b4 <NET_WiFiDisconnect>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	0800dc38 	.word	0x0800dc38
 8002d60:	0800dc40 	.word	0x0800dc40

08002d64 <NET_Init>:

void NET_Init(void) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	_NET_SetClientDConnMode();
 8002d68:	f7ff ffda 	bl	8002d20 <_NET_SetClientDConnMode>
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <NET_RequestNetworkList>:

char* NET_RequestNetworkList(void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
	if (_NET_SendCommand(SHOW_NETWORKS, 1, NETWORK_LIST_TIMEOUT) == 0) {
 8002d76:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4894      	ldr	r0, [pc, #592]	; (8002fd0 <NET_RequestNetworkList+0x260>)
 8002d7e:	f7ff ff95 	bl	8002cac <_NET_SendCommand>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 811e 	bne.w	8002fc6 <NET_RequestNetworkList+0x256>
		int index = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	e0f8      	b.n	8002f86 <NET_RequestNetworkList+0x216>
			if (_receive[cursor] == '(') {
 8002d94:	4a8f      	ldr	r2, [pc, #572]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b28      	cmp	r3, #40	; 0x28
 8002d9e:	f040 80e4 	bne.w	8002f6a <NET_RequestNetworkList+0x1fa>

				_receive[cursor++] = 1;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	4a8a      	ldr	r2, [pc, #552]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	54d1      	strb	r1, [r2, r3]
				int security = _receive[cursor] - '0';
 8002dae:	4a89      	ldr	r2, [pc, #548]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	3b30      	subs	r3, #48	; 0x30
 8002db8:	603b      	str	r3, [r7, #0]

				/* esp8266 nie obluguje wpa2 enterprise*/
				if (security == 5)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	f000 80e8 	beq.w	8002f92 <NET_RequestNetworkList+0x222>
					break;

				/* potrzebujemy tylko ssid */
				while (_receive[cursor] != '"') {
 8002dc2:	e005      	b.n	8002dd0 <NET_RequestNetworkList+0x60>
					_receive[cursor++] = 1;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	60ba      	str	r2, [r7, #8]
 8002dca:	4a82      	ldr	r2, [pc, #520]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002dd0:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b22      	cmp	r3, #34	; 0x22
 8002dda:	d1f3      	bne.n	8002dc4 <NET_RequestNetworkList+0x54>
				}

				_receive[cursor++] = 1;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	60ba      	str	r2, [r7, #8]
 8002de2:	4a7c      	ldr	r2, [pc, #496]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002de4:	2101      	movs	r1, #1
 8002de6:	54d1      	strb	r1, [r2, r3]

				/* przepisz ssid na poczatek buforu */
				while (_receive[cursor] != '"') {
 8002de8:	e00e      	b.n	8002e08 <NET_RequestNetworkList+0x98>
					_receive[index++] = _receive[cursor];
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	60fa      	str	r2, [r7, #12]
 8002df0:	4978      	ldr	r1, [pc, #480]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	440a      	add	r2, r1
 8002df6:	7811      	ldrb	r1, [r2, #0]
 8002df8:	4a76      	ldr	r2, [pc, #472]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002dfa:	54d1      	strb	r1, [r2, r3]
					_receive[cursor++] = 1;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	60ba      	str	r2, [r7, #8]
 8002e02:	4a74      	ldr	r2, [pc, #464]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != '"') {
 8002e08:	4a72      	ldr	r2, [pc, #456]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b22      	cmp	r3, #34	; 0x22
 8002e12:	d1ea      	bne.n	8002dea <NET_RequestNetworkList+0x7a>
				}

				/* ignoruj reszte */
				while (_receive[cursor] != ')') {
 8002e14:	e005      	b.n	8002e22 <NET_RequestNetworkList+0xb2>
					_receive[cursor++] = 1;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	60ba      	str	r2, [r7, #8]
 8002e1c:	4a6d      	ldr	r2, [pc, #436]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	54d1      	strb	r1, [r2, r3]
				while (_receive[cursor] != ')') {
 8002e22:	4a6c      	ldr	r2, [pc, #432]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4413      	add	r3, r2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b29      	cmp	r3, #41	; 0x29
 8002e2c:	d1f3      	bne.n	8002e16 <NET_RequestNetworkList+0xa6>
				}

				_receive[index++] = '-';
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	4a67      	ldr	r2, [pc, #412]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e36:	212d      	movs	r1, #45	; 0x2d
 8002e38:	54d1      	strb	r1, [r2, r3]
				_receive[cursor++] = 1;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	60ba      	str	r2, [r7, #8]
 8002e40:	4a64      	ldr	r2, [pc, #400]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	54d1      	strb	r1, [r2, r3]

				/* informacja o zabezpieczeniach */
				if (security == 0) {
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d118      	bne.n	8002e7e <NET_RequestNetworkList+0x10e>
					_receive[index++] = 'O';
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	60fa      	str	r2, [r7, #12]
 8002e52:	4a60      	ldr	r2, [pc, #384]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e54:	214f      	movs	r1, #79	; 0x4f
 8002e56:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60fa      	str	r2, [r7, #12]
 8002e5e:	4a5d      	ldr	r2, [pc, #372]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e60:	2150      	movs	r1, #80	; 0x50
 8002e62:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	60fa      	str	r2, [r7, #12]
 8002e6a:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e6c:	2145      	movs	r1, #69	; 0x45
 8002e6e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'N';
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	60fa      	str	r2, [r7, #12]
 8002e76:	4a57      	ldr	r2, [pc, #348]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e78:	214e      	movs	r1, #78	; 0x4e
 8002e7a:	54d1      	strb	r1, [r2, r3]
 8002e7c:	e06e      	b.n	8002f5c <NET_RequestNetworkList+0x1ec>
				} else if (security == 1) {
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d118      	bne.n	8002eb6 <NET_RequestNetworkList+0x146>
					_receive[index++] = 'W';
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	60fa      	str	r2, [r7, #12]
 8002e8a:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e8c:	2157      	movs	r1, #87	; 0x57
 8002e8e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'E';
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	60fa      	str	r2, [r7, #12]
 8002e96:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002e98:	2145      	movs	r1, #69	; 0x45
 8002e9a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	60fa      	str	r2, [r7, #12]
 8002ea2:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002ea4:	2150      	movs	r1, #80	; 0x50
 8002ea6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	60fa      	str	r2, [r7, #12]
 8002eae:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	54d1      	strb	r1, [r2, r3]
 8002eb4:	e052      	b.n	8002f5c <NET_RequestNetworkList+0x1ec>
				} else if (security == 2) {
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d118      	bne.n	8002eee <NET_RequestNetworkList+0x17e>
					_receive[index++] = 'W';
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60fa      	str	r2, [r7, #12]
 8002ec2:	4a44      	ldr	r2, [pc, #272]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002ec4:	2157      	movs	r1, #87	; 0x57
 8002ec6:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60fa      	str	r2, [r7, #12]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002ed0:	2150      	movs	r1, #80	; 0x50
 8002ed2:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	4a3e      	ldr	r2, [pc, #248]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002edc:	2141      	movs	r1, #65	; 0x41
 8002ede:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = ' ';
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	60fa      	str	r2, [r7, #12]
 8002ee6:	4a3b      	ldr	r2, [pc, #236]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002ee8:	2120      	movs	r1, #32
 8002eea:	54d1      	strb	r1, [r2, r3]
 8002eec:	e036      	b.n	8002f5c <NET_RequestNetworkList+0x1ec>
				} else if (security == 3) {
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d118      	bne.n	8002f26 <NET_RequestNetworkList+0x1b6>
					_receive[index++] = 'W';
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60fa      	str	r2, [r7, #12]
 8002efa:	4a36      	ldr	r2, [pc, #216]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002efc:	2157      	movs	r1, #87	; 0x57
 8002efe:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'P';
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	60fa      	str	r2, [r7, #12]
 8002f06:	4a33      	ldr	r2, [pc, #204]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f08:	2150      	movs	r1, #80	; 0x50
 8002f0a:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'A';
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60fa      	str	r2, [r7, #12]
 8002f12:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f14:	2141      	movs	r1, #65	; 0x41
 8002f16:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = '2';
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	60fa      	str	r2, [r7, #12]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f20:	2132      	movs	r1, #50	; 0x32
 8002f22:	54d1      	strb	r1, [r2, r3]
 8002f24:	e01a      	b.n	8002f5c <NET_RequestNetworkList+0x1ec>
				} else if (security == 4) {
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d117      	bne.n	8002f5c <NET_RequestNetworkList+0x1ec>
					_receive[index++] = 'M';
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60fa      	str	r2, [r7, #12]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f34:	214d      	movs	r1, #77	; 0x4d
 8002f36:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'I';
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	60fa      	str	r2, [r7, #12]
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f40:	2149      	movs	r1, #73	; 0x49
 8002f42:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'X';
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60fa      	str	r2, [r7, #12]
 8002f4a:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f4c:	2158      	movs	r1, #88	; 0x58
 8002f4e:	54d1      	strb	r1, [r2, r3]
					_receive[index++] = 'D';
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	60fa      	str	r2, [r7, #12]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f58:	2144      	movs	r1, #68	; 0x44
 8002f5a:	54d1      	strb	r1, [r2, r3]
				}
				_receive[index++] = ';';
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60fa      	str	r2, [r7, #12]
 8002f62:	4a1c      	ldr	r2, [pc, #112]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f64:	213b      	movs	r1, #59	; 0x3b
 8002f66:	54d1      	strb	r1, [r2, r3]
				continue;
 8002f68:	e00a      	b.n	8002f80 <NET_RequestNetworkList+0x210>
			} else if (_receive[cursor] == 0) {
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00f      	beq.n	8002f96 <NET_RequestNetworkList+0x226>
				break;
			}
			/* czysc bezuzyteczne znaki */
			_receive[cursor] = 1;
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
		for (int cursor = 0; cursor < RECEIVE_BUFFER_SIZE; cursor++) {
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f8c:	f6ff af02 	blt.w	8002d94 <NET_RequestNetworkList+0x24>
 8002f90:	e002      	b.n	8002f98 <NET_RequestNetworkList+0x228>
					break;
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <NET_RequestNetworkList+0x228>
				break;
 8002f96:	bf00      	nop
		}

		/* wyczysc reszte buforu */
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002f98:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e007      	b.n	8002fb0 <NET_RequestNetworkList+0x240>
			_receive[i] = 0;
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
		for (int i = RECEIVE_BUFFER_SIZE - 1; i >= index; i--) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	daf3      	bge.n	8002fa0 <NET_RequestNetworkList+0x230>
		}

		/* przekaz wyniki wyzej */
		if (index == 0) {
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <NET_RequestNetworkList+0x252>
			return NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e002      	b.n	8002fc8 <NET_RequestNetworkList+0x258>
		} else {
			return (char*) _receive;
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <NET_RequestNetworkList+0x264>)
 8002fc4:	e000      	b.n	8002fc8 <NET_RequestNetworkList+0x258>
		}
	}
	return NULL;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	0800dc4c 	.word	0x0800dc4c
 8002fd4:	200004e4 	.word	0x200004e4

08002fd8 <NET_ConnectToWiFi>:

uint8_t NET_ConnectToWiFi(char *password, int network) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0a0      	sub	sp, #128	; 0x80
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	int ssidIndex = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
	int cmdIndex = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	67bb      	str	r3, [r7, #120]	; 0x78
	char cmd[100] = { 0 };
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	2264      	movs	r2, #100	; 0x64
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f008 fc56 	bl	800b8a4 <memset>

	/* ustaw indeks na wlasciwym ssid */
	for (int i = 0; i < network - 1; i++) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8002ffc:	e00a      	b.n	8003014 <NET_ConnectToWiFi+0x3c>
		while (_receive[ssidIndex++] != ';')
 8002ffe:	bf00      	nop
 8003000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003006:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <NET_ConnectToWiFi+0x10c>)
 8003008:	5cd3      	ldrb	r3, [r2, r3]
 800300a:	2b3b      	cmp	r3, #59	; 0x3b
 800300c:	d1f8      	bne.n	8003000 <NET_ConnectToWiFi+0x28>
	for (int i = 0; i < network - 1; i++) {
 800300e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003010:	3301      	adds	r3, #1
 8003012:	677b      	str	r3, [r7, #116]	; 0x74
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3b01      	subs	r3, #1
 8003018:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800301a:	429a      	cmp	r2, r3
 800301c:	dbef      	blt.n	8002ffe <NET_ConnectToWiFi+0x26>
			;
	}

	strcpy(cmd, CONN_TO_NETWORK);
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4a31      	ldr	r2, [pc, #196]	; (80030e8 <NET_ConnectToWiFi+0x110>)
 8003024:	ca07      	ldmia	r2, {r0, r1, r2}
 8003026:	c303      	stmia	r3!, {r0, r1}
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	3302      	adds	r3, #2
 800302c:	0c12      	lsrs	r2, r2, #16
 800302e:	701a      	strb	r2, [r3, #0]
	cmdIndex += strlen(CONN_TO_NETWORK);
 8003030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003032:	330a      	adds	r3, #10
 8003034:	67bb      	str	r3, [r7, #120]	; 0x78

	for (int i = 0;; i++) {
 8003036:	2300      	movs	r3, #0
 8003038:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <NET_ConnectToWiFi+0x10c>)
 800303c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800303e:	4413      	add	r3, r2
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b2d      	cmp	r3, #45	; 0x2d
 8003044:	d010      	beq.n	8003068 <NET_ConnectToWiFi+0x90>
			break;
		} else {
			cmd[cmdIndex++] = _receive[ssidIndex++];
 8003046:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003048:	1c53      	adds	r3, r2, #1
 800304a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800304c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	67b9      	str	r1, [r7, #120]	; 0x78
 8003052:	4924      	ldr	r1, [pc, #144]	; (80030e4 <NET_ConnectToWiFi+0x10c>)
 8003054:	5c8a      	ldrb	r2, [r1, r2]
 8003056:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800305a:	440b      	add	r3, r1
 800305c:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (int i = 0;; i++) {
 8003060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003062:	3301      	adds	r3, #1
 8003064:	673b      	str	r3, [r7, #112]	; 0x70
		if (_receive[ssidIndex] == '-') {
 8003066:	e7e8      	b.n	800303a <NET_ConnectToWiFi+0x62>
			break;
 8003068:	bf00      	nop
		}
	}

	strcat(cmd, "\",\"");
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd f8b8 	bl	80001e4 <strlen>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	4413      	add	r3, r2
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <NET_ConnectToWiFi+0x114>)
 8003080:	6810      	ldr	r0, [r2, #0]
 8003082:	6018      	str	r0, [r3, #0]
	strcat(cmd, password);
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f009 f88e 	bl	800c1ac <strcat>
	strcat(cmd, "\"");
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f8a5 	bl	80001e4 <strlen>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	4413      	add	r3, r2
 80030a4:	4912      	ldr	r1, [pc, #72]	; (80030f0 <NET_ConnectToWiFi+0x118>)
 80030a6:	461a      	mov	r2, r3
 80030a8:	460b      	mov	r3, r1
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	8013      	strh	r3, [r2, #0]

	if (_NET_SendCommand(cmd, 10, NETWORK_LIST_TIMEOUT) == 0) {
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80030b6:	210a      	movs	r1, #10
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fdf7 	bl	8002cac <_NET_SendCommand>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d106      	bne.n	80030d2 <NET_ConnectToWiFi+0xfa>
		Mode = MD_ClientConn;
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <NET_ConnectToWiFi+0x11c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
		NET_HTTPSetup();
 80030ca:	f000 f88b 	bl	80031e4 <NET_HTTPSetup>

		return 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e003      	b.n	80030da <NET_ConnectToWiFi+0x102>
	}
	Mode = MD_LostHost;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <NET_ConnectToWiFi+0x11c>)
 80030d4:	2203      	movs	r2, #3
 80030d6:	701a      	strb	r2, [r3, #0]
	return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3780      	adds	r7, #128	; 0x80
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200004e4 	.word	0x200004e4
 80030e8:	0800dc58 	.word	0x0800dc58
 80030ec:	0800dc64 	.word	0x0800dc64
 80030f0:	0800dc68 	.word	0x0800dc68
 80030f4:	20003354 	.word	0x20003354

080030f8 <NET_GetConnInfo>:

char* NET_GetConnInfo(void) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
	if ((Mode == MD_ClientConn || Mode == MD_LostHost)
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <NET_GetConnInfo+0xa4>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <NET_GetConnInfo+0x16>
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <NET_GetConnInfo+0xa4>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d13e      	bne.n	800318c <NET_GetConnInfo+0x94>
			&& _NET_SendCommand(SHOW_IP, 5, 100) == 0) {
 800310e:	2264      	movs	r2, #100	; 0x64
 8003110:	2105      	movs	r1, #5
 8003112:	4823      	ldr	r0, [pc, #140]	; (80031a0 <NET_GetConnInfo+0xa8>)
 8003114:	f7ff fdca 	bl	8002cac <_NET_SendCommand>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d136      	bne.n	800318c <NET_GetConnInfo+0x94>
		int cursor = NET_GetIndexForPattern(CLIENT_IP_PATTERN);
 800311e:	4821      	ldr	r0, [pc, #132]	; (80031a4 <NET_GetConnInfo+0xac>)
 8003120:	f7ff fd90 	bl	8002c44 <NET_GetIndexForPattern>
 8003124:	6078      	str	r0, [r7, #4]
		int index = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	603b      	str	r3, [r7, #0]

		_NET_ResetIP();
 800312a:	f7ff fd61 	bl	8002bf0 <_NET_ResetIP>
		/* bierzemy tylko ip */
		while (_receive[cursor] != '"') {
 800312e:	e012      	b.n	8003156 <NET_GetConnInfo+0x5e>
			_currentIP[index++] = _receive[cursor++];
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	1c53      	adds	r3, r2, #1
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	6039      	str	r1, [r7, #0]
 800313c:	491a      	ldr	r1, [pc, #104]	; (80031a8 <NET_GetConnInfo+0xb0>)
 800313e:	5c89      	ldrb	r1, [r1, r2]
 8003140:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <NET_GetConnInfo+0xb4>)
 8003142:	54d1      	strb	r1, [r2, r3]

			if (index - 1 > 15) {
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	2b0f      	cmp	r3, #15
 800314a:	dd04      	ble.n	8003156 <NET_GetConnInfo+0x5e>
				Mode = MD_LostHost;
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <NET_GetConnInfo+0xa4>)
 800314e:	2203      	movs	r2, #3
 8003150:	701a      	strb	r2, [r3, #0]
				return NULL; /* to nie jest adres ip */
 8003152:	2300      	movs	r3, #0
 8003154:	e01d      	b.n	8003192 <NET_GetConnInfo+0x9a>
		while (_receive[cursor] != '"') {
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <NET_GetConnInfo+0xb0>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b22      	cmp	r3, #34	; 0x22
 8003160:	d1e6      	bne.n	8003130 <NET_GetConnInfo+0x38>
			}
		}

		if (strcmp("0.0.0.0", _receive) == 0) {
 8003162:	4911      	ldr	r1, [pc, #68]	; (80031a8 <NET_GetConnInfo+0xb0>)
 8003164:	4812      	ldr	r0, [pc, #72]	; (80031b0 <NET_GetConnInfo+0xb8>)
 8003166:	f7fd f833 	bl	80001d0 <strcmp>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <NET_GetConnInfo+0x82>
			Mode = MD_LostHost;
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <NET_GetConnInfo+0xa4>)
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
			return NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	e00b      	b.n	8003192 <NET_GetConnInfo+0x9a>
		}
		/* jesli uda sie nawiazac polaczenie pozniej, ustaw serwer */
		if (Mode == MD_LostHost) {
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <NET_GetConnInfo+0xa4>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d104      	bne.n	800318c <NET_GetConnInfo+0x94>
			NET_HTTPSetup();
 8003182:	f000 f82f 	bl	80031e4 <NET_HTTPSetup>
			Mode = MD_ClientConn;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <NET_GetConnInfo+0xa4>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* wznow nasluchiwanie */
	_NET_StartReceiveIT();
 800318c:	f7ff fd4a 	bl	8002c24 <_NET_StartReceiveIT>
	return (char*) _currentIP;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <NET_GetConnInfo+0xb4>)
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20003354 	.word	0x20003354
 80031a0:	0800dc6c 	.word	0x0800dc6c
 80031a4:	0800dc78 	.word	0x0800dc78
 80031a8:	200004e4 	.word	0x200004e4
 80031ac:	200004d4 	.word	0x200004d4
 80031b0:	0800dc80 	.word	0x0800dc80

080031b4 <NET_WiFiDisconnect>:

uint8_t NET_WiFiDisconnect(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 80031b8:	e002      	b.n	80031c0 <NET_WiFiDisconnect+0xc>
		HAL_Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f004 fbc0 	bl	8007940 <HAL_Delay>
	while (_NET_SendCommand(DISCONNECT, 5, 100) != 0)
 80031c0:	2264      	movs	r2, #100	; 0x64
 80031c2:	2105      	movs	r1, #5
 80031c4:	4805      	ldr	r0, [pc, #20]	; (80031dc <NET_WiFiDisconnect+0x28>)
 80031c6:	f7ff fd71 	bl	8002cac <_NET_SendCommand>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f4      	bne.n	80031ba <NET_WiFiDisconnect+0x6>
	Mode = MD_ClientDConn;
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <NET_WiFiDisconnect+0x2c>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
	return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	0800dc88 	.word	0x0800dc88
 80031e0:	20003354 	.word	0x20003354

080031e4 <NET_HTTPSetup>:

uint8_t NET_HTTPSetup(void) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80031e8:	e002      	b.n	80031f0 <NET_HTTPSetup+0xc>
		HAL_Delay(1);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f004 fba8 	bl	8007940 <HAL_Delay>
	while (_NET_SendCommand(SET_MUX("1"), 5, 100) != 0)
 80031f0:	2264      	movs	r2, #100	; 0x64
 80031f2:	2105      	movs	r1, #5
 80031f4:	480a      	ldr	r0, [pc, #40]	; (8003220 <NET_HTTPSetup+0x3c>)
 80031f6:	f7ff fd59 	bl	8002cac <_NET_SendCommand>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f4      	bne.n	80031ea <NET_HTTPSetup+0x6>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 8003200:	e002      	b.n	8003208 <NET_HTTPSetup+0x24>
		HAL_Delay(1);
 8003202:	2001      	movs	r0, #1
 8003204:	f004 fb9c 	bl	8007940 <HAL_Delay>
	while (_NET_SendCommand(SETUP_SERVER("1", "80"), 5, 100) != 0)
 8003208:	2264      	movs	r2, #100	; 0x64
 800320a:	2105      	movs	r1, #5
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <NET_HTTPSetup+0x40>)
 800320e:	f7ff fd4d 	bl	8002cac <_NET_SendCommand>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f4      	bne.n	8003202 <NET_HTTPSetup+0x1e>

	/* gniazdo tcp juz nasluchuje na porcie 80 */
	return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	0800dc94 	.word	0x0800dc94
 8003224:	0800dca0 	.word	0x0800dca0

08003228 <NET_HandleUART_IT>:

void NET_HandleUART_IT(void) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
	/* pobierz caly bufor */
	HAL_UART_Receive(&huart3, (uint8_t*) _receive, RECEIVE_BUFFER_SIZE, REQUEST_RECEIVE_TIMEOUT);
 800322e:	2364      	movs	r3, #100	; 0x64
 8003230:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003234:	4924      	ldr	r1, [pc, #144]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003236:	4825      	ldr	r0, [pc, #148]	; (80032cc <NET_HandleUART_IT+0xa4>)
 8003238:	f007 fb9c 	bl	800a974 <HAL_UART_Receive>

	int index = NET_GetIndexForPattern(REQUEST_RECIEVED_PATTERN);
 800323c:	4824      	ldr	r0, [pc, #144]	; (80032d0 <NET_HandleUART_IT+0xa8>)
 800323e:	f7ff fd01 	bl	8002c44 <NET_GetIndexForPattern>
 8003242:	60f8      	str	r0, [r7, #12]
	if (index != -1) {
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d036      	beq.n	80032ba <NET_HandleUART_IT+0x92>
		char connID = _receive[index++];
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	60fa      	str	r2, [r7, #12]
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	71fb      	strb	r3, [r7, #7]
		/* przesun zadanie o przeanalizowane znaki */
		while (_receive[index++] != ':')
 8003258:	bf00      	nop
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	60fa      	str	r2, [r7, #12]
 8003260:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	2b3a      	cmp	r3, #58	; 0x3a
 8003266:	d1f8      	bne.n	800325a <NET_HandleUART_IT+0x32>
			;
		/* sformuluj zadanie http i podaj wyzej */
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	e01c      	b.n	80032a8 <NET_HandleUART_IT+0x80>
			if (index > RECEIVE_BUFFER_SIZE || _receive[index] == 0) {
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003274:	dc05      	bgt.n	8003282 <NET_HandleUART_IT+0x5a>
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <NET_HandleUART_IT+0x66>
				_receive[i] = 0;
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4413      	add	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e009      	b.n	80032a2 <NET_HandleUART_IT+0x7a>
			} else {
				_receive[i] = _receive[index++];
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	60fa      	str	r2, [r7, #12]
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 8003296:	5cd1      	ldrb	r1, [r2, r3]
 8003298:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	460a      	mov	r2, r1
 80032a0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < RECEIVE_BUFFER_SIZE; i++) {
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032ae:	dbde      	blt.n	800326e <NET_HandleUART_IT+0x46>
			}
		}

		HTTP_HandleRequest((char*) _receive, connID);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	4619      	mov	r1, r3
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <NET_HandleUART_IT+0xa0>)
 80032b6:	f7fd fec5 	bl	8001044 <HTTP_HandleRequest>
	}

	_NET_StartReceiveIT();
 80032ba:	f7ff fcb3 	bl	8002c24 <_NET_StartReceiveIT>
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200004e4 	.word	0x200004e4
 80032cc:	200032d4 	.word	0x200032d4
 80032d0:	0800dcb4 	.word	0x0800dcb4

080032d4 <NET_SendTCPData>:

#define __CMD_SIZE 20
#define __resetCmd() for(int i=0;i<__CMD_SIZE;i++)cmd[i]=0

void NET_SendTCPData(char connID, char *data) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE ];
	uint32_t len = strlen(data), index = 0;
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f7fc ff7f 	bl	80001e4 <strlen>
 80032e6:	6238      	str	r0, [r7, #32]
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (len > index) {
 80032ec:	e043      	b.n	8003376 <NET_SendTCPData+0xa2>
		/* dziel dane na paczki i odsylaj dokument */
		int toSend = (len - index > PACKET_SIZE) ? PACKET_SIZE : len - index;
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	bf28      	it	cs
 80032fa:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80032fe:	61fb      	str	r3, [r7, #28]

		__resetCmd();
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	e008      	b.n	8003318 <NET_SendTCPData+0x44>
 8003306:	f107 0208 	add.w	r2, r7, #8
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	4413      	add	r3, r2
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	3301      	adds	r3, #1
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	2b13      	cmp	r3, #19
 800331c:	ddf3      	ble.n	8003306 <NET_SendTCPData+0x32>
		sprintf(cmd, SEND_DATA_TO_CONN("%c", "%d"), connID, toSend);
 800331e:	79fa      	ldrb	r2, [r7, #7]
 8003320:	f107 0008 	add.w	r0, r7, #8
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4918      	ldr	r1, [pc, #96]	; (8003388 <NET_SendTCPData+0xb4>)
 8003328:	f008 ff20 	bl	800c16c <siprintf>
		while (_NET_SendCommand(cmd, 5, 100) != 0)
 800332c:	bf00      	nop
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	2264      	movs	r2, #100	; 0x64
 8003334:	2105      	movs	r1, #5
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fcb8 	bl	8002cac <_NET_SendCommand>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f5      	bne.n	800332e <NET_SendTCPData+0x5a>
			;

		HAL_Delay(PACKET_INTERVAL);
 8003342:	2014      	movs	r0, #20
 8003344:	f004 fafc 	bl	8007940 <HAL_Delay>

		for (int i = 0; i < toSend; i++) {
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e00c      	b.n	8003368 <NET_SendTCPData+0x94>
			HAL_UART_Transmit(&huart3, (uint8_t*) &(data[index++]), 1, 100);
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	18d1      	adds	r1, r2, r3
 8003358:	2364      	movs	r3, #100	; 0x64
 800335a:	2201      	movs	r2, #1
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <NET_SendTCPData+0xb8>)
 800335e:	f007 fa70 	bl	800a842 <HAL_UART_Transmit>
		for (int i = 0; i < toSend; i++) {
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	dbee      	blt.n	800334e <NET_SendTCPData+0x7a>
		}

		HAL_Delay(5 * PACKET_INTERVAL);
 8003370:	2064      	movs	r0, #100	; 0x64
 8003372:	f004 fae5 	bl	8007940 <HAL_Delay>
	while (len > index) {
 8003376:	6a3a      	ldr	r2, [r7, #32]
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	429a      	cmp	r2, r3
 800337c:	d8b7      	bhi.n	80032ee <NET_SendTCPData+0x1a>
	}
}
 800337e:	bf00      	nop
 8003380:	3730      	adds	r7, #48	; 0x30
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	0800dcbc 	.word	0x0800dcbc
 800338c:	200032d4 	.word	0x200032d4

08003390 <NET_CloseConnSignal>:

void NET_CloseConnSignal(char connID) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
	char cmd[__CMD_SIZE] = {0};
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
 80033a8:	611a      	str	r2, [r3, #16]

	sprintf(cmd, CLOSE_CONN("%c"), connID);
 80033aa:	79fa      	ldrb	r2, [r7, #7]
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	4907      	ldr	r1, [pc, #28]	; (80033d0 <NET_CloseConnSignal+0x40>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f008 feda 	bl	800c16c <siprintf>
	_NET_SendCommand(cmd, 5, 100);
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2264      	movs	r2, #100	; 0x64
 80033be:	2105      	movs	r1, #5
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fc73 	bl	8002cac <_NET_SendCommand>
}
 80033c6:	bf00      	nop
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	0800dcd0 	.word	0x0800dcd0

080033d4 <RGB_Init>:
uint32_t _CCR3; /* BLUE */

uint16_t _state;
RGB_Mode _mode;

void RGB_Init(void) {
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
	_CCR1 = 0;
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <RGB_Init+0x2c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <RGB_Init+0x30>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <RGB_Init+0x34>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
	_state = 0;
 80033ea:	4b08      	ldr	r3, [pc, #32]	; (800340c <RGB_Init+0x38>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Disabled;
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <RGB_Init+0x3c>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	200006e0 	.word	0x200006e0
 8003404:	200006d8 	.word	0x200006d8
 8003408:	200006e4 	.word	0x200006e4
 800340c:	200006dc 	.word	0x200006dc
 8003410:	200006e8 	.word	0x200006e8

08003414 <_RGB_UpdateRegisters>:

void _RGB_UpdateRegisters(void) {
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
	if (_CCR1 > MAX_REG_VAL)
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <_RGB_UpdateRegisters+0x80>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003420:	d303      	bcc.n	800342a <_RGB_UpdateRegisters+0x16>
		_CCR1 = MAX_REG_VAL;
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <_RGB_UpdateRegisters+0x80>)
 8003424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003428:	601a      	str	r2, [r3, #0]
	if (_CCR2 > MAX_REG_VAL)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <_RGB_UpdateRegisters+0x84>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003432:	d303      	bcc.n	800343c <_RGB_UpdateRegisters+0x28>
		_CCR2 = MAX_REG_VAL;
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <_RGB_UpdateRegisters+0x84>)
 8003436:	f240 32e7 	movw	r2, #999	; 0x3e7
 800343a:	601a      	str	r2, [r3, #0]
	if (_CCR3 > MAX_REG_VAL)
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <_RGB_UpdateRegisters+0x88>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003444:	d303      	bcc.n	800344e <_RGB_UpdateRegisters+0x3a>
		_CCR3 = MAX_REG_VAL;
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <_RGB_UpdateRegisters+0x88>)
 8003448:	f240 32e7 	movw	r2, #999	; 0x3e7
 800344c:	601a      	str	r2, [r3, #0]
	if (_CCR2 < 0)
		_CCR2 = 0;
	if (_CCR3 < 0)
		_CCR3 = 0;

	TIM2->CCR1 = _CCR1;
 800344e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <_RGB_UpdateRegisters+0x80>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = _CCR2;
 8003458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <_RGB_UpdateRegisters+0x84>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = _CCR3;
 8003462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <_RGB_UpdateRegisters+0x88>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	63d3      	str	r3, [r2, #60]	; 0x3c

	++_state;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <_RGB_UpdateRegisters+0x8c>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <_RGB_UpdateRegisters+0x8c>)
 8003476:	801a      	strh	r2, [r3, #0]
	if (_state > MAX_REG_VAL - 3)
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <_RGB_UpdateRegisters+0x8c>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	f5b3 7f79 	cmp.w	r3, #996	; 0x3e4
 8003480:	d902      	bls.n	8003488 <_RGB_UpdateRegisters+0x74>
		_state = 0;
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <_RGB_UpdateRegisters+0x8c>)
 8003484:	2200      	movs	r2, #0
 8003486:	801a      	strh	r2, [r3, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	200006e0 	.word	0x200006e0
 8003498:	200006d8 	.word	0x200006d8
 800349c:	200006e4 	.word	0x200006e4
 80034a0:	200006dc 	.word	0x200006dc

080034a4 <_RGB_SetWhite>:

void _RGB_SetWhite(void) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
	_mode = RGB_White;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <_RGB_SetWhite+0x2c>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <_RGB_SetWhite+0x30>)
 80034b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034b4:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <_RGB_SetWhite+0x34>)
 80034b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034bc:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <_RGB_SetWhite+0x38>)
 80034c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034c4:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80034c6:	f7ff ffa5 	bl	8003414 <_RGB_UpdateRegisters>
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200006e8 	.word	0x200006e8
 80034d4:	200006e0 	.word	0x200006e0
 80034d8:	200006d8 	.word	0x200006d8
 80034dc:	200006e4 	.word	0x200006e4

080034e0 <_RGB_SetRed>:

void _RGB_SetRed(void) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	_mode = RGB_Red;
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <_RGB_SetRed+0x28>)
 80034e6:	2202      	movs	r2, #2
 80034e8:	701a      	strb	r2, [r3, #0]

	_CCR1 = MAX_REG_VAL;
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <_RGB_SetRed+0x2c>)
 80034ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034f0:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <_RGB_SetRed+0x30>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <_RGB_SetRed+0x34>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80034fe:	f7ff ff89 	bl	8003414 <_RGB_UpdateRegisters>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200006e8 	.word	0x200006e8
 800350c:	200006e0 	.word	0x200006e0
 8003510:	200006d8 	.word	0x200006d8
 8003514:	200006e4 	.word	0x200006e4

08003518 <_RGB_SetGreen>:

void _RGB_SetGreen(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	_mode = RGB_Green;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_RGB_SetGreen+0x28>)
 800351e:	2203      	movs	r2, #3
 8003520:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <_RGB_SetGreen+0x2c>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	_CCR2 = MAX_REG_VAL;
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <_RGB_SetGreen+0x30>)
 800352a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800352e:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <_RGB_SetGreen+0x34>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 8003536:	f7ff ff6d 	bl	8003414 <_RGB_UpdateRegisters>
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200006e8 	.word	0x200006e8
 8003544:	200006e0 	.word	0x200006e0
 8003548:	200006d8 	.word	0x200006d8
 800354c:	200006e4 	.word	0x200006e4

08003550 <_RGB_SetBlue>:

void _RGB_SetBlue(void) {
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	_mode = RGB_Blue;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <_RGB_SetBlue+0x28>)
 8003556:	2204      	movs	r2, #4
 8003558:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <_RGB_SetBlue+0x2c>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <_RGB_SetBlue+0x30>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
	_CCR3 = MAX_REG_VAL;
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <_RGB_SetBlue+0x34>)
 8003568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800356c:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 800356e:	f7ff ff51 	bl	8003414 <_RGB_UpdateRegisters>
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200006e8 	.word	0x200006e8
 800357c:	200006e0 	.word	0x200006e0
 8003580:	200006d8 	.word	0x200006d8
 8003584:	200006e4 	.word	0x200006e4

08003588 <_RGB_SetBlack>:

void _RGB_SetBlack(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	_mode = RGB_Disabled;
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_RGB_SetBlack+0x24>)
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003592:	4b07      	ldr	r3, [pc, #28]	; (80035b0 <_RGB_SetBlack+0x28>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <_RGB_SetBlack+0x2c>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <_RGB_SetBlack+0x30>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

	_RGB_UpdateRegisters();
 80035a4:	f7ff ff36 	bl	8003414 <_RGB_UpdateRegisters>
}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200006e8 	.word	0x200006e8
 80035b0:	200006e0 	.word	0x200006e0
 80035b4:	200006d8 	.word	0x200006d8
 80035b8:	200006e4 	.word	0x200006e4

080035bc <_RGB_Rainbow>:

void _RGB_Rainbow(void) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
	if (_mode != RGB_Rainbow)
 80035c0:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <_RGB_Rainbow+0x10c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	d002      	beq.n	80035ce <_RGB_Rainbow+0x12>
		_state = 0;
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <_RGB_Rainbow+0x110>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	801a      	strh	r2, [r3, #0]
	_mode = RGB_Rainbow;
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <_RGB_Rainbow+0x10c>)
 80035d0:	2209      	movs	r2, #9
 80035d2:	701a      	strb	r2, [r3, #0]

	switch (_state) {
 80035d4:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <_RGB_Rainbow+0x110>)
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f240 124d 	movw	r2, #333	; 0x14d
 80035dc:	4293      	cmp	r3, r2
 80035de:	d010      	beq.n	8003602 <_RGB_Rainbow+0x46>
 80035e0:	f240 229a 	movw	r2, #666	; 0x29a
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d017      	beq.n	8003618 <_RGB_Rainbow+0x5c>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d120      	bne.n	800362e <_RGB_Rainbow+0x72>
	case 0: {
		_CCR1 = MAX_REG_VAL;
 80035ec:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <_RGB_Rainbow+0x114>)
 80035ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f2:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <_RGB_Rainbow+0x118>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <_RGB_Rainbow+0x11c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
		break;
 8003600:	e05e      	b.n	80036c0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL / 3): {
		_CCR1 = 0;
 8003602:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <_RGB_Rainbow+0x114>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
		_CCR2 = MAX_REG_VAL;
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <_RGB_Rainbow+0x118>)
 800360a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800360e:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003610:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <_RGB_Rainbow+0x11c>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
		break;
 8003616:	e053      	b.n	80036c0 <_RGB_Rainbow+0x104>
	}
	case (int) (MAX_REG_VAL * 2 / 3): {
		_CCR1 = 0;
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <_RGB_Rainbow+0x114>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <_RGB_Rainbow+0x118>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
		_CCR3 = MAX_REG_VAL;
 8003624:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <_RGB_Rainbow+0x11c>)
 8003626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800362a:	601a      	str	r2, [r3, #0]
		break;
 800362c:	e048      	b.n	80036c0 <_RGB_Rainbow+0x104>
	}
	default: {
		if (_state > 0 && (_state < MAX_REG_VAL / 3)) {
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <_RGB_Rainbow+0x110>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <_RGB_Rainbow+0xa0>
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <_RGB_Rainbow+0x110>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 800363e:	d80d      	bhi.n	800365c <_RGB_Rainbow+0xa0>
			_CCR1 -= 3;
 8003640:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <_RGB_Rainbow+0x114>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3b03      	subs	r3, #3
 8003646:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <_RGB_Rainbow+0x114>)
 8003648:	6013      	str	r3, [r2, #0]
			_CCR2 += 3;
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <_RGB_Rainbow+0x118>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3303      	adds	r3, #3
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <_RGB_Rainbow+0x118>)
 8003652:	6013      	str	r3, [r2, #0]
			_CCR3 = 0;
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <_RGB_Rainbow+0x11c>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e031      	b.n	80036c0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL / 3)
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <_RGB_Rainbow+0x110>)
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8003664:	d313      	bcc.n	800368e <_RGB_Rainbow+0xd2>
				&& (_state < MAX_REG_VAL * 2 / 3)) {
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <_RGB_Rainbow+0x110>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f240 2299 	movw	r2, #665	; 0x299
 800366e:	4293      	cmp	r3, r2
 8003670:	d80d      	bhi.n	800368e <_RGB_Rainbow+0xd2>
			_CCR1 = 0;
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <_RGB_Rainbow+0x114>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
			_CCR2 -= 3;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <_RGB_Rainbow+0x118>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3b03      	subs	r3, #3
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <_RGB_Rainbow+0x118>)
 8003680:	6013      	str	r3, [r2, #0]
			_CCR3 += 3;
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <_RGB_Rainbow+0x11c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3303      	adds	r3, #3
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <_RGB_Rainbow+0x11c>)
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e018      	b.n	80036c0 <_RGB_Rainbow+0x104>
		} else if ((_state > MAX_REG_VAL * 2 / 3) && (_state < MAX_REG_VAL)) {
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <_RGB_Rainbow+0x110>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f240 229a 	movw	r2, #666	; 0x29a
 8003696:	4293      	cmp	r3, r2
 8003698:	d912      	bls.n	80036c0 <_RGB_Rainbow+0x104>
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <_RGB_Rainbow+0x110>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f240 32e6 	movw	r2, #998	; 0x3e6
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d80c      	bhi.n	80036c0 <_RGB_Rainbow+0x104>
			_CCR1 += 3;
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <_RGB_Rainbow+0x114>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3303      	adds	r3, #3
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <_RGB_Rainbow+0x114>)
 80036ae:	6013      	str	r3, [r2, #0]
			_CCR2 = 0;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <_RGB_Rainbow+0x118>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
			_CCR3 -= 3;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <_RGB_Rainbow+0x11c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3b03      	subs	r3, #3
 80036bc:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <_RGB_Rainbow+0x11c>)
 80036be:	6013      	str	r3, [r2, #0]
		}
	}
	}
	_RGB_UpdateRegisters();
 80036c0:	f7ff fea8 	bl	8003414 <_RGB_UpdateRegisters>
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200006e8 	.word	0x200006e8
 80036cc:	200006dc 	.word	0x200006dc
 80036d0:	200006e0 	.word	0x200006e0
 80036d4:	200006d8 	.word	0x200006d8
 80036d8:	200006e4 	.word	0x200006e4

080036dc <_RGB_BlinkRed>:

void _RGB_BlinkRed(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkRed)
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <_RGB_BlinkRed+0x5c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d002      	beq.n	80036ee <_RGB_BlinkRed+0x12>
		_state = 0;
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <_RGB_BlinkRed+0x60>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkRed;
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <_RGB_BlinkRed+0x5c>)
 80036f0:	2206      	movs	r2, #6
 80036f2:	701a      	strb	r2, [r3, #0]

	_CCR2 = 0;
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <_RGB_BlinkRed+0x64>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <_RGB_BlinkRed+0x68>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <_RGB_BlinkRed+0x60>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <_RGB_BlinkRed+0x34>
		_CCR1 = 0;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <_RGB_BlinkRed+0x6c>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e00f      	b.n	8003730 <_RGB_BlinkRed+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <_RGB_BlinkRed+0x60>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003718:	d805      	bhi.n	8003726 <_RGB_BlinkRed+0x4a>
		_CCR1 += 2;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <_RGB_BlinkRed+0x6c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3302      	adds	r3, #2
 8003720:	4a09      	ldr	r2, [pc, #36]	; (8003748 <_RGB_BlinkRed+0x6c>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e004      	b.n	8003730 <_RGB_BlinkRed+0x54>
	} else {
		_CCR1 -= 2;
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <_RGB_BlinkRed+0x6c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3b02      	subs	r3, #2
 800372c:	4a06      	ldr	r2, [pc, #24]	; (8003748 <_RGB_BlinkRed+0x6c>)
 800372e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003730:	f7ff fe70 	bl	8003414 <_RGB_UpdateRegisters>
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200006e8 	.word	0x200006e8
 800373c:	200006dc 	.word	0x200006dc
 8003740:	200006d8 	.word	0x200006d8
 8003744:	200006e4 	.word	0x200006e4
 8003748:	200006e0 	.word	0x200006e0

0800374c <_RGB_BlinkGreen>:

void _RGB_BlinkGreen(void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkGreen)
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <_RGB_BlinkGreen+0x5c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b07      	cmp	r3, #7
 8003756:	d002      	beq.n	800375e <_RGB_BlinkGreen+0x12>
		_state = 0;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <_RGB_BlinkGreen+0x60>)
 800375a:	2200      	movs	r2, #0
 800375c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkGreen;
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <_RGB_BlinkGreen+0x5c>)
 8003760:	2207      	movs	r2, #7
 8003762:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <_RGB_BlinkGreen+0x64>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
	_CCR3 = 0;
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <_RGB_BlinkGreen+0x68>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <_RGB_BlinkGreen+0x60>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <_RGB_BlinkGreen+0x34>
		_CCR2 = 0;
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <_RGB_BlinkGreen+0x6c>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e00f      	b.n	80037a0 <_RGB_BlinkGreen+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <_RGB_BlinkGreen+0x60>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003788:	d805      	bhi.n	8003796 <_RGB_BlinkGreen+0x4a>
		_CCR2 += 2;
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <_RGB_BlinkGreen+0x6c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3302      	adds	r3, #2
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <_RGB_BlinkGreen+0x6c>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e004      	b.n	80037a0 <_RGB_BlinkGreen+0x54>
	} else {
		_CCR2 -= 2;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <_RGB_BlinkGreen+0x6c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3b02      	subs	r3, #2
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <_RGB_BlinkGreen+0x6c>)
 800379e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80037a0:	f7ff fe38 	bl	8003414 <_RGB_UpdateRegisters>
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	200006e8 	.word	0x200006e8
 80037ac:	200006dc 	.word	0x200006dc
 80037b0:	200006e0 	.word	0x200006e0
 80037b4:	200006e4 	.word	0x200006e4
 80037b8:	200006d8 	.word	0x200006d8

080037bc <_RGB_BlinkBlue>:

void _RGB_BlinkBlue(void) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkBlue)
 80037c0:	4b15      	ldr	r3, [pc, #84]	; (8003818 <_RGB_BlinkBlue+0x5c>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d002      	beq.n	80037ce <_RGB_BlinkBlue+0x12>
		_state = 0;
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <_RGB_BlinkBlue+0x60>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkBlue;
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <_RGB_BlinkBlue+0x5c>)
 80037d0:	2208      	movs	r2, #8
 80037d2:	701a      	strb	r2, [r3, #0]

	_CCR1 = 0;
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <_RGB_BlinkBlue+0x64>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
	_CCR2 = 0;
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <_RGB_BlinkBlue+0x68>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

	if (_state == 0) {
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <_RGB_BlinkBlue+0x60>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <_RGB_BlinkBlue+0x34>
		_CCR3 = 0;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <_RGB_BlinkBlue+0x6c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e00f      	b.n	8003810 <_RGB_BlinkBlue+0x54>
	} else if (_state < MAX_REG_VAL / 2) {
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <_RGB_BlinkBlue+0x60>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80037f8:	d805      	bhi.n	8003806 <_RGB_BlinkBlue+0x4a>
		_CCR3 += 2;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <_RGB_BlinkBlue+0x6c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3302      	adds	r3, #2
 8003800:	4a09      	ldr	r2, [pc, #36]	; (8003828 <_RGB_BlinkBlue+0x6c>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e004      	b.n	8003810 <_RGB_BlinkBlue+0x54>
	} else {
		_CCR3 -= 2;
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <_RGB_BlinkBlue+0x6c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3b02      	subs	r3, #2
 800380c:	4a06      	ldr	r2, [pc, #24]	; (8003828 <_RGB_BlinkBlue+0x6c>)
 800380e:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 8003810:	f7ff fe00 	bl	8003414 <_RGB_UpdateRegisters>
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200006e8 	.word	0x200006e8
 800381c:	200006dc 	.word	0x200006dc
 8003820:	200006e0 	.word	0x200006e0
 8003824:	200006d8 	.word	0x200006d8
 8003828:	200006e4 	.word	0x200006e4

0800382c <_RGB_BlinkWhite>:

void _RGB_BlinkWhite(void) {
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	if (_mode != RGB_BlinkWhite)
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <_RGB_BlinkWhite+0x84>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d002      	beq.n	800383e <_RGB_BlinkWhite+0x12>
		_state = 0;
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <_RGB_BlinkWhite+0x88>)
 800383a:	2200      	movs	r2, #0
 800383c:	801a      	strh	r2, [r3, #0]
	_mode = RGB_BlinkWhite;
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <_RGB_BlinkWhite+0x84>)
 8003840:	2205      	movs	r2, #5
 8003842:	701a      	strb	r2, [r3, #0]

	if (_state == 0) {
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <_RGB_BlinkWhite+0x88>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <_RGB_BlinkWhite+0x34>
		_CCR1 = 0;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <_RGB_BlinkWhite+0x8c>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
		_CCR2 = 0;
 8003852:	4b1a      	ldr	r3, [pc, #104]	; (80038bc <_RGB_BlinkWhite+0x90>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
		_CCR3 = 0;
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <_RGB_BlinkWhite+0x94>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e023      	b.n	80038a8 <_RGB_BlinkWhite+0x7c>
	} else if (_state < MAX_REG_VAL / 2) {
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <_RGB_BlinkWhite+0x88>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8003868:	d80f      	bhi.n	800388a <_RGB_BlinkWhite+0x5e>
		_CCR1 += 2;
 800386a:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_RGB_BlinkWhite+0x8c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3302      	adds	r3, #2
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <_RGB_BlinkWhite+0x8c>)
 8003872:	6013      	str	r3, [r2, #0]
		_CCR2 += 2;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <_RGB_BlinkWhite+0x90>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3302      	adds	r3, #2
 800387a:	4a10      	ldr	r2, [pc, #64]	; (80038bc <_RGB_BlinkWhite+0x90>)
 800387c:	6013      	str	r3, [r2, #0]
		_CCR3 += 2;
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <_RGB_BlinkWhite+0x94>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3302      	adds	r3, #2
 8003884:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <_RGB_BlinkWhite+0x94>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e00e      	b.n	80038a8 <_RGB_BlinkWhite+0x7c>
	} else {
		_CCR1 -= 2;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <_RGB_BlinkWhite+0x8c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3b02      	subs	r3, #2
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <_RGB_BlinkWhite+0x8c>)
 8003892:	6013      	str	r3, [r2, #0]
		_CCR2 -= 2;
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <_RGB_BlinkWhite+0x90>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3b02      	subs	r3, #2
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <_RGB_BlinkWhite+0x90>)
 800389c:	6013      	str	r3, [r2, #0]
		_CCR3 -= 2;
 800389e:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <_RGB_BlinkWhite+0x94>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3b02      	subs	r3, #2
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <_RGB_BlinkWhite+0x94>)
 80038a6:	6013      	str	r3, [r2, #0]
	}

	_RGB_UpdateRegisters();
 80038a8:	f7ff fdb4 	bl	8003414 <_RGB_UpdateRegisters>
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200006e8 	.word	0x200006e8
 80038b4:	200006dc 	.word	0x200006dc
 80038b8:	200006e0 	.word	0x200006e0
 80038bc:	200006d8 	.word	0x200006d8
 80038c0:	200006e4 	.word	0x200006e4

080038c4 <RGB_SetMode>:

void RGB_SetMode(RGB_Mode mode) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
	switch (mode) {
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d835      	bhi.n	8003940 <RGB_SetMode+0x7c>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <RGB_SetMode+0x18>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003905 	.word	0x08003905
 80038e0:	0800390b 	.word	0x0800390b
 80038e4:	08003911 	.word	0x08003911
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800391d 	.word	0x0800391d
 80038f0:	08003935 	.word	0x08003935
 80038f4:	08003923 	.word	0x08003923
 80038f8:	08003929 	.word	0x08003929
 80038fc:	0800392f 	.word	0x0800392f
 8003900:	0800393b 	.word	0x0800393b
	case RGB_Disabled:
		_RGB_SetBlack();
 8003904:	f7ff fe40 	bl	8003588 <_RGB_SetBlack>
		break;
 8003908:	e01a      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_White:
		_RGB_SetWhite();
 800390a:	f7ff fdcb 	bl	80034a4 <_RGB_SetWhite>
		break;
 800390e:	e017      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_Red:
		_RGB_SetRed();
 8003910:	f7ff fde6 	bl	80034e0 <_RGB_SetRed>
		break;
 8003914:	e014      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_Green:
		_RGB_SetGreen();
 8003916:	f7ff fdff 	bl	8003518 <_RGB_SetGreen>
		break;
 800391a:	e011      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_Blue:
		_RGB_SetBlue();
 800391c:	f7ff fe18 	bl	8003550 <_RGB_SetBlue>
		break;
 8003920:	e00e      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_BlinkRed:
		_RGB_BlinkRed();
 8003922:	f7ff fedb 	bl	80036dc <_RGB_BlinkRed>
		break;
 8003926:	e00b      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_BlinkGreen:
		_RGB_BlinkGreen();
 8003928:	f7ff ff10 	bl	800374c <_RGB_BlinkGreen>
		break;
 800392c:	e008      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_BlinkBlue:
		_RGB_BlinkBlue();
 800392e:	f7ff ff45 	bl	80037bc <_RGB_BlinkBlue>
		break;
 8003932:	e005      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_BlinkWhite:
		_RGB_BlinkWhite();
 8003934:	f7ff ff7a 	bl	800382c <_RGB_BlinkWhite>
		break;
 8003938:	e002      	b.n	8003940 <RGB_SetMode+0x7c>
	case RGB_Rainbow:
		_RGB_Rainbow();
 800393a:	f7ff fe3f 	bl	80035bc <_RGB_Rainbow>
		break;
 800393e:	bf00      	nop
	}
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <_SD_ResetBuffer>:
UINT _writtenB;
UINT _readB;

BYTE _buffer[MAX_FILESIZE];

void _SD_ResetBuffer(void) {
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_FILESIZE; i++) {
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e007      	b.n	8003964 <_SD_ResetBuffer+0x1c>
		_buffer[i] = 0;
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <_SD_ResetBuffer+0x34>)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_FILESIZE; i++) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f242 720f 	movw	r2, #9999	; 0x270f
 800396a:	4293      	cmp	r3, r2
 800396c:	ddf2      	ble.n	8003954 <_SD_ResetBuffer+0xc>
	}
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000934 	.word	0x20000934

08003980 <_SD_GetDiskSpace>:

uint32_t _SD_GetDiskSpace(void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
	FATFS *ptr;
	uint32_t fre_clust = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	603b      	str	r3, [r7, #0]

	if (f_getfree("", &fre_clust, &ptr) != FR_OK) {
 800398a:	1d3a      	adds	r2, r7, #4
 800398c:	463b      	mov	r3, r7
 800398e:	4619      	mov	r1, r3
 8003990:	480e      	ldr	r0, [pc, #56]	; (80039cc <_SD_GetDiskSpace+0x4c>)
 8003992:	f003 f871 	bl	8006a78 <f_getfree>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <_SD_GetDiskSpace+0x20>
		return 0;
 800399c:	2300      	movs	r3, #0
 800399e:	e010      	b.n	80039c2 <_SD_GetDiskSpace+0x42>
	}

	DISK_LEFT = (fre_clust * ptr->csize) / 2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	895b      	ldrh	r3, [r3, #10]
 80039a4:	461a      	mov	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	fb03 f302 	mul.w	r3, r3, r2
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <_SD_GetDiskSpace+0x50>)
 80039b0:	6013      	str	r3, [r2, #0]
	return ((ptr->n_fatent - 2) * ptr->csize) / 2; /* kilobajty */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	3b02      	subs	r3, #2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	8952      	ldrh	r2, [r2, #10]
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	085b      	lsrs	r3, r3, #1
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	0800dce0 	.word	0x0800dce0
 80039d0:	20000920 	.word	0x20000920

080039d4 <SD_Init>:
	while (f_mkfs("", FM_FAT32, (DWORD) 0, NULL, FF_MAX_SS) != FR_OK)
		HAL_Delay(1);
	_SD_GetDiskSpace();
}

void SD_Init(void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	if (f_mount(&_ff, "", 1) == FR_NO_FILESYSTEM) {
 80039d8:	2201      	movs	r2, #1
 80039da:	4905      	ldr	r1, [pc, #20]	; (80039f0 <SD_Init+0x1c>)
 80039dc:	4805      	ldr	r0, [pc, #20]	; (80039f4 <SD_Init+0x20>)
 80039de:	f002 fcb7 	bl	8006350 <f_mount>
		//TODO Fatal
	}

	SD_RefreshDateTime();
 80039e2:	f000 f839 	bl	8003a58 <SD_RefreshDateTime>
	_SD_GetDiskSpace();
 80039e6:	f7ff ffcb 	bl	8003980 <_SD_GetDiskSpace>
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	0800dce0 	.word	0x0800dce0
 80039f4:	200006f0 	.word	0x200006f0

080039f8 <_SD_ClearDateTimeRegisters>:

void _SD_ClearDateTimeRegisters(void) {
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
	_Time.DayLightSaving = 0;
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
	_Time.Hours = 0;
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = 0;
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	705a      	strb	r2, [r3, #1]
	_Time.SecondFraction = 0;
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
	_Time.Seconds = 0;
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	709a      	strb	r2, [r3, #2]
	_Time.StoreOperation = 0;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
	_Time.SubSeconds = 0;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
	_Time.TimeFormat = 0;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <_SD_ClearDateTimeRegisters+0x58>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	70da      	strb	r2, [r3, #3]

	_Date.Date = 0;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <_SD_ClearDateTimeRegisters+0x5c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	709a      	strb	r2, [r3, #2]
	_Date.Month = 0;
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <_SD_ClearDateTimeRegisters+0x5c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	705a      	strb	r2, [r3, #1]
	_Date.WeekDay = 0;
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <_SD_ClearDateTimeRegisters+0x5c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
	_Date.Year = 0;
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <_SD_ClearDateTimeRegisters+0x5c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	70da      	strb	r2, [r3, #3]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20003044 	.word	0x20003044
 8003a54:	20000930 	.word	0x20000930

08003a58 <SD_RefreshDateTime>:

void SD_RefreshDateTime(void) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	_SD_ClearDateTimeRegisters();
 8003a5c:	f7ff ffcc 	bl	80039f8 <_SD_ClearDateTimeRegisters>

	HAL_RTC_GetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003a60:	2201      	movs	r2, #1
 8003a62:	4938      	ldr	r1, [pc, #224]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003a64:	4838      	ldr	r0, [pc, #224]	; (8003b48 <SD_RefreshDateTime+0xf0>)
 8003a66:	f005 f951 	bl	8008d0c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	4937      	ldr	r1, [pc, #220]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003a6e:	4836      	ldr	r0, [pc, #216]	; (8003b48 <SD_RefreshDateTime+0xf0>)
 8003a70:	f005 fa51 	bl	8008f16 <HAL_RTC_GetDate>

	_dTime.time[0] = (_Time.Hours / 16) + 48;
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3330      	adds	r3, #48	; 0x30
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b33      	ldr	r3, [pc, #204]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003a82:	719a      	strb	r2, [r3, #6]
	_dTime.time[1] = (_Time.Hours % 16) + 48;
 8003a84:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	3330      	adds	r3, #48	; 0x30
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003a94:	71da      	strb	r2, [r3, #7]
	_dTime.time[2] = (_Time.Minutes / 16) + 48;
 8003a96:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	3330      	adds	r3, #48	; 0x30
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003aa4:	721a      	strb	r2, [r3, #8]
	_dTime.time[3] = (_Time.Minutes % 16) + 48;
 8003aa6:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3330      	adds	r3, #48	; 0x30
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003ab6:	725a      	strb	r2, [r3, #9]
	_dTime.time[4] = (_Time.Seconds / 16) + 48;
 8003ab8:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003aba:	789b      	ldrb	r3, [r3, #2]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3330      	adds	r3, #48	; 0x30
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003ac6:	729a      	strb	r2, [r3, #10]
	_dTime.time[5] = (_Time.Seconds % 16) + 48;
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <SD_RefreshDateTime+0xec>)
 8003aca:	789b      	ldrb	r3, [r3, #2]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3330      	adds	r3, #48	; 0x30
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b1e      	ldr	r3, [pc, #120]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003ad8:	72da      	strb	r2, [r3, #11]

	_dTime.date[0] = (_Date.Date / 16) + 48;
 8003ada:	4b1c      	ldr	r3, [pc, #112]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003adc:	789b      	ldrb	r3, [r3, #2]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3330      	adds	r3, #48	; 0x30
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003ae8:	701a      	strb	r2, [r3, #0]
	_dTime.date[1] = (_Date.Date % 16) + 48;
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003aec:	789b      	ldrb	r3, [r3, #2]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3330      	adds	r3, #48	; 0x30
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003afa:	705a      	strb	r2, [r3, #1]
	_dTime.date[2] = (_Date.Month / 16) + 48;
 8003afc:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3330      	adds	r3, #48	; 0x30
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003b0a:	709a      	strb	r2, [r3, #2]
	_dTime.date[3] = (_Date.Month % 16) + 48;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003b0e:	785b      	ldrb	r3, [r3, #1]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	3330      	adds	r3, #48	; 0x30
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003b1c:	70da      	strb	r2, [r3, #3]
	_dTime.date[4] = (_Date.Year / 16) + 48;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003b20:	78db      	ldrb	r3, [r3, #3]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	3330      	adds	r3, #48	; 0x30
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003b2c:	711a      	strb	r2, [r3, #4]
	_dTime.date[5] = (_Date.Year % 16) + 48;
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <SD_RefreshDateTime+0xf4>)
 8003b30:	78db      	ldrb	r3, [r3, #3]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	3330      	adds	r3, #48	; 0x30
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <SD_RefreshDateTime+0xf8>)
 8003b3e:	715a      	strb	r2, [r3, #5]
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20003044 	.word	0x20003044
 8003b48:	20003358 	.word	0x20003358
 8003b4c:	20000930 	.word	0x20000930
 8003b50:	20000924 	.word	0x20000924

08003b54 <SD_GetDateTime>:

void SD_GetDateTime(char date[], char time[]) {
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	461c      	mov	r4, r3
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b66:	785b      	ldrb	r3, [r3, #1]
 8003b68:	461d      	mov	r5, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b6c:	789b      	ldrb	r3, [r3, #2]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b6e:	461a      	mov	r2, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b72:	78db      	ldrb	r3, [r3, #3]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b74:	4619      	mov	r1, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b78:	791b      	ldrb	r3, [r3, #4]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b7a:	4618      	mov	r0, r3
			_dTime.date[2], _dTime.date[3], _dTime.date[4], _dTime.date[5]);
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b7e:	795b      	ldrb	r3, [r3, #5]
	sprintf(date, "%c%c.%c%c.%c%c", _dTime.date[0], _dTime.date[1],
 8003b80:	9303      	str	r3, [sp, #12]
 8003b82:	9002      	str	r0, [sp, #8]
 8003b84:	9101      	str	r1, [sp, #4]
 8003b86:	9200      	str	r2, [sp, #0]
 8003b88:	462b      	mov	r3, r5
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	4912      	ldr	r1, [pc, #72]	; (8003bd8 <SD_GetDateTime+0x84>)
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f008 faec 	bl	800c16c <siprintf>
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b96:	799b      	ldrb	r3, [r3, #6]
 8003b98:	461c      	mov	r4, r3
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003b9c:	79db      	ldrb	r3, [r3, #7]
 8003b9e:	461d      	mov	r5, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003ba2:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003ba4:	461a      	mov	r2, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003ba8:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003baa:	4619      	mov	r1, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003bae:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003bb0:	4618      	mov	r0, r3
			_dTime.time[2], _dTime.time[3], _dTime.time[4], _dTime.time[5]);
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <SD_GetDateTime+0x80>)
 8003bb4:	7adb      	ldrb	r3, [r3, #11]
	sprintf(time, "%c%c:%c%c:%c%c", _dTime.time[0], _dTime.time[1],
 8003bb6:	9303      	str	r3, [sp, #12]
 8003bb8:	9002      	str	r0, [sp, #8]
 8003bba:	9101      	str	r1, [sp, #4]
 8003bbc:	9200      	str	r2, [sp, #0]
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4906      	ldr	r1, [pc, #24]	; (8003bdc <SD_GetDateTime+0x88>)
 8003bc4:	6838      	ldr	r0, [r7, #0]
 8003bc6:	f008 fad1 	bl	800c16c <siprintf>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000924 	.word	0x20000924
 8003bd8:	0800dce4 	.word	0x0800dce4
 8003bdc:	0800dcf4 	.word	0x0800dcf4

08003be0 <SD_SetDateTime>:

void SD_SetDateTime(uint8_t date[], uint8_t time[]) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	_SD_ClearDateTimeRegisters();
 8003bea:	f7ff ff05 	bl	80039f8 <_SD_ClearDateTimeRegisters>

	_Date.Date = date[0] * 16 + date[1];
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <SD_SetDateTime+0xb8>)
 8003c02:	709a      	strb	r2, [r3, #2]
	_Date.Month = date[2] * 16 + date[3];
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3302      	adds	r3, #2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3303      	adds	r3, #3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <SD_SetDateTime+0xb8>)
 8003c1a:	705a      	strb	r2, [r3, #1]
	_Date.Year = date[4] * 16 + date[5];
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3305      	adds	r3, #5
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <SD_SetDateTime+0xb8>)
 8003c32:	70da      	strb	r2, [r3, #3]

	_Time.Hours = time[0] * 16 + time[1];
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <SD_SetDateTime+0xbc>)
 8003c48:	701a      	strb	r2, [r3, #0]
	_Time.Minutes = time[2] * 16 + time[3];
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3303      	adds	r3, #3
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <SD_SetDateTime+0xbc>)
 8003c60:	705a      	strb	r2, [r3, #1]
	_Time.Seconds = time[4] * 16 + time[5];
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	3305      	adds	r3, #5
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <SD_SetDateTime+0xbc>)
 8003c78:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &_Time, RTC_FORMAT_BCD);
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4907      	ldr	r1, [pc, #28]	; (8003c9c <SD_SetDateTime+0xbc>)
 8003c7e:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <SD_SetDateTime+0xc0>)
 8003c80:	f004 ff87 	bl	8008b92 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &_Date, RTC_FORMAT_BCD);
 8003c84:	2201      	movs	r2, #1
 8003c86:	4904      	ldr	r1, [pc, #16]	; (8003c98 <SD_SetDateTime+0xb8>)
 8003c88:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <SD_SetDateTime+0xc0>)
 8003c8a:	f005 f89d 	bl	8008dc8 <HAL_RTC_SetDate>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000930 	.word	0x20000930
 8003c9c:	20003044 	.word	0x20003044
 8003ca0:	20003358 	.word	0x20003358

08003ca4 <SD_ReadFile>:

char* SD_ReadFile(char *filename, uint32_t *size) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	if (f_open(&_fileH, filename, FA_READ) != FR_OK) {
 8003cae:	2201      	movs	r2, #1
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4817      	ldr	r0, [pc, #92]	; (8003d10 <SD_ReadFile+0x6c>)
 8003cb4:	f002 fb8c 	bl	80063d0 <f_open>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <SD_ReadFile+0x24>
		*size = 0;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
		return NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e01f      	b.n	8003d08 <SD_ReadFile+0x64>
	}

	_SD_ResetBuffer();
 8003cc8:	f7ff fe3e 	bl	8003948 <_SD_ResetBuffer>
	uint32_t index = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]

	while (!f_eof(&_fileH)) {
 8003cd0:	e00d      	b.n	8003cee <SD_ReadFile+0x4a>
		_res = f_read(&_fileH, &_buffer[index++], 1, &_readB);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <SD_ReadFile+0x70>)
 8003cda:	1899      	adds	r1, r3, r2
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <SD_ReadFile+0x74>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <SD_ReadFile+0x6c>)
 8003ce2:	f002 fcf8 	bl	80066d6 <f_read>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <SD_ReadFile+0x78>)
 8003cec:	701a      	strb	r2, [r3, #0]
	while (!f_eof(&_fileH)) {
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <SD_ReadFile+0x6c>)
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <SD_ReadFile+0x6c>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d1eb      	bne.n	8003cd2 <SD_ReadFile+0x2e>
	}

	f_close(&_fileH);
 8003cfa:	4805      	ldr	r0, [pc, #20]	; (8003d10 <SD_ReadFile+0x6c>)
 8003cfc:	f002 fe9c 	bl	8006a38 <f_close>
	*size = index;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
	return (char*) _buffer;
 8003d06:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <SD_ReadFile+0x70>)
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20003060 	.word	0x20003060
 8003d14:	20000934 	.word	0x20000934
 8003d18:	20003058 	.word	0x20003058
 8003d1c:	2000305c 	.word	0x2000305c

08003d20 <THS_Init>:

bool _ready;
uint8_t _readyData[5];
uint32_t _clockCounter;

void THS_Init() {
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	_clockCounter = 0;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <THS_Init+0x1c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

	_ready = true;
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <THS_Init+0x20>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000328c 	.word	0x2000328c
 8003d40:	20003288 	.word	0x20003288

08003d44 <THS_Delay>:

void THS_Delay(uint16_t micros) {
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <THS_Delay+0x2c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < micros)
 8003d56:	bf00      	nop
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <THS_Delay+0x2c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3f9      	bcc.n	8003d58 <THS_Delay+0x14>
		;
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20003294 	.word	0x20003294

08003d74 <_THS_SetPinOutput>:

void _THS_SetPinOutput(uint16_t pin) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	609a      	str	r2, [r3, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d92:	2301      	movs	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003d9a:	f107 030c 	add.w	r3, r7, #12
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4803      	ldr	r0, [pc, #12]	; (8003db0 <_THS_SetPinOutput+0x3c>)
 8003da2:	f003 ff23 	bl	8007bec <HAL_GPIO_Init>
}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40020800 	.word	0x40020800

08003db4 <_THS_SetPinInput>:

void _THS_SetPinInput(uint16_t pin) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003dbe:	f107 030c 	add.w	r3, r7, #12
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	60da      	str	r2, [r3, #12]
 8003dcc:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(THS_PORT, &GPIO_InitStruct);
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	4619      	mov	r1, r3
 8003de0:	4803      	ldr	r0, [pc, #12]	; (8003df0 <_THS_SetPinInput+0x3c>)
 8003de2:	f003 ff03 	bl	8007bec <HAL_GPIO_Init>
}
 8003de6:	bf00      	nop
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40020800 	.word	0x40020800

08003df4 <_THS_InitConn>:

#define Write(val) HAL_GPIO_WritePin(THS_PORT, pin, val)
#define Read() HAL_GPIO_ReadPin(THS_PORT, pin)
#define WaitOn(arg) while (HAL_GPIO_ReadPin(THS_PORT, pin) == arg)

uint8_t _THS_InitConn(uint16_t pin) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
	if (!_ready)
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <_THS_InitConn+0x9c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <_THS_InitConn+0x1c>
		return 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e03b      	b.n	8003e88 <_THS_InitConn+0x94>
	_THS_SetPinOutput(pin);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ffae 	bl	8003d74 <_THS_SetPinOutput>

	/* Start */
	Write(0);
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	481d      	ldr	r0, [pc, #116]	; (8003e94 <_THS_InitConn+0xa0>)
 8003e20:	f004 f896 	bl	8007f50 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8003e24:	2012      	movs	r0, #18
 8003e26:	f003 fd8b 	bl	8007940 <HAL_Delay>
	Write(1);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4818      	ldr	r0, [pc, #96]	; (8003e94 <_THS_InitConn+0xa0>)
 8003e32:	f004 f88d 	bl	8007f50 <HAL_GPIO_WritePin>
	THS_Delay(START_HI);
 8003e36:	2014      	movs	r0, #20
 8003e38:	f7ff ff84 	bl	8003d44 <THS_Delay>

	/* Synchro */
	_THS_SetPinInput(pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ffb8 	bl	8003db4 <_THS_SetPinInput>
	THS_Delay(RESPONSE);
 8003e44:	2028      	movs	r0, #40	; 0x28
 8003e46:	f7ff ff7d 	bl	8003d44 <THS_Delay>

	if (!Read()) {
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4811      	ldr	r0, [pc, #68]	; (8003e94 <_THS_InitConn+0xa0>)
 8003e50:	f004 f866 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10c      	bne.n	8003e74 <_THS_InitConn+0x80>
		THS_Delay(2 * RESPONSE);
 8003e5a:	2050      	movs	r0, #80	; 0x50
 8003e5c:	f7ff ff72 	bl	8003d44 <THS_Delay>
		if (!Read()) {
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	4619      	mov	r1, r3
 8003e64:	480b      	ldr	r0, [pc, #44]	; (8003e94 <_THS_InitConn+0xa0>)
 8003e66:	f004 f85b 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <_THS_InitConn+0x80>
			/* Brak synchro */
			return 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	e009      	b.n	8003e88 <_THS_InitConn+0x94>
		}
	}
	WaitOn(1);
 8003e74:	bf00      	nop
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4806      	ldr	r0, [pc, #24]	; (8003e94 <_THS_InitConn+0xa0>)
 8003e7c:	f004 f850 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d0f7      	beq.n	8003e76 <_THS_InitConn+0x82>
	/* Gotowy */
	return 1;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20003288 	.word	0x20003288
 8003e94:	40020800 	.word	0x40020800

08003e98 <_THS_ReadByte>:

uint8_t _THS_ReadByte(uint16_t pin) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
	uint8_t byte = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]

	for (uint8_t bit = 0; bit < 8; bit++) {
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73bb      	strb	r3, [r7, #14]
 8003eaa:	e02f      	b.n	8003f0c <_THS_ReadByte+0x74>
		_clockCounter = 0;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <_THS_ReadByte+0x84>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
		WaitOn(0) {
 8003eb2:	e005      	b.n	8003ec0 <_THS_ReadByte+0x28>
			/* Podany pin nie jest podpiety, eternal loop */
			if (_clockCounter > 200)
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <_THS_ReadByte+0x84>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2bc8      	cmp	r3, #200	; 0xc8
 8003eba:	d901      	bls.n	8003ec0 <_THS_ReadByte+0x28>
				return 255;
 8003ebc:	23ff      	movs	r3, #255	; 0xff
 8003ebe:	e029      	b.n	8003f14 <_THS_ReadByte+0x7c>
		WaitOn(0) {
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4816      	ldr	r0, [pc, #88]	; (8003f20 <_THS_ReadByte+0x88>)
 8003ec6:	f004 f82b 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f1      	beq.n	8003eb4 <_THS_ReadByte+0x1c>
		}
		THS_Delay(SIGNAL_WAIT);
 8003ed0:	203c      	movs	r0, #60	; 0x3c
 8003ed2:	f7ff ff37 	bl	8003d44 <THS_Delay>

		byte <<= 1;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
		if (Read()) {
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	480f      	ldr	r0, [pc, #60]	; (8003f20 <_THS_ReadByte+0x88>)
 8003ee2:	f004 f81d 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00c      	beq.n	8003f06 <_THS_ReadByte+0x6e>
			byte |= 1; /* mamy 1 */
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
			WaitOn(1);
 8003ef4:	bf00      	nop
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4809      	ldr	r0, [pc, #36]	; (8003f20 <_THS_ReadByte+0x88>)
 8003efc:	f004 f810 	bl	8007f20 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d0f7      	beq.n	8003ef6 <_THS_ReadByte+0x5e>
	for (uint8_t bit = 0; bit < 8; bit++) {
 8003f06:	7bbb      	ldrb	r3, [r7, #14]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	73bb      	strb	r3, [r7, #14]
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	2b07      	cmp	r3, #7
 8003f10:	d9cc      	bls.n	8003eac <_THS_ReadByte+0x14>
		}
		/* else mamy 0 */
	}

	return byte;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000328c 	.word	0x2000328c
 8003f20:	40020800 	.word	0x40020800

08003f24 <_THS_CCR_Acceptable>:

uint8_t _THS_CCR_Acceptable(uint8_t ccrIn, uint8_t ccrAcc) {
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	71fb      	strb	r3, [r7, #7]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71bb      	strb	r3, [r7, #6]
	if (ccrAcc - ERROR_RANGE <= ccrIn && ccrIn <= ccrAcc + ERROR_RANGE)
 8003f34:	79bb      	ldrb	r3, [r7, #6]
 8003f36:	f1a3 020a 	sub.w	r2, r3, #10
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	dc06      	bgt.n	8003f4e <_THS_CCR_Acceptable+0x2a>
 8003f40:	79fa      	ldrb	r2, [r7, #7]
 8003f42:	79bb      	ldrb	r3, [r7, #6]
 8003f44:	330a      	adds	r3, #10
 8003f46:	429a      	cmp	r2, r3
 8003f48:	dc01      	bgt.n	8003f4e <_THS_CCR_Acceptable+0x2a>
		return 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <_THS_CCR_Acceptable+0x2c>
	return 0;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <THS_ReadData>:

/* Funkcja wymaga jako argumentu tablicy conajmniej 2 elementowej else panic */
uint8_t THS_ReadData(THS_Sensor sensor, float data[]) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
	uint16_t pin = (sensor == THS_In) ? PIN1 : PIN2;
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <THS_ReadData+0x16>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <THS_ReadData+0x18>
 8003f72:	2302      	movs	r3, #2
 8003f74:	83fb      	strh	r3, [r7, #30]

	if (!_THS_InitConn(pin))
 8003f76:	8bfb      	ldrh	r3, [r7, #30]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff3b 	bl	8003df4 <_THS_InitConn>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <THS_ReadData+0x2c>
		return 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e091      	b.n	80040ac <THS_ReadData+0x150>

	uint16_t rh1 = _THS_ReadByte(pin);
 8003f88:	8bfb      	ldrh	r3, [r7, #30]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff84 	bl	8003e98 <_THS_ReadByte>
 8003f90:	4603      	mov	r3, r0
 8003f92:	83bb      	strh	r3, [r7, #28]
	uint8_t rh2 = _THS_ReadByte(pin);
 8003f94:	8bfb      	ldrh	r3, [r7, #30]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff7e 	bl	8003e98 <_THS_ReadByte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	76fb      	strb	r3, [r7, #27]
	uint16_t temp1 = _THS_ReadByte(pin);
 8003fa0:	8bfb      	ldrh	r3, [r7, #30]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ff78 	bl	8003e98 <_THS_ReadByte>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	833b      	strh	r3, [r7, #24]
	uint8_t temp2 = _THS_ReadByte(pin);
 8003fac:	8bfb      	ldrh	r3, [r7, #30]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ff72 	bl	8003e98 <_THS_ReadByte>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]
	uint8_t ccr = _THS_ReadByte(pin);
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff6c 	bl	8003e98 <_THS_ReadByte>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75bb      	strb	r3, [r7, #22]
	/* co namniej sekunda przerwy miedzy updateami */
	_ready = false;
 8003fc4:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <THS_ReadData+0x158>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]

	if (_THS_CCR_Acceptable(ccr, rh1 | rh2 | temp1 | temp2)) {
 8003fca:	8bbb      	ldrh	r3, [r7, #28]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	7efb      	ldrb	r3, [r7, #27]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	b25a      	sxtb	r2, r3
 8003fd6:	8b3b      	ldrh	r3, [r7, #24]
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	b25a      	sxtb	r2, r3
 8003fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	7dbb      	ldrb	r3, [r7, #22]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff99 	bl	8003f24 <_THS_CCR_Acceptable>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d04f      	beq.n	8004098 <THS_ReadData+0x13c>
		/* 0-Temperatura, 1-Wilgotnosc */
		float t = (float) ((temp1 << 8) | temp2) / (float) (1 << 8);
 8003ff8:	8b3b      	ldrh	r3, [r7, #24]
 8003ffa:	021a      	lsls	r2, r3, #8
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004008:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80040b8 <THS_ReadData+0x15c>
 800400c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004010:	edc7 7a04 	vstr	s15, [r7, #16]
		float r = (float) ((rh1 << 8) | rh2) / (float) (1 << 8);
 8004014:	8bbb      	ldrh	r3, [r7, #28]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	7efb      	ldrb	r3, [r7, #27]
 800401a:	4313      	orrs	r3, r2
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004024:	eddf 6a24 	vldr	s13, [pc, #144]	; 80040b8 <THS_ReadData+0x15c>
 8004028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800402c:	edc7 7a03 	vstr	s15, [r7, #12]

		/* Dane spoza zakresu czujnika, musial wystapic blad */
		if ((0.f > t || t > 50.f) || (0.f > r || r > 100.f)) {
 8004030:	edd7 7a04 	vldr	s15, [r7, #16]
 8004034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	d418      	bmi.n	8004070 <THS_ReadData+0x114>
 800403e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004042:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80040bc <THS_ReadData+0x160>
 8004046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	dc0f      	bgt.n	8004070 <THS_ReadData+0x114>
 8004050:	edd7 7a03 	vldr	s15, [r7, #12]
 8004054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	d408      	bmi.n	8004070 <THS_ReadData+0x114>
 800405e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004062:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80040c0 <THS_ReadData+0x164>
 8004066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	dd0a      	ble.n	8004086 <THS_ReadData+0x12a>
			data[0] = 0.f;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
			data[1] = 0.f;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	3304      	adds	r3, #4
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
			return 0;
 8004082:	2300      	movs	r3, #0
 8004084:	e012      	b.n	80040ac <THS_ReadData+0x150>
		}
		data[0] = t;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	601a      	str	r2, [r3, #0]
		data[1] = r;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	3304      	adds	r3, #4
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]
		return 1;
 8004094:	2301      	movs	r3, #1
 8004096:	e009      	b.n	80040ac <THS_ReadData+0x150>
	}
	/* Dane zbyt odbiegają od prawdziwych */
	data[0] = 0.f;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
	data[1] = 0.f;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	3304      	adds	r3, #4
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
	return 0;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20003288 	.word	0x20003288
 80040b8:	43800000 	.word	0x43800000
 80040bc:	42480000 	.word	0x42480000
 80040c0:	42c80000 	.word	0x42c80000

080040c4 <THS_ErrorClock>:

/* Umiescic w obsludze przerwania zegara tak by if dzialal co sekunde*/
void THS_ErrorClock(void) {
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	if (_clockCounter > SECOND) {
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <THS_ErrorClock+0x30>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040d0:	d905      	bls.n	80040de <THS_ErrorClock+0x1a>
		_ready = true;
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <THS_ErrorClock+0x34>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
		_clockCounter = 0;
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <THS_ErrorClock+0x30>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
	}
	++_clockCounter;
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <THS_ErrorClock+0x30>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <THS_ErrorClock+0x30>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000328c 	.word	0x2000328c
 80040f8:	20003288 	.word	0x20003288

080040fc <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <DESELECT>:

static
inline void DESELECT(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0

}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004122:	bf00      	nop
 8004124:	4808      	ldr	r0, [pc, #32]	; (8004148 <xmit_spi+0x30>)
 8004126:	f005 fb51 	bl	80097cc <HAL_SPI_GetState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d1f9      	bne.n	8004124 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8004130:	1df9      	adds	r1, r7, #7
 8004132:	f241 3388 	movw	r3, #5000	; 0x1388
 8004136:	2201      	movs	r2, #1
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <xmit_spi+0x30>)
 800413a:	f005 f871 	bl	8009220 <HAL_SPI_Transmit>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20003378 	.word	0x20003378

0800414c <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8004152:	23ff      	movs	r3, #255	; 0xff
 8004154:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800415a:	bf00      	nop
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <rcvr_spi+0x38>)
 800415e:	f005 fb35 	bl	80097cc <HAL_SPI_GetState>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d1f9      	bne.n	800415c <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8004168:	1dba      	adds	r2, r7, #6
 800416a:	1df9      	adds	r1, r7, #7
 800416c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2301      	movs	r3, #1
 8004174:	4803      	ldr	r0, [pc, #12]	; (8004184 <rcvr_spi+0x38>)
 8004176:	f005 f987 	bl	8009488 <HAL_SPI_TransmitReceive>

	return Data;
 800417a:	79bb      	ldrb	r3, [r7, #6]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20003378 	.word	0x20003378

08004188 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8004190:	f7ff ffdc 	bl	800414c <rcvr_spi>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	701a      	strb	r2, [r3, #0]
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <wait_ready+0x34>)
 80041ac:	2232      	movs	r2, #50	; 0x32
 80041ae:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 80041b0:	f7ff ffcc 	bl	800414c <rcvr_spi>
	do
		res = rcvr_spi();
 80041b4:	f7ff ffca 	bl	800414c <rcvr_spi>
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	2bff      	cmp	r3, #255	; 0xff
 80041c0:	d004      	beq.n	80041cc <wait_ready+0x28>
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <wait_ready+0x34>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f3      	bne.n	80041b4 <wait_ready+0x10>

	return res;
 80041cc:	79fb      	ldrb	r3, [r7, #7]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000255 	.word	0x20000255

080041dc <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 80041e2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80041e6:	60bb      	str	r3, [r7, #8]

	DESELECT();
 80041e8:	f7ff ff8f 	bl	800410a <DESELECT>

	for (i = 0; i < 10; i++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e005      	b.n	80041fe <power_on+0x22>
		xmit_spi(0xFF);
 80041f2:	20ff      	movs	r0, #255	; 0xff
 80041f4:	f7ff ff90 	bl	8004118 <xmit_spi>
	for (i = 0; i < 10; i++)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	3301      	adds	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b09      	cmp	r3, #9
 8004202:	d9f6      	bls.n	80041f2 <power_on+0x16>

	SELECT();
 8004204:	f7ff ff7a 	bl	80040fc <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8004208:	2340      	movs	r3, #64	; 0x40
 800420a:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 800421c:	2395      	movs	r3, #149	; 0x95
 800421e:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e00b      	b.n	800423e <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	f107 0210 	add.w	r2, r7, #16
 800422c:	4413      	add	r3, r2
 800422e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff70 	bl	8004118 <xmit_spi>
	for (i = 0; i < 6; i++)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	3301      	adds	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d9f0      	bls.n	8004226 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8004244:	e002      	b.n	800424c <power_on+0x70>
		Count--;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3b01      	subs	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 800424c:	f7ff ff7e 	bl	800414c <rcvr_spi>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d002      	beq.n	800425c <power_on+0x80>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f4      	bne.n	8004246 <power_on+0x6a>

	DESELECT();
 800425c:	f7ff ff55 	bl	800410a <DESELECT>
	xmit_spi(0XFF);
 8004260:	20ff      	movs	r0, #255	; 0xff
 8004262:	f7ff ff59 	bl	8004118 <xmit_spi>

	PowerFlag = 1;
 8004266:	4b03      	ldr	r3, [pc, #12]	; (8004274 <power_on+0x98>)
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000257 	.word	0x20000257

08004278 <power_off>:

static
void power_off(void) {
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <power_off+0x14>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	20000257 	.word	0x20000257

08004290 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <chk_power+0x14>)
 8004296:	781b      	ldrb	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000257 	.word	0x20000257

080042a8 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <rcvr_datablock+0x68>)
 80042b4:	220a      	movs	r2, #10
 80042b6:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 80042b8:	f7ff ff48 	bl	800414c <rcvr_spi>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2bff      	cmp	r3, #255	; 0xff
 80042c4:	d104      	bne.n	80042d0 <rcvr_datablock+0x28>
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <rcvr_datablock+0x68>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f3      	bne.n	80042b8 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
 80042d2:	2bfe      	cmp	r3, #254	; 0xfe
 80042d4:	d001      	beq.n	80042da <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 80042d6:	2300      	movs	r3, #0
 80042d8:	e016      	b.n	8004308 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff51 	bl	8004188 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff ff4b 	bl	8004188 <rcvr_spi_m>
	} while (btr -= 2);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3b02      	subs	r3, #2
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ed      	bne.n	80042da <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 80042fe:	f7ff ff25 	bl	800414c <rcvr_spi>
	rcvr_spi();
 8004302:	f7ff ff23 	bl	800414c <rcvr_spi>

	return TRUE; /* Return with success */
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000254 	.word	0x20000254

08004314 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8004324:	f7ff ff3e 	bl	80041a4 <wait_ready>
 8004328:	4603      	mov	r3, r0
 800432a:	2bff      	cmp	r3, #255	; 0xff
 800432c:	d001      	beq.n	8004332 <xmit_datablock+0x1e>
		return FALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	e040      	b.n	80043b4 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff feef 	bl	8004118 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	2bfd      	cmp	r3, #253	; 0xfd
 800433e:	d031      	beq.n	80043a4 <xmit_datablock+0x90>
		wc = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fee3 	bl	8004118 <xmit_spi>
			xmit_spi(*buff++);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fedc 	bl	8004118 <xmit_spi>
		} while (--wc);
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	3b01      	subs	r3, #1
 8004364:	73bb      	strb	r3, [r7, #14]
 8004366:	7bbb      	ldrb	r3, [r7, #14]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1eb      	bne.n	8004344 <xmit_datablock+0x30>

		rcvr_spi();
 800436c:	f7ff feee 	bl	800414c <rcvr_spi>
		rcvr_spi();
 8004370:	f7ff feec 	bl	800414c <rcvr_spi>

		while (i <= 64) {
 8004374:	e00b      	b.n	800438e <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8004376:	f7ff fee9 	bl	800414c <rcvr_spi>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2b05      	cmp	r3, #5
 8004386:	d006      	beq.n	8004396 <xmit_datablock+0x82>
				break;
			i++;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3301      	adds	r3, #1
 800438c:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d9f0      	bls.n	8004376 <xmit_datablock+0x62>
 8004394:	e000      	b.n	8004398 <xmit_datablock+0x84>
				break;
 8004396:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8004398:	bf00      	nop
 800439a:	f7ff fed7 	bl	800414c <rcvr_spi>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0fa      	beq.n	800439a <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d101      	bne.n	80043b2 <xmit_datablock+0x9e>
		return TRUE;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xmit_datablock+0xa0>
	else
		return FALSE;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 80043c8:	f7ff feec 	bl	80041a4 <wait_ready>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2bff      	cmp	r3, #255	; 0xff
 80043d0:	d001      	beq.n	80043d6 <send_cmd+0x1a>
		return 0xFF;
 80043d2:	23ff      	movs	r3, #255	; 0xff
 80043d4:	e040      	b.n	8004458 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff fe9d 	bl	8004118 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fe97 	bl	8004118 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff fe91 	bl	8004118 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fe8b 	bl	8004118 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fe86 	bl	8004118 <xmit_spi>
	n = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d101      	bne.n	800441a <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8004416:	2395      	movs	r3, #149	; 0x95
 8004418:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b48      	cmp	r3, #72	; 0x48
 800441e:	d101      	bne.n	8004424 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8004420:	2387      	movs	r3, #135	; 0x87
 8004422:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fe76 	bl	8004118 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	2b4c      	cmp	r3, #76	; 0x4c
 8004430:	d101      	bne.n	8004436 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8004432:	f7ff fe8b 	bl	800414c <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8004436:	230a      	movs	r3, #10
 8004438:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 800443a:	f7ff fe87 	bl	800414c <rcvr_spi>
 800443e:	4603      	mov	r3, r0
 8004440:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8004442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004446:	2b00      	cmp	r3, #0
 8004448:	da05      	bge.n	8004456 <send_cmd+0x9a>
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3b01      	subs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f1      	bne.n	800443a <send_cmd+0x7e>

	return res; /* Return with the response value */
 8004456:	7bbb      	ldrb	r3, [r7, #14]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004470:	2301      	movs	r3, #1
 8004472:	e0d5      	b.n	8004620 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <disk_initialize+0x1c8>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8004482:	4b69      	ldr	r3, [pc, #420]	; (8004628 <disk_initialize+0x1c8>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	e0ca      	b.n	8004620 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 800448a:	f7ff fea7 	bl	80041dc <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 800448e:	f7ff fe35 	bl	80040fc <SELECT>
	ty = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8004496:	2100      	movs	r1, #0
 8004498:	2040      	movs	r0, #64	; 0x40
 800449a:	f7ff ff8f 	bl	80043bc <send_cmd>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 80a5 	bne.w	80045f0 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80044a6:	4b61      	ldr	r3, [pc, #388]	; (800462c <disk_initialize+0x1cc>)
 80044a8:	2264      	movs	r2, #100	; 0x64
 80044aa:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 80044ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044b0:	2048      	movs	r0, #72	; 0x48
 80044b2:	f7ff ff83 	bl	80043bc <send_cmd>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d158      	bne.n	800456e <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e00c      	b.n	80044dc <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 80044c2:	7bfc      	ldrb	r4, [r7, #15]
 80044c4:	f7ff fe42 	bl	800414c <rcvr_spi>
 80044c8:	4603      	mov	r3, r0
 80044ca:	461a      	mov	r2, r3
 80044cc:	f107 0310 	add.w	r3, r7, #16
 80044d0:	4423      	add	r3, r4
 80044d2:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	3301      	adds	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d9ef      	bls.n	80044c2 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 80044e2:	7abb      	ldrb	r3, [r7, #10]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f040 8083 	bne.w	80045f0 <disk_initialize+0x190>
 80044ea:	7afb      	ldrb	r3, [r7, #11]
 80044ec:	2baa      	cmp	r3, #170	; 0xaa
 80044ee:	d17f      	bne.n	80045f0 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 80044f0:	2100      	movs	r1, #0
 80044f2:	2077      	movs	r0, #119	; 0x77
 80044f4:	f7ff ff62 	bl	80043bc <send_cmd>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d807      	bhi.n	800450e <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 80044fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004502:	2069      	movs	r0, #105	; 0x69
 8004504:	f7ff ff5a 	bl	80043bc <send_cmd>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <disk_initialize+0x1cc>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1eb      	bne.n	80044f0 <disk_initialize+0x90>
 8004518:	e000      	b.n	800451c <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800451a:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <disk_initialize+0x1cc>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d064      	beq.n	80045f0 <disk_initialize+0x190>
 8004526:	2100      	movs	r1, #0
 8004528:	207a      	movs	r0, #122	; 0x7a
 800452a:	f7ff ff47 	bl	80043bc <send_cmd>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d15d      	bne.n	80045f0 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e00c      	b.n	8004554 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800453a:	7bfc      	ldrb	r4, [r7, #15]
 800453c:	f7ff fe06 	bl	800414c <rcvr_spi>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	f107 0310 	add.w	r3, r7, #16
 8004548:	4423      	add	r3, r4
 800454a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3301      	adds	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d9ef      	bls.n	800453a <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 800455a:	7a3b      	ldrb	r3, [r7, #8]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <disk_initialize+0x108>
 8004564:	2306      	movs	r3, #6
 8004566:	e000      	b.n	800456a <disk_initialize+0x10a>
 8004568:	2302      	movs	r3, #2
 800456a:	73bb      	strb	r3, [r7, #14]
 800456c:	e040      	b.n	80045f0 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800456e:	2100      	movs	r1, #0
 8004570:	2077      	movs	r0, #119	; 0x77
 8004572:	f7ff ff23 	bl	80043bc <send_cmd>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d808      	bhi.n	800458e <disk_initialize+0x12e>
 800457c:	2100      	movs	r1, #0
 800457e:	2069      	movs	r0, #105	; 0x69
 8004580:	f7ff ff1c 	bl	80043bc <send_cmd>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d801      	bhi.n	800458e <disk_initialize+0x12e>
 800458a:	2302      	movs	r3, #2
 800458c:	e000      	b.n	8004590 <disk_initialize+0x130>
 800458e:	2301      	movs	r3, #1
 8004590:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8004592:	7bbb      	ldrb	r3, [r7, #14]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d10e      	bne.n	80045b6 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8004598:	2100      	movs	r1, #0
 800459a:	2077      	movs	r0, #119	; 0x77
 800459c:	f7ff ff0e 	bl	80043bc <send_cmd>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d80e      	bhi.n	80045c4 <disk_initialize+0x164>
 80045a6:	2100      	movs	r1, #0
 80045a8:	2069      	movs	r0, #105	; 0x69
 80045aa:	f7ff ff07 	bl	80043bc <send_cmd>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <disk_initialize+0x164>
						break; /* ACMD41 */
 80045b4:	e00d      	b.n	80045d2 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 80045b6:	2100      	movs	r1, #0
 80045b8:	2041      	movs	r0, #65	; 0x41
 80045ba:	f7ff feff 	bl	80043bc <send_cmd>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <disk_initialize+0x1cc>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e1      	bne.n	8004592 <disk_initialize+0x132>
 80045ce:	e000      	b.n	80045d2 <disk_initialize+0x172>
						break; /* CMD1 */
 80045d0:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <disk_initialize+0x1cc>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <disk_initialize+0x18c>
 80045dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045e0:	2050      	movs	r0, #80	; 0x50
 80045e2:	f7ff feeb 	bl	80043bc <send_cmd>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <disk_initialize+0x190>
				ty = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80045f0:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <disk_initialize+0x1d0>)
 80045f2:	7bbb      	ldrb	r3, [r7, #14]
 80045f4:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80045f6:	f7ff fd88 	bl	800410a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80045fa:	f7ff fda7 	bl	800414c <rcvr_spi>

	if (ty) /* Initialization succeded */
 80045fe:	7bbb      	ldrb	r3, [r7, #14]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8004604:	4b08      	ldr	r3, [pc, #32]	; (8004628 <disk_initialize+0x1c8>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <disk_initialize+0x1c8>)
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e001      	b.n	800461a <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8004616:	f7ff fe2f 	bl	8004278 <power_off>

	return Stat;
 800461a:	4b03      	ldr	r3, [pc, #12]	; (8004628 <disk_initialize+0x1c8>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bd90      	pop	{r4, r7, pc}
 8004628:	20000058 	.word	0x20000058
 800462c:	20000254 	.word	0x20000254
 8004630:	20000256 	.word	0x20000256

08004634 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8004644:	2301      	movs	r3, #1
 8004646:	e002      	b.n	800464e <disk_status+0x1a>
	return Stat;
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <disk_status+0x28>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000058 	.word	0x20000058

08004660 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <disk_read+0x1c>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <disk_read+0x20>
		return RES_PARERR;
 800467c:	2304      	movs	r3, #4
 800467e:	e051      	b.n	8004724 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <disk_read+0xcc>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <disk_read+0x32>
		return RES_NOTRDY;
 800468e:	2303      	movs	r3, #3
 8004690:	e048      	b.n	8004724 <disk_read+0xc4>

	if (!(CardType & 4))
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <disk_read+0xd0>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	025b      	lsls	r3, r3, #9
 80046a2:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80046a4:	f7ff fd2a 	bl	80040fc <SELECT>

	if (count == 1) { /* Single block read */
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d111      	bne.n	80046d2 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	2051      	movs	r0, #81	; 0x51
 80046b2:	f7ff fe83 	bl	80043bc <send_cmd>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d129      	bne.n	8004710 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 80046bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f7ff fdf1 	bl	80042a8 <rcvr_datablock>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <disk_read+0xb0>
			count = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	e01e      	b.n	8004710 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	2052      	movs	r0, #82	; 0x52
 80046d6:	f7ff fe71 	bl	80043bc <send_cmd>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d117      	bne.n	8004710 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 80046e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e4:	68b8      	ldr	r0, [r7, #8]
 80046e6:	f7ff fddf 	bl	80042a8 <rcvr_datablock>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <disk_read+0xa6>
					break;
				buff += 512;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80046f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ed      	bne.n	80046e0 <disk_read+0x80>
 8004704:	e000      	b.n	8004708 <disk_read+0xa8>
					break;
 8004706:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8004708:	2100      	movs	r1, #0
 800470a:	204c      	movs	r0, #76	; 0x4c
 800470c:	f7ff fe56 	bl	80043bc <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8004710:	f7ff fcfb 	bl	800410a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8004714:	f7ff fd1a 	bl	800414c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000058 	.word	0x20000058
 8004730:	20000256 	.word	0x20000256

08004734 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <disk_write+0x1c>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <disk_write+0x20>
		return RES_PARERR;
 8004750:	2304      	movs	r3, #4
 8004752:	e06b      	b.n	800482c <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8004754:	4b37      	ldr	r3, [pc, #220]	; (8004834 <disk_write+0x100>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <disk_write+0x32>
		return RES_NOTRDY;
 8004762:	2303      	movs	r3, #3
 8004764:	e062      	b.n	800482c <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8004766:	4b33      	ldr	r3, [pc, #204]	; (8004834 <disk_write+0x100>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <disk_write+0x44>
		return RES_WRPRT;
 8004774:	2302      	movs	r3, #2
 8004776:	e059      	b.n	800482c <disk_write+0xf8>

	if (!(CardType & 4))
 8004778:	4b2f      	ldr	r3, [pc, #188]	; (8004838 <disk_write+0x104>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	025b      	lsls	r3, r3, #9
 8004788:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800478a:	f7ff fcb7 	bl	80040fc <SELECT>

	if (count == 1) { /* Single block write */
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d110      	bne.n	80047b6 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	2058      	movs	r0, #88	; 0x58
 8004798:	f7ff fe10 	bl	80043bc <send_cmd>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d13a      	bne.n	8004818 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80047a2:	21fe      	movs	r1, #254	; 0xfe
 80047a4:	68b8      	ldr	r0, [r7, #8]
 80047a6:	f7ff fdb5 	bl	8004314 <xmit_datablock>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d033      	beq.n	8004818 <disk_write+0xe4>
			count = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	e030      	b.n	8004818 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 80047b6:	4b20      	ldr	r3, [pc, #128]	; (8004838 <disk_write+0x104>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 80047c2:	2100      	movs	r1, #0
 80047c4:	2077      	movs	r0, #119	; 0x77
 80047c6:	f7ff fdf9 	bl	80043bc <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	2057      	movs	r0, #87	; 0x57
 80047ce:	f7ff fdf5 	bl	80043bc <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	2059      	movs	r0, #89	; 0x59
 80047d6:	f7ff fdf1 	bl	80043bc <send_cmd>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11b      	bne.n	8004818 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80047e0:	21fc      	movs	r1, #252	; 0xfc
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f7ff fd96 	bl	8004314 <xmit_datablock>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <disk_write+0xd0>
					break;
				buff += 512;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80047f4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ee      	bne.n	80047e0 <disk_write+0xac>
 8004802:	e000      	b.n	8004806 <disk_write+0xd2>
					break;
 8004804:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8004806:	21fd      	movs	r1, #253	; 0xfd
 8004808:	2000      	movs	r0, #0
 800480a:	f7ff fd83 	bl	8004314 <xmit_datablock>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <disk_write+0xe4>
				count = 1;
 8004814:	2301      	movs	r3, #1
 8004816:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8004818:	f7ff fc77 	bl	800410a <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800481c:	f7ff fc96 	bl	800414c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000058 	.word	0x20000058
 8004838:	20000256 	.word	0x20000256

0800483c <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b08b      	sub	sp, #44	; 0x2c
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	603a      	str	r2, [r7, #0]
 8004846:	71fb      	strb	r3, [r7, #7]
 8004848:	460b      	mov	r3, r1
 800484a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <disk_ioctl+0x1e>
		return RES_PARERR;
 8004856:	2304      	movs	r3, #4
 8004858:	e16a      	b.n	8004b30 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8004860:	79bb      	ldrb	r3, [r7, #6]
 8004862:	2b07      	cmp	r3, #7
 8004864:	d127      	bne.n	80048b6 <disk_ioctl+0x7a>
		switch (*ptr) {
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d00e      	beq.n	800488c <disk_ioctl+0x50>
 800486e:	2b02      	cmp	r3, #2
 8004870:	d012      	beq.n	8004898 <disk_ioctl+0x5c>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11b      	bne.n	80048ae <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8004876:	f7ff fd0b 	bl	8004290 <chk_power>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8004880:	f7ff fcfa 	bl	8004278 <power_off>
			res = RES_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800488a:	e14f      	b.n	8004b2c <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 800488c:	f7ff fca6 	bl	80041dc <power_on>
			res = RES_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004896:	e149      	b.n	8004b2c <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8004898:	f7ff fcfa 	bl	8004290 <chk_power>
 800489c:	4602      	mov	r2, r0
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80048ac:	e13e      	b.n	8004b2c <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 80048ae:	2304      	movs	r3, #4
 80048b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048b4:	e13a      	b.n	8004b2c <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 80048b6:	4ba0      	ldr	r3, [pc, #640]	; (8004b38 <disk_ioctl+0x2fc>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e133      	b.n	8004b30 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 80048c8:	f7ff fc18 	bl	80040fc <SELECT>

		switch (ctrl) {
 80048cc:	79bb      	ldrb	r3, [r7, #6]
 80048ce:	2b35      	cmp	r3, #53	; 0x35
 80048d0:	f200 811d 	bhi.w	8004b0e <disk_ioctl+0x2d2>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <disk_ioctl+0xa0>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004a77 	.word	0x08004a77
 80048e0:	080049b5 	.word	0x080049b5
 80048e4:	08004a67 	.word	0x08004a67
 80048e8:	08004b0f 	.word	0x08004b0f
 80048ec:	08004b0f 	.word	0x08004b0f
 80048f0:	08004b0f 	.word	0x08004b0f
 80048f4:	08004b0f 	.word	0x08004b0f
 80048f8:	08004b0f 	.word	0x08004b0f
 80048fc:	08004b0f 	.word	0x08004b0f
 8004900:	08004b0f 	.word	0x08004b0f
 8004904:	08004b0f 	.word	0x08004b0f
 8004908:	08004b0f 	.word	0x08004b0f
 800490c:	08004b0f 	.word	0x08004b0f
 8004910:	08004b0f 	.word	0x08004b0f
 8004914:	08004b0f 	.word	0x08004b0f
 8004918:	08004b0f 	.word	0x08004b0f
 800491c:	08004b0f 	.word	0x08004b0f
 8004920:	08004b0f 	.word	0x08004b0f
 8004924:	08004b0f 	.word	0x08004b0f
 8004928:	08004b0f 	.word	0x08004b0f
 800492c:	08004b0f 	.word	0x08004b0f
 8004930:	08004b0f 	.word	0x08004b0f
 8004934:	08004b0f 	.word	0x08004b0f
 8004938:	08004b0f 	.word	0x08004b0f
 800493c:	08004b0f 	.word	0x08004b0f
 8004940:	08004b0f 	.word	0x08004b0f
 8004944:	08004b0f 	.word	0x08004b0f
 8004948:	08004b0f 	.word	0x08004b0f
 800494c:	08004b0f 	.word	0x08004b0f
 8004950:	08004b0f 	.word	0x08004b0f
 8004954:	08004b0f 	.word	0x08004b0f
 8004958:	08004b0f 	.word	0x08004b0f
 800495c:	08004b0f 	.word	0x08004b0f
 8004960:	08004b0f 	.word	0x08004b0f
 8004964:	08004b0f 	.word	0x08004b0f
 8004968:	08004b0f 	.word	0x08004b0f
 800496c:	08004b0f 	.word	0x08004b0f
 8004970:	08004b0f 	.word	0x08004b0f
 8004974:	08004b0f 	.word	0x08004b0f
 8004978:	08004b0f 	.word	0x08004b0f
 800497c:	08004b0f 	.word	0x08004b0f
 8004980:	08004b0f 	.word	0x08004b0f
 8004984:	08004b0f 	.word	0x08004b0f
 8004988:	08004b0f 	.word	0x08004b0f
 800498c:	08004b0f 	.word	0x08004b0f
 8004990:	08004b0f 	.word	0x08004b0f
 8004994:	08004b0f 	.word	0x08004b0f
 8004998:	08004b0f 	.word	0x08004b0f
 800499c:	08004b0f 	.word	0x08004b0f
 80049a0:	08004b0f 	.word	0x08004b0f
 80049a4:	08004b0f 	.word	0x08004b0f
 80049a8:	08004a89 	.word	0x08004a89
 80049ac:	08004aad 	.word	0x08004aad
 80049b0:	08004ad1 	.word	0x08004ad1
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80049b4:	2100      	movs	r1, #0
 80049b6:	2049      	movs	r0, #73	; 0x49
 80049b8:	f7ff fd00 	bl	80043bc <send_cmd>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80a9 	bne.w	8004b16 <disk_ioctl+0x2da>
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	2110      	movs	r1, #16
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fc6c 	bl	80042a8 <rcvr_datablock>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 809f 	beq.w	8004b16 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80049d8:	7b3b      	ldrb	r3, [r7, #12]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10e      	bne.n	8004a00 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80049e2:	7d7b      	ldrb	r3, [r7, #21]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	7d3b      	ldrb	r3, [r7, #20]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80049f6:	8bfb      	ldrh	r3, [r7, #30]
 80049f8:	029a      	lsls	r2, r3, #10
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e02e      	b.n	8004a5e <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8004a00:	7c7b      	ldrb	r3, [r7, #17]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	7dbb      	ldrb	r3, [r7, #22]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8004a12:	7d7b      	ldrb	r3, [r7, #21]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0306 	and.w	r3, r3, #6
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8004a22:	3302      	adds	r3, #2
 8004a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8004a28:	7d3b      	ldrb	r3, [r7, #20]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4413      	add	r3, r2
 8004a3a:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8004a3c:	7cbb      	ldrb	r3, [r7, #18]
 8004a3e:	029b      	lsls	r3, r3, #10
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004a50:	8bfa      	ldrh	r2, [r7, #30]
 8004a52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a56:	3b09      	subs	r3, #9
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004a64:	e057      	b.n	8004b16 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a74:	e056      	b.n	8004b24 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8004a76:	f7ff fb95 	bl	80041a4 <wait_ready>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2bff      	cmp	r3, #255	; 0xff
 8004a7e:	d14c      	bne.n	8004b1a <disk_ioctl+0x2de>
				res = RES_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004a86:	e048      	b.n	8004b1a <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8004a88:	2100      	movs	r1, #0
 8004a8a:	2049      	movs	r0, #73	; 0x49
 8004a8c:	f7ff fc96 	bl	80043bc <send_cmd>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d143      	bne.n	8004b1e <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8004a96:	2110      	movs	r1, #16
 8004a98:	6a38      	ldr	r0, [r7, #32]
 8004a9a:	f7ff fc05 	bl	80042a8 <rcvr_datablock>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d03c      	beq.n	8004b1e <disk_ioctl+0x2e2>
				res = RES_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004aaa:	e038      	b.n	8004b1e <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8004aac:	2100      	movs	r1, #0
 8004aae:	204a      	movs	r0, #74	; 0x4a
 8004ab0:	f7ff fc84 	bl	80043bc <send_cmd>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d133      	bne.n	8004b22 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8004aba:	2110      	movs	r1, #16
 8004abc:	6a38      	ldr	r0, [r7, #32]
 8004abe:	f7ff fbf3 	bl	80042a8 <rcvr_datablock>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02c      	beq.n	8004b22 <disk_ioctl+0x2e6>
				res = RES_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004ace:	e028      	b.n	8004b22 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	207a      	movs	r0, #122	; 0x7a
 8004ad4:	f7ff fc72 	bl	80043bc <send_cmd>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d117      	bne.n	8004b0e <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ae4:	e00b      	b.n	8004afe <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8004ae6:	6a3c      	ldr	r4, [r7, #32]
 8004ae8:	1c63      	adds	r3, r4, #1
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	f7ff fb2e 	bl	800414c <rcvr_spi>
 8004af0:	4603      	mov	r3, r0
 8004af2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004af4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004af8:	3301      	adds	r3, #1
 8004afa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d9ef      	bls.n	8004ae6 <disk_ioctl+0x2aa>
				res = RES_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8004b0c:	e00a      	b.n	8004b24 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8004b0e:	2304      	movs	r3, #4
 8004b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b14:	e006      	b.n	8004b24 <disk_ioctl+0x2e8>
			break;
 8004b16:	bf00      	nop
 8004b18:	e004      	b.n	8004b24 <disk_ioctl+0x2e8>
			break;
 8004b1a:	bf00      	nop
 8004b1c:	e002      	b.n	8004b24 <disk_ioctl+0x2e8>
			break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <disk_ioctl+0x2e8>
			break;
 8004b22:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8004b24:	f7ff faf1 	bl	800410a <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8004b28:	f7ff fb10 	bl	800414c <rcvr_spi>
	}

	return res;
 8004b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	372c      	adds	r7, #44	; 0x2c
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	20000058 	.word	0x20000058

08004b3c <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <disk_timerproc+0x44>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <disk_timerproc+0x1e>
		Timer1 = --n;
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	71fb      	strb	r3, [r7, #7]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <disk_timerproc+0x44>)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <disk_timerproc+0x48>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <disk_timerproc+0x36>
		Timer2 = --n;
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	71fb      	strb	r3, [r7, #7]
 8004b6c:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <disk_timerproc+0x48>)
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	7013      	strb	r3, [r2, #0]

}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000254 	.word	0x20000254
 8004b84:	20000255 	.word	0x20000255

08004b88 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <sdcard_systick_timerproc+0x2c>)
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <sdcard_systick_timerproc+0x2c>)
 8004b98:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <sdcard_systick_timerproc+0x2c>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	d904      	bls.n	8004bae <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8004ba4:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <sdcard_systick_timerproc+0x2c>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 8004baa:	f7ff ffc7 	bl	8004b3c <disk_timerproc>
	}
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20003290 	.word	0x20003290

08004bb8 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8004bbc:	4b02      	ldr	r3, [pc, #8]	; (8004bc8 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	36c55cc0 	.word	0x36c55cc0

08004bcc <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b21b      	sxth	r3, r3
 8004be8:	4313      	orrs	r3, r2
 8004bea:	b21b      	sxth	r3, r3
 8004bec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004bee:	89fb      	ldrh	r3, [r7, #14]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3303      	adds	r3, #3
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	3202      	adds	r2, #2
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	3201      	adds	r2, #1
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
	return rv;
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	887b      	ldrh	r3, [r7, #2]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	701a      	strb	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	1c53      	adds	r3, r2, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	6179      	str	r1, [r7, #20]
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f1      	bne.n	8004cea <mem_cpy+0x1a>
	}
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	617a      	str	r2, [r7, #20]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f3      	bne.n	8004d22 <mem_set+0x10>
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8004d46:	b480      	push	{r7}
 8004d48:	b089      	sub	sp, #36	; 0x24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	61fa      	str	r2, [r7, #28]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	61ba      	str	r2, [r7, #24]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	1acb      	subs	r3, r1, r3
 8004d72:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <mem_cmp+0x40>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0eb      	beq.n	8004d5e <mem_cmp+0x18>

	return r;
 8004d86:	697b      	ldr	r3, [r7, #20]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3724      	adds	r7, #36	; 0x24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d9e:	e002      	b.n	8004da6 <chk_chr+0x12>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3301      	adds	r3, #1
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <chk_chr+0x26>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d1f2      	bne.n	8004da0 <chk_chr+0xc>
	return *str;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8004dd4:	2281      	movs	r2, #129	; 0x81
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d30f      	bcc.n	8004dfc <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8004ddc:	229f      	movs	r2, #159	; 0x9f
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d801      	bhi.n	8004de8 <dbc_1st+0x1e>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e00a      	b.n	8004dfe <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8004de8:	22e0      	movs	r2, #224	; 0xe0
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d305      	bcc.n	8004dfc <dbc_1st+0x32>
 8004df0:	22fc      	movs	r2, #252	; 0xfc
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d801      	bhi.n	8004dfc <dbc_1st+0x32>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d319      	bcc.n	8004e50 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8004e1c:	227e      	movs	r2, #126	; 0x7e
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d801      	bhi.n	8004e28 <dbc_2nd+0x1e>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e014      	b.n	8004e52 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d305      	bcc.n	8004e3c <dbc_2nd+0x32>
 8004e30:	22fc      	movs	r2, #252	; 0xfc
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d801      	bhi.n	8004e3c <dbc_2nd+0x32>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e00a      	b.n	8004e52 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d305      	bcc.n	8004e50 <dbc_2nd+0x46>
 8004e44:	2200      	movs	r2, #0
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d801      	bhi.n	8004e50 <dbc_2nd+0x46>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	78db      	ldrb	r3, [r3, #3]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02c      	beq.n	8004ecc <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7858      	ldrb	r0, [r3, #1]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	2301      	movs	r3, #1
 8004e82:	f7ff fc57 	bl	8004734 <disk_write>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11d      	bne.n	8004ec8 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	1ad2      	subs	r2, r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d213      	bcs.n	8004ecc <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	789b      	ldrb	r3, [r3, #2]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d10f      	bne.n	8004ecc <sync_window+0x6e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7858      	ldrb	r0, [r3, #1]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f7ff fc37 	bl	8004734 <disk_write>
 8004ec6:	e001      	b.n	8004ecc <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d01b      	beq.n	8004f26 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffb5 	bl	8004e5e <sync_window>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d113      	bne.n	8004f26 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7858      	ldrb	r0, [r3, #1]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f08:	2301      	movs	r3, #1
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	f7ff fba8 	bl	8004660 <disk_read>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff90 	bl	8004e5e <sync_window>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d158      	bne.n	8004ffa <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d148      	bne.n	8004fe2 <sync_fs+0xb2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	791b      	ldrb	r3, [r3, #4]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d144      	bne.n	8004fe2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3330      	adds	r3, #48	; 0x30
 8004f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fed5 	bl	8004d12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3330      	adds	r3, #48	; 0x30
 8004f6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004f70:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fe64 	bl	8004c42 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3330      	adds	r3, #48	; 0x30
 8004f7e:	4921      	ldr	r1, [pc, #132]	; (8005004 <sync_fs+0xd4>)
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fe79 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3330      	adds	r3, #48	; 0x30
 8004f8a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004f8e:	491e      	ldr	r1, [pc, #120]	; (8005008 <sync_fs+0xd8>)
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe71 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3330      	adds	r3, #48	; 0x30
 8004f9a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f7ff fe67 	bl	8004c78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3330      	adds	r3, #48	; 0x30
 8004fae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f7ff fe5d 	bl	8004c78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7858      	ldrb	r0, [r3, #1]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f7ff fbac 	bl	8004734 <disk_write>
			fs->fsi_flag = 0;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fc26 	bl	800483c <disk_ioctl>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <sync_fs+0xca>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	41615252 	.word	0x41615252
 8005008:	61417272 	.word	0x61417272

0800500c <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	3b02      	subs	r3, #2
 800501a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	3b02      	subs	r3, #2
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d301      	bcc.n	800502c <clst2sect+0x20>
 8005028:	2300      	movs	r3, #0
 800502a:	e008      	b.n	800503e <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	895b      	ldrh	r3, [r3, #10]
 8005034:	4619      	mov	r1, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	fb03 f301 	mul.w	r3, r3, r1
 800503c:	4413      	add	r3, r2
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d904      	bls.n	800506a <get_fat+0x20>
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d302      	bcc.n	8005070 <get_fat+0x26>
		val = 1;	/* Internal error */
 800506a:	2301      	movs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e08c      	b.n	800518a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d045      	beq.n	800510a <get_fat+0xc0>
 800507e:	2b03      	cmp	r3, #3
 8005080:	d05d      	beq.n	800513e <get_fat+0xf4>
 8005082:	2b01      	cmp	r3, #1
 8005084:	d177      	bne.n	8005176 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0a5b      	lsrs	r3, r3, #9
 800509c:	4413      	add	r3, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	6938      	ldr	r0, [r7, #16]
 80050a2:	f7ff ff18 	bl	8004ed6 <move_window>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d167      	bne.n	800517c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	60fa      	str	r2, [r7, #12]
 80050b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4413      	add	r3, r2
 80050ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	0a5b      	lsrs	r3, r3, #9
 80050c8:	4413      	add	r3, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	6938      	ldr	r0, [r7, #16]
 80050ce:	f7ff ff02 	bl	8004ed6 <move_window>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d153      	bne.n	8005180 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <get_fat+0xb6>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	e002      	b.n	8005106 <get_fat+0xbc>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005106:	617b      	str	r3, [r7, #20]
			break;
 8005108:	e03f      	b.n	800518a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	4413      	add	r3, r2
 8005114:	4619      	mov	r1, r3
 8005116:	6938      	ldr	r0, [r7, #16]
 8005118:	f7ff fedd 	bl	8004ed6 <move_window>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d130      	bne.n	8005184 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005130:	4413      	add	r3, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fd4a 	bl	8004bcc <ld_word>
 8005138:	4603      	mov	r3, r0
 800513a:	617b      	str	r3, [r7, #20]
			break;
 800513c:	e025      	b.n	800518a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6a1a      	ldr	r2, [r3, #32]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	4413      	add	r3, r2
 8005148:	4619      	mov	r1, r3
 800514a:	6938      	ldr	r0, [r7, #16]
 800514c:	f7ff fec3 	bl	8004ed6 <move_window>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d118      	bne.n	8005188 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005164:	4413      	add	r3, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fd48 	bl	8004bfc <ld_dword>
 800516c:	4603      	mov	r3, r0
 800516e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005172:	617b      	str	r3, [r7, #20]
			break;
 8005174:	e009      	b.n	800518a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005176:	2301      	movs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e006      	b.n	800518a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800517c:	bf00      	nop
 800517e:	e004      	b.n	800518a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005180:	bf00      	nop
 8005182:	e002      	b.n	800518a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005184:	bf00      	nop
 8005186:	e000      	b.n	800518a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005188:	bf00      	nop
		}
	}

	return val;
 800518a:	697b      	ldr	r3, [r7, #20]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80051a0:	2302      	movs	r3, #2
 80051a2:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	f240 80d6 	bls.w	8005358 <put_fat+0x1c4>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	f080 80d0 	bcs.w	8005358 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d073      	beq.n	80052a8 <put_fat+0x114>
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	f000 8091 	beq.w	80052e8 <put_fat+0x154>
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	f040 80c6 	bne.w	8005358 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4413      	add	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	0a5b      	lsrs	r3, r3, #9
 80051e2:	4413      	add	r3, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff fe75 	bl	8004ed6 <move_window>
 80051ec:	4603      	mov	r3, r0
 80051ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051f0:	7ffb      	ldrb	r3, [r7, #31]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 80a9 	bne.w	800534a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	61b9      	str	r1, [r7, #24]
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	4413      	add	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <put_fat+0x9e>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	b25b      	sxtb	r3, r3
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	b25a      	sxtb	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	b25b      	sxtb	r3, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	b25b      	sxtb	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e001      	b.n	8005236 <put_fat+0xa2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1a      	ldr	r2, [r3, #32]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0a5b      	lsrs	r3, r3, #9
 8005248:	4413      	add	r3, r2
 800524a:	4619      	mov	r1, r3
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff fe42 	bl	8004ed6 <move_window>
 8005252:	4603      	mov	r3, r0
 8005254:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d178      	bne.n	800534e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <put_fat+0xea>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e00e      	b.n	800529c <put_fat+0x108>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b25b      	sxtb	r3, r3
 8005284:	f023 030f 	bic.w	r3, r3, #15
 8005288:	b25a      	sxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	b25b      	sxtb	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b25b      	sxtb	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	70da      	strb	r2, [r3, #3]
			break;
 80052a6:	e057      	b.n	8005358 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	4413      	add	r3, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fe0e 	bl	8004ed6 <move_window>
 80052ba:	4603      	mov	r3, r0
 80052bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d146      	bne.n	8005352 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80052d2:	4413      	add	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	b292      	uxth	r2, r2
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fcb1 	bl	8004c42 <st_word>
			fs->wflag = 1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	70da      	strb	r2, [r3, #3]
			break;
 80052e6:	e037      	b.n	8005358 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	09db      	lsrs	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fdee 	bl	8004ed6 <move_window>
 80052fa:	4603      	mov	r3, r0
 80052fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052fe:	7ffb      	ldrb	r3, [r7, #31]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d128      	bne.n	8005356 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005318:	4413      	add	r3, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fc6e 	bl	8004bfc <ld_dword>
 8005320:	4603      	mov	r3, r0
 8005322:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005326:	4323      	orrs	r3, r4
 8005328:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005338:	4413      	add	r3, r2
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fc9b 	bl	8004c78 <st_dword>
			fs->wflag = 1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	70da      	strb	r2, [r3, #3]
			break;
 8005348:	e006      	b.n	8005358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800534a:	bf00      	nop
 800534c:	e004      	b.n	8005358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800534e:	bf00      	nop
 8005350:	e002      	b.n	8005358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005356:	bf00      	nop
		}
	}
	return res;
 8005358:	7ffb      	ldrb	r3, [r7, #31]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d904      	bls.n	8005388 <remove_chain+0x26>
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	d301      	bcc.n	800538c <remove_chain+0x2a>
 8005388:	2302      	movs	r3, #2
 800538a:	e04b      	b.n	8005424 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f7ff fefb 	bl	8005194 <put_fat>
 800539e:	4603      	mov	r3, r0
 80053a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80053a2:	7ffb      	ldrb	r3, [r7, #31]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <remove_chain+0x4a>
 80053a8:	7ffb      	ldrb	r3, [r7, #31]
 80053aa:	e03b      	b.n	8005424 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fe4b 	bl	800504a <get_fat>
 80053b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d031      	beq.n	8005420 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <remove_chain+0x64>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e02e      	b.n	8005424 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d101      	bne.n	80053d2 <remove_chain+0x70>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e028      	b.n	8005424 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053d2:	2200      	movs	r2, #0
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	69b8      	ldr	r0, [r7, #24]
 80053d8:	f7ff fedc 	bl	8005194 <put_fat>
 80053dc:	4603      	mov	r3, r0
 80053de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80053e0:	7ffb      	ldrb	r3, [r7, #31]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <remove_chain+0x88>
 80053e6:	7ffb      	ldrb	r3, [r7, #31]
 80053e8:	e01c      	b.n	8005424 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	691a      	ldr	r2, [r3, #16]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	3b02      	subs	r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d20b      	bcs.n	8005410 <remove_chain+0xae>
			fs->free_clst++;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	791b      	ldrb	r3, [r3, #4]
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d3c6      	bcc.n	80053ac <remove_chain+0x4a>
 800541e:	e000      	b.n	8005422 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005420:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <create_chain+0x2c>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d31b      	bcc.n	8005490 <create_chain+0x64>
 8005458:	2301      	movs	r3, #1
 800545a:	61bb      	str	r3, [r7, #24]
 800545c:	e018      	b.n	8005490 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fdf2 	bl	800504a <get_fat>
 8005466:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d801      	bhi.n	8005472 <create_chain+0x46>
 800546e:	2301      	movs	r3, #1
 8005470:	e0a9      	b.n	80055c6 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d101      	bne.n	800547e <create_chain+0x52>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	e0a3      	b.n	80055c6 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	429a      	cmp	r2, r3
 8005486:	d201      	bcs.n	800548c <create_chain+0x60>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	e09c      	b.n	80055c6 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <create_chain+0x70>
 8005498:	2300      	movs	r3, #0
 800549a:	e094      	b.n	80055c6 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d129      	bne.n	80054fc <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d301      	bcc.n	80054bc <create_chain+0x90>
 80054b8:	2302      	movs	r3, #2
 80054ba:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80054bc:	69f9      	ldr	r1, [r7, #28]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff fdc3 	bl	800504a <get_fat>
 80054c4:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d003      	beq.n	80054d4 <create_chain+0xa8>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d101      	bne.n	80054d8 <create_chain+0xac>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	e076      	b.n	80055c6 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00e      	beq.n	80054fc <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d906      	bls.n	80054f8 <create_chain+0xcc>
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d201      	bcs.n	80054f8 <create_chain+0xcc>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d129      	bne.n	8005556 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	429a      	cmp	r2, r3
 8005514:	d307      	bcc.n	8005526 <create_chain+0xfa>
					ncl = 2;
 8005516:	2302      	movs	r3, #2
 8005518:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	429a      	cmp	r2, r3
 8005520:	d901      	bls.n	8005526 <create_chain+0xfa>
 8005522:	2300      	movs	r3, #0
 8005524:	e04f      	b.n	80055c6 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fd8e 	bl	800504a <get_fat>
 800552e:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d003      	beq.n	8005544 <create_chain+0x118>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d101      	bne.n	8005548 <create_chain+0x11c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e03e      	b.n	80055c6 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	d1da      	bne.n	8005506 <create_chain+0xda>
 8005550:	2300      	movs	r3, #0
 8005552:	e038      	b.n	80055c6 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8005554:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005556:	f04f 32ff 	mov.w	r2, #4294967295
 800555a:	69f9      	ldr	r1, [r7, #28]
 800555c:	6938      	ldr	r0, [r7, #16]
 800555e:	f7ff fe19 	bl	8005194 <put_fat>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <create_chain+0x154>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6938      	ldr	r0, [r7, #16]
 8005578:	f7ff fe0c 	bl	8005194 <put_fat>
 800557c:	4603      	mov	r3, r0
 800557e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <create_chain+0x188>
		fs->last_clst = ncl;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	3b02      	subs	r3, #2
 8005596:	429a      	cmp	r2, r3
 8005598:	d804      	bhi.n	80055a4 <create_chain+0x178>
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	791b      	ldrb	r3, [r3, #4]
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	711a      	strb	r2, [r3, #4]
 80055b2:	e007      	b.n	80055c4 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <create_chain+0x194>
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e000      	b.n	80055c2 <create_chain+0x196>
 80055c0:	2301      	movs	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80055c4:	69fb      	ldr	r3, [r7, #28]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fc40 	bl	8004e5e <sync_window>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <dir_clear+0x1a>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e036      	b.n	8005656 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fd0e 	bl	800500c <clst2sect>
 80055f0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3330      	adds	r3, #48	; 0x30
 80055fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fb85 	bl	8004d12 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3330      	adds	r3, #48	; 0x30
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	2301      	movs	r3, #1
 8005610:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e003      	b.n	8005620 <dir_clear+0x52>
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4413      	add	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	895b      	ldrh	r3, [r3, #10]
 8005624:	461a      	mov	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4293      	cmp	r3, r2
 800562a:	d20b      	bcs.n	8005644 <dir_clear+0x76>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	7858      	ldrb	r0, [r3, #1]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	441a      	add	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	f7ff f87b 	bl	8004734 <disk_write>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0e9      	beq.n	8005618 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	895b      	ldrh	r3, [r3, #10]
 8005648:	461a      	mov	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4293      	cmp	r3, r2
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005674:	d204      	bcs.n	8005680 <dir_sdi+0x22>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005680:	2302      	movs	r3, #2
 8005682:	e063      	b.n	800574c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <dir_sdi+0x46>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d902      	bls.n	80056a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10c      	bne.n	80056c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	8912      	ldrh	r2, [r2, #8]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d301      	bcc.n	80056ba <dir_sdi+0x5c>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e048      	b.n	800574c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e029      	b.n	8005718 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	895b      	ldrh	r3, [r3, #10]
 80056c8:	025b      	lsls	r3, r3, #9
 80056ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80056cc:	e019      	b.n	8005702 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fcb9 	bl	800504a <get_fat>
 80056d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d101      	bne.n	80056e6 <dir_sdi+0x88>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e032      	b.n	800574c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d904      	bls.n	80056f6 <dir_sdi+0x98>
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d301      	bcc.n	80056fa <dir_sdi+0x9c>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e028      	b.n	800574c <dir_sdi+0xee>
			ofs -= csz;
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d2e1      	bcs.n	80056ce <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800570a:	6979      	ldr	r1, [r7, #20]
 800570c:	6938      	ldr	r0, [r7, #16]
 800570e:	f7ff fc7d 	bl	800500c <clst2sect>
 8005712:	4602      	mov	r2, r0
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <dir_sdi+0xcc>
 8005726:	2302      	movs	r3, #2
 8005728:	e010      	b.n	800574c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	441a      	add	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	3320      	adds	r3, #32
 800576a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005772:	d302      	bcc.n	800577a <dir_next+0x26>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <dir_next+0x32>
 8005782:	2304      	movs	r3, #4
 8005784:	e078      	b.n	8005878 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578c:	2b00      	cmp	r3, #0
 800578e:	d166      	bne.n	800585e <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	8912      	ldrh	r2, [r2, #8]
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d357      	bcc.n	800585e <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	619a      	str	r2, [r3, #24]
 80057b4:	2304      	movs	r3, #4
 80057b6:	e05f      	b.n	8005878 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0a5b      	lsrs	r3, r3, #9
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	8952      	ldrh	r2, [r2, #10]
 80057c0:	3a01      	subs	r2, #1
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d14a      	bne.n	800585e <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7ff fc3a 	bl	800504a <get_fat>
 80057d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d801      	bhi.n	80057e2 <dir_next+0x8e>
 80057de:	2302      	movs	r3, #2
 80057e0:	e04a      	b.n	8005878 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d101      	bne.n	80057ee <dir_next+0x9a>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e044      	b.n	8005878 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d328      	bcc.n	800584a <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	619a      	str	r2, [r3, #24]
 8005804:	2304      	movs	r3, #4
 8005806:	e037      	b.n	8005878 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fe0b 	bl	800542c <create_chain>
 8005816:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <dir_next+0xce>
 800581e:	2307      	movs	r3, #7
 8005820:	e02a      	b.n	8005878 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <dir_next+0xd8>
 8005828:	2302      	movs	r3, #2
 800582a:	e025      	b.n	8005878 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d101      	bne.n	8005838 <dir_next+0xe4>
 8005834:	2301      	movs	r3, #1
 8005836:	e01f      	b.n	8005878 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	6938      	ldr	r0, [r7, #16]
 800583c:	f7ff fec7 	bl	80055ce <dir_clear>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <dir_next+0xf6>
 8005846:	2301      	movs	r3, #1
 8005848:	e016      	b.n	8005878 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	6938      	ldr	r0, [r7, #16]
 8005854:	f7ff fbda 	bl	800500c <clst2sect>
 8005858:	4602      	mov	r2, r0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005890:	2100      	movs	r1, #0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff fee3 	bl	800565e <dir_sdi>
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d12b      	bne.n	80058fa <dir_alloc+0x7a>
		n = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	4619      	mov	r1, r3
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fb12 	bl	8004ed6 <move_window>
 80058b2:	4603      	mov	r3, r0
 80058b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11d      	bne.n	80058f8 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2be5      	cmp	r3, #229	; 0xe5
 80058c4:	d004      	beq.n	80058d0 <dir_alloc+0x50>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d107      	bne.n	80058e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3301      	adds	r3, #1
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d102      	bne.n	80058e4 <dir_alloc+0x64>
 80058de:	e00c      	b.n	80058fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058e4:	2101      	movs	r1, #1
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ff34 	bl	8005754 <dir_next>
 80058ec:	4603      	mov	r3, r0
 80058ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0d7      	beq.n	80058a6 <dir_alloc+0x26>
 80058f6:	e000      	b.n	80058fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d101      	bne.n	8005904 <dir_alloc+0x84>
 8005900:	2307      	movs	r3, #7
 8005902:	75fb      	strb	r3, [r7, #23]
	return res;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	331a      	adds	r3, #26
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff f955 	bl	8004bcc <ld_word>
 8005922:	4603      	mov	r3, r0
 8005924:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b03      	cmp	r3, #3
 800592c:	d109      	bne.n	8005942 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff f94a 	bl	8004bcc <ld_word>
 8005938:	4603      	mov	r3, r0
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	331a      	adds	r3, #26
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	b292      	uxth	r2, r2
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f96d 	bl	8004c42 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d109      	bne.n	8005984 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f103 0214 	add.w	r2, r3, #20
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0c1b      	lsrs	r3, r3, #16
 800597a:	b29b      	uxth	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7ff f95f 	bl	8004c42 <st_word>
	}
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800599a:	2100      	movs	r1, #0
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fe5e 	bl	800565e <dir_sdi>
 80059a2:	4603      	mov	r3, r0
 80059a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <dir_find+0x24>
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
 80059ae:	e03e      	b.n	8005a2e <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6938      	ldr	r0, [r7, #16]
 80059b8:	f7ff fa8d 	bl	8004ed6 <move_window>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d12f      	bne.n	8005a26 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <dir_find+0x4e>
 80059d4:	2304      	movs	r3, #4
 80059d6:	75fb      	strb	r3, [r7, #23]
 80059d8:	e028      	b.n	8005a2c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	330b      	adds	r3, #11
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	69db      	ldr	r3, [r3, #28]
 80059f0:	330b      	adds	r3, #11
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <dir_find+0x86>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69d8      	ldr	r0, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3320      	adds	r3, #32
 8005a04:	220b      	movs	r2, #11
 8005a06:	4619      	mov	r1, r3
 8005a08:	f7ff f99d 	bl	8004d46 <mem_cmp>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005a12:	2100      	movs	r1, #0
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fe9d 	bl	8005754 <dir_next>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0c5      	beq.n	80059b0 <dir_find+0x24>
 8005a24:	e002      	b.n	8005a2c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005a2a:	bf00      	nop

	return res;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005a44:	2101      	movs	r1, #1
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ff1a 	bl	8005880 <dir_alloc>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11c      	bne.n	8005a90 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	f7ff fa3a 	bl	8004ed6 <move_window>
 8005a62:	4603      	mov	r3, r0
 8005a64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d111      	bne.n	8005a90 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	2220      	movs	r2, #32
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff f94c 	bl	8004d12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69d8      	ldr	r0, [r3, #28]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3320      	adds	r3, #32
 8005a82:	220b      	movs	r2, #11
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7ff f923 	bl	8004cd0 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3320      	adds	r3, #32
 8005ab0:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8005ab2:	220b      	movs	r2, #11
 8005ab4:	2120      	movs	r1, #32
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7ff f92b 	bl	8004d12 <mem_set>
	si = i = 0; ni = 8;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	61fa      	str	r2, [r7, #28]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d97c      	bls.n	8005bda <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ae6:	d007      	beq.n	8005af8 <create_name+0x5c>
 8005ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aec:	2b5c      	cmp	r3, #92	; 0x5c
 8005aee:	d110      	bne.n	8005b12 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005af0:	e002      	b.n	8005af8 <create_name+0x5c>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b2f      	cmp	r3, #47	; 0x2f
 8005b02:	d0f6      	beq.n	8005af2 <create_name+0x56>
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b0e:	d0f0      	beq.n	8005af2 <create_name+0x56>
			break;
 8005b10:	e064      	b.n	8005bdc <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8005b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b16:	2b2e      	cmp	r3, #46	; 0x2e
 8005b18:	d003      	beq.n	8005b22 <create_name+0x86>
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d30d      	bcc.n	8005b3e <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	2b0b      	cmp	r3, #11
 8005b26:	d003      	beq.n	8005b30 <create_name+0x94>
 8005b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b2e:	d001      	beq.n	8005b34 <create_name+0x98>
 8005b30:	2306      	movs	r3, #6
 8005b32:	e06f      	b.n	8005c14 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 8005b34:	2308      	movs	r3, #8
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	230b      	movs	r3, #11
 8005b3a:	623b      	str	r3, [r7, #32]
			continue;
 8005b3c:	e04c      	b.n	8005bd8 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8005b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff f941 	bl	8004dca <dbc_1st>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d024      	beq.n	8005b98 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	61fa      	str	r2, [r7, #28]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff f953 	bl	8004e0a <dbc_2nd>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <create_name+0xd8>
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d301      	bcc.n	8005b78 <create_name+0xdc>
 8005b74:	2306      	movs	r3, #6
 8005b76:	e04d      	b.n	8005c14 <create_name+0x178>
			sfn[i++] = c;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	61ba      	str	r2, [r7, #24]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b86:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	61ba      	str	r2, [r7, #24]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	7bfa      	ldrb	r2, [r7, #15]
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e797      	b.n	8005ac8 <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	481f      	ldr	r0, [pc, #124]	; (8005c1c <create_name+0x180>)
 8005ba0:	f7ff f8f8 	bl	8004d94 <chk_chr>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <create_name+0x112>
 8005baa:	2306      	movs	r3, #6
 8005bac:	e032      	b.n	8005c14 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bb2:	2b60      	cmp	r3, #96	; 0x60
 8005bb4:	d908      	bls.n	8005bc8 <create_name+0x12c>
 8005bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bba:	2b7a      	cmp	r3, #122	; 0x7a
 8005bbc:	d804      	bhi.n	8005bc8 <create_name+0x12c>
 8005bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bc2:	3b20      	subs	r3, #32
 8005bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	61ba      	str	r2, [r7, #24]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005bd6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8005bd8:	e776      	b.n	8005ac8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005bda:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	441a      	add	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <create_name+0x154>
 8005bec:	2306      	movs	r3, #6
 8005bee:	e011      	b.n	8005c14 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2be5      	cmp	r3, #229	; 0xe5
 8005bf6:	d102      	bne.n	8005bfe <create_name+0x162>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2205      	movs	r2, #5
 8005bfc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d801      	bhi.n	8005c0a <create_name+0x16e>
 8005c06:	2204      	movs	r2, #4
 8005c08:	e000      	b.n	8005c0c <create_name+0x170>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	330b      	adds	r3, #11
 8005c10:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005c12:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	; 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	0800dd04 	.word	0x0800dd04

08005c20 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005c30:	e002      	b.n	8005c38 <follow_path+0x18>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c3e:	d0f8      	beq.n	8005c32 <follow_path+0x12>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b5c      	cmp	r3, #92	; 0x5c
 8005c46:	d0f4      	beq.n	8005c32 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b1f      	cmp	r3, #31
 8005c54:	d80a      	bhi.n	8005c6c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fcfc 	bl	800565e <dir_sdi>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]
 8005c6a:	e043      	b.n	8005cf4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff13 	bl	8005a9c <create_name>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d134      	bne.n	8005cea <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fe83 	bl	800598c <dir_find>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005c90:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d127      	bne.n	8005cee <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d122      	bne.n	8005cee <follow_path+0xce>
 8005ca8:	2305      	movs	r3, #5
 8005caa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005cac:	e01f      	b.n	8005cee <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11c      	bne.n	8005cf2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	799b      	ldrb	r3, [r3, #6]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8005cc4:	2305      	movs	r3, #5
 8005cc6:	75fb      	strb	r3, [r7, #23]
 8005cc8:	e014      	b.n	8005cf4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	4413      	add	r3, r2
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6938      	ldr	r0, [r7, #16]
 8005cde:	f7ff fe16 	bl	800590e <ld_clust>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ce8:	e7c0      	b.n	8005c6c <follow_path+0x4c>
			if (res != FR_OK) break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <follow_path+0xd4>
				break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005cf2:	bf00      	nop
			}
		}
	}

	return res;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b089      	sub	sp, #36	; 0x24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <get_ldnumber+0x22>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	e02d      	b.n	8005d7c <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	61fa      	str	r2, [r7, #28]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d902      	bls.n	8005d36 <get_ldnumber+0x38>
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	d1f4      	bne.n	8005d20 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b3a      	cmp	r3, #58	; 0x3a
 8005d3a:	d11c      	bne.n	8005d76 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b2f      	cmp	r3, #47	; 0x2f
 8005d46:	d90c      	bls.n	8005d62 <get_ldnumber+0x64>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b39      	cmp	r3, #57	; 0x39
 8005d4e:	d808      	bhi.n	8005d62 <get_ldnumber+0x64>
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	3302      	adds	r3, #2
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d103      	bne.n	8005d62 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	3b30      	subs	r3, #48	; 0x30
 8005d60:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dc04      	bgt.n	8005d72 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	e002      	b.n	8005d7c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8005d7a:	697b      	ldr	r3, [r7, #20]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3724      	adds	r7, #36	; 0x24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	70da      	strb	r2, [r3, #3]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff f897 	bl	8004ed6 <move_window>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <check_fs+0x2a>
 8005dae:	2304      	movs	r3, #4
 8005db0:	e038      	b.n	8005e24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3330      	adds	r3, #48	; 0x30
 8005db6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe ff06 	bl	8004bcc <ld_word>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <check_fs+0x48>
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e029      	b.n	8005e24 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dd6:	2be9      	cmp	r3, #233	; 0xe9
 8005dd8:	d009      	beq.n	8005dee <check_fs+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005de0:	2beb      	cmp	r3, #235	; 0xeb
 8005de2:	d004      	beq.n	8005dee <check_fs+0x66>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dea:	2be8      	cmp	r3, #232	; 0xe8
 8005dec:	d119      	bne.n	8005e22 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3330      	adds	r3, #48	; 0x30
 8005df2:	3336      	adds	r3, #54	; 0x36
 8005df4:	2203      	movs	r2, #3
 8005df6:	490d      	ldr	r1, [pc, #52]	; (8005e2c <check_fs+0xa4>)
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe ffa4 	bl	8004d46 <mem_cmp>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <check_fs+0x80>
 8005e04:	2300      	movs	r3, #0
 8005e06:	e00d      	b.n	8005e24 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	3352      	adds	r3, #82	; 0x52
 8005e0e:	2205      	movs	r2, #5
 8005e10:	4907      	ldr	r1, [pc, #28]	; (8005e30 <check_fs+0xa8>)
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe ff97 	bl	8004d46 <mem_cmp>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <check_fs+0x9a>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 8005e22:	2302      	movs	r3, #2
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	0800dd14 	.word	0x0800dd14
 8005e30:	0800dd18 	.word	0x0800dd18

08005e34 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b096      	sub	sp, #88	; 0x58
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff ff58 	bl	8005cfe <get_ldnumber>
 8005e4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da01      	bge.n	8005e5a <find_volume+0x26>
 8005e56:	230b      	movs	r3, #11
 8005e58:	e238      	b.n	80062cc <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005e5a:	4aa8      	ldr	r2, [pc, #672]	; (80060fc <find_volume+0x2c8>)
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <find_volume+0x3a>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	e22e      	b.n	80062cc <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	f023 0301 	bic.w	r3, r3, #1
 8005e7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01a      	beq.n	8005eba <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fe fbd3 	bl	8004634 <disk_status>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10c      	bne.n	8005eba <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <find_volume+0x82>
 8005ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	e20a      	b.n	80062cc <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e208      	b.n	80062cc <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe fac7 	bl	8004460 <disk_initialize>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e1f1      	b.n	80062cc <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d007      	beq.n	8005efe <find_volume+0xca>
 8005eee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005efa:	230a      	movs	r3, #10
 8005efc:	e1e6      	b.n	80062cc <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f06:	f7ff ff3f 	bl	8005d88 <check_fs>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d14b      	bne.n	8005fb0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f18:	2300      	movs	r3, #0
 8005f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1c:	e01f      	b.n	8005f5e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f2c:	4413      	add	r3, r2
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	3304      	adds	r3, #4
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <find_volume+0x114>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fe5c 	bl	8004bfc <ld_dword>
 8005f44:	4602      	mov	r2, r0
 8005f46:	e000      	b.n	8005f4a <find_volume+0x116>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005f52:	440b      	add	r3, r1
 8005f54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d9dc      	bls.n	8005f1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f64:	2300      	movs	r3, #0
 8005f66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8005f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <find_volume+0x140>
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f70:	3b01      	subs	r3, #1
 8005f72:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <find_volume+0x162>
 8005f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f8e:	f7ff fefb 	bl	8005d88 <check_fs>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e000      	b.n	8005f98 <find_volume+0x164>
 8005f96:	2303      	movs	r3, #3
 8005f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d905      	bls.n	8005fb0 <find_volume+0x17c>
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8005faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d9e1      	bls.n	8005f74 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d101      	bne.n	8005fbc <find_volume+0x188>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e187      	b.n	80062cc <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d901      	bls.n	8005fc8 <find_volume+0x194>
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	e181      	b.n	80062cc <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	330b      	adds	r3, #11
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fdfc 	bl	8004bcc <ld_word>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fda:	d001      	beq.n	8005fe0 <find_volume+0x1ac>
 8005fdc:	230d      	movs	r3, #13
 8005fde:	e175      	b.n	80062cc <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	3330      	adds	r3, #48	; 0x30
 8005fe4:	3316      	adds	r3, #22
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fdf0 	bl	8004bcc <ld_word>
 8005fec:	4603      	mov	r3, r0
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <find_volume+0x1d0>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	3330      	adds	r3, #48	; 0x30
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fdfd 	bl	8004bfc <ld_dword>
 8006002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006008:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	789b      	ldrb	r3, [r3, #2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d005      	beq.n	8006028 <find_volume+0x1f4>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	789b      	ldrb	r3, [r3, #2]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d001      	beq.n	8006028 <find_volume+0x1f4>
 8006024:	230d      	movs	r3, #13
 8006026:	e151      	b.n	80062cc <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	461a      	mov	r2, r3
 800602e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b29a      	uxth	r2, r3
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	895b      	ldrh	r3, [r3, #10]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <find_volume+0x228>
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	461a      	mov	r2, r3
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	895b      	ldrh	r3, [r3, #10]
 8006054:	3b01      	subs	r3, #1
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <find_volume+0x22c>
 800605c:	230d      	movs	r3, #13
 800605e:	e135      	b.n	80062cc <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	3311      	adds	r3, #17
 8006066:	4618      	mov	r0, r3
 8006068:	f7fe fdb0 	bl	8004bcc <ld_word>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	891b      	ldrh	r3, [r3, #8]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <find_volume+0x252>
 8006082:	230d      	movs	r3, #13
 8006084:	e122      	b.n	80062cc <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	3313      	adds	r3, #19
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fd9d 	bl	8004bcc <ld_word>
 8006092:	4603      	mov	r3, r0
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <find_volume+0x276>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	3330      	adds	r3, #48	; 0x30
 80060a0:	3320      	adds	r3, #32
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fdaa 	bl	8004bfc <ld_dword>
 80060a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	3330      	adds	r3, #48	; 0x30
 80060ae:	330e      	adds	r3, #14
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fd8b 	bl	8004bcc <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <find_volume+0x290>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e103      	b.n	80062cc <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	4413      	add	r3, r2
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	8912      	ldrh	r2, [r2, #8]
 80060ce:	0912      	lsrs	r2, r2, #4
 80060d0:	b292      	uxth	r2, r2
 80060d2:	4413      	add	r3, r2
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	429a      	cmp	r2, r3
 80060dc:	d201      	bcs.n	80060e2 <find_volume+0x2ae>
 80060de:	230d      	movs	r3, #13
 80060e0:	e0f4      	b.n	80062cc <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ea:	8952      	ldrh	r2, [r2, #10]
 80060ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <find_volume+0x2cc>
 80060f8:	230d      	movs	r3, #13
 80060fa:	e0e7      	b.n	80062cc <find_volume+0x498>
 80060fc:	20000258 	.word	0x20000258
		fmt = 0;
 8006100:	2300      	movs	r3, #0
 8006102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	4a72      	ldr	r2, [pc, #456]	; (80062d4 <find_volume+0x4a0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d802      	bhi.n	8006114 <find_volume+0x2e0>
 800610e:	2303      	movs	r3, #3
 8006110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800611a:	4293      	cmp	r3, r2
 800611c:	d802      	bhi.n	8006124 <find_volume+0x2f0>
 800611e:	2302      	movs	r3, #2
 8006120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f640 72f5 	movw	r2, #4085	; 0xff5
 800612a:	4293      	cmp	r3, r2
 800612c:	d802      	bhi.n	8006134 <find_volume+0x300>
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8006134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <find_volume+0x30c>
 800613c:	230d      	movs	r3, #13
 800613e:	e0c5      	b.n	80062cc <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1c9a      	adds	r2, r3, #2
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800614c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800614e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006152:	441a      	add	r2, r3
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	441a      	add	r2, r3
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006162:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006166:	2b03      	cmp	r3, #3
 8006168:	d11e      	bne.n	80061a8 <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	3330      	adds	r3, #48	; 0x30
 800616e:	332a      	adds	r3, #42	; 0x2a
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fd2b 	bl	8004bcc <ld_word>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <find_volume+0x34c>
 800617c:	230d      	movs	r3, #13
 800617e:	e0a5      	b.n	80062cc <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	891b      	ldrh	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <find_volume+0x358>
 8006188:	230d      	movs	r3, #13
 800618a:	e09f      	b.n	80062cc <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	3330      	adds	r3, #48	; 0x30
 8006190:	332c      	adds	r3, #44	; 0x2c
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fd32 	bl	8004bfc <ld_dword>
 8006198:	4602      	mov	r2, r0
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	647b      	str	r3, [r7, #68]	; 0x44
 80061a6:	e01f      	b.n	80061e8 <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	891b      	ldrh	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <find_volume+0x380>
 80061b0:	230d      	movs	r3, #13
 80061b2:	e08b      	b.n	80062cc <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	6a1a      	ldr	r2, [r3, #32]
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	441a      	add	r2, r3
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d103      	bne.n	80061d0 <find_volume+0x39c>
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	e00a      	b.n	80061e6 <find_volume+0x3b2>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	695a      	ldr	r2, [r3, #20]
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	085a      	lsrs	r2, r3, #1
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80061f2:	0a5b      	lsrs	r3, r3, #9
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d201      	bcs.n	80061fc <find_volume+0x3c8>
 80061f8:	230d      	movs	r3, #13
 80061fa:	e067      	b.n	80062cc <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006202:	611a      	str	r2, [r3, #16]
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006216:	2b03      	cmp	r3, #3
 8006218:	d149      	bne.n	80062ae <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	3330      	adds	r3, #48	; 0x30
 800621e:	3330      	adds	r3, #48	; 0x30
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fcd3 	bl	8004bcc <ld_word>
 8006226:	4603      	mov	r3, r0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d140      	bne.n	80062ae <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622e:	3301      	adds	r3, #1
 8006230:	4619      	mov	r1, r3
 8006232:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006234:	f7fe fe4f 	bl	8004ed6 <move_window>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d137      	bne.n	80062ae <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	3330      	adds	r3, #48	; 0x30
 8006248:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fcbd 	bl	8004bcc <ld_word>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800625a:	429a      	cmp	r2, r3
 800625c:	d127      	bne.n	80062ae <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	3330      	adds	r3, #48	; 0x30
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fcca 	bl	8004bfc <ld_dword>
 8006268:	4602      	mov	r2, r0
 800626a:	4b1b      	ldr	r3, [pc, #108]	; (80062d8 <find_volume+0x4a4>)
 800626c:	429a      	cmp	r2, r3
 800626e:	d11e      	bne.n	80062ae <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	3330      	adds	r3, #48	; 0x30
 8006274:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fcbf 	bl	8004bfc <ld_dword>
 800627e:	4602      	mov	r2, r0
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <find_volume+0x4a8>)
 8006282:	429a      	cmp	r2, r3
 8006284:	d113      	bne.n	80062ae <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	3330      	adds	r3, #48	; 0x30
 800628a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fcb4 	bl	8004bfc <ld_dword>
 8006294:	4602      	mov	r2, r0
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	3330      	adds	r3, #48	; 0x30
 800629e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fcaa 	bl	8004bfc <ld_dword>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80062b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <find_volume+0x4ac>)
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <find_volume+0x4ac>)
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <find_volume+0x4ac>)
 80062c4:	881a      	ldrh	r2, [r3, #0]
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3758      	adds	r7, #88	; 0x58
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	0ffffff5 	.word	0x0ffffff5
 80062d8:	41615252 	.word	0x41615252
 80062dc:	61417272 	.word	0x61417272
 80062e0:	2000025c 	.word	0x2000025c

080062e4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062ee:	2309      	movs	r3, #9
 80062f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d01c      	beq.n	8006332 <validate+0x4e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d018      	beq.n	8006332 <validate+0x4e>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <validate+0x4e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	889a      	ldrh	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	88db      	ldrh	r3, [r3, #6]
 8006314:	429a      	cmp	r2, r3
 8006316:	d10c      	bne.n	8006332 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe f988 	bl	8004634 <disk_status>
 8006324:	4603      	mov	r3, r0
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <validate+0x4e>
			res = FR_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <validate+0x5a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	e000      	b.n	8006340 <validate+0x5c>
 800633e:	2300      	movs	r3, #0
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	6013      	str	r3, [r2, #0]
	return res;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006362:	f107 0310 	add.w	r3, r7, #16
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fcc9 	bl	8005cfe <get_ldnumber>
 800636c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	da01      	bge.n	8006378 <f_mount+0x28>
 8006374:	230b      	movs	r3, #11
 8006376:	e025      	b.n	80063c4 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006378:	4a14      	ldr	r2, [pc, #80]	; (80063cc <f_mount+0x7c>)
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	490b      	ldr	r1, [pc, #44]	; (80063cc <f_mount+0x7c>)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <f_mount+0x5e>
 80063aa:	2300      	movs	r3, #0
 80063ac:	e00a      	b.n	80063c4 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063ae:	f107 010c 	add.w	r1, r7, #12
 80063b2:	f107 0308 	add.w	r3, r7, #8
 80063b6:	2200      	movs	r2, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fd3b 	bl	8005e34 <find_volume>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20000258 	.word	0x20000258

080063d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b099      	sub	sp, #100	; 0x64
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <f_open+0x18>
 80063e4:	2309      	movs	r3, #9
 80063e6:	e172      	b.n	80066ce <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063f0:	79fa      	ldrb	r2, [r7, #7]
 80063f2:	f107 0114 	add.w	r1, r7, #20
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fd1a 	bl	8005e34 <find_volume>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8156 	bne.w	80066bc <f_open+0x2ec>
		dj.obj.fs = fs;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	f107 0318 	add.w	r3, r7, #24
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fbff 	bl	8005c20 <follow_path>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006430:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006434:	b25b      	sxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	da02      	bge.n	8006440 <f_open+0x70>
				res = FR_INVALID_NAME;
 800643a:	2306      	movs	r3, #6
 800643c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	f003 031c 	and.w	r3, r3, #28
 8006446:	2b00      	cmp	r3, #0
 8006448:	d073      	beq.n	8006532 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 800644a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006456:	2b04      	cmp	r3, #4
 8006458:	d107      	bne.n	800646a <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800645a:	f107 0318 	add.w	r3, r7, #24
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fae9 	bl	8005a36 <dir_register>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	e010      	b.n	8006496 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006474:	7fbb      	ldrb	r3, [r7, #30]
 8006476:	f003 0311 	and.w	r3, r3, #17
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <f_open+0xb6>
					res = FR_DENIED;
 800647e:	2307      	movs	r3, #7
 8006480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006484:	e007      	b.n	8006496 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <f_open+0xc6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800649a:	2b00      	cmp	r3, #0
 800649c:	d163      	bne.n	8006566 <f_open+0x196>
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05e      	beq.n	8006566 <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ac:	4611      	mov	r1, r2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff fa2d 	bl	800590e <ld_clust>
 80064b4:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	f103 040e 	add.w	r4, r3, #14
 80064bc:	f7fe fb7c 	bl	8004bb8 <get_fattime>
 80064c0:	4603      	mov	r3, r0
 80064c2:	4619      	mov	r1, r3
 80064c4:	4620      	mov	r0, r4
 80064c6:	f7fe fbd7 	bl	8004c78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	330b      	adds	r3, #11
 80064ce:	2220      	movs	r2, #32
 80064d0:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064d6:	2200      	movs	r2, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fa37 	bl	800594c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	331c      	adds	r3, #28
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fe fbc7 	bl	8004c78 <st_dword>
					fs->wflag = 1;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2201      	movs	r2, #1
 80064ee:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 80064f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d037      	beq.n	8006566 <f_open+0x196>
						dw = fs->winsect;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 80064fc:	f107 0318 	add.w	r3, r7, #24
 8006500:	2200      	movs	r2, #0
 8006502:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe ff2c 	bl	8005362 <remove_chain>
 800650a:	4603      	mov	r3, r0
 800650c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006514:	2b00      	cmp	r3, #0
 8006516:	d126      	bne.n	8006566 <f_open+0x196>
							res = move_window(fs, dw);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fcda 	bl	8004ed6 <move_window>
 8006522:	4603      	mov	r3, r0
 8006524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800652c:	3a01      	subs	r2, #1
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e019      	b.n	8006566 <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006536:	2b00      	cmp	r3, #0
 8006538:	d115      	bne.n	8006566 <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800653a:	7fbb      	ldrb	r3, [r7, #30]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <f_open+0x17c>
					res = FR_NO_FILE;
 8006544:	2304      	movs	r3, #4
 8006546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800654a:	e00c      	b.n	8006566 <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <f_open+0x196>
 8006556:	7fbb      	ldrb	r3, [r7, #30]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <f_open+0x196>
						res = FR_DENIED;
 8006560:	2307      	movs	r3, #7
 8006562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <f_open+0x1b0>
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800658e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8092 	bne.w	80066bc <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff f9b5 	bl	800590e <ld_clust>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	331c      	adds	r3, #28
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fb24 	bl	8004bfc <ld_dword>
 80065b4:	4602      	mov	r2, r0
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	88da      	ldrh	r2, [r3, #6]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	79fa      	ldrb	r2, [r7, #7]
 80065cc:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3328      	adds	r3, #40	; 0x28
 80065e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e8:	2100      	movs	r1, #0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fb91 	bl	8004d12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d060      	beq.n	80066bc <f_open+0x2ec>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d05c      	beq.n	80066bc <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	895b      	ldrh	r3, [r3, #10]
 800660e:	025b      	lsls	r3, r3, #9
 8006610:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	657b      	str	r3, [r7, #84]	; 0x54
 800661e:	e016      	b.n	800664e <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fd10 	bl	800504a <get_fat>
 800662a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800662c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662e:	2b01      	cmp	r3, #1
 8006630:	d802      	bhi.n	8006638 <f_open+0x268>
 8006632:	2302      	movs	r3, #2
 8006634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d102      	bne.n	8006646 <f_open+0x276>
 8006640:	2301      	movs	r3, #1
 8006642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006646:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	657b      	str	r3, [r7, #84]	; 0x54
 800664e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <f_open+0x28e>
 8006656:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665a:	429a      	cmp	r2, r3
 800665c:	d8e0      	bhi.n	8006620 <f_open+0x250>
				}
				fp->clust = clst;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006662:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006668:	2b00      	cmp	r3, #0
 800666a:	d127      	bne.n	80066bc <f_open+0x2ec>
 800666c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006672:	2b00      	cmp	r3, #0
 8006674:	d022      	beq.n	80066bc <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fcc6 	bl	800500c <clst2sect>
 8006680:	6478      	str	r0, [r7, #68]	; 0x44
 8006682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <f_open+0x2c0>
						res = FR_INT_ERR;
 8006688:	2302      	movs	r3, #2
 800668a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800668e:	e015      	b.n	80066bc <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006692:	0a5a      	lsrs	r2, r3, #9
 8006694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	7858      	ldrb	r0, [r3, #1]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	69da      	ldr	r2, [r3, #28]
 80066aa:	2301      	movs	r3, #1
 80066ac:	f7fd ffd8 	bl	8004660 <disk_read>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <f_open+0x2ec>
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80066bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <f_open+0x2fa>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80066ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3764      	adds	r7, #100	; 0x64
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}

080066d6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08e      	sub	sp, #56	; 0x38
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f107 0214 	add.w	r2, r7, #20
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fdf4 	bl	80062e4 <validate>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006702:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006706:	2b00      	cmp	r3, #0
 8006708:	d107      	bne.n	800671a <f_read+0x44>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	7c5b      	ldrb	r3, [r3, #17]
 800670e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <f_read+0x4a>
 800671a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800671e:	e109      	b.n	8006934 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	7c1b      	ldrb	r3, [r3, #16]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <f_read+0x5a>
 800672c:	2307      	movs	r3, #7
 800672e:	e101      	b.n	8006934 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	429a      	cmp	r2, r3
 8006742:	f240 80f2 	bls.w	800692a <f_read+0x254>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 800674a:	e0ee      	b.n	800692a <f_read+0x254>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006754:	2b00      	cmp	r3, #0
 8006756:	f040 80ba 	bne.w	80068ce <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	0a5b      	lsrs	r3, r3, #9
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	8952      	ldrh	r2, [r2, #10]
 8006764:	3a01      	subs	r2, #1
 8006766:	4013      	ands	r3, r2
 8006768:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d123      	bne.n	80067b8 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
 800677e:	e007      	b.n	8006790 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fe fc5e 	bl	800504a <get_fat>
 800678e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2b01      	cmp	r3, #1
 8006794:	d804      	bhi.n	80067a0 <f_read+0xca>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	745a      	strb	r2, [r3, #17]
 800679c:	2302      	movs	r3, #2
 800679e:	e0c9      	b.n	8006934 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d104      	bne.n	80067b2 <f_read+0xdc>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	745a      	strb	r2, [r3, #17]
 80067ae:	2301      	movs	r3, #1
 80067b0:	e0c0      	b.n	8006934 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b6:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe fc23 	bl	800500c <clst2sect>
 80067c6:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <f_read+0x102>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	745a      	strb	r2, [r3, #17]
 80067d4:	2302      	movs	r3, #2
 80067d6:	e0ad      	b.n	8006934 <f_read+0x25e>
			sect += csect;
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0a5b      	lsrs	r3, r3, #9
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d039      	beq.n	8006860 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	4413      	add	r3, r2
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	8952      	ldrh	r2, [r2, #10]
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d905      	bls.n	8006806 <f_read+0x130>
					cc = fs->csize - csect;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	895b      	ldrh	r3, [r3, #10]
 80067fe:	461a      	mov	r2, r3
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	7858      	ldrb	r0, [r3, #1]
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006810:	f7fd ff26 	bl	8004660 <disk_read>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <f_read+0x14e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	745a      	strb	r2, [r3, #17]
 8006820:	2301      	movs	r3, #1
 8006822:	e087      	b.n	8006934 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	7c1b      	ldrb	r3, [r3, #16]
 8006828:	b25b      	sxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	da14      	bge.n	8006858 <f_read+0x182>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	429a      	cmp	r2, r3
 800683a:	d90d      	bls.n	8006858 <f_read+0x182>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	025b      	lsls	r3, r3, #9
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	18d0      	adds	r0, r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3328      	adds	r3, #40	; 0x28
 800684e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006852:	4619      	mov	r1, r3
 8006854:	f7fe fa3c 	bl	8004cd0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	025b      	lsls	r3, r3, #9
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800685e:	e050      	b.n	8006902 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	429a      	cmp	r2, r3
 8006868:	d02e      	beq.n	80068c8 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	7c1b      	ldrb	r3, [r3, #16]
 800686e:	b25b      	sxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	da18      	bge.n	80068a6 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	7858      	ldrb	r0, [r3, #1]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	2301      	movs	r3, #1
 8006884:	f7fd ff56 	bl	8004734 <disk_write>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <f_read+0x1c2>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	745a      	strb	r2, [r3, #17]
 8006894:	2301      	movs	r3, #1
 8006896:	e04d      	b.n	8006934 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	7c1b      	ldrb	r3, [r3, #16]
 800689c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	7858      	ldrb	r0, [r3, #1]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80068b0:	2301      	movs	r3, #1
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	f7fd fed4 	bl	8004660 <disk_read>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <f_read+0x1f2>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	745a      	strb	r2, [r3, #17]
 80068c4:	2301      	movs	r3, #1
 80068c6:	e035      	b.n	8006934 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80068dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d901      	bls.n	80068e8 <f_read+0x212>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f6:	4413      	add	r3, r2
 80068f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fa:	4619      	mov	r1, r3
 80068fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068fe:	f7fe f9e7 	bl	8004cd0 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	441a      	add	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	4413      	add	r3, r2
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	441a      	add	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	615a      	str	r2, [r3, #20]
	for ( ;  btr;								/* Repeat until btr bytes read */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f af0d 	bne.w	800674c <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3738      	adds	r7, #56	; 0x38
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f107 0208 	add.w	r2, r7, #8
 800694a:	4611      	mov	r1, r2
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fcc9 	bl	80062e4 <validate>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d168      	bne.n	8006a2e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7c1b      	ldrb	r3, [r3, #16]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d062      	beq.n	8006a2e <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	7c1b      	ldrb	r3, [r3, #16]
 800696c:	b25b      	sxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	da15      	bge.n	800699e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7858      	ldrb	r0, [r3, #1]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	2301      	movs	r3, #1
 8006982:	f7fd fed7 	bl	8004734 <disk_write>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <f_sync+0x54>
 800698c:	2301      	movs	r3, #1
 800698e:	e04f      	b.n	8006a30 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7c1b      	ldrb	r3, [r3, #16]
 8006994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006998:	b2da      	uxtb	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800699e:	f7fe f90b 	bl	8004bb8 <get_fattime>
 80069a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	4619      	mov	r1, r3
 80069ac:	4610      	mov	r0, r2
 80069ae:	f7fe fa92 	bl	8004ed6 <move_window>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d138      	bne.n	8006a2e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	330b      	adds	r3, #11
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	330b      	adds	r3, #11
 80069cc:	f042 0220 	orr.w	r2, r2, #32
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	461a      	mov	r2, r3
 80069de:	68f9      	ldr	r1, [r7, #12]
 80069e0:	f7fe ffb4 	bl	800594c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f103 021c 	add.w	r2, r3, #28
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7fe f941 	bl	8004c78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3316      	adds	r3, #22
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe f93b 	bl	8004c78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3312      	adds	r3, #18
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe f91a 	bl	8004c42 <st_word>
					fs->wflag = 1;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2201      	movs	r2, #1
 8006a12:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe fa8a 	bl	8004f30 <sync_fs>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7c1b      	ldrb	r3, [r3, #16]
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ff7b 	bl	800693c <f_sync>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10e      	bne.n	8006a6e <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f107 0208 	add.w	r2, r7, #8
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fc43 	bl	80062e4 <validate>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d102      	bne.n	8006a6e <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b090      	sub	sp, #64	; 0x40
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006a84:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff f9d0 	bl	8005e34 <find_volume>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8006a9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 8099 	bne.w	8006bd6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d804      	bhi.n	8006ac2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e089      	b.n	8006bd6 <f_getfree+0x15e>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d128      	bne.n	8006b20 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006ad6:	f107 0314 	add.w	r3, r7, #20
 8006ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe fab4 	bl	800504a <get_fat>
 8006ae2:	62b8      	str	r0, [r7, #40]	; 0x28
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d103      	bne.n	8006af4 <f_getfree+0x7c>
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006af2:	e063      	b.n	8006bbc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d103      	bne.n	8006b02 <f_getfree+0x8a>
 8006afa:	2302      	movs	r3, #2
 8006afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006b00:	e05c      	b.n	8006bbc <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <f_getfree+0x96>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	63bb      	str	r3, [r7, #56]	; 0x38
				} while (++clst < fs->n_fatent);
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	3301      	adds	r3, #1
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d3db      	bcc.n	8006ad6 <f_getfree+0x5e>
 8006b1e:	e04d      	b.n	8006bbc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
					sect = fs->fatbase;		/* Top of the FAT */
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
					i = 0;					/* Offset in the sector */
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10d      	bne.n	8006b52 <f_getfree+0xda>
							res = move_window(fs, sect++);
 8006b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7fe f9c9 	bl	8004ed6 <move_window>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							if (res != FR_OK) break;
 8006b4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d133      	bne.n	8006bba <f_getfree+0x142>
						}
						if (fs->fs_type == FS_FAT16) {
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d111      	bne.n	8006b7e <f_getfree+0x106>
							if (ld_word(fs->win + i) == 0) nfree++;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	4413      	add	r3, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe f831 	bl	8004bcc <ld_word>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <f_getfree+0xfe>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	3301      	adds	r3, #1
 8006b74:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 2;
 8006b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b78:	3302      	adds	r3, #2
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7c:	e012      	b.n	8006ba4 <f_getfree+0x12c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	4413      	add	r3, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe f837 	bl	8004bfc <ld_dword>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <f_getfree+0x126>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
							i += 4;
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
						}
						i %= SS(fs);
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
					} while (--clst);
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1bb      	bne.n	8006b30 <f_getfree+0xb8>
 8006bb8:	e000      	b.n	8006bbc <f_getfree+0x144>
							if (res != FR_OK) break;
 8006bba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	791a      	ldrb	r2, [r3, #4]
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006bd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3740      	adds	r7, #64	; 0x40
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006be8:	f000 fe38 	bl	800785c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8006bec:	f000 f852 	bl	8006c94 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006bf0:	f000 fabc 	bl	800716c <MX_GPIO_Init>
	MX_RTC_Init();
 8006bf4:	f000 f8ce 	bl	8006d94 <MX_RTC_Init>
	MX_SPI1_Init();
 8006bf8:	f000 f930 	bl	8006e5c <MX_SPI1_Init>
	MX_TIM2_Init();
 8006bfc:	f000 f964 	bl	8006ec8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8006c00:	f000 f9ee 	bl	8006fe0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8006c04:	f000 fa3a 	bl	800707c <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8006c08:	f000 fa86 	bl	8007118 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Module Init */
	HAL_TIM_Base_Start_IT(&htim2); /* RGB Tim Init */
 8006c0c:	481c      	ldr	r0, [pc, #112]	; (8006c80 <main+0x9c>)
 8006c0e:	f002 fee6 	bl	80099de <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8006c12:	2100      	movs	r1, #0
 8006c14:	481a      	ldr	r0, [pc, #104]	; (8006c80 <main+0x9c>)
 8006c16:	f002 ff3b 	bl	8009a90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4818      	ldr	r0, [pc, #96]	; (8006c80 <main+0x9c>)
 8006c1e:	f002 ff37 	bl	8009a90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006c22:	2108      	movs	r1, #8
 8006c24:	4816      	ldr	r0, [pc, #88]	; (8006c80 <main+0x9c>)
 8006c26:	f002 ff33 	bl	8009a90 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim3); /* System Update Tim Init */
 8006c2a:	4816      	ldr	r0, [pc, #88]	; (8006c84 <main+0xa0>)
 8006c2c:	f002 fed7 	bl	80099de <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim4); /* THS syncro clock */
 8006c30:	4815      	ldr	r0, [pc, #84]	; (8006c88 <main+0xa4>)
 8006c32:	f002 feb0 	bl	8009996 <HAL_TIM_Base_Start>

	RGB_Init();
 8006c36:	f7fc fbcd 	bl	80033d4 <RGB_Init>
	LCD_Init();
 8006c3a:	f7fa fb2d 	bl	8001298 <LCD_Init>
	THS_Init();
 8006c3e:	f7fd f86f 	bl	8003d20 <THS_Init>
	SD_Init();
 8006c42:	f7fc fec7 	bl	80039d4 <SD_Init>
	NET_Init();
 8006c46:	f7fc f88d 	bl	8002d64 <NET_Init>
	MENU_Init();
 8006c4a:	f7fb f85d 	bl	8001d08 <MENU_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	LCD_ClearScreen();
 8006c4e:	f7fa fc09 	bl	8001464 <LCD_ClearScreen>

	while (1) {
		if (Update && State == ST_Clock) {
 8006c52:	4b0e      	ldr	r3, [pc, #56]	; (8006c8c <main+0xa8>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <main+0x88>
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <main+0xac>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <main+0x88>
			MENU_Clock();
 8006c62:	f7fb fd63 	bl	800272c <MENU_Clock>
			Update = false;
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <main+0xa8>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
		}

		if (MENU_HandleKeys()) {
 8006c6c:	f7fb fd9c 	bl	80027a8 <MENU_HandleKeys>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0ed      	beq.n	8006c52 <main+0x6e>
			Update = true;
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <main+0xa8>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
		if (Update && State == ST_Clock) {
 8006c7c:	e7e9      	b.n	8006c52 <main+0x6e>
 8006c7e:	bf00      	nop
 8006c80:	200033d0 	.word	0x200033d0
 8006c84:	20003314 	.word	0x20003314
 8006c88:	20003294 	.word	0x20003294
 8006c8c:	20000059 	.word	0x20000059
 8006c90:	20003355 	.word	0x20003355

08006c94 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b098      	sub	sp, #96	; 0x60
 8006c98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c9e:	2230      	movs	r2, #48	; 0x30
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f004 fdfe 	bl	800b8a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006ca8:	f107 031c 	add.w	r3, r7, #28
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	60da      	str	r2, [r3, #12]
 8006cb6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <SystemClock_Config+0xf4>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	4a2e      	ldr	r2, [pc, #184]	; (8006d88 <SystemClock_Config+0xf4>)
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd6:	4b2c      	ldr	r3, [pc, #176]	; (8006d88 <SystemClock_Config+0xf4>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	607b      	str	r3, [r7, #4]
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <SystemClock_Config+0xf8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <SystemClock_Config+0xf8>)
 8006cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	4b26      	ldr	r3, [pc, #152]	; (8006d8c <SystemClock_Config+0xf8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cfa:	607b      	str	r3, [r7, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d10:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8006d12:	2304      	movs	r3, #4
 8006d14:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 72;
 8006d16:	2348      	movs	r3, #72	; 0x48
 8006d18:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 f95e 	bl	8007fe8 <HAL_RCC_OscConfig>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <SystemClock_Config+0xa2>
		Error_Handler();
 8006d32:	f000 fb5d 	bl	80073f0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006d36:	230f      	movs	r3, #15
 8006d38:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006d4c:	f107 031c 	add.w	r3, r7, #28
 8006d50:	2102      	movs	r1, #2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fbb8 	bl	80084c8 <HAL_RCC_ClockConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SystemClock_Config+0xce>
		Error_Handler();
 8006d5e:	f000 fb47 	bl	80073f0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006d62:	2302      	movs	r3, #2
 8006d64:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV16;
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <SystemClock_Config+0xfc>)
 8006d68:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8006d6a:	f107 030c 	add.w	r3, r7, #12
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fd9c 	bl	80088ac <HAL_RCCEx_PeriphCLKConfig>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <SystemClock_Config+0xea>
		Error_Handler();
 8006d7a:	f000 fb39 	bl	80073f0 <Error_Handler>
	}
}
 8006d7e:	bf00      	nop
 8006d80:	3760      	adds	r7, #96	; 0x60
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	40007000 	.word	0x40007000
 8006d90:	00100300 	.word	0x00100300

08006d94 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	60da      	str	r2, [r3, #12]
 8006da6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8006da8:	2300      	movs	r3, #0
 8006daa:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8006dac:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dae:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <MX_RTC_Init+0xc4>)
 8006db0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006db2:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 125;
 8006db8:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dba:	227d      	movs	r2, #125	; 0x7d
 8006dbc:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 4000;
 8006dbe:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dc0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006dc4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006dc6:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006dcc:	4b21      	ldr	r3, [pc, #132]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006dd2:	4b20      	ldr	r3, [pc, #128]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8006dd8:	481e      	ldr	r0, [pc, #120]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006dda:	f001 fe49 	bl	8008a70 <HAL_RTC_Init>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_RTC_Init+0x54>
		Error_Handler();
 8006de4:	f000 fb04 	bl	80073f0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4619      	mov	r1, r3
 8006e02:	4814      	ldr	r0, [pc, #80]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006e04:	f001 fec5 	bl	8008b92 <HAL_RTC_SetTime>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <MX_RTC_Init+0x7e>
		Error_Handler();
 8006e0e:	f000 faef 	bl	80073f0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8006e12:	2303      	movs	r3, #3
 8006e14:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_APRIL;
 8006e16:	2304      	movs	r3, #4
 8006e18:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x8;
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8006e1e:	2320      	movs	r3, #32
 8006e20:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8006e22:	463b      	mov	r3, r7
 8006e24:	2201      	movs	r2, #1
 8006e26:	4619      	mov	r1, r3
 8006e28:	480a      	ldr	r0, [pc, #40]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006e2a:	f001 ffcd 	bl	8008dc8 <HAL_RTC_SetDate>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <MX_RTC_Init+0xa4>
		Error_Handler();
 8006e34:	f000 fadc 	bl	80073f0 <Error_Handler>
	}
	/** Enable Calibrartion
	 */
	if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK) {
 8006e38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006e3c:	4805      	ldr	r0, [pc, #20]	; (8006e54 <MX_RTC_Init+0xc0>)
 8006e3e:	f002 f949 	bl	80090d4 <HAL_RTCEx_SetCalibrationOutPut>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <MX_RTC_Init+0xb8>
		Error_Handler();
 8006e48:	f000 fad2 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8006e4c:	bf00      	nop
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20003358 	.word	0x20003358
 8006e58:	40002800 	.word	0x40002800

08006e5c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8006e60:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <MX_SPI1_Init+0x68>)
 8006e64:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006e6c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8006e86:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e90:	2218      	movs	r2, #24
 8006e92:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8006eac:	4804      	ldr	r0, [pc, #16]	; (8006ec0 <MX_SPI1_Init+0x64>)
 8006eae:	f002 f953 	bl	8009158 <HAL_SPI_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_SPI1_Init+0x60>
		Error_Handler();
 8006eb8:	f000 fa9a 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20003378 	.word	0x20003378
 8006ec4:	40013000 	.word	0x40013000

08006ec8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08e      	sub	sp, #56	; 0x38
 8006ecc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006edc:	f107 0320 	add.w	r3, r7, #32
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8006ee6:	1d3b      	adds	r3, r7, #4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
 8006ef4:	615a      	str	r2, [r3, #20]
 8006ef6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8006ef8:	4b38      	ldr	r3, [pc, #224]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006efe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8006f00:	4b36      	ldr	r3, [pc, #216]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f02:	2247      	movs	r2, #71	; 0x47
 8006f04:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f06:	4b35      	ldr	r3, [pc, #212]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8006f0c:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f12:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f14:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f1a:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8006f20:	482e      	ldr	r0, [pc, #184]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f22:	f002 fd0d 	bl	8009940 <HAL_TIM_Base_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_TIM2_Init+0x68>
		Error_Handler();
 8006f2c:	f000 fa60 	bl	80073f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8006f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4827      	ldr	r0, [pc, #156]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f3e:	f002 ffb3 	bl	8009ea8 <HAL_TIM_ConfigClockSource>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <MX_TIM2_Init+0x84>
		Error_Handler();
 8006f48:	f000 fa52 	bl	80073f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8006f4c:	4823      	ldr	r0, [pc, #140]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f4e:	f002 fd6a 	bl	8009a26 <HAL_TIM_PWM_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <MX_TIM2_Init+0x94>
		Error_Handler();
 8006f58:	f000 fa4a 	bl	80073f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8006f64:	f107 0320 	add.w	r3, r7, #32
 8006f68:	4619      	mov	r1, r3
 8006f6a:	481c      	ldr	r0, [pc, #112]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f6c:	f003 fb8c 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8006f76:	f000 fa3b 	bl	80073f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006f7a:	2360      	movs	r3, #96	; 0x60
 8006f7c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4812      	ldr	r0, [pc, #72]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006f92:	f002 fec3 	bl	8009d1c <HAL_TIM_PWM_ConfigChannel>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8006f9c:	f000 fa28 	bl	80073f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8006fa0:	1d3b      	adds	r3, r7, #4
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	480d      	ldr	r0, [pc, #52]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006fa8:	f002 feb8 	bl	8009d1c <HAL_TIM_PWM_ConfigChannel>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8006fb2:	f000 fa1d 	bl	80073f0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	2208      	movs	r2, #8
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4807      	ldr	r0, [pc, #28]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006fbe:	f002 fead 	bl	8009d1c <HAL_TIM_PWM_ConfigChannel>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8006fc8:	f000 fa12 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8006fcc:	4803      	ldr	r0, [pc, #12]	; (8006fdc <MX_TIM2_Init+0x114>)
 8006fce:	f000 faf7 	bl	80075c0 <HAL_TIM_MspPostInit>

}
 8006fd2:	bf00      	nop
 8006fd4:	3738      	adds	r7, #56	; 0x38
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200033d0 	.word	0x200033d0

08006fe0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	609a      	str	r2, [r3, #8]
 8006ff2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <MX_TIM3_Init+0x94>)
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <MX_TIM3_Init+0x98>)
 8007000:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 36000 - 1;
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <MX_TIM3_Init+0x94>)
 8007004:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007008:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <MX_TIM3_Init+0x94>)
 800700c:	2200      	movs	r2, #0
 800700e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000 - 1;
 8007010:	4b18      	ldr	r3, [pc, #96]	; (8007074 <MX_TIM3_Init+0x94>)
 8007012:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8007016:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007018:	4b16      	ldr	r3, [pc, #88]	; (8007074 <MX_TIM3_Init+0x94>)
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800701e:	4b15      	ldr	r3, [pc, #84]	; (8007074 <MX_TIM3_Init+0x94>)
 8007020:	2200      	movs	r2, #0
 8007022:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8007024:	4813      	ldr	r0, [pc, #76]	; (8007074 <MX_TIM3_Init+0x94>)
 8007026:	f002 fc8b 	bl	8009940 <HAL_TIM_Base_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <MX_TIM3_Init+0x54>
		Error_Handler();
 8007030:	f000 f9de 	bl	80073f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007038:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800703a:	f107 0308 	add.w	r3, r7, #8
 800703e:	4619      	mov	r1, r3
 8007040:	480c      	ldr	r0, [pc, #48]	; (8007074 <MX_TIM3_Init+0x94>)
 8007042:	f002 ff31 	bl	8009ea8 <HAL_TIM_ConfigClockSource>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <MX_TIM3_Init+0x70>
		Error_Handler();
 800704c:	f000 f9d0 	bl	80073f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007050:	2300      	movs	r3, #0
 8007052:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007054:	2300      	movs	r3, #0
 8007056:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8007058:	463b      	mov	r3, r7
 800705a:	4619      	mov	r1, r3
 800705c:	4805      	ldr	r0, [pc, #20]	; (8007074 <MX_TIM3_Init+0x94>)
 800705e:	f003 fb13 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8007068:	f000 f9c2 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800706c:	bf00      	nop
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	20003314 	.word	0x20003314
 8007078:	40000400 	.word	0x40000400

0800707c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	609a      	str	r2, [r3, #8]
 800708e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8007090:	463b      	mov	r3, r7
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <MX_TIM4_Init+0x94>)
 800709a:	4a1e      	ldr	r2, [pc, #120]	; (8007114 <MX_TIM4_Init+0x98>)
 800709c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800709e:	4b1c      	ldr	r3, [pc, #112]	; (8007110 <MX_TIM4_Init+0x94>)
 80070a0:	2247      	movs	r2, #71	; 0x47
 80070a2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <MX_TIM4_Init+0x94>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xFFFF - 1;
 80070aa:	4b19      	ldr	r3, [pc, #100]	; (8007110 <MX_TIM4_Init+0x94>)
 80070ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070b0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <MX_TIM4_Init+0x94>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <MX_TIM4_Init+0x94>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80070be:	4814      	ldr	r0, [pc, #80]	; (8007110 <MX_TIM4_Init+0x94>)
 80070c0:	f002 fc3e 	bl	8009940 <HAL_TIM_Base_Init>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <MX_TIM4_Init+0x52>
		Error_Handler();
 80070ca:	f000 f991 	bl	80073f0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80070ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4619      	mov	r1, r3
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <MX_TIM4_Init+0x94>)
 80070dc:	f002 fee4 	bl	8009ea8 <HAL_TIM_ConfigClockSource>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_TIM4_Init+0x6e>
		Error_Handler();
 80070e6:	f000 f983 	bl	80073f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070ea:	2300      	movs	r3, #0
 80070ec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80070f2:	463b      	mov	r3, r7
 80070f4:	4619      	mov	r1, r3
 80070f6:	4806      	ldr	r0, [pc, #24]	; (8007110 <MX_TIM4_Init+0x94>)
 80070f8:	f003 fac6 	bl	800a688 <HAL_TIMEx_MasterConfigSynchronization>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8007102:	f000 f975 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8007106:	bf00      	nop
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20003294 	.word	0x20003294
 8007114:	40000800 	.word	0x40000800

08007118 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800711c:	4b11      	ldr	r3, [pc, #68]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <MX_USART3_UART_Init+0x50>)
 8007120:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 8007124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007128:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800712a:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 800712c:	2200      	movs	r2, #0
 800712e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8007130:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 8007132:	2200      	movs	r2, #0
 8007134:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 8007138:	2200      	movs	r2, #0
 800713a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 800713e:	220c      	movs	r2, #12
 8007140:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 8007144:	2200      	movs	r2, #0
 8007146:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 800714a:	2200      	movs	r2, #0
 800714c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800714e:	4805      	ldr	r0, [pc, #20]	; (8007164 <MX_USART3_UART_Init+0x4c>)
 8007150:	f003 fb2a 	bl	800a7a8 <HAL_UART_Init>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800715a:	f000 f949 	bl	80073f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	200032d4 	.word	0x200032d4
 8007168:	40004800 	.word	0x40004800

0800716c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	; 0x30
 8007170:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007172:	f107 031c 	add.w	r3, r7, #28
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	605a      	str	r2, [r3, #4]
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	60da      	str	r2, [r3, #12]
 8007180:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	4b67      	ldr	r3, [pc, #412]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	4a66      	ldr	r2, [pc, #408]	; (8007324 <MX_GPIO_Init+0x1b8>)
 800718c:	f043 0310 	orr.w	r3, r3, #16
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
 8007192:	4b64      	ldr	r3, [pc, #400]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	4b60      	ldr	r3, [pc, #384]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	4a5f      	ldr	r2, [pc, #380]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071a8:	f043 0304 	orr.w	r3, r3, #4
 80071ac:	6313      	str	r3, [r2, #48]	; 0x30
 80071ae:	4b5d      	ldr	r3, [pc, #372]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80071ba:	2300      	movs	r3, #0
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	4b59      	ldr	r3, [pc, #356]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	4a58      	ldr	r2, [pc, #352]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ca:	4b56      	ldr	r3, [pc, #344]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	4b52      	ldr	r3, [pc, #328]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	4a51      	ldr	r2, [pc, #324]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	6313      	str	r3, [r2, #48]	; 0x30
 80071e6:	4b4f      	ldr	r3, [pc, #316]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	4b4b      	ldr	r3, [pc, #300]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	4a4a      	ldr	r2, [pc, #296]	; (8007324 <MX_GPIO_Init+0x1b8>)
 80071fc:	f043 0308 	orr.w	r3, r3, #8
 8007200:	6313      	str	r3, [r2, #48]	; 0x30
 8007202:	4b48      	ldr	r3, [pc, #288]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800720e:	2300      	movs	r3, #0
 8007210:	607b      	str	r3, [r7, #4]
 8007212:	4b44      	ldr	r3, [pc, #272]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	4a43      	ldr	r2, [pc, #268]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007218:	f043 0302 	orr.w	r3, r3, #2
 800721c:	6313      	str	r3, [r2, #48]	; 0x30
 800721e:	4b41      	ldr	r3, [pc, #260]	; (8007324 <MX_GPIO_Init+0x1b8>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800722a:	2200      	movs	r2, #0
 800722c:	217f      	movs	r1, #127	; 0x7f
 800722e:	483e      	ldr	r0, [pc, #248]	; (8007328 <MX_GPIO_Init+0x1bc>)
 8007230:	f000 fe8e 	bl	8007f50 <HAL_GPIO_WritePin>
			LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
					| LCD_D4_Pin | LCD_D5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_Screen_Pin | THS_Sensor1_Pin | THS_Sensor2_Pin,
 8007234:	2200      	movs	r2, #0
 8007236:	f248 0103 	movw	r1, #32771	; 0x8003
 800723a:	483c      	ldr	r0, [pc, #240]	; (800732c <MX_GPIO_Init+0x1c0>)
 800723c:	f000 fe88 	bl	8007f50 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8007240:	2200      	movs	r2, #0
 8007242:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8007246:	483a      	ldr	r0, [pc, #232]	; (8007330 <MX_GPIO_Init+0x1c4>)
 8007248:	f000 fe82 	bl	8007f50 <HAL_GPIO_WritePin>
	STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin | STM_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LCD_D6_Pin LCD_D7_Pin LCD_RS_Pin LCD_RW_Pin
	 LCD_E_Pin LCD_D4_Pin LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin | LCD_D7_Pin | LCD_RS_Pin | LCD_RW_Pin
 800724c:	237f      	movs	r3, #127	; 0x7f
 800724e:	61fb      	str	r3, [r7, #28]
			| LCD_E_Pin | LCD_D4_Pin | LCD_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007250:	2301      	movs	r3, #1
 8007252:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007254:	2302      	movs	r3, #2
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007258:	2300      	movs	r3, #0
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800725c:	f107 031c 	add.w	r3, r7, #28
 8007260:	4619      	mov	r1, r3
 8007262:	4831      	ldr	r0, [pc, #196]	; (8007328 <MX_GPIO_Init+0x1bc>)
 8007264:	f000 fcc2 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_Screen_Pin */
	GPIO_InitStruct.Pin = LCD_Screen_Pin;
 8007268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800726e:	2301      	movs	r3, #1
 8007270:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007272:	2302      	movs	r3, #2
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007276:	2300      	movs	r3, #0
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_Screen_GPIO_Port, &GPIO_InitStruct);
 800727a:	f107 031c 	add.w	r3, r7, #28
 800727e:	4619      	mov	r1, r3
 8007280:	482a      	ldr	r0, [pc, #168]	; (800732c <MX_GPIO_Init+0x1c0>)
 8007282:	f000 fcb3 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pins : THS_Sensor1_Pin THS_Sensor2_Pin */
	GPIO_InitStruct.Pin = THS_Sensor1_Pin | THS_Sensor2_Pin;
 8007286:	2303      	movs	r3, #3
 8007288:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800728a:	2301      	movs	r3, #1
 800728c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800728e:	2301      	movs	r3, #1
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007292:	2300      	movs	r3, #0
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007296:	f107 031c 	add.w	r3, r7, #28
 800729a:	4619      	mov	r1, r3
 800729c:	4823      	ldr	r0, [pc, #140]	; (800732c <MX_GPIO_Init+0x1c0>)
 800729e:	f000 fca5 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pin : STM_UserButton_Pin */
	GPIO_InitStruct.Pin = STM_UserButton_Pin;
 80072a2:	2301      	movs	r3, #1
 80072a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <MX_GPIO_Init+0x1c8>)
 80072a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80072aa:	2302      	movs	r3, #2
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(STM_UserButton_GPIO_Port, &GPIO_InitStruct);
 80072ae:	f107 031c 	add.w	r3, r7, #28
 80072b2:	4619      	mov	r1, r3
 80072b4:	4820      	ldr	r0, [pc, #128]	; (8007338 <MX_GPIO_Init+0x1cc>)
 80072b6:	f000 fc99 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pin : MENU_Btn1_Pin */
	GPIO_InitStruct.Pin = MENU_Btn1_Pin;
 80072ba:	2380      	movs	r3, #128	; 0x80
 80072bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072be:	2300      	movs	r3, #0
 80072c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072c2:	2301      	movs	r3, #1
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MENU_Btn1_GPIO_Port, &GPIO_InitStruct);
 80072c6:	f107 031c 	add.w	r3, r7, #28
 80072ca:	4619      	mov	r1, r3
 80072cc:	4816      	ldr	r0, [pc, #88]	; (8007328 <MX_GPIO_Init+0x1bc>)
 80072ce:	f000 fc8d 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pins : MENU_Btn2_Pin MENU_Btn3_Pin MENU_Btn4_Pin */
	GPIO_InitStruct.Pin = MENU_Btn2_Pin | MENU_Btn3_Pin | MENU_Btn4_Pin;
 80072d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80072d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072d8:	2300      	movs	r3, #0
 80072da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80072dc:	2302      	movs	r3, #2
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072e0:	f107 031c 	add.w	r3, r7, #28
 80072e4:	4619      	mov	r1, r3
 80072e6:	4810      	ldr	r0, [pc, #64]	; (8007328 <MX_GPIO_Init+0x1bc>)
 80072e8:	f000 fc80 	bl	8007bec <HAL_GPIO_Init>

	/*Configure GPIO pins : STM_Green_Pin STM_Orange_Pin STM_Red_Pin STM_Blue_Pin */
	GPIO_InitStruct.Pin = STM_Green_Pin | STM_Orange_Pin | STM_Red_Pin
 80072ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80072f0:	61fb      	str	r3, [r7, #28]
			| STM_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072f2:	2301      	movs	r3, #1
 80072f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072fa:	2300      	movs	r3, #0
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072fe:	f107 031c 	add.w	r3, r7, #28
 8007302:	4619      	mov	r1, r3
 8007304:	480a      	ldr	r0, [pc, #40]	; (8007330 <MX_GPIO_Init+0x1c4>)
 8007306:	f000 fc71 	bl	8007bec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800730a:	2200      	movs	r2, #0
 800730c:	2101      	movs	r1, #1
 800730e:	2006      	movs	r0, #6
 8007310:	f000 fc13 	bl	8007b3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007314:	2006      	movs	r0, #6
 8007316:	f000 fc2c 	bl	8007b72 <HAL_NVIC_EnableIRQ>

}
 800731a:	bf00      	nop
 800731c:	3730      	adds	r7, #48	; 0x30
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
 8007328:	40021000 	.word	0x40021000
 800732c:	40020800 	.word	0x40020800
 8007330:	40020c00 	.word	0x40020c00
 8007334:	10110000 	.word	0x10110000
 8007338:	40020000 	.word	0x40020000

0800733c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* SP Callback Definitions */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734c:	d107      	bne.n	800735e <HAL_TIM_PeriodElapsedCallback+0x22>
		RGB_SetMode(_led);
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fc fab6 	bl	80038c4 <RGB_SetMode>
		THS_ErrorClock();
 8007358:	f7fc feb4 	bl	80040c4 <THS_ErrorClock>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
		LCD_BackgroundOff();
		Update = true;
	}
}
 800735c:	e00d      	b.n	800737a <HAL_TIM_PeriodElapsedCallback+0x3e>
	} else if (htim->Instance == TIM3 && State == ST_Clock) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a09      	ldr	r2, [pc, #36]	; (8007388 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_TIM_PeriodElapsedCallback+0x3e>
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <HAL_TIM_PeriodElapsedCallback+0x3e>
		LCD_BackgroundOff();
 8007370:	f7fa f86c 	bl	800144c <LCD_BackgroundOff>
		Update = true;
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8007376:	2201      	movs	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	2000025e 	.word	0x2000025e
 8007388:	40000400 	.word	0x40000400
 800738c:	20003355 	.word	0x20003355
 8007390:	20000059 	.word	0x20000059

08007394 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d113      	bne.n	80073cc <HAL_GPIO_EXTI_Callback+0x38>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) /* Handle user button event */
 80073a4:	2101      	movs	r1, #1
 80073a6:	480b      	ldr	r0, [pc, #44]	; (80073d4 <HAL_GPIO_EXTI_Callback+0x40>)
 80073a8:	f000 fdba 	bl	8007f20 <HAL_GPIO_ReadPin>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10c      	bne.n	80073cc <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (++_led > 9) {
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d902      	bls.n	80073cc <HAL_GPIO_EXTI_Callback+0x38>
				_led = 0;
 80073c6:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_GPIO_EXTI_Callback+0x44>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40020000 	.word	0x40020000
 80073d8:	2000025e 	.word	0x2000025e

080073dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uart) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	NET_HandleUART_IT();
 80073e4:	f7fb ff20 	bl	8003228 <NET_HandleUART_IT>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <HAL_MspInit+0x4c>)
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <HAL_MspInit+0x4c>)
 8007410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007414:	6453      	str	r3, [r2, #68]	; 0x44
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <HAL_MspInit+0x4c>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <HAL_MspInit+0x4c>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a08      	ldr	r2, [pc, #32]	; (800744c <HAL_MspInit+0x4c>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b06      	ldr	r3, [pc, #24]	; (800744c <HAL_MspInit+0x4c>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40023800 	.word	0x40023800

08007450 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a05      	ldr	r2, [pc, #20]	; (8007474 <HAL_RTC_MspInit+0x24>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d102      	bne.n	8007468 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <HAL_RTC_MspInit+0x28>)
 8007464:	2201      	movs	r2, #1
 8007466:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40002800 	.word	0x40002800
 8007478:	42470e3c 	.word	0x42470e3c

0800747c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007484:	f107 0314 	add.w	r3, r7, #20
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a19      	ldr	r2, [pc, #100]	; (8007500 <HAL_SPI_MspInit+0x84>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d12b      	bne.n	80074f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074ac:	6453      	str	r3, [r2, #68]	; 0x44
 80074ae:	4b15      	ldr	r3, [pc, #84]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074b6:	613b      	str	r3, [r7, #16]
 80074b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	4a10      	ldr	r2, [pc, #64]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	6313      	str	r3, [r2, #48]	; 0x30
 80074ca:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <HAL_SPI_MspInit+0x88>)
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80074d6:	2338      	movs	r3, #56	; 0x38
 80074d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e2:	2303      	movs	r3, #3
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074e6:	2305      	movs	r3, #5
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ea:	f107 0314 	add.w	r3, r7, #20
 80074ee:	4619      	mov	r1, r3
 80074f0:	4805      	ldr	r0, [pc, #20]	; (8007508 <HAL_SPI_MspInit+0x8c>)
 80074f2:	f000 fb7b 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80074f6:	bf00      	nop
 80074f8:	3728      	adds	r7, #40	; 0x28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40013000 	.word	0x40013000
 8007504:	40023800 	.word	0x40023800
 8007508:	40020400 	.word	0x40020400

0800750c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d116      	bne.n	800754c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	4a23      	ldr	r2, [pc, #140]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	6413      	str	r3, [r2, #64]	; 0x40
 800752e:	4b21      	ldr	r3, [pc, #132]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800753a:	2200      	movs	r2, #0
 800753c:	2102      	movs	r1, #2
 800753e:	201c      	movs	r0, #28
 8007540:	f000 fafb 	bl	8007b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007544:	201c      	movs	r0, #28
 8007546:	f000 fb14 	bl	8007b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800754a:	e02e      	b.n	80075aa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <HAL_TIM_Base_MspInit+0xac>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d116      	bne.n	8007584 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	4b16      	ldr	r3, [pc, #88]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	6413      	str	r3, [r2, #64]	; 0x40
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8007572:	2200      	movs	r2, #0
 8007574:	2103      	movs	r1, #3
 8007576:	201d      	movs	r0, #29
 8007578:	f000 fadf 	bl	8007b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800757c:	201d      	movs	r0, #29
 800757e:	f000 faf8 	bl	8007b72 <HAL_NVIC_EnableIRQ>
}
 8007582:	e012      	b.n	80075aa <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a0c      	ldr	r2, [pc, #48]	; (80075bc <HAL_TIM_Base_MspInit+0xb0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10d      	bne.n	80075aa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	6413      	str	r3, [r2, #64]	; 0x40
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_TIM_Base_MspInit+0xa8>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023800 	.word	0x40023800
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800

080075c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075c8:	f107 030c 	add.w	r3, r7, #12
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d11d      	bne.n	800761e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <HAL_TIM_MspPostInit+0x68>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	4a0f      	ldr	r2, [pc, #60]	; (8007628 <HAL_TIM_MspPostInit+0x68>)
 80075ec:	f043 0301 	orr.w	r3, r3, #1
 80075f0:	6313      	str	r3, [r2, #48]	; 0x30
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <HAL_TIM_MspPostInit+0x68>)
 80075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = RGB_Green_Pin|RGB_Blue_Pin|RGB_Red_Pin;
 80075fe:	2326      	movs	r3, #38	; 0x26
 8007600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007602:	2302      	movs	r3, #2
 8007604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800760e:	2301      	movs	r3, #1
 8007610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	4619      	mov	r1, r3
 8007618:	4804      	ldr	r0, [pc, #16]	; (800762c <HAL_TIM_MspPostInit+0x6c>)
 800761a:	f000 fae7 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800761e:	bf00      	nop
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40023800 	.word	0x40023800
 800762c:	40020000 	.word	0x40020000

08007630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	605a      	str	r2, [r3, #4]
 8007642:	609a      	str	r2, [r3, #8]
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <HAL_UART_MspInit+0x94>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d134      	bne.n	80076bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <HAL_UART_MspInit+0x98>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <HAL_UART_MspInit+0x98>)
 800765c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007660:	6413      	str	r3, [r2, #64]	; 0x40
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <HAL_UART_MspInit+0x98>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <HAL_UART_MspInit+0x98>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <HAL_UART_MspInit+0x98>)
 8007678:	f043 0304 	orr.w	r3, r3, #4
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <HAL_UART_MspInit+0x98>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = HTTP_TX_Pin|HTTP_RX_Pin;
 800768a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800768e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007690:	2302      	movs	r3, #2
 8007692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007694:	2300      	movs	r3, #0
 8007696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007698:	2303      	movs	r3, #3
 800769a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800769c:	2307      	movs	r3, #7
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4619      	mov	r1, r3
 80076a6:	4809      	ldr	r0, [pc, #36]	; (80076cc <HAL_UART_MspInit+0x9c>)
 80076a8:	f000 faa0 	bl	8007bec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80076ac:	2200      	movs	r2, #0
 80076ae:	2101      	movs	r1, #1
 80076b0:	2027      	movs	r0, #39	; 0x27
 80076b2:	f000 fa42 	bl	8007b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80076b6:	2027      	movs	r0, #39	; 0x27
 80076b8:	f000 fa5b 	bl	8007b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80076bc:	bf00      	nop
 80076be:	3728      	adds	r7, #40	; 0x28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40004800 	.word	0x40004800
 80076c8:	40023800 	.word	0x40023800
 80076cc:	40020800 	.word	0x40020800

080076d0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80076de:	b480      	push	{r7}
 80076e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
		/* USER CODE BEGIN W1_HardFault_IRQn 0 */
		return;
 80076e2:	bf00      	nop
		/* USER CODE END W1_HardFault_IRQn 0 */
	}
}
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80076f0:	e7fe      	b.n	80076f0 <MemManage_Handler+0x4>

080076f2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80076f2:	b480      	push	{r7}
 80076f4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80076f6:	e7fe      	b.n	80076f6 <BusFault_Handler+0x4>

080076f8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80076fc:	e7fe      	b.n	80076fc <UsageFault_Handler+0x4>

080076fe <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80076fe:	b480      	push	{r7}
 8007700:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8007710:	bf00      	nop
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800771a:	b480      	push	{r7}
 800771c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800771e:	bf00      	nop
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 800772c:	f7fd fa2c 	bl	8004b88 <sdcard_systick_timerproc>
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8007730:	f000 f8e6 	bl	8007900 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8007734:	bf00      	nop
 8007736:	bd80      	pop	{r7, pc}

08007738 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800773c:	2001      	movs	r0, #1
 800773e:	f000 fc3b 	bl	8007fb8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800774c:	4802      	ldr	r0, [pc, #8]	; (8007758 <TIM2_IRQHandler+0x10>)
 800774e:	f002 f9dd 	bl	8009b0c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8007752:	bf00      	nop
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200033d0 	.word	0x200033d0

0800775c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8007760:	4802      	ldr	r0, [pc, #8]	; (800776c <TIM3_IRQHandler+0x10>)
 8007762:	f002 f9d3 	bl	8009b0c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8007766:	bf00      	nop
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20003314 	.word	0x20003314

08007770 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8007774:	4802      	ldr	r0, [pc, #8]	; (8007780 <USART3_IRQHandler+0x10>)
 8007776:	f003 fa51 	bl	800ac1c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800777a:	bf00      	nop
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	200032d4 	.word	0x200032d4

08007784 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800778c:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <_sbrk+0x50>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <_sbrk+0x16>
		heap_end = &end;
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <_sbrk+0x50>)
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <_sbrk+0x54>)
 8007798:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <_sbrk+0x50>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80077a0:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <_sbrk+0x50>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	466a      	mov	r2, sp
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d907      	bls.n	80077be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80077ae:	f004 f84f 	bl	800b850 <__errno>
 80077b2:	4602      	mov	r2, r0
 80077b4:	230c      	movs	r3, #12
 80077b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295
 80077bc:	e006      	b.n	80077cc <_sbrk+0x48>
	}

	heap_end += incr;
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <_sbrk+0x50>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	4a03      	ldr	r2, [pc, #12]	; (80077d4 <_sbrk+0x50>)
 80077c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80077ca:	68fb      	ldr	r3, [r7, #12]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000260 	.word	0x20000260
 80077d8:	20003418 	.word	0x20003418

080077dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <SystemInit+0x28>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	4a07      	ldr	r2, [pc, #28]	; (8007804 <SystemInit+0x28>)
 80077e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <SystemInit+0x28>)
 80077f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077f6:	609a      	str	r2, [r3, #8]
#endif
}
 80077f8:	bf00      	nop
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	e000ed00 	.word	0xe000ed00

08007808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800780c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800780e:	e003      	b.n	8007818 <LoopCopyDataInit>

08007810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007810:	4b0c      	ldr	r3, [pc, #48]	; (8007844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007816:	3104      	adds	r1, #4

08007818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007818:	480b      	ldr	r0, [pc, #44]	; (8007848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800781c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800781e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007820:	d3f6      	bcc.n	8007810 <CopyDataInit>
  ldr  r2, =_sbss
 8007822:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007824:	e002      	b.n	800782c <LoopFillZerobss>

08007826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007828:	f842 3b04 	str.w	r3, [r2], #4

0800782c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800782c:	4b09      	ldr	r3, [pc, #36]	; (8007854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800782e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007830:	d3f9      	bcc.n	8007826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007832:	f7ff ffd3 	bl	80077dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007836:	f004 f811 	bl	800b85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800783a:	f7ff f9d3 	bl	8006be4 <main>
  bx  lr    
 800783e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007844:	0800dfd8 	.word	0x0800dfd8
  ldr  r0, =_sdata
 8007848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800784c:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8007850:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8007854:	20003418 	.word	0x20003418

08007858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007858:	e7fe      	b.n	8007858 <ADC_IRQHandler>
	...

0800785c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007860:	4b0e      	ldr	r3, [pc, #56]	; (800789c <HAL_Init+0x40>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a0d      	ldr	r2, [pc, #52]	; (800789c <HAL_Init+0x40>)
 8007866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800786a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800786c:	4b0b      	ldr	r3, [pc, #44]	; (800789c <HAL_Init+0x40>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a0a      	ldr	r2, [pc, #40]	; (800789c <HAL_Init+0x40>)
 8007872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007878:	4b08      	ldr	r3, [pc, #32]	; (800789c <HAL_Init+0x40>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a07      	ldr	r2, [pc, #28]	; (800789c <HAL_Init+0x40>)
 800787e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007884:	2003      	movs	r0, #3
 8007886:	f000 f94d 	bl	8007b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800788a:	2000      	movs	r0, #0
 800788c:	f000 f808 	bl	80078a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007890:	f7ff fdb6 	bl	8007400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40023c00 	.word	0x40023c00

080078a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078a8:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_InitTick+0x54>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <HAL_InitTick+0x58>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	4619      	mov	r1, r3
 80078b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80078ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f965 	bl	8007b8e <HAL_SYSTICK_Config>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e00e      	b.n	80078ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b0f      	cmp	r3, #15
 80078d2:	d80a      	bhi.n	80078ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078d4:	2200      	movs	r2, #0
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	f000 f92d 	bl	8007b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078e0:	4a06      	ldr	r2, [pc, #24]	; (80078fc <HAL_InitTick+0x5c>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	2000005c 	.word	0x2000005c
 80078f8:	20000064 	.word	0x20000064
 80078fc:	20000060 	.word	0x20000060

08007900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <HAL_IncTick+0x20>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <HAL_IncTick+0x24>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4413      	add	r3, r2
 8007910:	4a04      	ldr	r2, [pc, #16]	; (8007924 <HAL_IncTick+0x24>)
 8007912:	6013      	str	r3, [r2, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000064 	.word	0x20000064
 8007924:	20003410 	.word	0x20003410

08007928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return uwTick;
 800792c:	4b03      	ldr	r3, [pc, #12]	; (800793c <HAL_GetTick+0x14>)
 800792e:	681b      	ldr	r3, [r3, #0]
}
 8007930:	4618      	mov	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20003410 	.word	0x20003410

08007940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007948:	f7ff ffee 	bl	8007928 <HAL_GetTick>
 800794c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d005      	beq.n	8007966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <HAL_Delay+0x40>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007966:	bf00      	nop
 8007968:	f7ff ffde 	bl	8007928 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	429a      	cmp	r2, r3
 8007976:	d8f7      	bhi.n	8007968 <HAL_Delay+0x28>
  {
  }
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000064 	.word	0x20000064

08007984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <__NVIC_SetPriorityGrouping+0x44>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079a0:	4013      	ands	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079b6:	4a04      	ldr	r2, [pc, #16]	; (80079c8 <__NVIC_SetPriorityGrouping+0x44>)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	60d3      	str	r3, [r2, #12]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <__NVIC_GetPriorityGrouping+0x18>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	0a1b      	lsrs	r3, r3, #8
 80079d6:	f003 0307 	and.w	r3, r3, #7
}
 80079da:	4618      	mov	r0, r3
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	db0b      	blt.n	8007a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	f003 021f 	and.w	r2, r3, #31
 8007a00:	4907      	ldr	r1, [pc, #28]	; (8007a20 <__NVIC_EnableIRQ+0x38>)
 8007a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a06:	095b      	lsrs	r3, r3, #5
 8007a08:	2001      	movs	r0, #1
 8007a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8007a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	e000e100 	.word	0xe000e100

08007a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	6039      	str	r1, [r7, #0]
 8007a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db0a      	blt.n	8007a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	490c      	ldr	r1, [pc, #48]	; (8007a70 <__NVIC_SetPriority+0x4c>)
 8007a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a42:	0112      	lsls	r2, r2, #4
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	440b      	add	r3, r1
 8007a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a4c:	e00a      	b.n	8007a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	4908      	ldr	r1, [pc, #32]	; (8007a74 <__NVIC_SetPriority+0x50>)
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	3b04      	subs	r3, #4
 8007a5c:	0112      	lsls	r2, r2, #4
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	440b      	add	r3, r1
 8007a62:	761a      	strb	r2, [r3, #24]
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	e000e100 	.word	0xe000e100
 8007a74:	e000ed00 	.word	0xe000ed00

08007a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b089      	sub	sp, #36	; 0x24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f1c3 0307 	rsb	r3, r3, #7
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	bf28      	it	cs
 8007a96:	2304      	movcs	r3, #4
 8007a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	2b06      	cmp	r3, #6
 8007aa0:	d902      	bls.n	8007aa8 <NVIC_EncodePriority+0x30>
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	3b03      	subs	r3, #3
 8007aa6:	e000      	b.n	8007aaa <NVIC_EncodePriority+0x32>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aac:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43da      	mvns	r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	401a      	ands	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	43d9      	mvns	r1, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad0:	4313      	orrs	r3, r2
         );
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3724      	adds	r7, #36	; 0x24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af0:	d301      	bcc.n	8007af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007af2:	2301      	movs	r3, #1
 8007af4:	e00f      	b.n	8007b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <SysTick_Config+0x40>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007afe:	210f      	movs	r1, #15
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	f7ff ff8e 	bl	8007a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <SysTick_Config+0x40>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b0e:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <SysTick_Config+0x40>)
 8007b10:	2207      	movs	r2, #7
 8007b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	e000e010 	.word	0xe000e010

08007b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff29 	bl	8007984 <__NVIC_SetPriorityGrouping>
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b086      	sub	sp, #24
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	4603      	mov	r3, r0
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b4c:	f7ff ff3e 	bl	80079cc <__NVIC_GetPriorityGrouping>
 8007b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	68b9      	ldr	r1, [r7, #8]
 8007b56:	6978      	ldr	r0, [r7, #20]
 8007b58:	f7ff ff8e 	bl	8007a78 <NVIC_EncodePriority>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b62:	4611      	mov	r1, r2
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7ff ff5d 	bl	8007a24 <__NVIC_SetPriority>
}
 8007b6a:	bf00      	nop
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	4603      	mov	r3, r0
 8007b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff ff31 	bl	80079e8 <__NVIC_EnableIRQ>
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff ffa2 	bl	8007ae0 <SysTick_Config>
 8007b9c:	4603      	mov	r3, r0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2280      	movs	r2, #128	; 0x80
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e00c      	b.n	8007bde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b089      	sub	sp, #36	; 0x24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	e16b      	b.n	8007ee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c08:	2201      	movs	r2, #1
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	f040 815a 	bne.w	8007eda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d00b      	beq.n	8007c46 <HAL_GPIO_Init+0x5a>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d007      	beq.n	8007c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c3a:	2b11      	cmp	r3, #17
 8007c3c:	d003      	beq.n	8007c46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b12      	cmp	r3, #18
 8007c44:	d130      	bne.n	8007ca8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	2203      	movs	r2, #3
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	43db      	mvns	r3, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	f003 0201 	and.w	r2, r3, #1
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69ba      	ldr	r2, [r7, #24]
 8007ca6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d003      	beq.n	8007ce8 <HAL_GPIO_Init+0xfc>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b12      	cmp	r3, #18
 8007ce6:	d123      	bne.n	8007d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	08da      	lsrs	r2, r3, #3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3208      	adds	r2, #8
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	220f      	movs	r2, #15
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	08da      	lsrs	r2, r3, #3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3208      	adds	r2, #8
 8007d2a:	69b9      	ldr	r1, [r7, #24]
 8007d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	43db      	mvns	r3, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4013      	ands	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 0203 	and.w	r2, r3, #3
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80b4 	beq.w	8007eda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	4b5f      	ldr	r3, [pc, #380]	; (8007ef4 <HAL_GPIO_Init+0x308>)
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	4a5e      	ldr	r2, [pc, #376]	; (8007ef4 <HAL_GPIO_Init+0x308>)
 8007d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d80:	6453      	str	r3, [r2, #68]	; 0x44
 8007d82:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <HAL_GPIO_Init+0x308>)
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d8e:	4a5a      	ldr	r2, [pc, #360]	; (8007ef8 <HAL_GPIO_Init+0x30c>)
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	089b      	lsrs	r3, r3, #2
 8007d94:	3302      	adds	r3, #2
 8007d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	220f      	movs	r2, #15
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	43db      	mvns	r3, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	4013      	ands	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a51      	ldr	r2, [pc, #324]	; (8007efc <HAL_GPIO_Init+0x310>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d02b      	beq.n	8007e12 <HAL_GPIO_Init+0x226>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a50      	ldr	r2, [pc, #320]	; (8007f00 <HAL_GPIO_Init+0x314>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d025      	beq.n	8007e0e <HAL_GPIO_Init+0x222>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a4f      	ldr	r2, [pc, #316]	; (8007f04 <HAL_GPIO_Init+0x318>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01f      	beq.n	8007e0a <HAL_GPIO_Init+0x21e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a4e      	ldr	r2, [pc, #312]	; (8007f08 <HAL_GPIO_Init+0x31c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d019      	beq.n	8007e06 <HAL_GPIO_Init+0x21a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a4d      	ldr	r2, [pc, #308]	; (8007f0c <HAL_GPIO_Init+0x320>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <HAL_GPIO_Init+0x216>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a4c      	ldr	r2, [pc, #304]	; (8007f10 <HAL_GPIO_Init+0x324>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00d      	beq.n	8007dfe <HAL_GPIO_Init+0x212>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a4b      	ldr	r2, [pc, #300]	; (8007f14 <HAL_GPIO_Init+0x328>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <HAL_GPIO_Init+0x20e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a4a      	ldr	r2, [pc, #296]	; (8007f18 <HAL_GPIO_Init+0x32c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d101      	bne.n	8007df6 <HAL_GPIO_Init+0x20a>
 8007df2:	2307      	movs	r3, #7
 8007df4:	e00e      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007df6:	2308      	movs	r3, #8
 8007df8:	e00c      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007dfa:	2306      	movs	r3, #6
 8007dfc:	e00a      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007dfe:	2305      	movs	r3, #5
 8007e00:	e008      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007e02:	2304      	movs	r3, #4
 8007e04:	e006      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007e06:	2303      	movs	r3, #3
 8007e08:	e004      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e002      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <HAL_GPIO_Init+0x228>
 8007e12:	2300      	movs	r3, #0
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	f002 0203 	and.w	r2, r2, #3
 8007e1a:	0092      	lsls	r2, r2, #2
 8007e1c:	4093      	lsls	r3, r2
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e24:	4934      	ldr	r1, [pc, #208]	; (8007ef8 <HAL_GPIO_Init+0x30c>)
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	089b      	lsrs	r3, r3, #2
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e32:	4b3a      	ldr	r3, [pc, #232]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e56:	4a31      	ldr	r2, [pc, #196]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e5c:	4b2f      	ldr	r3, [pc, #188]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e80:	4a26      	ldr	r2, [pc, #152]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e86:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007eaa:	4a1c      	ldr	r2, [pc, #112]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ed4:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <HAL_GPIO_Init+0x330>)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	3301      	adds	r3, #1
 8007ede:	61fb      	str	r3, [r7, #28]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b0f      	cmp	r3, #15
 8007ee4:	f67f ae90 	bls.w	8007c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3724      	adds	r7, #36	; 0x24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	40013800 	.word	0x40013800
 8007efc:	40020000 	.word	0x40020000
 8007f00:	40020400 	.word	0x40020400
 8007f04:	40020800 	.word	0x40020800
 8007f08:	40020c00 	.word	0x40020c00
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	40021400 	.word	0x40021400
 8007f14:	40021800 	.word	0x40021800
 8007f18:	40021c00 	.word	0x40021c00
 8007f1c:	40013c00 	.word	0x40013c00

08007f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	887b      	ldrh	r3, [r7, #2]
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
 8007f3c:	e001      	b.n	8007f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f60:	787b      	ldrb	r3, [r7, #1]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f6c:	e003      	b.n	8007f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	041a      	lsls	r2, r3, #16
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	619a      	str	r2, [r3, #24]
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695a      	ldr	r2, [r3, #20]
 8007f92:	887b      	ldrh	r3, [r7, #2]
 8007f94:	401a      	ands	r2, r3
 8007f96:	887b      	ldrh	r3, [r7, #2]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d104      	bne.n	8007fa6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f9c:	887b      	ldrh	r3, [r7, #2]
 8007f9e:	041a      	lsls	r2, r3, #16
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8007fa4:	e002      	b.n	8007fac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	619a      	str	r2, [r3, #24]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fc4:	695a      	ldr	r2, [r3, #20]
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fce:	4a05      	ldr	r2, [pc, #20]	; (8007fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fd4:	88fb      	ldrh	r3, [r7, #6]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff f9dc 	bl	8007394 <HAL_GPIO_EXTI_Callback>
  }
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40013c00 	.word	0x40013c00

08007fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e25b      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d075      	beq.n	80080f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008006:	4ba3      	ldr	r3, [pc, #652]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 030c 	and.w	r3, r3, #12
 800800e:	2b04      	cmp	r3, #4
 8008010:	d00c      	beq.n	800802c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008012:	4ba0      	ldr	r3, [pc, #640]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800801a:	2b08      	cmp	r3, #8
 800801c:	d112      	bne.n	8008044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800801e:	4b9d      	ldr	r3, [pc, #628]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800802a:	d10b      	bne.n	8008044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800802c:	4b99      	ldr	r3, [pc, #612]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05b      	beq.n	80080f0 <HAL_RCC_OscConfig+0x108>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d157      	bne.n	80080f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e236      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800804c:	d106      	bne.n	800805c <HAL_RCC_OscConfig+0x74>
 800804e:	4b91      	ldr	r3, [pc, #580]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a90      	ldr	r2, [pc, #576]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e01d      	b.n	8008098 <HAL_RCC_OscConfig+0xb0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008064:	d10c      	bne.n	8008080 <HAL_RCC_OscConfig+0x98>
 8008066:	4b8b      	ldr	r3, [pc, #556]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a8a      	ldr	r2, [pc, #552]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800806c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	4b88      	ldr	r3, [pc, #544]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a87      	ldr	r2, [pc, #540]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e00b      	b.n	8008098 <HAL_RCC_OscConfig+0xb0>
 8008080:	4b84      	ldr	r3, [pc, #528]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a83      	ldr	r2, [pc, #524]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	4b81      	ldr	r3, [pc, #516]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a80      	ldr	r2, [pc, #512]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d013      	beq.n	80080c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a0:	f7ff fc42 	bl	8007928 <HAL_GetTick>
 80080a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080a8:	f7ff fc3e 	bl	8007928 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	; 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e1fb      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ba:	4b76      	ldr	r3, [pc, #472]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0f0      	beq.n	80080a8 <HAL_RCC_OscConfig+0xc0>
 80080c6:	e014      	b.n	80080f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c8:	f7ff fc2e 	bl	8007928 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080d0:	f7ff fc2a 	bl	8007928 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b64      	cmp	r3, #100	; 0x64
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e1e7      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080e2:	4b6c      	ldr	r3, [pc, #432]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0xe8>
 80080ee:	e000      	b.n	80080f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d063      	beq.n	80081c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080fe:	4b65      	ldr	r3, [pc, #404]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 030c 	and.w	r3, r3, #12
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00b      	beq.n	8008122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800810a:	4b62      	ldr	r3, [pc, #392]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008112:	2b08      	cmp	r3, #8
 8008114:	d11c      	bne.n	8008150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008116:	4b5f      	ldr	r3, [pc, #380]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d116      	bne.n	8008150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008122:	4b5c      	ldr	r3, [pc, #368]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <HAL_RCC_OscConfig+0x152>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d001      	beq.n	800813a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e1bb      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800813a:	4b56      	ldr	r3, [pc, #344]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4952      	ldr	r1, [pc, #328]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800814a:	4313      	orrs	r3, r2
 800814c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800814e:	e03a      	b.n	80081c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d020      	beq.n	800819a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008158:	4b4f      	ldr	r3, [pc, #316]	; (8008298 <HAL_RCC_OscConfig+0x2b0>)
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815e:	f7ff fbe3 	bl	8007928 <HAL_GetTick>
 8008162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008164:	e008      	b.n	8008178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008166:	f7ff fbdf 	bl	8007928 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d901      	bls.n	8008178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e19c      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008178:	4b46      	ldr	r3, [pc, #280]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0f0      	beq.n	8008166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008184:	4b43      	ldr	r3, [pc, #268]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4940      	ldr	r1, [pc, #256]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008194:	4313      	orrs	r3, r2
 8008196:	600b      	str	r3, [r1, #0]
 8008198:	e015      	b.n	80081c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800819a:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <HAL_RCC_OscConfig+0x2b0>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7ff fbc2 	bl	8007928 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a8:	f7ff fbbe 	bl	8007928 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e17b      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ba:	4b36      	ldr	r3, [pc, #216]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d030      	beq.n	8008234 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d016      	beq.n	8008208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081da:	4b30      	ldr	r3, [pc, #192]	; (800829c <HAL_RCC_OscConfig+0x2b4>)
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e0:	f7ff fba2 	bl	8007928 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081e8:	f7ff fb9e 	bl	8007928 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e15b      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081fa:	4b26      	ldr	r3, [pc, #152]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 80081fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0x200>
 8008206:	e015      	b.n	8008234 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008208:	4b24      	ldr	r3, [pc, #144]	; (800829c <HAL_RCC_OscConfig+0x2b4>)
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800820e:	f7ff fb8b 	bl	8007928 <HAL_GetTick>
 8008212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008214:	e008      	b.n	8008228 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008216:	f7ff fb87 	bl	8007928 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e144      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800822a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a0 	beq.w	8008382 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10f      	bne.n	8008272 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008252:	2300      	movs	r3, #0
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	4a0e      	ldr	r2, [pc, #56]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 800825c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008260:	6413      	str	r3, [r2, #64]	; 0x40
 8008262:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <HAL_RCC_OscConfig+0x2ac>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826a:	60bb      	str	r3, [r7, #8]
 800826c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800826e:	2301      	movs	r3, #1
 8008270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008272:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <HAL_RCC_OscConfig+0x2b8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827a:	2b00      	cmp	r3, #0
 800827c:	d121      	bne.n	80082c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800827e:	4b08      	ldr	r3, [pc, #32]	; (80082a0 <HAL_RCC_OscConfig+0x2b8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a07      	ldr	r2, [pc, #28]	; (80082a0 <HAL_RCC_OscConfig+0x2b8>)
 8008284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800828a:	f7ff fb4d 	bl	8007928 <HAL_GetTick>
 800828e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008290:	e011      	b.n	80082b6 <HAL_RCC_OscConfig+0x2ce>
 8008292:	bf00      	nop
 8008294:	40023800 	.word	0x40023800
 8008298:	42470000 	.word	0x42470000
 800829c:	42470e80 	.word	0x42470e80
 80082a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a4:	f7ff fb40 	bl	8007928 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0fd      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b6:	4b81      	ldr	r3, [pc, #516]	; (80084bc <HAL_RCC_OscConfig+0x4d4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d106      	bne.n	80082d8 <HAL_RCC_OscConfig+0x2f0>
 80082ca:	4b7d      	ldr	r3, [pc, #500]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ce:	4a7c      	ldr	r2, [pc, #496]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082d0:	f043 0301 	orr.w	r3, r3, #1
 80082d4:	6713      	str	r3, [r2, #112]	; 0x70
 80082d6:	e01c      	b.n	8008312 <HAL_RCC_OscConfig+0x32a>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b05      	cmp	r3, #5
 80082de:	d10c      	bne.n	80082fa <HAL_RCC_OscConfig+0x312>
 80082e0:	4b77      	ldr	r3, [pc, #476]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	4a76      	ldr	r2, [pc, #472]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082e6:	f043 0304 	orr.w	r3, r3, #4
 80082ea:	6713      	str	r3, [r2, #112]	; 0x70
 80082ec:	4b74      	ldr	r3, [pc, #464]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f0:	4a73      	ldr	r2, [pc, #460]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082f2:	f043 0301 	orr.w	r3, r3, #1
 80082f6:	6713      	str	r3, [r2, #112]	; 0x70
 80082f8:	e00b      	b.n	8008312 <HAL_RCC_OscConfig+0x32a>
 80082fa:	4b71      	ldr	r3, [pc, #452]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80082fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fe:	4a70      	ldr	r2, [pc, #448]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	6713      	str	r3, [r2, #112]	; 0x70
 8008306:	4b6e      	ldr	r3, [pc, #440]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830a:	4a6d      	ldr	r2, [pc, #436]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 800830c:	f023 0304 	bic.w	r3, r3, #4
 8008310:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d015      	beq.n	8008346 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800831a:	f7ff fb05 	bl	8007928 <HAL_GetTick>
 800831e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008320:	e00a      	b.n	8008338 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008322:	f7ff fb01 	bl	8007928 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008330:	4293      	cmp	r3, r2
 8008332:	d901      	bls.n	8008338 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e0bc      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008338:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0ee      	beq.n	8008322 <HAL_RCC_OscConfig+0x33a>
 8008344:	e014      	b.n	8008370 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008346:	f7ff faef 	bl	8007928 <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800834c:	e00a      	b.n	8008364 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800834e:	f7ff faeb 	bl	8007928 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	f241 3288 	movw	r2, #5000	; 0x1388
 800835c:	4293      	cmp	r3, r2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e0a6      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008364:	4b56      	ldr	r3, [pc, #344]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008368:	f003 0302 	and.w	r3, r3, #2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ee      	bne.n	800834e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d105      	bne.n	8008382 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008376:	4b52      	ldr	r3, [pc, #328]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	4a51      	ldr	r2, [pc, #324]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 800837c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008380:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 8092 	beq.w	80084b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800838c:	4b4c      	ldr	r3, [pc, #304]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 030c 	and.w	r3, r3, #12
 8008394:	2b08      	cmp	r3, #8
 8008396:	d05c      	beq.n	8008452 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d141      	bne.n	8008424 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a0:	4b48      	ldr	r3, [pc, #288]	; (80084c4 <HAL_RCC_OscConfig+0x4dc>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083a6:	f7ff fabf 	bl	8007928 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ae:	f7ff fabb 	bl	8007928 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e078      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c0:	4b3f      	ldr	r3, [pc, #252]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1f0      	bne.n	80083ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	019b      	lsls	r3, r3, #6
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	085b      	lsrs	r3, r3, #1
 80083e4:	3b01      	subs	r3, #1
 80083e6:	041b      	lsls	r3, r3, #16
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	061b      	lsls	r3, r3, #24
 80083f0:	4933      	ldr	r1, [pc, #204]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083f6:	4b33      	ldr	r3, [pc, #204]	; (80084c4 <HAL_RCC_OscConfig+0x4dc>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083fc:	f7ff fa94 	bl	8007928 <HAL_GetTick>
 8008400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008404:	f7ff fa90 	bl	8007928 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e04d      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008416:	4b2a      	ldr	r3, [pc, #168]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <HAL_RCC_OscConfig+0x41c>
 8008422:	e045      	b.n	80084b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008424:	4b27      	ldr	r3, [pc, #156]	; (80084c4 <HAL_RCC_OscConfig+0x4dc>)
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842a:	f7ff fa7d 	bl	8007928 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008432:	f7ff fa79 	bl	8007928 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e036      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008444:	4b1e      	ldr	r3, [pc, #120]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f0      	bne.n	8008432 <HAL_RCC_OscConfig+0x44a>
 8008450:	e02e      	b.n	80084b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e029      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800845e:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <HAL_RCC_OscConfig+0x4d8>)
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	429a      	cmp	r2, r3
 8008470:	d11c      	bne.n	80084ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847c:	429a      	cmp	r2, r3
 800847e:	d115      	bne.n	80084ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008486:	4013      	ands	r3, r2
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800848c:	4293      	cmp	r3, r2
 800848e:	d10d      	bne.n	80084ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800849a:	429a      	cmp	r2, r3
 800849c:	d106      	bne.n	80084ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d001      	beq.n	80084b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40007000 	.word	0x40007000
 80084c0:	40023800 	.word	0x40023800
 80084c4:	42470060 	.word	0x42470060

080084c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e0cc      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084dc:	4b68      	ldr	r3, [pc, #416]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d90c      	bls.n	8008504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ea:	4b65      	ldr	r3, [pc, #404]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f2:	4b63      	ldr	r3, [pc, #396]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d001      	beq.n	8008504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e0b8      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d020      	beq.n	8008552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800851c:	4b59      	ldr	r3, [pc, #356]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4a58      	ldr	r2, [pc, #352]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008534:	4b53      	ldr	r3, [pc, #332]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	4a52      	ldr	r2, [pc, #328]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800853e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008540:	4b50      	ldr	r3, [pc, #320]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	494d      	ldr	r1, [pc, #308]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	4313      	orrs	r3, r2
 8008550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d044      	beq.n	80085e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008566:	4b47      	ldr	r3, [pc, #284]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d119      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e07f      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d003      	beq.n	8008586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008582:	2b03      	cmp	r3, #3
 8008584:	d107      	bne.n	8008596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008586:	4b3f      	ldr	r3, [pc, #252]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e06f      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008596:	4b3b      	ldr	r3, [pc, #236]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e067      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085a6:	4b37      	ldr	r3, [pc, #220]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	4934      	ldr	r1, [pc, #208]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085b8:	f7ff f9b6 	bl	8007928 <HAL_GetTick>
 80085bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085be:	e00a      	b.n	80085d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c0:	f7ff f9b2 	bl	8007928 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e04f      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d6:	4b2b      	ldr	r3, [pc, #172]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 020c 	and.w	r2, r3, #12
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d1eb      	bne.n	80085c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d20c      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f6:	4b22      	ldr	r3, [pc, #136]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fe:	4b20      	ldr	r3, [pc, #128]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d001      	beq.n	8008610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e032      	b.n	8008676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800861c:	4b19      	ldr	r3, [pc, #100]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4916      	ldr	r1, [pc, #88]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	4313      	orrs	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	490e      	ldr	r1, [pc, #56]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800864e:	f000 f821 	bl	8008694 <HAL_RCC_GetSysClockFreq>
 8008652:	4601      	mov	r1, r0
 8008654:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	4a0a      	ldr	r2, [pc, #40]	; (8008688 <HAL_RCC_ClockConfig+0x1c0>)
 8008660:	5cd3      	ldrb	r3, [r2, r3]
 8008662:	fa21 f303 	lsr.w	r3, r1, r3
 8008666:	4a09      	ldr	r2, [pc, #36]	; (800868c <HAL_RCC_ClockConfig+0x1c4>)
 8008668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <HAL_RCC_ClockConfig+0x1c8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff f916 	bl	80078a0 <HAL_InitTick>

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40023c00 	.word	0x40023c00
 8008684:	40023800 	.word	0x40023800
 8008688:	0800dd54 	.word	0x0800dd54
 800868c:	2000005c 	.word	0x2000005c
 8008690:	20000060 	.word	0x20000060

08008694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	2300      	movs	r3, #0
 80086a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086aa:	4b63      	ldr	r3, [pc, #396]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d007      	beq.n	80086c6 <HAL_RCC_GetSysClockFreq+0x32>
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d008      	beq.n	80086cc <HAL_RCC_GetSysClockFreq+0x38>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 80b4 	bne.w	8008828 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086c0:	4b5e      	ldr	r3, [pc, #376]	; (800883c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80086c2:	60bb      	str	r3, [r7, #8]
       break;
 80086c4:	e0b3      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086c6:	4b5e      	ldr	r3, [pc, #376]	; (8008840 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80086c8:	60bb      	str	r3, [r7, #8]
      break;
 80086ca:	e0b0      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086cc:	4b5a      	ldr	r3, [pc, #360]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086d6:	4b58      	ldr	r3, [pc, #352]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d04a      	beq.n	8008778 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086e2:	4b55      	ldr	r3, [pc, #340]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	099b      	lsrs	r3, r3, #6
 80086e8:	f04f 0400 	mov.w	r4, #0
 80086ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	ea03 0501 	and.w	r5, r3, r1
 80086f8:	ea04 0602 	and.w	r6, r4, r2
 80086fc:	4629      	mov	r1, r5
 80086fe:	4632      	mov	r2, r6
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	f04f 0400 	mov.w	r4, #0
 8008708:	0154      	lsls	r4, r2, #5
 800870a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800870e:	014b      	lsls	r3, r1, #5
 8008710:	4619      	mov	r1, r3
 8008712:	4622      	mov	r2, r4
 8008714:	1b49      	subs	r1, r1, r5
 8008716:	eb62 0206 	sbc.w	r2, r2, r6
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	f04f 0400 	mov.w	r4, #0
 8008722:	0194      	lsls	r4, r2, #6
 8008724:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008728:	018b      	lsls	r3, r1, #6
 800872a:	1a5b      	subs	r3, r3, r1
 800872c:	eb64 0402 	sbc.w	r4, r4, r2
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	00e2      	lsls	r2, r4, #3
 800873a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800873e:	00d9      	lsls	r1, r3, #3
 8008740:	460b      	mov	r3, r1
 8008742:	4614      	mov	r4, r2
 8008744:	195b      	adds	r3, r3, r5
 8008746:	eb44 0406 	adc.w	r4, r4, r6
 800874a:	f04f 0100 	mov.w	r1, #0
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	0262      	lsls	r2, r4, #9
 8008754:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008758:	0259      	lsls	r1, r3, #9
 800875a:	460b      	mov	r3, r1
 800875c:	4614      	mov	r4, r2
 800875e:	4618      	mov	r0, r3
 8008760:	4621      	mov	r1, r4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f04f 0400 	mov.w	r4, #0
 8008768:	461a      	mov	r2, r3
 800876a:	4623      	mov	r3, r4
 800876c:	f7f8 fa2c 	bl	8000bc8 <__aeabi_uldivmod>
 8008770:	4603      	mov	r3, r0
 8008772:	460c      	mov	r4, r1
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	e049      	b.n	800880c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008778:	4b2f      	ldr	r3, [pc, #188]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	099b      	lsrs	r3, r3, #6
 800877e:	f04f 0400 	mov.w	r4, #0
 8008782:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	ea03 0501 	and.w	r5, r3, r1
 800878e:	ea04 0602 	and.w	r6, r4, r2
 8008792:	4629      	mov	r1, r5
 8008794:	4632      	mov	r2, r6
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f04f 0400 	mov.w	r4, #0
 800879e:	0154      	lsls	r4, r2, #5
 80087a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80087a4:	014b      	lsls	r3, r1, #5
 80087a6:	4619      	mov	r1, r3
 80087a8:	4622      	mov	r2, r4
 80087aa:	1b49      	subs	r1, r1, r5
 80087ac:	eb62 0206 	sbc.w	r2, r2, r6
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	f04f 0400 	mov.w	r4, #0
 80087b8:	0194      	lsls	r4, r2, #6
 80087ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80087be:	018b      	lsls	r3, r1, #6
 80087c0:	1a5b      	subs	r3, r3, r1
 80087c2:	eb64 0402 	sbc.w	r4, r4, r2
 80087c6:	f04f 0100 	mov.w	r1, #0
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	00e2      	lsls	r2, r4, #3
 80087d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80087d4:	00d9      	lsls	r1, r3, #3
 80087d6:	460b      	mov	r3, r1
 80087d8:	4614      	mov	r4, r2
 80087da:	195b      	adds	r3, r3, r5
 80087dc:	eb44 0406 	adc.w	r4, r4, r6
 80087e0:	f04f 0100 	mov.w	r1, #0
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	02a2      	lsls	r2, r4, #10
 80087ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80087ee:	0299      	lsls	r1, r3, #10
 80087f0:	460b      	mov	r3, r1
 80087f2:	4614      	mov	r4, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	4621      	mov	r1, r4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f04f 0400 	mov.w	r4, #0
 80087fe:	461a      	mov	r2, r3
 8008800:	4623      	mov	r3, r4
 8008802:	f7f8 f9e1 	bl	8000bc8 <__aeabi_uldivmod>
 8008806:	4603      	mov	r3, r0
 8008808:	460c      	mov	r4, r1
 800880a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800880c:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	0c1b      	lsrs	r3, r3, #16
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	3301      	adds	r3, #1
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	60bb      	str	r3, [r7, #8]
      break;
 8008826:	e002      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800882a:	60bb      	str	r3, [r7, #8]
      break;
 800882c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800882e:	68bb      	ldr	r3, [r7, #8]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008838:	40023800 	.word	0x40023800
 800883c:	00f42400 	.word	0x00f42400
 8008840:	007a1200 	.word	0x007a1200

08008844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008848:	4b03      	ldr	r3, [pc, #12]	; (8008858 <HAL_RCC_GetHCLKFreq+0x14>)
 800884a:	681b      	ldr	r3, [r3, #0]
}
 800884c:	4618      	mov	r0, r3
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	2000005c 	.word	0x2000005c

0800885c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008860:	f7ff fff0 	bl	8008844 <HAL_RCC_GetHCLKFreq>
 8008864:	4601      	mov	r1, r0
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	0a9b      	lsrs	r3, r3, #10
 800886c:	f003 0307 	and.w	r3, r3, #7
 8008870:	4a03      	ldr	r2, [pc, #12]	; (8008880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008872:	5cd3      	ldrb	r3, [r2, r3]
 8008874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008878:	4618      	mov	r0, r3
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40023800 	.word	0x40023800
 8008880:	0800dd64 	.word	0x0800dd64

08008884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008888:	f7ff ffdc 	bl	8008844 <HAL_RCC_GetHCLKFreq>
 800888c:	4601      	mov	r1, r0
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	0b5b      	lsrs	r3, r3, #13
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4a03      	ldr	r2, [pc, #12]	; (80088a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800889a:	5cd3      	ldrb	r3, [r2, r3]
 800889c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40023800 	.word	0x40023800
 80088a8:	0800dd64 	.word	0x0800dd64

080088ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d105      	bne.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d035      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088d4:	4b62      	ldr	r3, [pc, #392]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088da:	f7ff f825 	bl	8007928 <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088e0:	e008      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088e2:	f7ff f821 	bl	8007928 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e0b0      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088f4:	4b5b      	ldr	r3, [pc, #364]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f0      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	019a      	lsls	r2, r3, #6
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	071b      	lsls	r3, r3, #28
 800890c:	4955      	ldr	r1, [pc, #340]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008914:	4b52      	ldr	r3, [pc, #328]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008916:	2201      	movs	r2, #1
 8008918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800891a:	f7ff f805 	bl	8007928 <HAL_GetTick>
 800891e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008920:	e008      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008922:	f7ff f801 	bl	8007928 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	2b02      	cmp	r3, #2
 800892e:	d901      	bls.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e090      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008934:	4b4b      	ldr	r3, [pc, #300]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0f0      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 8083 	beq.w	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4b44      	ldr	r3, [pc, #272]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	4a43      	ldr	r2, [pc, #268]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800895c:	6413      	str	r3, [r2, #64]	; 0x40
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800896a:	4b3f      	ldr	r3, [pc, #252]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a3e      	ldr	r2, [pc, #248]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008974:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008976:	f7fe ffd7 	bl	8007928 <HAL_GetTick>
 800897a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800897c:	e008      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800897e:	f7fe ffd3 	bl	8007928 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e062      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008990:	4b35      	ldr	r3, [pc, #212]	; (8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0f0      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800899c:	4b31      	ldr	r3, [pc, #196]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800899e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02f      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d028      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089ba:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089c4:	4b29      	ldr	r3, [pc, #164]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089ca:	4b28      	ldr	r3, [pc, #160]	; (8008a6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80089d0:	4a24      	ldr	r2, [pc, #144]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089d6:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d114      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089e2:	f7fe ffa1 	bl	8007928 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089e8:	e00a      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ea:	f7fe ff9d 	bl	8007928 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e02a      	b.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a00:	4b18      	ldr	r3, [pc, #96]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0ee      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a18:	d10d      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008a1a:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a2e:	490d      	ldr	r1, [pc, #52]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	608b      	str	r3, [r1, #8]
 8008a34:	e005      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008a40:	6093      	str	r3, [r2, #8]
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a4e:	4905      	ldr	r1, [pc, #20]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	42470068 	.word	0x42470068
 8008a64:	40023800 	.word	0x40023800
 8008a68:	40007000 	.word	0x40007000
 8008a6c:	42470e40 	.word	0x42470e40

08008a70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e083      	b.n	8008b8a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7f5b      	ldrb	r3, [r3, #29]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d105      	bne.n	8008a98 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fe fcdc 	bl	8007450 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	22ca      	movs	r2, #202	; 0xca
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2253      	movs	r2, #83	; 0x53
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 faa8 	bl	8009004 <RTC_EnterInitMode>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	22ff      	movs	r2, #255	; 0xff
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e05e      	b.n	8008b8a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6899      	ldr	r1, [r3, #8]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68d2      	ldr	r2, [r2, #12]
 8008b06:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6919      	ldr	r1, [r3, #16]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	041a      	lsls	r2, r3, #16
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10e      	bne.n	8008b58 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fa3a 	bl	8008fb4 <HAL_RTC_WaitForSynchro>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	22ff      	movs	r2, #255	; 0xff
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2204      	movs	r2, #4
 8008b52:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e018      	b.n	8008b8a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	22ff      	movs	r2, #255	; 0xff
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
  }
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b92:	b590      	push	{r4, r7, lr}
 8008b94:	b087      	sub	sp, #28
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	7f1b      	ldrb	r3, [r3, #28]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_RTC_SetTime+0x1c>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e0aa      	b.n	8008d04 <HAL_RTC_SetTime+0x172>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d126      	bne.n	8008c0e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fa3f 	bl	800905c <RTC_ByteToBcd2>
 8008bde:	4603      	mov	r3, r0
 8008be0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fa38 	bl	800905c <RTC_ByteToBcd2>
 8008bec:	4603      	mov	r3, r0
 8008bee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008bf0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	789b      	ldrb	r3, [r3, #2]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fa30 	bl	800905c <RTC_ByteToBcd2>
 8008bfc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008bfe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	78db      	ldrb	r3, [r3, #3]
 8008c06:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e018      	b.n	8008c40 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c2e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008c34:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	78db      	ldrb	r3, [r3, #3]
 8008c3a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	22ca      	movs	r2, #202	; 0xca
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2253      	movs	r2, #83	; 0x53
 8008c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f9d7 	bl	8009004 <RTC_EnterInitMode>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	22ff      	movs	r2, #255	; 0xff
 8008c62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2204      	movs	r2, #4
 8008c68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e047      	b.n	8008d04 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008c7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008c82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689a      	ldr	r2, [r3, #8]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6899      	ldr	r1, [r3, #8]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d111      	bne.n	8008cee <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f972 	bl	8008fb4 <HAL_RTC_WaitForSynchro>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	22ff      	movs	r2, #255	; 0xff
 8008cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e00a      	b.n	8008d04 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	22ff      	movs	r2, #255	; 0xff
 8008cf4:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008d02:	2300      	movs	r3, #0
  }
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd90      	pop	{r4, r7, pc}

08008d0c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008d3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	0c1b      	lsrs	r3, r3, #16
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d11a      	bne.n	8008dbe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f983 	bl	8009098 <RTC_Bcd2ToByte>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 f97a 	bl	8009098 <RTC_Bcd2ToByte>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	789b      	ldrb	r3, [r3, #2]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f971 	bl	8009098 <RTC_Bcd2ToByte>
 8008db6:	4603      	mov	r3, r0
 8008db8:	461a      	mov	r2, r3
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	7f1b      	ldrb	r3, [r3, #28]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_RTC_SetDate+0x1c>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e094      	b.n	8008f0e <HAL_RTC_SetDate+0x146>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2202      	movs	r2, #2
 8008dee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10e      	bne.n	8008e14 <HAL_RTC_SetDate+0x4c>
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	785b      	ldrb	r3, [r3, #1]
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	330a      	adds	r3, #10
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d11c      	bne.n	8008e54 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	78db      	ldrb	r3, [r3, #3]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f91c 	bl	800905c <RTC_ByteToBcd2>
 8008e24:	4603      	mov	r3, r0
 8008e26:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f915 	bl	800905c <RTC_ByteToBcd2>
 8008e32:	4603      	mov	r3, r0
 8008e34:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008e36:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	789b      	ldrb	r3, [r3, #2]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 f90d 	bl	800905c <RTC_ByteToBcd2>
 8008e42:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008e44:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e00e      	b.n	8008e72 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	78db      	ldrb	r3, [r3, #3]
 8008e58:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e60:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008e66:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	22ca      	movs	r2, #202	; 0xca
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2253      	movs	r2, #83	; 0x53
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 f8be 	bl	8009004 <RTC_EnterInitMode>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00b      	beq.n	8008ea6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e033      	b.n	8008f0e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008eb4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ec4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d111      	bne.n	8008ef8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f86d 	bl	8008fb4 <HAL_RTC_WaitForSynchro>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00b      	beq.n	8008ef8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	22ff      	movs	r2, #255	; 0xff
 8008ee6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2204      	movs	r2, #4
 8008eec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e00a      	b.n	8008f0e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	22ff      	movs	r2, #255	; 0xff
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
  }
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd90      	pop	{r4, r7, pc}

08008f16 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f34:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	f003 031f 	and.w	r3, r3, #31
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	0b5b      	lsrs	r3, r3, #13
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d11a      	bne.n	8008faa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	78db      	ldrb	r3, [r3, #3]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 f88d 	bl	8009098 <RTC_Bcd2ToByte>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	461a      	mov	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f884 	bl	8009098 <RTC_Bcd2ToByte>
 8008f90:	4603      	mov	r3, r0
 8008f92:	461a      	mov	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	789b      	ldrb	r3, [r3, #2]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 f87b 	bl	8009098 <RTC_Bcd2ToByte>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3718      	adds	r7, #24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fd0:	f7fe fcaa 	bl	8007928 <HAL_GetTick>
 8008fd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fd6:	e009      	b.n	8008fec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fd8:	f7fe fca6 	bl	8007928 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fe6:	d901      	bls.n	8008fec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e007      	b.n	8008ffc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0ee      	beq.n	8008fd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b00      	cmp	r3, #0
 800901c:	d119      	bne.n	8009052 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009028:	f7fe fc7e 	bl	8007928 <HAL_GetTick>
 800902c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800902e:	e009      	b.n	8009044 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009030:	f7fe fc7a 	bl	8007928 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800903e:	d901      	bls.n	8009044 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e007      	b.n	8009054 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0ee      	beq.n	8009030 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800906a:	e005      	b.n	8009078 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	3b0a      	subs	r3, #10
 8009076:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b09      	cmp	r3, #9
 800907c:	d8f6      	bhi.n	800906c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	b2da      	uxtb	r2, r3
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	4313      	orrs	r3, r2
 800908a:	b2db      	uxtb	r3, r3
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	091b      	lsrs	r3, r3, #4
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	f003 030f 	and.w	r3, r3, #15
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	4413      	add	r3, r2
 80090c6:	b2db      	uxtb	r3, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7f1b      	ldrb	r3, [r3, #28]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_RTCEx_SetCalibrationOutPut+0x16>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e030      	b.n	800914c <HAL_RTCEx_SetCalibrationOutPut+0x78>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	22ca      	movs	r2, #202	; 0xca
 80090fc:	625a      	str	r2, [r3, #36]	; 0x24
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2253      	movs	r2, #83	; 0x53
 8009104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009114:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6899      	ldr	r1, [r3, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009134:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22ff      	movs	r2, #255	; 0xff
 800913c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e056      	b.n	8009218 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7fe f979 	bl	800747c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	431a      	orrs	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	ea42 0103 	orr.w	r1, r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	f003 0104 	and.w	r1, r3, #4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69da      	ldr	r2, [r3, #28]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009206:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_SPI_Transmit+0x22>
 800923e:	2302      	movs	r3, #2
 8009240:	e11e      	b.n	8009480 <HAL_SPI_Transmit+0x260>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800924a:	f7fe fb6d 	bl	8007928 <HAL_GetTick>
 800924e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d002      	beq.n	8009266 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009260:	2302      	movs	r3, #2
 8009262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009264:	e103      	b.n	800946e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <HAL_SPI_Transmit+0x52>
 800926c:	88fb      	ldrh	r3, [r7, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009276:	e0fa      	b.n	800946e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2203      	movs	r2, #3
 800927c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092be:	d107      	bne.n	80092d0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d007      	beq.n	80092ee <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092f6:	d14b      	bne.n	8009390 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <HAL_SPI_Transmit+0xe6>
 8009300:	8afb      	ldrh	r3, [r7, #22]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d13e      	bne.n	8009384 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	1c9a      	adds	r2, r3, #2
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009320:	b29b      	uxth	r3, r3
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800932a:	e02b      	b.n	8009384 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b02      	cmp	r3, #2
 8009338:	d112      	bne.n	8009360 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	881a      	ldrh	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	1c9a      	adds	r2, r3, #2
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	86da      	strh	r2, [r3, #54]	; 0x36
 800935e:	e011      	b.n	8009384 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009360:	f7fe fae2 	bl	8007928 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d803      	bhi.n	8009378 <HAL_SPI_Transmit+0x158>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009376:	d102      	bne.n	800937e <HAL_SPI_Transmit+0x15e>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009382:	e074      	b.n	800946e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009388:	b29b      	uxth	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1ce      	bne.n	800932c <HAL_SPI_Transmit+0x10c>
 800938e:	e04c      	b.n	800942a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <HAL_SPI_Transmit+0x17e>
 8009398:	8afb      	ldrh	r3, [r7, #22]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d140      	bne.n	8009420 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80093c4:	e02c      	b.n	8009420 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d113      	bne.n	80093fc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	7812      	ldrb	r2, [r2, #0]
 80093e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80093fa:	e011      	b.n	8009420 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093fc:	f7fe fa94 	bl	8007928 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d803      	bhi.n	8009414 <HAL_SPI_Transmit+0x1f4>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009412:	d102      	bne.n	800941a <HAL_SPI_Transmit+0x1fa>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d102      	bne.n	8009420 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800941e:	e026      	b.n	800946e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009424:	b29b      	uxth	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1cd      	bne.n	80093c6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fa44 	bl	80098bc <SPI_EndRxTxTransaction>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009448:	2300      	movs	r3, #0
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009462:	2b00      	cmp	r3, #0
 8009464:	d002      	beq.n	800946c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	77fb      	strb	r3, [r7, #31]
 800946a:	e000      	b.n	800946e <HAL_SPI_Transmit+0x24e>
  }

error:
 800946c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800947e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08c      	sub	sp, #48	; 0x30
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009496:	2301      	movs	r3, #1
 8009498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_SPI_TransmitReceive+0x26>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e18a      	b.n	80097c4 <HAL_SPI_TransmitReceive+0x33c>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094b6:	f7fe fa37 	bl	8007928 <HAL_GetTick>
 80094ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80094cc:	887b      	ldrh	r3, [r7, #2]
 80094ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d00f      	beq.n	80094f8 <HAL_SPI_TransmitReceive+0x70>
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094de:	d107      	bne.n	80094f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <HAL_SPI_TransmitReceive+0x68>
 80094e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d003      	beq.n	80094f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
 80094f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094f6:	e15b      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <HAL_SPI_TransmitReceive+0x82>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <HAL_SPI_TransmitReceive+0x82>
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d103      	bne.n	8009512 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009510:	e14e      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b04      	cmp	r3, #4
 800951c:	d003      	beq.n	8009526 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2205      	movs	r2, #5
 8009522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	887a      	ldrh	r2, [r7, #2]
 8009536:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	887a      	ldrh	r2, [r7, #2]
 8009548:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	887a      	ldrh	r2, [r7, #2]
 800954e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d007      	beq.n	800957a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d178      	bne.n	8009676 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <HAL_SPI_TransmitReceive+0x10a>
 800958c:	8b7b      	ldrh	r3, [r7, #26]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d166      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	881a      	ldrh	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	1c9a      	adds	r2, r3, #2
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095b6:	e053      	b.n	8009660 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d11b      	bne.n	80095fe <HAL_SPI_TransmitReceive+0x176>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d016      	beq.n	80095fe <HAL_SPI_TransmitReceive+0x176>
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d113      	bne.n	80095fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	881a      	ldrh	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	1c9a      	adds	r2, r3, #2
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	d119      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x1b8>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009610:	b29b      	uxth	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d014      	beq.n	8009640 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009620:	b292      	uxth	r2, r2
 8009622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009628:	1c9a      	adds	r2, r3, #2
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009632:	b29b      	uxth	r3, r3
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800963c:	2301      	movs	r3, #1
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009640:	f7fe f972 	bl	8007928 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964c:	429a      	cmp	r2, r3
 800964e:	d807      	bhi.n	8009660 <HAL_SPI_TransmitReceive+0x1d8>
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d003      	beq.n	8009660 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800965e:	e0a7      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009664:	b29b      	uxth	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1a6      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x130>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966e:	b29b      	uxth	r3, r3
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1a1      	bne.n	80095b8 <HAL_SPI_TransmitReceive+0x130>
 8009674:	e07c      	b.n	8009770 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_SPI_TransmitReceive+0x1fc>
 800967e:	8b7b      	ldrh	r3, [r7, #26]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d16b      	bne.n	800975c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096aa:	e057      	b.n	800975c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d11c      	bne.n	80096f4 <HAL_SPI_TransmitReceive+0x26c>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096be:	b29b      	uxth	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d017      	beq.n	80096f4 <HAL_SPI_TransmitReceive+0x26c>
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d114      	bne.n	80096f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	7812      	ldrb	r2, [r2, #0]
 80096d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d119      	bne.n	8009736 <HAL_SPI_TransmitReceive+0x2ae>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009706:	b29b      	uxth	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d014      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009728:	b29b      	uxth	r3, r3
 800972a:	3b01      	subs	r3, #1
 800972c:	b29a      	uxth	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009732:	2301      	movs	r3, #1
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009736:	f7fe f8f7 	bl	8007928 <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009742:	429a      	cmp	r2, r3
 8009744:	d803      	bhi.n	800974e <HAL_SPI_TransmitReceive+0x2c6>
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974c:	d102      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x2cc>
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800975a:	e029      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1a2      	bne.n	80096ac <HAL_SPI_TransmitReceive+0x224>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d19d      	bne.n	80096ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009772:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f8a1 	bl	80098bc <SPI_EndRxTxTransaction>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2220      	movs	r2, #32
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800978c:	e010      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	e000      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80097ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3730      	adds	r7, #48	; 0x30
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097da:	b2db      	uxtb	r3, r3
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4613      	mov	r3, r2
 80097f6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097f8:	e04c      	b.n	8009894 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d048      	beq.n	8009894 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009802:	f7fe f891 	bl	8007928 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d902      	bls.n	8009818 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d13d      	bne.n	8009894 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009830:	d111      	bne.n	8009856 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800983a:	d004      	beq.n	8009846 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009844:	d107      	bne.n	8009856 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800985e:	d10f      	bne.n	8009880 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800987e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e00f      	b.n	80098b4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	4013      	ands	r3, r2
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	bf0c      	ite	eq
 80098a4:	2301      	moveq	r3, #1
 80098a6:	2300      	movne	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d1a3      	bne.n	80097fa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098c8:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <SPI_EndRxTxTransaction+0x7c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1b      	ldr	r2, [pc, #108]	; (800993c <SPI_EndRxTxTransaction+0x80>)
 80098ce:	fba2 2303 	umull	r2, r3, r2, r3
 80098d2:	0d5b      	lsrs	r3, r3, #21
 80098d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098d8:	fb02 f303 	mul.w	r3, r2, r3
 80098dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098e6:	d112      	bne.n	800990e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	2200      	movs	r2, #0
 80098f0:	2180      	movs	r1, #128	; 0x80
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f7ff ff78 	bl	80097e8 <SPI_WaitFlagStateUntilTimeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d016      	beq.n	800992c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009902:	f043 0220 	orr.w	r2, r3, #32
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e00f      	b.n	800992e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00a      	beq.n	800992a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	3b01      	subs	r3, #1
 8009918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d0f2      	beq.n	800990e <SPI_EndRxTxTransaction+0x52>
 8009928:	e000      	b.n	800992c <SPI_EndRxTxTransaction+0x70>
        break;
 800992a:	bf00      	nop
  }

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	2000005c 	.word	0x2000005c
 800993c:	165e9f81 	.word	0x165e9f81

08009940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e01d      	b.n	800998e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fd fdd0 	bl	800750c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f000 fb72 	bl	800a068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b06      	cmp	r3, #6
 80099b6:	d007      	beq.n	80099c8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68da      	ldr	r2, [r3, #12]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0201 	orr.w	r2, r2, #1
 80099f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 0307 	and.w	r3, r3, #7
 8009a00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b06      	cmp	r3, #6
 8009a06:	d007      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f042 0201 	orr.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e01d      	b.n	8009a74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d106      	bne.n	8009a52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f815 	bl	8009a7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2202      	movs	r2, #2
 8009a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	4610      	mov	r0, r2
 8009a66:	f000 faff 	bl	800a068 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 fdca 	bl	800a63c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a15      	ldr	r2, [pc, #84]	; (8009b04 <HAL_TIM_PWM_Start+0x74>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d004      	beq.n	8009abc <HAL_TIM_PWM_Start+0x2c>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <HAL_TIM_PWM_Start+0x78>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d101      	bne.n	8009ac0 <HAL_TIM_PWM_Start+0x30>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x32>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d007      	beq.n	8009ad6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b06      	cmp	r3, #6
 8009ae6:	d007      	beq.n	8009af8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0201 	orr.w	r2, r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40010400 	.word	0x40010400

08009b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0302 	and.w	r3, r3, #2
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d122      	bne.n	8009b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d11b      	bne.n	8009b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f06f 0202 	mvn.w	r2, #2
 8009b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa6b 	bl	800a02a <HAL_TIM_IC_CaptureCallback>
 8009b54:	e005      	b.n	8009b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa5d 	bl	800a016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa6e 	bl	800a03e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f003 0304 	and.w	r3, r3, #4
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d122      	bne.n	8009bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	d11b      	bne.n	8009bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f06f 0204 	mvn.w	r2, #4
 8009b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa41 	bl	800a02a <HAL_TIM_IC_CaptureCallback>
 8009ba8:	e005      	b.n	8009bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa33 	bl	800a016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fa44 	bl	800a03e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	d122      	bne.n	8009c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f003 0308 	and.w	r3, r3, #8
 8009bd4:	2b08      	cmp	r3, #8
 8009bd6:	d11b      	bne.n	8009c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f06f 0208 	mvn.w	r2, #8
 8009be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2204      	movs	r2, #4
 8009be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fa17 	bl	800a02a <HAL_TIM_IC_CaptureCallback>
 8009bfc:	e005      	b.n	8009c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa09 	bl	800a016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fa1a 	bl	800a03e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	f003 0310 	and.w	r3, r3, #16
 8009c1a:	2b10      	cmp	r3, #16
 8009c1c:	d122      	bne.n	8009c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	f003 0310 	and.w	r3, r3, #16
 8009c28:	2b10      	cmp	r3, #16
 8009c2a:	d11b      	bne.n	8009c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f06f 0210 	mvn.w	r2, #16
 8009c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f9ed 	bl	800a02a <HAL_TIM_IC_CaptureCallback>
 8009c50:	e005      	b.n	8009c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9df 	bl	800a016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f9f0 	bl	800a03e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d10e      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d107      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f06f 0201 	mvn.w	r2, #1
 8009c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7fd fb56 	bl	800733c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b80      	cmp	r3, #128	; 0x80
 8009c9c:	d10e      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca8:	2b80      	cmp	r3, #128	; 0x80
 8009caa:	d107      	bne.n	8009cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fd6c 	bl	800a794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc6:	2b40      	cmp	r3, #64	; 0x40
 8009cc8:	d10e      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	d107      	bne.n	8009ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f9b5 	bl	800a052 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	f003 0320 	and.w	r3, r3, #32
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	d10e      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	d107      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0220 	mvn.w	r2, #32
 8009d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fd36 	bl	800a780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e0b4      	b.n	8009ea0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2202      	movs	r2, #2
 8009d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b0c      	cmp	r3, #12
 8009d4a:	f200 809f 	bhi.w	8009e8c <HAL_TIM_PWM_ConfigChannel+0x170>
 8009d4e:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d54:	08009d89 	.word	0x08009d89
 8009d58:	08009e8d 	.word	0x08009e8d
 8009d5c:	08009e8d 	.word	0x08009e8d
 8009d60:	08009e8d 	.word	0x08009e8d
 8009d64:	08009dc9 	.word	0x08009dc9
 8009d68:	08009e8d 	.word	0x08009e8d
 8009d6c:	08009e8d 	.word	0x08009e8d
 8009d70:	08009e8d 	.word	0x08009e8d
 8009d74:	08009e0b 	.word	0x08009e0b
 8009d78:	08009e8d 	.word	0x08009e8d
 8009d7c:	08009e8d 	.word	0x08009e8d
 8009d80:	08009e8d 	.word	0x08009e8d
 8009d84:	08009e4b 	.word	0x08009e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fa0a 	bl	800a1a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0208 	orr.w	r2, r2, #8
 8009da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 0204 	bic.w	r2, r2, #4
 8009db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6999      	ldr	r1, [r3, #24]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	691a      	ldr	r2, [r3, #16]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	619a      	str	r2, [r3, #24]
      break;
 8009dc6:	e062      	b.n	8009e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fa5a 	bl	800a288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6999      	ldr	r1, [r3, #24]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	021a      	lsls	r2, r3, #8
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	619a      	str	r2, [r3, #24]
      break;
 8009e08:	e041      	b.n	8009e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 faaf 	bl	800a374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69da      	ldr	r2, [r3, #28]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f042 0208 	orr.w	r2, r2, #8
 8009e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69da      	ldr	r2, [r3, #28]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0204 	bic.w	r2, r2, #4
 8009e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69d9      	ldr	r1, [r3, #28]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	691a      	ldr	r2, [r3, #16]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	61da      	str	r2, [r3, #28]
      break;
 8009e48:	e021      	b.n	8009e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fb03 	bl	800a45c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69da      	ldr	r2, [r3, #28]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69da      	ldr	r2, [r3, #28]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69d9      	ldr	r1, [r3, #28]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	021a      	lsls	r2, r3, #8
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	61da      	str	r2, [r3, #28]
      break;
 8009e8a:	e000      	b.n	8009e8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009e8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_TIM_ConfigClockSource+0x18>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e0a6      	b.n	800a00e <HAL_TIM_ConfigClockSource+0x166>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ede:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ee6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b40      	cmp	r3, #64	; 0x40
 8009ef6:	d067      	beq.n	8009fc8 <HAL_TIM_ConfigClockSource+0x120>
 8009ef8:	2b40      	cmp	r3, #64	; 0x40
 8009efa:	d80b      	bhi.n	8009f14 <HAL_TIM_ConfigClockSource+0x6c>
 8009efc:	2b10      	cmp	r3, #16
 8009efe:	d073      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0x140>
 8009f00:	2b10      	cmp	r3, #16
 8009f02:	d802      	bhi.n	8009f0a <HAL_TIM_ConfigClockSource+0x62>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d06f      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009f08:	e078      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	d06c      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0x140>
 8009f0e:	2b30      	cmp	r3, #48	; 0x30
 8009f10:	d06a      	beq.n	8009fe8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009f12:	e073      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f14:	2b70      	cmp	r3, #112	; 0x70
 8009f16:	d00d      	beq.n	8009f34 <HAL_TIM_ConfigClockSource+0x8c>
 8009f18:	2b70      	cmp	r3, #112	; 0x70
 8009f1a:	d804      	bhi.n	8009f26 <HAL_TIM_ConfigClockSource+0x7e>
 8009f1c:	2b50      	cmp	r3, #80	; 0x50
 8009f1e:	d033      	beq.n	8009f88 <HAL_TIM_ConfigClockSource+0xe0>
 8009f20:	2b60      	cmp	r3, #96	; 0x60
 8009f22:	d041      	beq.n	8009fa8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009f24:	e06a      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2a:	d066      	beq.n	8009ffa <HAL_TIM_ConfigClockSource+0x152>
 8009f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f30:	d017      	beq.n	8009f62 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009f32:	e063      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6899      	ldr	r1, [r3, #8]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f000 fb5a 	bl	800a5fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	609a      	str	r2, [r3, #8]
      break;
 8009f60:	e04c      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6899      	ldr	r1, [r3, #8]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f000 fb43 	bl	800a5fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f84:	609a      	str	r2, [r3, #8]
      break;
 8009f86:	e039      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	6859      	ldr	r1, [r3, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	461a      	mov	r2, r3
 8009f96:	f000 fab7 	bl	800a508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2150      	movs	r1, #80	; 0x50
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fb10 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 8009fa6:	e029      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6859      	ldr	r1, [r3, #4]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f000 fad6 	bl	800a566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2160      	movs	r1, #96	; 0x60
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fb00 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 8009fc6:	e019      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6818      	ldr	r0, [r3, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	6859      	ldr	r1, [r3, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f000 fa97 	bl	800a508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2140      	movs	r1, #64	; 0x40
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 faf0 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 8009fe6:	e009      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f000 fae7 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 8009ff8:	e000      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
	...

0800a068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a40      	ldr	r2, [pc, #256]	; (800a17c <TIM_Base_SetConfig+0x114>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d013      	beq.n	800a0a8 <TIM_Base_SetConfig+0x40>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a086:	d00f      	beq.n	800a0a8 <TIM_Base_SetConfig+0x40>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a3d      	ldr	r2, [pc, #244]	; (800a180 <TIM_Base_SetConfig+0x118>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00b      	beq.n	800a0a8 <TIM_Base_SetConfig+0x40>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a3c      	ldr	r2, [pc, #240]	; (800a184 <TIM_Base_SetConfig+0x11c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d007      	beq.n	800a0a8 <TIM_Base_SetConfig+0x40>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a3b      	ldr	r2, [pc, #236]	; (800a188 <TIM_Base_SetConfig+0x120>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d003      	beq.n	800a0a8 <TIM_Base_SetConfig+0x40>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a3a      	ldr	r2, [pc, #232]	; (800a18c <TIM_Base_SetConfig+0x124>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d108      	bne.n	800a0ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a2f      	ldr	r2, [pc, #188]	; (800a17c <TIM_Base_SetConfig+0x114>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d02b      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0c8:	d027      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a2c      	ldr	r2, [pc, #176]	; (800a180 <TIM_Base_SetConfig+0x118>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d023      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a2b      	ldr	r2, [pc, #172]	; (800a184 <TIM_Base_SetConfig+0x11c>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d01f      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a2a      	ldr	r2, [pc, #168]	; (800a188 <TIM_Base_SetConfig+0x120>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d01b      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a29      	ldr	r2, [pc, #164]	; (800a18c <TIM_Base_SetConfig+0x124>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d017      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a28      	ldr	r2, [pc, #160]	; (800a190 <TIM_Base_SetConfig+0x128>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d013      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a27      	ldr	r2, [pc, #156]	; (800a194 <TIM_Base_SetConfig+0x12c>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d00f      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a26      	ldr	r2, [pc, #152]	; (800a198 <TIM_Base_SetConfig+0x130>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d00b      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a25      	ldr	r2, [pc, #148]	; (800a19c <TIM_Base_SetConfig+0x134>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d007      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a24      	ldr	r2, [pc, #144]	; (800a1a0 <TIM_Base_SetConfig+0x138>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d003      	beq.n	800a11a <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a23      	ldr	r2, [pc, #140]	; (800a1a4 <TIM_Base_SetConfig+0x13c>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d108      	bne.n	800a12c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4313      	orrs	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	4313      	orrs	r3, r2
 800a138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a0a      	ldr	r2, [pc, #40]	; (800a17c <TIM_Base_SetConfig+0x114>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_Base_SetConfig+0xf8>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a0c      	ldr	r2, [pc, #48]	; (800a18c <TIM_Base_SetConfig+0x124>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d103      	bne.n	800a168 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	615a      	str	r2, [r3, #20]
}
 800a16e:	bf00      	nop
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	40010000 	.word	0x40010000
 800a180:	40000400 	.word	0x40000400
 800a184:	40000800 	.word	0x40000800
 800a188:	40000c00 	.word	0x40000c00
 800a18c:	40010400 	.word	0x40010400
 800a190:	40014000 	.word	0x40014000
 800a194:	40014400 	.word	0x40014400
 800a198:	40014800 	.word	0x40014800
 800a19c:	40001800 	.word	0x40001800
 800a1a0:	40001c00 	.word	0x40001c00
 800a1a4:	40002000 	.word	0x40002000

0800a1a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f023 0201 	bic.w	r2, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0303 	bic.w	r3, r3, #3
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f023 0302 	bic.w	r3, r3, #2
 800a1f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a20      	ldr	r2, [pc, #128]	; (800a280 <TIM_OC1_SetConfig+0xd8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d003      	beq.n	800a20c <TIM_OC1_SetConfig+0x64>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a1f      	ldr	r2, [pc, #124]	; (800a284 <TIM_OC1_SetConfig+0xdc>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d10c      	bne.n	800a226 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	f023 0308 	bic.w	r3, r3, #8
 800a212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f023 0304 	bic.w	r3, r3, #4
 800a224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a15      	ldr	r2, [pc, #84]	; (800a280 <TIM_OC1_SetConfig+0xd8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d003      	beq.n	800a236 <TIM_OC1_SetConfig+0x8e>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a14      	ldr	r2, [pc, #80]	; (800a284 <TIM_OC1_SetConfig+0xdc>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d111      	bne.n	800a25a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a23c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	695b      	ldr	r3, [r3, #20]
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4313      	orrs	r3, r2
 800a258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685a      	ldr	r2, [r3, #4]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	621a      	str	r2, [r3, #32]
}
 800a274:	bf00      	nop
 800a276:	371c      	adds	r7, #28
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400

0800a288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	f023 0210 	bic.w	r2, r3, #16
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f023 0320 	bic.w	r3, r3, #32
 800a2d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a22      	ldr	r2, [pc, #136]	; (800a36c <TIM_OC2_SetConfig+0xe4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d003      	beq.n	800a2f0 <TIM_OC2_SetConfig+0x68>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a21      	ldr	r2, [pc, #132]	; (800a370 <TIM_OC2_SetConfig+0xe8>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d10d      	bne.n	800a30c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	011b      	lsls	r3, r3, #4
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4313      	orrs	r3, r2
 800a302:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a30a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a17      	ldr	r2, [pc, #92]	; (800a36c <TIM_OC2_SetConfig+0xe4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d003      	beq.n	800a31c <TIM_OC2_SetConfig+0x94>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <TIM_OC2_SetConfig+0xe8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d113      	bne.n	800a344 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a32a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	4313      	orrs	r3, r2
 800a336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	40010000 	.word	0x40010000
 800a370:	40010400 	.word	0x40010400

0800a374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0303 	bic.w	r3, r3, #3
 800a3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a21      	ldr	r2, [pc, #132]	; (800a454 <TIM_OC3_SetConfig+0xe0>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d003      	beq.n	800a3da <TIM_OC3_SetConfig+0x66>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a20      	ldr	r2, [pc, #128]	; (800a458 <TIM_OC3_SetConfig+0xe4>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d10d      	bne.n	800a3f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a16      	ldr	r2, [pc, #88]	; (800a454 <TIM_OC3_SetConfig+0xe0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d003      	beq.n	800a406 <TIM_OC3_SetConfig+0x92>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a15      	ldr	r2, [pc, #84]	; (800a458 <TIM_OC3_SetConfig+0xe4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d113      	bne.n	800a42e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a40c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	621a      	str	r2, [r3, #32]
}
 800a448:	bf00      	nop
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	40010000 	.word	0x40010000
 800a458:	40010400 	.word	0x40010400

0800a45c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	031b      	lsls	r3, r3, #12
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a12      	ldr	r2, [pc, #72]	; (800a500 <TIM_OC4_SetConfig+0xa4>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d003      	beq.n	800a4c4 <TIM_OC4_SetConfig+0x68>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a11      	ldr	r2, [pc, #68]	; (800a504 <TIM_OC4_SetConfig+0xa8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d109      	bne.n	800a4d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	019b      	lsls	r3, r3, #6
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	621a      	str	r2, [r3, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40010000 	.word	0x40010000
 800a504:	40010400 	.word	0x40010400

0800a508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	f023 0201 	bic.w	r2, r3, #1
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f023 030a 	bic.w	r3, r3, #10
 800a544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	621a      	str	r2, [r3, #32]
}
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a566:	b480      	push	{r7}
 800a568:	b087      	sub	sp, #28
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f023 0210 	bic.w	r2, r3, #16
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	031b      	lsls	r3, r3, #12
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4313      	orrs	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	621a      	str	r2, [r3, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f043 0307 	orr.w	r3, r3, #7
 800a5e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	609a      	str	r2, [r3, #8]
}
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	021a      	lsls	r2, r3, #8
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	431a      	orrs	r2, r3
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	609a      	str	r2, [r3, #8]
}
 800a630:	bf00      	nop
 800a632:	371c      	adds	r7, #28
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f003 031f 	and.w	r3, r3, #31
 800a64e:	2201      	movs	r2, #1
 800a650:	fa02 f303 	lsl.w	r3, r2, r3
 800a654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a1a      	ldr	r2, [r3, #32]
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	43db      	mvns	r3, r3
 800a65e:	401a      	ands	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6a1a      	ldr	r2, [r3, #32]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 031f 	and.w	r3, r3, #31
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	fa01 f303 	lsl.w	r3, r1, r3
 800a674:	431a      	orrs	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	621a      	str	r2, [r3, #32]
}
 800a67a:	bf00      	nop
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d101      	bne.n	800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a69c:	2302      	movs	r3, #2
 800a69e:	e05a      	b.n	800a756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a21      	ldr	r2, [pc, #132]	; (800a764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d022      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ec:	d01d      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1d      	ldr	r2, [pc, #116]	; (800a768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d018      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1b      	ldr	r2, [pc, #108]	; (800a76c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d013      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1a      	ldr	r2, [pc, #104]	; (800a770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00e      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a18      	ldr	r2, [pc, #96]	; (800a774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d009      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a17      	ldr	r2, [pc, #92]	; (800a778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d004      	beq.n	800a72a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a15      	ldr	r2, [pc, #84]	; (800a77c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d10c      	bne.n	800a744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40010000 	.word	0x40010000
 800a768:	40000400 	.word	0x40000400
 800a76c:	40000800 	.word	0x40000800
 800a770:	40000c00 	.word	0x40000c00
 800a774:	40010400 	.word	0x40010400
 800a778:	40014000 	.word	0x40014000
 800a77c:	40001800 	.word	0x40001800

0800a780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e03f      	b.n	800a83a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7fc ff2e 	bl	8007630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2224      	movs	r2, #36	; 0x24
 800a7d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68da      	ldr	r2, [r3, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fcb3 	bl	800b158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	695a      	ldr	r2, [r3, #20]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b088      	sub	sp, #32
 800a846:	af02      	add	r7, sp, #8
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	4613      	mov	r3, r2
 800a850:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b20      	cmp	r3, #32
 800a860:	f040 8083 	bne.w	800a96a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <HAL_UART_Transmit+0x2e>
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e07b      	b.n	800a96c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d101      	bne.n	800a882 <HAL_UART_Transmit+0x40>
 800a87e:	2302      	movs	r3, #2
 800a880:	e074      	b.n	800a96c <HAL_UART_Transmit+0x12a>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2221      	movs	r2, #33	; 0x21
 800a894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a898:	f7fd f846 	bl	8007928 <HAL_GetTick>
 800a89c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	88fa      	ldrh	r2, [r7, #6]
 800a8a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	88fa      	ldrh	r2, [r7, #6]
 800a8a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a8b2:	e042      	b.n	800a93a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8ca:	d122      	bne.n	800a912 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2180      	movs	r1, #128	; 0x80
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 fabe 	bl	800ae58 <UART_WaitOnFlagUntilTimeout>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d001      	beq.n	800a8e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e042      	b.n	800a96c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	3302      	adds	r3, #2
 800a906:	60bb      	str	r3, [r7, #8]
 800a908:	e017      	b.n	800a93a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	3301      	adds	r3, #1
 800a90e:	60bb      	str	r3, [r7, #8]
 800a910:	e013      	b.n	800a93a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2200      	movs	r2, #0
 800a91a:	2180      	movs	r1, #128	; 0x80
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 fa9b 	bl	800ae58 <UART_WaitOnFlagUntilTimeout>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e01f      	b.n	800a96c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	60ba      	str	r2, [r7, #8]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a93e:	b29b      	uxth	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1b7      	bne.n	800a8b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2200      	movs	r2, #0
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 fa82 	bl	800ae58 <UART_WaitOnFlagUntilTimeout>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e006      	b.n	800a96c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2220      	movs	r2, #32
 800a962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	e000      	b.n	800a96c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a96a:	2302      	movs	r3, #2
  }
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	603b      	str	r3, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b20      	cmp	r3, #32
 800a992:	f040 8090 	bne.w	800aab6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <HAL_UART_Receive+0x2e>
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e088      	b.n	800aab8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_UART_Receive+0x40>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e081      	b.n	800aab8 <HAL_UART_Receive+0x144>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2222      	movs	r2, #34	; 0x22
 800a9c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a9ca:	f7fc ffad 	bl	8007928 <HAL_GetTick>
 800a9ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	88fa      	ldrh	r2, [r7, #6]
 800a9d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	88fa      	ldrh	r2, [r7, #6]
 800a9da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a9e4:	e05c      	b.n	800aaa0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fc:	d12b      	bne.n	800aa56 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2200      	movs	r2, #0
 800aa06:	2120      	movs	r1, #32
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 fa25 	bl	800ae58 <UART_WaitOnFlagUntilTimeout>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e04f      	b.n	800aab8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10c      	bne.n	800aa3e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	3302      	adds	r3, #2
 800aa3a:	60bb      	str	r3, [r7, #8]
 800aa3c:	e030      	b.n	800aaa0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	e024      	b.n	800aaa0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2120      	movs	r1, #32
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f9f9 	bl	800ae58 <UART_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e023      	b.n	800aab8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d108      	bne.n	800aa8a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	60ba      	str	r2, [r7, #8]
 800aa84:	b2ca      	uxtb	r2, r1
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	e00a      	b.n	800aaa0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	1c59      	adds	r1, r3, #1
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d19d      	bne.n	800a9e6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e000      	b.n	800aab8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800aab6:	2302      	movs	r3, #2
  }
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b20      	cmp	r3, #32
 800aad8:	d140      	bne.n	800ab5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <HAL_UART_Receive_IT+0x26>
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e039      	b.n	800ab5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <HAL_UART_Receive_IT+0x38>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e032      	b.n	800ab5e <HAL_UART_Receive_IT+0x9e>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	88fa      	ldrh	r2, [r7, #6]
 800ab0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	88fa      	ldrh	r2, [r7, #6]
 800ab10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2222      	movs	r2, #34	; 0x22
 800ab1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	695a      	ldr	r2, [r3, #20]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f042 0201 	orr.w	r2, r2, #1
 800ab46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f042 0220 	orr.w	r2, r2, #32
 800ab56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	e000      	b.n	800ab5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ab5c:	2302      	movs	r3, #2
  }
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68da      	ldr	r2, [r3, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695a      	ldr	r2, [r3, #20]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9e:	2b40      	cmp	r3, #64	; 0x40
 800aba0:	d12a      	bne.n	800abf8 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	695a      	ldr	r2, [r3, #20]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abb0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d013      	beq.n	800abe2 <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abbe:	4a16      	ldr	r2, [pc, #88]	; (800ac18 <HAL_UART_AbortReceive_IT+0xac>)
 800abc0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc ffed 	bl	8007ba6 <HAL_DMA_Abort_IT>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01c      	beq.n	800ac0c <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
 800abe0:	e014      	b.n	800ac0c <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2220      	movs	r2, #32
 800abec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f927 	bl	800ae44 <HAL_UART_AbortReceiveCpltCallback>
 800abf6:	e009      	b.n	800ac0c <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f91c 	bl	800ae44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	0800af51 	.word	0x0800af51

0800ac1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10d      	bne.n	800ac6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d008      	beq.n	800ac6e <HAL_UART_IRQHandler+0x52>
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f9f5 	bl	800b056 <UART_Receive_IT>
      return;
 800ac6c:	e0d1      	b.n	800ae12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 80b0 	beq.w	800add6 <HAL_UART_IRQHandler+0x1ba>
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d105      	bne.n	800ac8c <HAL_UART_IRQHandler+0x70>
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 80a5 	beq.w	800add6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <HAL_UART_IRQHandler+0x90>
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	f043 0201 	orr.w	r2, r3, #1
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00a      	beq.n	800accc <HAL_UART_IRQHandler+0xb0>
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc4:	f043 0202 	orr.w	r2, r3, #2
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00a      	beq.n	800acec <HAL_UART_IRQHandler+0xd0>
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d005      	beq.n	800acec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace4:	f043 0204 	orr.w	r2, r3, #4
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00f      	beq.n	800ad16 <HAL_UART_IRQHandler+0xfa>
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	f003 0320 	and.w	r3, r3, #32
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d104      	bne.n	800ad0a <HAL_UART_IRQHandler+0xee>
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f003 0301 	and.w	r3, r3, #1
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad0e:	f043 0208 	orr.w	r2, r3, #8
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d078      	beq.n	800ae10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	f003 0320 	and.w	r3, r3, #32
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d007      	beq.n	800ad38 <HAL_UART_IRQHandler+0x11c>
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f98f 	bl	800b056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	695b      	ldr	r3, [r3, #20]
 800ad3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad42:	2b40      	cmp	r3, #64	; 0x40
 800ad44:	bf0c      	ite	eq
 800ad46:	2301      	moveq	r3, #1
 800ad48:	2300      	movne	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d102      	bne.n	800ad60 <HAL_UART_IRQHandler+0x144>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d031      	beq.n	800adc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f8c3 	bl	800aeec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad70:	2b40      	cmp	r3, #64	; 0x40
 800ad72:	d123      	bne.n	800adbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	695a      	ldr	r2, [r3, #20]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d013      	beq.n	800adb4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad90:	4a21      	ldr	r2, [pc, #132]	; (800ae18 <HAL_UART_IRQHandler+0x1fc>)
 800ad92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fc ff04 	bl	8007ba6 <HAL_DMA_Abort_IT>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d016      	beq.n	800add2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800adae:	4610      	mov	r0, r2
 800adb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adb2:	e00e      	b.n	800add2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f83b 	bl	800ae30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adba:	e00a      	b.n	800add2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f837 	bl	800ae30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc2:	e006      	b.n	800add2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f833 	bl	800ae30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800add0:	e01e      	b.n	800ae10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add2:	bf00      	nop
    return;
 800add4:	e01c      	b.n	800ae10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800addc:	2b00      	cmp	r3, #0
 800adde:	d008      	beq.n	800adf2 <HAL_UART_IRQHandler+0x1d6>
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f8c5 	bl	800af7a <UART_Transmit_IT>
    return;
 800adf0:	e00f      	b.n	800ae12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <HAL_UART_IRQHandler+0x1f6>
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f90d 	bl	800b026 <UART_EndTransmit_IT>
    return;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <HAL_UART_IRQHandler+0x1f6>
    return;
 800ae10:	bf00      	nop
  }
}
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	0800af29 	.word	0x0800af29

0800ae1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	4613      	mov	r3, r2
 800ae66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae68:	e02c      	b.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d028      	beq.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d007      	beq.n	800ae88 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae78:	f7fc fd56 	bl	8007928 <HAL_GetTick>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	1ad3      	subs	r3, r2, r3
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d21d      	bcs.n	800aec4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ae96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	695a      	ldr	r2, [r3, #20]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0201 	bic.w	r2, r2, #1
 800aea6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e00f      	b.n	800aee4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4013      	ands	r3, r2
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	bf0c      	ite	eq
 800aed4:	2301      	moveq	r3, #1
 800aed6:	2300      	movne	r3, #0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	461a      	mov	r2, r3
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d0c3      	beq.n	800ae6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68da      	ldr	r2, [r3, #12]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	695a      	ldr	r2, [r3, #20]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 0201 	bic.w	r2, r2, #1
 800af12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff ff74 	bl	800ae30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7ff ff69 	bl	800ae44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b21      	cmp	r3, #33	; 0x21
 800af8c:	d144      	bne.n	800b018 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af96:	d11a      	bne.n	800afce <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afac:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d105      	bne.n	800afc2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	1c9a      	adds	r2, r3, #2
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	621a      	str	r2, [r3, #32]
 800afc0:	e00e      	b.n	800afe0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	621a      	str	r2, [r3, #32]
 800afcc:	e008      	b.n	800afe0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	1c59      	adds	r1, r3, #1
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	6211      	str	r1, [r2, #32]
 800afd8:	781a      	ldrb	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	b29b      	uxth	r3, r3
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	4619      	mov	r1, r3
 800afee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10f      	bne.n	800b014 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	e000      	b.n	800b01a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b018:	2302      	movs	r3, #2
  }
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b03c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff fee8 	bl	800ae1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b22      	cmp	r3, #34	; 0x22
 800b068:	d171      	bne.n	800b14e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b072:	d123      	bne.n	800b0bc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b078:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10e      	bne.n	800b0a0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b08e:	b29a      	uxth	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b098:	1c9a      	adds	r2, r3, #2
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	629a      	str	r2, [r3, #40]	; 0x28
 800b09e:	e029      	b.n	800b0f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	629a      	str	r2, [r3, #40]	; 0x28
 800b0ba:	e01b      	b.n	800b0f4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6858      	ldr	r0, [r3, #4]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ce:	1c59      	adds	r1, r3, #1
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6291      	str	r1, [r2, #40]	; 0x28
 800b0d4:	b2c2      	uxtb	r2, r0
 800b0d6:	701a      	strb	r2, [r3, #0]
 800b0d8:	e00c      	b.n	800b0f4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e6:	1c58      	adds	r0, r3, #1
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	6288      	str	r0, [r1, #40]	; 0x28
 800b0ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0f0:	b2d2      	uxtb	r2, r2
 800b0f2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	4619      	mov	r1, r3
 800b102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b104:	2b00      	cmp	r3, #0
 800b106:	d120      	bne.n	800b14a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0220 	bic.w	r2, r2, #32
 800b116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	695a      	ldr	r2, [r3, #20]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0201 	bic.w	r2, r2, #1
 800b136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fc f94b 	bl	80073dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	e002      	b.n	800b150 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	e000      	b.n	800b150 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b14e:	2302      	movs	r3, #2
  }
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68da      	ldr	r2, [r3, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	431a      	orrs	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	431a      	orrs	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b19a:	f023 030c 	bic.w	r3, r3, #12
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	68f9      	ldr	r1, [r7, #12]
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1c6:	f040 818b 	bne.w	800b4e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4ac1      	ldr	r2, [pc, #772]	; (800b4d4 <UART_SetConfig+0x37c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d005      	beq.n	800b1e0 <UART_SetConfig+0x88>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4abf      	ldr	r2, [pc, #764]	; (800b4d8 <UART_SetConfig+0x380>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	f040 80bd 	bne.w	800b35a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1e0:	f7fd fb50 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800b1e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	461d      	mov	r5, r3
 800b1ea:	f04f 0600 	mov.w	r6, #0
 800b1ee:	46a8      	mov	r8, r5
 800b1f0:	46b1      	mov	r9, r6
 800b1f2:	eb18 0308 	adds.w	r3, r8, r8
 800b1f6:	eb49 0409 	adc.w	r4, r9, r9
 800b1fa:	4698      	mov	r8, r3
 800b1fc:	46a1      	mov	r9, r4
 800b1fe:	eb18 0805 	adds.w	r8, r8, r5
 800b202:	eb49 0906 	adc.w	r9, r9, r6
 800b206:	f04f 0100 	mov.w	r1, #0
 800b20a:	f04f 0200 	mov.w	r2, #0
 800b20e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b212:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b216:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b21a:	4688      	mov	r8, r1
 800b21c:	4691      	mov	r9, r2
 800b21e:	eb18 0005 	adds.w	r0, r8, r5
 800b222:	eb49 0106 	adc.w	r1, r9, r6
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	461d      	mov	r5, r3
 800b22c:	f04f 0600 	mov.w	r6, #0
 800b230:	196b      	adds	r3, r5, r5
 800b232:	eb46 0406 	adc.w	r4, r6, r6
 800b236:	461a      	mov	r2, r3
 800b238:	4623      	mov	r3, r4
 800b23a:	f7f5 fcc5 	bl	8000bc8 <__aeabi_uldivmod>
 800b23e:	4603      	mov	r3, r0
 800b240:	460c      	mov	r4, r1
 800b242:	461a      	mov	r2, r3
 800b244:	4ba5      	ldr	r3, [pc, #660]	; (800b4dc <UART_SetConfig+0x384>)
 800b246:	fba3 2302 	umull	r2, r3, r3, r2
 800b24a:	095b      	lsrs	r3, r3, #5
 800b24c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	461d      	mov	r5, r3
 800b254:	f04f 0600 	mov.w	r6, #0
 800b258:	46a9      	mov	r9, r5
 800b25a:	46b2      	mov	sl, r6
 800b25c:	eb19 0309 	adds.w	r3, r9, r9
 800b260:	eb4a 040a 	adc.w	r4, sl, sl
 800b264:	4699      	mov	r9, r3
 800b266:	46a2      	mov	sl, r4
 800b268:	eb19 0905 	adds.w	r9, r9, r5
 800b26c:	eb4a 0a06 	adc.w	sl, sl, r6
 800b270:	f04f 0100 	mov.w	r1, #0
 800b274:	f04f 0200 	mov.w	r2, #0
 800b278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b27c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b280:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b284:	4689      	mov	r9, r1
 800b286:	4692      	mov	sl, r2
 800b288:	eb19 0005 	adds.w	r0, r9, r5
 800b28c:	eb4a 0106 	adc.w	r1, sl, r6
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	461d      	mov	r5, r3
 800b296:	f04f 0600 	mov.w	r6, #0
 800b29a:	196b      	adds	r3, r5, r5
 800b29c:	eb46 0406 	adc.w	r4, r6, r6
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4623      	mov	r3, r4
 800b2a4:	f7f5 fc90 	bl	8000bc8 <__aeabi_uldivmod>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4b8b      	ldr	r3, [pc, #556]	; (800b4dc <UART_SetConfig+0x384>)
 800b2b0:	fba3 1302 	umull	r1, r3, r3, r2
 800b2b4:	095b      	lsrs	r3, r3, #5
 800b2b6:	2164      	movs	r1, #100	; 0x64
 800b2b8:	fb01 f303 	mul.w	r3, r1, r3
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	3332      	adds	r3, #50	; 0x32
 800b2c2:	4a86      	ldr	r2, [pc, #536]	; (800b4dc <UART_SetConfig+0x384>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	095b      	lsrs	r3, r3, #5
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2d0:	4498      	add	r8, r3
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	461d      	mov	r5, r3
 800b2d6:	f04f 0600 	mov.w	r6, #0
 800b2da:	46a9      	mov	r9, r5
 800b2dc:	46b2      	mov	sl, r6
 800b2de:	eb19 0309 	adds.w	r3, r9, r9
 800b2e2:	eb4a 040a 	adc.w	r4, sl, sl
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	46a2      	mov	sl, r4
 800b2ea:	eb19 0905 	adds.w	r9, r9, r5
 800b2ee:	eb4a 0a06 	adc.w	sl, sl, r6
 800b2f2:	f04f 0100 	mov.w	r1, #0
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b306:	4689      	mov	r9, r1
 800b308:	4692      	mov	sl, r2
 800b30a:	eb19 0005 	adds.w	r0, r9, r5
 800b30e:	eb4a 0106 	adc.w	r1, sl, r6
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	461d      	mov	r5, r3
 800b318:	f04f 0600 	mov.w	r6, #0
 800b31c:	196b      	adds	r3, r5, r5
 800b31e:	eb46 0406 	adc.w	r4, r6, r6
 800b322:	461a      	mov	r2, r3
 800b324:	4623      	mov	r3, r4
 800b326:	f7f5 fc4f 	bl	8000bc8 <__aeabi_uldivmod>
 800b32a:	4603      	mov	r3, r0
 800b32c:	460c      	mov	r4, r1
 800b32e:	461a      	mov	r2, r3
 800b330:	4b6a      	ldr	r3, [pc, #424]	; (800b4dc <UART_SetConfig+0x384>)
 800b332:	fba3 1302 	umull	r1, r3, r3, r2
 800b336:	095b      	lsrs	r3, r3, #5
 800b338:	2164      	movs	r1, #100	; 0x64
 800b33a:	fb01 f303 	mul.w	r3, r1, r3
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	3332      	adds	r3, #50	; 0x32
 800b344:	4a65      	ldr	r2, [pc, #404]	; (800b4dc <UART_SetConfig+0x384>)
 800b346:	fba2 2303 	umull	r2, r3, r2, r3
 800b34a:	095b      	lsrs	r3, r3, #5
 800b34c:	f003 0207 	and.w	r2, r3, #7
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4442      	add	r2, r8
 800b356:	609a      	str	r2, [r3, #8]
 800b358:	e26f      	b.n	800b83a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b35a:	f7fd fa7f 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800b35e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	461d      	mov	r5, r3
 800b364:	f04f 0600 	mov.w	r6, #0
 800b368:	46a8      	mov	r8, r5
 800b36a:	46b1      	mov	r9, r6
 800b36c:	eb18 0308 	adds.w	r3, r8, r8
 800b370:	eb49 0409 	adc.w	r4, r9, r9
 800b374:	4698      	mov	r8, r3
 800b376:	46a1      	mov	r9, r4
 800b378:	eb18 0805 	adds.w	r8, r8, r5
 800b37c:	eb49 0906 	adc.w	r9, r9, r6
 800b380:	f04f 0100 	mov.w	r1, #0
 800b384:	f04f 0200 	mov.w	r2, #0
 800b388:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b38c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b390:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b394:	4688      	mov	r8, r1
 800b396:	4691      	mov	r9, r2
 800b398:	eb18 0005 	adds.w	r0, r8, r5
 800b39c:	eb49 0106 	adc.w	r1, r9, r6
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	461d      	mov	r5, r3
 800b3a6:	f04f 0600 	mov.w	r6, #0
 800b3aa:	196b      	adds	r3, r5, r5
 800b3ac:	eb46 0406 	adc.w	r4, r6, r6
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4623      	mov	r3, r4
 800b3b4:	f7f5 fc08 	bl	8000bc8 <__aeabi_uldivmod>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4b47      	ldr	r3, [pc, #284]	; (800b4dc <UART_SetConfig+0x384>)
 800b3c0:	fba3 2302 	umull	r2, r3, r3, r2
 800b3c4:	095b      	lsrs	r3, r3, #5
 800b3c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	461d      	mov	r5, r3
 800b3ce:	f04f 0600 	mov.w	r6, #0
 800b3d2:	46a9      	mov	r9, r5
 800b3d4:	46b2      	mov	sl, r6
 800b3d6:	eb19 0309 	adds.w	r3, r9, r9
 800b3da:	eb4a 040a 	adc.w	r4, sl, sl
 800b3de:	4699      	mov	r9, r3
 800b3e0:	46a2      	mov	sl, r4
 800b3e2:	eb19 0905 	adds.w	r9, r9, r5
 800b3e6:	eb4a 0a06 	adc.w	sl, sl, r6
 800b3ea:	f04f 0100 	mov.w	r1, #0
 800b3ee:	f04f 0200 	mov.w	r2, #0
 800b3f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b3fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b3fe:	4689      	mov	r9, r1
 800b400:	4692      	mov	sl, r2
 800b402:	eb19 0005 	adds.w	r0, r9, r5
 800b406:	eb4a 0106 	adc.w	r1, sl, r6
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	461d      	mov	r5, r3
 800b410:	f04f 0600 	mov.w	r6, #0
 800b414:	196b      	adds	r3, r5, r5
 800b416:	eb46 0406 	adc.w	r4, r6, r6
 800b41a:	461a      	mov	r2, r3
 800b41c:	4623      	mov	r3, r4
 800b41e:	f7f5 fbd3 	bl	8000bc8 <__aeabi_uldivmod>
 800b422:	4603      	mov	r3, r0
 800b424:	460c      	mov	r4, r1
 800b426:	461a      	mov	r2, r3
 800b428:	4b2c      	ldr	r3, [pc, #176]	; (800b4dc <UART_SetConfig+0x384>)
 800b42a:	fba3 1302 	umull	r1, r3, r3, r2
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	2164      	movs	r1, #100	; 0x64
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	3332      	adds	r3, #50	; 0x32
 800b43c:	4a27      	ldr	r2, [pc, #156]	; (800b4dc <UART_SetConfig+0x384>)
 800b43e:	fba2 2303 	umull	r2, r3, r2, r3
 800b442:	095b      	lsrs	r3, r3, #5
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b44a:	4498      	add	r8, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	461d      	mov	r5, r3
 800b450:	f04f 0600 	mov.w	r6, #0
 800b454:	46a9      	mov	r9, r5
 800b456:	46b2      	mov	sl, r6
 800b458:	eb19 0309 	adds.w	r3, r9, r9
 800b45c:	eb4a 040a 	adc.w	r4, sl, sl
 800b460:	4699      	mov	r9, r3
 800b462:	46a2      	mov	sl, r4
 800b464:	eb19 0905 	adds.w	r9, r9, r5
 800b468:	eb4a 0a06 	adc.w	sl, sl, r6
 800b46c:	f04f 0100 	mov.w	r1, #0
 800b470:	f04f 0200 	mov.w	r2, #0
 800b474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b478:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b47c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b480:	4689      	mov	r9, r1
 800b482:	4692      	mov	sl, r2
 800b484:	eb19 0005 	adds.w	r0, r9, r5
 800b488:	eb4a 0106 	adc.w	r1, sl, r6
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	461d      	mov	r5, r3
 800b492:	f04f 0600 	mov.w	r6, #0
 800b496:	196b      	adds	r3, r5, r5
 800b498:	eb46 0406 	adc.w	r4, r6, r6
 800b49c:	461a      	mov	r2, r3
 800b49e:	4623      	mov	r3, r4
 800b4a0:	f7f5 fb92 	bl	8000bc8 <__aeabi_uldivmod>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <UART_SetConfig+0x384>)
 800b4ac:	fba3 1302 	umull	r1, r3, r3, r2
 800b4b0:	095b      	lsrs	r3, r3, #5
 800b4b2:	2164      	movs	r1, #100	; 0x64
 800b4b4:	fb01 f303 	mul.w	r3, r1, r3
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	3332      	adds	r3, #50	; 0x32
 800b4be:	4a07      	ldr	r2, [pc, #28]	; (800b4dc <UART_SetConfig+0x384>)
 800b4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c4:	095b      	lsrs	r3, r3, #5
 800b4c6:	f003 0207 	and.w	r2, r3, #7
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4442      	add	r2, r8
 800b4d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b4d2:	e1b2      	b.n	800b83a <UART_SetConfig+0x6e2>
 800b4d4:	40011000 	.word	0x40011000
 800b4d8:	40011400 	.word	0x40011400
 800b4dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4ad7      	ldr	r2, [pc, #860]	; (800b844 <UART_SetConfig+0x6ec>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d005      	beq.n	800b4f6 <UART_SetConfig+0x39e>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4ad6      	ldr	r2, [pc, #856]	; (800b848 <UART_SetConfig+0x6f0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	f040 80d1 	bne.w	800b698 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4f6:	f7fd f9c5 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800b4fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	469a      	mov	sl, r3
 800b500:	f04f 0b00 	mov.w	fp, #0
 800b504:	46d0      	mov	r8, sl
 800b506:	46d9      	mov	r9, fp
 800b508:	eb18 0308 	adds.w	r3, r8, r8
 800b50c:	eb49 0409 	adc.w	r4, r9, r9
 800b510:	4698      	mov	r8, r3
 800b512:	46a1      	mov	r9, r4
 800b514:	eb18 080a 	adds.w	r8, r8, sl
 800b518:	eb49 090b 	adc.w	r9, r9, fp
 800b51c:	f04f 0100 	mov.w	r1, #0
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b528:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b52c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b530:	4688      	mov	r8, r1
 800b532:	4691      	mov	r9, r2
 800b534:	eb1a 0508 	adds.w	r5, sl, r8
 800b538:	eb4b 0609 	adc.w	r6, fp, r9
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	4619      	mov	r1, r3
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	f04f 0300 	mov.w	r3, #0
 800b54a:	f04f 0400 	mov.w	r4, #0
 800b54e:	0094      	lsls	r4, r2, #2
 800b550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b554:	008b      	lsls	r3, r1, #2
 800b556:	461a      	mov	r2, r3
 800b558:	4623      	mov	r3, r4
 800b55a:	4628      	mov	r0, r5
 800b55c:	4631      	mov	r1, r6
 800b55e:	f7f5 fb33 	bl	8000bc8 <__aeabi_uldivmod>
 800b562:	4603      	mov	r3, r0
 800b564:	460c      	mov	r4, r1
 800b566:	461a      	mov	r2, r3
 800b568:	4bb8      	ldr	r3, [pc, #736]	; (800b84c <UART_SetConfig+0x6f4>)
 800b56a:	fba3 2302 	umull	r2, r3, r3, r2
 800b56e:	095b      	lsrs	r3, r3, #5
 800b570:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	469b      	mov	fp, r3
 800b578:	f04f 0c00 	mov.w	ip, #0
 800b57c:	46d9      	mov	r9, fp
 800b57e:	46e2      	mov	sl, ip
 800b580:	eb19 0309 	adds.w	r3, r9, r9
 800b584:	eb4a 040a 	adc.w	r4, sl, sl
 800b588:	4699      	mov	r9, r3
 800b58a:	46a2      	mov	sl, r4
 800b58c:	eb19 090b 	adds.w	r9, r9, fp
 800b590:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b594:	f04f 0100 	mov.w	r1, #0
 800b598:	f04f 0200 	mov.w	r2, #0
 800b59c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5a8:	4689      	mov	r9, r1
 800b5aa:	4692      	mov	sl, r2
 800b5ac:	eb1b 0509 	adds.w	r5, fp, r9
 800b5b0:	eb4c 060a 	adc.w	r6, ip, sl
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	f04f 0300 	mov.w	r3, #0
 800b5c2:	f04f 0400 	mov.w	r4, #0
 800b5c6:	0094      	lsls	r4, r2, #2
 800b5c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b5cc:	008b      	lsls	r3, r1, #2
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4623      	mov	r3, r4
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	f7f5 faf7 	bl	8000bc8 <__aeabi_uldivmod>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	460c      	mov	r4, r1
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4b9a      	ldr	r3, [pc, #616]	; (800b84c <UART_SetConfig+0x6f4>)
 800b5e2:	fba3 1302 	umull	r1, r3, r3, r2
 800b5e6:	095b      	lsrs	r3, r3, #5
 800b5e8:	2164      	movs	r1, #100	; 0x64
 800b5ea:	fb01 f303 	mul.w	r3, r1, r3
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	3332      	adds	r3, #50	; 0x32
 800b5f4:	4a95      	ldr	r2, [pc, #596]	; (800b84c <UART_SetConfig+0x6f4>)
 800b5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5fa:	095b      	lsrs	r3, r3, #5
 800b5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b600:	4498      	add	r8, r3
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	469b      	mov	fp, r3
 800b606:	f04f 0c00 	mov.w	ip, #0
 800b60a:	46d9      	mov	r9, fp
 800b60c:	46e2      	mov	sl, ip
 800b60e:	eb19 0309 	adds.w	r3, r9, r9
 800b612:	eb4a 040a 	adc.w	r4, sl, sl
 800b616:	4699      	mov	r9, r3
 800b618:	46a2      	mov	sl, r4
 800b61a:	eb19 090b 	adds.w	r9, r9, fp
 800b61e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b622:	f04f 0100 	mov.w	r1, #0
 800b626:	f04f 0200 	mov.w	r2, #0
 800b62a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b62e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b632:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b636:	4689      	mov	r9, r1
 800b638:	4692      	mov	sl, r2
 800b63a:	eb1b 0509 	adds.w	r5, fp, r9
 800b63e:	eb4c 060a 	adc.w	r6, ip, sl
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	4619      	mov	r1, r3
 800b648:	f04f 0200 	mov.w	r2, #0
 800b64c:	f04f 0300 	mov.w	r3, #0
 800b650:	f04f 0400 	mov.w	r4, #0
 800b654:	0094      	lsls	r4, r2, #2
 800b656:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b65a:	008b      	lsls	r3, r1, #2
 800b65c:	461a      	mov	r2, r3
 800b65e:	4623      	mov	r3, r4
 800b660:	4628      	mov	r0, r5
 800b662:	4631      	mov	r1, r6
 800b664:	f7f5 fab0 	bl	8000bc8 <__aeabi_uldivmod>
 800b668:	4603      	mov	r3, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	461a      	mov	r2, r3
 800b66e:	4b77      	ldr	r3, [pc, #476]	; (800b84c <UART_SetConfig+0x6f4>)
 800b670:	fba3 1302 	umull	r1, r3, r3, r2
 800b674:	095b      	lsrs	r3, r3, #5
 800b676:	2164      	movs	r1, #100	; 0x64
 800b678:	fb01 f303 	mul.w	r3, r1, r3
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	3332      	adds	r3, #50	; 0x32
 800b682:	4a72      	ldr	r2, [pc, #456]	; (800b84c <UART_SetConfig+0x6f4>)
 800b684:	fba2 2303 	umull	r2, r3, r2, r3
 800b688:	095b      	lsrs	r3, r3, #5
 800b68a:	f003 020f 	and.w	r2, r3, #15
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4442      	add	r2, r8
 800b694:	609a      	str	r2, [r3, #8]
 800b696:	e0d0      	b.n	800b83a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b698:	f7fd f8e0 	bl	800885c <HAL_RCC_GetPCLK1Freq>
 800b69c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	469a      	mov	sl, r3
 800b6a2:	f04f 0b00 	mov.w	fp, #0
 800b6a6:	46d0      	mov	r8, sl
 800b6a8:	46d9      	mov	r9, fp
 800b6aa:	eb18 0308 	adds.w	r3, r8, r8
 800b6ae:	eb49 0409 	adc.w	r4, r9, r9
 800b6b2:	4698      	mov	r8, r3
 800b6b4:	46a1      	mov	r9, r4
 800b6b6:	eb18 080a 	adds.w	r8, r8, sl
 800b6ba:	eb49 090b 	adc.w	r9, r9, fp
 800b6be:	f04f 0100 	mov.w	r1, #0
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b6ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b6ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b6d2:	4688      	mov	r8, r1
 800b6d4:	4691      	mov	r9, r2
 800b6d6:	eb1a 0508 	adds.w	r5, sl, r8
 800b6da:	eb4b 0609 	adc.w	r6, fp, r9
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	f04f 0400 	mov.w	r4, #0
 800b6f0:	0094      	lsls	r4, r2, #2
 800b6f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b6f6:	008b      	lsls	r3, r1, #2
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	4631      	mov	r1, r6
 800b700:	f7f5 fa62 	bl	8000bc8 <__aeabi_uldivmod>
 800b704:	4603      	mov	r3, r0
 800b706:	460c      	mov	r4, r1
 800b708:	461a      	mov	r2, r3
 800b70a:	4b50      	ldr	r3, [pc, #320]	; (800b84c <UART_SetConfig+0x6f4>)
 800b70c:	fba3 2302 	umull	r2, r3, r3, r2
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	469b      	mov	fp, r3
 800b71a:	f04f 0c00 	mov.w	ip, #0
 800b71e:	46d9      	mov	r9, fp
 800b720:	46e2      	mov	sl, ip
 800b722:	eb19 0309 	adds.w	r3, r9, r9
 800b726:	eb4a 040a 	adc.w	r4, sl, sl
 800b72a:	4699      	mov	r9, r3
 800b72c:	46a2      	mov	sl, r4
 800b72e:	eb19 090b 	adds.w	r9, r9, fp
 800b732:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b736:	f04f 0100 	mov.w	r1, #0
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b742:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b746:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b74a:	4689      	mov	r9, r1
 800b74c:	4692      	mov	sl, r2
 800b74e:	eb1b 0509 	adds.w	r5, fp, r9
 800b752:	eb4c 060a 	adc.w	r6, ip, sl
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	4619      	mov	r1, r3
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	f04f 0300 	mov.w	r3, #0
 800b764:	f04f 0400 	mov.w	r4, #0
 800b768:	0094      	lsls	r4, r2, #2
 800b76a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b76e:	008b      	lsls	r3, r1, #2
 800b770:	461a      	mov	r2, r3
 800b772:	4623      	mov	r3, r4
 800b774:	4628      	mov	r0, r5
 800b776:	4631      	mov	r1, r6
 800b778:	f7f5 fa26 	bl	8000bc8 <__aeabi_uldivmod>
 800b77c:	4603      	mov	r3, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	461a      	mov	r2, r3
 800b782:	4b32      	ldr	r3, [pc, #200]	; (800b84c <UART_SetConfig+0x6f4>)
 800b784:	fba3 1302 	umull	r1, r3, r3, r2
 800b788:	095b      	lsrs	r3, r3, #5
 800b78a:	2164      	movs	r1, #100	; 0x64
 800b78c:	fb01 f303 	mul.w	r3, r1, r3
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	3332      	adds	r3, #50	; 0x32
 800b796:	4a2d      	ldr	r2, [pc, #180]	; (800b84c <UART_SetConfig+0x6f4>)
 800b798:	fba2 2303 	umull	r2, r3, r2, r3
 800b79c:	095b      	lsrs	r3, r3, #5
 800b79e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7a2:	4498      	add	r8, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	469b      	mov	fp, r3
 800b7a8:	f04f 0c00 	mov.w	ip, #0
 800b7ac:	46d9      	mov	r9, fp
 800b7ae:	46e2      	mov	sl, ip
 800b7b0:	eb19 0309 	adds.w	r3, r9, r9
 800b7b4:	eb4a 040a 	adc.w	r4, sl, sl
 800b7b8:	4699      	mov	r9, r3
 800b7ba:	46a2      	mov	sl, r4
 800b7bc:	eb19 090b 	adds.w	r9, r9, fp
 800b7c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b7c4:	f04f 0100 	mov.w	r1, #0
 800b7c8:	f04f 0200 	mov.w	r2, #0
 800b7cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7d8:	4689      	mov	r9, r1
 800b7da:	4692      	mov	sl, r2
 800b7dc:	eb1b 0509 	adds.w	r5, fp, r9
 800b7e0:	eb4c 060a 	adc.w	r6, ip, sl
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	f04f 0200 	mov.w	r2, #0
 800b7ee:	f04f 0300 	mov.w	r3, #0
 800b7f2:	f04f 0400 	mov.w	r4, #0
 800b7f6:	0094      	lsls	r4, r2, #2
 800b7f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7fc:	008b      	lsls	r3, r1, #2
 800b7fe:	461a      	mov	r2, r3
 800b800:	4623      	mov	r3, r4
 800b802:	4628      	mov	r0, r5
 800b804:	4631      	mov	r1, r6
 800b806:	f7f5 f9df 	bl	8000bc8 <__aeabi_uldivmod>
 800b80a:	4603      	mov	r3, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	461a      	mov	r2, r3
 800b810:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <UART_SetConfig+0x6f4>)
 800b812:	fba3 1302 	umull	r1, r3, r3, r2
 800b816:	095b      	lsrs	r3, r3, #5
 800b818:	2164      	movs	r1, #100	; 0x64
 800b81a:	fb01 f303 	mul.w	r3, r1, r3
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	011b      	lsls	r3, r3, #4
 800b822:	3332      	adds	r3, #50	; 0x32
 800b824:	4a09      	ldr	r2, [pc, #36]	; (800b84c <UART_SetConfig+0x6f4>)
 800b826:	fba2 2303 	umull	r2, r3, r2, r3
 800b82a:	095b      	lsrs	r3, r3, #5
 800b82c:	f003 020f 	and.w	r2, r3, #15
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4442      	add	r2, r8
 800b836:	609a      	str	r2, [r3, #8]
}
 800b838:	e7ff      	b.n	800b83a <UART_SetConfig+0x6e2>
 800b83a:	bf00      	nop
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	40011000 	.word	0x40011000
 800b848:	40011400 	.word	0x40011400
 800b84c:	51eb851f 	.word	0x51eb851f

0800b850 <__errno>:
 800b850:	4b01      	ldr	r3, [pc, #4]	; (800b858 <__errno+0x8>)
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	20000068 	.word	0x20000068

0800b85c <__libc_init_array>:
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	4e0d      	ldr	r6, [pc, #52]	; (800b894 <__libc_init_array+0x38>)
 800b860:	4c0d      	ldr	r4, [pc, #52]	; (800b898 <__libc_init_array+0x3c>)
 800b862:	1ba4      	subs	r4, r4, r6
 800b864:	10a4      	asrs	r4, r4, #2
 800b866:	2500      	movs	r5, #0
 800b868:	42a5      	cmp	r5, r4
 800b86a:	d109      	bne.n	800b880 <__libc_init_array+0x24>
 800b86c:	4e0b      	ldr	r6, [pc, #44]	; (800b89c <__libc_init_array+0x40>)
 800b86e:	4c0c      	ldr	r4, [pc, #48]	; (800b8a0 <__libc_init_array+0x44>)
 800b870:	f002 f876 	bl	800d960 <_init>
 800b874:	1ba4      	subs	r4, r4, r6
 800b876:	10a4      	asrs	r4, r4, #2
 800b878:	2500      	movs	r5, #0
 800b87a:	42a5      	cmp	r5, r4
 800b87c:	d105      	bne.n	800b88a <__libc_init_array+0x2e>
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b884:	4798      	blx	r3
 800b886:	3501      	adds	r5, #1
 800b888:	e7ee      	b.n	800b868 <__libc_init_array+0xc>
 800b88a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b88e:	4798      	blx	r3
 800b890:	3501      	adds	r5, #1
 800b892:	e7f2      	b.n	800b87a <__libc_init_array+0x1e>
 800b894:	0800dfd0 	.word	0x0800dfd0
 800b898:	0800dfd0 	.word	0x0800dfd0
 800b89c:	0800dfd0 	.word	0x0800dfd0
 800b8a0:	0800dfd4 	.word	0x0800dfd4

0800b8a4 <memset>:
 800b8a4:	4402      	add	r2, r0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d100      	bne.n	800b8ae <memset+0xa>
 800b8ac:	4770      	bx	lr
 800b8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b8b2:	e7f9      	b.n	800b8a8 <memset+0x4>

0800b8b4 <__cvt>:
 800b8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b8:	ec55 4b10 	vmov	r4, r5, d0
 800b8bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b8be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8c2:	2d00      	cmp	r5, #0
 800b8c4:	460e      	mov	r6, r1
 800b8c6:	4691      	mov	r9, r2
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	bfb8      	it	lt
 800b8cc:	4622      	movlt	r2, r4
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	f027 0720 	bic.w	r7, r7, #32
 800b8d4:	bfbb      	ittet	lt
 800b8d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8da:	461d      	movlt	r5, r3
 800b8dc:	2300      	movge	r3, #0
 800b8de:	232d      	movlt	r3, #45	; 0x2d
 800b8e0:	bfb8      	it	lt
 800b8e2:	4614      	movlt	r4, r2
 800b8e4:	2f46      	cmp	r7, #70	; 0x46
 800b8e6:	700b      	strb	r3, [r1, #0]
 800b8e8:	d004      	beq.n	800b8f4 <__cvt+0x40>
 800b8ea:	2f45      	cmp	r7, #69	; 0x45
 800b8ec:	d100      	bne.n	800b8f0 <__cvt+0x3c>
 800b8ee:	3601      	adds	r6, #1
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	e000      	b.n	800b8f6 <__cvt+0x42>
 800b8f4:	2103      	movs	r1, #3
 800b8f6:	ab03      	add	r3, sp, #12
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	ab02      	add	r3, sp, #8
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	4632      	mov	r2, r6
 800b900:	4653      	mov	r3, sl
 800b902:	ec45 4b10 	vmov	d0, r4, r5
 800b906:	f000 fcf7 	bl	800c2f8 <_dtoa_r>
 800b90a:	2f47      	cmp	r7, #71	; 0x47
 800b90c:	4680      	mov	r8, r0
 800b90e:	d102      	bne.n	800b916 <__cvt+0x62>
 800b910:	f019 0f01 	tst.w	r9, #1
 800b914:	d026      	beq.n	800b964 <__cvt+0xb0>
 800b916:	2f46      	cmp	r7, #70	; 0x46
 800b918:	eb08 0906 	add.w	r9, r8, r6
 800b91c:	d111      	bne.n	800b942 <__cvt+0x8e>
 800b91e:	f898 3000 	ldrb.w	r3, [r8]
 800b922:	2b30      	cmp	r3, #48	; 0x30
 800b924:	d10a      	bne.n	800b93c <__cvt+0x88>
 800b926:	2200      	movs	r2, #0
 800b928:	2300      	movs	r3, #0
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f5 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 800b932:	b918      	cbnz	r0, 800b93c <__cvt+0x88>
 800b934:	f1c6 0601 	rsb	r6, r6, #1
 800b938:	f8ca 6000 	str.w	r6, [sl]
 800b93c:	f8da 3000 	ldr.w	r3, [sl]
 800b940:	4499      	add	r9, r3
 800b942:	2200      	movs	r2, #0
 800b944:	2300      	movs	r3, #0
 800b946:	4620      	mov	r0, r4
 800b948:	4629      	mov	r1, r5
 800b94a:	f7f5 f8cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800b94e:	b938      	cbnz	r0, 800b960 <__cvt+0xac>
 800b950:	2230      	movs	r2, #48	; 0x30
 800b952:	9b03      	ldr	r3, [sp, #12]
 800b954:	454b      	cmp	r3, r9
 800b956:	d205      	bcs.n	800b964 <__cvt+0xb0>
 800b958:	1c59      	adds	r1, r3, #1
 800b95a:	9103      	str	r1, [sp, #12]
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	e7f8      	b.n	800b952 <__cvt+0x9e>
 800b960:	f8cd 900c 	str.w	r9, [sp, #12]
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b968:	eba3 0308 	sub.w	r3, r3, r8
 800b96c:	4640      	mov	r0, r8
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	b004      	add	sp, #16
 800b972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b976 <__exponent>:
 800b976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b978:	2900      	cmp	r1, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	bfba      	itte	lt
 800b97e:	4249      	neglt	r1, r1
 800b980:	232d      	movlt	r3, #45	; 0x2d
 800b982:	232b      	movge	r3, #43	; 0x2b
 800b984:	2909      	cmp	r1, #9
 800b986:	f804 2b02 	strb.w	r2, [r4], #2
 800b98a:	7043      	strb	r3, [r0, #1]
 800b98c:	dd20      	ble.n	800b9d0 <__exponent+0x5a>
 800b98e:	f10d 0307 	add.w	r3, sp, #7
 800b992:	461f      	mov	r7, r3
 800b994:	260a      	movs	r6, #10
 800b996:	fb91 f5f6 	sdiv	r5, r1, r6
 800b99a:	fb06 1115 	mls	r1, r6, r5, r1
 800b99e:	3130      	adds	r1, #48	; 0x30
 800b9a0:	2d09      	cmp	r5, #9
 800b9a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9a6:	f103 32ff 	add.w	r2, r3, #4294967295
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	dc09      	bgt.n	800b9c2 <__exponent+0x4c>
 800b9ae:	3130      	adds	r1, #48	; 0x30
 800b9b0:	3b02      	subs	r3, #2
 800b9b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b9b6:	42bb      	cmp	r3, r7
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	d304      	bcc.n	800b9c6 <__exponent+0x50>
 800b9bc:	1a10      	subs	r0, r2, r0
 800b9be:	b003      	add	sp, #12
 800b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	e7e7      	b.n	800b996 <__exponent+0x20>
 800b9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ca:	f804 2b01 	strb.w	r2, [r4], #1
 800b9ce:	e7f2      	b.n	800b9b6 <__exponent+0x40>
 800b9d0:	2330      	movs	r3, #48	; 0x30
 800b9d2:	4419      	add	r1, r3
 800b9d4:	7083      	strb	r3, [r0, #2]
 800b9d6:	1d02      	adds	r2, r0, #4
 800b9d8:	70c1      	strb	r1, [r0, #3]
 800b9da:	e7ef      	b.n	800b9bc <__exponent+0x46>

0800b9dc <_printf_float>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	b08d      	sub	sp, #52	; 0x34
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	461f      	mov	r7, r3
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	f001 fa3b 	bl	800ce68 <_localeconv_r>
 800b9f2:	6803      	ldr	r3, [r0, #0]
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7f4 fbf4 	bl	80001e4 <strlen>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800ba00:	f8d8 3000 	ldr.w	r3, [r8]
 800ba04:	9005      	str	r0, [sp, #20]
 800ba06:	3307      	adds	r3, #7
 800ba08:	f023 0307 	bic.w	r3, r3, #7
 800ba0c:	f103 0208 	add.w	r2, r3, #8
 800ba10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba14:	f8d4 b000 	ldr.w	fp, [r4]
 800ba18:	f8c8 2000 	str.w	r2, [r8]
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba2c:	9307      	str	r3, [sp, #28]
 800ba2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba32:	f04f 32ff 	mov.w	r2, #4294967295
 800ba36:	4ba7      	ldr	r3, [pc, #668]	; (800bcd4 <_printf_float+0x2f8>)
 800ba38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba3c:	f7f5 f886 	bl	8000b4c <__aeabi_dcmpun>
 800ba40:	bb70      	cbnz	r0, 800baa0 <_printf_float+0xc4>
 800ba42:	f04f 32ff 	mov.w	r2, #4294967295
 800ba46:	4ba3      	ldr	r3, [pc, #652]	; (800bcd4 <_printf_float+0x2f8>)
 800ba48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba4c:	f7f5 f860 	bl	8000b10 <__aeabi_dcmple>
 800ba50:	bb30      	cbnz	r0, 800baa0 <_printf_float+0xc4>
 800ba52:	2200      	movs	r2, #0
 800ba54:	2300      	movs	r3, #0
 800ba56:	4640      	mov	r0, r8
 800ba58:	4649      	mov	r1, r9
 800ba5a:	f7f5 f84f 	bl	8000afc <__aeabi_dcmplt>
 800ba5e:	b110      	cbz	r0, 800ba66 <_printf_float+0x8a>
 800ba60:	232d      	movs	r3, #45	; 0x2d
 800ba62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba66:	4a9c      	ldr	r2, [pc, #624]	; (800bcd8 <_printf_float+0x2fc>)
 800ba68:	4b9c      	ldr	r3, [pc, #624]	; (800bcdc <_printf_float+0x300>)
 800ba6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ba6e:	bf8c      	ite	hi
 800ba70:	4690      	movhi	r8, r2
 800ba72:	4698      	movls	r8, r3
 800ba74:	2303      	movs	r3, #3
 800ba76:	f02b 0204 	bic.w	r2, fp, #4
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	6022      	str	r2, [r4, #0]
 800ba7e:	f04f 0900 	mov.w	r9, #0
 800ba82:	9700      	str	r7, [sp, #0]
 800ba84:	4633      	mov	r3, r6
 800ba86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba88:	4621      	mov	r1, r4
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f000 f9e6 	bl	800be5c <_printf_common>
 800ba90:	3001      	adds	r0, #1
 800ba92:	f040 808d 	bne.w	800bbb0 <_printf_float+0x1d4>
 800ba96:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9a:	b00d      	add	sp, #52	; 0x34
 800ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa0:	4642      	mov	r2, r8
 800baa2:	464b      	mov	r3, r9
 800baa4:	4640      	mov	r0, r8
 800baa6:	4649      	mov	r1, r9
 800baa8:	f7f5 f850 	bl	8000b4c <__aeabi_dcmpun>
 800baac:	b110      	cbz	r0, 800bab4 <_printf_float+0xd8>
 800baae:	4a8c      	ldr	r2, [pc, #560]	; (800bce0 <_printf_float+0x304>)
 800bab0:	4b8c      	ldr	r3, [pc, #560]	; (800bce4 <_printf_float+0x308>)
 800bab2:	e7da      	b.n	800ba6a <_printf_float+0x8e>
 800bab4:	6861      	ldr	r1, [r4, #4]
 800bab6:	1c4b      	adds	r3, r1, #1
 800bab8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800babc:	a80a      	add	r0, sp, #40	; 0x28
 800babe:	d13e      	bne.n	800bb3e <_printf_float+0x162>
 800bac0:	2306      	movs	r3, #6
 800bac2:	6063      	str	r3, [r4, #4]
 800bac4:	2300      	movs	r3, #0
 800bac6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800baca:	ab09      	add	r3, sp, #36	; 0x24
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	ec49 8b10 	vmov	d0, r8, r9
 800bad2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bad6:	6022      	str	r2, [r4, #0]
 800bad8:	f8cd a004 	str.w	sl, [sp, #4]
 800badc:	6861      	ldr	r1, [r4, #4]
 800bade:	4628      	mov	r0, r5
 800bae0:	f7ff fee8 	bl	800b8b4 <__cvt>
 800bae4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bae8:	2b47      	cmp	r3, #71	; 0x47
 800baea:	4680      	mov	r8, r0
 800baec:	d109      	bne.n	800bb02 <_printf_float+0x126>
 800baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf0:	1cd8      	adds	r0, r3, #3
 800baf2:	db02      	blt.n	800bafa <_printf_float+0x11e>
 800baf4:	6862      	ldr	r2, [r4, #4]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	dd47      	ble.n	800bb8a <_printf_float+0x1ae>
 800bafa:	f1aa 0a02 	sub.w	sl, sl, #2
 800bafe:	fa5f fa8a 	uxtb.w	sl, sl
 800bb02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb08:	d824      	bhi.n	800bb54 <_printf_float+0x178>
 800bb0a:	3901      	subs	r1, #1
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb12:	9109      	str	r1, [sp, #36]	; 0x24
 800bb14:	f7ff ff2f 	bl	800b976 <__exponent>
 800bb18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb1a:	1813      	adds	r3, r2, r0
 800bb1c:	2a01      	cmp	r2, #1
 800bb1e:	4681      	mov	r9, r0
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	dc02      	bgt.n	800bb2a <_printf_float+0x14e>
 800bb24:	6822      	ldr	r2, [r4, #0]
 800bb26:	07d1      	lsls	r1, r2, #31
 800bb28:	d501      	bpl.n	800bb2e <_printf_float+0x152>
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	6123      	str	r3, [r4, #16]
 800bb2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0a5      	beq.n	800ba82 <_printf_float+0xa6>
 800bb36:	232d      	movs	r3, #45	; 0x2d
 800bb38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb3c:	e7a1      	b.n	800ba82 <_printf_float+0xa6>
 800bb3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bb42:	f000 8177 	beq.w	800be34 <_printf_float+0x458>
 800bb46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bb4a:	d1bb      	bne.n	800bac4 <_printf_float+0xe8>
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	d1b9      	bne.n	800bac4 <_printf_float+0xe8>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7b6      	b.n	800bac2 <_printf_float+0xe6>
 800bb54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bb58:	d119      	bne.n	800bb8e <_printf_float+0x1b2>
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	dd0c      	ble.n	800bb7a <_printf_float+0x19e>
 800bb60:	6121      	str	r1, [r4, #16]
 800bb62:	b913      	cbnz	r3, 800bb6a <_printf_float+0x18e>
 800bb64:	6822      	ldr	r2, [r4, #0]
 800bb66:	07d2      	lsls	r2, r2, #31
 800bb68:	d502      	bpl.n	800bb70 <_printf_float+0x194>
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	440b      	add	r3, r1
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	65a3      	str	r3, [r4, #88]	; 0x58
 800bb74:	f04f 0900 	mov.w	r9, #0
 800bb78:	e7d9      	b.n	800bb2e <_printf_float+0x152>
 800bb7a:	b913      	cbnz	r3, 800bb82 <_printf_float+0x1a6>
 800bb7c:	6822      	ldr	r2, [r4, #0]
 800bb7e:	07d0      	lsls	r0, r2, #31
 800bb80:	d501      	bpl.n	800bb86 <_printf_float+0x1aa>
 800bb82:	3302      	adds	r3, #2
 800bb84:	e7f3      	b.n	800bb6e <_printf_float+0x192>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e7f1      	b.n	800bb6e <_printf_float+0x192>
 800bb8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bb8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb92:	4293      	cmp	r3, r2
 800bb94:	db05      	blt.n	800bba2 <_printf_float+0x1c6>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	6123      	str	r3, [r4, #16]
 800bb9a:	07d1      	lsls	r1, r2, #31
 800bb9c:	d5e8      	bpl.n	800bb70 <_printf_float+0x194>
 800bb9e:	3301      	adds	r3, #1
 800bba0:	e7e5      	b.n	800bb6e <_printf_float+0x192>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfd4      	ite	le
 800bba6:	f1c3 0302 	rsble	r3, r3, #2
 800bbaa:	2301      	movgt	r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	e7de      	b.n	800bb6e <_printf_float+0x192>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	055a      	lsls	r2, r3, #21
 800bbb4:	d407      	bmi.n	800bbc6 <_printf_float+0x1ea>
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	4642      	mov	r2, r8
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d12b      	bne.n	800bc1c <_printf_float+0x240>
 800bbc4:	e767      	b.n	800ba96 <_printf_float+0xba>
 800bbc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bbca:	f240 80dc 	bls.w	800bd86 <_printf_float+0x3aa>
 800bbce:	2200      	movs	r2, #0
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbd6:	f7f4 ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 800bbda:	2800      	cmp	r0, #0
 800bbdc:	d033      	beq.n	800bc46 <_printf_float+0x26a>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	4a41      	ldr	r2, [pc, #260]	; (800bce8 <_printf_float+0x30c>)
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	f43f af54 	beq.w	800ba96 <_printf_float+0xba>
 800bbee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	db02      	blt.n	800bbfc <_printf_float+0x220>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	07d8      	lsls	r0, r3, #31
 800bbfa:	d50f      	bpl.n	800bc1c <_printf_float+0x240>
 800bbfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc00:	4631      	mov	r1, r6
 800bc02:	4628      	mov	r0, r5
 800bc04:	47b8      	blx	r7
 800bc06:	3001      	adds	r0, #1
 800bc08:	f43f af45 	beq.w	800ba96 <_printf_float+0xba>
 800bc0c:	f04f 0800 	mov.w	r8, #0
 800bc10:	f104 091a 	add.w	r9, r4, #26
 800bc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc16:	3b01      	subs	r3, #1
 800bc18:	4543      	cmp	r3, r8
 800bc1a:	dc09      	bgt.n	800bc30 <_printf_float+0x254>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	079b      	lsls	r3, r3, #30
 800bc20:	f100 8103 	bmi.w	800be2a <_printf_float+0x44e>
 800bc24:	68e0      	ldr	r0, [r4, #12]
 800bc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc28:	4298      	cmp	r0, r3
 800bc2a:	bfb8      	it	lt
 800bc2c:	4618      	movlt	r0, r3
 800bc2e:	e734      	b.n	800ba9a <_printf_float+0xbe>
 800bc30:	2301      	movs	r3, #1
 800bc32:	464a      	mov	r2, r9
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f43f af2b 	beq.w	800ba96 <_printf_float+0xba>
 800bc40:	f108 0801 	add.w	r8, r8, #1
 800bc44:	e7e6      	b.n	800bc14 <_printf_float+0x238>
 800bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dc2b      	bgt.n	800bca4 <_printf_float+0x2c8>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	4a26      	ldr	r2, [pc, #152]	; (800bce8 <_printf_float+0x30c>)
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f af1d 	beq.w	800ba96 <_printf_float+0xba>
 800bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5e:	b923      	cbnz	r3, 800bc6a <_printf_float+0x28e>
 800bc60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc62:	b913      	cbnz	r3, 800bc6a <_printf_float+0x28e>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	07d9      	lsls	r1, r3, #31
 800bc68:	d5d8      	bpl.n	800bc1c <_printf_float+0x240>
 800bc6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	f43f af0e 	beq.w	800ba96 <_printf_float+0xba>
 800bc7a:	f04f 0900 	mov.w	r9, #0
 800bc7e:	f104 0a1a 	add.w	sl, r4, #26
 800bc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc84:	425b      	negs	r3, r3
 800bc86:	454b      	cmp	r3, r9
 800bc88:	dc01      	bgt.n	800bc8e <_printf_float+0x2b2>
 800bc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8c:	e794      	b.n	800bbb8 <_printf_float+0x1dc>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	4652      	mov	r2, sl
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b8      	blx	r7
 800bc98:	3001      	adds	r0, #1
 800bc9a:	f43f aefc 	beq.w	800ba96 <_printf_float+0xba>
 800bc9e:	f109 0901 	add.w	r9, r9, #1
 800bca2:	e7ee      	b.n	800bc82 <_printf_float+0x2a6>
 800bca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	bfa8      	it	ge
 800bcac:	461a      	movge	r2, r3
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	4691      	mov	r9, r2
 800bcb2:	dd07      	ble.n	800bcc4 <_printf_float+0x2e8>
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4642      	mov	r2, r8
 800bcba:	4628      	mov	r0, r5
 800bcbc:	47b8      	blx	r7
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f43f aee9 	beq.w	800ba96 <_printf_float+0xba>
 800bcc4:	f104 031a 	add.w	r3, r4, #26
 800bcc8:	f04f 0b00 	mov.w	fp, #0
 800bccc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd0:	9306      	str	r3, [sp, #24]
 800bcd2:	e015      	b.n	800bd00 <_printf_float+0x324>
 800bcd4:	7fefffff 	.word	0x7fefffff
 800bcd8:	0800dd70 	.word	0x0800dd70
 800bcdc:	0800dd6c 	.word	0x0800dd6c
 800bce0:	0800dd78 	.word	0x0800dd78
 800bce4:	0800dd74 	.word	0x0800dd74
 800bce8:	0800dd7c 	.word	0x0800dd7c
 800bcec:	2301      	movs	r3, #1
 800bcee:	9a06      	ldr	r2, [sp, #24]
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	47b8      	blx	r7
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	f43f aecd 	beq.w	800ba96 <_printf_float+0xba>
 800bcfc:	f10b 0b01 	add.w	fp, fp, #1
 800bd00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd04:	ebaa 0309 	sub.w	r3, sl, r9
 800bd08:	455b      	cmp	r3, fp
 800bd0a:	dcef      	bgt.n	800bcec <_printf_float+0x310>
 800bd0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd10:	429a      	cmp	r2, r3
 800bd12:	44d0      	add	r8, sl
 800bd14:	db15      	blt.n	800bd42 <_printf_float+0x366>
 800bd16:	6823      	ldr	r3, [r4, #0]
 800bd18:	07da      	lsls	r2, r3, #31
 800bd1a:	d412      	bmi.n	800bd42 <_printf_float+0x366>
 800bd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd20:	eba3 020a 	sub.w	r2, r3, sl
 800bd24:	eba3 0a01 	sub.w	sl, r3, r1
 800bd28:	4592      	cmp	sl, r2
 800bd2a:	bfa8      	it	ge
 800bd2c:	4692      	movge	sl, r2
 800bd2e:	f1ba 0f00 	cmp.w	sl, #0
 800bd32:	dc0e      	bgt.n	800bd52 <_printf_float+0x376>
 800bd34:	f04f 0800 	mov.w	r8, #0
 800bd38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd3c:	f104 091a 	add.w	r9, r4, #26
 800bd40:	e019      	b.n	800bd76 <_printf_float+0x39a>
 800bd42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d1e5      	bne.n	800bd1c <_printf_float+0x340>
 800bd50:	e6a1      	b.n	800ba96 <_printf_float+0xba>
 800bd52:	4653      	mov	r3, sl
 800bd54:	4642      	mov	r2, r8
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d1e9      	bne.n	800bd34 <_printf_float+0x358>
 800bd60:	e699      	b.n	800ba96 <_printf_float+0xba>
 800bd62:	2301      	movs	r3, #1
 800bd64:	464a      	mov	r2, r9
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f43f ae92 	beq.w	800ba96 <_printf_float+0xba>
 800bd72:	f108 0801 	add.w	r8, r8, #1
 800bd76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd7a:	1a9b      	subs	r3, r3, r2
 800bd7c:	eba3 030a 	sub.w	r3, r3, sl
 800bd80:	4543      	cmp	r3, r8
 800bd82:	dcee      	bgt.n	800bd62 <_printf_float+0x386>
 800bd84:	e74a      	b.n	800bc1c <_printf_float+0x240>
 800bd86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd88:	2a01      	cmp	r2, #1
 800bd8a:	dc01      	bgt.n	800bd90 <_printf_float+0x3b4>
 800bd8c:	07db      	lsls	r3, r3, #31
 800bd8e:	d53a      	bpl.n	800be06 <_printf_float+0x42a>
 800bd90:	2301      	movs	r3, #1
 800bd92:	4642      	mov	r2, r8
 800bd94:	4631      	mov	r1, r6
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b8      	blx	r7
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f43f ae7b 	beq.w	800ba96 <_printf_float+0xba>
 800bda0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda4:	4631      	mov	r1, r6
 800bda6:	4628      	mov	r0, r5
 800bda8:	47b8      	blx	r7
 800bdaa:	3001      	adds	r0, #1
 800bdac:	f108 0801 	add.w	r8, r8, #1
 800bdb0:	f43f ae71 	beq.w	800ba96 <_printf_float+0xba>
 800bdb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f103 3aff 	add.w	sl, r3, #4294967295
 800bdbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f7f4 fe91 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdc6:	b9c8      	cbnz	r0, 800bdfc <_printf_float+0x420>
 800bdc8:	4653      	mov	r3, sl
 800bdca:	4642      	mov	r2, r8
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4628      	mov	r0, r5
 800bdd0:	47b8      	blx	r7
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d10e      	bne.n	800bdf4 <_printf_float+0x418>
 800bdd6:	e65e      	b.n	800ba96 <_printf_float+0xba>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	4652      	mov	r2, sl
 800bddc:	4631      	mov	r1, r6
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	f43f ae57 	beq.w	800ba96 <_printf_float+0xba>
 800bde8:	f108 0801 	add.w	r8, r8, #1
 800bdec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	4543      	cmp	r3, r8
 800bdf2:	dcf1      	bgt.n	800bdd8 <_printf_float+0x3fc>
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdfa:	e6de      	b.n	800bbba <_printf_float+0x1de>
 800bdfc:	f04f 0800 	mov.w	r8, #0
 800be00:	f104 0a1a 	add.w	sl, r4, #26
 800be04:	e7f2      	b.n	800bdec <_printf_float+0x410>
 800be06:	2301      	movs	r3, #1
 800be08:	e7df      	b.n	800bdca <_printf_float+0x3ee>
 800be0a:	2301      	movs	r3, #1
 800be0c:	464a      	mov	r2, r9
 800be0e:	4631      	mov	r1, r6
 800be10:	4628      	mov	r0, r5
 800be12:	47b8      	blx	r7
 800be14:	3001      	adds	r0, #1
 800be16:	f43f ae3e 	beq.w	800ba96 <_printf_float+0xba>
 800be1a:	f108 0801 	add.w	r8, r8, #1
 800be1e:	68e3      	ldr	r3, [r4, #12]
 800be20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	4543      	cmp	r3, r8
 800be26:	dcf0      	bgt.n	800be0a <_printf_float+0x42e>
 800be28:	e6fc      	b.n	800bc24 <_printf_float+0x248>
 800be2a:	f04f 0800 	mov.w	r8, #0
 800be2e:	f104 0919 	add.w	r9, r4, #25
 800be32:	e7f4      	b.n	800be1e <_printf_float+0x442>
 800be34:	2900      	cmp	r1, #0
 800be36:	f43f ae8b 	beq.w	800bb50 <_printf_float+0x174>
 800be3a:	2300      	movs	r3, #0
 800be3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800be40:	ab09      	add	r3, sp, #36	; 0x24
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	ec49 8b10 	vmov	d0, r8, r9
 800be48:	6022      	str	r2, [r4, #0]
 800be4a:	f8cd a004 	str.w	sl, [sp, #4]
 800be4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be52:	4628      	mov	r0, r5
 800be54:	f7ff fd2e 	bl	800b8b4 <__cvt>
 800be58:	4680      	mov	r8, r0
 800be5a:	e648      	b.n	800baee <_printf_float+0x112>

0800be5c <_printf_common>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	4691      	mov	r9, r2
 800be62:	461f      	mov	r7, r3
 800be64:	688a      	ldr	r2, [r1, #8]
 800be66:	690b      	ldr	r3, [r1, #16]
 800be68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be6c:	4293      	cmp	r3, r2
 800be6e:	bfb8      	it	lt
 800be70:	4613      	movlt	r3, r2
 800be72:	f8c9 3000 	str.w	r3, [r9]
 800be76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be7a:	4606      	mov	r6, r0
 800be7c:	460c      	mov	r4, r1
 800be7e:	b112      	cbz	r2, 800be86 <_printf_common+0x2a>
 800be80:	3301      	adds	r3, #1
 800be82:	f8c9 3000 	str.w	r3, [r9]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	0699      	lsls	r1, r3, #26
 800be8a:	bf42      	ittt	mi
 800be8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800be90:	3302      	addmi	r3, #2
 800be92:	f8c9 3000 	strmi.w	r3, [r9]
 800be96:	6825      	ldr	r5, [r4, #0]
 800be98:	f015 0506 	ands.w	r5, r5, #6
 800be9c:	d107      	bne.n	800beae <_printf_common+0x52>
 800be9e:	f104 0a19 	add.w	sl, r4, #25
 800bea2:	68e3      	ldr	r3, [r4, #12]
 800bea4:	f8d9 2000 	ldr.w	r2, [r9]
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	42ab      	cmp	r3, r5
 800beac:	dc28      	bgt.n	800bf00 <_printf_common+0xa4>
 800beae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800beb2:	6822      	ldr	r2, [r4, #0]
 800beb4:	3300      	adds	r3, #0
 800beb6:	bf18      	it	ne
 800beb8:	2301      	movne	r3, #1
 800beba:	0692      	lsls	r2, r2, #26
 800bebc:	d42d      	bmi.n	800bf1a <_printf_common+0xbe>
 800bebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bec2:	4639      	mov	r1, r7
 800bec4:	4630      	mov	r0, r6
 800bec6:	47c0      	blx	r8
 800bec8:	3001      	adds	r0, #1
 800beca:	d020      	beq.n	800bf0e <_printf_common+0xb2>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	68e5      	ldr	r5, [r4, #12]
 800bed0:	f8d9 2000 	ldr.w	r2, [r9]
 800bed4:	f003 0306 	and.w	r3, r3, #6
 800bed8:	2b04      	cmp	r3, #4
 800beda:	bf08      	it	eq
 800bedc:	1aad      	subeq	r5, r5, r2
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	6922      	ldr	r2, [r4, #16]
 800bee2:	bf0c      	ite	eq
 800bee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee8:	2500      	movne	r5, #0
 800beea:	4293      	cmp	r3, r2
 800beec:	bfc4      	itt	gt
 800beee:	1a9b      	subgt	r3, r3, r2
 800bef0:	18ed      	addgt	r5, r5, r3
 800bef2:	f04f 0900 	mov.w	r9, #0
 800bef6:	341a      	adds	r4, #26
 800bef8:	454d      	cmp	r5, r9
 800befa:	d11a      	bne.n	800bf32 <_printf_common+0xd6>
 800befc:	2000      	movs	r0, #0
 800befe:	e008      	b.n	800bf12 <_printf_common+0xb6>
 800bf00:	2301      	movs	r3, #1
 800bf02:	4652      	mov	r2, sl
 800bf04:	4639      	mov	r1, r7
 800bf06:	4630      	mov	r0, r6
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d103      	bne.n	800bf16 <_printf_common+0xba>
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf16:	3501      	adds	r5, #1
 800bf18:	e7c3      	b.n	800bea2 <_printf_common+0x46>
 800bf1a:	18e1      	adds	r1, r4, r3
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	2030      	movs	r0, #48	; 0x30
 800bf20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf24:	4422      	add	r2, r4
 800bf26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf2e:	3302      	adds	r3, #2
 800bf30:	e7c5      	b.n	800bebe <_printf_common+0x62>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4622      	mov	r2, r4
 800bf36:	4639      	mov	r1, r7
 800bf38:	4630      	mov	r0, r6
 800bf3a:	47c0      	blx	r8
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d0e6      	beq.n	800bf0e <_printf_common+0xb2>
 800bf40:	f109 0901 	add.w	r9, r9, #1
 800bf44:	e7d8      	b.n	800bef8 <_printf_common+0x9c>
	...

0800bf48 <_printf_i>:
 800bf48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bf50:	460c      	mov	r4, r1
 800bf52:	7e09      	ldrb	r1, [r1, #24]
 800bf54:	b085      	sub	sp, #20
 800bf56:	296e      	cmp	r1, #110	; 0x6e
 800bf58:	4617      	mov	r7, r2
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	4698      	mov	r8, r3
 800bf5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf60:	f000 80b3 	beq.w	800c0ca <_printf_i+0x182>
 800bf64:	d822      	bhi.n	800bfac <_printf_i+0x64>
 800bf66:	2963      	cmp	r1, #99	; 0x63
 800bf68:	d036      	beq.n	800bfd8 <_printf_i+0x90>
 800bf6a:	d80a      	bhi.n	800bf82 <_printf_i+0x3a>
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	f000 80b9 	beq.w	800c0e4 <_printf_i+0x19c>
 800bf72:	2958      	cmp	r1, #88	; 0x58
 800bf74:	f000 8083 	beq.w	800c07e <_printf_i+0x136>
 800bf78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bf80:	e032      	b.n	800bfe8 <_printf_i+0xa0>
 800bf82:	2964      	cmp	r1, #100	; 0x64
 800bf84:	d001      	beq.n	800bf8a <_printf_i+0x42>
 800bf86:	2969      	cmp	r1, #105	; 0x69
 800bf88:	d1f6      	bne.n	800bf78 <_printf_i+0x30>
 800bf8a:	6820      	ldr	r0, [r4, #0]
 800bf8c:	6813      	ldr	r3, [r2, #0]
 800bf8e:	0605      	lsls	r5, r0, #24
 800bf90:	f103 0104 	add.w	r1, r3, #4
 800bf94:	d52a      	bpl.n	800bfec <_printf_i+0xa4>
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6011      	str	r1, [r2, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	da03      	bge.n	800bfa6 <_printf_i+0x5e>
 800bf9e:	222d      	movs	r2, #45	; 0x2d
 800bfa0:	425b      	negs	r3, r3
 800bfa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bfa6:	486f      	ldr	r0, [pc, #444]	; (800c164 <_printf_i+0x21c>)
 800bfa8:	220a      	movs	r2, #10
 800bfaa:	e039      	b.n	800c020 <_printf_i+0xd8>
 800bfac:	2973      	cmp	r1, #115	; 0x73
 800bfae:	f000 809d 	beq.w	800c0ec <_printf_i+0x1a4>
 800bfb2:	d808      	bhi.n	800bfc6 <_printf_i+0x7e>
 800bfb4:	296f      	cmp	r1, #111	; 0x6f
 800bfb6:	d020      	beq.n	800bffa <_printf_i+0xb2>
 800bfb8:	2970      	cmp	r1, #112	; 0x70
 800bfba:	d1dd      	bne.n	800bf78 <_printf_i+0x30>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	f043 0320 	orr.w	r3, r3, #32
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	e003      	b.n	800bfce <_printf_i+0x86>
 800bfc6:	2975      	cmp	r1, #117	; 0x75
 800bfc8:	d017      	beq.n	800bffa <_printf_i+0xb2>
 800bfca:	2978      	cmp	r1, #120	; 0x78
 800bfcc:	d1d4      	bne.n	800bf78 <_printf_i+0x30>
 800bfce:	2378      	movs	r3, #120	; 0x78
 800bfd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfd4:	4864      	ldr	r0, [pc, #400]	; (800c168 <_printf_i+0x220>)
 800bfd6:	e055      	b.n	800c084 <_printf_i+0x13c>
 800bfd8:	6813      	ldr	r3, [r2, #0]
 800bfda:	1d19      	adds	r1, r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6011      	str	r1, [r2, #0]
 800bfe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e08c      	b.n	800c106 <_printf_i+0x1be>
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6011      	str	r1, [r2, #0]
 800bff0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bff4:	bf18      	it	ne
 800bff6:	b21b      	sxthne	r3, r3
 800bff8:	e7cf      	b.n	800bf9a <_printf_i+0x52>
 800bffa:	6813      	ldr	r3, [r2, #0]
 800bffc:	6825      	ldr	r5, [r4, #0]
 800bffe:	1d18      	adds	r0, r3, #4
 800c000:	6010      	str	r0, [r2, #0]
 800c002:	0628      	lsls	r0, r5, #24
 800c004:	d501      	bpl.n	800c00a <_printf_i+0xc2>
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	e002      	b.n	800c010 <_printf_i+0xc8>
 800c00a:	0668      	lsls	r0, r5, #25
 800c00c:	d5fb      	bpl.n	800c006 <_printf_i+0xbe>
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	4854      	ldr	r0, [pc, #336]	; (800c164 <_printf_i+0x21c>)
 800c012:	296f      	cmp	r1, #111	; 0x6f
 800c014:	bf14      	ite	ne
 800c016:	220a      	movne	r2, #10
 800c018:	2208      	moveq	r2, #8
 800c01a:	2100      	movs	r1, #0
 800c01c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c020:	6865      	ldr	r5, [r4, #4]
 800c022:	60a5      	str	r5, [r4, #8]
 800c024:	2d00      	cmp	r5, #0
 800c026:	f2c0 8095 	blt.w	800c154 <_printf_i+0x20c>
 800c02a:	6821      	ldr	r1, [r4, #0]
 800c02c:	f021 0104 	bic.w	r1, r1, #4
 800c030:	6021      	str	r1, [r4, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d13d      	bne.n	800c0b2 <_printf_i+0x16a>
 800c036:	2d00      	cmp	r5, #0
 800c038:	f040 808e 	bne.w	800c158 <_printf_i+0x210>
 800c03c:	4665      	mov	r5, ip
 800c03e:	2a08      	cmp	r2, #8
 800c040:	d10b      	bne.n	800c05a <_printf_i+0x112>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	07db      	lsls	r3, r3, #31
 800c046:	d508      	bpl.n	800c05a <_printf_i+0x112>
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	6862      	ldr	r2, [r4, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	bfde      	ittt	le
 800c050:	2330      	movle	r3, #48	; 0x30
 800c052:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c05a:	ebac 0305 	sub.w	r3, ip, r5
 800c05e:	6123      	str	r3, [r4, #16]
 800c060:	f8cd 8000 	str.w	r8, [sp]
 800c064:	463b      	mov	r3, r7
 800c066:	aa03      	add	r2, sp, #12
 800c068:	4621      	mov	r1, r4
 800c06a:	4630      	mov	r0, r6
 800c06c:	f7ff fef6 	bl	800be5c <_printf_common>
 800c070:	3001      	adds	r0, #1
 800c072:	d14d      	bne.n	800c110 <_printf_i+0x1c8>
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	b005      	add	sp, #20
 800c07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c07e:	4839      	ldr	r0, [pc, #228]	; (800c164 <_printf_i+0x21c>)
 800c080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c084:	6813      	ldr	r3, [r2, #0]
 800c086:	6821      	ldr	r1, [r4, #0]
 800c088:	1d1d      	adds	r5, r3, #4
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6015      	str	r5, [r2, #0]
 800c08e:	060a      	lsls	r2, r1, #24
 800c090:	d50b      	bpl.n	800c0aa <_printf_i+0x162>
 800c092:	07ca      	lsls	r2, r1, #31
 800c094:	bf44      	itt	mi
 800c096:	f041 0120 	orrmi.w	r1, r1, #32
 800c09a:	6021      	strmi	r1, [r4, #0]
 800c09c:	b91b      	cbnz	r3, 800c0a6 <_printf_i+0x15e>
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	f022 0220 	bic.w	r2, r2, #32
 800c0a4:	6022      	str	r2, [r4, #0]
 800c0a6:	2210      	movs	r2, #16
 800c0a8:	e7b7      	b.n	800c01a <_printf_i+0xd2>
 800c0aa:	064d      	lsls	r5, r1, #25
 800c0ac:	bf48      	it	mi
 800c0ae:	b29b      	uxthmi	r3, r3
 800c0b0:	e7ef      	b.n	800c092 <_printf_i+0x14a>
 800c0b2:	4665      	mov	r5, ip
 800c0b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0b8:	fb02 3311 	mls	r3, r2, r1, r3
 800c0bc:	5cc3      	ldrb	r3, [r0, r3]
 800c0be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	d1f5      	bne.n	800c0b4 <_printf_i+0x16c>
 800c0c8:	e7b9      	b.n	800c03e <_printf_i+0xf6>
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	6825      	ldr	r5, [r4, #0]
 800c0ce:	6961      	ldr	r1, [r4, #20]
 800c0d0:	1d18      	adds	r0, r3, #4
 800c0d2:	6010      	str	r0, [r2, #0]
 800c0d4:	0628      	lsls	r0, r5, #24
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	d501      	bpl.n	800c0de <_printf_i+0x196>
 800c0da:	6019      	str	r1, [r3, #0]
 800c0dc:	e002      	b.n	800c0e4 <_printf_i+0x19c>
 800c0de:	066a      	lsls	r2, r5, #25
 800c0e0:	d5fb      	bpl.n	800c0da <_printf_i+0x192>
 800c0e2:	8019      	strh	r1, [r3, #0]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	4665      	mov	r5, ip
 800c0ea:	e7b9      	b.n	800c060 <_printf_i+0x118>
 800c0ec:	6813      	ldr	r3, [r2, #0]
 800c0ee:	1d19      	adds	r1, r3, #4
 800c0f0:	6011      	str	r1, [r2, #0]
 800c0f2:	681d      	ldr	r5, [r3, #0]
 800c0f4:	6862      	ldr	r2, [r4, #4]
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f7f4 f881 	bl	8000200 <memchr>
 800c0fe:	b108      	cbz	r0, 800c104 <_printf_i+0x1bc>
 800c100:	1b40      	subs	r0, r0, r5
 800c102:	6060      	str	r0, [r4, #4]
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	6123      	str	r3, [r4, #16]
 800c108:	2300      	movs	r3, #0
 800c10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c10e:	e7a7      	b.n	800c060 <_printf_i+0x118>
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	462a      	mov	r2, r5
 800c114:	4639      	mov	r1, r7
 800c116:	4630      	mov	r0, r6
 800c118:	47c0      	blx	r8
 800c11a:	3001      	adds	r0, #1
 800c11c:	d0aa      	beq.n	800c074 <_printf_i+0x12c>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	079b      	lsls	r3, r3, #30
 800c122:	d413      	bmi.n	800c14c <_printf_i+0x204>
 800c124:	68e0      	ldr	r0, [r4, #12]
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	4298      	cmp	r0, r3
 800c12a:	bfb8      	it	lt
 800c12c:	4618      	movlt	r0, r3
 800c12e:	e7a3      	b.n	800c078 <_printf_i+0x130>
 800c130:	2301      	movs	r3, #1
 800c132:	464a      	mov	r2, r9
 800c134:	4639      	mov	r1, r7
 800c136:	4630      	mov	r0, r6
 800c138:	47c0      	blx	r8
 800c13a:	3001      	adds	r0, #1
 800c13c:	d09a      	beq.n	800c074 <_printf_i+0x12c>
 800c13e:	3501      	adds	r5, #1
 800c140:	68e3      	ldr	r3, [r4, #12]
 800c142:	9a03      	ldr	r2, [sp, #12]
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	42ab      	cmp	r3, r5
 800c148:	dcf2      	bgt.n	800c130 <_printf_i+0x1e8>
 800c14a:	e7eb      	b.n	800c124 <_printf_i+0x1dc>
 800c14c:	2500      	movs	r5, #0
 800c14e:	f104 0919 	add.w	r9, r4, #25
 800c152:	e7f5      	b.n	800c140 <_printf_i+0x1f8>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d1ac      	bne.n	800c0b2 <_printf_i+0x16a>
 800c158:	7803      	ldrb	r3, [r0, #0]
 800c15a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c15e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c162:	e76c      	b.n	800c03e <_printf_i+0xf6>
 800c164:	0800dd7e 	.word	0x0800dd7e
 800c168:	0800dd8f 	.word	0x0800dd8f

0800c16c <siprintf>:
 800c16c:	b40e      	push	{r1, r2, r3}
 800c16e:	b500      	push	{lr}
 800c170:	b09c      	sub	sp, #112	; 0x70
 800c172:	ab1d      	add	r3, sp, #116	; 0x74
 800c174:	9002      	str	r0, [sp, #8]
 800c176:	9006      	str	r0, [sp, #24]
 800c178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c17c:	4809      	ldr	r0, [pc, #36]	; (800c1a4 <siprintf+0x38>)
 800c17e:	9107      	str	r1, [sp, #28]
 800c180:	9104      	str	r1, [sp, #16]
 800c182:	4909      	ldr	r1, [pc, #36]	; (800c1a8 <siprintf+0x3c>)
 800c184:	f853 2b04 	ldr.w	r2, [r3], #4
 800c188:	9105      	str	r1, [sp, #20]
 800c18a:	6800      	ldr	r0, [r0, #0]
 800c18c:	9301      	str	r3, [sp, #4]
 800c18e:	a902      	add	r1, sp, #8
 800c190:	f001 fa76 	bl	800d680 <_svfiprintf_r>
 800c194:	9b02      	ldr	r3, [sp, #8]
 800c196:	2200      	movs	r2, #0
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	b01c      	add	sp, #112	; 0x70
 800c19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1a0:	b003      	add	sp, #12
 800c1a2:	4770      	bx	lr
 800c1a4:	20000068 	.word	0x20000068
 800c1a8:	ffff0208 	.word	0xffff0208

0800c1ac <strcat>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	1c5c      	adds	r4, r3, #1
 800c1b4:	b93a      	cbnz	r2, 800c1c6 <strcat+0x1a>
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1c0:	2a00      	cmp	r2, #0
 800c1c2:	d1f9      	bne.n	800c1b8 <strcat+0xc>
 800c1c4:	bd10      	pop	{r4, pc}
 800c1c6:	4623      	mov	r3, r4
 800c1c8:	e7f2      	b.n	800c1b0 <strcat+0x4>

0800c1ca <strcpy>:
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1d0:	f803 2b01 	strb.w	r2, [r3], #1
 800c1d4:	2a00      	cmp	r2, #0
 800c1d6:	d1f9      	bne.n	800c1cc <strcpy+0x2>
 800c1d8:	4770      	bx	lr

0800c1da <quorem>:
 800c1da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1de:	6903      	ldr	r3, [r0, #16]
 800c1e0:	690c      	ldr	r4, [r1, #16]
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	f2c0 8082 	blt.w	800c2ee <quorem+0x114>
 800c1ea:	3c01      	subs	r4, #1
 800c1ec:	f101 0714 	add.w	r7, r1, #20
 800c1f0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c1f4:	f100 0614 	add.w	r6, r0, #20
 800c1f8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c1fc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c200:	eb06 030c 	add.w	r3, r6, ip
 800c204:	3501      	adds	r5, #1
 800c206:	eb07 090c 	add.w	r9, r7, ip
 800c20a:	9301      	str	r3, [sp, #4]
 800c20c:	fbb0 f5f5 	udiv	r5, r0, r5
 800c210:	b395      	cbz	r5, 800c278 <quorem+0x9e>
 800c212:	f04f 0a00 	mov.w	sl, #0
 800c216:	4638      	mov	r0, r7
 800c218:	46b6      	mov	lr, r6
 800c21a:	46d3      	mov	fp, sl
 800c21c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c220:	b293      	uxth	r3, r2
 800c222:	fb05 a303 	mla	r3, r5, r3, sl
 800c226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	ebab 0303 	sub.w	r3, fp, r3
 800c230:	0c12      	lsrs	r2, r2, #16
 800c232:	f8de b000 	ldr.w	fp, [lr]
 800c236:	fb05 a202 	mla	r2, r5, r2, sl
 800c23a:	fa13 f38b 	uxtah	r3, r3, fp
 800c23e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c242:	fa1f fb82 	uxth.w	fp, r2
 800c246:	f8de 2000 	ldr.w	r2, [lr]
 800c24a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c24e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c252:	b29b      	uxth	r3, r3
 800c254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c258:	4581      	cmp	r9, r0
 800c25a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c25e:	f84e 3b04 	str.w	r3, [lr], #4
 800c262:	d2db      	bcs.n	800c21c <quorem+0x42>
 800c264:	f856 300c 	ldr.w	r3, [r6, ip]
 800c268:	b933      	cbnz	r3, 800c278 <quorem+0x9e>
 800c26a:	9b01      	ldr	r3, [sp, #4]
 800c26c:	3b04      	subs	r3, #4
 800c26e:	429e      	cmp	r6, r3
 800c270:	461a      	mov	r2, r3
 800c272:	d330      	bcc.n	800c2d6 <quorem+0xfc>
 800c274:	f8c8 4010 	str.w	r4, [r8, #16]
 800c278:	4640      	mov	r0, r8
 800c27a:	f001 f82b 	bl	800d2d4 <__mcmp>
 800c27e:	2800      	cmp	r0, #0
 800c280:	db25      	blt.n	800c2ce <quorem+0xf4>
 800c282:	3501      	adds	r5, #1
 800c284:	4630      	mov	r0, r6
 800c286:	f04f 0c00 	mov.w	ip, #0
 800c28a:	f857 2b04 	ldr.w	r2, [r7], #4
 800c28e:	f8d0 e000 	ldr.w	lr, [r0]
 800c292:	b293      	uxth	r3, r2
 800c294:	ebac 0303 	sub.w	r3, ip, r3
 800c298:	0c12      	lsrs	r2, r2, #16
 800c29a:	fa13 f38e 	uxtah	r3, r3, lr
 800c29e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ac:	45b9      	cmp	r9, r7
 800c2ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c2b2:	f840 3b04 	str.w	r3, [r0], #4
 800c2b6:	d2e8      	bcs.n	800c28a <quorem+0xb0>
 800c2b8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c2bc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c2c0:	b92a      	cbnz	r2, 800c2ce <quorem+0xf4>
 800c2c2:	3b04      	subs	r3, #4
 800c2c4:	429e      	cmp	r6, r3
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	d30b      	bcc.n	800c2e2 <quorem+0x108>
 800c2ca:	f8c8 4010 	str.w	r4, [r8, #16]
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	b003      	add	sp, #12
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	6812      	ldr	r2, [r2, #0]
 800c2d8:	3b04      	subs	r3, #4
 800c2da:	2a00      	cmp	r2, #0
 800c2dc:	d1ca      	bne.n	800c274 <quorem+0x9a>
 800c2de:	3c01      	subs	r4, #1
 800c2e0:	e7c5      	b.n	800c26e <quorem+0x94>
 800c2e2:	6812      	ldr	r2, [r2, #0]
 800c2e4:	3b04      	subs	r3, #4
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	d1ef      	bne.n	800c2ca <quorem+0xf0>
 800c2ea:	3c01      	subs	r4, #1
 800c2ec:	e7ea      	b.n	800c2c4 <quorem+0xea>
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	e7ee      	b.n	800c2d0 <quorem+0xf6>
 800c2f2:	0000      	movs	r0, r0
 800c2f4:	0000      	movs	r0, r0
	...

0800c2f8 <_dtoa_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	ec57 6b10 	vmov	r6, r7, d0
 800c300:	b097      	sub	sp, #92	; 0x5c
 800c302:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c304:	9106      	str	r1, [sp, #24]
 800c306:	4604      	mov	r4, r0
 800c308:	920b      	str	r2, [sp, #44]	; 0x2c
 800c30a:	9312      	str	r3, [sp, #72]	; 0x48
 800c30c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c310:	e9cd 6700 	strd	r6, r7, [sp]
 800c314:	b93d      	cbnz	r5, 800c326 <_dtoa_r+0x2e>
 800c316:	2010      	movs	r0, #16
 800c318:	f000 fdb4 	bl	800ce84 <malloc>
 800c31c:	6260      	str	r0, [r4, #36]	; 0x24
 800c31e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c322:	6005      	str	r5, [r0, #0]
 800c324:	60c5      	str	r5, [r0, #12]
 800c326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c328:	6819      	ldr	r1, [r3, #0]
 800c32a:	b151      	cbz	r1, 800c342 <_dtoa_r+0x4a>
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	604a      	str	r2, [r1, #4]
 800c330:	2301      	movs	r3, #1
 800c332:	4093      	lsls	r3, r2
 800c334:	608b      	str	r3, [r1, #8]
 800c336:	4620      	mov	r0, r4
 800c338:	f000 fdeb 	bl	800cf12 <_Bfree>
 800c33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33e:	2200      	movs	r2, #0
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	1e3b      	subs	r3, r7, #0
 800c344:	bfbb      	ittet	lt
 800c346:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c34a:	9301      	strlt	r3, [sp, #4]
 800c34c:	2300      	movge	r3, #0
 800c34e:	2201      	movlt	r2, #1
 800c350:	bfac      	ite	ge
 800c352:	f8c8 3000 	strge.w	r3, [r8]
 800c356:	f8c8 2000 	strlt.w	r2, [r8]
 800c35a:	4baf      	ldr	r3, [pc, #700]	; (800c618 <_dtoa_r+0x320>)
 800c35c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c360:	ea33 0308 	bics.w	r3, r3, r8
 800c364:	d114      	bne.n	800c390 <_dtoa_r+0x98>
 800c366:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c368:	f242 730f 	movw	r3, #9999	; 0x270f
 800c36c:	6013      	str	r3, [r2, #0]
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	b923      	cbnz	r3, 800c37c <_dtoa_r+0x84>
 800c372:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c376:	2800      	cmp	r0, #0
 800c378:	f000 8542 	beq.w	800ce00 <_dtoa_r+0xb08>
 800c37c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c37e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c62c <_dtoa_r+0x334>
 800c382:	2b00      	cmp	r3, #0
 800c384:	f000 8544 	beq.w	800ce10 <_dtoa_r+0xb18>
 800c388:	f10b 0303 	add.w	r3, fp, #3
 800c38c:	f000 bd3e 	b.w	800ce0c <_dtoa_r+0xb14>
 800c390:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c394:	2200      	movs	r2, #0
 800c396:	2300      	movs	r3, #0
 800c398:	4630      	mov	r0, r6
 800c39a:	4639      	mov	r1, r7
 800c39c:	f7f4 fba4 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3a0:	4681      	mov	r9, r0
 800c3a2:	b168      	cbz	r0, 800c3c0 <_dtoa_r+0xc8>
 800c3a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f000 8524 	beq.w	800cdfa <_dtoa_r+0xb02>
 800c3b2:	4b9a      	ldr	r3, [pc, #616]	; (800c61c <_dtoa_r+0x324>)
 800c3b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3b6:	f103 3bff 	add.w	fp, r3, #4294967295
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	f000 bd28 	b.w	800ce10 <_dtoa_r+0xb18>
 800c3c0:	aa14      	add	r2, sp, #80	; 0x50
 800c3c2:	a915      	add	r1, sp, #84	; 0x54
 800c3c4:	ec47 6b10 	vmov	d0, r6, r7
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fffa 	bl	800d3c2 <__d2b>
 800c3ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3d2:	9004      	str	r0, [sp, #16]
 800c3d4:	2d00      	cmp	r5, #0
 800c3d6:	d07c      	beq.n	800c4d2 <_dtoa_r+0x1da>
 800c3d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c3e0:	46b2      	mov	sl, r6
 800c3e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c3e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4b8b      	ldr	r3, [pc, #556]	; (800c620 <_dtoa_r+0x328>)
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	4659      	mov	r1, fp
 800c3f6:	f7f3 ff57 	bl	80002a8 <__aeabi_dsub>
 800c3fa:	a381      	add	r3, pc, #516	; (adr r3, 800c600 <_dtoa_r+0x308>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f7f4 f90a 	bl	8000618 <__aeabi_dmul>
 800c404:	a380      	add	r3, pc, #512	; (adr r3, 800c608 <_dtoa_r+0x310>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	f7f3 ff4f 	bl	80002ac <__adddf3>
 800c40e:	4606      	mov	r6, r0
 800c410:	4628      	mov	r0, r5
 800c412:	460f      	mov	r7, r1
 800c414:	f7f4 f896 	bl	8000544 <__aeabi_i2d>
 800c418:	a37d      	add	r3, pc, #500	; (adr r3, 800c610 <_dtoa_r+0x318>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f4 f8fb 	bl	8000618 <__aeabi_dmul>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4630      	mov	r0, r6
 800c428:	4639      	mov	r1, r7
 800c42a:	f7f3 ff3f 	bl	80002ac <__adddf3>
 800c42e:	4606      	mov	r6, r0
 800c430:	460f      	mov	r7, r1
 800c432:	f7f4 fba1 	bl	8000b78 <__aeabi_d2iz>
 800c436:	2200      	movs	r2, #0
 800c438:	4682      	mov	sl, r0
 800c43a:	2300      	movs	r3, #0
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f7f4 fb5c 	bl	8000afc <__aeabi_dcmplt>
 800c444:	b148      	cbz	r0, 800c45a <_dtoa_r+0x162>
 800c446:	4650      	mov	r0, sl
 800c448:	f7f4 f87c 	bl	8000544 <__aeabi_i2d>
 800c44c:	4632      	mov	r2, r6
 800c44e:	463b      	mov	r3, r7
 800c450:	f7f4 fb4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c454:	b908      	cbnz	r0, 800c45a <_dtoa_r+0x162>
 800c456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c45a:	f1ba 0f16 	cmp.w	sl, #22
 800c45e:	d859      	bhi.n	800c514 <_dtoa_r+0x21c>
 800c460:	4970      	ldr	r1, [pc, #448]	; (800c624 <_dtoa_r+0x32c>)
 800c462:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c46a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c46e:	f7f4 fb63 	bl	8000b38 <__aeabi_dcmpgt>
 800c472:	2800      	cmp	r0, #0
 800c474:	d050      	beq.n	800c518 <_dtoa_r+0x220>
 800c476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c47a:	2300      	movs	r3, #0
 800c47c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c47e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c480:	1b5d      	subs	r5, r3, r5
 800c482:	f1b5 0801 	subs.w	r8, r5, #1
 800c486:	bf49      	itett	mi
 800c488:	f1c5 0301 	rsbmi	r3, r5, #1
 800c48c:	2300      	movpl	r3, #0
 800c48e:	9305      	strmi	r3, [sp, #20]
 800c490:	f04f 0800 	movmi.w	r8, #0
 800c494:	bf58      	it	pl
 800c496:	9305      	strpl	r3, [sp, #20]
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	db3e      	blt.n	800c51c <_dtoa_r+0x224>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	44d0      	add	r8, sl
 800c4a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c4a6:	9307      	str	r3, [sp, #28]
 800c4a8:	9b06      	ldr	r3, [sp, #24]
 800c4aa:	2b09      	cmp	r3, #9
 800c4ac:	f200 8090 	bhi.w	800c5d0 <_dtoa_r+0x2d8>
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	bfc4      	itt	gt
 800c4b4:	3b04      	subgt	r3, #4
 800c4b6:	9306      	strgt	r3, [sp, #24]
 800c4b8:	9b06      	ldr	r3, [sp, #24]
 800c4ba:	f1a3 0302 	sub.w	r3, r3, #2
 800c4be:	bfcc      	ite	gt
 800c4c0:	2500      	movgt	r5, #0
 800c4c2:	2501      	movle	r5, #1
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	f200 808f 	bhi.w	800c5e8 <_dtoa_r+0x2f0>
 800c4ca:	e8df f003 	tbb	[pc, r3]
 800c4ce:	7f7d      	.short	0x7f7d
 800c4d0:	7131      	.short	0x7131
 800c4d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c4d6:	441d      	add	r5, r3
 800c4d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c4dc:	2820      	cmp	r0, #32
 800c4de:	dd13      	ble.n	800c508 <_dtoa_r+0x210>
 800c4e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c4e4:	9b00      	ldr	r3, [sp, #0]
 800c4e6:	fa08 f800 	lsl.w	r8, r8, r0
 800c4ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c4ee:	fa23 f000 	lsr.w	r0, r3, r0
 800c4f2:	ea48 0000 	orr.w	r0, r8, r0
 800c4f6:	f7f4 f815 	bl	8000524 <__aeabi_ui2d>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c502:	3d01      	subs	r5, #1
 800c504:	9313      	str	r3, [sp, #76]	; 0x4c
 800c506:	e772      	b.n	800c3ee <_dtoa_r+0xf6>
 800c508:	9b00      	ldr	r3, [sp, #0]
 800c50a:	f1c0 0020 	rsb	r0, r0, #32
 800c50e:	fa03 f000 	lsl.w	r0, r3, r0
 800c512:	e7f0      	b.n	800c4f6 <_dtoa_r+0x1fe>
 800c514:	2301      	movs	r3, #1
 800c516:	e7b1      	b.n	800c47c <_dtoa_r+0x184>
 800c518:	900f      	str	r0, [sp, #60]	; 0x3c
 800c51a:	e7b0      	b.n	800c47e <_dtoa_r+0x186>
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	eba3 030a 	sub.w	r3, r3, sl
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	f1ca 0300 	rsb	r3, sl, #0
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	2300      	movs	r3, #0
 800c52c:	930e      	str	r3, [sp, #56]	; 0x38
 800c52e:	e7bb      	b.n	800c4a8 <_dtoa_r+0x1b0>
 800c530:	2301      	movs	r3, #1
 800c532:	930a      	str	r3, [sp, #40]	; 0x28
 800c534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	dd59      	ble.n	800c5ee <_dtoa_r+0x2f6>
 800c53a:	9302      	str	r3, [sp, #8]
 800c53c:	4699      	mov	r9, r3
 800c53e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c540:	2200      	movs	r2, #0
 800c542:	6072      	str	r2, [r6, #4]
 800c544:	2204      	movs	r2, #4
 800c546:	f102 0014 	add.w	r0, r2, #20
 800c54a:	4298      	cmp	r0, r3
 800c54c:	6871      	ldr	r1, [r6, #4]
 800c54e:	d953      	bls.n	800c5f8 <_dtoa_r+0x300>
 800c550:	4620      	mov	r0, r4
 800c552:	f000 fcaa 	bl	800ceaa <_Balloc>
 800c556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	f1b9 0f0e 	cmp.w	r9, #14
 800c55e:	f8d3 b000 	ldr.w	fp, [r3]
 800c562:	f200 80e6 	bhi.w	800c732 <_dtoa_r+0x43a>
 800c566:	2d00      	cmp	r5, #0
 800c568:	f000 80e3 	beq.w	800c732 <_dtoa_r+0x43a>
 800c56c:	ed9d 7b00 	vldr	d7, [sp]
 800c570:	f1ba 0f00 	cmp.w	sl, #0
 800c574:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c578:	dd74      	ble.n	800c664 <_dtoa_r+0x36c>
 800c57a:	4a2a      	ldr	r2, [pc, #168]	; (800c624 <_dtoa_r+0x32c>)
 800c57c:	f00a 030f 	and.w	r3, sl, #15
 800c580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c584:	ed93 7b00 	vldr	d7, [r3]
 800c588:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c58c:	06f0      	lsls	r0, r6, #27
 800c58e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c592:	d565      	bpl.n	800c660 <_dtoa_r+0x368>
 800c594:	4b24      	ldr	r3, [pc, #144]	; (800c628 <_dtoa_r+0x330>)
 800c596:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c59a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c59e:	f7f4 f965 	bl	800086c <__aeabi_ddiv>
 800c5a2:	e9cd 0100 	strd	r0, r1, [sp]
 800c5a6:	f006 060f 	and.w	r6, r6, #15
 800c5aa:	2503      	movs	r5, #3
 800c5ac:	4f1e      	ldr	r7, [pc, #120]	; (800c628 <_dtoa_r+0x330>)
 800c5ae:	e04c      	b.n	800c64a <_dtoa_r+0x352>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	930a      	str	r3, [sp, #40]	; 0x28
 800c5b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b6:	4453      	add	r3, sl
 800c5b8:	f103 0901 	add.w	r9, r3, #1
 800c5bc:	9302      	str	r3, [sp, #8]
 800c5be:	464b      	mov	r3, r9
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	bfb8      	it	lt
 800c5c4:	2301      	movlt	r3, #1
 800c5c6:	e7ba      	b.n	800c53e <_dtoa_r+0x246>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	e7b2      	b.n	800c532 <_dtoa_r+0x23a>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e7f0      	b.n	800c5b2 <_dtoa_r+0x2ba>
 800c5d0:	2501      	movs	r5, #1
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9306      	str	r3, [sp, #24]
 800c5d6:	950a      	str	r5, [sp, #40]	; 0x28
 800c5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5dc:	9302      	str	r3, [sp, #8]
 800c5de:	4699      	mov	r9, r3
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2312      	movs	r3, #18
 800c5e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5e6:	e7aa      	b.n	800c53e <_dtoa_r+0x246>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ec:	e7f4      	b.n	800c5d8 <_dtoa_r+0x2e0>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	9302      	str	r3, [sp, #8]
 800c5f2:	4699      	mov	r9, r3
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	e7f5      	b.n	800c5e4 <_dtoa_r+0x2ec>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	6071      	str	r1, [r6, #4]
 800c5fc:	0052      	lsls	r2, r2, #1
 800c5fe:	e7a2      	b.n	800c546 <_dtoa_r+0x24e>
 800c600:	636f4361 	.word	0x636f4361
 800c604:	3fd287a7 	.word	0x3fd287a7
 800c608:	8b60c8b3 	.word	0x8b60c8b3
 800c60c:	3fc68a28 	.word	0x3fc68a28
 800c610:	509f79fb 	.word	0x509f79fb
 800c614:	3fd34413 	.word	0x3fd34413
 800c618:	7ff00000 	.word	0x7ff00000
 800c61c:	0800dd7d 	.word	0x0800dd7d
 800c620:	3ff80000 	.word	0x3ff80000
 800c624:	0800ddd8 	.word	0x0800ddd8
 800c628:	0800ddb0 	.word	0x0800ddb0
 800c62c:	0800dda9 	.word	0x0800dda9
 800c630:	07f1      	lsls	r1, r6, #31
 800c632:	d508      	bpl.n	800c646 <_dtoa_r+0x34e>
 800c634:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c63c:	f7f3 ffec 	bl	8000618 <__aeabi_dmul>
 800c640:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c644:	3501      	adds	r5, #1
 800c646:	1076      	asrs	r6, r6, #1
 800c648:	3708      	adds	r7, #8
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	d1f0      	bne.n	800c630 <_dtoa_r+0x338>
 800c64e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c652:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c656:	f7f4 f909 	bl	800086c <__aeabi_ddiv>
 800c65a:	e9cd 0100 	strd	r0, r1, [sp]
 800c65e:	e01a      	b.n	800c696 <_dtoa_r+0x39e>
 800c660:	2502      	movs	r5, #2
 800c662:	e7a3      	b.n	800c5ac <_dtoa_r+0x2b4>
 800c664:	f000 80a0 	beq.w	800c7a8 <_dtoa_r+0x4b0>
 800c668:	f1ca 0600 	rsb	r6, sl, #0
 800c66c:	4b9f      	ldr	r3, [pc, #636]	; (800c8ec <_dtoa_r+0x5f4>)
 800c66e:	4fa0      	ldr	r7, [pc, #640]	; (800c8f0 <_dtoa_r+0x5f8>)
 800c670:	f006 020f 	and.w	r2, r6, #15
 800c674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c680:	f7f3 ffca 	bl	8000618 <__aeabi_dmul>
 800c684:	e9cd 0100 	strd	r0, r1, [sp]
 800c688:	1136      	asrs	r6, r6, #4
 800c68a:	2300      	movs	r3, #0
 800c68c:	2502      	movs	r5, #2
 800c68e:	2e00      	cmp	r6, #0
 800c690:	d17f      	bne.n	800c792 <_dtoa_r+0x49a>
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1e1      	bne.n	800c65a <_dtoa_r+0x362>
 800c696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8087 	beq.w	800c7ac <_dtoa_r+0x4b4>
 800c69e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	4b93      	ldr	r3, [pc, #588]	; (800c8f4 <_dtoa_r+0x5fc>)
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	f7f4 fa27 	bl	8000afc <__aeabi_dcmplt>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d07c      	beq.n	800c7ac <_dtoa_r+0x4b4>
 800c6b2:	f1b9 0f00 	cmp.w	r9, #0
 800c6b6:	d079      	beq.n	800c7ac <_dtoa_r+0x4b4>
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dd35      	ble.n	800c72a <_dtoa_r+0x432>
 800c6be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c6c2:	9308      	str	r3, [sp, #32]
 800c6c4:	4639      	mov	r1, r7
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	4b8b      	ldr	r3, [pc, #556]	; (800c8f8 <_dtoa_r+0x600>)
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7f3 ffa4 	bl	8000618 <__aeabi_dmul>
 800c6d0:	e9cd 0100 	strd	r0, r1, [sp]
 800c6d4:	9f02      	ldr	r7, [sp, #8]
 800c6d6:	3501      	adds	r5, #1
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f7f3 ff33 	bl	8000544 <__aeabi_i2d>
 800c6de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6e2:	f7f3 ff99 	bl	8000618 <__aeabi_dmul>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	4b84      	ldr	r3, [pc, #528]	; (800c8fc <_dtoa_r+0x604>)
 800c6ea:	f7f3 fddf 	bl	80002ac <__adddf3>
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c6f4:	2f00      	cmp	r7, #0
 800c6f6:	d15d      	bne.n	800c7b4 <_dtoa_r+0x4bc>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4b81      	ldr	r3, [pc, #516]	; (800c900 <_dtoa_r+0x608>)
 800c6fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c700:	f7f3 fdd2 	bl	80002a8 <__aeabi_dsub>
 800c704:	462a      	mov	r2, r5
 800c706:	4633      	mov	r3, r6
 800c708:	e9cd 0100 	strd	r0, r1, [sp]
 800c70c:	f7f4 fa14 	bl	8000b38 <__aeabi_dcmpgt>
 800c710:	2800      	cmp	r0, #0
 800c712:	f040 8288 	bne.w	800cc26 <_dtoa_r+0x92e>
 800c716:	462a      	mov	r2, r5
 800c718:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c720:	f7f4 f9ec 	bl	8000afc <__aeabi_dcmplt>
 800c724:	2800      	cmp	r0, #0
 800c726:	f040 827c 	bne.w	800cc22 <_dtoa_r+0x92a>
 800c72a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c72e:	e9cd 2300 	strd	r2, r3, [sp]
 800c732:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c734:	2b00      	cmp	r3, #0
 800c736:	f2c0 8150 	blt.w	800c9da <_dtoa_r+0x6e2>
 800c73a:	f1ba 0f0e 	cmp.w	sl, #14
 800c73e:	f300 814c 	bgt.w	800c9da <_dtoa_r+0x6e2>
 800c742:	4b6a      	ldr	r3, [pc, #424]	; (800c8ec <_dtoa_r+0x5f4>)
 800c744:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c748:	ed93 7b00 	vldr	d7, [r3]
 800c74c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c74e:	2b00      	cmp	r3, #0
 800c750:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c754:	f280 80d8 	bge.w	800c908 <_dtoa_r+0x610>
 800c758:	f1b9 0f00 	cmp.w	r9, #0
 800c75c:	f300 80d4 	bgt.w	800c908 <_dtoa_r+0x610>
 800c760:	f040 825e 	bne.w	800cc20 <_dtoa_r+0x928>
 800c764:	2200      	movs	r2, #0
 800c766:	4b66      	ldr	r3, [pc, #408]	; (800c900 <_dtoa_r+0x608>)
 800c768:	ec51 0b17 	vmov	r0, r1, d7
 800c76c:	f7f3 ff54 	bl	8000618 <__aeabi_dmul>
 800c770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c774:	f7f4 f9d6 	bl	8000b24 <__aeabi_dcmpge>
 800c778:	464f      	mov	r7, r9
 800c77a:	464e      	mov	r6, r9
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f040 8234 	bne.w	800cbea <_dtoa_r+0x8f2>
 800c782:	2331      	movs	r3, #49	; 0x31
 800c784:	f10b 0501 	add.w	r5, fp, #1
 800c788:	f88b 3000 	strb.w	r3, [fp]
 800c78c:	f10a 0a01 	add.w	sl, sl, #1
 800c790:	e22f      	b.n	800cbf2 <_dtoa_r+0x8fa>
 800c792:	07f2      	lsls	r2, r6, #31
 800c794:	d505      	bpl.n	800c7a2 <_dtoa_r+0x4aa>
 800c796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79a:	f7f3 ff3d 	bl	8000618 <__aeabi_dmul>
 800c79e:	3501      	adds	r5, #1
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	1076      	asrs	r6, r6, #1
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	e772      	b.n	800c68e <_dtoa_r+0x396>
 800c7a8:	2502      	movs	r5, #2
 800c7aa:	e774      	b.n	800c696 <_dtoa_r+0x39e>
 800c7ac:	f8cd a020 	str.w	sl, [sp, #32]
 800c7b0:	464f      	mov	r7, r9
 800c7b2:	e791      	b.n	800c6d8 <_dtoa_r+0x3e0>
 800c7b4:	4b4d      	ldr	r3, [pc, #308]	; (800c8ec <_dtoa_r+0x5f4>)
 800c7b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d047      	beq.n	800c854 <_dtoa_r+0x55c>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	494e      	ldr	r1, [pc, #312]	; (800c904 <_dtoa_r+0x60c>)
 800c7cc:	f7f4 f84e 	bl	800086c <__aeabi_ddiv>
 800c7d0:	462a      	mov	r2, r5
 800c7d2:	4633      	mov	r3, r6
 800c7d4:	f7f3 fd68 	bl	80002a8 <__aeabi_dsub>
 800c7d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7dc:	465d      	mov	r5, fp
 800c7de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7e2:	f7f4 f9c9 	bl	8000b78 <__aeabi_d2iz>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	f7f3 feac 	bl	8000544 <__aeabi_i2d>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7f4:	f7f3 fd58 	bl	80002a8 <__aeabi_dsub>
 800c7f8:	3630      	adds	r6, #48	; 0x30
 800c7fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c7fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c802:	e9cd 0100 	strd	r0, r1, [sp]
 800c806:	f7f4 f979 	bl	8000afc <__aeabi_dcmplt>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d163      	bne.n	800c8d6 <_dtoa_r+0x5de>
 800c80e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c812:	2000      	movs	r0, #0
 800c814:	4937      	ldr	r1, [pc, #220]	; (800c8f4 <_dtoa_r+0x5fc>)
 800c816:	f7f3 fd47 	bl	80002a8 <__aeabi_dsub>
 800c81a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c81e:	f7f4 f96d 	bl	8000afc <__aeabi_dcmplt>
 800c822:	2800      	cmp	r0, #0
 800c824:	f040 80b7 	bne.w	800c996 <_dtoa_r+0x69e>
 800c828:	eba5 030b 	sub.w	r3, r5, fp
 800c82c:	429f      	cmp	r7, r3
 800c82e:	f77f af7c 	ble.w	800c72a <_dtoa_r+0x432>
 800c832:	2200      	movs	r2, #0
 800c834:	4b30      	ldr	r3, [pc, #192]	; (800c8f8 <_dtoa_r+0x600>)
 800c836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c83a:	f7f3 feed 	bl	8000618 <__aeabi_dmul>
 800c83e:	2200      	movs	r2, #0
 800c840:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c844:	4b2c      	ldr	r3, [pc, #176]	; (800c8f8 <_dtoa_r+0x600>)
 800c846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c84a:	f7f3 fee5 	bl	8000618 <__aeabi_dmul>
 800c84e:	e9cd 0100 	strd	r0, r1, [sp]
 800c852:	e7c4      	b.n	800c7de <_dtoa_r+0x4e6>
 800c854:	462a      	mov	r2, r5
 800c856:	4633      	mov	r3, r6
 800c858:	f7f3 fede 	bl	8000618 <__aeabi_dmul>
 800c85c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c860:	eb0b 0507 	add.w	r5, fp, r7
 800c864:	465e      	mov	r6, fp
 800c866:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c86a:	f7f4 f985 	bl	8000b78 <__aeabi_d2iz>
 800c86e:	4607      	mov	r7, r0
 800c870:	f7f3 fe68 	bl	8000544 <__aeabi_i2d>
 800c874:	3730      	adds	r7, #48	; 0x30
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c87e:	f7f3 fd13 	bl	80002a8 <__aeabi_dsub>
 800c882:	f806 7b01 	strb.w	r7, [r6], #1
 800c886:	42ae      	cmp	r6, r5
 800c888:	e9cd 0100 	strd	r0, r1, [sp]
 800c88c:	f04f 0200 	mov.w	r2, #0
 800c890:	d126      	bne.n	800c8e0 <_dtoa_r+0x5e8>
 800c892:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <_dtoa_r+0x60c>)
 800c894:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c898:	f7f3 fd08 	bl	80002ac <__adddf3>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8a4:	f7f4 f948 	bl	8000b38 <__aeabi_dcmpgt>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d174      	bne.n	800c996 <_dtoa_r+0x69e>
 800c8ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	4914      	ldr	r1, [pc, #80]	; (800c904 <_dtoa_r+0x60c>)
 800c8b4:	f7f3 fcf8 	bl	80002a8 <__aeabi_dsub>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8c0:	f7f4 f91c 	bl	8000afc <__aeabi_dcmplt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f43f af30 	beq.w	800c72a <_dtoa_r+0x432>
 800c8ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8ce:	2b30      	cmp	r3, #48	; 0x30
 800c8d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c8d4:	d002      	beq.n	800c8dc <_dtoa_r+0x5e4>
 800c8d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8da:	e04a      	b.n	800c972 <_dtoa_r+0x67a>
 800c8dc:	4615      	mov	r5, r2
 800c8de:	e7f4      	b.n	800c8ca <_dtoa_r+0x5d2>
 800c8e0:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <_dtoa_r+0x600>)
 800c8e2:	f7f3 fe99 	bl	8000618 <__aeabi_dmul>
 800c8e6:	e9cd 0100 	strd	r0, r1, [sp]
 800c8ea:	e7bc      	b.n	800c866 <_dtoa_r+0x56e>
 800c8ec:	0800ddd8 	.word	0x0800ddd8
 800c8f0:	0800ddb0 	.word	0x0800ddb0
 800c8f4:	3ff00000 	.word	0x3ff00000
 800c8f8:	40240000 	.word	0x40240000
 800c8fc:	401c0000 	.word	0x401c0000
 800c900:	40140000 	.word	0x40140000
 800c904:	3fe00000 	.word	0x3fe00000
 800c908:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c90c:	465d      	mov	r5, fp
 800c90e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f7f3 ffa9 	bl	800086c <__aeabi_ddiv>
 800c91a:	f7f4 f92d 	bl	8000b78 <__aeabi_d2iz>
 800c91e:	4680      	mov	r8, r0
 800c920:	f7f3 fe10 	bl	8000544 <__aeabi_i2d>
 800c924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c928:	f7f3 fe76 	bl	8000618 <__aeabi_dmul>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	4630      	mov	r0, r6
 800c932:	4639      	mov	r1, r7
 800c934:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c938:	f7f3 fcb6 	bl	80002a8 <__aeabi_dsub>
 800c93c:	f805 6b01 	strb.w	r6, [r5], #1
 800c940:	eba5 060b 	sub.w	r6, r5, fp
 800c944:	45b1      	cmp	r9, r6
 800c946:	4602      	mov	r2, r0
 800c948:	460b      	mov	r3, r1
 800c94a:	d139      	bne.n	800c9c0 <_dtoa_r+0x6c8>
 800c94c:	f7f3 fcae 	bl	80002ac <__adddf3>
 800c950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c954:	4606      	mov	r6, r0
 800c956:	460f      	mov	r7, r1
 800c958:	f7f4 f8ee 	bl	8000b38 <__aeabi_dcmpgt>
 800c95c:	b9c8      	cbnz	r0, 800c992 <_dtoa_r+0x69a>
 800c95e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c962:	4630      	mov	r0, r6
 800c964:	4639      	mov	r1, r7
 800c966:	f7f4 f8bf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c96a:	b110      	cbz	r0, 800c972 <_dtoa_r+0x67a>
 800c96c:	f018 0f01 	tst.w	r8, #1
 800c970:	d10f      	bne.n	800c992 <_dtoa_r+0x69a>
 800c972:	9904      	ldr	r1, [sp, #16]
 800c974:	4620      	mov	r0, r4
 800c976:	f000 facc 	bl	800cf12 <_Bfree>
 800c97a:	2300      	movs	r3, #0
 800c97c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c97e:	702b      	strb	r3, [r5, #0]
 800c980:	f10a 0301 	add.w	r3, sl, #1
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f000 8241 	beq.w	800ce10 <_dtoa_r+0xb18>
 800c98e:	601d      	str	r5, [r3, #0]
 800c990:	e23e      	b.n	800ce10 <_dtoa_r+0xb18>
 800c992:	f8cd a020 	str.w	sl, [sp, #32]
 800c996:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c99a:	2a39      	cmp	r2, #57	; 0x39
 800c99c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c9a0:	d108      	bne.n	800c9b4 <_dtoa_r+0x6bc>
 800c9a2:	459b      	cmp	fp, r3
 800c9a4:	d10a      	bne.n	800c9bc <_dtoa_r+0x6c4>
 800c9a6:	9b08      	ldr	r3, [sp, #32]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	9308      	str	r3, [sp, #32]
 800c9ac:	2330      	movs	r3, #48	; 0x30
 800c9ae:	f88b 3000 	strb.w	r3, [fp]
 800c9b2:	465b      	mov	r3, fp
 800c9b4:	781a      	ldrb	r2, [r3, #0]
 800c9b6:	3201      	adds	r2, #1
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	e78c      	b.n	800c8d6 <_dtoa_r+0x5de>
 800c9bc:	461d      	mov	r5, r3
 800c9be:	e7ea      	b.n	800c996 <_dtoa_r+0x69e>
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4b9b      	ldr	r3, [pc, #620]	; (800cc30 <_dtoa_r+0x938>)
 800c9c4:	f7f3 fe28 	bl	8000618 <__aeabi_dmul>
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	f7f4 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d09a      	beq.n	800c90e <_dtoa_r+0x616>
 800c9d8:	e7cb      	b.n	800c972 <_dtoa_r+0x67a>
 800c9da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	f000 808b 	beq.w	800caf8 <_dtoa_r+0x800>
 800c9e2:	9a06      	ldr	r2, [sp, #24]
 800c9e4:	2a01      	cmp	r2, #1
 800c9e6:	dc6e      	bgt.n	800cac6 <_dtoa_r+0x7ce>
 800c9e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	d067      	beq.n	800cabe <_dtoa_r+0x7c6>
 800c9ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9f2:	9f07      	ldr	r7, [sp, #28]
 800c9f4:	9d05      	ldr	r5, [sp, #20]
 800c9f6:	9a05      	ldr	r2, [sp, #20]
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	441a      	add	r2, r3
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	9205      	str	r2, [sp, #20]
 800ca00:	4498      	add	r8, r3
 800ca02:	f000 fb26 	bl	800d052 <__i2b>
 800ca06:	4606      	mov	r6, r0
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	dd0c      	ble.n	800ca26 <_dtoa_r+0x72e>
 800ca0c:	f1b8 0f00 	cmp.w	r8, #0
 800ca10:	dd09      	ble.n	800ca26 <_dtoa_r+0x72e>
 800ca12:	4545      	cmp	r5, r8
 800ca14:	9a05      	ldr	r2, [sp, #20]
 800ca16:	462b      	mov	r3, r5
 800ca18:	bfa8      	it	ge
 800ca1a:	4643      	movge	r3, r8
 800ca1c:	1ad2      	subs	r2, r2, r3
 800ca1e:	9205      	str	r2, [sp, #20]
 800ca20:	1aed      	subs	r5, r5, r3
 800ca22:	eba8 0803 	sub.w	r8, r8, r3
 800ca26:	9b07      	ldr	r3, [sp, #28]
 800ca28:	b1eb      	cbz	r3, 800ca66 <_dtoa_r+0x76e>
 800ca2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d067      	beq.n	800cb00 <_dtoa_r+0x808>
 800ca30:	b18f      	cbz	r7, 800ca56 <_dtoa_r+0x75e>
 800ca32:	4631      	mov	r1, r6
 800ca34:	463a      	mov	r2, r7
 800ca36:	4620      	mov	r0, r4
 800ca38:	f000 fbaa 	bl	800d190 <__pow5mult>
 800ca3c:	9a04      	ldr	r2, [sp, #16]
 800ca3e:	4601      	mov	r1, r0
 800ca40:	4606      	mov	r6, r0
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fb0e 	bl	800d064 <__multiply>
 800ca48:	9904      	ldr	r1, [sp, #16]
 800ca4a:	9008      	str	r0, [sp, #32]
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fa60 	bl	800cf12 <_Bfree>
 800ca52:	9b08      	ldr	r3, [sp, #32]
 800ca54:	9304      	str	r3, [sp, #16]
 800ca56:	9b07      	ldr	r3, [sp, #28]
 800ca58:	1bda      	subs	r2, r3, r7
 800ca5a:	d004      	beq.n	800ca66 <_dtoa_r+0x76e>
 800ca5c:	9904      	ldr	r1, [sp, #16]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 fb96 	bl	800d190 <__pow5mult>
 800ca64:	9004      	str	r0, [sp, #16]
 800ca66:	2101      	movs	r1, #1
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 faf2 	bl	800d052 <__i2b>
 800ca6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca70:	4607      	mov	r7, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 81d0 	beq.w	800ce18 <_dtoa_r+0xb20>
 800ca78:	461a      	mov	r2, r3
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f000 fb87 	bl	800d190 <__pow5mult>
 800ca82:	9b06      	ldr	r3, [sp, #24]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	4607      	mov	r7, r0
 800ca88:	dc40      	bgt.n	800cb0c <_dtoa_r+0x814>
 800ca8a:	9b00      	ldr	r3, [sp, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d139      	bne.n	800cb04 <_dtoa_r+0x80c>
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d136      	bne.n	800cb08 <_dtoa_r+0x810>
 800ca9a:	9b01      	ldr	r3, [sp, #4]
 800ca9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caa0:	0d1b      	lsrs	r3, r3, #20
 800caa2:	051b      	lsls	r3, r3, #20
 800caa4:	b12b      	cbz	r3, 800cab2 <_dtoa_r+0x7ba>
 800caa6:	9b05      	ldr	r3, [sp, #20]
 800caa8:	3301      	adds	r3, #1
 800caaa:	9305      	str	r3, [sp, #20]
 800caac:	f108 0801 	add.w	r8, r8, #1
 800cab0:	2301      	movs	r3, #1
 800cab2:	9307      	str	r3, [sp, #28]
 800cab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d12a      	bne.n	800cb10 <_dtoa_r+0x818>
 800caba:	2001      	movs	r0, #1
 800cabc:	e030      	b.n	800cb20 <_dtoa_r+0x828>
 800cabe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cac0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cac4:	e795      	b.n	800c9f2 <_dtoa_r+0x6fa>
 800cac6:	9b07      	ldr	r3, [sp, #28]
 800cac8:	f109 37ff 	add.w	r7, r9, #4294967295
 800cacc:	42bb      	cmp	r3, r7
 800cace:	bfbf      	itttt	lt
 800cad0:	9b07      	ldrlt	r3, [sp, #28]
 800cad2:	9707      	strlt	r7, [sp, #28]
 800cad4:	1afa      	sublt	r2, r7, r3
 800cad6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cad8:	bfbb      	ittet	lt
 800cada:	189b      	addlt	r3, r3, r2
 800cadc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cade:	1bdf      	subge	r7, r3, r7
 800cae0:	2700      	movlt	r7, #0
 800cae2:	f1b9 0f00 	cmp.w	r9, #0
 800cae6:	bfb5      	itete	lt
 800cae8:	9b05      	ldrlt	r3, [sp, #20]
 800caea:	9d05      	ldrge	r5, [sp, #20]
 800caec:	eba3 0509 	sublt.w	r5, r3, r9
 800caf0:	464b      	movge	r3, r9
 800caf2:	bfb8      	it	lt
 800caf4:	2300      	movlt	r3, #0
 800caf6:	e77e      	b.n	800c9f6 <_dtoa_r+0x6fe>
 800caf8:	9f07      	ldr	r7, [sp, #28]
 800cafa:	9d05      	ldr	r5, [sp, #20]
 800cafc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cafe:	e783      	b.n	800ca08 <_dtoa_r+0x710>
 800cb00:	9a07      	ldr	r2, [sp, #28]
 800cb02:	e7ab      	b.n	800ca5c <_dtoa_r+0x764>
 800cb04:	2300      	movs	r3, #0
 800cb06:	e7d4      	b.n	800cab2 <_dtoa_r+0x7ba>
 800cb08:	9b00      	ldr	r3, [sp, #0]
 800cb0a:	e7d2      	b.n	800cab2 <_dtoa_r+0x7ba>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cb16:	6918      	ldr	r0, [r3, #16]
 800cb18:	f000 fa4d 	bl	800cfb6 <__hi0bits>
 800cb1c:	f1c0 0020 	rsb	r0, r0, #32
 800cb20:	4440      	add	r0, r8
 800cb22:	f010 001f 	ands.w	r0, r0, #31
 800cb26:	d047      	beq.n	800cbb8 <_dtoa_r+0x8c0>
 800cb28:	f1c0 0320 	rsb	r3, r0, #32
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	dd3b      	ble.n	800cba8 <_dtoa_r+0x8b0>
 800cb30:	9b05      	ldr	r3, [sp, #20]
 800cb32:	f1c0 001c 	rsb	r0, r0, #28
 800cb36:	4403      	add	r3, r0
 800cb38:	9305      	str	r3, [sp, #20]
 800cb3a:	4405      	add	r5, r0
 800cb3c:	4480      	add	r8, r0
 800cb3e:	9b05      	ldr	r3, [sp, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	dd05      	ble.n	800cb50 <_dtoa_r+0x858>
 800cb44:	461a      	mov	r2, r3
 800cb46:	9904      	ldr	r1, [sp, #16]
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fb6f 	bl	800d22c <__lshift>
 800cb4e:	9004      	str	r0, [sp, #16]
 800cb50:	f1b8 0f00 	cmp.w	r8, #0
 800cb54:	dd05      	ble.n	800cb62 <_dtoa_r+0x86a>
 800cb56:	4639      	mov	r1, r7
 800cb58:	4642      	mov	r2, r8
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 fb66 	bl	800d22c <__lshift>
 800cb60:	4607      	mov	r7, r0
 800cb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb64:	b353      	cbz	r3, 800cbbc <_dtoa_r+0x8c4>
 800cb66:	4639      	mov	r1, r7
 800cb68:	9804      	ldr	r0, [sp, #16]
 800cb6a:	f000 fbb3 	bl	800d2d4 <__mcmp>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	da24      	bge.n	800cbbc <_dtoa_r+0x8c4>
 800cb72:	2300      	movs	r3, #0
 800cb74:	220a      	movs	r2, #10
 800cb76:	9904      	ldr	r1, [sp, #16]
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 f9e1 	bl	800cf40 <__multadd>
 800cb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb80:	9004      	str	r0, [sp, #16]
 800cb82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 814d 	beq.w	800ce26 <_dtoa_r+0xb2e>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4631      	mov	r1, r6
 800cb90:	220a      	movs	r2, #10
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 f9d4 	bl	800cf40 <__multadd>
 800cb98:	9b02      	ldr	r3, [sp, #8]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	dc4f      	bgt.n	800cc40 <_dtoa_r+0x948>
 800cba0:	9b06      	ldr	r3, [sp, #24]
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	dd4c      	ble.n	800cc40 <_dtoa_r+0x948>
 800cba6:	e011      	b.n	800cbcc <_dtoa_r+0x8d4>
 800cba8:	d0c9      	beq.n	800cb3e <_dtoa_r+0x846>
 800cbaa:	9a05      	ldr	r2, [sp, #20]
 800cbac:	331c      	adds	r3, #28
 800cbae:	441a      	add	r2, r3
 800cbb0:	9205      	str	r2, [sp, #20]
 800cbb2:	441d      	add	r5, r3
 800cbb4:	4498      	add	r8, r3
 800cbb6:	e7c2      	b.n	800cb3e <_dtoa_r+0x846>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	e7f6      	b.n	800cbaa <_dtoa_r+0x8b2>
 800cbbc:	f1b9 0f00 	cmp.w	r9, #0
 800cbc0:	dc38      	bgt.n	800cc34 <_dtoa_r+0x93c>
 800cbc2:	9b06      	ldr	r3, [sp, #24]
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	dd35      	ble.n	800cc34 <_dtoa_r+0x93c>
 800cbc8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	b963      	cbnz	r3, 800cbea <_dtoa_r+0x8f2>
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	2205      	movs	r2, #5
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 f9b3 	bl	800cf40 <__multadd>
 800cbda:	4601      	mov	r1, r0
 800cbdc:	4607      	mov	r7, r0
 800cbde:	9804      	ldr	r0, [sp, #16]
 800cbe0:	f000 fb78 	bl	800d2d4 <__mcmp>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	f73f adcc 	bgt.w	800c782 <_dtoa_r+0x48a>
 800cbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbec:	465d      	mov	r5, fp
 800cbee:	ea6f 0a03 	mvn.w	sl, r3
 800cbf2:	f04f 0900 	mov.w	r9, #0
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 f98a 	bl	800cf12 <_Bfree>
 800cbfe:	2e00      	cmp	r6, #0
 800cc00:	f43f aeb7 	beq.w	800c972 <_dtoa_r+0x67a>
 800cc04:	f1b9 0f00 	cmp.w	r9, #0
 800cc08:	d005      	beq.n	800cc16 <_dtoa_r+0x91e>
 800cc0a:	45b1      	cmp	r9, r6
 800cc0c:	d003      	beq.n	800cc16 <_dtoa_r+0x91e>
 800cc0e:	4649      	mov	r1, r9
 800cc10:	4620      	mov	r0, r4
 800cc12:	f000 f97e 	bl	800cf12 <_Bfree>
 800cc16:	4631      	mov	r1, r6
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 f97a 	bl	800cf12 <_Bfree>
 800cc1e:	e6a8      	b.n	800c972 <_dtoa_r+0x67a>
 800cc20:	2700      	movs	r7, #0
 800cc22:	463e      	mov	r6, r7
 800cc24:	e7e1      	b.n	800cbea <_dtoa_r+0x8f2>
 800cc26:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc2a:	463e      	mov	r6, r7
 800cc2c:	e5a9      	b.n	800c782 <_dtoa_r+0x48a>
 800cc2e:	bf00      	nop
 800cc30:	40240000 	.word	0x40240000
 800cc34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc36:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f000 80fa 	beq.w	800ce34 <_dtoa_r+0xb3c>
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	dd05      	ble.n	800cc50 <_dtoa_r+0x958>
 800cc44:	4631      	mov	r1, r6
 800cc46:	462a      	mov	r2, r5
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f000 faef 	bl	800d22c <__lshift>
 800cc4e:	4606      	mov	r6, r0
 800cc50:	9b07      	ldr	r3, [sp, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d04c      	beq.n	800ccf0 <_dtoa_r+0x9f8>
 800cc56:	6871      	ldr	r1, [r6, #4]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 f926 	bl	800ceaa <_Balloc>
 800cc5e:	6932      	ldr	r2, [r6, #16]
 800cc60:	3202      	adds	r2, #2
 800cc62:	4605      	mov	r5, r0
 800cc64:	0092      	lsls	r2, r2, #2
 800cc66:	f106 010c 	add.w	r1, r6, #12
 800cc6a:	300c      	adds	r0, #12
 800cc6c:	f000 f912 	bl	800ce94 <memcpy>
 800cc70:	2201      	movs	r2, #1
 800cc72:	4629      	mov	r1, r5
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fad9 	bl	800d22c <__lshift>
 800cc7a:	9b00      	ldr	r3, [sp, #0]
 800cc7c:	f8cd b014 	str.w	fp, [sp, #20]
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	46b1      	mov	r9, r6
 800cc86:	9307      	str	r3, [sp, #28]
 800cc88:	4606      	mov	r6, r0
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	9804      	ldr	r0, [sp, #16]
 800cc8e:	f7ff faa4 	bl	800c1da <quorem>
 800cc92:	4649      	mov	r1, r9
 800cc94:	4605      	mov	r5, r0
 800cc96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cc9a:	9804      	ldr	r0, [sp, #16]
 800cc9c:	f000 fb1a 	bl	800d2d4 <__mcmp>
 800cca0:	4632      	mov	r2, r6
 800cca2:	9000      	str	r0, [sp, #0]
 800cca4:	4639      	mov	r1, r7
 800cca6:	4620      	mov	r0, r4
 800cca8:	f000 fb2e 	bl	800d308 <__mdiff>
 800ccac:	68c3      	ldr	r3, [r0, #12]
 800ccae:	4602      	mov	r2, r0
 800ccb0:	bb03      	cbnz	r3, 800ccf4 <_dtoa_r+0x9fc>
 800ccb2:	4601      	mov	r1, r0
 800ccb4:	9008      	str	r0, [sp, #32]
 800ccb6:	9804      	ldr	r0, [sp, #16]
 800ccb8:	f000 fb0c 	bl	800d2d4 <__mcmp>
 800ccbc:	9a08      	ldr	r2, [sp, #32]
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	9308      	str	r3, [sp, #32]
 800ccc6:	f000 f924 	bl	800cf12 <_Bfree>
 800ccca:	9b08      	ldr	r3, [sp, #32]
 800cccc:	b9a3      	cbnz	r3, 800ccf8 <_dtoa_r+0xa00>
 800ccce:	9a06      	ldr	r2, [sp, #24]
 800ccd0:	b992      	cbnz	r2, 800ccf8 <_dtoa_r+0xa00>
 800ccd2:	9a07      	ldr	r2, [sp, #28]
 800ccd4:	b982      	cbnz	r2, 800ccf8 <_dtoa_r+0xa00>
 800ccd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccda:	d029      	beq.n	800cd30 <_dtoa_r+0xa38>
 800ccdc:	9b00      	ldr	r3, [sp, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	dd01      	ble.n	800cce6 <_dtoa_r+0x9ee>
 800cce2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cce6:	9b05      	ldr	r3, [sp, #20]
 800cce8:	1c5d      	adds	r5, r3, #1
 800ccea:	f883 8000 	strb.w	r8, [r3]
 800ccee:	e782      	b.n	800cbf6 <_dtoa_r+0x8fe>
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	e7c2      	b.n	800cc7a <_dtoa_r+0x982>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	e7e3      	b.n	800ccc0 <_dtoa_r+0x9c8>
 800ccf8:	9a00      	ldr	r2, [sp, #0]
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	db04      	blt.n	800cd08 <_dtoa_r+0xa10>
 800ccfe:	d125      	bne.n	800cd4c <_dtoa_r+0xa54>
 800cd00:	9a06      	ldr	r2, [sp, #24]
 800cd02:	bb1a      	cbnz	r2, 800cd4c <_dtoa_r+0xa54>
 800cd04:	9a07      	ldr	r2, [sp, #28]
 800cd06:	bb0a      	cbnz	r2, 800cd4c <_dtoa_r+0xa54>
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	ddec      	ble.n	800cce6 <_dtoa_r+0x9ee>
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	9904      	ldr	r1, [sp, #16]
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fa8b 	bl	800d22c <__lshift>
 800cd16:	4639      	mov	r1, r7
 800cd18:	9004      	str	r0, [sp, #16]
 800cd1a:	f000 fadb 	bl	800d2d4 <__mcmp>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	dc03      	bgt.n	800cd2a <_dtoa_r+0xa32>
 800cd22:	d1e0      	bne.n	800cce6 <_dtoa_r+0x9ee>
 800cd24:	f018 0f01 	tst.w	r8, #1
 800cd28:	d0dd      	beq.n	800cce6 <_dtoa_r+0x9ee>
 800cd2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd2e:	d1d8      	bne.n	800cce2 <_dtoa_r+0x9ea>
 800cd30:	9b05      	ldr	r3, [sp, #20]
 800cd32:	9a05      	ldr	r2, [sp, #20]
 800cd34:	1c5d      	adds	r5, r3, #1
 800cd36:	2339      	movs	r3, #57	; 0x39
 800cd38:	7013      	strb	r3, [r2, #0]
 800cd3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd3e:	2b39      	cmp	r3, #57	; 0x39
 800cd40:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd44:	d04f      	beq.n	800cde6 <_dtoa_r+0xaee>
 800cd46:	3301      	adds	r3, #1
 800cd48:	7013      	strb	r3, [r2, #0]
 800cd4a:	e754      	b.n	800cbf6 <_dtoa_r+0x8fe>
 800cd4c:	9a05      	ldr	r2, [sp, #20]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f102 0501 	add.w	r5, r2, #1
 800cd54:	dd06      	ble.n	800cd64 <_dtoa_r+0xa6c>
 800cd56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd5a:	d0e9      	beq.n	800cd30 <_dtoa_r+0xa38>
 800cd5c:	f108 0801 	add.w	r8, r8, #1
 800cd60:	9b05      	ldr	r3, [sp, #20]
 800cd62:	e7c2      	b.n	800ccea <_dtoa_r+0x9f2>
 800cd64:	9a02      	ldr	r2, [sp, #8]
 800cd66:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cd6a:	eba5 030b 	sub.w	r3, r5, fp
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d021      	beq.n	800cdb6 <_dtoa_r+0xabe>
 800cd72:	2300      	movs	r3, #0
 800cd74:	220a      	movs	r2, #10
 800cd76:	9904      	ldr	r1, [sp, #16]
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f000 f8e1 	bl	800cf40 <__multadd>
 800cd7e:	45b1      	cmp	r9, r6
 800cd80:	9004      	str	r0, [sp, #16]
 800cd82:	f04f 0300 	mov.w	r3, #0
 800cd86:	f04f 020a 	mov.w	r2, #10
 800cd8a:	4649      	mov	r1, r9
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	d105      	bne.n	800cd9c <_dtoa_r+0xaa4>
 800cd90:	f000 f8d6 	bl	800cf40 <__multadd>
 800cd94:	4681      	mov	r9, r0
 800cd96:	4606      	mov	r6, r0
 800cd98:	9505      	str	r5, [sp, #20]
 800cd9a:	e776      	b.n	800cc8a <_dtoa_r+0x992>
 800cd9c:	f000 f8d0 	bl	800cf40 <__multadd>
 800cda0:	4631      	mov	r1, r6
 800cda2:	4681      	mov	r9, r0
 800cda4:	2300      	movs	r3, #0
 800cda6:	220a      	movs	r2, #10
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 f8c9 	bl	800cf40 <__multadd>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	e7f2      	b.n	800cd98 <_dtoa_r+0xaa0>
 800cdb2:	f04f 0900 	mov.w	r9, #0
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	9904      	ldr	r1, [sp, #16]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fa36 	bl	800d22c <__lshift>
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	9004      	str	r0, [sp, #16]
 800cdc4:	f000 fa86 	bl	800d2d4 <__mcmp>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	dcb6      	bgt.n	800cd3a <_dtoa_r+0xa42>
 800cdcc:	d102      	bne.n	800cdd4 <_dtoa_r+0xadc>
 800cdce:	f018 0f01 	tst.w	r8, #1
 800cdd2:	d1b2      	bne.n	800cd3a <_dtoa_r+0xa42>
 800cdd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdd8:	2b30      	cmp	r3, #48	; 0x30
 800cdda:	f105 32ff 	add.w	r2, r5, #4294967295
 800cdde:	f47f af0a 	bne.w	800cbf6 <_dtoa_r+0x8fe>
 800cde2:	4615      	mov	r5, r2
 800cde4:	e7f6      	b.n	800cdd4 <_dtoa_r+0xadc>
 800cde6:	4593      	cmp	fp, r2
 800cde8:	d105      	bne.n	800cdf6 <_dtoa_r+0xafe>
 800cdea:	2331      	movs	r3, #49	; 0x31
 800cdec:	f10a 0a01 	add.w	sl, sl, #1
 800cdf0:	f88b 3000 	strb.w	r3, [fp]
 800cdf4:	e6ff      	b.n	800cbf6 <_dtoa_r+0x8fe>
 800cdf6:	4615      	mov	r5, r2
 800cdf8:	e79f      	b.n	800cd3a <_dtoa_r+0xa42>
 800cdfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ce60 <_dtoa_r+0xb68>
 800cdfe:	e007      	b.n	800ce10 <_dtoa_r+0xb18>
 800ce00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce02:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ce64 <_dtoa_r+0xb6c>
 800ce06:	b11b      	cbz	r3, 800ce10 <_dtoa_r+0xb18>
 800ce08:	f10b 0308 	add.w	r3, fp, #8
 800ce0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce0e:	6013      	str	r3, [r2, #0]
 800ce10:	4658      	mov	r0, fp
 800ce12:	b017      	add	sp, #92	; 0x5c
 800ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	9b06      	ldr	r3, [sp, #24]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	f77f ae35 	ble.w	800ca8a <_dtoa_r+0x792>
 800ce20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce22:	9307      	str	r3, [sp, #28]
 800ce24:	e649      	b.n	800caba <_dtoa_r+0x7c2>
 800ce26:	9b02      	ldr	r3, [sp, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	dc03      	bgt.n	800ce34 <_dtoa_r+0xb3c>
 800ce2c:	9b06      	ldr	r3, [sp, #24]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	f73f aecc 	bgt.w	800cbcc <_dtoa_r+0x8d4>
 800ce34:	465d      	mov	r5, fp
 800ce36:	4639      	mov	r1, r7
 800ce38:	9804      	ldr	r0, [sp, #16]
 800ce3a:	f7ff f9ce 	bl	800c1da <quorem>
 800ce3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ce42:	f805 8b01 	strb.w	r8, [r5], #1
 800ce46:	9a02      	ldr	r2, [sp, #8]
 800ce48:	eba5 030b 	sub.w	r3, r5, fp
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	ddb0      	ble.n	800cdb2 <_dtoa_r+0xaba>
 800ce50:	2300      	movs	r3, #0
 800ce52:	220a      	movs	r2, #10
 800ce54:	9904      	ldr	r1, [sp, #16]
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f872 	bl	800cf40 <__multadd>
 800ce5c:	9004      	str	r0, [sp, #16]
 800ce5e:	e7ea      	b.n	800ce36 <_dtoa_r+0xb3e>
 800ce60:	0800dd7c 	.word	0x0800dd7c
 800ce64:	0800dda0 	.word	0x0800dda0

0800ce68 <_localeconv_r>:
 800ce68:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <_localeconv_r+0x14>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6a18      	ldr	r0, [r3, #32]
 800ce6e:	4b04      	ldr	r3, [pc, #16]	; (800ce80 <_localeconv_r+0x18>)
 800ce70:	2800      	cmp	r0, #0
 800ce72:	bf08      	it	eq
 800ce74:	4618      	moveq	r0, r3
 800ce76:	30f0      	adds	r0, #240	; 0xf0
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20000068 	.word	0x20000068
 800ce80:	200000cc 	.word	0x200000cc

0800ce84 <malloc>:
 800ce84:	4b02      	ldr	r3, [pc, #8]	; (800ce90 <malloc+0xc>)
 800ce86:	4601      	mov	r1, r0
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	f000 bb45 	b.w	800d518 <_malloc_r>
 800ce8e:	bf00      	nop
 800ce90:	20000068 	.word	0x20000068

0800ce94 <memcpy>:
 800ce94:	b510      	push	{r4, lr}
 800ce96:	1e43      	subs	r3, r0, #1
 800ce98:	440a      	add	r2, r1
 800ce9a:	4291      	cmp	r1, r2
 800ce9c:	d100      	bne.n	800cea0 <memcpy+0xc>
 800ce9e:	bd10      	pop	{r4, pc}
 800cea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cea8:	e7f7      	b.n	800ce9a <memcpy+0x6>

0800ceaa <_Balloc>:
 800ceaa:	b570      	push	{r4, r5, r6, lr}
 800ceac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ceae:	4604      	mov	r4, r0
 800ceb0:	460e      	mov	r6, r1
 800ceb2:	b93d      	cbnz	r5, 800cec4 <_Balloc+0x1a>
 800ceb4:	2010      	movs	r0, #16
 800ceb6:	f7ff ffe5 	bl	800ce84 <malloc>
 800ceba:	6260      	str	r0, [r4, #36]	; 0x24
 800cebc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cec0:	6005      	str	r5, [r0, #0]
 800cec2:	60c5      	str	r5, [r0, #12]
 800cec4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cec6:	68eb      	ldr	r3, [r5, #12]
 800cec8:	b183      	cbz	r3, 800ceec <_Balloc+0x42>
 800ceca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ced2:	b9b8      	cbnz	r0, 800cf04 <_Balloc+0x5a>
 800ced4:	2101      	movs	r1, #1
 800ced6:	fa01 f506 	lsl.w	r5, r1, r6
 800ceda:	1d6a      	adds	r2, r5, #5
 800cedc:	0092      	lsls	r2, r2, #2
 800cede:	4620      	mov	r0, r4
 800cee0:	f000 fabe 	bl	800d460 <_calloc_r>
 800cee4:	b160      	cbz	r0, 800cf00 <_Balloc+0x56>
 800cee6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ceea:	e00e      	b.n	800cf0a <_Balloc+0x60>
 800ceec:	2221      	movs	r2, #33	; 0x21
 800ceee:	2104      	movs	r1, #4
 800cef0:	4620      	mov	r0, r4
 800cef2:	f000 fab5 	bl	800d460 <_calloc_r>
 800cef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cef8:	60e8      	str	r0, [r5, #12]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1e4      	bne.n	800ceca <_Balloc+0x20>
 800cf00:	2000      	movs	r0, #0
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	6802      	ldr	r2, [r0, #0]
 800cf06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf10:	e7f7      	b.n	800cf02 <_Balloc+0x58>

0800cf12 <_Bfree>:
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf16:	4606      	mov	r6, r0
 800cf18:	460d      	mov	r5, r1
 800cf1a:	b93c      	cbnz	r4, 800cf2c <_Bfree+0x1a>
 800cf1c:	2010      	movs	r0, #16
 800cf1e:	f7ff ffb1 	bl	800ce84 <malloc>
 800cf22:	6270      	str	r0, [r6, #36]	; 0x24
 800cf24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf28:	6004      	str	r4, [r0, #0]
 800cf2a:	60c4      	str	r4, [r0, #12]
 800cf2c:	b13d      	cbz	r5, 800cf3e <_Bfree+0x2c>
 800cf2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cf30:	686a      	ldr	r2, [r5, #4]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf38:	6029      	str	r1, [r5, #0]
 800cf3a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cf3e:	bd70      	pop	{r4, r5, r6, pc}

0800cf40 <__multadd>:
 800cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	690d      	ldr	r5, [r1, #16]
 800cf46:	461f      	mov	r7, r3
 800cf48:	4606      	mov	r6, r0
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	f101 0c14 	add.w	ip, r1, #20
 800cf50:	2300      	movs	r3, #0
 800cf52:	f8dc 0000 	ldr.w	r0, [ip]
 800cf56:	b281      	uxth	r1, r0
 800cf58:	fb02 7101 	mla	r1, r2, r1, r7
 800cf5c:	0c0f      	lsrs	r7, r1, #16
 800cf5e:	0c00      	lsrs	r0, r0, #16
 800cf60:	fb02 7000 	mla	r0, r2, r0, r7
 800cf64:	b289      	uxth	r1, r1
 800cf66:	3301      	adds	r3, #1
 800cf68:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cf6c:	429d      	cmp	r5, r3
 800cf6e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cf72:	f84c 1b04 	str.w	r1, [ip], #4
 800cf76:	dcec      	bgt.n	800cf52 <__multadd+0x12>
 800cf78:	b1d7      	cbz	r7, 800cfb0 <__multadd+0x70>
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	42ab      	cmp	r3, r5
 800cf7e:	dc12      	bgt.n	800cfa6 <__multadd+0x66>
 800cf80:	6861      	ldr	r1, [r4, #4]
 800cf82:	4630      	mov	r0, r6
 800cf84:	3101      	adds	r1, #1
 800cf86:	f7ff ff90 	bl	800ceaa <_Balloc>
 800cf8a:	6922      	ldr	r2, [r4, #16]
 800cf8c:	3202      	adds	r2, #2
 800cf8e:	f104 010c 	add.w	r1, r4, #12
 800cf92:	4680      	mov	r8, r0
 800cf94:	0092      	lsls	r2, r2, #2
 800cf96:	300c      	adds	r0, #12
 800cf98:	f7ff ff7c 	bl	800ce94 <memcpy>
 800cf9c:	4621      	mov	r1, r4
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f7ff ffb7 	bl	800cf12 <_Bfree>
 800cfa4:	4644      	mov	r4, r8
 800cfa6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfaa:	3501      	adds	r5, #1
 800cfac:	615f      	str	r7, [r3, #20]
 800cfae:	6125      	str	r5, [r4, #16]
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfb6 <__hi0bits>:
 800cfb6:	0c02      	lsrs	r2, r0, #16
 800cfb8:	0412      	lsls	r2, r2, #16
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b9b2      	cbnz	r2, 800cfec <__hi0bits+0x36>
 800cfbe:	0403      	lsls	r3, r0, #16
 800cfc0:	2010      	movs	r0, #16
 800cfc2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfc6:	bf04      	itt	eq
 800cfc8:	021b      	lsleq	r3, r3, #8
 800cfca:	3008      	addeq	r0, #8
 800cfcc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfd0:	bf04      	itt	eq
 800cfd2:	011b      	lsleq	r3, r3, #4
 800cfd4:	3004      	addeq	r0, #4
 800cfd6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cfda:	bf04      	itt	eq
 800cfdc:	009b      	lsleq	r3, r3, #2
 800cfde:	3002      	addeq	r0, #2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db06      	blt.n	800cff2 <__hi0bits+0x3c>
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	d503      	bpl.n	800cff0 <__hi0bits+0x3a>
 800cfe8:	3001      	adds	r0, #1
 800cfea:	4770      	bx	lr
 800cfec:	2000      	movs	r0, #0
 800cfee:	e7e8      	b.n	800cfc2 <__hi0bits+0xc>
 800cff0:	2020      	movs	r0, #32
 800cff2:	4770      	bx	lr

0800cff4 <__lo0bits>:
 800cff4:	6803      	ldr	r3, [r0, #0]
 800cff6:	f013 0207 	ands.w	r2, r3, #7
 800cffa:	4601      	mov	r1, r0
 800cffc:	d00b      	beq.n	800d016 <__lo0bits+0x22>
 800cffe:	07da      	lsls	r2, r3, #31
 800d000:	d423      	bmi.n	800d04a <__lo0bits+0x56>
 800d002:	0798      	lsls	r0, r3, #30
 800d004:	bf49      	itett	mi
 800d006:	085b      	lsrmi	r3, r3, #1
 800d008:	089b      	lsrpl	r3, r3, #2
 800d00a:	2001      	movmi	r0, #1
 800d00c:	600b      	strmi	r3, [r1, #0]
 800d00e:	bf5c      	itt	pl
 800d010:	600b      	strpl	r3, [r1, #0]
 800d012:	2002      	movpl	r0, #2
 800d014:	4770      	bx	lr
 800d016:	b298      	uxth	r0, r3
 800d018:	b9a8      	cbnz	r0, 800d046 <__lo0bits+0x52>
 800d01a:	0c1b      	lsrs	r3, r3, #16
 800d01c:	2010      	movs	r0, #16
 800d01e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d022:	bf04      	itt	eq
 800d024:	0a1b      	lsreq	r3, r3, #8
 800d026:	3008      	addeq	r0, #8
 800d028:	071a      	lsls	r2, r3, #28
 800d02a:	bf04      	itt	eq
 800d02c:	091b      	lsreq	r3, r3, #4
 800d02e:	3004      	addeq	r0, #4
 800d030:	079a      	lsls	r2, r3, #30
 800d032:	bf04      	itt	eq
 800d034:	089b      	lsreq	r3, r3, #2
 800d036:	3002      	addeq	r0, #2
 800d038:	07da      	lsls	r2, r3, #31
 800d03a:	d402      	bmi.n	800d042 <__lo0bits+0x4e>
 800d03c:	085b      	lsrs	r3, r3, #1
 800d03e:	d006      	beq.n	800d04e <__lo0bits+0x5a>
 800d040:	3001      	adds	r0, #1
 800d042:	600b      	str	r3, [r1, #0]
 800d044:	4770      	bx	lr
 800d046:	4610      	mov	r0, r2
 800d048:	e7e9      	b.n	800d01e <__lo0bits+0x2a>
 800d04a:	2000      	movs	r0, #0
 800d04c:	4770      	bx	lr
 800d04e:	2020      	movs	r0, #32
 800d050:	4770      	bx	lr

0800d052 <__i2b>:
 800d052:	b510      	push	{r4, lr}
 800d054:	460c      	mov	r4, r1
 800d056:	2101      	movs	r1, #1
 800d058:	f7ff ff27 	bl	800ceaa <_Balloc>
 800d05c:	2201      	movs	r2, #1
 800d05e:	6144      	str	r4, [r0, #20]
 800d060:	6102      	str	r2, [r0, #16]
 800d062:	bd10      	pop	{r4, pc}

0800d064 <__multiply>:
 800d064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	4614      	mov	r4, r2
 800d06a:	690a      	ldr	r2, [r1, #16]
 800d06c:	6923      	ldr	r3, [r4, #16]
 800d06e:	429a      	cmp	r2, r3
 800d070:	bfb8      	it	lt
 800d072:	460b      	movlt	r3, r1
 800d074:	4688      	mov	r8, r1
 800d076:	bfbc      	itt	lt
 800d078:	46a0      	movlt	r8, r4
 800d07a:	461c      	movlt	r4, r3
 800d07c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d080:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d084:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d088:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d08c:	eb07 0609 	add.w	r6, r7, r9
 800d090:	42b3      	cmp	r3, r6
 800d092:	bfb8      	it	lt
 800d094:	3101      	addlt	r1, #1
 800d096:	f7ff ff08 	bl	800ceaa <_Balloc>
 800d09a:	f100 0514 	add.w	r5, r0, #20
 800d09e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d0a2:	462b      	mov	r3, r5
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	4573      	cmp	r3, lr
 800d0a8:	d316      	bcc.n	800d0d8 <__multiply+0x74>
 800d0aa:	f104 0214 	add.w	r2, r4, #20
 800d0ae:	f108 0114 	add.w	r1, r8, #20
 800d0b2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d0b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	9b00      	ldr	r3, [sp, #0]
 800d0be:	9201      	str	r2, [sp, #4]
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d80c      	bhi.n	800d0de <__multiply+0x7a>
 800d0c4:	2e00      	cmp	r6, #0
 800d0c6:	dd03      	ble.n	800d0d0 <__multiply+0x6c>
 800d0c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d05d      	beq.n	800d18c <__multiply+0x128>
 800d0d0:	6106      	str	r6, [r0, #16]
 800d0d2:	b003      	add	sp, #12
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	f843 2b04 	str.w	r2, [r3], #4
 800d0dc:	e7e3      	b.n	800d0a6 <__multiply+0x42>
 800d0de:	f8b2 b000 	ldrh.w	fp, [r2]
 800d0e2:	f1bb 0f00 	cmp.w	fp, #0
 800d0e6:	d023      	beq.n	800d130 <__multiply+0xcc>
 800d0e8:	4689      	mov	r9, r1
 800d0ea:	46ac      	mov	ip, r5
 800d0ec:	f04f 0800 	mov.w	r8, #0
 800d0f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0f4:	f8dc a000 	ldr.w	sl, [ip]
 800d0f8:	b2a3      	uxth	r3, r4
 800d0fa:	fa1f fa8a 	uxth.w	sl, sl
 800d0fe:	fb0b a303 	mla	r3, fp, r3, sl
 800d102:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d106:	f8dc 4000 	ldr.w	r4, [ip]
 800d10a:	4443      	add	r3, r8
 800d10c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d110:	fb0b 840a 	mla	r4, fp, sl, r8
 800d114:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d118:	46e2      	mov	sl, ip
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d120:	454f      	cmp	r7, r9
 800d122:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d126:	f84a 3b04 	str.w	r3, [sl], #4
 800d12a:	d82b      	bhi.n	800d184 <__multiply+0x120>
 800d12c:	f8cc 8004 	str.w	r8, [ip, #4]
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d136:	3204      	adds	r2, #4
 800d138:	f1ba 0f00 	cmp.w	sl, #0
 800d13c:	d020      	beq.n	800d180 <__multiply+0x11c>
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	4689      	mov	r9, r1
 800d142:	46a8      	mov	r8, r5
 800d144:	f04f 0b00 	mov.w	fp, #0
 800d148:	f8b9 c000 	ldrh.w	ip, [r9]
 800d14c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d150:	fb0a 440c 	mla	r4, sl, ip, r4
 800d154:	445c      	add	r4, fp
 800d156:	46c4      	mov	ip, r8
 800d158:	b29b      	uxth	r3, r3
 800d15a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d15e:	f84c 3b04 	str.w	r3, [ip], #4
 800d162:	f859 3b04 	ldr.w	r3, [r9], #4
 800d166:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d16a:	0c1b      	lsrs	r3, r3, #16
 800d16c:	fb0a b303 	mla	r3, sl, r3, fp
 800d170:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d174:	454f      	cmp	r7, r9
 800d176:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d17a:	d805      	bhi.n	800d188 <__multiply+0x124>
 800d17c:	f8c8 3004 	str.w	r3, [r8, #4]
 800d180:	3504      	adds	r5, #4
 800d182:	e79b      	b.n	800d0bc <__multiply+0x58>
 800d184:	46d4      	mov	ip, sl
 800d186:	e7b3      	b.n	800d0f0 <__multiply+0x8c>
 800d188:	46e0      	mov	r8, ip
 800d18a:	e7dd      	b.n	800d148 <__multiply+0xe4>
 800d18c:	3e01      	subs	r6, #1
 800d18e:	e799      	b.n	800d0c4 <__multiply+0x60>

0800d190 <__pow5mult>:
 800d190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d194:	4615      	mov	r5, r2
 800d196:	f012 0203 	ands.w	r2, r2, #3
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	d007      	beq.n	800d1b0 <__pow5mult+0x20>
 800d1a0:	3a01      	subs	r2, #1
 800d1a2:	4c21      	ldr	r4, [pc, #132]	; (800d228 <__pow5mult+0x98>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1aa:	f7ff fec9 	bl	800cf40 <__multadd>
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	10ad      	asrs	r5, r5, #2
 800d1b2:	d035      	beq.n	800d220 <__pow5mult+0x90>
 800d1b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1b6:	b93c      	cbnz	r4, 800d1c8 <__pow5mult+0x38>
 800d1b8:	2010      	movs	r0, #16
 800d1ba:	f7ff fe63 	bl	800ce84 <malloc>
 800d1be:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1c4:	6004      	str	r4, [r0, #0]
 800d1c6:	60c4      	str	r4, [r0, #12]
 800d1c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d0:	b94c      	cbnz	r4, 800d1e6 <__pow5mult+0x56>
 800d1d2:	f240 2171 	movw	r1, #625	; 0x271
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff ff3b 	bl	800d052 <__i2b>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	f04f 0800 	mov.w	r8, #0
 800d1ea:	07eb      	lsls	r3, r5, #31
 800d1ec:	d50a      	bpl.n	800d204 <__pow5mult+0x74>
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7ff ff36 	bl	800d064 <__multiply>
 800d1f8:	4639      	mov	r1, r7
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	f7ff fe88 	bl	800cf12 <_Bfree>
 800d202:	464f      	mov	r7, r9
 800d204:	106d      	asrs	r5, r5, #1
 800d206:	d00b      	beq.n	800d220 <__pow5mult+0x90>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	b938      	cbnz	r0, 800d21c <__pow5mult+0x8c>
 800d20c:	4622      	mov	r2, r4
 800d20e:	4621      	mov	r1, r4
 800d210:	4630      	mov	r0, r6
 800d212:	f7ff ff27 	bl	800d064 <__multiply>
 800d216:	6020      	str	r0, [r4, #0]
 800d218:	f8c0 8000 	str.w	r8, [r0]
 800d21c:	4604      	mov	r4, r0
 800d21e:	e7e4      	b.n	800d1ea <__pow5mult+0x5a>
 800d220:	4638      	mov	r0, r7
 800d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d226:	bf00      	nop
 800d228:	0800dea0 	.word	0x0800dea0

0800d22c <__lshift>:
 800d22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d230:	460c      	mov	r4, r1
 800d232:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	6849      	ldr	r1, [r1, #4]
 800d23a:	eb0a 0903 	add.w	r9, sl, r3
 800d23e:	68a3      	ldr	r3, [r4, #8]
 800d240:	4607      	mov	r7, r0
 800d242:	4616      	mov	r6, r2
 800d244:	f109 0501 	add.w	r5, r9, #1
 800d248:	42ab      	cmp	r3, r5
 800d24a:	db32      	blt.n	800d2b2 <__lshift+0x86>
 800d24c:	4638      	mov	r0, r7
 800d24e:	f7ff fe2c 	bl	800ceaa <_Balloc>
 800d252:	2300      	movs	r3, #0
 800d254:	4680      	mov	r8, r0
 800d256:	f100 0114 	add.w	r1, r0, #20
 800d25a:	461a      	mov	r2, r3
 800d25c:	4553      	cmp	r3, sl
 800d25e:	db2b      	blt.n	800d2b8 <__lshift+0x8c>
 800d260:	6920      	ldr	r0, [r4, #16]
 800d262:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d266:	f104 0314 	add.w	r3, r4, #20
 800d26a:	f016 021f 	ands.w	r2, r6, #31
 800d26e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d272:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d276:	d025      	beq.n	800d2c4 <__lshift+0x98>
 800d278:	f1c2 0e20 	rsb	lr, r2, #32
 800d27c:	2000      	movs	r0, #0
 800d27e:	681e      	ldr	r6, [r3, #0]
 800d280:	468a      	mov	sl, r1
 800d282:	4096      	lsls	r6, r2
 800d284:	4330      	orrs	r0, r6
 800d286:	f84a 0b04 	str.w	r0, [sl], #4
 800d28a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d28e:	459c      	cmp	ip, r3
 800d290:	fa20 f00e 	lsr.w	r0, r0, lr
 800d294:	d814      	bhi.n	800d2c0 <__lshift+0x94>
 800d296:	6048      	str	r0, [r1, #4]
 800d298:	b108      	cbz	r0, 800d29e <__lshift+0x72>
 800d29a:	f109 0502 	add.w	r5, r9, #2
 800d29e:	3d01      	subs	r5, #1
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	f8c8 5010 	str.w	r5, [r8, #16]
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	f7ff fe33 	bl	800cf12 <_Bfree>
 800d2ac:	4640      	mov	r0, r8
 800d2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b2:	3101      	adds	r1, #1
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	e7c7      	b.n	800d248 <__lshift+0x1c>
 800d2b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	e7cd      	b.n	800d25c <__lshift+0x30>
 800d2c0:	4651      	mov	r1, sl
 800d2c2:	e7dc      	b.n	800d27e <__lshift+0x52>
 800d2c4:	3904      	subs	r1, #4
 800d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ca:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2ce:	459c      	cmp	ip, r3
 800d2d0:	d8f9      	bhi.n	800d2c6 <__lshift+0x9a>
 800d2d2:	e7e4      	b.n	800d29e <__lshift+0x72>

0800d2d4 <__mcmp>:
 800d2d4:	6903      	ldr	r3, [r0, #16]
 800d2d6:	690a      	ldr	r2, [r1, #16]
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	b530      	push	{r4, r5, lr}
 800d2dc:	d10c      	bne.n	800d2f8 <__mcmp+0x24>
 800d2de:	0092      	lsls	r2, r2, #2
 800d2e0:	3014      	adds	r0, #20
 800d2e2:	3114      	adds	r1, #20
 800d2e4:	1884      	adds	r4, r0, r2
 800d2e6:	4411      	add	r1, r2
 800d2e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2f0:	4295      	cmp	r5, r2
 800d2f2:	d003      	beq.n	800d2fc <__mcmp+0x28>
 800d2f4:	d305      	bcc.n	800d302 <__mcmp+0x2e>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	bd30      	pop	{r4, r5, pc}
 800d2fc:	42a0      	cmp	r0, r4
 800d2fe:	d3f3      	bcc.n	800d2e8 <__mcmp+0x14>
 800d300:	e7fa      	b.n	800d2f8 <__mcmp+0x24>
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	e7f7      	b.n	800d2f8 <__mcmp+0x24>

0800d308 <__mdiff>:
 800d308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d30c:	460d      	mov	r5, r1
 800d30e:	4607      	mov	r7, r0
 800d310:	4611      	mov	r1, r2
 800d312:	4628      	mov	r0, r5
 800d314:	4614      	mov	r4, r2
 800d316:	f7ff ffdd 	bl	800d2d4 <__mcmp>
 800d31a:	1e06      	subs	r6, r0, #0
 800d31c:	d108      	bne.n	800d330 <__mdiff+0x28>
 800d31e:	4631      	mov	r1, r6
 800d320:	4638      	mov	r0, r7
 800d322:	f7ff fdc2 	bl	800ceaa <_Balloc>
 800d326:	2301      	movs	r3, #1
 800d328:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d330:	bfa4      	itt	ge
 800d332:	4623      	movge	r3, r4
 800d334:	462c      	movge	r4, r5
 800d336:	4638      	mov	r0, r7
 800d338:	6861      	ldr	r1, [r4, #4]
 800d33a:	bfa6      	itte	ge
 800d33c:	461d      	movge	r5, r3
 800d33e:	2600      	movge	r6, #0
 800d340:	2601      	movlt	r6, #1
 800d342:	f7ff fdb2 	bl	800ceaa <_Balloc>
 800d346:	692b      	ldr	r3, [r5, #16]
 800d348:	60c6      	str	r6, [r0, #12]
 800d34a:	6926      	ldr	r6, [r4, #16]
 800d34c:	f105 0914 	add.w	r9, r5, #20
 800d350:	f104 0214 	add.w	r2, r4, #20
 800d354:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d358:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d35c:	f100 0514 	add.w	r5, r0, #20
 800d360:	f04f 0e00 	mov.w	lr, #0
 800d364:	f852 ab04 	ldr.w	sl, [r2], #4
 800d368:	f859 4b04 	ldr.w	r4, [r9], #4
 800d36c:	fa1e f18a 	uxtah	r1, lr, sl
 800d370:	b2a3      	uxth	r3, r4
 800d372:	1ac9      	subs	r1, r1, r3
 800d374:	0c23      	lsrs	r3, r4, #16
 800d376:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d37a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d37e:	b289      	uxth	r1, r1
 800d380:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d384:	45c8      	cmp	r8, r9
 800d386:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d38a:	4694      	mov	ip, r2
 800d38c:	f845 3b04 	str.w	r3, [r5], #4
 800d390:	d8e8      	bhi.n	800d364 <__mdiff+0x5c>
 800d392:	45bc      	cmp	ip, r7
 800d394:	d304      	bcc.n	800d3a0 <__mdiff+0x98>
 800d396:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d39a:	b183      	cbz	r3, 800d3be <__mdiff+0xb6>
 800d39c:	6106      	str	r6, [r0, #16]
 800d39e:	e7c5      	b.n	800d32c <__mdiff+0x24>
 800d3a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3a4:	fa1e f381 	uxtah	r3, lr, r1
 800d3a8:	141a      	asrs	r2, r3, #16
 800d3aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d3b8:	f845 3b04 	str.w	r3, [r5], #4
 800d3bc:	e7e9      	b.n	800d392 <__mdiff+0x8a>
 800d3be:	3e01      	subs	r6, #1
 800d3c0:	e7e9      	b.n	800d396 <__mdiff+0x8e>

0800d3c2 <__d2b>:
 800d3c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3c6:	460e      	mov	r6, r1
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	ec59 8b10 	vmov	r8, r9, d0
 800d3ce:	4615      	mov	r5, r2
 800d3d0:	f7ff fd6b 	bl	800ceaa <_Balloc>
 800d3d4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d3d8:	4607      	mov	r7, r0
 800d3da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3de:	bb34      	cbnz	r4, 800d42e <__d2b+0x6c>
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	f1b8 0300 	subs.w	r3, r8, #0
 800d3e6:	d027      	beq.n	800d438 <__d2b+0x76>
 800d3e8:	a802      	add	r0, sp, #8
 800d3ea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d3ee:	f7ff fe01 	bl	800cff4 <__lo0bits>
 800d3f2:	9900      	ldr	r1, [sp, #0]
 800d3f4:	b1f0      	cbz	r0, 800d434 <__d2b+0x72>
 800d3f6:	9a01      	ldr	r2, [sp, #4]
 800d3f8:	f1c0 0320 	rsb	r3, r0, #32
 800d3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d400:	430b      	orrs	r3, r1
 800d402:	40c2      	lsrs	r2, r0
 800d404:	617b      	str	r3, [r7, #20]
 800d406:	9201      	str	r2, [sp, #4]
 800d408:	9b01      	ldr	r3, [sp, #4]
 800d40a:	61bb      	str	r3, [r7, #24]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	bf14      	ite	ne
 800d410:	2102      	movne	r1, #2
 800d412:	2101      	moveq	r1, #1
 800d414:	6139      	str	r1, [r7, #16]
 800d416:	b1c4      	cbz	r4, 800d44a <__d2b+0x88>
 800d418:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d41c:	4404      	add	r4, r0
 800d41e:	6034      	str	r4, [r6, #0]
 800d420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d424:	6028      	str	r0, [r5, #0]
 800d426:	4638      	mov	r0, r7
 800d428:	b003      	add	sp, #12
 800d42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d432:	e7d5      	b.n	800d3e0 <__d2b+0x1e>
 800d434:	6179      	str	r1, [r7, #20]
 800d436:	e7e7      	b.n	800d408 <__d2b+0x46>
 800d438:	a801      	add	r0, sp, #4
 800d43a:	f7ff fddb 	bl	800cff4 <__lo0bits>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	2101      	movs	r1, #1
 800d444:	6139      	str	r1, [r7, #16]
 800d446:	3020      	adds	r0, #32
 800d448:	e7e5      	b.n	800d416 <__d2b+0x54>
 800d44a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d44e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d452:	6030      	str	r0, [r6, #0]
 800d454:	6918      	ldr	r0, [r3, #16]
 800d456:	f7ff fdae 	bl	800cfb6 <__hi0bits>
 800d45a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d45e:	e7e1      	b.n	800d424 <__d2b+0x62>

0800d460 <_calloc_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	fb02 f401 	mul.w	r4, r2, r1
 800d466:	4621      	mov	r1, r4
 800d468:	f000 f856 	bl	800d518 <_malloc_r>
 800d46c:	4605      	mov	r5, r0
 800d46e:	b118      	cbz	r0, 800d478 <_calloc_r+0x18>
 800d470:	4622      	mov	r2, r4
 800d472:	2100      	movs	r1, #0
 800d474:	f7fe fa16 	bl	800b8a4 <memset>
 800d478:	4628      	mov	r0, r5
 800d47a:	bd38      	pop	{r3, r4, r5, pc}

0800d47c <_free_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4605      	mov	r5, r0
 800d480:	2900      	cmp	r1, #0
 800d482:	d045      	beq.n	800d510 <_free_r+0x94>
 800d484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d488:	1f0c      	subs	r4, r1, #4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bfb8      	it	lt
 800d48e:	18e4      	addlt	r4, r4, r3
 800d490:	f000 fa29 	bl	800d8e6 <__malloc_lock>
 800d494:	4a1f      	ldr	r2, [pc, #124]	; (800d514 <_free_r+0x98>)
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	4610      	mov	r0, r2
 800d49a:	b933      	cbnz	r3, 800d4aa <_free_r+0x2e>
 800d49c:	6063      	str	r3, [r4, #4]
 800d49e:	6014      	str	r4, [r2, #0]
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a6:	f000 ba1f 	b.w	800d8e8 <__malloc_unlock>
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	d90c      	bls.n	800d4c8 <_free_r+0x4c>
 800d4ae:	6821      	ldr	r1, [r4, #0]
 800d4b0:	1862      	adds	r2, r4, r1
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	bf04      	itt	eq
 800d4b6:	681a      	ldreq	r2, [r3, #0]
 800d4b8:	685b      	ldreq	r3, [r3, #4]
 800d4ba:	6063      	str	r3, [r4, #4]
 800d4bc:	bf04      	itt	eq
 800d4be:	1852      	addeq	r2, r2, r1
 800d4c0:	6022      	streq	r2, [r4, #0]
 800d4c2:	6004      	str	r4, [r0, #0]
 800d4c4:	e7ec      	b.n	800d4a0 <_free_r+0x24>
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	685a      	ldr	r2, [r3, #4]
 800d4ca:	b10a      	cbz	r2, 800d4d0 <_free_r+0x54>
 800d4cc:	42a2      	cmp	r2, r4
 800d4ce:	d9fa      	bls.n	800d4c6 <_free_r+0x4a>
 800d4d0:	6819      	ldr	r1, [r3, #0]
 800d4d2:	1858      	adds	r0, r3, r1
 800d4d4:	42a0      	cmp	r0, r4
 800d4d6:	d10b      	bne.n	800d4f0 <_free_r+0x74>
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	4401      	add	r1, r0
 800d4dc:	1858      	adds	r0, r3, r1
 800d4de:	4282      	cmp	r2, r0
 800d4e0:	6019      	str	r1, [r3, #0]
 800d4e2:	d1dd      	bne.n	800d4a0 <_free_r+0x24>
 800d4e4:	6810      	ldr	r0, [r2, #0]
 800d4e6:	6852      	ldr	r2, [r2, #4]
 800d4e8:	605a      	str	r2, [r3, #4]
 800d4ea:	4401      	add	r1, r0
 800d4ec:	6019      	str	r1, [r3, #0]
 800d4ee:	e7d7      	b.n	800d4a0 <_free_r+0x24>
 800d4f0:	d902      	bls.n	800d4f8 <_free_r+0x7c>
 800d4f2:	230c      	movs	r3, #12
 800d4f4:	602b      	str	r3, [r5, #0]
 800d4f6:	e7d3      	b.n	800d4a0 <_free_r+0x24>
 800d4f8:	6820      	ldr	r0, [r4, #0]
 800d4fa:	1821      	adds	r1, r4, r0
 800d4fc:	428a      	cmp	r2, r1
 800d4fe:	bf04      	itt	eq
 800d500:	6811      	ldreq	r1, [r2, #0]
 800d502:	6852      	ldreq	r2, [r2, #4]
 800d504:	6062      	str	r2, [r4, #4]
 800d506:	bf04      	itt	eq
 800d508:	1809      	addeq	r1, r1, r0
 800d50a:	6021      	streq	r1, [r4, #0]
 800d50c:	605c      	str	r4, [r3, #4]
 800d50e:	e7c7      	b.n	800d4a0 <_free_r+0x24>
 800d510:	bd38      	pop	{r3, r4, r5, pc}
 800d512:	bf00      	nop
 800d514:	20000264 	.word	0x20000264

0800d518 <_malloc_r>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	1ccd      	adds	r5, r1, #3
 800d51c:	f025 0503 	bic.w	r5, r5, #3
 800d520:	3508      	adds	r5, #8
 800d522:	2d0c      	cmp	r5, #12
 800d524:	bf38      	it	cc
 800d526:	250c      	movcc	r5, #12
 800d528:	2d00      	cmp	r5, #0
 800d52a:	4606      	mov	r6, r0
 800d52c:	db01      	blt.n	800d532 <_malloc_r+0x1a>
 800d52e:	42a9      	cmp	r1, r5
 800d530:	d903      	bls.n	800d53a <_malloc_r+0x22>
 800d532:	230c      	movs	r3, #12
 800d534:	6033      	str	r3, [r6, #0]
 800d536:	2000      	movs	r0, #0
 800d538:	bd70      	pop	{r4, r5, r6, pc}
 800d53a:	f000 f9d4 	bl	800d8e6 <__malloc_lock>
 800d53e:	4a21      	ldr	r2, [pc, #132]	; (800d5c4 <_malloc_r+0xac>)
 800d540:	6814      	ldr	r4, [r2, #0]
 800d542:	4621      	mov	r1, r4
 800d544:	b991      	cbnz	r1, 800d56c <_malloc_r+0x54>
 800d546:	4c20      	ldr	r4, [pc, #128]	; (800d5c8 <_malloc_r+0xb0>)
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	b91b      	cbnz	r3, 800d554 <_malloc_r+0x3c>
 800d54c:	4630      	mov	r0, r6
 800d54e:	f000 f98f 	bl	800d870 <_sbrk_r>
 800d552:	6020      	str	r0, [r4, #0]
 800d554:	4629      	mov	r1, r5
 800d556:	4630      	mov	r0, r6
 800d558:	f000 f98a 	bl	800d870 <_sbrk_r>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d124      	bne.n	800d5aa <_malloc_r+0x92>
 800d560:	230c      	movs	r3, #12
 800d562:	6033      	str	r3, [r6, #0]
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f9bf 	bl	800d8e8 <__malloc_unlock>
 800d56a:	e7e4      	b.n	800d536 <_malloc_r+0x1e>
 800d56c:	680b      	ldr	r3, [r1, #0]
 800d56e:	1b5b      	subs	r3, r3, r5
 800d570:	d418      	bmi.n	800d5a4 <_malloc_r+0x8c>
 800d572:	2b0b      	cmp	r3, #11
 800d574:	d90f      	bls.n	800d596 <_malloc_r+0x7e>
 800d576:	600b      	str	r3, [r1, #0]
 800d578:	50cd      	str	r5, [r1, r3]
 800d57a:	18cc      	adds	r4, r1, r3
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f9b3 	bl	800d8e8 <__malloc_unlock>
 800d582:	f104 000b 	add.w	r0, r4, #11
 800d586:	1d23      	adds	r3, r4, #4
 800d588:	f020 0007 	bic.w	r0, r0, #7
 800d58c:	1ac3      	subs	r3, r0, r3
 800d58e:	d0d3      	beq.n	800d538 <_malloc_r+0x20>
 800d590:	425a      	negs	r2, r3
 800d592:	50e2      	str	r2, [r4, r3]
 800d594:	e7d0      	b.n	800d538 <_malloc_r+0x20>
 800d596:	428c      	cmp	r4, r1
 800d598:	684b      	ldr	r3, [r1, #4]
 800d59a:	bf16      	itet	ne
 800d59c:	6063      	strne	r3, [r4, #4]
 800d59e:	6013      	streq	r3, [r2, #0]
 800d5a0:	460c      	movne	r4, r1
 800d5a2:	e7eb      	b.n	800d57c <_malloc_r+0x64>
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	6849      	ldr	r1, [r1, #4]
 800d5a8:	e7cc      	b.n	800d544 <_malloc_r+0x2c>
 800d5aa:	1cc4      	adds	r4, r0, #3
 800d5ac:	f024 0403 	bic.w	r4, r4, #3
 800d5b0:	42a0      	cmp	r0, r4
 800d5b2:	d005      	beq.n	800d5c0 <_malloc_r+0xa8>
 800d5b4:	1a21      	subs	r1, r4, r0
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f000 f95a 	bl	800d870 <_sbrk_r>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d0cf      	beq.n	800d560 <_malloc_r+0x48>
 800d5c0:	6025      	str	r5, [r4, #0]
 800d5c2:	e7db      	b.n	800d57c <_malloc_r+0x64>
 800d5c4:	20000264 	.word	0x20000264
 800d5c8:	20000268 	.word	0x20000268

0800d5cc <__ssputs_r>:
 800d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d0:	688e      	ldr	r6, [r1, #8]
 800d5d2:	429e      	cmp	r6, r3
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	4690      	mov	r8, r2
 800d5da:	4699      	mov	r9, r3
 800d5dc:	d837      	bhi.n	800d64e <__ssputs_r+0x82>
 800d5de:	898a      	ldrh	r2, [r1, #12]
 800d5e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5e4:	d031      	beq.n	800d64a <__ssputs_r+0x7e>
 800d5e6:	6825      	ldr	r5, [r4, #0]
 800d5e8:	6909      	ldr	r1, [r1, #16]
 800d5ea:	1a6f      	subs	r7, r5, r1
 800d5ec:	6965      	ldr	r5, [r4, #20]
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5f4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d5f8:	f109 0301 	add.w	r3, r9, #1
 800d5fc:	443b      	add	r3, r7
 800d5fe:	429d      	cmp	r5, r3
 800d600:	bf38      	it	cc
 800d602:	461d      	movcc	r5, r3
 800d604:	0553      	lsls	r3, r2, #21
 800d606:	d530      	bpl.n	800d66a <__ssputs_r+0x9e>
 800d608:	4629      	mov	r1, r5
 800d60a:	f7ff ff85 	bl	800d518 <_malloc_r>
 800d60e:	4606      	mov	r6, r0
 800d610:	b950      	cbnz	r0, 800d628 <__ssputs_r+0x5c>
 800d612:	230c      	movs	r3, #12
 800d614:	f8ca 3000 	str.w	r3, [sl]
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	f04f 30ff 	mov.w	r0, #4294967295
 800d624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d628:	463a      	mov	r2, r7
 800d62a:	6921      	ldr	r1, [r4, #16]
 800d62c:	f7ff fc32 	bl	800ce94 <memcpy>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	6126      	str	r6, [r4, #16]
 800d63e:	6165      	str	r5, [r4, #20]
 800d640:	443e      	add	r6, r7
 800d642:	1bed      	subs	r5, r5, r7
 800d644:	6026      	str	r6, [r4, #0]
 800d646:	60a5      	str	r5, [r4, #8]
 800d648:	464e      	mov	r6, r9
 800d64a:	454e      	cmp	r6, r9
 800d64c:	d900      	bls.n	800d650 <__ssputs_r+0x84>
 800d64e:	464e      	mov	r6, r9
 800d650:	4632      	mov	r2, r6
 800d652:	4641      	mov	r1, r8
 800d654:	6820      	ldr	r0, [r4, #0]
 800d656:	f000 f92d 	bl	800d8b4 <memmove>
 800d65a:	68a3      	ldr	r3, [r4, #8]
 800d65c:	1b9b      	subs	r3, r3, r6
 800d65e:	60a3      	str	r3, [r4, #8]
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	441e      	add	r6, r3
 800d664:	6026      	str	r6, [r4, #0]
 800d666:	2000      	movs	r0, #0
 800d668:	e7dc      	b.n	800d624 <__ssputs_r+0x58>
 800d66a:	462a      	mov	r2, r5
 800d66c:	f000 f93d 	bl	800d8ea <_realloc_r>
 800d670:	4606      	mov	r6, r0
 800d672:	2800      	cmp	r0, #0
 800d674:	d1e2      	bne.n	800d63c <__ssputs_r+0x70>
 800d676:	6921      	ldr	r1, [r4, #16]
 800d678:	4650      	mov	r0, sl
 800d67a:	f7ff feff 	bl	800d47c <_free_r>
 800d67e:	e7c8      	b.n	800d612 <__ssputs_r+0x46>

0800d680 <_svfiprintf_r>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	461d      	mov	r5, r3
 800d686:	898b      	ldrh	r3, [r1, #12]
 800d688:	061f      	lsls	r7, r3, #24
 800d68a:	b09d      	sub	sp, #116	; 0x74
 800d68c:	4680      	mov	r8, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	4616      	mov	r6, r2
 800d692:	d50f      	bpl.n	800d6b4 <_svfiprintf_r+0x34>
 800d694:	690b      	ldr	r3, [r1, #16]
 800d696:	b96b      	cbnz	r3, 800d6b4 <_svfiprintf_r+0x34>
 800d698:	2140      	movs	r1, #64	; 0x40
 800d69a:	f7ff ff3d 	bl	800d518 <_malloc_r>
 800d69e:	6020      	str	r0, [r4, #0]
 800d6a0:	6120      	str	r0, [r4, #16]
 800d6a2:	b928      	cbnz	r0, 800d6b0 <_svfiprintf_r+0x30>
 800d6a4:	230c      	movs	r3, #12
 800d6a6:	f8c8 3000 	str.w	r3, [r8]
 800d6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ae:	e0c8      	b.n	800d842 <_svfiprintf_r+0x1c2>
 800d6b0:	2340      	movs	r3, #64	; 0x40
 800d6b2:	6163      	str	r3, [r4, #20]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6be:	2330      	movs	r3, #48	; 0x30
 800d6c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6c4:	9503      	str	r5, [sp, #12]
 800d6c6:	f04f 0b01 	mov.w	fp, #1
 800d6ca:	4637      	mov	r7, r6
 800d6cc:	463d      	mov	r5, r7
 800d6ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d6d2:	b10b      	cbz	r3, 800d6d8 <_svfiprintf_r+0x58>
 800d6d4:	2b25      	cmp	r3, #37	; 0x25
 800d6d6:	d13e      	bne.n	800d756 <_svfiprintf_r+0xd6>
 800d6d8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d6dc:	d00b      	beq.n	800d6f6 <_svfiprintf_r+0x76>
 800d6de:	4653      	mov	r3, sl
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4640      	mov	r0, r8
 800d6e6:	f7ff ff71 	bl	800d5cc <__ssputs_r>
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	f000 80a4 	beq.w	800d838 <_svfiprintf_r+0x1b8>
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	4453      	add	r3, sl
 800d6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f6:	783b      	ldrb	r3, [r7, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f000 809d 	beq.w	800d838 <_svfiprintf_r+0x1b8>
 800d6fe:	2300      	movs	r3, #0
 800d700:	f04f 32ff 	mov.w	r2, #4294967295
 800d704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d710:	931a      	str	r3, [sp, #104]	; 0x68
 800d712:	462f      	mov	r7, r5
 800d714:	2205      	movs	r2, #5
 800d716:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d71a:	4850      	ldr	r0, [pc, #320]	; (800d85c <_svfiprintf_r+0x1dc>)
 800d71c:	f7f2 fd70 	bl	8000200 <memchr>
 800d720:	9b04      	ldr	r3, [sp, #16]
 800d722:	b9d0      	cbnz	r0, 800d75a <_svfiprintf_r+0xda>
 800d724:	06d9      	lsls	r1, r3, #27
 800d726:	bf44      	itt	mi
 800d728:	2220      	movmi	r2, #32
 800d72a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d72e:	071a      	lsls	r2, r3, #28
 800d730:	bf44      	itt	mi
 800d732:	222b      	movmi	r2, #43	; 0x2b
 800d734:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d738:	782a      	ldrb	r2, [r5, #0]
 800d73a:	2a2a      	cmp	r2, #42	; 0x2a
 800d73c:	d015      	beq.n	800d76a <_svfiprintf_r+0xea>
 800d73e:	9a07      	ldr	r2, [sp, #28]
 800d740:	462f      	mov	r7, r5
 800d742:	2000      	movs	r0, #0
 800d744:	250a      	movs	r5, #10
 800d746:	4639      	mov	r1, r7
 800d748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d74c:	3b30      	subs	r3, #48	; 0x30
 800d74e:	2b09      	cmp	r3, #9
 800d750:	d94d      	bls.n	800d7ee <_svfiprintf_r+0x16e>
 800d752:	b1b8      	cbz	r0, 800d784 <_svfiprintf_r+0x104>
 800d754:	e00f      	b.n	800d776 <_svfiprintf_r+0xf6>
 800d756:	462f      	mov	r7, r5
 800d758:	e7b8      	b.n	800d6cc <_svfiprintf_r+0x4c>
 800d75a:	4a40      	ldr	r2, [pc, #256]	; (800d85c <_svfiprintf_r+0x1dc>)
 800d75c:	1a80      	subs	r0, r0, r2
 800d75e:	fa0b f000 	lsl.w	r0, fp, r0
 800d762:	4318      	orrs	r0, r3
 800d764:	9004      	str	r0, [sp, #16]
 800d766:	463d      	mov	r5, r7
 800d768:	e7d3      	b.n	800d712 <_svfiprintf_r+0x92>
 800d76a:	9a03      	ldr	r2, [sp, #12]
 800d76c:	1d11      	adds	r1, r2, #4
 800d76e:	6812      	ldr	r2, [r2, #0]
 800d770:	9103      	str	r1, [sp, #12]
 800d772:	2a00      	cmp	r2, #0
 800d774:	db01      	blt.n	800d77a <_svfiprintf_r+0xfa>
 800d776:	9207      	str	r2, [sp, #28]
 800d778:	e004      	b.n	800d784 <_svfiprintf_r+0x104>
 800d77a:	4252      	negs	r2, r2
 800d77c:	f043 0302 	orr.w	r3, r3, #2
 800d780:	9207      	str	r2, [sp, #28]
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	783b      	ldrb	r3, [r7, #0]
 800d786:	2b2e      	cmp	r3, #46	; 0x2e
 800d788:	d10c      	bne.n	800d7a4 <_svfiprintf_r+0x124>
 800d78a:	787b      	ldrb	r3, [r7, #1]
 800d78c:	2b2a      	cmp	r3, #42	; 0x2a
 800d78e:	d133      	bne.n	800d7f8 <_svfiprintf_r+0x178>
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	1d1a      	adds	r2, r3, #4
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	9203      	str	r2, [sp, #12]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfb8      	it	lt
 800d79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7a0:	3702      	adds	r7, #2
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	4d2e      	ldr	r5, [pc, #184]	; (800d860 <_svfiprintf_r+0x1e0>)
 800d7a6:	7839      	ldrb	r1, [r7, #0]
 800d7a8:	2203      	movs	r2, #3
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f7f2 fd28 	bl	8000200 <memchr>
 800d7b0:	b138      	cbz	r0, 800d7c2 <_svfiprintf_r+0x142>
 800d7b2:	2340      	movs	r3, #64	; 0x40
 800d7b4:	1b40      	subs	r0, r0, r5
 800d7b6:	fa03 f000 	lsl.w	r0, r3, r0
 800d7ba:	9b04      	ldr	r3, [sp, #16]
 800d7bc:	4303      	orrs	r3, r0
 800d7be:	3701      	adds	r7, #1
 800d7c0:	9304      	str	r3, [sp, #16]
 800d7c2:	7839      	ldrb	r1, [r7, #0]
 800d7c4:	4827      	ldr	r0, [pc, #156]	; (800d864 <_svfiprintf_r+0x1e4>)
 800d7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7ca:	2206      	movs	r2, #6
 800d7cc:	1c7e      	adds	r6, r7, #1
 800d7ce:	f7f2 fd17 	bl	8000200 <memchr>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d038      	beq.n	800d848 <_svfiprintf_r+0x1c8>
 800d7d6:	4b24      	ldr	r3, [pc, #144]	; (800d868 <_svfiprintf_r+0x1e8>)
 800d7d8:	bb13      	cbnz	r3, 800d820 <_svfiprintf_r+0x1a0>
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	3307      	adds	r3, #7
 800d7de:	f023 0307 	bic.w	r3, r3, #7
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	9303      	str	r3, [sp, #12]
 800d7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e8:	444b      	add	r3, r9
 800d7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d7ec:	e76d      	b.n	800d6ca <_svfiprintf_r+0x4a>
 800d7ee:	fb05 3202 	mla	r2, r5, r2, r3
 800d7f2:	2001      	movs	r0, #1
 800d7f4:	460f      	mov	r7, r1
 800d7f6:	e7a6      	b.n	800d746 <_svfiprintf_r+0xc6>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	3701      	adds	r7, #1
 800d7fc:	9305      	str	r3, [sp, #20]
 800d7fe:	4619      	mov	r1, r3
 800d800:	250a      	movs	r5, #10
 800d802:	4638      	mov	r0, r7
 800d804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d808:	3a30      	subs	r2, #48	; 0x30
 800d80a:	2a09      	cmp	r2, #9
 800d80c:	d903      	bls.n	800d816 <_svfiprintf_r+0x196>
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0c8      	beq.n	800d7a4 <_svfiprintf_r+0x124>
 800d812:	9105      	str	r1, [sp, #20]
 800d814:	e7c6      	b.n	800d7a4 <_svfiprintf_r+0x124>
 800d816:	fb05 2101 	mla	r1, r5, r1, r2
 800d81a:	2301      	movs	r3, #1
 800d81c:	4607      	mov	r7, r0
 800d81e:	e7f0      	b.n	800d802 <_svfiprintf_r+0x182>
 800d820:	ab03      	add	r3, sp, #12
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	4622      	mov	r2, r4
 800d826:	4b11      	ldr	r3, [pc, #68]	; (800d86c <_svfiprintf_r+0x1ec>)
 800d828:	a904      	add	r1, sp, #16
 800d82a:	4640      	mov	r0, r8
 800d82c:	f7fe f8d6 	bl	800b9dc <_printf_float>
 800d830:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d834:	4681      	mov	r9, r0
 800d836:	d1d6      	bne.n	800d7e6 <_svfiprintf_r+0x166>
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	065b      	lsls	r3, r3, #25
 800d83c:	f53f af35 	bmi.w	800d6aa <_svfiprintf_r+0x2a>
 800d840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d842:	b01d      	add	sp, #116	; 0x74
 800d844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d848:	ab03      	add	r3, sp, #12
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	4622      	mov	r2, r4
 800d84e:	4b07      	ldr	r3, [pc, #28]	; (800d86c <_svfiprintf_r+0x1ec>)
 800d850:	a904      	add	r1, sp, #16
 800d852:	4640      	mov	r0, r8
 800d854:	f7fe fb78 	bl	800bf48 <_printf_i>
 800d858:	e7ea      	b.n	800d830 <_svfiprintf_r+0x1b0>
 800d85a:	bf00      	nop
 800d85c:	0800deac 	.word	0x0800deac
 800d860:	0800deb2 	.word	0x0800deb2
 800d864:	0800deb6 	.word	0x0800deb6
 800d868:	0800b9dd 	.word	0x0800b9dd
 800d86c:	0800d5cd 	.word	0x0800d5cd

0800d870 <_sbrk_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	4c06      	ldr	r4, [pc, #24]	; (800d88c <_sbrk_r+0x1c>)
 800d874:	2300      	movs	r3, #0
 800d876:	4605      	mov	r5, r0
 800d878:	4608      	mov	r0, r1
 800d87a:	6023      	str	r3, [r4, #0]
 800d87c:	f7f9 ff82 	bl	8007784 <_sbrk>
 800d880:	1c43      	adds	r3, r0, #1
 800d882:	d102      	bne.n	800d88a <_sbrk_r+0x1a>
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	b103      	cbz	r3, 800d88a <_sbrk_r+0x1a>
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	bd38      	pop	{r3, r4, r5, pc}
 800d88c:	20003414 	.word	0x20003414

0800d890 <__ascii_mbtowc>:
 800d890:	b082      	sub	sp, #8
 800d892:	b901      	cbnz	r1, 800d896 <__ascii_mbtowc+0x6>
 800d894:	a901      	add	r1, sp, #4
 800d896:	b142      	cbz	r2, 800d8aa <__ascii_mbtowc+0x1a>
 800d898:	b14b      	cbz	r3, 800d8ae <__ascii_mbtowc+0x1e>
 800d89a:	7813      	ldrb	r3, [r2, #0]
 800d89c:	600b      	str	r3, [r1, #0]
 800d89e:	7812      	ldrb	r2, [r2, #0]
 800d8a0:	1c10      	adds	r0, r2, #0
 800d8a2:	bf18      	it	ne
 800d8a4:	2001      	movne	r0, #1
 800d8a6:	b002      	add	sp, #8
 800d8a8:	4770      	bx	lr
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	e7fb      	b.n	800d8a6 <__ascii_mbtowc+0x16>
 800d8ae:	f06f 0001 	mvn.w	r0, #1
 800d8b2:	e7f8      	b.n	800d8a6 <__ascii_mbtowc+0x16>

0800d8b4 <memmove>:
 800d8b4:	4288      	cmp	r0, r1
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	eb01 0302 	add.w	r3, r1, r2
 800d8bc:	d807      	bhi.n	800d8ce <memmove+0x1a>
 800d8be:	1e42      	subs	r2, r0, #1
 800d8c0:	4299      	cmp	r1, r3
 800d8c2:	d00a      	beq.n	800d8da <memmove+0x26>
 800d8c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d8cc:	e7f8      	b.n	800d8c0 <memmove+0xc>
 800d8ce:	4283      	cmp	r3, r0
 800d8d0:	d9f5      	bls.n	800d8be <memmove+0xa>
 800d8d2:	1881      	adds	r1, r0, r2
 800d8d4:	1ad2      	subs	r2, r2, r3
 800d8d6:	42d3      	cmn	r3, r2
 800d8d8:	d100      	bne.n	800d8dc <memmove+0x28>
 800d8da:	bd10      	pop	{r4, pc}
 800d8dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d8e4:	e7f7      	b.n	800d8d6 <memmove+0x22>

0800d8e6 <__malloc_lock>:
 800d8e6:	4770      	bx	lr

0800d8e8 <__malloc_unlock>:
 800d8e8:	4770      	bx	lr

0800d8ea <_realloc_r>:
 800d8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ec:	4607      	mov	r7, r0
 800d8ee:	4614      	mov	r4, r2
 800d8f0:	460e      	mov	r6, r1
 800d8f2:	b921      	cbnz	r1, 800d8fe <_realloc_r+0x14>
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8fa:	f7ff be0d 	b.w	800d518 <_malloc_r>
 800d8fe:	b922      	cbnz	r2, 800d90a <_realloc_r+0x20>
 800d900:	f7ff fdbc 	bl	800d47c <_free_r>
 800d904:	4625      	mov	r5, r4
 800d906:	4628      	mov	r0, r5
 800d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d90a:	f000 f821 	bl	800d950 <_malloc_usable_size_r>
 800d90e:	42a0      	cmp	r0, r4
 800d910:	d20f      	bcs.n	800d932 <_realloc_r+0x48>
 800d912:	4621      	mov	r1, r4
 800d914:	4638      	mov	r0, r7
 800d916:	f7ff fdff 	bl	800d518 <_malloc_r>
 800d91a:	4605      	mov	r5, r0
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d0f2      	beq.n	800d906 <_realloc_r+0x1c>
 800d920:	4631      	mov	r1, r6
 800d922:	4622      	mov	r2, r4
 800d924:	f7ff fab6 	bl	800ce94 <memcpy>
 800d928:	4631      	mov	r1, r6
 800d92a:	4638      	mov	r0, r7
 800d92c:	f7ff fda6 	bl	800d47c <_free_r>
 800d930:	e7e9      	b.n	800d906 <_realloc_r+0x1c>
 800d932:	4635      	mov	r5, r6
 800d934:	e7e7      	b.n	800d906 <_realloc_r+0x1c>

0800d936 <__ascii_wctomb>:
 800d936:	b149      	cbz	r1, 800d94c <__ascii_wctomb+0x16>
 800d938:	2aff      	cmp	r2, #255	; 0xff
 800d93a:	bf85      	ittet	hi
 800d93c:	238a      	movhi	r3, #138	; 0x8a
 800d93e:	6003      	strhi	r3, [r0, #0]
 800d940:	700a      	strbls	r2, [r1, #0]
 800d942:	f04f 30ff 	movhi.w	r0, #4294967295
 800d946:	bf98      	it	ls
 800d948:	2001      	movls	r0, #1
 800d94a:	4770      	bx	lr
 800d94c:	4608      	mov	r0, r1
 800d94e:	4770      	bx	lr

0800d950 <_malloc_usable_size_r>:
 800d950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d954:	1f18      	subs	r0, r3, #4
 800d956:	2b00      	cmp	r3, #0
 800d958:	bfbc      	itt	lt
 800d95a:	580b      	ldrlt	r3, [r1, r0]
 800d95c:	18c0      	addlt	r0, r0, r3
 800d95e:	4770      	bx	lr

0800d960 <_init>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr

0800d96c <_fini>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr
