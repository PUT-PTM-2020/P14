<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Weather Station</title>

  <style>
    a.tilelink {
      text-decoration: none;
      height: 80px;
      color: #ffffff;
    }

    a.tilelink:hover {
      text-decoration: none;
      height: 80px;
      color: #ffffff;
    }

    a.tilelink1 {
      text-decoration: none;
      height: 40px;
      color: #ffffff;
      font-family: Verdana;
    }

    a.tilelink1:hover {
      text-decoration: none;
      height: 40px;
      color: #ffffff;
    }

    tr {
      text-align: center
    }

    .bg-secondary {
      background-color: darkgray;
    }
  </style>

  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
</head>

<body class="bg-secondary">

  <section id="top">
    <nav class="navbar navbar-dark bg-dark flex-column">
      <a href="./" class="tilelink">
        <font size="7">Weather Station</font>
      </a>
      <a class="tilelink1 text-white">
        <font size="4">Data</font>
      </a>
      <a href="about" class="tilelink1">
        <font size="4">About</font>
      </a>
    </nav>
  </section>

  <div class="my-5"></div>

  <section>
    <div class="container-fluid">
      <h4 id="error" class="text-white text-center m-0">Weather data available on the device</h4>
    </div>
    <hr class="my-4">
    <div id="phase1">
      <p id="info" class="lead text-white text-center"></p>
      <div class="my-2"></div>
      <form>
        <div class="container-fluid col-md-4">
          <div id="amount" class="form-group text-center text-white" style="display: none;">
            <input type="number" min="0" class="form-control mb-2 mr-sm-2 mb-sm-0" id="offset-field"
              placeholder="Offset">
            <div class="my-3"></div>

            <input type="number" min="0" class="form-control mb-2 mr-sm-2 mb-sm-0" id="amount-field"
              placeholder="Amount">
            <div class="my-3"></div>

            <div class="form-group">
              <select class="form-control" id="form-field">
                <option value="raw">Raw data</option>
                <option value="line">Line chart</option>
              </select>
            </div>
            <div class="my-3"></div>

            <button type="button" onclick="getData()" class="btn btn-light">Submit</button>
          </div>
        </div>
      </form>
    </div>
  </section>

  <div class="my-5"></div>


  <div class="row justify-content-center">
    <div class="col-auto">
      <table class="table table-responsive table-dark" id="table" style="width: 100%;display: none;">
        <thead>
          <tr>
            <th>No.</th>
            <th>Record ID</th>
            <th>Inner Sensor?</th>
            <th>Temperature [C]</th>
            <th>Humidity [%]</th>
            <th>Date</th>
            <th>Time</th>
          </tr>
        </thead>
        <tbody id="fetched_data">
        </tbody>
      </table>
    </div>
  </div>

  <div class="d-flex justify-content-center">
    <div id="spinner" class="spinner-grow" role="status">
      <span class="sr-only">Loading data...</span>
    </div>

    <div class="container-fluid" id="progress-bar" style="display: none;">
      <div class="progress">
        <div id="progress-bar-handle" class="progress-bar bg-warning progress-bar-striped progress-bar-animated"
          role="progressbar" style="width: 25%"></div>
      </div>
    </div>
  </div>

  <div class="my-5"></div>

  <div id="chart" class="container-fluid text-center" style="display: none;">
    <canvas id="data-chart" width="400" height="400"></canvas>

    <div class="my-3"></div>

    <button type=" button" onclick="downloadChart()" class="btn btn-light">Download as PNG</button>
  </div>

  <div class="my-5"></div>

  <footer class="bg-black small text-center text-white-50">
    <div class="container">
      2020 &copy COPYRIGHT BY POZNAN UNIVERSITY OF TECHNOLOGY | All rights reserved
    </div>
  </footer>

  <div class="my-2"></div>

</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
<script type="text/javascript">

  var url = window.location.href;
  var amount = 0;
  var lastName = 0;

  let to = url.lastIndexOf('/');
  to = to == -1 ? url.length : to + 1;
  url = url.substring(0, to);

  window.onload = function () {
    setTimeout(() => {
      console.log('fetching all');

      fetch(url + 'all')
        .then(res => res.json())
        .then(obj => {
          console.log(obj)
          amount = obj.amount;
          lastName = obj.last;
          document.getElementById('info').innerHTML = 'The device has <b>' + obj.amount + '</b> logs.<br>Please specify the amount to fetch, the offset (0 means latest logs) and data representation.';
          document.getElementById('amount').style.display = 'block';
          document.getElementById('spinner').style.display = 'none';
        })
        .catch(e => console.log(e));
    }, 2000);
  };

  async function fetchJson(address) {
    let response = await fetch(address);
    let data = await response.json()
    return data;
  }

  function containsLog(list, obj) {
    for (let i = 0; i < list.length; i++) {
      if (list[i].id == obj.id) {
        return true;
      }
    }
    return false;
  }

  function getData() {
    var offset = parseInt(document.getElementById('offset-field').value);
    var N = parseInt(document.getElementById('amount-field').value);

    let formField = document.getElementById("form-field");
    var form = formField.options[formField.selectedIndex].value;

    if (!Number.isInteger(offset) || offset < 0) {
      document.getElementById('error').innerHTML = 'Given offset is not a positive integer';
      return;
    } else if (!Number.isInteger(N) || N < 0) {
      document.getElementById('error').innerHTML = 'Given amount is not a positive integer';
      return;
    } else if (N == 0) {
      document.getElementById('error').innerHTML = 'Won\'t fetch nothing';
      return;
    }

    document.getElementById('error').innerHTML = 'Weather data available on the device';
    document.getElementById('spinner').style.display = 'block';
    document.getElementById('phase1').style.display = 'none';

    let ix = 0;
    var fetchedData = [];
    var fileNames = [];
    let paused = false;

    lastName -= offset;

    for (let i = lastName; i > (lastName - N); i--) {
      fileNames.push(i.toString().padStart(8, '0') + '.JSO')
    }

    let outID = setInterval(() => {
      let log = localStorage.getItem(fileNames[ix]);
      let isNew = false;

      if (log != null) {
        fetchedData.push(JSON.parse(log));
        isNew = true;

      } else if (!paused) {
        console.log('need to fetch at ix =', ix);
        paused = true;

        fetchJson(url + fileNames[ix])
          .then(obj => {
            if (!containsLog(fetchedData, obj)) {
              console.log('fetched!');

              fetchedData.push(obj);
              localStorage.setItem(fileNames[ix], JSON.stringify(obj));
              isNew = true;
              paused = false;
            }
          })
          .catch(e => paused = false)
      }


      if (isNew) {
        if (fetchedData[fetchedData.length - 1].last == -1) {
          document.getElementById('error').innerHTML = 'A log cannot be read from the SD card.';
          fetchedData.pop();
        }

        if (form === "raw") {
          document.getElementById('table').style.display = 'block';

          createTableRow(ix, fetchedData[fetchedData.length - 1]);

        } else {
          document.getElementById('spinner').style.display = 'none';
          document.getElementById('progress-bar').style.display = 'block';

          let width = Math.round((fetchedData.length / N) * 100);
          document.getElementById('progress-bar-handle').setAttribute('style', 'width:' + width + '%;');
        }

        ix++;
      }

      if (ix >= N) {
        console.log('exiting at ix =', ix);
        document.getElementById('spinner').style.display = 'none';

        if (form != "raw") {
          console.log(fetchedData)
          drawChart(fetchedData);
        }

        clearInterval(outID);
        return;
      }
    }, 500)
  }

  function createTableRow(index, obj) {
    let row = document.createElement('tr');
    document.getElementById('fetched_data').appendChild(row);

    let nCell = document.createElement('td');
    nCell.setAttribute('class', 'text-white ')
    nCell.textContent = index + 1;
    row.appendChild(nCell);

    Object.keys(obj).forEach(key => {
      let data = document.createElement('td');
      data.setAttribute('class', 'text-white ')
      data.textContent = obj[key];
      row.appendChild(data);
    });
  }

  function removeElement(elementId) {
    var element = document.getElementById(elementId);
    element.parentNode.removeChild(element);
  }

  function drawChart(fetchedData) {
    document.getElementById('chart').style.display = 'block';
    document.getElementById('spinner').style.display = 'none';
    document.getElementById('progress-bar').style.display = 'none';

    Chart.defaults.global.defaultFontColor = 'white';
    Chart.defaults.global.defaultFontSize = 16;
    Chart.defaults.global.defaultFontFamily = 'Verdana';

    var ctx = document.getElementById('data-chart').getContext('2d');

    var xData = [];

    var humData = [];
    var tempData = [];
    var humDataOut = [];
    var tempDataOut = [];

    fetchedData.reverse();

    fetchedData.forEach((item, index) => {
      xData.push(item.time.slice(0, -3) + '-' + item.date.slice(0, -3));
      if (item.inn) {
        humData.push(item.hum);
        tempData.push(item.temp);
      } else {
        humDataOut.push(item.hum);
        tempDataOut.push(item.temp);
      }
    });

    var data = {
      labels: xData,
      datasets: [{
        label: "Humidity (inner) [%]",
        borderColor: "blue",
        data: humData,
      }, {
        label: "Humidity (outer) [%]",
        borderColor: "green",
        data: humDataOut,
      }, {
        label: "Temperature (inner) [C]",
        borderColor: "red",
        data: tempData,
      }, {
        label: "Temperature (outer) [C]",
        borderColor: "orange",
        data: tempDataOut,
      }
      ]
    };

    var options = {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }],
        xAxes: [{
          gridLines: {
            tickMarkLength: 15
          },
        }]
      }
    };

    var myChart = new Chart(ctx, {
      type: 'line',
      data: data,
      options: options
    });

    removeElement("progress-bar");
  }

  function downloadChart() {
    let link = document.createElement("a");

    let date = new Date();
    let day = date.getDate().toString().padStart(2, '0');
    let month = (date.getMonth() + 1).toString().padStart(2, '0');
    let year = date.getFullYear().toString().substring(2);

    let hour = date.getHours().toString().padStart(2, '0');
    let minute = date.getMinutes().toString().padStart(2, '0');

    link.download = day + '.' + month + '.' + year + '-' + hour + ':' + minute + "_STM_WS.png";
    link.href = document.getElementById("data-chart").toDataURL("image/png").replace("image/png", "image/octet-stream");
    link.click();
  }
</script>

</html>